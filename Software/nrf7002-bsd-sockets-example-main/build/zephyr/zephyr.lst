
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#endif /* CONFIG_NET_IP */

int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
   0:	90 cf 00 20 9d 6a 00 00 83 ff 01 00 71 6a 00 00     ... .j......qj..
	}

	int ret = DNS_EAI_FAIL;

#if defined(ANY_RESOLVER)
	*res = calloc(AI_ARR_MAX, sizeof(struct zsock_addrinfo));
  10:	71 6a 00 00 71 6a 00 00 71 6a 00 00 71 6a 00 00     qj..qj..qj..qj..
	...
		if (hints->ai_socktype == SOCK_DGRAM) {
  2c:	85 63 00 00 71 6a 00 00 00 00 00 00 2d 63 00 00     .c..qj......-c..
	result = net_ipaddr_parse(host, strlen(host), &res->_ai_addr);
  3c:	71 6a 00 00                                         qj..

00000040 <_irq_vector_table>:
  40:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
	if ((family != AF_UNSPEC) && (resolved_family != family)) {
  50:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
		port = strtol(service, NULL, 10);
  60:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
	}
#endif

#if defined(ANY_RESOLVER)
	if (ret) {
		free(*res);
  70:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
	int protocol = IPPROTO_TCP;
  80:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
	long port = 0;
  90:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
	switch (resolved_family) {
  a0:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
		INIT_ADDRINFO(res, addr);
  b0:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
		addr->sin6_port = htons(port);
  c0:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
		return DNS_EAI_MEMORY;
  d0:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
  e0:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
  f0:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
 100:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
 110:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
 120:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
 130:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
 140:	05 64 00 00 05 64 00 00 05 64 00 00 05 64 00 00     .d...d...d...d..
 150:	05 64 00 00                                         .d..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x52>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <CONFIG_SRAM_SIZE+0x14>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_PHY_MONITOR_PERIOD+0x22>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_PHY_MONITOR_PERIOD+0x40>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_PHY_MONITOR_PERIOD+0x56>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_PHY_MONITOR_PERIOD+0x7c>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_PHY_MONITOR_PERIOD+0x7c>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x52>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x68>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <CONFIG_SRAM_SIZE+0x30>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x76>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_PHY_MONITOR_PERIOD+0x56>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_PHY_MONITOR_PERIOD+0x56>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x6c>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xc8>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x58>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x28>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x52>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x36>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x56>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x96>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x2c>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xb2>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xc4>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xc4>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x88>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x2c>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xc4>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0x88>
     8f2:	e712      	b.n	71a <CONFIG_NRF700X_RX_MAX_DATA_SIZE+0xda>

000008f4 <__aeabi_d2uiz>:
     8f4:	004a      	lsls	r2, r1, #1
     8f6:	d211      	bcs.n	91c <__aeabi_d2uiz+0x28>
     8f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8fc:	d211      	bcs.n	922 <__aeabi_d2uiz+0x2e>
     8fe:	d50d      	bpl.n	91c <__aeabi_d2uiz+0x28>
     900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     908:	d40e      	bmi.n	928 <__aeabi_d2uiz+0x34>
     90a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     90e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     916:	fa23 f002 	lsr.w	r0, r3, r2
     91a:	4770      	bx	lr
     91c:	f04f 0000 	mov.w	r0, #0
     920:	4770      	bx	lr
     922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     926:	d102      	bne.n	92e <__aeabi_d2uiz+0x3a>
     928:	f04f 30ff 	mov.w	r0, #4294967295
     92c:	4770      	bx	lr
     92e:	f04f 0000 	mov.w	r0, #0
     932:	4770      	bx	lr

00000934 <__aeabi_ldivmod>:
     934:	b97b      	cbnz	r3, 956 <__aeabi_ldivmod+0x22>
     936:	b972      	cbnz	r2, 956 <__aeabi_ldivmod+0x22>
     938:	2900      	cmp	r1, #0
     93a:	bfbe      	ittt	lt
     93c:	2000      	movlt	r0, #0
     93e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     942:	e006      	blt.n	952 <__aeabi_ldivmod+0x1e>
     944:	bf08      	it	eq
     946:	2800      	cmpeq	r0, #0
     948:	bf1c      	itt	ne
     94a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     94e:	f04f 30ff 	movne.w	r0, #4294967295
     952:	f000 b875 	b.w	a40 <__aeabi_idiv0>
     956:	f1ad 0c08 	sub.w	ip, sp, #8
     95a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95e:	2900      	cmp	r1, #0
     960:	db09      	blt.n	976 <__aeabi_ldivmod+0x42>
     962:	2b00      	cmp	r3, #0
     964:	db1a      	blt.n	99c <__aeabi_ldivmod+0x68>
     966:	f000 fa87 	bl	e78 <__udivmoddi4>
     96a:	f8dd e004 	ldr.w	lr, [sp, #4]
     96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     972:	b004      	add	sp, #16
     974:	4770      	bx	lr
     976:	4240      	negs	r0, r0
     978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     97c:	2b00      	cmp	r3, #0
     97e:	db1b      	blt.n	9b8 <__aeabi_ldivmod+0x84>
     980:	f000 fa7a 	bl	e78 <__udivmoddi4>
     984:	f8dd e004 	ldr.w	lr, [sp, #4]
     988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     98c:	b004      	add	sp, #16
     98e:	4240      	negs	r0, r0
     990:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     994:	4252      	negs	r2, r2
     996:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     99a:	4770      	bx	lr
     99c:	4252      	negs	r2, r2
     99e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     9a2:	f000 fa69 	bl	e78 <__udivmoddi4>
     9a6:	f8dd e004 	ldr.w	lr, [sp, #4]
     9aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9ae:	b004      	add	sp, #16
     9b0:	4240      	negs	r0, r0
     9b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     9b6:	4770      	bx	lr
     9b8:	4252      	negs	r2, r2
     9ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     9be:	f000 fa5b 	bl	e78 <__udivmoddi4>
     9c2:	f8dd e004 	ldr.w	lr, [sp, #4]
     9c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9ca:	b004      	add	sp, #16
     9cc:	4252      	negs	r2, r2
     9ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     9d2:	4770      	bx	lr

000009d4 <__aeabi_uldivmod>:
     9d4:	b953      	cbnz	r3, 9ec <__aeabi_uldivmod+0x18>
     9d6:	b94a      	cbnz	r2, 9ec <__aeabi_uldivmod+0x18>
     9d8:	2900      	cmp	r1, #0
     9da:	bf08      	it	eq
     9dc:	2800      	cmpeq	r0, #0
     9de:	bf1c      	itt	ne
     9e0:	f04f 31ff 	movne.w	r1, #4294967295
     9e4:	f04f 30ff 	movne.w	r0, #4294967295
     9e8:	f000 b82a 	b.w	a40 <__aeabi_idiv0>
     9ec:	f1ad 0c08 	sub.w	ip, sp, #8
     9f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9f4:	f000 fa40 	bl	e78 <__udivmoddi4>
     9f8:	f8dd e004 	ldr.w	lr, [sp, #4]
     9fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a00:	b004      	add	sp, #16
     a02:	4770      	bx	lr

00000a04 <__aeabi_d2ulz>:
     a04:	b5d0      	push	{r4, r6, r7, lr}
     a06:	2200      	movs	r2, #0
     a08:	4b0b      	ldr	r3, [pc, #44]	; (a38 <__aeabi_d2ulz+0x34>)
     a0a:	4606      	mov	r6, r0
     a0c:	460f      	mov	r7, r1
     a0e:	f7ff fd5f 	bl	4d0 <__aeabi_dmul>
     a12:	f7ff ff6f 	bl	8f4 <__aeabi_d2uiz>
     a16:	4604      	mov	r4, r0
     a18:	f7ff fce0 	bl	3dc <__aeabi_ui2d>
     a1c:	2200      	movs	r2, #0
     a1e:	4b07      	ldr	r3, [pc, #28]	; (a3c <__aeabi_d2ulz+0x38>)
     a20:	f7ff fd56 	bl	4d0 <__aeabi_dmul>
     a24:	4602      	mov	r2, r0
     a26:	460b      	mov	r3, r1
     a28:	4630      	mov	r0, r6
     a2a:	4639      	mov	r1, r7
     a2c:	f7ff fb98 	bl	160 <__aeabi_dsub>
     a30:	f7ff ff60 	bl	8f4 <__aeabi_d2uiz>
     a34:	4621      	mov	r1, r4
     a36:	bdd0      	pop	{r4, r6, r7, pc}
     a38:	3df00000 	.word	0x3df00000
     a3c:	41f00000 	.word	0x41f00000

00000a40 <__aeabi_idiv0>:
     a40:	4770      	bx	lr
     a42:	bf00      	nop

00000a44 <__gedf2>:
     a44:	f04f 3cff 	mov.w	ip, #4294967295
     a48:	e006      	b.n	a58 <__cmpdf2+0x4>
     a4a:	bf00      	nop

00000a4c <__ledf2>:
     a4c:	f04f 0c01 	mov.w	ip, #1
     a50:	e002      	b.n	a58 <__cmpdf2+0x4>
     a52:	bf00      	nop

00000a54 <__cmpdf2>:
     a54:	f04f 0c01 	mov.w	ip, #1
     a58:	f84d cd04 	str.w	ip, [sp, #-4]!
     a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a68:	bf18      	it	ne
     a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a6e:	d01b      	beq.n	aa8 <__cmpdf2+0x54>
     a70:	b001      	add	sp, #4
     a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a76:	bf0c      	ite	eq
     a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a7c:	ea91 0f03 	teqne	r1, r3
     a80:	bf02      	ittt	eq
     a82:	ea90 0f02 	teqeq	r0, r2
     a86:	2000      	moveq	r0, #0
     a88:	4770      	bxeq	lr
     a8a:	f110 0f00 	cmn.w	r0, #0
     a8e:	ea91 0f03 	teq	r1, r3
     a92:	bf58      	it	pl
     a94:	4299      	cmppl	r1, r3
     a96:	bf08      	it	eq
     a98:	4290      	cmpeq	r0, r2
     a9a:	bf2c      	ite	cs
     a9c:	17d8      	asrcs	r0, r3, #31
     a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     aa2:	f040 0001 	orr.w	r0, r0, #1
     aa6:	4770      	bx	lr
     aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     ab0:	d102      	bne.n	ab8 <__cmpdf2+0x64>
     ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     ab6:	d107      	bne.n	ac8 <__cmpdf2+0x74>
     ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     ac0:	d1d6      	bne.n	a70 <__cmpdf2+0x1c>
     ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ac6:	d0d3      	beq.n	a70 <__cmpdf2+0x1c>
     ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
     acc:	4770      	bx	lr
     ace:	bf00      	nop

00000ad0 <__aeabi_cdrcmple>:
     ad0:	4684      	mov	ip, r0
     ad2:	4610      	mov	r0, r2
     ad4:	4662      	mov	r2, ip
     ad6:	468c      	mov	ip, r1
     ad8:	4619      	mov	r1, r3
     ada:	4663      	mov	r3, ip
     adc:	e000      	b.n	ae0 <__aeabi_cdcmpeq>
     ade:	bf00      	nop

00000ae0 <__aeabi_cdcmpeq>:
     ae0:	b501      	push	{r0, lr}
     ae2:	f7ff ffb7 	bl	a54 <__cmpdf2>
     ae6:	2800      	cmp	r0, #0
     ae8:	bf48      	it	mi
     aea:	f110 0f00 	cmnmi.w	r0, #0
     aee:	bd01      	pop	{r0, pc}

00000af0 <__aeabi_dcmpeq>:
     af0:	f84d ed08 	str.w	lr, [sp, #-8]!
     af4:	f7ff fff4 	bl	ae0 <__aeabi_cdcmpeq>
     af8:	bf0c      	ite	eq
     afa:	2001      	moveq	r0, #1
     afc:	2000      	movne	r0, #0
     afe:	f85d fb08 	ldr.w	pc, [sp], #8
     b02:	bf00      	nop

00000b04 <__aeabi_dcmplt>:
     b04:	f84d ed08 	str.w	lr, [sp, #-8]!
     b08:	f7ff ffea 	bl	ae0 <__aeabi_cdcmpeq>
     b0c:	bf34      	ite	cc
     b0e:	2001      	movcc	r0, #1
     b10:	2000      	movcs	r0, #0
     b12:	f85d fb08 	ldr.w	pc, [sp], #8
     b16:	bf00      	nop

00000b18 <__aeabi_dcmple>:
     b18:	f84d ed08 	str.w	lr, [sp, #-8]!
     b1c:	f7ff ffe0 	bl	ae0 <__aeabi_cdcmpeq>
     b20:	bf94      	ite	ls
     b22:	2001      	movls	r0, #1
     b24:	2000      	movhi	r0, #0
     b26:	f85d fb08 	ldr.w	pc, [sp], #8
     b2a:	bf00      	nop

00000b2c <__aeabi_dcmpge>:
     b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
     b30:	f7ff ffce 	bl	ad0 <__aeabi_cdrcmple>
     b34:	bf94      	ite	ls
     b36:	2001      	movls	r0, #1
     b38:	2000      	movhi	r0, #0
     b3a:	f85d fb08 	ldr.w	pc, [sp], #8
     b3e:	bf00      	nop

00000b40 <__aeabi_dcmpgt>:
     b40:	f84d ed08 	str.w	lr, [sp, #-8]!
     b44:	f7ff ffc4 	bl	ad0 <__aeabi_cdrcmple>
     b48:	bf34      	ite	cc
     b4a:	2001      	movcc	r0, #1
     b4c:	2000      	movcs	r0, #0
     b4e:	f85d fb08 	ldr.w	pc, [sp], #8
     b52:	bf00      	nop

00000b54 <memcpy>:
     b54:	4684      	mov	ip, r0
     b56:	ea41 0300 	orr.w	r3, r1, r0
     b5a:	f013 0303 	ands.w	r3, r3, #3
     b5e:	d149      	bne.n	bf4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x3c>
     b60:	3a40      	subs	r2, #64	; 0x40
     b62:	d323      	bcc.n	bac <memcpy+0x58>
     b64:	680b      	ldr	r3, [r1, #0]
     b66:	6003      	str	r3, [r0, #0]
     b68:	684b      	ldr	r3, [r1, #4]
     b6a:	6043      	str	r3, [r0, #4]
     b6c:	688b      	ldr	r3, [r1, #8]
     b6e:	6083      	str	r3, [r0, #8]
     b70:	68cb      	ldr	r3, [r1, #12]
     b72:	60c3      	str	r3, [r0, #12]
     b74:	690b      	ldr	r3, [r1, #16]
     b76:	6103      	str	r3, [r0, #16]
     b78:	694b      	ldr	r3, [r1, #20]
     b7a:	6143      	str	r3, [r0, #20]
     b7c:	698b      	ldr	r3, [r1, #24]
     b7e:	6183      	str	r3, [r0, #24]
     b80:	69cb      	ldr	r3, [r1, #28]
     b82:	61c3      	str	r3, [r0, #28]
     b84:	6a0b      	ldr	r3, [r1, #32]
     b86:	6203      	str	r3, [r0, #32]
     b88:	6a4b      	ldr	r3, [r1, #36]	; 0x24
     b8a:	6243      	str	r3, [r0, #36]	; 0x24
     b8c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     b8e:	6283      	str	r3, [r0, #40]	; 0x28
     b90:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     b92:	62c3      	str	r3, [r0, #44]	; 0x2c
     b94:	6b0b      	ldr	r3, [r1, #48]	; 0x30
     b96:	6303      	str	r3, [r0, #48]	; 0x30
     b98:	6b4b      	ldr	r3, [r1, #52]	; 0x34
     b9a:	6343      	str	r3, [r0, #52]	; 0x34
     b9c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
     b9e:	6383      	str	r3, [r0, #56]	; 0x38
     ba0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
     ba2:	63c3      	str	r3, [r0, #60]	; 0x3c
     ba4:	3040      	adds	r0, #64	; 0x40
     ba6:	3140      	adds	r1, #64	; 0x40
     ba8:	3a40      	subs	r2, #64	; 0x40
     baa:	d2db      	bcs.n	b64 <memcpy+0x10>
     bac:	3230      	adds	r2, #48	; 0x30
     bae:	d30b      	bcc.n	bc8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10>
     bb0:	680b      	ldr	r3, [r1, #0]
     bb2:	6003      	str	r3, [r0, #0]
     bb4:	684b      	ldr	r3, [r1, #4]
     bb6:	6043      	str	r3, [r0, #4]
     bb8:	688b      	ldr	r3, [r1, #8]
     bba:	6083      	str	r3, [r0, #8]
     bbc:	68cb      	ldr	r3, [r1, #12]
     bbe:	60c3      	str	r3, [r0, #12]
     bc0:	3010      	adds	r0, #16
     bc2:	3110      	adds	r1, #16
     bc4:	3a10      	subs	r2, #16
     bc6:	d2f3      	bcs.n	bb0 <memcpy+0x5c>
     bc8:	320c      	adds	r2, #12
     bca:	d305      	bcc.n	bd8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x20>
     bcc:	f851 3b04 	ldr.w	r3, [r1], #4
     bd0:	f840 3b04 	str.w	r3, [r0], #4
     bd4:	3a04      	subs	r2, #4
     bd6:	d2f9      	bcs.n	bcc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x14>
     bd8:	3204      	adds	r2, #4
     bda:	d008      	beq.n	bee <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x36>
     bdc:	07d2      	lsls	r2, r2, #31
     bde:	bf1c      	itt	ne
     be0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     be4:	f800 3b01 	strbne.w	r3, [r0], #1
     be8:	d301      	bcc.n	bee <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x36>
     bea:	880b      	ldrh	r3, [r1, #0]
     bec:	8003      	strh	r3, [r0, #0]
     bee:	4660      	mov	r0, ip
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	2a08      	cmp	r2, #8
     bf6:	d313      	bcc.n	c20 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x68>
     bf8:	078b      	lsls	r3, r1, #30
     bfa:	d0b1      	beq.n	b60 <memcpy+0xc>
     bfc:	f010 0303 	ands.w	r3, r0, #3
     c00:	d0ae      	beq.n	b60 <memcpy+0xc>
     c02:	f1c3 0304 	rsb	r3, r3, #4
     c06:	1ad2      	subs	r2, r2, r3
     c08:	07db      	lsls	r3, r3, #31
     c0a:	bf1c      	itt	ne
     c0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
     c10:	f800 3b01 	strbne.w	r3, [r0], #1
     c14:	d3a4      	bcc.n	b60 <memcpy+0xc>
     c16:	f831 3b02 	ldrh.w	r3, [r1], #2
     c1a:	f820 3b02 	strh.w	r3, [r0], #2
     c1e:	e79f      	b.n	b60 <memcpy+0xc>
     c20:	3a04      	subs	r2, #4
     c22:	d3d9      	bcc.n	bd8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x20>
     c24:	3a01      	subs	r2, #1
     c26:	f811 3b01 	ldrb.w	r3, [r1], #1
     c2a:	f800 3b01 	strb.w	r3, [r0], #1
     c2e:	d2f9      	bcs.n	c24 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x6c>
     c30:	780b      	ldrb	r3, [r1, #0]
     c32:	7003      	strb	r3, [r0, #0]
     c34:	784b      	ldrb	r3, [r1, #1]
     c36:	7043      	strb	r3, [r0, #1]
     c38:	788b      	ldrb	r3, [r1, #2]
     c3a:	7083      	strb	r3, [r0, #2]
     c3c:	4660      	mov	r0, ip
     c3e:	4770      	bx	lr

00000c40 <strcmp>:
     c40:	ea80 0c01 	eor.w	ip, r0, r1
     c44:	f01c 0f03 	tst.w	ip, #3
     c48:	d137      	bne.n	cba <strcmp+0x7a>
     c4a:	f010 0c03 	ands.w	ip, r0, #3
     c4e:	f020 0003 	bic.w	r0, r0, #3
     c52:	f021 0103 	bic.w	r1, r1, #3
     c56:	f850 2b04 	ldr.w	r2, [r0], #4
     c5a:	bf08      	it	eq
     c5c:	f851 3b04 	ldreq.w	r3, [r1], #4
     c60:	d00e      	beq.n	c80 <strcmp+0x40>
     c62:	f08c 0c03 	eor.w	ip, ip, #3
     c66:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
     c6a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
     c6e:	fa23 fc0c 	lsr.w	ip, r3, ip
     c72:	f851 3b04 	ldr.w	r3, [r1], #4
     c76:	ea42 020c 	orr.w	r2, r2, ip
     c7a:	ea43 030c 	orr.w	r3, r3, ip
     c7e:	bf00      	nop
     c80:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
     c84:	429a      	cmp	r2, r3
     c86:	bf01      	itttt	eq
     c88:	ea2c 0c02 	biceq.w	ip, ip, r2
     c8c:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
     c90:	f850 2b04 	ldreq.w	r2, [r0], #4
     c94:	f851 3b04 	ldreq.w	r3, [r1], #4
     c98:	d0f2      	beq.n	c80 <strcmp+0x40>
     c9a:	ea4f 6002 	mov.w	r0, r2, lsl #24
     c9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     ca2:	2801      	cmp	r0, #1
     ca4:	bf28      	it	cs
     ca6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
     caa:	bf08      	it	eq
     cac:	0a1b      	lsreq	r3, r3, #8
     cae:	d0f4      	beq.n	c9a <strcmp+0x5a>
     cb0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     cb4:	0e00      	lsrs	r0, r0, #24
     cb6:	1ac0      	subs	r0, r0, r3
     cb8:	4770      	bx	lr
     cba:	f010 0f03 	tst.w	r0, #3
     cbe:	d00a      	beq.n	cd6 <strcmp+0x96>
     cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
     cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
     cc8:	2a01      	cmp	r2, #1
     cca:	bf28      	it	cs
     ccc:	429a      	cmpcs	r2, r3
     cce:	d0f4      	beq.n	cba <strcmp+0x7a>
     cd0:	eba2 0003 	sub.w	r0, r2, r3
     cd4:	4770      	bx	lr
     cd6:	f84d 5d04 	str.w	r5, [sp, #-4]!
     cda:	f850 2b04 	ldr.w	r2, [r0], #4
     cde:	f001 0503 	and.w	r5, r1, #3
     ce2:	f021 0103 	bic.w	r1, r1, #3
     ce6:	f851 3b04 	ldr.w	r3, [r1], #4
     cea:	2d02      	cmp	r5, #2
     cec:	d026      	beq.n	d3c <strcmp+0xfc>
     cee:	d84d      	bhi.n	d8c <strcmp+0x14c>
     cf0:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
     cf4:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
     cf8:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
     cfc:	ea2c 0c02 	bic.w	ip, ip, r2
     d00:	d10d      	bne.n	d1e <strcmp+0xde>
     d02:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
     d06:	bf08      	it	eq
     d08:	f851 3b04 	ldreq.w	r3, [r1], #4
     d0c:	d10a      	bne.n	d24 <strcmp+0xe4>
     d0e:	ea85 0502 	eor.w	r5, r5, r2
     d12:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
     d16:	d10c      	bne.n	d32 <strcmp+0xf2>
     d18:	f850 2b04 	ldr.w	r2, [r0], #4
     d1c:	e7e8      	b.n	cf0 <strcmp+0xb0>
     d1e:	ea4f 2313 	mov.w	r3, r3, lsr #8
     d22:	e05b      	b.n	ddc <strcmp+0x19c>
     d24:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
     d28:	d154      	bne.n	dd4 <strcmp+0x194>
     d2a:	780b      	ldrb	r3, [r1, #0]
     d2c:	ea4f 6512 	mov.w	r5, r2, lsr #24
     d30:	e054      	b.n	ddc <strcmp+0x19c>
     d32:	ea4f 6512 	mov.w	r5, r2, lsr #24
     d36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     d3a:	e04f      	b.n	ddc <strcmp+0x19c>
     d3c:	ea4f 4502 	mov.w	r5, r2, lsl #16
     d40:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
     d44:	ea4f 4515 	mov.w	r5, r5, lsr #16
     d48:	ea2c 0c02 	bic.w	ip, ip, r2
     d4c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
     d50:	d118      	bne.n	d84 <strcmp+0x144>
     d52:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
     d56:	bf08      	it	eq
     d58:	f851 3b04 	ldreq.w	r3, [r1], #4
     d5c:	d107      	bne.n	d6e <strcmp+0x12e>
     d5e:	ea85 0502 	eor.w	r5, r5, r2
     d62:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
     d66:	d109      	bne.n	d7c <strcmp+0x13c>
     d68:	f850 2b04 	ldr.w	r2, [r0], #4
     d6c:	e7e6      	b.n	d3c <strcmp+0xfc>
     d6e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
     d72:	d12f      	bne.n	dd4 <strcmp+0x194>
     d74:	880b      	ldrh	r3, [r1, #0]
     d76:	ea4f 4512 	mov.w	r5, r2, lsr #16
     d7a:	e02f      	b.n	ddc <strcmp+0x19c>
     d7c:	ea4f 4303 	mov.w	r3, r3, lsl #16
     d80:	ea4f 4512 	mov.w	r5, r2, lsr #16
     d84:	ea4f 4313 	mov.w	r3, r3, lsr #16
     d88:	e028      	b.n	ddc <strcmp+0x19c>
     d8a:	bf00      	nop
     d8c:	f002 05ff 	and.w	r5, r2, #255	; 0xff
     d90:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
     d94:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
     d98:	ea2c 0c02 	bic.w	ip, ip, r2
     d9c:	d10d      	bne.n	dba <strcmp+0x17a>
     d9e:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
     da2:	bf08      	it	eq
     da4:	f851 3b04 	ldreq.w	r3, [r1], #4
     da8:	d10a      	bne.n	dc0 <strcmp+0x180>
     daa:	ea85 0502 	eor.w	r5, r5, r2
     dae:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
     db2:	d10a      	bne.n	dca <strcmp+0x18a>
     db4:	f850 2b04 	ldr.w	r2, [r0], #4
     db8:	e7e8      	b.n	d8c <strcmp+0x14c>
     dba:	ea4f 6313 	mov.w	r3, r3, lsr #24
     dbe:	e00d      	b.n	ddc <strcmp+0x19c>
     dc0:	f012 0fff 	tst.w	r2, #255	; 0xff
     dc4:	d006      	beq.n	dd4 <strcmp+0x194>
     dc6:	f851 3b04 	ldr.w	r3, [r1], #4
     dca:	ea4f 2512 	mov.w	r5, r2, lsr #8
     dce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     dd2:	e003      	b.n	ddc <strcmp+0x19c>
     dd4:	f04f 0000 	mov.w	r0, #0
     dd8:	bc20      	pop	{r5}
     dda:	4770      	bx	lr
     ddc:	f005 02ff 	and.w	r2, r5, #255	; 0xff
     de0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     de4:	2801      	cmp	r0, #1
     de6:	bf28      	it	cs
     de8:	4290      	cmpcs	r0, r2
     dea:	bf04      	itt	eq
     dec:	0a2d      	lsreq	r5, r5, #8
     dee:	0a1b      	lsreq	r3, r3, #8
     df0:	d0f4      	beq.n	ddc <strcmp+0x19c>
     df2:	eba2 0000 	sub.w	r0, r2, r0
     df6:	bc20      	pop	{r5}
     df8:	4770      	bx	lr
     dfa:	bf00      	nop

00000dfc <__aeabi_dcmpun>:
     dfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     e00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     e04:	d102      	bne.n	e0c <__aeabi_dcmpun+0x10>
     e06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     e0a:	d10a      	bne.n	e22 <__aeabi_dcmpun+0x26>
     e0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     e10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     e14:	d102      	bne.n	e1c <__aeabi_dcmpun+0x20>
     e16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     e1a:	d102      	bne.n	e22 <__aeabi_dcmpun+0x26>
     e1c:	f04f 0000 	mov.w	r0, #0
     e20:	4770      	bx	lr
     e22:	f04f 0001 	mov.w	r0, #1
     e26:	4770      	bx	lr

00000e28 <__aeabi_d2iz>:
     e28:	ea4f 0241 	mov.w	r2, r1, lsl #1
     e2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     e30:	d215      	bcs.n	e5e <__aeabi_d2iz+0x36>
     e32:	d511      	bpl.n	e58 <__aeabi_d2iz+0x30>
     e34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     e38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     e3c:	d912      	bls.n	e64 <__aeabi_d2iz+0x3c>
     e3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     e46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     e4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     e4e:	fa23 f002 	lsr.w	r0, r3, r2
     e52:	bf18      	it	ne
     e54:	4240      	negne	r0, r0
     e56:	4770      	bx	lr
     e58:	f04f 0000 	mov.w	r0, #0
     e5c:	4770      	bx	lr
     e5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     e62:	d105      	bne.n	e70 <__aeabi_d2iz+0x48>
     e64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     e68:	bf08      	it	eq
     e6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     e6e:	4770      	bx	lr
     e70:	f04f 0000 	mov.w	r0, #0
     e74:	4770      	bx	lr
     e76:	bf00      	nop

00000e78 <__udivmoddi4>:
     e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e7c:	4686      	mov	lr, r0
     e7e:	468c      	mov	ip, r1
     e80:	4608      	mov	r0, r1
     e82:	9e08      	ldr	r6, [sp, #32]
     e84:	4615      	mov	r5, r2
     e86:	4674      	mov	r4, lr
     e88:	4619      	mov	r1, r3
     e8a:	2b00      	cmp	r3, #0
     e8c:	f040 80c1 	bne.w	1012 <CONFIG_MAIN_STACK_SIZE+0x12>
     e90:	4285      	cmp	r5, r0
     e92:	fab2 f282 	clz	r2, r2
     e96:	d945      	bls.n	f24 <__udivmoddi4+0xac>
     e98:	b14a      	cbz	r2, eae <__udivmoddi4+0x36>
     e9a:	f1c2 0320 	rsb	r3, r2, #32
     e9e:	fa00 fc02 	lsl.w	ip, r0, r2
     ea2:	4095      	lsls	r5, r2
     ea4:	4094      	lsls	r4, r2
     ea6:	fa2e f303 	lsr.w	r3, lr, r3
     eaa:	ea43 0c0c 	orr.w	ip, r3, ip
     eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     eb2:	b2a8      	uxth	r0, r5
     eb4:	0c23      	lsrs	r3, r4, #16
     eb6:	fbbc f8fe 	udiv	r8, ip, lr
     eba:	fb0e cc18 	mls	ip, lr, r8, ip
     ebe:	fb08 f900 	mul.w	r9, r8, r0
     ec2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ec6:	4599      	cmp	r9, r3
     ec8:	d928      	bls.n	f1c <__udivmoddi4+0xa4>
     eca:	18eb      	adds	r3, r5, r3
     ecc:	f108 37ff 	add.w	r7, r8, #4294967295
     ed0:	d204      	bcs.n	edc <__udivmoddi4+0x64>
     ed2:	4599      	cmp	r9, r3
     ed4:	d902      	bls.n	edc <__udivmoddi4+0x64>
     ed6:	f1a8 0702 	sub.w	r7, r8, #2
     eda:	442b      	add	r3, r5
     edc:	eba3 0309 	sub.w	r3, r3, r9
     ee0:	b2a4      	uxth	r4, r4
     ee2:	fbb3 fcfe 	udiv	ip, r3, lr
     ee6:	fb0e 331c 	mls	r3, lr, ip, r3
     eea:	fb0c f000 	mul.w	r0, ip, r0
     eee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ef2:	42a0      	cmp	r0, r4
     ef4:	d914      	bls.n	f20 <__udivmoddi4+0xa8>
     ef6:	192c      	adds	r4, r5, r4
     ef8:	f10c 33ff 	add.w	r3, ip, #4294967295
     efc:	d204      	bcs.n	f08 <__udivmoddi4+0x90>
     efe:	42a0      	cmp	r0, r4
     f00:	d902      	bls.n	f08 <__udivmoddi4+0x90>
     f02:	f1ac 0302 	sub.w	r3, ip, #2
     f06:	442c      	add	r4, r5
     f08:	1a24      	subs	r4, r4, r0
     f0a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     f0e:	b11e      	cbz	r6, f18 <__udivmoddi4+0xa0>
     f10:	40d4      	lsrs	r4, r2
     f12:	2300      	movs	r3, #0
     f14:	6034      	str	r4, [r6, #0]
     f16:	6073      	str	r3, [r6, #4]
     f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f1c:	4647      	mov	r7, r8
     f1e:	e7dd      	b.n	edc <__udivmoddi4+0x64>
     f20:	4663      	mov	r3, ip
     f22:	e7f1      	b.n	f08 <__udivmoddi4+0x90>
     f24:	bb92      	cbnz	r2, f8c <__udivmoddi4+0x114>
     f26:	1b43      	subs	r3, r0, r5
     f28:	2101      	movs	r1, #1
     f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     f2e:	b2af      	uxth	r7, r5
     f30:	0c20      	lsrs	r0, r4, #16
     f32:	fbb3 fcfe 	udiv	ip, r3, lr
     f36:	fb0e 331c 	mls	r3, lr, ip, r3
     f3a:	fb0c f807 	mul.w	r8, ip, r7
     f3e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     f42:	4598      	cmp	r8, r3
     f44:	d961      	bls.n	100a <CONFIG_MAIN_STACK_SIZE+0xa>
     f46:	18eb      	adds	r3, r5, r3
     f48:	f10c 30ff 	add.w	r0, ip, #4294967295
     f4c:	d204      	bcs.n	f58 <__udivmoddi4+0xe0>
     f4e:	4598      	cmp	r8, r3
     f50:	d902      	bls.n	f58 <__udivmoddi4+0xe0>
     f52:	f1ac 0002 	sub.w	r0, ip, #2
     f56:	442b      	add	r3, r5
     f58:	eba3 0308 	sub.w	r3, r3, r8
     f5c:	b2a4      	uxth	r4, r4
     f5e:	fbb3 fcfe 	udiv	ip, r3, lr
     f62:	fb0e 331c 	mls	r3, lr, ip, r3
     f66:	fb0c f707 	mul.w	r7, ip, r7
     f6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     f6e:	42a7      	cmp	r7, r4
     f70:	d94d      	bls.n	100e <CONFIG_MAIN_STACK_SIZE+0xe>
     f72:	192c      	adds	r4, r5, r4
     f74:	f10c 33ff 	add.w	r3, ip, #4294967295
     f78:	d204      	bcs.n	f84 <__udivmoddi4+0x10c>
     f7a:	42a7      	cmp	r7, r4
     f7c:	d902      	bls.n	f84 <__udivmoddi4+0x10c>
     f7e:	f1ac 0302 	sub.w	r3, ip, #2
     f82:	442c      	add	r4, r5
     f84:	1be4      	subs	r4, r4, r7
     f86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     f8a:	e7c0      	b.n	f0e <__udivmoddi4+0x96>
     f8c:	f1c2 0320 	rsb	r3, r2, #32
     f90:	4095      	lsls	r5, r2
     f92:	4094      	lsls	r4, r2
     f94:	fa20 f103 	lsr.w	r1, r0, r3
     f98:	fa2e f303 	lsr.w	r3, lr, r3
     f9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     fa0:	4090      	lsls	r0, r2
     fa2:	b2af      	uxth	r7, r5
     fa4:	4303      	orrs	r3, r0
     fa6:	fbb1 fcfe 	udiv	ip, r1, lr
     faa:	fb0e 101c 	mls	r0, lr, ip, r1
     fae:	0c19      	lsrs	r1, r3, #16
     fb0:	fb0c f807 	mul.w	r8, ip, r7
     fb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     fb8:	4588      	cmp	r8, r1
     fba:	d922      	bls.n	1002 <CONFIG_MAIN_STACK_SIZE+0x2>
     fbc:	1869      	adds	r1, r5, r1
     fbe:	f10c 30ff 	add.w	r0, ip, #4294967295
     fc2:	d204      	bcs.n	fce <CONFIG_PHY_AUTONEG_TIMEOUT_MS+0x2e>
     fc4:	4588      	cmp	r8, r1
     fc6:	d902      	bls.n	fce <CONFIG_PHY_AUTONEG_TIMEOUT_MS+0x2e>
     fc8:	f1ac 0002 	sub.w	r0, ip, #2
     fcc:	4429      	add	r1, r5
     fce:	eba1 0108 	sub.w	r1, r1, r8
     fd2:	b29b      	uxth	r3, r3
     fd4:	fbb1 fcfe 	udiv	ip, r1, lr
     fd8:	fb0e 111c 	mls	r1, lr, ip, r1
     fdc:	fb0c f707 	mul.w	r7, ip, r7
     fe0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     fe4:	429f      	cmp	r7, r3
     fe6:	d90e      	bls.n	1006 <CONFIG_MAIN_STACK_SIZE+0x6>
     fe8:	18eb      	adds	r3, r5, r3
     fea:	f10c 31ff 	add.w	r1, ip, #4294967295
     fee:	d204      	bcs.n	ffa <CONFIG_PHY_AUTONEG_TIMEOUT_MS+0x5a>
     ff0:	429f      	cmp	r7, r3
     ff2:	d902      	bls.n	ffa <CONFIG_PHY_AUTONEG_TIMEOUT_MS+0x5a>
     ff4:	f1ac 0102 	sub.w	r1, ip, #2
     ff8:	442b      	add	r3, r5
     ffa:	1bdb      	subs	r3, r3, r7
     ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1000:	e793      	b.n	f2a <__udivmoddi4+0xb2>
    1002:	4660      	mov	r0, ip
    1004:	e7e3      	b.n	fce <CONFIG_PHY_AUTONEG_TIMEOUT_MS+0x2e>
    1006:	4661      	mov	r1, ip
    1008:	e7f7      	b.n	ffa <CONFIG_PHY_AUTONEG_TIMEOUT_MS+0x5a>
    100a:	4660      	mov	r0, ip
    100c:	e7a4      	b.n	f58 <__udivmoddi4+0xe0>
    100e:	4663      	mov	r3, ip
    1010:	e7b8      	b.n	f84 <__udivmoddi4+0x10c>
    1012:	4283      	cmp	r3, r0
    1014:	d906      	bls.n	1024 <CONFIG_MAIN_STACK_SIZE+0x24>
    1016:	b916      	cbnz	r6, 101e <CONFIG_MAIN_STACK_SIZE+0x1e>
    1018:	2100      	movs	r1, #0
    101a:	4608      	mov	r0, r1
    101c:	e77c      	b.n	f18 <__udivmoddi4+0xa0>
    101e:	e9c6 e000 	strd	lr, r0, [r6]
    1022:	e7f9      	b.n	1018 <CONFIG_MAIN_STACK_SIZE+0x18>
    1024:	fab3 f783 	clz	r7, r3
    1028:	b98f      	cbnz	r7, 104e <CONFIG_MAIN_STACK_SIZE+0x4e>
    102a:	4283      	cmp	r3, r0
    102c:	d301      	bcc.n	1032 <CONFIG_MAIN_STACK_SIZE+0x32>
    102e:	4572      	cmp	r2, lr
    1030:	d808      	bhi.n	1044 <CONFIG_MAIN_STACK_SIZE+0x44>
    1032:	ebbe 0402 	subs.w	r4, lr, r2
    1036:	eb60 0303 	sbc.w	r3, r0, r3
    103a:	2001      	movs	r0, #1
    103c:	469c      	mov	ip, r3
    103e:	b91e      	cbnz	r6, 1048 <CONFIG_MAIN_STACK_SIZE+0x48>
    1040:	2100      	movs	r1, #0
    1042:	e769      	b.n	f18 <__udivmoddi4+0xa0>
    1044:	4638      	mov	r0, r7
    1046:	e7fa      	b.n	103e <CONFIG_MAIN_STACK_SIZE+0x3e>
    1048:	e9c6 4c00 	strd	r4, ip, [r6]
    104c:	e7f8      	b.n	1040 <CONFIG_MAIN_STACK_SIZE+0x40>
    104e:	f1c7 0c20 	rsb	ip, r7, #32
    1052:	40bb      	lsls	r3, r7
    1054:	fa0e f507 	lsl.w	r5, lr, r7
    1058:	fa22 f40c 	lsr.w	r4, r2, ip
    105c:	fa2e f10c 	lsr.w	r1, lr, ip
    1060:	40ba      	lsls	r2, r7
    1062:	431c      	orrs	r4, r3
    1064:	fa20 f30c 	lsr.w	r3, r0, ip
    1068:	40b8      	lsls	r0, r7
    106a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    106e:	4301      	orrs	r1, r0
    1070:	fa1f fe84 	uxth.w	lr, r4
    1074:	fbb3 f8f9 	udiv	r8, r3, r9
    1078:	fb09 3018 	mls	r0, r9, r8, r3
    107c:	0c0b      	lsrs	r3, r1, #16
    107e:	fb08 fa0e 	mul.w	sl, r8, lr
    1082:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1086:	459a      	cmp	sl, r3
    1088:	d940      	bls.n	110c <CONFIG_MAIN_STACK_SIZE+0x10c>
    108a:	18e3      	adds	r3, r4, r3
    108c:	f108 30ff 	add.w	r0, r8, #4294967295
    1090:	d204      	bcs.n	109c <CONFIG_MAIN_STACK_SIZE+0x9c>
    1092:	459a      	cmp	sl, r3
    1094:	d902      	bls.n	109c <CONFIG_MAIN_STACK_SIZE+0x9c>
    1096:	f1a8 0002 	sub.w	r0, r8, #2
    109a:	4423      	add	r3, r4
    109c:	eba3 030a 	sub.w	r3, r3, sl
    10a0:	b289      	uxth	r1, r1
    10a2:	fbb3 f8f9 	udiv	r8, r3, r9
    10a6:	fb09 3318 	mls	r3, r9, r8, r3
    10aa:	fb08 fe0e 	mul.w	lr, r8, lr
    10ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    10b2:	458e      	cmp	lr, r1
    10b4:	d92c      	bls.n	1110 <CONFIG_MAIN_STACK_SIZE+0x110>
    10b6:	1861      	adds	r1, r4, r1
    10b8:	f108 33ff 	add.w	r3, r8, #4294967295
    10bc:	d204      	bcs.n	10c8 <CONFIG_MAIN_STACK_SIZE+0xc8>
    10be:	458e      	cmp	lr, r1
    10c0:	d902      	bls.n	10c8 <CONFIG_MAIN_STACK_SIZE+0xc8>
    10c2:	f1a8 0302 	sub.w	r3, r8, #2
    10c6:	4421      	add	r1, r4
    10c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    10cc:	eba1 010e 	sub.w	r1, r1, lr
    10d0:	fba0 9802 	umull	r9, r8, r0, r2
    10d4:	4541      	cmp	r1, r8
    10d6:	46ce      	mov	lr, r9
    10d8:	4643      	mov	r3, r8
    10da:	d302      	bcc.n	10e2 <CONFIG_MAIN_STACK_SIZE+0xe2>
    10dc:	d106      	bne.n	10ec <CONFIG_MAIN_STACK_SIZE+0xec>
    10de:	454d      	cmp	r5, r9
    10e0:	d204      	bcs.n	10ec <CONFIG_MAIN_STACK_SIZE+0xec>
    10e2:	3801      	subs	r0, #1
    10e4:	ebb9 0e02 	subs.w	lr, r9, r2
    10e8:	eb68 0304 	sbc.w	r3, r8, r4
    10ec:	2e00      	cmp	r6, #0
    10ee:	d0a7      	beq.n	1040 <CONFIG_MAIN_STACK_SIZE+0x40>
    10f0:	ebb5 020e 	subs.w	r2, r5, lr
    10f4:	eb61 0103 	sbc.w	r1, r1, r3
    10f8:	fa01 fc0c 	lsl.w	ip, r1, ip
    10fc:	fa22 f307 	lsr.w	r3, r2, r7
    1100:	40f9      	lsrs	r1, r7
    1102:	ea4c 0303 	orr.w	r3, ip, r3
    1106:	e9c6 3100 	strd	r3, r1, [r6]
    110a:	e799      	b.n	1040 <CONFIG_MAIN_STACK_SIZE+0x40>
    110c:	4640      	mov	r0, r8
    110e:	e7c5      	b.n	109c <CONFIG_MAIN_STACK_SIZE+0x9c>
    1110:	4643      	mov	r3, r8
    1112:	e7d9      	b.n	10c8 <CONFIG_MAIN_STACK_SIZE+0xc8>
    1114:	0000      	movs	r0, r0
	...

00001118 <ceil>:
    1118:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    111c:	4602      	mov	r2, r0
    111e:	460b      	mov	r3, r1
    1120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1124:	f2ac 35ff 	subw	r5, ip, #1023	; 0x3ff
    1128:	460c      	mov	r4, r1
    112a:	4606      	mov	r6, r0
    112c:	2d13      	cmp	r5, #19
    112e:	dc34      	bgt.n	119a <__data_size+0x6e>
    1130:	2d00      	cmp	r5, #0
    1132:	db20      	blt.n	1176 <__data_size+0x4a>
    1134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1208 <__data_size+0xdc>
    1138:	460f      	mov	r7, r1
    113a:	fa48 f805 	asr.w	r8, r8, r5
    113e:	ea01 0c08 	and.w	ip, r1, r8
    1142:	ea5c 0c00 	orrs.w	ip, ip, r0
    1146:	d02d      	beq.n	11a4 <__data_size+0x78>
    1148:	a32d      	add	r3, pc, #180	; (adr r3, 1200 <__data_size+0xd4>)
    114a:	e9d3 2300 	ldrd	r2, r3, [r3]
    114e:	f7ff f809 	bl	164 <__adddf3>
    1152:	2200      	movs	r2, #0
    1154:	2300      	movs	r3, #0
    1156:	f7ff fcf3 	bl	b40 <__aeabi_dcmpgt>
    115a:	b140      	cbz	r0, 116e <__data_size+0x42>
    115c:	2c00      	cmp	r4, #0
    115e:	dd03      	ble.n	1168 <__data_size+0x3c>
    1160:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    1164:	412b      	asrs	r3, r5
    1166:	441f      	add	r7, r3
    1168:	ea27 0408 	bic.w	r4, r7, r8
    116c:	2600      	movs	r6, #0
    116e:	4621      	mov	r1, r4
    1170:	4630      	mov	r0, r6
    1172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1176:	a322      	add	r3, pc, #136	; (adr r3, 1200 <__data_size+0xd4>)
    1178:	e9d3 2300 	ldrd	r2, r3, [r3]
    117c:	f7fe fff2 	bl	164 <__adddf3>
    1180:	2200      	movs	r2, #0
    1182:	2300      	movs	r3, #0
    1184:	f7ff fcdc 	bl	b40 <__aeabi_dcmpgt>
    1188:	2800      	cmp	r0, #0
    118a:	d0f0      	beq.n	116e <__data_size+0x42>
    118c:	2c00      	cmp	r4, #0
    118e:	db33      	blt.n	11f8 <__data_size+0xcc>
    1190:	4334      	orrs	r4, r6
    1192:	d0eb      	beq.n	116c <__data_size+0x40>
    1194:	2600      	movs	r6, #0
    1196:	4c1d      	ldr	r4, [pc, #116]	; (120c <__data_size+0xe0>)
    1198:	e7e9      	b.n	116e <__data_size+0x42>
    119a:	2d33      	cmp	r5, #51	; 0x33
    119c:	dd06      	ble.n	11ac <__data_size+0x80>
    119e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    11a2:	d026      	beq.n	11f2 <__data_size+0xc6>
    11a4:	4610      	mov	r0, r2
    11a6:	4619      	mov	r1, r3
    11a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ac:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
    11b0:	f04f 37ff 	mov.w	r7, #4294967295
    11b4:	fa27 f70c 	lsr.w	r7, r7, ip
    11b8:	4238      	tst	r0, r7
    11ba:	d0f3      	beq.n	11a4 <__data_size+0x78>
    11bc:	a310      	add	r3, pc, #64	; (adr r3, 1200 <__data_size+0xd4>)
    11be:	e9d3 2300 	ldrd	r2, r3, [r3]
    11c2:	f7fe ffcf 	bl	164 <__adddf3>
    11c6:	2200      	movs	r2, #0
    11c8:	2300      	movs	r3, #0
    11ca:	f7ff fcb9 	bl	b40 <__aeabi_dcmpgt>
    11ce:	2800      	cmp	r0, #0
    11d0:	d0cd      	beq.n	116e <__data_size+0x42>
    11d2:	2c00      	cmp	r4, #0
    11d4:	4633      	mov	r3, r6
    11d6:	dd09      	ble.n	11ec <__data_size+0xc0>
    11d8:	2d14      	cmp	r5, #20
    11da:	d006      	beq.n	11ea <__data_size+0xbe>
    11dc:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
    11e0:	2201      	movs	r2, #1
    11e2:	40aa      	lsls	r2, r5
    11e4:	4413      	add	r3, r2
    11e6:	429e      	cmp	r6, r3
    11e8:	d900      	bls.n	11ec <__data_size+0xc0>
    11ea:	3401      	adds	r4, #1
    11ec:	ea23 0607 	bic.w	r6, r3, r7
    11f0:	e7bd      	b.n	116e <__data_size+0x42>
    11f2:	f7fe ffb7 	bl	164 <__adddf3>
    11f6:	e7d7      	b.n	11a8 <__data_size+0x7c>
    11f8:	2600      	movs	r6, #0
    11fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    11fe:	e7b6      	b.n	116e <__data_size+0x42>
    1200:	8800759c 	.word	0x8800759c
    1204:	7e37e43c 	.word	0x7e37e43c
    1208:	000fffff 	.word	0x000fffff
    120c:	3ff00000 	.word	0x3ff00000

00001210 <floor>:
    1210:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    1214:	4602      	mov	r2, r0
    1216:	460b      	mov	r3, r1
    1218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    121c:	f2ac 35ff 	subw	r5, ip, #1023	; 0x3ff
    1220:	460c      	mov	r4, r1
    1222:	4606      	mov	r6, r0
    1224:	2d13      	cmp	r5, #19
    1226:	dc32      	bgt.n	128e <floor+0x7e>
    1228:	2d00      	cmp	r5, #0
    122a:	db20      	blt.n	126e <floor+0x5e>
    122c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 1310 <floor+0x100>
    1230:	460f      	mov	r7, r1
    1232:	fa48 f805 	asr.w	r8, r8, r5
    1236:	ea01 0c08 	and.w	ip, r1, r8
    123a:	ea5c 0c00 	orrs.w	ip, ip, r0
    123e:	d02b      	beq.n	1298 <floor+0x88>
    1240:	a331      	add	r3, pc, #196	; (adr r3, 1308 <floor+0xf8>)
    1242:	e9d3 2300 	ldrd	r2, r3, [r3]
    1246:	f7fe ff8d 	bl	164 <__adddf3>
    124a:	2200      	movs	r2, #0
    124c:	2300      	movs	r3, #0
    124e:	f7ff fc77 	bl	b40 <__aeabi_dcmpgt>
    1252:	b140      	cbz	r0, 1266 <floor+0x56>
    1254:	2c00      	cmp	r4, #0
    1256:	da03      	bge.n	1260 <floor+0x50>
    1258:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    125c:	412b      	asrs	r3, r5
    125e:	441f      	add	r7, r3
    1260:	ea27 0408 	bic.w	r4, r7, r8
    1264:	2600      	movs	r6, #0
    1266:	4621      	mov	r1, r4
    1268:	4630      	mov	r0, r6
    126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    126e:	a326      	add	r3, pc, #152	; (adr r3, 1308 <floor+0xf8>)
    1270:	e9d3 2300 	ldrd	r2, r3, [r3]
    1274:	f7fe ff76 	bl	164 <__adddf3>
    1278:	2200      	movs	r2, #0
    127a:	2300      	movs	r3, #0
    127c:	f7ff fc60 	bl	b40 <__aeabi_dcmpgt>
    1280:	2800      	cmp	r0, #0
    1282:	d0f0      	beq.n	1266 <floor+0x56>
    1284:	2c00      	cmp	r4, #0
    1286:	db27      	blt.n	12d8 <floor+0xc8>
    1288:	2600      	movs	r6, #0
    128a:	4634      	mov	r4, r6
    128c:	e7eb      	b.n	1266 <floor+0x56>
    128e:	2d33      	cmp	r5, #51	; 0x33
    1290:	dd06      	ble.n	12a0 <floor+0x90>
    1292:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    1296:	d01c      	beq.n	12d2 <floor+0xc2>
    1298:	4610      	mov	r0, r2
    129a:	4619      	mov	r1, r3
    129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12a0:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
    12a4:	f04f 37ff 	mov.w	r7, #4294967295
    12a8:	fa27 f70c 	lsr.w	r7, r7, ip
    12ac:	4207      	tst	r7, r0
    12ae:	d0f3      	beq.n	1298 <floor+0x88>
    12b0:	a315      	add	r3, pc, #84	; (adr r3, 1308 <floor+0xf8>)
    12b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    12b6:	f7fe ff55 	bl	164 <__adddf3>
    12ba:	2200      	movs	r2, #0
    12bc:	2300      	movs	r3, #0
    12be:	f7ff fc3f 	bl	b40 <__aeabi_dcmpgt>
    12c2:	2800      	cmp	r0, #0
    12c4:	d0cf      	beq.n	1266 <floor+0x56>
    12c6:	2c00      	cmp	r4, #0
    12c8:	4633      	mov	r3, r6
    12ca:	db0c      	blt.n	12e6 <floor+0xd6>
    12cc:	ea23 0607 	bic.w	r6, r3, r7
    12d0:	e7c9      	b.n	1266 <floor+0x56>
    12d2:	f7fe ff47 	bl	164 <__adddf3>
    12d6:	e7e1      	b.n	129c <floor+0x8c>
    12d8:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    12dc:	4326      	orrs	r6, r4
    12de:	d10d      	bne.n	12fc <floor+0xec>
    12e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    12e4:	e7bf      	b.n	1266 <floor+0x56>
    12e6:	2d14      	cmp	r5, #20
    12e8:	d006      	beq.n	12f8 <floor+0xe8>
    12ea:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
    12ee:	2201      	movs	r2, #1
    12f0:	40aa      	lsls	r2, r5
    12f2:	4413      	add	r3, r2
    12f4:	42b3      	cmp	r3, r6
    12f6:	d2e9      	bcs.n	12cc <floor+0xbc>
    12f8:	3401      	adds	r4, #1
    12fa:	e7e7      	b.n	12cc <floor+0xbc>
    12fc:	2600      	movs	r6, #0
    12fe:	4c05      	ldr	r4, [pc, #20]	; (1314 <floor+0x104>)
    1300:	e7b1      	b.n	1266 <floor+0x56>
    1302:	bf00      	nop
    1304:	f3af 8000 	nop.w
    1308:	8800759c 	.word	0x8800759c
    130c:	7e37e43c 	.word	0x7e37e43c
    1310:	000fffff 	.word	0x000fffff
    1314:	bff00000 	.word	0xbff00000

00001318 <scalbn>:
    1318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    131a:	f3c1 560a 	ubfx	r6, r1, #20, #11
    131e:	4604      	mov	r4, r0
    1320:	460d      	mov	r5, r1
    1322:	4617      	mov	r7, r2
    1324:	460b      	mov	r3, r1
    1326:	bb2e      	cbnz	r6, 1374 <scalbn+0x5c>
    1328:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    132c:	4303      	orrs	r3, r0
    132e:	d020      	beq.n	1372 <scalbn+0x5a>
    1330:	4b2d      	ldr	r3, [pc, #180]	; (13e8 <scalbn+0xd0>)
    1332:	2200      	movs	r2, #0
    1334:	f7ff f8cc 	bl	4d0 <__aeabi_dmul>
    1338:	4b2c      	ldr	r3, [pc, #176]	; (13ec <scalbn+0xd4>)
    133a:	4604      	mov	r4, r0
    133c:	460d      	mov	r5, r1
    133e:	429f      	cmp	r7, r3
    1340:	db41      	blt.n	13c6 <scalbn+0xae>
    1342:	f3c1 560a 	ubfx	r6, r1, #20, #11
    1346:	460b      	mov	r3, r1
    1348:	3e36      	subs	r6, #54	; 0x36
    134a:	19ba      	adds	r2, r7, r6
    134c:	f240 71fe 	movw	r1, #2046	; 0x7fe
    1350:	428a      	cmp	r2, r1
    1352:	dc17      	bgt.n	1384 <scalbn+0x6c>
    1354:	2a00      	cmp	r2, #0
    1356:	dc30      	bgt.n	13ba <scalbn+0xa2>
    1358:	f112 0f35 	cmn.w	r2, #53	; 0x35
    135c:	db1e      	blt.n	139c <scalbn+0x84>
    135e:	4e24      	ldr	r6, [pc, #144]	; (13f0 <scalbn+0xd8>)
    1360:	3236      	adds	r2, #54	; 0x36
    1362:	4620      	mov	r0, r4
    1364:	401e      	ands	r6, r3
    1366:	4b23      	ldr	r3, [pc, #140]	; (13f4 <scalbn+0xdc>)
    1368:	ea46 5102 	orr.w	r1, r6, r2, lsl #20
    136c:	2200      	movs	r2, #0
    136e:	f7ff f8af 	bl	4d0 <__aeabi_dmul>
    1372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1374:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1378:	4296      	cmp	r6, r2
    137a:	d1e6      	bne.n	134a <scalbn+0x32>
    137c:	4602      	mov	r2, r0
    137e:	f7fe fef1 	bl	164 <__adddf3>
    1382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1384:	a314      	add	r3, pc, #80	; (adr r3, 13d8 <scalbn+0xc0>)
    1386:	e9d3 2300 	ldrd	r2, r3, [r3]
    138a:	0fed      	lsrs	r5, r5, #31
    138c:	481a      	ldr	r0, [pc, #104]	; (13f8 <scalbn+0xe0>)
    138e:	461c      	mov	r4, r3
    1390:	f365 74df 	bfi	r4, r5, #31, #1
    1394:	4621      	mov	r1, r4
    1396:	f7ff f89b 	bl	4d0 <__aeabi_dmul>
    139a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    139c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
    13a0:	4816      	ldr	r0, [pc, #88]	; (13fc <scalbn+0xe4>)
    13a2:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
    13a6:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    13aa:	a30d      	add	r3, pc, #52	; (adr r3, 13e0 <scalbn+0xc8>)
    13ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    13b0:	f041 011f 	orr.w	r1, r1, #31
    13b4:	f7ff f88c 	bl	4d0 <__aeabi_dmul>
    13b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13ba:	4e0d      	ldr	r6, [pc, #52]	; (13f0 <scalbn+0xd8>)
    13bc:	4620      	mov	r0, r4
    13be:	401e      	ands	r6, r3
    13c0:	ea46 5102 	orr.w	r1, r6, r2, lsl #20
    13c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13c6:	a306      	add	r3, pc, #24	; (adr r3, 13e0 <scalbn+0xc8>)
    13c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    13cc:	f7ff f880 	bl	4d0 <__aeabi_dmul>
    13d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13d2:	bf00      	nop
    13d4:	f3af 8000 	nop.w
    13d8:	8800759c 	.word	0x8800759c
    13dc:	7e37e43c 	.word	0x7e37e43c
    13e0:	c2f8f359 	.word	0xc2f8f359
    13e4:	01a56e1f 	.word	0x01a56e1f
    13e8:	43500000 	.word	0x43500000
    13ec:	ffff3cb0 	.word	0xffff3cb0
    13f0:	800fffff 	.word	0x800fffff
    13f4:	3c900000 	.word	0x3c900000
    13f8:	8800759c 	.word	0x8800759c
    13fc:	c2f8f359 	.word	0xc2f8f359

00001400 <_dtoa_r>:
    1400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1404:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1406:	b09b      	sub	sp, #108	; 0x6c
    1408:	4616      	mov	r6, r2
    140a:	461f      	mov	r7, r3
    140c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    140e:	9004      	str	r0, [sp, #16]
    1410:	e9cd 6702 	strd	r6, r7, [sp, #8]
    1414:	b149      	cbz	r1, 142a <_dtoa_r+0x2a>
    1416:	6c42      	ldr	r2, [r0, #68]	; 0x44
    1418:	2301      	movs	r3, #1
    141a:	4604      	mov	r4, r0
    141c:	4093      	lsls	r3, r2
    141e:	604a      	str	r2, [r1, #4]
    1420:	608b      	str	r3, [r1, #8]
    1422:	f018 fb1d 	bl	19a60 <_Bfree>
    1426:	2300      	movs	r3, #0
    1428:	6423      	str	r3, [r4, #64]	; 0x40
    142a:	f1b7 0900 	subs.w	r9, r7, #0
    142e:	f2c0 80b6 	blt.w	159e <_dtoa_r+0x19e>
    1432:	2300      	movs	r3, #0
    1434:	602b      	str	r3, [r5, #0]
    1436:	4b7e      	ldr	r3, [pc, #504]	; (1630 <_dtoa_r+0x230>)
    1438:	ea33 0309 	bics.w	r3, r3, r9
    143c:	f000 80ba 	beq.w	15b4 <_dtoa_r+0x1b4>
    1440:	2200      	movs	r2, #0
    1442:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    1446:	4618      	mov	r0, r3
    1448:	4621      	mov	r1, r4
    144a:	2300      	movs	r3, #0
    144c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    1450:	f7ff fb4e 	bl	af0 <__aeabi_dcmpeq>
    1454:	4680      	mov	r8, r0
    1456:	b168      	cbz	r0, 1474 <_dtoa_r+0x74>
    1458:	2301      	movs	r3, #1
    145a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    145c:	6013      	str	r3, [r2, #0]
    145e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    1460:	b113      	cbz	r3, 1468 <_dtoa_r+0x68>
    1462:	4b74      	ldr	r3, [pc, #464]	; (1634 <_dtoa_r+0x234>)
    1464:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1466:	6013      	str	r3, [r2, #0]
    1468:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 1638 <_dtoa_r+0x238>
    146c:	4640      	mov	r0, r8
    146e:	b01b      	add	sp, #108	; 0x6c
    1470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1474:	ab18      	add	r3, sp, #96	; 0x60
    1476:	9804      	ldr	r0, [sp, #16]
    1478:	9301      	str	r3, [sp, #4]
    147a:	ab19      	add	r3, sp, #100	; 0x64
    147c:	9300      	str	r3, [sp, #0]
    147e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1482:	f018 fe1b 	bl	1a0bc <__d2b>
    1486:	4683      	mov	fp, r0
    1488:	ea5f 5519 	movs.w	r5, r9, lsr #20
    148c:	f040 80a9 	bne.w	15e2 <_dtoa_r+0x1e2>
    1490:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
    1494:	4445      	add	r5, r8
    1496:	f205 4332 	addw	r3, r5, #1074	; 0x432
    149a:	2b20      	cmp	r3, #32
    149c:	f340 824d 	ble.w	193a <_dtoa_r+0x53a>
    14a0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    14a4:	fa09 f903 	lsl.w	r9, r9, r3
    14a8:	f205 4312 	addw	r3, r5, #1042	; 0x412
    14ac:	fa26 f303 	lsr.w	r3, r6, r3
    14b0:	ea49 0003 	orr.w	r0, r9, r3
    14b4:	f7fe ff92 	bl	3dc <__aeabi_ui2d>
    14b8:	3d01      	subs	r5, #1
    14ba:	2301      	movs	r3, #1
    14bc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    14c0:	9310      	str	r3, [sp, #64]	; 0x40
    14c2:	2200      	movs	r2, #0
    14c4:	4b5d      	ldr	r3, [pc, #372]	; (163c <_dtoa_r+0x23c>)
    14c6:	f7fe fe4b 	bl	160 <__aeabi_dsub>
    14ca:	a353      	add	r3, pc, #332	; (adr r3, 1618 <_dtoa_r+0x218>)
    14cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    14d0:	f7fe fffe 	bl	4d0 <__aeabi_dmul>
    14d4:	a352      	add	r3, pc, #328	; (adr r3, 1620 <_dtoa_r+0x220>)
    14d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14da:	f7fe fe43 	bl	164 <__adddf3>
    14de:	4606      	mov	r6, r0
    14e0:	460f      	mov	r7, r1
    14e2:	4628      	mov	r0, r5
    14e4:	f7fe ff8a 	bl	3fc <__aeabi_i2d>
    14e8:	a34f      	add	r3, pc, #316	; (adr r3, 1628 <_dtoa_r+0x228>)
    14ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    14ee:	f7fe ffef 	bl	4d0 <__aeabi_dmul>
    14f2:	4602      	mov	r2, r0
    14f4:	460b      	mov	r3, r1
    14f6:	4630      	mov	r0, r6
    14f8:	4639      	mov	r1, r7
    14fa:	f7fe fe33 	bl	164 <__adddf3>
    14fe:	4606      	mov	r6, r0
    1500:	460f      	mov	r7, r1
    1502:	f7ff fc91 	bl	e28 <__aeabi_d2iz>
    1506:	2200      	movs	r2, #0
    1508:	4682      	mov	sl, r0
    150a:	2300      	movs	r3, #0
    150c:	4630      	mov	r0, r6
    150e:	4639      	mov	r1, r7
    1510:	f7ff faf8 	bl	b04 <__aeabi_dcmplt>
    1514:	2800      	cmp	r0, #0
    1516:	f040 8203 	bne.w	1920 <_dtoa_r+0x520>
    151a:	eba8 0805 	sub.w	r8, r8, r5
    151e:	f1ba 0f16 	cmp.w	sl, #22
    1522:	f108 33ff 	add.w	r3, r8, #4294967295
    1526:	9306      	str	r3, [sp, #24]
    1528:	f200 81a7 	bhi.w	187a <_dtoa_r+0x47a>
    152c:	4e44      	ldr	r6, [pc, #272]	; (1640 <_dtoa_r+0x240>)
    152e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    1532:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1536:	e9d6 2300 	ldrd	r2, r3, [r6]
    153a:	f7ff fae3 	bl	b04 <__aeabi_dcmplt>
    153e:	2800      	cmp	r0, #0
    1540:	f000 8084 	beq.w	164c <_dtoa_r+0x24c>
    1544:	2300      	movs	r3, #0
    1546:	f10a 3aff 	add.w	sl, sl, #4294967295
    154a:	930f      	str	r3, [sp, #60]	; 0x3c
    154c:	f108 33ff 	add.w	r3, r8, #4294967295
    1550:	2b00      	cmp	r3, #0
    1552:	f2c0 8199 	blt.w	1888 <_dtoa_r+0x488>
    1556:	2300      	movs	r3, #0
    1558:	930a      	str	r3, [sp, #40]	; 0x28
    155a:	f1ba 0f00 	cmp.w	sl, #0
    155e:	da7b      	bge.n	1658 <_dtoa_r+0x258>
    1560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1562:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    1566:	eba3 030a 	sub.w	r3, r3, sl
    156a:	930a      	str	r3, [sp, #40]	; 0x28
    156c:	f1ca 0300 	rsb	r3, sl, #0
    1570:	f04f 0a00 	mov.w	sl, #0
    1574:	930e      	str	r3, [sp, #56]	; 0x38
    1576:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1578:	2b09      	cmp	r3, #9
    157a:	d877      	bhi.n	166c <_dtoa_r+0x26c>
    157c:	2b05      	cmp	r3, #5
    157e:	f340 81e1 	ble.w	1944 <_dtoa_r+0x544>
    1582:	3b04      	subs	r3, #4
    1584:	2700      	movs	r7, #0
    1586:	9324      	str	r3, [sp, #144]	; 0x90
    1588:	9b24      	ldr	r3, [sp, #144]	; 0x90
    158a:	3b02      	subs	r3, #2
    158c:	2b03      	cmp	r3, #3
    158e:	f200 8659 	bhi.w	2244 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x244>
    1592:	e8df f013 	tbh	[pc, r3, lsl #1]
    1596:	0454      	.short	0x0454
    1598:	04470451 	.word	0x04470451
    159c:	042c      	.short	0x042c
    159e:	2301      	movs	r3, #1
    15a0:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
    15a4:	602b      	str	r3, [r5, #0]
    15a6:	4b22      	ldr	r3, [pc, #136]	; (1630 <_dtoa_r+0x230>)
    15a8:	f8cd 900c 	str.w	r9, [sp, #12]
    15ac:	ea33 0309 	bics.w	r3, r3, r9
    15b0:	f47f af46 	bne.w	1440 <_dtoa_r+0x40>
    15b4:	f3c9 0913 	ubfx	r9, r9, #0, #20
    15b8:	f242 730f 	movw	r3, #9999	; 0x270f
    15bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    15be:	ea59 0906 	orrs.w	r9, r9, r6
    15c2:	6013      	str	r3, [r2, #0]
    15c4:	d01d      	beq.n	1602 <_dtoa_r+0x202>
    15c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    15c8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1644 <_dtoa_r+0x244>
    15cc:	2b00      	cmp	r3, #0
    15ce:	f43f af4d 	beq.w	146c <_dtoa_r+0x6c>
    15d2:	f108 0303 	add.w	r3, r8, #3
    15d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    15d8:	4640      	mov	r0, r8
    15da:	6013      	str	r3, [r2, #0]
    15dc:	b01b      	add	sp, #108	; 0x6c
    15de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15e2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    15e6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    15ea:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    15ee:	f3c2 0313 	ubfx	r3, r2, #0, #20
    15f2:	4608      	mov	r0, r1
    15f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    15f8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    15fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1600:	e75f      	b.n	14c2 <_dtoa_r+0xc2>
    1602:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    1604:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1648 <_dtoa_r+0x248>
    1608:	2b00      	cmp	r3, #0
    160a:	f43f af2f 	beq.w	146c <_dtoa_r+0x6c>
    160e:	f108 0308 	add.w	r3, r8, #8
    1612:	e7e0      	b.n	15d6 <_dtoa_r+0x1d6>
    1614:	f3af 8000 	nop.w
    1618:	636f4361 	.word	0x636f4361
    161c:	3fd287a7 	.word	0x3fd287a7
    1620:	8b60c8b3 	.word	0x8b60c8b3
    1624:	3fc68a28 	.word	0x3fc68a28
    1628:	509f79fb 	.word	0x509f79fb
    162c:	3fd34413 	.word	0x3fd34413
    1630:	7ff00000 	.word	0x7ff00000
    1634:	00031305 	.word	0x00031305
    1638:	00031304 	.word	0x00031304
    163c:	3ff80000 	.word	0x3ff80000
    1640:	00024df0 	.word	0x00024df0
    1644:	00031334 	.word	0x00031334
    1648:	00031328 	.word	0x00031328
    164c:	f1b8 0f00 	cmp.w	r8, #0
    1650:	f340 84b1 	ble.w	1fb6 <_dtoa_r+0xbb6>
    1654:	900f      	str	r0, [sp, #60]	; 0x3c
    1656:	900a      	str	r0, [sp, #40]	; 0x28
    1658:	9b06      	ldr	r3, [sp, #24]
    165a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    165e:	4453      	add	r3, sl
    1660:	9306      	str	r3, [sp, #24]
    1662:	2300      	movs	r3, #0
    1664:	930e      	str	r3, [sp, #56]	; 0x38
    1666:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1668:	2b09      	cmp	r3, #9
    166a:	d987      	bls.n	157c <_dtoa_r+0x17c>
    166c:	2300      	movs	r3, #0
    166e:	2701      	movs	r7, #1
    1670:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
    1674:	f04f 33ff 	mov.w	r3, #4294967295
    1678:	970c      	str	r7, [sp, #48]	; 0x30
    167a:	9307      	str	r3, [sp, #28]
    167c:	9b04      	ldr	r3, [sp, #16]
    167e:	2100      	movs	r1, #0
    1680:	6459      	str	r1, [r3, #68]	; 0x44
    1682:	9b07      	ldr	r3, [sp, #28]
    1684:	9311      	str	r3, [sp, #68]	; 0x44
    1686:	9804      	ldr	r0, [sp, #16]
    1688:	f018 f9c4 	bl	19a14 <_Balloc>
    168c:	9005      	str	r0, [sp, #20]
    168e:	2800      	cmp	r0, #0
    1690:	f000 85e1 	beq.w	2256 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x256>
    1694:	9b07      	ldr	r3, [sp, #28]
    1696:	2b0e      	cmp	r3, #14
    1698:	bf8c      	ite	hi
    169a:	2700      	movhi	r7, #0
    169c:	f007 0701 	andls.w	r7, r7, #1
    16a0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    16a4:	641a      	str	r2, [r3, #64]	; 0x40
    16a6:	2f00      	cmp	r7, #0
    16a8:	f000 811b 	beq.w	18e2 <_dtoa_r+0x4e2>
    16ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    16ae:	2a00      	cmp	r2, #0
    16b0:	f340 814a 	ble.w	1948 <_dtoa_r+0x548>
    16b4:	4ebc      	ldr	r6, [pc, #752]	; (19a8 <_dtoa_r+0x5a8>)
    16b6:	f002 030f 	and.w	r3, r2, #15
    16ba:	05d4      	lsls	r4, r2, #23
    16bc:	ea4f 1822 	mov.w	r8, r2, asr #4
    16c0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    16c4:	e9d3 6700 	ldrd	r6, r7, [r3]
    16c8:	f140 8370 	bpl.w	1dac <_dtoa_r+0x9ac>
    16cc:	4bb7      	ldr	r3, [pc, #732]	; (19ac <_dtoa_r+0x5ac>)
    16ce:	f008 080f 	and.w	r8, r8, #15
    16d2:	2503      	movs	r5, #3
    16d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    16d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    16dc:	f7ff f822 	bl	724 <__aeabi_ddiv>
    16e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    16e4:	f1b8 0f00 	cmp.w	r8, #0
    16e8:	d012      	beq.n	1710 <_dtoa_r+0x310>
    16ea:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 19ac <_dtoa_r+0x5ac>
    16ee:	f018 0f01 	tst.w	r8, #1
    16f2:	d008      	beq.n	1706 <_dtoa_r+0x306>
    16f4:	4630      	mov	r0, r6
    16f6:	4639      	mov	r1, r7
    16f8:	3501      	adds	r5, #1
    16fa:	e9d9 2300 	ldrd	r2, r3, [r9]
    16fe:	f7fe fee7 	bl	4d0 <__aeabi_dmul>
    1702:	4606      	mov	r6, r0
    1704:	460f      	mov	r7, r1
    1706:	ea5f 0868 	movs.w	r8, r8, asr #1
    170a:	f109 0908 	add.w	r9, r9, #8
    170e:	d1ee      	bne.n	16ee <_dtoa_r+0x2ee>
    1710:	4632      	mov	r2, r6
    1712:	463b      	mov	r3, r7
    1714:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1718:	f7ff f804 	bl	724 <__aeabi_ddiv>
    171c:	4680      	mov	r8, r0
    171e:	4689      	mov	r9, r1
    1720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1722:	b143      	cbz	r3, 1736 <_dtoa_r+0x336>
    1724:	2200      	movs	r2, #0
    1726:	4ba2      	ldr	r3, [pc, #648]	; (19b0 <_dtoa_r+0x5b0>)
    1728:	4640      	mov	r0, r8
    172a:	4649      	mov	r1, r9
    172c:	f7ff f9ea 	bl	b04 <__aeabi_dcmplt>
    1730:	2800      	cmp	r0, #0
    1732:	f040 8447 	bne.w	1fc4 <_dtoa_r+0xbc4>
    1736:	4628      	mov	r0, r5
    1738:	f7fe fe60 	bl	3fc <__aeabi_i2d>
    173c:	4642      	mov	r2, r8
    173e:	464b      	mov	r3, r9
    1740:	f7fe fec6 	bl	4d0 <__aeabi_dmul>
    1744:	4b9b      	ldr	r3, [pc, #620]	; (19b4 <_dtoa_r+0x5b4>)
    1746:	2200      	movs	r2, #0
    1748:	f7fe fd0c 	bl	164 <__adddf3>
    174c:	9b07      	ldr	r3, [sp, #28]
    174e:	4606      	mov	r6, r0
    1750:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    1754:	2b00      	cmp	r3, #0
    1756:	f000 80ab 	beq.w	18b0 <_dtoa_r+0x4b0>
    175a:	9b07      	ldr	r3, [sp, #28]
    175c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    175e:	9312      	str	r3, [sp, #72]	; 0x48
    1760:	9b05      	ldr	r3, [sp, #20]
    1762:	4640      	mov	r0, r8
    1764:	9912      	ldr	r1, [sp, #72]	; 0x48
    1766:	1c5d      	adds	r5, r3, #1
    1768:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
    176c:	4e8e      	ldr	r6, [pc, #568]	; (19a8 <_dtoa_r+0x5a8>)
    176e:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
    1772:	e953 1202 	ldrd	r1, r2, [r3, #-8]
    1776:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
    177a:	4649      	mov	r1, r9
    177c:	f7ff fb54 	bl	e28 <__aeabi_d2iz>
    1780:	f100 0730 	add.w	r7, r0, #48	; 0x30
    1784:	f7fe fe3a 	bl	3fc <__aeabi_i2d>
    1788:	4602      	mov	r2, r0
    178a:	460b      	mov	r3, r1
    178c:	4640      	mov	r0, r8
    178e:	4649      	mov	r1, r9
    1790:	b2ff      	uxtb	r7, r7
    1792:	f7fe fce5 	bl	160 <__aeabi_dsub>
    1796:	4689      	mov	r9, r1
    1798:	990c      	ldr	r1, [sp, #48]	; 0x30
    179a:	4680      	mov	r8, r0
    179c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    17a0:	2900      	cmp	r1, #0
    17a2:	f000 810f 	beq.w	19c4 <_dtoa_r+0x5c4>
    17a6:	2000      	movs	r0, #0
    17a8:	4983      	ldr	r1, [pc, #524]	; (19b8 <_dtoa_r+0x5b8>)
    17aa:	f7fe ffbb 	bl	724 <__aeabi_ddiv>
    17ae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    17b2:	f7fe fcd5 	bl	160 <__aeabi_dsub>
    17b6:	9e05      	ldr	r6, [sp, #20]
    17b8:	4642      	mov	r2, r8
    17ba:	464b      	mov	r3, r9
    17bc:	7037      	strb	r7, [r6, #0]
    17be:	4606      	mov	r6, r0
    17c0:	460f      	mov	r7, r1
    17c2:	f7ff f9bd 	bl	b40 <__aeabi_dcmpgt>
    17c6:	2800      	cmp	r0, #0
    17c8:	f040 852f 	bne.w	222a <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x22a>
    17cc:	2300      	movs	r3, #0
    17ce:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
    17d2:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
    17d6:	469a      	mov	sl, r3
    17d8:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    17dc:	9412      	str	r4, [sp, #72]	; 0x48
    17de:	e02b      	b.n	1838 <_dtoa_r+0x438>
    17e0:	f10a 0a01 	add.w	sl, sl, #1
    17e4:	45da      	cmp	sl, fp
    17e6:	f280 84bd 	bge.w	2164 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x164>
    17ea:	4630      	mov	r0, r6
    17ec:	4639      	mov	r1, r7
    17ee:	2200      	movs	r2, #0
    17f0:	4b72      	ldr	r3, [pc, #456]	; (19bc <_dtoa_r+0x5bc>)
    17f2:	f7fe fe6d 	bl	4d0 <__aeabi_dmul>
    17f6:	2200      	movs	r2, #0
    17f8:	4b70      	ldr	r3, [pc, #448]	; (19bc <_dtoa_r+0x5bc>)
    17fa:	4606      	mov	r6, r0
    17fc:	460f      	mov	r7, r1
    17fe:	4640      	mov	r0, r8
    1800:	4649      	mov	r1, r9
    1802:	f7fe fe65 	bl	4d0 <__aeabi_dmul>
    1806:	4689      	mov	r9, r1
    1808:	4680      	mov	r8, r0
    180a:	f7ff fb0d 	bl	e28 <__aeabi_d2iz>
    180e:	4604      	mov	r4, r0
    1810:	f7fe fdf4 	bl	3fc <__aeabi_i2d>
    1814:	4602      	mov	r2, r0
    1816:	460b      	mov	r3, r1
    1818:	3430      	adds	r4, #48	; 0x30
    181a:	4640      	mov	r0, r8
    181c:	4649      	mov	r1, r9
    181e:	f7fe fc9f 	bl	160 <__aeabi_dsub>
    1822:	4632      	mov	r2, r6
    1824:	463b      	mov	r3, r7
    1826:	f805 4b01 	strb.w	r4, [r5], #1
    182a:	4680      	mov	r8, r0
    182c:	4689      	mov	r9, r1
    182e:	f7ff f969 	bl	b04 <__aeabi_dcmplt>
    1832:	2800      	cmp	r0, #0
    1834:	f040 849c 	bne.w	2170 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x170>
    1838:	4642      	mov	r2, r8
    183a:	464b      	mov	r3, r9
    183c:	2000      	movs	r0, #0
    183e:	495c      	ldr	r1, [pc, #368]	; (19b0 <_dtoa_r+0x5b0>)
    1840:	f7fe fc8e 	bl	160 <__aeabi_dsub>
    1844:	4632      	mov	r2, r6
    1846:	463b      	mov	r3, r7
    1848:	f7ff f95c 	bl	b04 <__aeabi_dcmplt>
    184c:	2800      	cmp	r0, #0
    184e:	d0c7      	beq.n	17e0 <_dtoa_r+0x3e0>
    1850:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    1854:	462f      	mov	r7, r5
    1856:	9c12      	ldr	r4, [sp, #72]	; 0x48
    1858:	9905      	ldr	r1, [sp, #20]
    185a:	e002      	b.n	1862 <_dtoa_r+0x462>
    185c:	428f      	cmp	r7, r1
    185e:	f000 845f 	beq.w	2120 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x120>
    1862:	463a      	mov	r2, r7
    1864:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    1868:	2b39      	cmp	r3, #57	; 0x39
    186a:	d0f7      	beq.n	185c <_dtoa_r+0x45c>
    186c:	3301      	adds	r3, #1
    186e:	b2db      	uxtb	r3, r3
    1870:	703b      	strb	r3, [r7, #0]
    1872:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1876:	9205      	str	r2, [sp, #20]
    1878:	e16b      	b.n	1b52 <_dtoa_r+0x752>
    187a:	2301      	movs	r3, #1
    187c:	930f      	str	r3, [sp, #60]	; 0x3c
    187e:	f108 33ff 	add.w	r3, r8, #4294967295
    1882:	2b00      	cmp	r3, #0
    1884:	f6bf ae67 	bge.w	1556 <_dtoa_r+0x156>
    1888:	f1c8 0301 	rsb	r3, r8, #1
    188c:	930a      	str	r3, [sp, #40]	; 0x28
    188e:	2300      	movs	r3, #0
    1890:	9306      	str	r3, [sp, #24]
    1892:	e662      	b.n	155a <_dtoa_r+0x15a>
    1894:	4628      	mov	r0, r5
    1896:	f7fe fdb1 	bl	3fc <__aeabi_i2d>
    189a:	4642      	mov	r2, r8
    189c:	464b      	mov	r3, r9
    189e:	f7fe fe17 	bl	4d0 <__aeabi_dmul>
    18a2:	2200      	movs	r2, #0
    18a4:	4b43      	ldr	r3, [pc, #268]	; (19b4 <_dtoa_r+0x5b4>)
    18a6:	f7fe fc5d 	bl	164 <__adddf3>
    18aa:	4606      	mov	r6, r0
    18ac:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    18b0:	4640      	mov	r0, r8
    18b2:	4649      	mov	r1, r9
    18b4:	2200      	movs	r2, #0
    18b6:	4b42      	ldr	r3, [pc, #264]	; (19c0 <_dtoa_r+0x5c0>)
    18b8:	f7fe fc52 	bl	160 <__aeabi_dsub>
    18bc:	4632      	mov	r2, r6
    18be:	463b      	mov	r3, r7
    18c0:	4680      	mov	r8, r0
    18c2:	4689      	mov	r9, r1
    18c4:	f7ff f93c 	bl	b40 <__aeabi_dcmpgt>
    18c8:	2800      	cmp	r0, #0
    18ca:	f040 83ad 	bne.w	2028 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x28>
    18ce:	4640      	mov	r0, r8
    18d0:	4649      	mov	r1, r9
    18d2:	4632      	mov	r2, r6
    18d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    18d8:	f7ff f914 	bl	b04 <__aeabi_dcmplt>
    18dc:	2800      	cmp	r0, #0
    18de:	f040 81d5 	bne.w	1c8c <_dtoa_r+0x88c>
    18e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    18e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    18e6:	2a0e      	cmp	r2, #14
    18e8:	dc02      	bgt.n	18f0 <_dtoa_r+0x4f0>
    18ea:	2b00      	cmp	r3, #0
    18ec:	f280 81ad 	bge.w	1c4a <_dtoa_r+0x84a>
    18f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18f2:	2a00      	cmp	r2, #0
    18f4:	f000 80b5 	beq.w	1a62 <_dtoa_r+0x662>
    18f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    18fa:	2a01      	cmp	r2, #1
    18fc:	f340 8385 	ble.w	200a <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xa>
    1900:	9a07      	ldr	r2, [sp, #28]
    1902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1904:	1e55      	subs	r5, r2, #1
    1906:	42ab      	cmp	r3, r5
    1908:	f2c0 82c7 	blt.w	1e9a <_dtoa_r+0xa9a>
    190c:	2a00      	cmp	r2, #0
    190e:	eba3 0505 	sub.w	r5, r3, r5
    1912:	f280 845b 	bge.w	21cc <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1cc>
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9a07      	ldr	r2, [sp, #28]
    191a:	eba3 0802 	sub.w	r8, r3, r2
    191e:	e2c9      	b.n	1eb4 <_dtoa_r+0xab4>
    1920:	4650      	mov	r0, sl
    1922:	f7fe fd6b 	bl	3fc <__aeabi_i2d>
    1926:	4632      	mov	r2, r6
    1928:	463b      	mov	r3, r7
    192a:	f7ff f8e1 	bl	af0 <__aeabi_dcmpeq>
    192e:	2800      	cmp	r0, #0
    1930:	f47f adf3 	bne.w	151a <_dtoa_r+0x11a>
    1934:	f10a 3aff 	add.w	sl, sl, #4294967295
    1938:	e5ef      	b.n	151a <_dtoa_r+0x11a>
    193a:	f1c3 0320 	rsb	r3, r3, #32
    193e:	fa06 f003 	lsl.w	r0, r6, r3
    1942:	e5b7      	b.n	14b4 <_dtoa_r+0xb4>
    1944:	2701      	movs	r7, #1
    1946:	e61f      	b.n	1588 <_dtoa_r+0x188>
    1948:	f000 82a3 	beq.w	1e92 <_dtoa_r+0xa92>
    194c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    194e:	4e16      	ldr	r6, [pc, #88]	; (19a8 <_dtoa_r+0x5a8>)
    1950:	425d      	negs	r5, r3
    1952:	f005 030f 	and.w	r3, r5, #15
    1956:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    195a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    195e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1962:	f7fe fdb5 	bl	4d0 <__aeabi_dmul>
    1966:	112e      	asrs	r6, r5, #4
    1968:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    196c:	f000 8452 	beq.w	2214 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x214>
    1970:	4c0e      	ldr	r4, [pc, #56]	; (19ac <_dtoa_r+0x5ac>)
    1972:	2300      	movs	r3, #0
    1974:	2502      	movs	r5, #2
    1976:	4680      	mov	r8, r0
    1978:	4689      	mov	r9, r1
    197a:	07f0      	lsls	r0, r6, #31
    197c:	d509      	bpl.n	1992 <_dtoa_r+0x592>
    197e:	4640      	mov	r0, r8
    1980:	4649      	mov	r1, r9
    1982:	3501      	adds	r5, #1
    1984:	e9d4 2300 	ldrd	r2, r3, [r4]
    1988:	f7fe fda2 	bl	4d0 <__aeabi_dmul>
    198c:	463b      	mov	r3, r7
    198e:	4680      	mov	r8, r0
    1990:	4689      	mov	r9, r1
    1992:	1076      	asrs	r6, r6, #1
    1994:	f104 0408 	add.w	r4, r4, #8
    1998:	d1ef      	bne.n	197a <_dtoa_r+0x57a>
    199a:	2b00      	cmp	r3, #0
    199c:	f47f aec0 	bne.w	1720 <_dtoa_r+0x320>
    19a0:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    19a4:	e6bc      	b.n	1720 <_dtoa_r+0x320>
    19a6:	bf00      	nop
    19a8:	00024df0 	.word	0x00024df0
    19ac:	00024dc8 	.word	0x00024dc8
    19b0:	3ff00000 	.word	0x3ff00000
    19b4:	401c0000 	.word	0x401c0000
    19b8:	3fe00000 	.word	0x3fe00000
    19bc:	40240000 	.word	0x40240000
    19c0:	40140000 	.word	0x40140000
    19c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    19c8:	f7fe fd82 	bl	4d0 <__aeabi_dmul>
    19cc:	9b05      	ldr	r3, [sp, #20]
    19ce:	701f      	strb	r7, [r3, #0]
    19d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    19d2:	2b01      	cmp	r3, #1
    19d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    19d8:	f000 8409 	beq.w	21ee <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1ee>
    19dc:	9f12      	ldr	r7, [sp, #72]	; 0x48
    19de:	9b05      	ldr	r3, [sp, #20]
    19e0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    19e4:	441f      	add	r7, r3
    19e6:	2200      	movs	r2, #0
    19e8:	4baa      	ldr	r3, [pc, #680]	; (1c94 <_dtoa_r+0x894>)
    19ea:	4640      	mov	r0, r8
    19ec:	4649      	mov	r1, r9
    19ee:	f7fe fd6f 	bl	4d0 <__aeabi_dmul>
    19f2:	4689      	mov	r9, r1
    19f4:	4680      	mov	r8, r0
    19f6:	f7ff fa17 	bl	e28 <__aeabi_d2iz>
    19fa:	4682      	mov	sl, r0
    19fc:	f7fe fcfe 	bl	3fc <__aeabi_i2d>
    1a00:	4602      	mov	r2, r0
    1a02:	460b      	mov	r3, r1
    1a04:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
    1a08:	4640      	mov	r0, r8
    1a0a:	4649      	mov	r1, r9
    1a0c:	f7fe fba8 	bl	160 <__aeabi_dsub>
    1a10:	f805 ab01 	strb.w	sl, [r5], #1
    1a14:	42af      	cmp	r7, r5
    1a16:	4680      	mov	r8, r0
    1a18:	4689      	mov	r9, r1
    1a1a:	d1e4      	bne.n	19e6 <_dtoa_r+0x5e6>
    1a1c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    1a20:	2200      	movs	r2, #0
    1a22:	4b9d      	ldr	r3, [pc, #628]	; (1c98 <_dtoa_r+0x898>)
    1a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1a28:	f7fe fb9c 	bl	164 <__adddf3>
    1a2c:	4642      	mov	r2, r8
    1a2e:	464b      	mov	r3, r9
    1a30:	f7ff f868 	bl	b04 <__aeabi_dcmplt>
    1a34:	2800      	cmp	r0, #0
    1a36:	f040 837b 	bne.w	2130 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x130>
    1a3a:	2000      	movs	r0, #0
    1a3c:	4996      	ldr	r1, [pc, #600]	; (1c98 <_dtoa_r+0x898>)
    1a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1a42:	f7fe fb8d 	bl	160 <__aeabi_dsub>
    1a46:	4642      	mov	r2, r8
    1a48:	464b      	mov	r3, r9
    1a4a:	f7ff f879 	bl	b40 <__aeabi_dcmpgt>
    1a4e:	2800      	cmp	r0, #0
    1a50:	f040 8219 	bne.w	1e86 <_dtoa_r+0xa86>
    1a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a56:	2b00      	cmp	r3, #0
    1a58:	db03      	blt.n	1a62 <_dtoa_r+0x662>
    1a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a5c:	2b0e      	cmp	r3, #14
    1a5e:	f340 80f5 	ble.w	1c4c <_dtoa_r+0x84c>
    1a62:	2300      	movs	r3, #0
    1a64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1a66:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    1a6a:	461e      	mov	r6, r3
    1a6c:	930c      	str	r3, [sp, #48]	; 0x30
    1a6e:	f1b8 0f00 	cmp.w	r8, #0
    1a72:	dd0d      	ble.n	1a90 <_dtoa_r+0x690>
    1a74:	9906      	ldr	r1, [sp, #24]
    1a76:	2900      	cmp	r1, #0
    1a78:	460b      	mov	r3, r1
    1a7a:	dd09      	ble.n	1a90 <_dtoa_r+0x690>
    1a7c:	4541      	cmp	r1, r8
    1a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a80:	bfa8      	it	ge
    1a82:	4643      	movge	r3, r8
    1a84:	1ad2      	subs	r2, r2, r3
    1a86:	eba8 0803 	sub.w	r8, r8, r3
    1a8a:	1acb      	subs	r3, r1, r3
    1a8c:	920a      	str	r2, [sp, #40]	; 0x28
    1a8e:	9306      	str	r3, [sp, #24]
    1a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1a92:	b153      	cbz	r3, 1aaa <_dtoa_r+0x6aa>
    1a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1a96:	b113      	cbz	r3, 1a9e <_dtoa_r+0x69e>
    1a98:	2d00      	cmp	r5, #0
    1a9a:	f040 821e 	bne.w	1eda <_dtoa_r+0xada>
    1a9e:	4659      	mov	r1, fp
    1aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1aa2:	9804      	ldr	r0, [sp, #16]
    1aa4:	f018 f96c 	bl	19d80 <__pow5mult>
    1aa8:	4683      	mov	fp, r0
    1aaa:	2101      	movs	r1, #1
    1aac:	9804      	ldr	r0, [sp, #16]
    1aae:	f018 f887 	bl	19bc0 <__i2b>
    1ab2:	4607      	mov	r7, r0
    1ab4:	f1ba 0f00 	cmp.w	sl, #0
    1ab8:	f040 8163 	bne.w	1d82 <_dtoa_r+0x982>
    1abc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1abe:	2b01      	cmp	r3, #1
    1ac0:	f340 817a 	ble.w	1db8 <_dtoa_r+0x9b8>
    1ac4:	2301      	movs	r3, #1
    1ac6:	9906      	ldr	r1, [sp, #24]
    1ac8:	440b      	add	r3, r1
    1aca:	f013 031f 	ands.w	r3, r3, #31
    1ace:	d008      	beq.n	1ae2 <_dtoa_r+0x6e2>
    1ad0:	f1c3 0220 	rsb	r2, r3, #32
    1ad4:	2a04      	cmp	r2, #4
    1ad6:	f300 81b5 	bgt.w	1e44 <_dtoa_r+0xa44>
    1ada:	d00a      	beq.n	1af2 <_dtoa_r+0x6f2>
    1adc:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
    1ae0:	e000      	b.n	1ae4 <_dtoa_r+0x6e4>
    1ae2:	231c      	movs	r3, #28
    1ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ae6:	4498      	add	r8, r3
    1ae8:	441a      	add	r2, r3
    1aea:	920a      	str	r2, [sp, #40]	; 0x28
    1aec:	9a06      	ldr	r2, [sp, #24]
    1aee:	441a      	add	r2, r3
    1af0:	9206      	str	r2, [sp, #24]
    1af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1af4:	2b00      	cmp	r3, #0
    1af6:	dd05      	ble.n	1b04 <_dtoa_r+0x704>
    1af8:	4659      	mov	r1, fp
    1afa:	461a      	mov	r2, r3
    1afc:	9804      	ldr	r0, [sp, #16]
    1afe:	f018 f999 	bl	19e34 <__lshift>
    1b02:	4683      	mov	fp, r0
    1b04:	9b06      	ldr	r3, [sp, #24]
    1b06:	2b00      	cmp	r3, #0
    1b08:	dd05      	ble.n	1b16 <_dtoa_r+0x716>
    1b0a:	4639      	mov	r1, r7
    1b0c:	461a      	mov	r2, r3
    1b0e:	9804      	ldr	r0, [sp, #16]
    1b10:	f018 f990 	bl	19e34 <__lshift>
    1b14:	4607      	mov	r7, r0
    1b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1b18:	2b02      	cmp	r3, #2
    1b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b1c:	bfd4      	ite	le
    1b1e:	2500      	movle	r5, #0
    1b20:	2501      	movgt	r5, #1
    1b22:	2b00      	cmp	r3, #0
    1b24:	f040 80be 	bne.w	1ca4 <_dtoa_r+0x8a4>
    1b28:	9b07      	ldr	r3, [sp, #28]
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	dc24      	bgt.n	1b78 <_dtoa_r+0x778>
    1b2e:	b31d      	cbz	r5, 1b78 <_dtoa_r+0x778>
    1b30:	9b07      	ldr	r3, [sp, #28]
    1b32:	2b00      	cmp	r3, #0
    1b34:	f000 818f 	beq.w	1e56 <_dtoa_r+0xa56>
    1b38:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1b3a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1b3e:	43dc      	mvns	r4, r3
    1b40:	4639      	mov	r1, r7
    1b42:	9804      	ldr	r0, [sp, #16]
    1b44:	f017 ff8c 	bl	19a60 <_Bfree>
    1b48:	b11e      	cbz	r6, 1b52 <_dtoa_r+0x752>
    1b4a:	4631      	mov	r1, r6
    1b4c:	9804      	ldr	r0, [sp, #16]
    1b4e:	f017 ff87 	bl	19a60 <_Bfree>
    1b52:	4659      	mov	r1, fp
    1b54:	9804      	ldr	r0, [sp, #16]
    1b56:	f017 ff83 	bl	19a60 <_Bfree>
    1b5a:	2200      	movs	r2, #0
    1b5c:	9905      	ldr	r1, [sp, #20]
    1b5e:	1c63      	adds	r3, r4, #1
    1b60:	700a      	strb	r2, [r1, #0]
    1b62:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b64:	6013      	str	r3, [r2, #0]
    1b66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    1b68:	2b00      	cmp	r3, #0
    1b6a:	f43f ac7f 	beq.w	146c <_dtoa_r+0x6c>
    1b6e:	4640      	mov	r0, r8
    1b70:	6019      	str	r1, [r3, #0]
    1b72:	b01b      	add	sp, #108	; 0x6c
    1b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	f000 80af 	beq.w	1cde <_dtoa_r+0x8de>
    1b80:	f1b8 0f00 	cmp.w	r8, #0
    1b84:	f300 81c0 	bgt.w	1f08 <_dtoa_r+0xb08>
    1b88:	f1ba 0f00 	cmp.w	sl, #0
    1b8c:	f040 82d3 	bne.w	2136 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x136>
    1b90:	46b1      	mov	r9, r6
    1b92:	9d05      	ldr	r5, [sp, #20]
    1b94:	9c07      	ldr	r4, [sp, #28]
    1b96:	1e6b      	subs	r3, r5, #1
    1b98:	441c      	add	r4, r3
    1b9a:	9b02      	ldr	r3, [sp, #8]
    1b9c:	9408      	str	r4, [sp, #32]
    1b9e:	f003 0301 	and.w	r3, r3, #1
    1ba2:	9c04      	ldr	r4, [sp, #16]
    1ba4:	930a      	str	r3, [sp, #40]	; 0x28
    1ba6:	4639      	mov	r1, r7
    1ba8:	4658      	mov	r0, fp
    1baa:	f017 fb7b 	bl	192a4 <quorem>
    1bae:	4631      	mov	r1, r6
    1bb0:	4682      	mov	sl, r0
    1bb2:	4658      	mov	r0, fp
    1bb4:	f018 f9b2 	bl	19f1c <__mcmp>
    1bb8:	464a      	mov	r2, r9
    1bba:	4639      	mov	r1, r7
    1bbc:	4680      	mov	r8, r0
    1bbe:	4620      	mov	r0, r4
    1bc0:	f018 f9cc 	bl	19f5c <__mdiff>
    1bc4:	68c2      	ldr	r2, [r0, #12]
    1bc6:	4601      	mov	r1, r0
    1bc8:	f10a 0330 	add.w	r3, sl, #48	; 0x30
    1bcc:	2a00      	cmp	r2, #0
    1bce:	f040 81a2 	bne.w	1f16 <_dtoa_r+0xb16>
    1bd2:	e9cd 0306 	strd	r0, r3, [sp, #24]
    1bd6:	4658      	mov	r0, fp
    1bd8:	f018 f9a0 	bl	19f1c <__mcmp>
    1bdc:	9906      	ldr	r1, [sp, #24]
    1bde:	9006      	str	r0, [sp, #24]
    1be0:	4620      	mov	r0, r4
    1be2:	f017 ff3d 	bl	19a60 <_Bfree>
    1be6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1be8:	9a06      	ldr	r2, [sp, #24]
    1bea:	ea52 0103 	orrs.w	r1, r2, r3
    1bee:	9b07      	ldr	r3, [sp, #28]
    1bf0:	f040 81c2 	bne.w	1f78 <_dtoa_r+0xb78>
    1bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bf6:	2a00      	cmp	r2, #0
    1bf8:	f000 82f2 	beq.w	21e0 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1e0>
    1bfc:	f1b8 0f00 	cmp.w	r8, #0
    1c00:	f2c0 81ad 	blt.w	1f5e <_dtoa_r+0xb5e>
    1c04:	9a08      	ldr	r2, [sp, #32]
    1c06:	46a8      	mov	r8, r5
    1c08:	42aa      	cmp	r2, r5
    1c0a:	f808 3b01 	strb.w	r3, [r8], #1
    1c0e:	f000 82d2 	beq.w	21b6 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1b6>
    1c12:	4659      	mov	r1, fp
    1c14:	2300      	movs	r3, #0
    1c16:	220a      	movs	r2, #10
    1c18:	4620      	mov	r0, r4
    1c1a:	f017 ff2b 	bl	19a74 <__multadd>
    1c1e:	454e      	cmp	r6, r9
    1c20:	4683      	mov	fp, r0
    1c22:	4631      	mov	r1, r6
    1c24:	f04f 0300 	mov.w	r3, #0
    1c28:	f04f 020a 	mov.w	r2, #10
    1c2c:	4620      	mov	r0, r4
    1c2e:	f000 819d 	beq.w	1f6c <_dtoa_r+0xb6c>
    1c32:	f017 ff1f 	bl	19a74 <__multadd>
    1c36:	4649      	mov	r1, r9
    1c38:	4606      	mov	r6, r0
    1c3a:	2300      	movs	r3, #0
    1c3c:	220a      	movs	r2, #10
    1c3e:	4620      	mov	r0, r4
    1c40:	f017 ff18 	bl	19a74 <__multadd>
    1c44:	4645      	mov	r5, r8
    1c46:	4681      	mov	r9, r0
    1c48:	e7ad      	b.n	1ba6 <_dtoa_r+0x7a6>
    1c4a:	4e14      	ldr	r6, [pc, #80]	; (1c9c <_dtoa_r+0x89c>)
    1c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c4e:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
    1c52:	e9d6 3400 	ldrd	r3, r4, [r6]
    1c56:	e9cd 3402 	strd	r3, r4, [sp, #8]
    1c5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	f280 81e8 	bge.w	2032 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x32>
    1c62:	9b07      	ldr	r3, [sp, #28]
    1c64:	2b00      	cmp	r3, #0
    1c66:	f300 81e4 	bgt.w	2032 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x32>
    1c6a:	9b07      	ldr	r3, [sp, #28]
    1c6c:	b973      	cbnz	r3, 1c8c <_dtoa_r+0x88c>
    1c6e:	2200      	movs	r2, #0
    1c70:	4b0b      	ldr	r3, [pc, #44]	; (1ca0 <_dtoa_r+0x8a0>)
    1c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1c76:	f7fe fc2b 	bl	4d0 <__aeabi_dmul>
    1c7a:	4602      	mov	r2, r0
    1c7c:	460b      	mov	r3, r1
    1c7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1c82:	f7fe ff49 	bl	b18 <__aeabi_dcmple>
    1c86:	2800      	cmp	r0, #0
    1c88:	f000 81ce 	beq.w	2028 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x28>
    1c8c:	2700      	movs	r7, #0
    1c8e:	463e      	mov	r6, r7
    1c90:	e752      	b.n	1b38 <_dtoa_r+0x738>
    1c92:	bf00      	nop
    1c94:	40240000 	.word	0x40240000
    1c98:	3fe00000 	.word	0x3fe00000
    1c9c:	00024df0 	.word	0x00024df0
    1ca0:	40140000 	.word	0x40140000
    1ca4:	4639      	mov	r1, r7
    1ca6:	4658      	mov	r0, fp
    1ca8:	f018 f938 	bl	19f1c <__mcmp>
    1cac:	2800      	cmp	r0, #0
    1cae:	f6bf af3b 	bge.w	1b28 <_dtoa_r+0x728>
    1cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cb4:	4659      	mov	r1, fp
    1cb6:	220a      	movs	r2, #10
    1cb8:	9804      	ldr	r0, [sp, #16]
    1cba:	3b01      	subs	r3, #1
    1cbc:	930b      	str	r3, [sp, #44]	; 0x2c
    1cbe:	2300      	movs	r3, #0
    1cc0:	f017 fed8 	bl	19a74 <__multadd>
    1cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cc6:	4683      	mov	fp, r0
    1cc8:	2b00      	cmp	r3, #0
    1cca:	f040 8292 	bne.w	21f2 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1f2>
    1cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1cd4:	9307      	str	r3, [sp, #28]
    1cd6:	dc02      	bgt.n	1cde <_dtoa_r+0x8de>
    1cd8:	2d00      	cmp	r5, #0
    1cda:	f47f af29 	bne.w	1b30 <_dtoa_r+0x730>
    1cde:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1ce2:	2501      	movs	r5, #1
    1ce4:	9c07      	ldr	r4, [sp, #28]
    1ce6:	f8dd 9010 	ldr.w	r9, [sp, #16]
    1cea:	e007      	b.n	1cfc <_dtoa_r+0x8fc>
    1cec:	4659      	mov	r1, fp
    1cee:	2300      	movs	r3, #0
    1cf0:	220a      	movs	r2, #10
    1cf2:	4648      	mov	r0, r9
    1cf4:	f017 febe 	bl	19a74 <__multadd>
    1cf8:	3501      	adds	r5, #1
    1cfa:	4683      	mov	fp, r0
    1cfc:	4639      	mov	r1, r7
    1cfe:	4658      	mov	r0, fp
    1d00:	f017 fad0 	bl	192a4 <quorem>
    1d04:	42a5      	cmp	r5, r4
    1d06:	f100 0330 	add.w	r3, r0, #48	; 0x30
    1d0a:	f808 3b01 	strb.w	r3, [r8], #1
    1d0e:	dbed      	blt.n	1cec <_dtoa_r+0x8ec>
    1d10:	9a07      	ldr	r2, [sp, #28]
    1d12:	2500      	movs	r5, #0
    1d14:	2a00      	cmp	r2, #0
    1d16:	bfcc      	ite	gt
    1d18:	4690      	movgt	r8, r2
    1d1a:	f04f 0801 	movle.w	r8, #1
    1d1e:	9a05      	ldr	r2, [sp, #20]
    1d20:	4490      	add	r8, r2
    1d22:	4659      	mov	r1, fp
    1d24:	2201      	movs	r2, #1
    1d26:	9804      	ldr	r0, [sp, #16]
    1d28:	9302      	str	r3, [sp, #8]
    1d2a:	f018 f883 	bl	19e34 <__lshift>
    1d2e:	4639      	mov	r1, r7
    1d30:	4683      	mov	fp, r0
    1d32:	f018 f8f3 	bl	19f1c <__mcmp>
    1d36:	2800      	cmp	r0, #0
    1d38:	f340 81e4 	ble.w	2104 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x104>
    1d3c:	9a05      	ldr	r2, [sp, #20]
    1d3e:	e002      	b.n	1d46 <_dtoa_r+0x946>
    1d40:	4590      	cmp	r8, r2
    1d42:	f000 81d4 	beq.w	20ee <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xee>
    1d46:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1d4a:	46c2      	mov	sl, r8
    1d4c:	f108 38ff 	add.w	r8, r8, #4294967295
    1d50:	2b39      	cmp	r3, #57	; 0x39
    1d52:	d0f5      	beq.n	1d40 <_dtoa_r+0x940>
    1d54:	3301      	adds	r3, #1
    1d56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    1d58:	f888 3000 	strb.w	r3, [r8]
    1d5c:	4639      	mov	r1, r7
    1d5e:	9804      	ldr	r0, [sp, #16]
    1d60:	f017 fe7e 	bl	19a60 <_Bfree>
    1d64:	2e00      	cmp	r6, #0
    1d66:	f000 81c8 	beq.w	20fa <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xfa>
    1d6a:	b12d      	cbz	r5, 1d78 <_dtoa_r+0x978>
    1d6c:	42b5      	cmp	r5, r6
    1d6e:	d003      	beq.n	1d78 <_dtoa_r+0x978>
    1d70:	4629      	mov	r1, r5
    1d72:	9804      	ldr	r0, [sp, #16]
    1d74:	f017 fe74 	bl	19a60 <_Bfree>
    1d78:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1d7c:	f8cd a014 	str.w	sl, [sp, #20]
    1d80:	e6e3      	b.n	1b4a <_dtoa_r+0x74a>
    1d82:	4601      	mov	r1, r0
    1d84:	4652      	mov	r2, sl
    1d86:	9804      	ldr	r0, [sp, #16]
    1d88:	f017 fffa 	bl	19d80 <__pow5mult>
    1d8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1d8e:	4607      	mov	r7, r0
    1d90:	2b01      	cmp	r3, #1
    1d92:	f340 8095 	ble.w	1ec0 <_dtoa_r+0xac0>
    1d96:	f04f 0a00 	mov.w	sl, #0
    1d9a:	693b      	ldr	r3, [r7, #16]
    1d9c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    1da0:	6918      	ldr	r0, [r3, #16]
    1da2:	f017 feb9 	bl	19b18 <__hi0bits>
    1da6:	f1c0 0320 	rsb	r3, r0, #32
    1daa:	e68c      	b.n	1ac6 <_dtoa_r+0x6c6>
    1dac:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    1db0:	2502      	movs	r5, #2
    1db2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    1db6:	e495      	b.n	16e4 <_dtoa_r+0x2e4>
    1db8:	9b02      	ldr	r3, [sp, #8]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	f47f ae82 	bne.w	1ac4 <_dtoa_r+0x6c4>
    1dc0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1dc4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    1dc8:	2b00      	cmp	r3, #0
    1dca:	f47f ae7b 	bne.w	1ac4 <_dtoa_r+0x6c4>
    1dce:	4bad      	ldr	r3, [pc, #692]	; (2084 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x84>)
    1dd0:	4013      	ands	r3, r2
    1dd2:	b133      	cbz	r3, 1de2 <_dtoa_r+0x9e2>
    1dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dd6:	3301      	adds	r3, #1
    1dd8:	930a      	str	r3, [sp, #40]	; 0x28
    1dda:	9b06      	ldr	r3, [sp, #24]
    1ddc:	3301      	adds	r3, #1
    1dde:	9306      	str	r3, [sp, #24]
    1de0:	2301      	movs	r3, #1
    1de2:	f1ba 0f00 	cmp.w	sl, #0
    1de6:	f040 81f9 	bne.w	21dc <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1dc>
    1dea:	469a      	mov	sl, r3
    1dec:	e66a      	b.n	1ac4 <_dtoa_r+0x6c4>
    1dee:	2301      	movs	r3, #1
    1df0:	930c      	str	r3, [sp, #48]	; 0x30
    1df2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1df4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1df6:	4413      	add	r3, r2
    1df8:	9311      	str	r3, [sp, #68]	; 0x44
    1dfa:	3301      	adds	r3, #1
    1dfc:	2b01      	cmp	r3, #1
    1dfe:	461d      	mov	r5, r3
    1e00:	9307      	str	r3, [sp, #28]
    1e02:	bfb8      	it	lt
    1e04:	2501      	movlt	r5, #1
    1e06:	2d17      	cmp	r5, #23
    1e08:	f340 8213 	ble.w	2232 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x232>
    1e0c:	2201      	movs	r2, #1
    1e0e:	2304      	movs	r3, #4
    1e10:	005b      	lsls	r3, r3, #1
    1e12:	4611      	mov	r1, r2
    1e14:	3201      	adds	r2, #1
    1e16:	f103 0014 	add.w	r0, r3, #20
    1e1a:	42a8      	cmp	r0, r5
    1e1c:	d9f8      	bls.n	1e10 <_dtoa_r+0xa10>
    1e1e:	9b04      	ldr	r3, [sp, #16]
    1e20:	6459      	str	r1, [r3, #68]	; 0x44
    1e22:	e430      	b.n	1686 <_dtoa_r+0x286>
    1e24:	2301      	movs	r3, #1
    1e26:	930c      	str	r3, [sp, #48]	; 0x30
    1e28:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	f340 80be 	ble.w	1fac <_dtoa_r+0xbac>
    1e30:	461d      	mov	r5, r3
    1e32:	9311      	str	r3, [sp, #68]	; 0x44
    1e34:	9307      	str	r3, [sp, #28]
    1e36:	e7e6      	b.n	1e06 <_dtoa_r+0xa06>
    1e38:	2300      	movs	r3, #0
    1e3a:	930c      	str	r3, [sp, #48]	; 0x30
    1e3c:	e7d9      	b.n	1df2 <_dtoa_r+0x9f2>
    1e3e:	2300      	movs	r3, #0
    1e40:	930c      	str	r3, [sp, #48]	; 0x30
    1e42:	e7f1      	b.n	1e28 <_dtoa_r+0xa28>
    1e44:	f1c3 031c 	rsb	r3, r3, #28
    1e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e4a:	4419      	add	r1, r3
    1e4c:	441a      	add	r2, r3
    1e4e:	4498      	add	r8, r3
    1e50:	920a      	str	r2, [sp, #40]	; 0x28
    1e52:	9106      	str	r1, [sp, #24]
    1e54:	e64d      	b.n	1af2 <_dtoa_r+0x6f2>
    1e56:	4639      	mov	r1, r7
    1e58:	2205      	movs	r2, #5
    1e5a:	9804      	ldr	r0, [sp, #16]
    1e5c:	f017 fe0a 	bl	19a74 <__multadd>
    1e60:	4607      	mov	r7, r0
    1e62:	4658      	mov	r0, fp
    1e64:	4639      	mov	r1, r7
    1e66:	f018 f859 	bl	19f1c <__mcmp>
    1e6a:	2800      	cmp	r0, #0
    1e6c:	f77f ae64 	ble.w	1b38 <_dtoa_r+0x738>
    1e70:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1e74:	9b05      	ldr	r3, [sp, #20]
    1e76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    1e78:	3301      	adds	r3, #1
    1e7a:	3401      	adds	r4, #1
    1e7c:	9305      	str	r3, [sp, #20]
    1e7e:	2331      	movs	r3, #49	; 0x31
    1e80:	f888 3000 	strb.w	r3, [r8]
    1e84:	e65c      	b.n	1b40 <_dtoa_r+0x740>
    1e86:	463a      	mov	r2, r7
    1e88:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    1e8c:	2b30      	cmp	r3, #48	; 0x30
    1e8e:	d0fa      	beq.n	1e86 <_dtoa_r+0xa86>
    1e90:	e4ef      	b.n	1872 <_dtoa_r+0x472>
    1e92:	2502      	movs	r5, #2
    1e94:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    1e98:	e442      	b.n	1720 <_dtoa_r+0x320>
    1e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e9c:	950e      	str	r5, [sp, #56]	; 0x38
    1e9e:	1aeb      	subs	r3, r5, r3
    1ea0:	2500      	movs	r5, #0
    1ea2:	449a      	add	sl, r3
    1ea4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    1ea8:	4413      	add	r3, r2
    1eaa:	9306      	str	r3, [sp, #24]
    1eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1eae:	4698      	mov	r8, r3
    1eb0:	4413      	add	r3, r2
    1eb2:	930a      	str	r3, [sp, #40]	; 0x28
    1eb4:	2101      	movs	r1, #1
    1eb6:	9804      	ldr	r0, [sp, #16]
    1eb8:	f017 fe82 	bl	19bc0 <__i2b>
    1ebc:	4606      	mov	r6, r0
    1ebe:	e5d6      	b.n	1a6e <_dtoa_r+0x66e>
    1ec0:	9b02      	ldr	r3, [sp, #8]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	f47f af67 	bne.w	1d96 <_dtoa_r+0x996>
    1ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1ecc:	f3c1 0313 	ubfx	r3, r1, #0, #20
    1ed0:	460a      	mov	r2, r1
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	f43f af7b 	beq.w	1dce <_dtoa_r+0x9ce>
    1ed8:	e75d      	b.n	1d96 <_dtoa_r+0x996>
    1eda:	9c04      	ldr	r4, [sp, #16]
    1edc:	4631      	mov	r1, r6
    1ede:	462a      	mov	r2, r5
    1ee0:	4620      	mov	r0, r4
    1ee2:	f017 ff4d 	bl	19d80 <__pow5mult>
    1ee6:	4606      	mov	r6, r0
    1ee8:	465a      	mov	r2, fp
    1eea:	4620      	mov	r0, r4
    1eec:	4631      	mov	r1, r6
    1eee:	f017 fe95 	bl	19c1c <__multiply>
    1ef2:	4659      	mov	r1, fp
    1ef4:	4683      	mov	fp, r0
    1ef6:	4620      	mov	r0, r4
    1ef8:	f017 fdb2 	bl	19a60 <_Bfree>
    1efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1efe:	1b5b      	subs	r3, r3, r5
    1f00:	930e      	str	r3, [sp, #56]	; 0x38
    1f02:	f43f add2 	beq.w	1aaa <_dtoa_r+0x6aa>
    1f06:	e5ca      	b.n	1a9e <_dtoa_r+0x69e>
    1f08:	4631      	mov	r1, r6
    1f0a:	4642      	mov	r2, r8
    1f0c:	9804      	ldr	r0, [sp, #16]
    1f0e:	f017 ff91 	bl	19e34 <__lshift>
    1f12:	4606      	mov	r6, r0
    1f14:	e638      	b.n	1b88 <_dtoa_r+0x788>
    1f16:	9804      	ldr	r0, [sp, #16]
    1f18:	9306      	str	r3, [sp, #24]
    1f1a:	f017 fda1 	bl	19a60 <_Bfree>
    1f1e:	f1b8 0f00 	cmp.w	r8, #0
    1f22:	9b06      	ldr	r3, [sp, #24]
    1f24:	db08      	blt.n	1f38 <_dtoa_r+0xb38>
    1f26:	9a02      	ldr	r2, [sp, #8]
    1f28:	9924      	ldr	r1, [sp, #144]	; 0x90
    1f2a:	f002 0201 	and.w	r2, r2, #1
    1f2e:	ea48 0801 	orr.w	r8, r8, r1
    1f32:	ea52 0208 	orrs.w	r2, r2, r8
    1f36:	d12e      	bne.n	1f96 <_dtoa_r+0xb96>
    1f38:	4659      	mov	r1, fp
    1f3a:	2201      	movs	r2, #1
    1f3c:	9804      	ldr	r0, [sp, #16]
    1f3e:	9302      	str	r3, [sp, #8]
    1f40:	f017 ff78 	bl	19e34 <__lshift>
    1f44:	4639      	mov	r1, r7
    1f46:	4683      	mov	fp, r0
    1f48:	f017 ffe8 	bl	19f1c <__mcmp>
    1f4c:	2800      	cmp	r0, #0
    1f4e:	9b02      	ldr	r3, [sp, #8]
    1f50:	f340 8165 	ble.w	221e <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x21e>
    1f54:	2b39      	cmp	r3, #57	; 0x39
    1f56:	f000 8131 	beq.w	21bc <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1bc>
    1f5a:	f10a 0331 	add.w	r3, sl, #49	; 0x31
    1f5e:	46aa      	mov	sl, r5
    1f60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    1f62:	4635      	mov	r5, r6
    1f64:	464e      	mov	r6, r9
    1f66:	f80a 3b01 	strb.w	r3, [sl], #1
    1f6a:	e6f7      	b.n	1d5c <_dtoa_r+0x95c>
    1f6c:	f017 fd82 	bl	19a74 <__multadd>
    1f70:	4645      	mov	r5, r8
    1f72:	4606      	mov	r6, r0
    1f74:	4681      	mov	r9, r0
    1f76:	e616      	b.n	1ba6 <_dtoa_r+0x7a6>
    1f78:	f1b8 0f00 	cmp.w	r8, #0
    1f7c:	f2c0 815e 	blt.w	223c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x23c>
    1f80:	9924      	ldr	r1, [sp, #144]	; 0x90
    1f82:	ea48 0801 	orr.w	r8, r8, r1
    1f86:	990a      	ldr	r1, [sp, #40]	; 0x28
    1f88:	ea51 0808 	orrs.w	r8, r1, r8
    1f8c:	f000 8156 	beq.w	223c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x23c>
    1f90:	2a00      	cmp	r2, #0
    1f92:	f77f ae37 	ble.w	1c04 <_dtoa_r+0x804>
    1f96:	2b39      	cmp	r3, #57	; 0x39
    1f98:	f000 8110 	beq.w	21bc <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1bc>
    1f9c:	46aa      	mov	sl, r5
    1f9e:	3301      	adds	r3, #1
    1fa0:	4635      	mov	r5, r6
    1fa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    1fa4:	464e      	mov	r6, r9
    1fa6:	f80a 3b01 	strb.w	r3, [sl], #1
    1faa:	e6d7      	b.n	1d5c <_dtoa_r+0x95c>
    1fac:	2301      	movs	r3, #1
    1fae:	9325      	str	r3, [sp, #148]	; 0x94
    1fb0:	9307      	str	r3, [sp, #28]
    1fb2:	f7ff bb63 	b.w	167c <_dtoa_r+0x27c>
    1fb6:	f1c8 0301 	rsb	r3, r8, #1
    1fba:	9006      	str	r0, [sp, #24]
    1fbc:	900f      	str	r0, [sp, #60]	; 0x3c
    1fbe:	930a      	str	r3, [sp, #40]	; 0x28
    1fc0:	f7ff bb4a 	b.w	1658 <_dtoa_r+0x258>
    1fc4:	9b07      	ldr	r3, [sp, #28]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	f43f ac64 	beq.w	1894 <_dtoa_r+0x494>
    1fcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1fce:	2b00      	cmp	r3, #0
    1fd0:	f77f ac87 	ble.w	18e2 <_dtoa_r+0x4e2>
    1fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1fd6:	4640      	mov	r0, r8
    1fd8:	4649      	mov	r1, r9
    1fda:	9312      	str	r3, [sp, #72]	; 0x48
    1fdc:	1e54      	subs	r4, r2, #1
    1fde:	4b2a      	ldr	r3, [pc, #168]	; (2088 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x88>)
    1fe0:	2200      	movs	r2, #0
    1fe2:	f7fe fa75 	bl	4d0 <__aeabi_dmul>
    1fe6:	4680      	mov	r8, r0
    1fe8:	4689      	mov	r9, r1
    1fea:	1c68      	adds	r0, r5, #1
    1fec:	f7fe fa06 	bl	3fc <__aeabi_i2d>
    1ff0:	4642      	mov	r2, r8
    1ff2:	464b      	mov	r3, r9
    1ff4:	f7fe fa6c 	bl	4d0 <__aeabi_dmul>
    1ff8:	2200      	movs	r2, #0
    1ffa:	4b24      	ldr	r3, [pc, #144]	; (208c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x8c>)
    1ffc:	f7fe f8b2 	bl	164 <__adddf3>
    2000:	4606      	mov	r6, r0
    2002:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    2006:	f7ff bbab 	b.w	1760 <_dtoa_r+0x360>
    200a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    200c:	2a00      	cmp	r2, #0
    200e:	f000 808b 	beq.w	2128 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x128>
    2012:	f203 4333 	addw	r3, r3, #1075	; 0x433
    2016:	9a06      	ldr	r2, [sp, #24]
    2018:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    201a:	441a      	add	r2, r3
    201c:	9206      	str	r2, [sp, #24]
    201e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2020:	4690      	mov	r8, r2
    2022:	441a      	add	r2, r3
    2024:	920a      	str	r2, [sp, #40]	; 0x28
    2026:	e745      	b.n	1eb4 <_dtoa_r+0xab4>
    2028:	2700      	movs	r7, #0
    202a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    202e:	463e      	mov	r6, r7
    2030:	e720      	b.n	1e74 <_dtoa_r+0xa74>
    2032:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    2036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    203a:	4640      	mov	r0, r8
    203c:	4649      	mov	r1, r9
    203e:	f7fe fb71 	bl	724 <__aeabi_ddiv>
    2042:	9f05      	ldr	r7, [sp, #20]
    2044:	f7fe fef0 	bl	e28 <__aeabi_d2iz>
    2048:	4605      	mov	r5, r0
    204a:	f7fe f9d7 	bl	3fc <__aeabi_i2d>
    204e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2052:	f7fe fa3d 	bl	4d0 <__aeabi_dmul>
    2056:	460b      	mov	r3, r1
    2058:	4602      	mov	r2, r0
    205a:	4649      	mov	r1, r9
    205c:	4640      	mov	r0, r8
    205e:	f7fe f87f 	bl	160 <__aeabi_dsub>
    2062:	f105 0330 	add.w	r3, r5, #48	; 0x30
    2066:	f807 3b01 	strb.w	r3, [r7], #1
    206a:	9b07      	ldr	r3, [sp, #28]
    206c:	2b01      	cmp	r3, #1
    206e:	f000 8089 	beq.w	2184 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x184>
    2072:	f8cd b018 	str.w	fp, [sp, #24]
    2076:	2601      	movs	r6, #1
    2078:	f8dd 901c 	ldr.w	r9, [sp, #28]
    207c:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    2080:	e022      	b.n	20c8 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xc8>
    2082:	bf00      	nop
    2084:	7ff00000 	.word	0x7ff00000
    2088:	40240000 	.word	0x40240000
    208c:	401c0000 	.word	0x401c0000
    2090:	4652      	mov	r2, sl
    2092:	465b      	mov	r3, fp
    2094:	4620      	mov	r0, r4
    2096:	4629      	mov	r1, r5
    2098:	f7fe fb44 	bl	724 <__aeabi_ddiv>
    209c:	3601      	adds	r6, #1
    209e:	f7fe fec3 	bl	e28 <__aeabi_d2iz>
    20a2:	4680      	mov	r8, r0
    20a4:	f7fe f9aa 	bl	3fc <__aeabi_i2d>
    20a8:	4652      	mov	r2, sl
    20aa:	465b      	mov	r3, fp
    20ac:	f7fe fa10 	bl	4d0 <__aeabi_dmul>
    20b0:	460b      	mov	r3, r1
    20b2:	4602      	mov	r2, r0
    20b4:	4629      	mov	r1, r5
    20b6:	4620      	mov	r0, r4
    20b8:	f7fe f852 	bl	160 <__aeabi_dsub>
    20bc:	f108 0330 	add.w	r3, r8, #48	; 0x30
    20c0:	45b1      	cmp	r9, r6
    20c2:	f807 3b01 	strb.w	r3, [r7], #1
    20c6:	d05a      	beq.n	217e <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x17e>
    20c8:	2200      	movs	r2, #0
    20ca:	4b70      	ldr	r3, [pc, #448]	; (228c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x28c>)
    20cc:	f7fe fa00 	bl	4d0 <__aeabi_dmul>
    20d0:	2200      	movs	r2, #0
    20d2:	2300      	movs	r3, #0
    20d4:	4604      	mov	r4, r0
    20d6:	460d      	mov	r5, r1
    20d8:	f7fe fd0a 	bl	af0 <__aeabi_dcmpeq>
    20dc:	2800      	cmp	r0, #0
    20de:	d0d7      	beq.n	2090 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x90>
    20e0:	f8dd b018 	ldr.w	fp, [sp, #24]
    20e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
    20e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    20ea:	9705      	str	r7, [sp, #20]
    20ec:	e531      	b.n	1b52 <_dtoa_r+0x752>
    20ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    20f0:	2331      	movs	r3, #49	; 0x31
    20f2:	9a05      	ldr	r2, [sp, #20]
    20f4:	3401      	adds	r4, #1
    20f6:	7013      	strb	r3, [r2, #0]
    20f8:	e630      	b.n	1d5c <_dtoa_r+0x95c>
    20fa:	f8dd 8014 	ldr.w	r8, [sp, #20]
    20fe:	f8cd a014 	str.w	sl, [sp, #20]
    2102:	e526      	b.n	1b52 <_dtoa_r+0x752>
    2104:	d103      	bne.n	210e <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x10e>
    2106:	9b02      	ldr	r3, [sp, #8]
    2108:	07db      	lsls	r3, r3, #31
    210a:	f53f ae17 	bmi.w	1d3c <_dtoa_r+0x93c>
    210e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    2112:	46c2      	mov	sl, r8
    2114:	f108 38ff 	add.w	r8, r8, #4294967295
    2118:	2b30      	cmp	r3, #48	; 0x30
    211a:	d0f8      	beq.n	210e <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x10e>
    211c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    211e:	e61d      	b.n	1d5c <_dtoa_r+0x95c>
    2120:	3401      	adds	r4, #1
    2122:	2331      	movs	r3, #49	; 0x31
    2124:	f7ff bba4 	b.w	1870 <_dtoa_r+0x470>
    2128:	9b18      	ldr	r3, [sp, #96]	; 0x60
    212a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    212e:	e772      	b.n	2016 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x16>
    2130:	9905      	ldr	r1, [sp, #20]
    2132:	f7ff bb96 	b.w	1862 <_dtoa_r+0x462>
    2136:	6871      	ldr	r1, [r6, #4]
    2138:	9804      	ldr	r0, [sp, #16]
    213a:	f017 fc6b 	bl	19a14 <_Balloc>
    213e:	4605      	mov	r5, r0
    2140:	2800      	cmp	r0, #0
    2142:	f000 808f 	beq.w	2264 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x264>
    2146:	6933      	ldr	r3, [r6, #16]
    2148:	f106 010c 	add.w	r1, r6, #12
    214c:	300c      	adds	r0, #12
    214e:	3302      	adds	r3, #2
    2150:	009a      	lsls	r2, r3, #2
    2152:	f7fe fcff 	bl	b54 <memcpy>
    2156:	4629      	mov	r1, r5
    2158:	2201      	movs	r2, #1
    215a:	9804      	ldr	r0, [sp, #16]
    215c:	f017 fe6a 	bl	19e34 <__lshift>
    2160:	4681      	mov	r9, r0
    2162:	e516      	b.n	1b92 <_dtoa_r+0x792>
    2164:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    2168:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    216c:	f7ff bbb9 	b.w	18e2 <_dtoa_r+0x4e2>
    2170:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2174:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    2178:	9c12      	ldr	r4, [sp, #72]	; 0x48
    217a:	9505      	str	r5, [sp, #20]
    217c:	e4e9      	b.n	1b52 <_dtoa_r+0x752>
    217e:	f8dd b018 	ldr.w	fp, [sp, #24]
    2182:	4645      	mov	r5, r8
    2184:	4602      	mov	r2, r0
    2186:	460b      	mov	r3, r1
    2188:	f7fd ffec 	bl	164 <__adddf3>
    218c:	4680      	mov	r8, r0
    218e:	4689      	mov	r9, r1
    2190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2194:	f7fe fcd4 	bl	b40 <__aeabi_dcmpgt>
    2198:	b948      	cbnz	r0, 21ae <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1ae>
    219a:	4640      	mov	r0, r8
    219c:	4649      	mov	r1, r9
    219e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    21a2:	f7fe fca5 	bl	af0 <__aeabi_dcmpeq>
    21a6:	2800      	cmp	r0, #0
    21a8:	d09c      	beq.n	20e4 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xe4>
    21aa:	07e9      	lsls	r1, r5, #31
    21ac:	d59a      	bpl.n	20e4 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xe4>
    21ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    21b0:	9905      	ldr	r1, [sp, #20]
    21b2:	f7ff bb56 	b.w	1862 <_dtoa_r+0x462>
    21b6:	4635      	mov	r5, r6
    21b8:	464e      	mov	r6, r9
    21ba:	e5b2      	b.n	1d22 <_dtoa_r+0x922>
    21bc:	46a8      	mov	r8, r5
    21be:	2339      	movs	r3, #57	; 0x39
    21c0:	4635      	mov	r5, r6
    21c2:	9a05      	ldr	r2, [sp, #20]
    21c4:	464e      	mov	r6, r9
    21c6:	f808 3b01 	strb.w	r3, [r8], #1
    21ca:	e5bc      	b.n	1d46 <_dtoa_r+0x946>
    21cc:	9b06      	ldr	r3, [sp, #24]
    21ce:	4413      	add	r3, r2
    21d0:	9306      	str	r3, [sp, #24]
    21d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21d4:	4698      	mov	r8, r3
    21d6:	4413      	add	r3, r2
    21d8:	930a      	str	r3, [sp, #40]	; 0x28
    21da:	e66b      	b.n	1eb4 <_dtoa_r+0xab4>
    21dc:	469a      	mov	sl, r3
    21de:	e5dc      	b.n	1d9a <_dtoa_r+0x99a>
    21e0:	2b39      	cmp	r3, #57	; 0x39
    21e2:	d0eb      	beq.n	21bc <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1bc>
    21e4:	f1b8 0f00 	cmp.w	r8, #0
    21e8:	f73f aeb7 	bgt.w	1f5a <_dtoa_r+0xb5a>
    21ec:	e6b7      	b.n	1f5e <_dtoa_r+0xb5e>
    21ee:	462f      	mov	r7, r5
    21f0:	e416      	b.n	1a20 <_dtoa_r+0x620>
    21f2:	4631      	mov	r1, r6
    21f4:	2300      	movs	r3, #0
    21f6:	220a      	movs	r2, #10
    21f8:	9804      	ldr	r0, [sp, #16]
    21fa:	f017 fc3b 	bl	19a74 <__multadd>
    21fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2200:	4606      	mov	r6, r0
    2202:	2b00      	cmp	r3, #0
    2204:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2206:	9307      	str	r3, [sp, #28]
    2208:	f73f acba 	bgt.w	1b80 <_dtoa_r+0x780>
    220c:	2d00      	cmp	r5, #0
    220e:	f47f ac8f 	bne.w	1b30 <_dtoa_r+0x730>
    2212:	e4b5      	b.n	1b80 <_dtoa_r+0x780>
    2214:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    2218:	2502      	movs	r5, #2
    221a:	f7ff ba81 	b.w	1720 <_dtoa_r+0x320>
    221e:	f47f ae9e 	bne.w	1f5e <_dtoa_r+0xb5e>
    2222:	07da      	lsls	r2, r3, #31
    2224:	f57f ae9b 	bpl.w	1f5e <_dtoa_r+0xb5e>
    2228:	e694      	b.n	1f54 <_dtoa_r+0xb54>
    222a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    222e:	9505      	str	r5, [sp, #20]
    2230:	e48f      	b.n	1b52 <_dtoa_r+0x752>
    2232:	2100      	movs	r1, #0
    2234:	9b04      	ldr	r3, [sp, #16]
    2236:	6459      	str	r1, [r3, #68]	; 0x44
    2238:	f7ff ba25 	b.w	1686 <_dtoa_r+0x286>
    223c:	2a00      	cmp	r2, #0
    223e:	f73f ae7b 	bgt.w	1f38 <_dtoa_r+0xb38>
    2242:	e68c      	b.n	1f5e <_dtoa_r+0xb5e>
    2244:	9b04      	ldr	r3, [sp, #16]
    2246:	2500      	movs	r5, #0
    2248:	4618      	mov	r0, r3
    224a:	4629      	mov	r1, r5
    224c:	645d      	str	r5, [r3, #68]	; 0x44
    224e:	f017 fbe1 	bl	19a14 <_Balloc>
    2252:	9005      	str	r0, [sp, #20]
    2254:	b968      	cbnz	r0, 2272 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x272>
    2256:	4b0e      	ldr	r3, [pc, #56]	; (2290 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x290>)
    2258:	2200      	movs	r2, #0
    225a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    225e:	480d      	ldr	r0, [pc, #52]	; (2294 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x294>)
    2260:	f018 ff88 	bl	1b174 <__assert_func>
    2264:	4602      	mov	r2, r0
    2266:	4b0a      	ldr	r3, [pc, #40]	; (2290 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x290>)
    2268:	f240 21ea 	movw	r1, #746	; 0x2ea
    226c:	4809      	ldr	r0, [pc, #36]	; (2294 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x294>)
    226e:	f018 ff81 	bl	1b174 <__assert_func>
    2272:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    2276:	9525      	str	r5, [sp, #148]	; 0x94
    2278:	641a      	str	r2, [r3, #64]	; 0x40
    227a:	f04f 33ff 	mov.w	r3, #4294967295
    227e:	2201      	movs	r2, #1
    2280:	9311      	str	r3, [sp, #68]	; 0x44
    2282:	920c      	str	r2, [sp, #48]	; 0x30
    2284:	9307      	str	r3, [sp, #28]
    2286:	f7ff bb2c 	b.w	18e2 <_dtoa_r+0x4e2>
    228a:	bf00      	nop
    228c:	40240000 	.word	0x40240000
    2290:	00031338 	.word	0x00031338
    2294:	0003134c 	.word	0x0003134c

00002298 <TCP_Server>:
	int tcpClientSocket;
	struct sockaddr_in bindAddress;
	int connectionsNumber = 0;
	int bindingResult;
	struct sockaddr_in clientAddress;
	socklen_t clientAddressLength = sizeof( clientAddress );
    2298:	2308      	movs	r3, #8
void TCP_Server( void ){
    229a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    229e:	b095      	sub	sp, #84	; 0x54
	int receivedBytes;
	uint8_t *pTransmitterBuffer;
	int sentBytes; 

	// Starve the thread until a DHCP IP is assigned to the board 
	while( !context.connected ){
    22a0:	4c94      	ldr	r4, [pc, #592]	; (24f4 <TCP_Server+0x25c>)
void TCP_Server( void ){
    22a2:	af02      	add	r7, sp, #8
	socklen_t clientAddressLength = sizeof( clientAddress );
    22a4:	617b      	str	r3, [r7, #20]
	while( !context.connected ){
    22a6:	7923      	ldrb	r3, [r4, #4]
    22a8:	07d9      	lsls	r1, r3, #31
    22aa:	f140 8091 	bpl.w	23d0 <TCP_Server+0x138>
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
    22ae:	2101      	movs	r1, #1
    22b0:	2206      	movs	r2, #6
    22b2:	4608      	mov	r0, r1
    22b4:	f003 fab2 	bl	581c <z_impl_zsock_socket>
	}

	// Server socket creation 
	tcpServerSocket = socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );

	if ( tcpServerSocket < 0 )	{
    22b8:	f1b0 0900 	subs.w	r9, r0, #0
    22bc:	da17      	bge.n	22ee <TCP_Server+0x56>
		LOG_ERR( "TCP Server error: socket: %d\n", errno );
    22be:	f01d fec0 	bl	20042 <__errno>
    22c2:	466c      	mov	r4, sp
    22c4:	b088      	sub	sp, #32
    22c6:	6803      	ldr	r3, [r0, #0]
    22c8:	aa02      	add	r2, sp, #8
    22ca:	498b      	ldr	r1, [pc, #556]	; (24f8 <TCP_Server+0x260>)
    22cc:	488b      	ldr	r0, [pc, #556]	; (24fc <TCP_Server+0x264>)
    22ce:	e9c2 1305 	strd	r1, r3, [r2, #20]
    22d2:	2303      	movs	r3, #3
    22d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    22d8:	f842 3f10 	str.w	r3, [r2, #16]!
    22dc:	f01c f9d1 	bl	1e682 <z_log_msg_static_create.constprop.0>
    22e0:	46a5      	mov	sp, r4
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    22e2:	f04f 30ff 	mov.w	r0, #4294967295
    22e6:	f04f 31ff 	mov.w	r1, #4294967295
    22ea:	f014 f81f 	bl	1632c <z_impl_k_sleep>
		k_sleep( K_FOREVER );
	}

	// Binding 
	bindAddress.sin_family = AF_INET;				   
	bindAddress.sin_addr.s_addr = htonl(INADDR_ANY); 
    22ee:	2300      	movs	r3, #0
    22f0:	4a83      	ldr	r2, [pc, #524]	; (2500 <TCP_Server+0x268>)
    22f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		union { uintptr_t x; socklen_t val; } parm2 = { .val = addrlen };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_BIND);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_bind(sock, addr, addrlen);
    22f6:	2208      	movs	r2, #8
    22f8:	4648      	mov	r0, r9
    22fa:	f107 0118 	add.w	r1, r7, #24
    22fe:	f01d fb94 	bl	1fa2a <z_impl_zsock_bind>
	bindingResult = bind( 													\
						tcpServerSocket, 									\
						( struct sockaddr * )&bindAddress,					\
						sizeof( bindAddress ));

	if ( bindingResult < 0 )	{
    2302:	2800      	cmp	r0, #0
    2304:	da17      	bge.n	2336 <TCP_Server+0x9e>
		LOG_ERR( "TCP Server error: bind: %d\n", errno );
    2306:	f01d fe9c 	bl	20042 <__errno>
    230a:	466c      	mov	r4, sp
    230c:	b088      	sub	sp, #32
    230e:	6803      	ldr	r3, [r0, #0]
    2310:	aa02      	add	r2, sp, #8
    2312:	497c      	ldr	r1, [pc, #496]	; (2504 <TCP_Server+0x26c>)
    2314:	4879      	ldr	r0, [pc, #484]	; (24fc <TCP_Server+0x264>)
    2316:	e9c2 1305 	strd	r1, r3, [r2, #20]
    231a:	2303      	movs	r3, #3
    231c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2320:	f842 3f10 	str.w	r3, [r2, #16]!
    2324:	f01c f9ad 	bl	1e682 <z_log_msg_static_create.constprop.0>
    2328:	46a5      	mov	sp, r4
    232a:	f04f 30ff 	mov.w	r0, #4294967295
    232e:	f04f 31ff 	mov.w	r1, #4294967295
    2332:	f013 fffb 	bl	1632c <z_impl_k_sleep>
		union { uintptr_t x; int val; } parm1 = { .val = backlog };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZSOCK_LISTEN);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_listen(sock, backlog);
    2336:	2105      	movs	r1, #5
    2338:	4648      	mov	r0, r9
    233a:	f01d fbd0 	bl	1fade <z_impl_zsock_listen>
		k_sleep( K_FOREVER );
	}
    
	/* Listen */
	if ( listen( tcpServerSocket, 5 ) < 0 )	{
    233e:	2800      	cmp	r0, #0
    2340:	da17      	bge.n	2372 <TCP_Server+0xda>
		LOG_ERR( "TCP Server error: listen: %d\n", errno );
    2342:	f01d fe7e 	bl	20042 <__errno>
    2346:	466c      	mov	r4, sp
    2348:	b088      	sub	sp, #32
    234a:	6803      	ldr	r3, [r0, #0]
    234c:	aa02      	add	r2, sp, #8
    234e:	496e      	ldr	r1, [pc, #440]	; (2508 <TCP_Server+0x270>)
    2350:	486a      	ldr	r0, [pc, #424]	; (24fc <TCP_Server+0x264>)
    2352:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2356:	2303      	movs	r3, #3
    2358:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    235c:	f842 3f10 	str.w	r3, [r2, #16]!
    2360:	f01c f98f 	bl	1e682 <z_log_msg_static_create.constprop.0>
    2364:	46a5      	mov	sp, r4
    2366:	f04f 30ff 	mov.w	r0, #4294967295
    236a:	f04f 31ff 	mov.w	r1, #4294967295
    236e:	f013 ffdd 	bl	1632c <z_impl_k_sleep>
		k_sleep( K_FOREVER );
	}

	LOG_INF( "TCP server waits for a connection on port %d...",				\
    2372:	466c      	mov	r4, sp
    2374:	b088      	sub	sp, #32
    2376:	aa02      	add	r2, sp, #8
    2378:	4b64      	ldr	r3, [pc, #400]	; (250c <TCP_Server+0x274>)
    237a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    237e:	6153      	str	r3, [r2, #20]
    2380:	f241 0392 	movw	r3, #4242	; 0x1092
    2384:	6193      	str	r3, [r2, #24]
    2386:	2303      	movs	r3, #3
    2388:	485c      	ldr	r0, [pc, #368]	; (24fc <TCP_Server+0x264>)
    238a:	f842 3f10 	str.w	r3, [r2, #16]!
    238e:	f01c f978 	bl	1e682 <z_log_msg_static_create.constprop.0>
	int connectionsNumber = 0;
    2392:	f04f 0800 	mov.w	r8, #0
    2396:	46a5      	mov	sp, r4
		union { uintptr_t x; socklen_t * val; } parm2 = { .val = addrlen };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_ACCEPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_accept(sock, addr, addrlen);
    2398:	4648      	mov	r0, r9
    239a:	f107 0214 	add.w	r2, r7, #20
    239e:	f107 0120 	add.w	r1, r7, #32
    23a2:	f01d fbc7 	bl	1fb34 <z_impl_zsock_accept>
		tcpClientSocket = accept( 											\
								tcpServerSocket, 							\
								( struct sockaddr * )&clientAddress,		\
								&clientAddressLength );

		if ( tcpClientSocket < 0 ) {
    23a6:	1e05      	subs	r5, r0, #0
    23a8:	da18      	bge.n	23dc <TCP_Server+0x144>
			LOG_ERR( "TCP Server error: accept: %d\n", errno );
    23aa:	f01d fe4a 	bl	20042 <__errno>
    23ae:	466c      	mov	r4, sp
    23b0:	b088      	sub	sp, #32
    23b2:	6803      	ldr	r3, [r0, #0]
    23b4:	aa02      	add	r2, sp, #8
    23b6:	4956      	ldr	r1, [pc, #344]	; (2510 <TCP_Server+0x278>)
    23b8:	4850      	ldr	r0, [pc, #320]	; (24fc <TCP_Server+0x264>)
    23ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
    23be:	2303      	movs	r3, #3
    23c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    23c4:	f842 3f10 	str.w	r3, [r2, #16]!
    23c8:	f01c f95b 	bl	1e682 <z_log_msg_static_create.constprop.0>
    23cc:	46a5      	mov	sp, r4
			continue;
    23ce:	e7e3      	b.n	2398 <TCP_Server+0x100>
    23d0:	2100      	movs	r1, #0
    23d2:	f44f 70a4 	mov.w	r0, #328	; 0x148
    23d6:	f013 ffa9 	bl	1632c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    23da:	e764      	b.n	22a6 <TCP_Server+0xe>
		}

		// Convert network address from internal to numeric ASCII form
		inet_ntop( 															\
    23dc:	8c38      	ldrh	r0, [r7, #32]
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    23de:	f107 0628 	add.w	r6, r7, #40	; 0x28
    23e2:	4632      	mov	r2, r6
    23e4:	2320      	movs	r3, #32
    23e6:	f107 0124 	add.w	r1, r7, #36	; 0x24
    23ea:	f006 f961 	bl	86b0 <z_impl_net_addr_ntop>
				clientAddress.sin_family,									\
				&clientAddress.sin_addr,									\
				addressString, 												\
				sizeof( addressString ));
		LOG_INF( "TCP Server: Connection #%d from %s",						\
    23ee:	466c      	mov	r4, sp
    23f0:	b08a      	sub	sp, #40	; 0x28
    23f2:	aa02      	add	r2, sp, #8
    23f4:	4b47      	ldr	r3, [pc, #284]	; (2514 <TCP_Server+0x27c>)
    23f6:	61d6      	str	r6, [r2, #28]
    23f8:	e9c2 3805 	strd	r3, r8, [r2, #20]
    23fc:	f240 3301 	movw	r3, #769	; 0x301
    2400:	8413      	strh	r3, [r2, #32]
    2402:	4b45      	ldr	r3, [pc, #276]	; (2518 <TCP_Server+0x280>)
    2404:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    2408:	483c      	ldr	r0, [pc, #240]	; (24fc <TCP_Server+0x264>)
    240a:	f842 3f10 	str.w	r3, [r2, #16]!
    240e:	f01c f938 	bl	1e682 <z_log_msg_static_create.constprop.0>
    2412:	46a5      	mov	sp, r4
		union { uintptr_t x; socklen_t * val; } parm5 = { .val = addrlen };
		return (ssize_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, parm5.x, K_SYSCALL_ZSOCK_RECVFROM);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    2414:	2300      	movs	r3, #0
    2416:	2280      	movs	r2, #128	; 0x80
    2418:	4628      	mov	r0, r5
    241a:	e9cd 3300 	strd	r3, r3, [sp]
    241e:	493f      	ldr	r1, [pc, #252]	; (251c <TCP_Server+0x284>)
    2420:	f01d fc67 	bl	1fcf2 <z_impl_zsock_recvfrom>
								tcpClientSocket, 							\
								( char *) receiverBuffer, 					\
								sizeof( receiverBuffer ),					\
								0 );			

			if ( receivedBytes <= 0 ) {
    2424:	1e04      	subs	r4, r0, #0
    2426:	dc15      	bgt.n	2454 <TCP_Server+0x1bc>
				if ( receivedBytes < 0 ) { 
    2428:	d011      	beq.n	244e <TCP_Server+0x1b6>
						LOG_ERR( "TCP Server error: recv: %d\n", errno );
    242a:	f01d fe0a 	bl	20042 <__errno>
    242e:	466c      	mov	r4, sp
    2430:	b088      	sub	sp, #32
    2432:	6803      	ldr	r3, [r0, #0]
    2434:	aa02      	add	r2, sp, #8
    2436:	493a      	ldr	r1, [pc, #232]	; (2520 <TCP_Server+0x288>)
    2438:	4830      	ldr	r0, [pc, #192]	; (24fc <TCP_Server+0x264>)
    243a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    243e:	2303      	movs	r3, #3
    2440:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2444:	f842 3f10 	str.w	r3, [r2, #16]!
    2448:	f01c f91b 	bl	1e682 <z_log_msg_static_create.constprop.0>
    244c:	46a5      	mov	sp, r4
		LOG_INF( "TCP Server: Connection #%d from %s",						\
    244e:	f108 0801 	add.w	r8, r8, #1
    2452:	e7a1      	b.n	2398 <TCP_Server+0x100>
				}
				break;
			}

			// Send 
			pTransmitterBuffer = receiverBuffer;
    2454:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 251c <TCP_Server+0x284>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    2458:	2300      	movs	r3, #0
    245a:	4622      	mov	r2, r4
    245c:	e9cd 3300 	strd	r3, r3, [sp]
    2460:	4651      	mov	r1, sl
    2462:	4628      	mov	r0, r5
    2464:	f01d fb9c 	bl	1fba0 <z_impl_zsock_sendto>
								tcpClientSocket, 							\
								pTransmitterBuffer, 						\
								receivedBytes,								\
								0 );

				if ( sentBytes < 0 ) {
    2468:	1e03      	subs	r3, r0, #0
    246a:	da2e      	bge.n	24ca <TCP_Server+0x232>
    246c:	607b      	str	r3, [r7, #4]
					LOG_ERR( "TCP Server error: send: %d\n", errno );
    246e:	f01d fde8 	bl	20042 <__errno>
    2472:	f8c7 d00c 	str.w	sp, [r7, #12]
    2476:	b088      	sub	sp, #32
    2478:	6802      	ldr	r2, [r0, #0]
    247a:	f10d 0b08 	add.w	fp, sp, #8
    247e:	4b29      	ldr	r3, [pc, #164]	; (2524 <TCP_Server+0x28c>)
    2480:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2484:	e9cb 3205 	strd	r3, r2, [fp, #20]
    2488:	465a      	mov	r2, fp
    248a:	2303      	movs	r3, #3
    248c:	481b      	ldr	r0, [pc, #108]	; (24fc <TCP_Server+0x264>)
    248e:	f842 3f10 	str.w	r3, [r2, #16]!
    2492:	60ba      	str	r2, [r7, #8]
    2494:	f01c f8f5 	bl	1e682 <z_log_msg_static_create.constprop.0>
    2498:	f8d7 d00c 	ldr.w	sp, [r7, #12]
					close( tcpClientSocket );
    249c:	4628      	mov	r0, r5
    249e:	f001 fb8f 	bl	3bc0 <_close>
					LOG_ERR( "TCP server: Connection from %s closed\n", 
    24a2:	b088      	sub	sp, #32
    24a4:	4920      	ldr	r1, [pc, #128]	; (2528 <TCP_Server+0x290>)
    24a6:	68ba      	ldr	r2, [r7, #8]
    24a8:	e9cb 1605 	strd	r1, r6, [fp, #20]
    24ac:	f44f 7100 	mov.w	r1, #512	; 0x200
    24b0:	f8ab 101c 	strh.w	r1, [fp, #28]
    24b4:	491d      	ldr	r1, [pc, #116]	; (252c <TCP_Server+0x294>)
    24b6:	4811      	ldr	r0, [pc, #68]	; (24fc <TCP_Server+0x264>)
    24b8:	f8cb 1010 	str.w	r1, [fp, #16]
    24bc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    24c0:	f01c f8df 	bl	1e682 <z_log_msg_static_create.constprop.0>
    24c4:	f8d7 d00c 	ldr.w	sp, [r7, #12]
    24c8:	687b      	ldr	r3, [r7, #4]
							addressString );
				}
				pTransmitterBuffer += sentBytes;
				receivedBytes -= sentBytes;
				
            	LOG_INF( "TCP Server mode. Received and replied with %d "	\
    24ca:	46eb      	mov	fp, sp
    24cc:	b088      	sub	sp, #32
				pTransmitterBuffer += sentBytes;
    24ce:	449a      	add	sl, r3
				receivedBytes -= sentBytes;
    24d0:	1ae4      	subs	r4, r4, r3
            	LOG_INF( "TCP Server mode. Received and replied with %d "	\
    24d2:	aa02      	add	r2, sp, #8
    24d4:	4916      	ldr	r1, [pc, #88]	; (2530 <TCP_Server+0x298>)
    24d6:	4809      	ldr	r0, [pc, #36]	; (24fc <TCP_Server+0x264>)
    24d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    24dc:	2303      	movs	r3, #3
    24de:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    24e2:	f842 3f10 	str.w	r3, [r2, #16]!
    24e6:	f01c f8cc 	bl	1e682 <z_log_msg_static_create.constprop.0>
    24ea:	46dd      	mov	sp, fp
						"bytes", sentBytes );
			} while ( receivedBytes );
    24ec:	2c00      	cmp	r4, #0
    24ee:	d1b3      	bne.n	2458 <TCP_Server+0x1c0>
    24f0:	e790      	b.n	2414 <TCP_Server+0x17c>
    24f2:	bf00      	nop
    24f4:	20002a08 	.word	0x20002a08
    24f8:	0003164e 	.word	0x0003164e
    24fc:	00024d80 	.word	0x00024d80
    2500:	92100001 	.word	0x92100001
    2504:	0003166c 	.word	0x0003166c
    2508:	00031688 	.word	0x00031688
    250c:	000316a6 	.word	0x000316a6
    2510:	000316d6 	.word	0x000316d6
    2514:	000316f4 	.word	0x000316f4
    2518:	01000004 	.word	0x01000004
    251c:	2000531c 	.word	0x2000531c
    2520:	00031717 	.word	0x00031717
    2524:	00031733 	.word	0x00031733
    2528:	0003174f 	.word	0x0003174f
    252c:	01000003 	.word	0x01000003
    2530:	00031776 	.word	0x00031776

00002534 <Task_TCP_Server_Init>:

/*! Task_TCP_Server_Init initializes the task TCP Server
*
* @brief TCP Server initialization
*/
void Task_TCP_Server_Init( void ){
    2534:	b510      	push	{r4, lr}
    2536:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2538:	2200      	movs	r2, #0
    253a:	2300      	movs	r3, #0
    253c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2540:	2300      	movs	r3, #0
    2542:	2207      	movs	r2, #7
    2544:	4c0b      	ldr	r4, [pc, #44]	; (2574 <Task_TCP_Server_Init+0x40>)
    2546:	e9cd 2303 	strd	r2, r3, [sp, #12]
    254a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    254e:	9300      	str	r3, [sp, #0]
    2550:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2554:	4620      	mov	r0, r4
    2556:	4b08      	ldr	r3, [pc, #32]	; (2578 <Task_TCP_Server_Init+0x44>)
    2558:	4908      	ldr	r1, [pc, #32]	; (257c <Task_TCP_Server_Init+0x48>)
    255a:	f012 ffb5 	bl	154c8 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    255e:	4908      	ldr	r1, [pc, #32]	; (2580 <Task_TCP_Server_Init+0x4c>)
    2560:	4620      	mov	r0, r4
    2562:	f021 fc67 	bl	23e34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    2566:	4620      	mov	r0, r4
					0,														\
					K_NO_WAIT);	

	 k_thread_name_set(&tcpServerThread, "tcpServer");
	 k_thread_start(&tcpServerThread);
}
    2568:	b008      	add	sp, #32
    256a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    256e:	f021 bc66 	b.w	23e3e <z_impl_k_thread_start>
    2572:	bf00      	nop
    2574:	20001438 	.word	0x20001438
    2578:	00002299 	.word	0x00002299
    257c:	20005550 	.word	0x20005550
    2580:	000317aa 	.word	0x000317aa

00002584 <TCP_Client>:
* 		A sample message will be sent to the IP address defined on the 
*		configuration file as Peer address.
* 		This function is used on an independent thread.
*/
void TCP_Client( void )
{
    2584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *pTransmitterBuffer; 
	int sentBytes;
	int missingBytesToSend = sizeof( TCPClientMessage );

	// Starve the thread until a DHCP IP is assigned to the board 
	while( !context.connected ){
    2588:	4c57      	ldr	r4, [pc, #348]	; (26e8 <TCP_Client+0x164>)
{
    258a:	b08b      	sub	sp, #44	; 0x2c
    258c:	af02      	add	r7, sp, #8
	while( !context.connected ){
    258e:	7923      	ldrb	r3, [r4, #4]
    2590:	07db      	lsls	r3, r3, #31
    2592:	f140 80a3 	bpl.w	26dc <TCP_Client+0x158>
		k_msleep( TCP_CLIENT_SLEEP_TIME_MS );
	}

	// Server IPV4 address configuration
	serverAddress.sin_family = AF_INET;				   
    2596:	4b55      	ldr	r3, [pc, #340]	; (26ec <TCP_Client+0x168>)
    2598:	603b      	str	r3, [r7, #0]
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
    259a:	4955      	ldr	r1, [pc, #340]	; (26f0 <TCP_Client+0x16c>)
    259c:	1d3a      	adds	r2, r7, #4
    259e:	2001      	movs	r0, #1
    25a0:	f01d fbdb 	bl	1fd5a <z_impl_zsock_inet_pton>
	inet_pton( 																\
			AF_INET, CONFIG_NET_CONFIG_PEER_IPV4_ADDR,						\
			&serverAddress.sin_addr );

	// Client socket creation 
	tcpClientSocket = socket( 												\
    25a4:	8838      	ldrh	r0, [r7, #0]
	return z_impl_zsock_socket(family, type, proto);
    25a6:	2206      	movs	r2, #6
    25a8:	2101      	movs	r1, #1
    25aa:	f003 f937 	bl	581c <z_impl_zsock_socket>
							serverAddress.sin_family, 						\
							SOCK_STREAM, 									\
							IPPROTO_TCP );
	
	if ( tcpClientSocket < 0 )	{
    25ae:	1e05      	subs	r5, r0, #0
    25b0:	da18      	bge.n	25e4 <TCP_Client+0x60>
		LOG_ERR( "TCP Client error: socket: %d\n", errno );
    25b2:	f01d fd46 	bl	20042 <__errno>
    25b6:	466c      	mov	r4, sp
    25b8:	b088      	sub	sp, #32
    25ba:	6803      	ldr	r3, [r0, #0]
    25bc:	aa02      	add	r2, sp, #8
    25be:	494d      	ldr	r1, [pc, #308]	; (26f4 <TCP_Client+0x170>)
    25c0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    25c4:	2303      	movs	r3, #3
    25c6:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    25ca:	2300      	movs	r3, #0
    25cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    25d0:	4849      	ldr	r0, [pc, #292]	; (26f8 <TCP_Client+0x174>)
    25d2:	f002 fc57 	bl	4e84 <z_impl_z_log_msg_static_create>
    25d6:	46a5      	mov	sp, r4
	return z_impl_k_sleep(timeout);
    25d8:	f04f 30ff 	mov.w	r0, #4294967295
    25dc:	f04f 31ff 	mov.w	r1, #4294967295
    25e0:	f013 fea4 	bl	1632c <z_impl_k_sleep>
    25e4:	2100      	movs	r1, #0
    25e6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
    25ea:	f013 fe9f 	bl	1632c <z_impl_k_sleep>
	return z_impl_zsock_connect(sock, addr, addrlen);
    25ee:	2208      	movs	r2, #8
    25f0:	4639      	mov	r1, r7
    25f2:	4628      	mov	r0, r5
    25f4:	f01d fa46 	bl	1fa84 <z_impl_zsock_connect>
	connectionResult = connect( 											\
				tcpClientSocket,						    				\
				( struct sockaddr * )&serverAddress,					    \
				sizeof( serverAddress ));

	if ( connectionResult < 0 )	{
    25f8:	2800      	cmp	r0, #0
    25fa:	da18      	bge.n	262e <TCP_Client+0xaa>
		LOG_ERR( "TCP Client error: connect: %d\n", errno );
    25fc:	f01d fd21 	bl	20042 <__errno>
    2600:	466c      	mov	r4, sp
    2602:	b088      	sub	sp, #32
    2604:	6803      	ldr	r3, [r0, #0]
    2606:	aa02      	add	r2, sp, #8
    2608:	493c      	ldr	r1, [pc, #240]	; (26fc <TCP_Client+0x178>)
    260a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    260e:	2303      	movs	r3, #3
    2610:	f842 3f10 	str.w	r3, [r2, #16]!
    2614:	2300      	movs	r3, #0
    2616:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    261a:	4837      	ldr	r0, [pc, #220]	; (26f8 <TCP_Client+0x174>)
    261c:	f002 fc32 	bl	4e84 <z_impl_z_log_msg_static_create>
    2620:	46a5      	mov	sp, r4
    2622:	f04f 30ff 	mov.w	r0, #4294967295
    2626:	f04f 31ff 	mov.w	r1, #4294967295
    262a:	f013 fe7f 	bl	1632c <z_impl_k_sleep>
		k_sleep( K_FOREVER );
	}
	LOG_INF( "TCP Client connected correctly" );
    262e:	4b34      	ldr	r3, [pc, #208]	; (2700 <TCP_Client+0x17c>)
    2630:	61fb      	str	r3, [r7, #28]
    2632:	2302      	movs	r3, #2
    2634:	61bb      	str	r3, [r7, #24]
	int missingBytesToSend = sizeof( TCPClientMessage );
    2636:	f240 46d1 	movw	r6, #1233	; 0x4d1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    263a:	f04f 0900 	mov.w	r9, #0
    263e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 2704 <TCP_Client+0x180>
    2642:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 26f8 <TCP_Client+0x174>
    2646:	2300      	movs	r3, #0
    2648:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    264c:	482a      	ldr	r0, [pc, #168]	; (26f8 <TCP_Client+0x174>)
    264e:	f107 0218 	add.w	r2, r7, #24
    2652:	f002 fc17 	bl	4e84 <z_impl_z_log_msg_static_create>
    2656:	2300      	movs	r3, #0
    2658:	f240 42d1 	movw	r2, #1233	; 0x4d1
    265c:	4659      	mov	r1, fp
    265e:	4628      	mov	r0, r5
    2660:	e9cd 9900 	strd	r9, r9, [sp]
    2664:	f01d fa9c 	bl	1fba0 <z_impl_zsock_sendto>
						tcpClientSocket,									\
						TCPClientMessage,									\
						sizeof( TCPClientMessage ),							\
						0 );
        
		if ( sentBytes < 0 ) {
    2668:	1e04      	subs	r4, r0, #0
    266a:	da21      	bge.n	26b0 <TCP_Client+0x12c>
			LOG_ERR( "TCP Client error: send: %d\n", errno );
    266c:	f01d fce9 	bl	20042 <__errno>
    2670:	46ea      	mov	sl, sp
    2672:	b088      	sub	sp, #32
    2674:	6803      	ldr	r3, [r0, #0]
    2676:	aa02      	add	r2, sp, #8
    2678:	4923      	ldr	r1, [pc, #140]	; (2708 <TCP_Client+0x184>)
    267a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    267e:	2303      	movs	r3, #3
    2680:	f842 3f10 	str.w	r3, [r2, #16]!
    2684:	2300      	movs	r3, #0
    2686:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    268a:	4640      	mov	r0, r8
    268c:	f002 fbfa 	bl	4e84 <z_impl_z_log_msg_static_create>
			close( tcpClientSocket );
    2690:	4628      	mov	r0, r5
    2692:	46d5      	mov	sp, sl
    2694:	f001 fa94 	bl	3bc0 <_close>
			LOG_ERR( "TCP Client error Connection closed\n" );
    2698:	4b1c      	ldr	r3, [pc, #112]	; (270c <TCP_Client+0x188>)
    269a:	61fb      	str	r3, [r7, #28]
    269c:	2302      	movs	r3, #2
    269e:	61bb      	str	r3, [r7, #24]
    26a0:	2300      	movs	r3, #0
    26a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    26a6:	4640      	mov	r0, r8
    26a8:	f107 0218 	add.w	r2, r7, #24
    26ac:	f002 fbea 	bl	4e84 <z_impl_z_log_msg_static_create>
		}

		LOG_INF( "TCP Client mode. Sent: %d", sentBytes);
    26b0:	46ea      	mov	sl, sp
    26b2:	b088      	sub	sp, #32
    26b4:	aa02      	add	r2, sp, #8
    26b6:	4b16      	ldr	r3, [pc, #88]	; (2710 <TCP_Client+0x18c>)
    26b8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    26bc:	2303      	movs	r3, #3
    26be:	f842 3f10 	str.w	r3, [r2, #16]!
    26c2:	2300      	movs	r3, #0
    26c4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    26c8:	4640      	mov	r0, r8
    26ca:	f002 fbdb 	bl	4e84 <z_impl_z_log_msg_static_create>
		pTransmitterBuffer += sentBytes;
		missingBytesToSend -= sentBytes;

	} while ( missingBytesToSend );
    26ce:	1b36      	subs	r6, r6, r4
    26d0:	46d5      	mov	sp, sl
    26d2:	d1c0      	bne.n	2656 <TCP_Client+0xd2>
}
    26d4:	3724      	adds	r7, #36	; 0x24
    26d6:	46bd      	mov	sp, r7
    26d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26dc:	2100      	movs	r1, #0
    26de:	f640 40cd 	movw	r0, #3277	; 0xccd
    26e2:	f013 fe23 	bl	1632c <z_impl_k_sleep>
    26e6:	e752      	b.n	258e <TCP_Client+0xa>
    26e8:	20002a08 	.word	0x20002a08
    26ec:	f8010001 	.word	0xf8010001
    26f0:	000317b4 	.word	0x000317b4
    26f4:	000317bc 	.word	0x000317bc
    26f8:	00024d80 	.word	0x00024d80
    26fc:	000317da 	.word	0x000317da
    2700:	000317f9 	.word	0x000317f9
    2704:	20000c58 	.word	0x20000c58
    2708:	00031818 	.word	0x00031818
    270c:	00031834 	.word	0x00031834
    2710:	00031858 	.word	0x00031858

00002714 <Task_TCP_Client_Init>:

/*! Task_TCP_Client_Init initializes the task TCP Client
*
* @brief TCP Client initialization
*/
void Task_TCP_Client_Init( void ){
    2714:	b510      	push	{r4, lr}
    2716:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2718:	2200      	movs	r2, #0
    271a:	2300      	movs	r3, #0
    271c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2720:	2300      	movs	r3, #0
    2722:	2207      	movs	r2, #7
    2724:	4c0b      	ldr	r4, [pc, #44]	; (2754 <Task_TCP_Client_Init+0x40>)
    2726:	e9cd 2303 	strd	r2, r3, [sp, #12]
    272a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    272e:	9300      	str	r3, [sp, #0]
    2730:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2734:	4620      	mov	r0, r4
    2736:	4b08      	ldr	r3, [pc, #32]	; (2758 <Task_TCP_Client_Init+0x44>)
    2738:	4908      	ldr	r1, [pc, #32]	; (275c <Task_TCP_Client_Init+0x48>)
    273a:	f012 fec5 	bl	154c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    273e:	4908      	ldr	r1, [pc, #32]	; (2760 <Task_TCP_Client_Init+0x4c>)
    2740:	4620      	mov	r0, r4
    2742:	f021 fb77 	bl	23e34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    2746:	4620      	mov	r0, r4

	 k_thread_name_set(&tcpClientThread, "tcpClient");
	 k_thread_start(&tcpClientThread);


};
    2748:	b008      	add	sp, #32
    274a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    274e:	f021 bb76 	b.w	23e3e <z_impl_k_thread_start>
    2752:	bf00      	nop
    2754:	200014b8 	.word	0x200014b8
    2758:	00002585 	.word	0x00002585
    275c:	20005d50 	.word	0x20005d50
    2760:	00031872 	.word	0x00031872

00002764 <UDP_Server>:
*        different clients, and echo their messages. 
*        When the clients send messages to the already known board IP 
*        address, the UDP_Server thread will re-send them their messages.  
*        This function is used on an independent thread.
*/
void UDP_Server(void) {   
    2764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int receivedBytes;
    int sentBytes = 0;
    uint8_t *pTransmitterBuffer;

    // Starve the thread until a DHCP IP is assigned to the board 
    while( !context.connected ){
    2768:	4c73      	ldr	r4, [pc, #460]	; (2938 <UDP_Server+0x1d4>)
void UDP_Server(void) {   
    276a:	b089      	sub	sp, #36	; 0x24
    276c:	af02      	add	r7, sp, #8
    while( !context.connected ){
    276e:	7923      	ldrb	r3, [r4, #4]
    2770:	07db      	lsls	r3, r3, #31
    2772:	f140 808e 	bpl.w	2892 <UDP_Server+0x12e>
		k_msleep( UDP_SERVER_SLEEP_TIME_MS );
	}

    // Server socket creation 
	( void )memset( &bindingAddress, 0, sizeof( bindingAddress ));
	bindingAddress.sin_family = AF_INET;
    2776:	2400      	movs	r4, #0
    2778:	4b70      	ldr	r3, [pc, #448]	; (293c <UDP_Server+0x1d8>)
    277a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return z_impl_zsock_socket(family, type, proto);
    277e:	2211      	movs	r2, #17
    2780:	2102      	movs	r1, #2
    2782:	2001      	movs	r0, #1
    2784:	f003 f84a 	bl	581c <z_impl_zsock_socket>

    udpServerSocket = socket(                                               \
                            bindingAddress.sin_family,                      \
                            SOCK_DGRAM,                                     \
                            IPPROTO_UDP);
    if ( udpServerSocket < 0 ) {
    2788:	1e05      	subs	r5, r0, #0
    278a:	da18      	bge.n	27be <UDP_Server+0x5a>
		LOG_ERR( "UDP Server error: socket: %d\n", errno );
    278c:	f01d fc59 	bl	20042 <__errno>
    2790:	466e      	mov	r6, sp
    2792:	b088      	sub	sp, #32
    2794:	6803      	ldr	r3, [r0, #0]
    2796:	aa02      	add	r2, sp, #8
    2798:	4969      	ldr	r1, [pc, #420]	; (2940 <UDP_Server+0x1dc>)
    279a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    279e:	2303      	movs	r3, #3
    27a0:	f842 3f10 	str.w	r3, [r2, #16]!
    27a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    27a8:	4623      	mov	r3, r4
    27aa:	4866      	ldr	r0, [pc, #408]	; (2944 <UDP_Server+0x1e0>)
    27ac:	f002 fb6a 	bl	4e84 <z_impl_z_log_msg_static_create>
    27b0:	46b5      	mov	sp, r6
	return z_impl_k_sleep(timeout);
    27b2:	f04f 30ff 	mov.w	r0, #4294967295
    27b6:	f04f 31ff 	mov.w	r1, #4294967295
    27ba:	f013 fdb7 	bl	1632c <z_impl_k_sleep>
	return z_impl_zsock_bind(sock, addr, addrlen);
    27be:	2208      	movs	r2, #8
    27c0:	4628      	mov	r0, r5
    27c2:	18b9      	adds	r1, r7, r2
    27c4:	f01d f931 	bl	1fa2a <z_impl_zsock_bind>
    // Binding 
    bindingResult = bind(                                                   \
                        udpServerSocket,                                    \
                        ( struct sockaddr * )&bindingAddress,               \
                        sizeof( bindingAddress ));
	if ( bindingResult < 0 ) {
    27c8:	2800      	cmp	r0, #0
    27ca:	da18      	bge.n	27fe <UDP_Server+0x9a>
		LOG_ERR( "UDP Server error: bind: %d\n", errno );
    27cc:	f01d fc39 	bl	20042 <__errno>
    27d0:	466c      	mov	r4, sp
    27d2:	b088      	sub	sp, #32
    27d4:	6803      	ldr	r3, [r0, #0]
    27d6:	aa02      	add	r2, sp, #8
    27d8:	495b      	ldr	r1, [pc, #364]	; (2948 <UDP_Server+0x1e4>)
    27da:	e9c2 1305 	strd	r1, r3, [r2, #20]
    27de:	2303      	movs	r3, #3
    27e0:	f842 3f10 	str.w	r3, [r2, #16]!
    27e4:	2300      	movs	r3, #0
    27e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    27ea:	4856      	ldr	r0, [pc, #344]	; (2944 <UDP_Server+0x1e0>)
    27ec:	f002 fb4a 	bl	4e84 <z_impl_z_log_msg_static_create>
    27f0:	46a5      	mov	sp, r4
    27f2:	f04f 30ff 	mov.w	r0, #4294967295
    27f6:	f04f 31ff 	mov.w	r1, #4294967295
    27fa:	f013 fd97 	bl	1632c <z_impl_k_sleep>
void UDP_Server(void) {   
    27fe:	2400      	movs	r4, #0
	}

    // Sending/receiving loop 
	while ( 1 ) {
		
        LOG_INF( "UDP Server waiting for UDP packets on port %d...",        \
    2800:	466e      	mov	r6, sp
    2802:	b088      	sub	sp, #32
    2804:	aa02      	add	r2, sp, #8
    2806:	4b51      	ldr	r3, [pc, #324]	; (294c <UDP_Server+0x1e8>)
    2808:	6153      	str	r3, [r2, #20]
    280a:	f241 0393 	movw	r3, #4243	; 0x1093
    280e:	6193      	str	r3, [r2, #24]
    2810:	2303      	movs	r3, #3
    2812:	f842 3f10 	str.w	r3, [r2, #16]!
    2816:	2300      	movs	r3, #0
    2818:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    281c:	4849      	ldr	r0, [pc, #292]	; (2944 <UDP_Server+0x1e0>)
    281e:	f002 fb31 	bl	4e84 <z_impl_z_log_msg_static_create>
    2822:	46b5      	mov	sp, r6
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    2824:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2950 <UDP_Server+0x1ec>
            UDP_SERVER_PORT );

        do {
            // Receive 
            clientAddressLength = sizeof( clientAddress );
    2828:	2308      	movs	r3, #8
    282a:	607b      	str	r3, [r7, #4]
    282c:	1d3b      	adds	r3, r7, #4
    282e:	f107 0610 	add.w	r6, r7, #16
    2832:	9301      	str	r3, [sp, #4]
    2834:	2280      	movs	r2, #128	; 0x80
    2836:	2300      	movs	r3, #0
    2838:	4649      	mov	r1, r9
    283a:	4628      	mov	r0, r5
    283c:	9600      	str	r6, [sp, #0]
    283e:	f01d fa58 	bl	1fcf2 <z_impl_zsock_recvfrom>
                                    sizeof( receiverBuffer ),               \
                                    0,                                      \
                                    &clientAddress,                         \
                                    &clientAddressLength );                 \

            if ( receivedBytes <= 0 ) {
    2842:	f1b0 0800 	subs.w	r8, r0, #0
    2846:	dd2a      	ble.n	289e <UDP_Server+0x13a>
    2848:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2944 <UDP_Server+0x1e0>
            } 

            // Send 
            pTransmitterBuffer = receiverBuffer;
            do{
                sentBytes = sendto(                                         \
    284c:	687b      	ldr	r3, [r7, #4]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    284e:	2280      	movs	r2, #128	; 0x80
    2850:	e9cd 6300 	strd	r6, r3, [sp]
    2854:	4649      	mov	r1, r9
    2856:	2300      	movs	r3, #0
    2858:	4628      	mov	r0, r5
    285a:	f01d f9a1 	bl	1fba0 <z_impl_zsock_sendto>
                                    receiverBuffer,                         \
                                    sizeof( receiverBuffer ),               \
                                    0,                                      \
                                    &clientAddress,                         \
                                    clientAddressLength );                  \
                if ( sentBytes < 0 ) {
    285e:	1e04      	subs	r4, r0, #0
    2860:	da3e      	bge.n	28e0 <UDP_Server+0x17c>
                    LOG_ERR( "UDP Server: Failed to send %d", errno );
    2862:	f01d fbee 	bl	20042 <__errno>
    2866:	466c      	mov	r4, sp
    2868:	b088      	sub	sp, #32
    286a:	6803      	ldr	r3, [r0, #0]
    286c:	aa02      	add	r2, sp, #8
    286e:	4939      	ldr	r1, [pc, #228]	; (2954 <UDP_Server+0x1f0>)
    2870:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2874:	2303      	movs	r3, #3
    2876:	f842 3f10 	str.w	r3, [r2, #16]!
    287a:	2300      	movs	r3, #0
    287c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2880:	4830      	ldr	r0, [pc, #192]	; (2944 <UDP_Server+0x1e0>)
    2882:	f002 faff 	bl	4e84 <z_impl_z_log_msg_static_create>
    2886:	46a5      	mov	sp, r4
                    sentBytes = -errno;
    2888:	f01d fbdb 	bl	20042 <__errno>
    288c:	6804      	ldr	r4, [r0, #0]
    288e:	4264      	negs	r4, r4
                    break;
    2890:	e7ca      	b.n	2828 <UDP_Server+0xc4>
    2892:	2100      	movs	r1, #0
    2894:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2898:	f013 fd48 	bl	1632c <z_impl_k_sleep>
    289c:	e767      	b.n	276e <UDP_Server+0xa>
                if( receivedBytes < 0 ){
    289e:	d016      	beq.n	28ce <UDP_Server+0x16a>
                    LOG_ERR( "UDP Server: Connection error %d", errno );
    28a0:	f01d fbcf 	bl	20042 <__errno>
    28a4:	466c      	mov	r4, sp
    28a6:	b088      	sub	sp, #32
    28a8:	6803      	ldr	r3, [r0, #0]
    28aa:	aa02      	add	r2, sp, #8
    28ac:	492a      	ldr	r1, [pc, #168]	; (2958 <UDP_Server+0x1f4>)
    28ae:	e9c2 1305 	strd	r1, r3, [r2, #20]
    28b2:	2303      	movs	r3, #3
    28b4:	f842 3f10 	str.w	r3, [r2, #16]!
    28b8:	2300      	movs	r3, #0
    28ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    28be:	4821      	ldr	r0, [pc, #132]	; (2944 <UDP_Server+0x1e0>)
    28c0:	f002 fae0 	bl	4e84 <z_impl_z_log_msg_static_create>
    28c4:	46a5      	mov	sp, r4
                    sentBytes = -errno;
    28c6:	f01d fbbc 	bl	20042 <__errno>
    28ca:	6804      	ldr	r4, [r0, #0]
    28cc:	4264      	negs	r4, r4
                LOG_INF( "UDP Server mode: Received and replied with %d "   \
                        "bytes", sentBytes );
            } while ( receivedBytes );

	    } while ( true );
        if ( sentBytes < 0 ) {
    28ce:	2c00      	cmp	r4, #0
    28d0:	da96      	bge.n	2800 <UDP_Server+0x9c>
    28d2:	f04f 31ff 	mov.w	r1, #4294967295
    28d6:	f04f 30ff 	mov.w	r0, #4294967295
    28da:	f013 fd27 	bl	1632c <z_impl_k_sleep>
    28de:	e78f      	b.n	2800 <UDP_Server+0x9c>
                    receivedBytes -= sentBytes;
    28e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28e4:	fb94 f3f2 	sdiv	r3, r4, r2
    28e8:	fb02 4313 	mls	r3, r2, r3, r4
    28ec:	eba8 0804 	sub.w	r8, r8, r4
                if ( sentBytes % 1000 == 0U ) {
    28f0:	b973      	cbnz	r3, 2910 <UDP_Server+0x1ac>
                    LOG_INF( "UDP Server: Sent %u packets", sentBytes );
    28f2:	46eb      	mov	fp, sp
    28f4:	b088      	sub	sp, #32
    28f6:	aa02      	add	r2, sp, #8
    28f8:	4918      	ldr	r1, [pc, #96]	; (295c <UDP_Server+0x1f8>)
    28fa:	e9c2 1405 	strd	r1, r4, [r2, #20]
    28fe:	2103      	movs	r1, #3
    2900:	f842 1f10 	str.w	r1, [r2, #16]!
    2904:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2908:	4650      	mov	r0, sl
    290a:	f002 fabb 	bl	4e84 <z_impl_z_log_msg_static_create>
    290e:	46dd      	mov	sp, fp
                LOG_INF( "UDP Server mode: Received and replied with %d "   \
    2910:	46eb      	mov	fp, sp
    2912:	b088      	sub	sp, #32
    2914:	aa02      	add	r2, sp, #8
    2916:	4b12      	ldr	r3, [pc, #72]	; (2960 <UDP_Server+0x1fc>)
    2918:	e9c2 3405 	strd	r3, r4, [r2, #20]
    291c:	2303      	movs	r3, #3
    291e:	f842 3f10 	str.w	r3, [r2, #16]!
    2922:	2300      	movs	r3, #0
    2924:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2928:	4650      	mov	r0, sl
    292a:	f002 faab 	bl	4e84 <z_impl_z_log_msg_static_create>
    292e:	46dd      	mov	sp, fp
            } while ( receivedBytes );
    2930:	f1b8 0f00 	cmp.w	r8, #0
    2934:	d18a      	bne.n	284c <UDP_Server+0xe8>
    2936:	e777      	b.n	2828 <UDP_Server+0xc4>
    2938:	20002a08 	.word	0x20002a08
    293c:	93100001 	.word	0x93100001
    2940:	0003187c 	.word	0x0003187c
    2944:	00024d80 	.word	0x00024d80
    2948:	0003189a 	.word	0x0003189a
    294c:	000318b6 	.word	0x000318b6
    2950:	2000539c 	.word	0x2000539c
    2954:	00031907 	.word	0x00031907
    2958:	000318e7 	.word	0x000318e7
    295c:	00031925 	.word	0x00031925
    2960:	00031941 	.word	0x00031941

00002964 <Task_UDP_Server_Init>:

/*! Task_UDP_Server_Init initializes the task UDP Server
*
* @brief UDP Server initialization
*/
void Task_UDP_Server_Init( void ){
    2964:	b510      	push	{r4, lr}
    2966:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2968:	2200      	movs	r2, #0
    296a:	2300      	movs	r3, #0
    296c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2970:	2300      	movs	r3, #0
    2972:	2207      	movs	r2, #7
    2974:	4c0b      	ldr	r4, [pc, #44]	; (29a4 <Task_UDP_Server_Init+0x40>)
    2976:	e9cd 2303 	strd	r2, r3, [sp, #12]
    297a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    297e:	9300      	str	r3, [sp, #0]
    2980:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2984:	4620      	mov	r0, r4
    2986:	4b08      	ldr	r3, [pc, #32]	; (29a8 <Task_UDP_Server_Init+0x44>)
    2988:	4908      	ldr	r1, [pc, #32]	; (29ac <Task_UDP_Server_Init+0x48>)
    298a:	f012 fd9d 	bl	154c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    298e:	4908      	ldr	r1, [pc, #32]	; (29b0 <Task_UDP_Server_Init+0x4c>)
    2990:	4620      	mov	r0, r4
    2992:	f021 fa4f 	bl	23e34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    2996:	4620      	mov	r0, r4
					0,														\
					K_NO_WAIT);	

	 k_thread_name_set(&udpServerThread, "udpServer");
	 k_thread_start(&udpServerThread);
}
    2998:	b008      	add	sp, #32
    299a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    299e:	f021 ba4e 	b.w	23e3e <z_impl_k_thread_start>
    29a2:	bf00      	nop
    29a4:	20001538 	.word	0x20001538
    29a8:	00002765 	.word	0x00002765
    29ac:	20006550 	.word	0x20006550
    29b0:	00031975 	.word	0x00031975

000029b4 <UDP_Client>:
*		server. 
*		A sample message will be sent to the IP address defined on the 
*		configuration file as Peer address.
* 		This function is used on an independent thread.
*/
void UDP_Client() {
    29b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct sockaddr_in serverAddress;
	int connectionResult;
	int sentBytes = 0;
	
	// Starve the thread until a DHCP IP is assigned to the board 
    while( !context.connected ){
    29b8:	4c52      	ldr	r4, [pc, #328]	; (2b04 <UDP_Client+0x150>)
void UDP_Client() {
    29ba:	b08a      	sub	sp, #40	; 0x28
    29bc:	af02      	add	r7, sp, #8
    while( !context.connected ){
    29be:	7923      	ldrb	r3, [r4, #4]
    29c0:	07db      	lsls	r3, r3, #31
    29c2:	f140 8099 	bpl.w	2af8 <UDP_Client+0x144>
		k_msleep( UDP_CLIENT_SLEEP_TIME_MS );
	}

	// Server IPV4 address configuration 
    serverAddress.sin_family = AF_INET;
    29c6:	4b50      	ldr	r3, [pc, #320]	; (2b08 <UDP_Client+0x154>)
    29c8:	603b      	str	r3, [r7, #0]
	return z_impl_zsock_inet_pton(family, src, dst);
    29ca:	4950      	ldr	r1, [pc, #320]	; (2b0c <UDP_Client+0x158>)
    29cc:	1d3a      	adds	r2, r7, #4
    29ce:	2001      	movs	r0, #1
    29d0:	f01d f9c3 	bl	1fd5a <z_impl_zsock_inet_pton>
			AF_INET, 														\
			CONFIG_NET_CONFIG_PEER_IPV4_ADDR, 								\
			&serverAddress.sin_addr );

	// Client socket creation 
	udpClientSocket = socket( 												\
    29d4:	8838      	ldrh	r0, [r7, #0]
	return z_impl_zsock_socket(family, type, proto);
    29d6:	2211      	movs	r2, #17
    29d8:	2102      	movs	r1, #2
    29da:	f002 ff1f 	bl	581c <z_impl_zsock_socket>
							serverAddress.sin_family, 						\
							SOCK_DGRAM, 									\
							IPPROTO_UDP );									\

	if ( udpClientSocket < 0 ) {
    29de:	1e05      	subs	r5, r0, #0
    29e0:	da18      	bge.n	2a14 <UDP_Client+0x60>
		LOG_ERR( "UDP Client error: socket: %d\n", errno );
    29e2:	f01d fb2e 	bl	20042 <__errno>
    29e6:	466c      	mov	r4, sp
    29e8:	b088      	sub	sp, #32
    29ea:	6803      	ldr	r3, [r0, #0]
    29ec:	aa02      	add	r2, sp, #8
    29ee:	4948      	ldr	r1, [pc, #288]	; (2b10 <UDP_Client+0x15c>)
    29f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    29f4:	2303      	movs	r3, #3
    29f6:	f842 3f10 	str.w	r3, [r2, #16]!
    29fa:	2300      	movs	r3, #0
    29fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2a00:	4844      	ldr	r0, [pc, #272]	; (2b14 <UDP_Client+0x160>)
    2a02:	f002 fa3f 	bl	4e84 <z_impl_z_log_msg_static_create>
    2a06:	46a5      	mov	sp, r4
	return z_impl_k_sleep(timeout);
    2a08:	f04f 30ff 	mov.w	r0, #4294967295
    2a0c:	f04f 31ff 	mov.w	r1, #4294967295
    2a10:	f013 fc8c 	bl	1632c <z_impl_k_sleep>
	return z_impl_zsock_connect(sock, addr, addrlen);
    2a14:	2208      	movs	r2, #8
    2a16:	4639      	mov	r1, r7
    2a18:	4628      	mov	r0, r5
    2a1a:	f01d f833 	bl	1fa84 <z_impl_zsock_connect>
	connectionResult = connect( 											\
							udpClientSocket, 								\
							( struct sockaddr * )&serverAddress, 			\
							sizeof( serverAddress ));

	if ( connectionResult < 0 ) {
    2a1e:	2800      	cmp	r0, #0
    2a20:	da18      	bge.n	2a54 <UDP_Client+0xa0>
		LOG_ERR( "UDP Client error: connect: %d\n", errno );
    2a22:	f01d fb0e 	bl	20042 <__errno>
    2a26:	466c      	mov	r4, sp
    2a28:	b088      	sub	sp, #32
    2a2a:	6803      	ldr	r3, [r0, #0]
    2a2c:	aa02      	add	r2, sp, #8
    2a2e:	493a      	ldr	r1, [pc, #232]	; (2b18 <UDP_Client+0x164>)
    2a30:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2a34:	2303      	movs	r3, #3
    2a36:	f842 3f10 	str.w	r3, [r2, #16]!
    2a3a:	2300      	movs	r3, #0
    2a3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2a40:	4834      	ldr	r0, [pc, #208]	; (2b14 <UDP_Client+0x160>)
    2a42:	f002 fa1f 	bl	4e84 <z_impl_z_log_msg_static_create>
    2a46:	46a5      	mov	sp, r4
    2a48:	f04f 30ff 	mov.w	r0, #4294967295
    2a4c:	f04f 31ff 	mov.w	r1, #4294967295
    2a50:	f013 fc6c 	bl	1632c <z_impl_k_sleep>
		k_sleep( K_FOREVER );
	}
	LOG_INF( "UDP Client connected correctly" );
    2a54:	46e8      	mov	r8, sp
    2a56:	2602      	movs	r6, #2
    2a58:	4b30      	ldr	r3, [pc, #192]	; (2b1c <UDP_Client+0x168>)
    2a5a:	61be      	str	r6, [r7, #24]
    2a5c:	61fb      	str	r3, [r7, #28]
    2a5e:	2300      	movs	r3, #0
    2a60:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    2a64:	482b      	ldr	r0, [pc, #172]	; (2b14 <UDP_Client+0x160>)
    2a66:	f107 0218 	add.w	r2, r7, #24
    2a6a:	f002 fa0b 	bl	4e84 <z_impl_z_log_msg_static_create>
    2a6e:	2100      	movs	r1, #0
    2a70:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    2a74:	f013 fc5a 	bl	1632c <z_impl_k_sleep>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    2a78:	2400      	movs	r4, #0
    2a7a:	f240 42d1 	movw	r2, #1233	; 0x4d1
    2a7e:	e9cd 4400 	strd	r4, r4, [sp]
    2a82:	4623      	mov	r3, r4
    2a84:	4628      	mov	r0, r5
    2a86:	4926      	ldr	r1, [pc, #152]	; (2b20 <UDP_Client+0x16c>)
    2a88:	f01d f88a 	bl	1fba0 <z_impl_zsock_sendto>
					udpClientSocket, 										\
					udpClientMessage, 										\
					sizeof( udpClientMessage ), 							\
					0 );

	LOG_INF( "UDP Client mode. Sent: %d", sentBytes );
    2a8c:	b088      	sub	sp, #32
    2a8e:	4682      	mov	sl, r0
    2a90:	aa02      	add	r2, sp, #8
    2a92:	f04f 0903 	mov.w	r9, #3
    2a96:	4b23      	ldr	r3, [pc, #140]	; (2b24 <UDP_Client+0x170>)
    2a98:	e9c2 3005 	strd	r3, r0, [r2, #20]
    2a9c:	f842 9f10 	str.w	r9, [r2, #16]!
    2aa0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2aa4:	4623      	mov	r3, r4
    2aa6:	481b      	ldr	r0, [pc, #108]	; (2b14 <UDP_Client+0x160>)
    2aa8:	f002 f9ec 	bl	4e84 <z_impl_z_log_msg_static_create>
	if ( sentBytes < 0 ) {
    2aac:	45a2      	cmp	sl, r4
    2aae:	46c5      	mov	sp, r8
    2ab0:	da1e      	bge.n	2af0 <UDP_Client+0x13c>
		LOG_ERR( "UDP Client error: send: %d\n", errno );
    2ab2:	f01d fac6 	bl	20042 <__errno>
    2ab6:	b088      	sub	sp, #32
    2ab8:	6803      	ldr	r3, [r0, #0]
    2aba:	aa02      	add	r2, sp, #8
    2abc:	491a      	ldr	r1, [pc, #104]	; (2b28 <UDP_Client+0x174>)
    2abe:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2ac2:	f842 9f10 	str.w	r9, [r2, #16]!
    2ac6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2aca:	4623      	mov	r3, r4
    2acc:	4811      	ldr	r0, [pc, #68]	; (2b14 <UDP_Client+0x160>)
    2ace:	f002 f9d9 	bl	4e84 <z_impl_z_log_msg_static_create>
		close( udpClientSocket );
    2ad2:	4628      	mov	r0, r5
    2ad4:	46c5      	mov	sp, r8
    2ad6:	f001 f873 	bl	3bc0 <_close>
		LOG_ERR( "UDP Client error Connection from closed\n" );
    2ada:	4b14      	ldr	r3, [pc, #80]	; (2b2c <UDP_Client+0x178>)
    2adc:	e9c7 6306 	strd	r6, r3, [r7, #24]
    2ae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ae4:	4623      	mov	r3, r4
    2ae6:	480b      	ldr	r0, [pc, #44]	; (2b14 <UDP_Client+0x160>)
    2ae8:	f107 0218 	add.w	r2, r7, #24
    2aec:	f002 f9ca 	bl	4e84 <z_impl_z_log_msg_static_create>
	}
	
}
    2af0:	3720      	adds	r7, #32
    2af2:	46bd      	mov	sp, r7
    2af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2af8:	2100      	movs	r1, #0
    2afa:	f640 40cd 	movw	r0, #3277	; 0xccd
    2afe:	f013 fc15 	bl	1632c <z_impl_k_sleep>
    2b02:	e75c      	b.n	29be <UDP_Client+0xa>
    2b04:	20002a08 	.word	0x20002a08
    2b08:	f7010001 	.word	0xf7010001
    2b0c:	000317b4 	.word	0x000317b4
    2b10:	0003197f 	.word	0x0003197f
    2b14:	00024d80 	.word	0x00024d80
    2b18:	0003199d 	.word	0x0003199d
    2b1c:	000319bc 	.word	0x000319bc
    2b20:	00031a44 	.word	0x00031a44
    2b24:	000319db 	.word	0x000319db
    2b28:	000319f5 	.word	0x000319f5
    2b2c:	00031a11 	.word	0x00031a11

00002b30 <Task_UDP_Client_Init>:

/*! Task_UDP_Client_Init initializes the task UDP Client
*
* @brief UDP Client initialization
*/
void Task_UDP_Client_Init( void ){
    2b30:	b510      	push	{r4, lr}
    2b32:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2b34:	2200      	movs	r2, #0
    2b36:	2300      	movs	r3, #0
    2b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2b3c:	2300      	movs	r3, #0
    2b3e:	2207      	movs	r2, #7
    2b40:	4c0b      	ldr	r4, [pc, #44]	; (2b70 <Task_UDP_Client_Init+0x40>)
    2b42:	e9cd 2303 	strd	r2, r3, [sp, #12]
    2b46:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2b4a:	9300      	str	r3, [sp, #0]
    2b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2b50:	4620      	mov	r0, r4
    2b52:	4b08      	ldr	r3, [pc, #32]	; (2b74 <Task_UDP_Client_Init+0x44>)
    2b54:	4908      	ldr	r1, [pc, #32]	; (2b78 <Task_UDP_Client_Init+0x48>)
    2b56:	f012 fcb7 	bl	154c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2b5a:	4908      	ldr	r1, [pc, #32]	; (2b7c <Task_UDP_Client_Init+0x4c>)
    2b5c:	4620      	mov	r0, r4
    2b5e:	f021 f969 	bl	23e34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    2b62:	4620      	mov	r0, r4
					0,														\
					K_NO_WAIT);	

	 k_thread_name_set(&udpClientThread, "udpClient");
	 k_thread_start(&udpClientThread);
}
    2b64:	b008      	add	sp, #32
    2b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2b6a:	f021 b968 	b.w	23e3e <z_impl_k_thread_start>
    2b6e:	bf00      	nop
    2b70:	200015b8 	.word	0x200015b8
    2b74:	000029b5 	.word	0x000029b5
    2b78:	20006d50 	.word	0x20006d50
    2b7c:	00031a3a 	.word	0x00031a3a

00002b80 <Toggle_Led>:
* @brief Toggle_Led turns on and off the LED0 on the board depending on the
* 		status of the Wifi connection. When the board is ready to receive 
*		TCP or UDP connections, the LED will blink. 
* 		This function is used on an independent thread.
*/
void Toggle_Led( void ) {
    2b80:	b5b0      	push	{r4, r5, r7, lr}
    2b82:	b086      	sub	sp, #24
    2b84:	af00      	add	r7, sp, #0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2b86:	4c25      	ldr	r4, [pc, #148]	; (2c1c <Toggle_Led+0x9c>)
    2b88:	4620      	mov	r0, r4
    2b8a:	f021 f87f 	bl	23c8c <z_device_is_ready>
	int returnCode;

	if( !device_is_ready ( led.port ) ) {
    2b8e:	4603      	mov	r3, r0
    2b90:	b968      	cbnz	r0, 2bae <Toggle_Led+0x2e>
		LOG_ERR( "LED device is not ready" );
    2b92:	4a23      	ldr	r2, [pc, #140]	; (2c20 <Toggle_Led+0xa0>)
    2b94:	617a      	str	r2, [r7, #20]
    2b96:	2202      	movs	r2, #2
    2b98:	613a      	str	r2, [r7, #16]
    2b9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b9e:	4821      	ldr	r0, [pc, #132]	; (2c24 <Toggle_Led+0xa4>)
    2ba0:	f107 0210 	add.w	r2, r7, #16
    2ba4:	f002 f96e 	bl	4e84 <z_impl_z_log_msg_static_create>
		} else {
			gpio_pin_set_dt( &led, 0 );
			k_msleep( LED_SLEEP_TIME_MS );
		}
	}
}
    2ba8:	3718      	adds	r7, #24
    2baa:	46bd      	mov	sp, r7
    2bac:	bdb0      	pop	{r4, r5, r7, pc}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    2bae:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    2bb0:	68a1      	ldr	r1, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2bb2:	6813      	ldr	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
    2bb4:	4620      	mov	r0, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2bba:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    2bbc:	680b      	ldr	r3, [r1, #0]
    2bbe:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    2bc2:	2106      	movs	r1, #6
    2bc4:	4798      	blx	r3
	if( returnCode < 0 ) {
    2bc6:	2800      	cmp	r0, #0
    2bc8:	db0e      	blt.n	2be8 <Toggle_Led+0x68>
		if( context.connected ) {
    2bca:	4d17      	ldr	r5, [pc, #92]	; (2c28 <Toggle_Led+0xa8>)
    2bcc:	792b      	ldrb	r3, [r5, #4]
    2bce:	07da      	lsls	r2, r3, #31
    2bd0:	d51b      	bpl.n	2c0a <Toggle_Led+0x8a>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    2bd2:	68a3      	ldr	r3, [r4, #8]
    2bd4:	695b      	ldr	r3, [r3, #20]
	return api->port_set_bits_raw(port, pins);
    2bd6:	2140      	movs	r1, #64	; 0x40
    2bd8:	4620      	mov	r0, r4
    2bda:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
    2bdc:	2100      	movs	r1, #0
    2bde:	f640 40cd 	movw	r0, #3277	; 0xccd
    2be2:	f013 fba3 	bl	1632c <z_impl_k_sleep>
    2be6:	e7f1      	b.n	2bcc <Toggle_Led+0x4c>
		LOG_ERR( "Error %d: failed to configure LED pin", returnCode );
    2be8:	466c      	mov	r4, sp
    2bea:	b088      	sub	sp, #32
    2bec:	466a      	mov	r2, sp
    2bee:	4b0f      	ldr	r3, [pc, #60]	; (2c2c <Toggle_Led+0xac>)
    2bf0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    2bf4:	2303      	movs	r3, #3
    2bf6:	f842 3f10 	str.w	r3, [r2, #16]!
    2bfa:	2300      	movs	r3, #0
    2bfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2c00:	4808      	ldr	r0, [pc, #32]	; (2c24 <Toggle_Led+0xa4>)
    2c02:	f002 f93f 	bl	4e84 <z_impl_z_log_msg_static_create>
    2c06:	46a5      	mov	sp, r4
		return;
    2c08:	e7ce      	b.n	2ba8 <Toggle_Led+0x28>
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    2c0a:	6923      	ldr	r3, [r4, #16]
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	065b      	lsls	r3, r3, #25
	return api->port_clear_bits_raw(port, pins);
    2c10:	68a3      	ldr	r3, [r4, #8]
    2c12:	bf54      	ite	pl
    2c14:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
    2c16:	68db      	ldrmi	r3, [r3, #12]
    2c18:	e7dd      	b.n	2bd6 <Toggle_Led+0x56>
    2c1a:	bf00      	nop
    2c1c:	00024940 	.word	0x00024940
    2c20:	00031f15 	.word	0x00031f15
    2c24:	00024d80 	.word	0x00024d80
    2c28:	20002a08 	.word	0x20002a08
    2c2c:	00031f2d 	.word	0x00031f2d

00002c30 <Task_Toggle_Led_Init>:

/*! Task_Toggle_Led_Init initializes the task Toggle Led
*
* @brief Toggle Led initialization
*/
void Task_Toggle_Led_Init( void ){
    2c30:	b510      	push	{r4, lr}
    2c32:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2c34:	2200      	movs	r2, #0
    2c36:	2300      	movs	r3, #0
    2c38:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2c3c:	2300      	movs	r3, #0
    2c3e:	2207      	movs	r2, #7
    2c40:	4c0b      	ldr	r4, [pc, #44]	; (2c70 <Task_Toggle_Led_Init+0x40>)
    2c42:	e9cd 2303 	strd	r2, r3, [sp, #12]
    2c46:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2c4a:	9300      	str	r3, [sp, #0]
    2c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c50:	4620      	mov	r0, r4
    2c52:	4b08      	ldr	r3, [pc, #32]	; (2c74 <Task_Toggle_Led_Init+0x44>)
    2c54:	4908      	ldr	r1, [pc, #32]	; (2c78 <Task_Toggle_Led_Init+0x48>)
    2c56:	f012 fc37 	bl	154c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2c5a:	4908      	ldr	r1, [pc, #32]	; (2c7c <Task_Toggle_Led_Init+0x4c>)
    2c5c:	4620      	mov	r0, r4
    2c5e:	f021 f8e9 	bl	23e34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    2c62:	4620      	mov	r0, r4
					0,														\
					K_NO_WAIT);	

	 k_thread_name_set(&ledThread, "toggleLed");
	 k_thread_start(&ledThread);
    2c64:	b008      	add	sp, #32
    2c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2c6a:	f021 b8e8 	b.w	23e3e <z_impl_k_thread_start>
    2c6e:	bf00      	nop
    2c70:	20001638 	.word	0x20001638
    2c74:	00002b81 	.word	0x00002b81
    2c78:	20007550 	.word	0x20007550
    2c7c:	00031f53 	.word	0x00031f53

00002c80 <Handle_Net_Events>:
* @return void
*/
static void Handle_Net_Events(                                              \
                            struct net_mgmt_event_callback *callback,       \
				    		uint32_t managementEvent,                       \
							struct net_if *interface) {
    2c80:	b590      	push	{r4, r7, lr}

	switch ( managementEvent ) {
    2c82:	4b10      	ldr	r3, [pc, #64]	; (2cc4 <Handle_Net_Events+0x44>)
							struct net_if *interface) {
    2c84:	b0a1      	sub	sp, #132	; 0x84
	switch ( managementEvent ) {
    2c86:	4299      	cmp	r1, r3
							struct net_if *interface) {
    2c88:	af00      	add	r7, sp, #0
	switch ( managementEvent ) {
    2c8a:	d118      	bne.n	2cbe <Handle_Net_Events+0x3e>
					events callback
* @return void
*/
static void print_dhcp_ip(struct net_mgmt_event_callback *callback) {
	const struct net_if_dhcpv4 *dhcpv4 = callback -> info;
	const struct in_addr *address = &dhcpv4 -> requested_ip;
    2c8c:	6881      	ldr	r1, [r0, #8]
    2c8e:	3128      	adds	r1, #40	; 0x28
    2c90:	2380      	movs	r3, #128	; 0x80
    2c92:	463a      	mov	r2, r7
    2c94:	2001      	movs	r0, #1
    2c96:	f005 fd0b 	bl	86b0 <z_impl_net_addr_ntop>
	char dhcpInfo[128];

	net_addr_ntop( AF_INET, address, dhcpInfo, sizeof( dhcpInfo ));

	LOG_INF( "DHCP IP address: %s", dhcpInfo );
    2c9a:	466c      	mov	r4, sp
    2c9c:	b088      	sub	sp, #32
    2c9e:	466a      	mov	r2, sp
    2ca0:	4b09      	ldr	r3, [pc, #36]	; (2cc8 <Handle_Net_Events+0x48>)
    2ca2:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2ca6:	e9c2 3705 	strd	r3, r7, [r2, #20]
    2caa:	f44f 7300 	mov.w	r3, #512	; 0x200
    2cae:	8393      	strh	r3, [r2, #28]
    2cb0:	4b06      	ldr	r3, [pc, #24]	; (2ccc <Handle_Net_Events+0x4c>)
    2cb2:	4807      	ldr	r0, [pc, #28]	; (2cd0 <Handle_Net_Events+0x50>)
    2cb4:	f842 3f10 	str.w	r3, [r2, #16]!
    2cb8:	f01b fce6 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2cbc:	46a5      	mov	sp, r4
}
    2cbe:	3784      	adds	r7, #132	; 0x84
    2cc0:	46bd      	mov	sp, r7
    2cc2:	bd90      	pop	{r4, r7, pc}
    2cc4:	e0040008 	.word	0xe0040008
    2cc8:	00031f5d 	.word	0x00031f5d
    2ccc:	01000003 	.word	0x01000003
    2cd0:	00024d80 	.word	0x00024d80

00002cd4 <Cmd_Wifi_Status.isra.0>:
static int Cmd_Wifi_Status( void ) {
    2cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2cd8:	b099      	sub	sp, #100	; 0x64
    2cda:	af00      	add	r7, sp, #0
	struct net_if *interface = net_if_get_default();
    2cdc:	f005 f93e 	bl	7f5c <net_if_get_default>
    2ce0:	4604      	mov	r4, r0
	struct wifi_iface_status status = { 0 };
    2ce2:	2244      	movs	r2, #68	; 0x44
    2ce4:	2100      	movs	r1, #0
    2ce6:	f107 001c 	add.w	r0, r7, #28
    2cea:	f014 fb75 	bl	173d8 <memset>
	if ( net_mgmt(                                                          \
    2cee:	2344      	movs	r3, #68	; 0x44
    2cf0:	4621      	mov	r1, r4
    2cf2:	4887      	ldr	r0, [pc, #540]	; (2f10 <Cmd_Wifi_Status.isra.0+0x23c>)
    2cf4:	f107 021c 	add.w	r2, r7, #28
    2cf8:	f01d fcba 	bl	20670 <net_mgmt_NET_REQUEST_WIFI_IFACE_STATUS>
    2cfc:	2302      	movs	r3, #2
    2cfe:	b168      	cbz	r0, 2d1c <Cmd_Wifi_Status.isra.0+0x48>
		LOG_INF("Status request failed");
    2d00:	4a84      	ldr	r2, [pc, #528]	; (2f14 <Cmd_Wifi_Status.isra.0+0x240>)
    2d02:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    2d06:	e9c7 3204 	strd	r3, r2, [r7, #16]
    2d0a:	4883      	ldr	r0, [pc, #524]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2d0c:	f107 0210 	add.w	r2, r7, #16
    2d10:	f01b fcba 	bl	1e688 <z_log_msg_static_create.constprop.0>
}
    2d14:	3764      	adds	r7, #100	; 0x64
    2d16:	46bd      	mov	sp, r7
    2d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_INF( "==================" );
    2d1c:	4a7f      	ldr	r2, [pc, #508]	; (2f1c <Cmd_Wifi_Status.isra.0+0x248>)
    2d1e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    2d22:	e9c7 3204 	strd	r3, r2, [r7, #16]
    2d26:	487c      	ldr	r0, [pc, #496]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2d28:	f107 0210 	add.w	r2, r7, #16
    2d2c:	f01b fcac 	bl	1e688 <z_log_msg_static_create.constprop.0>
	LOG_INF( "State: %s", wifi_state_txt( status.state ) );
    2d30:	7f3b      	ldrb	r3, [r7, #28]
    2d32:	466c      	mov	r4, sp
    2d34:	2b09      	cmp	r3, #9
    2d36:	bf98      	it	ls
    2d38:	4a79      	ldrls	r2, [pc, #484]	; (2f20 <Cmd_Wifi_Status.isra.0+0x24c>)
    2d3a:	b088      	sub	sp, #32
    2d3c:	bf94      	ite	ls
    2d3e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    2d42:	4b78      	ldrhi	r3, [pc, #480]	; (2f24 <Cmd_Wifi_Status.isra.0+0x250>)
    2d44:	466a      	mov	r2, sp
    2d46:	4978      	ldr	r1, [pc, #480]	; (2f28 <Cmd_Wifi_Status.isra.0+0x254>)
    2d48:	4873      	ldr	r0, [pc, #460]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2d4a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
    2d52:	8393      	strh	r3, [r2, #28]
    2d54:	4b75      	ldr	r3, [pc, #468]	; (2f2c <Cmd_Wifi_Status.isra.0+0x258>)
    2d56:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2d5a:	f842 3f10 	str.w	r3, [r2, #16]!
    2d5e:	f01b fc93 	bl	1e688 <z_log_msg_static_create.constprop.0>
	if ( status.state >= WIFI_STATE_ASSOCIATED ) {
    2d62:	69fb      	ldr	r3, [r7, #28]
    2d64:	46a5      	mov	sp, r4
    2d66:	2b05      	cmp	r3, #5
    2d68:	ddd4      	ble.n	2d14 <Cmd_Wifi_Status.isra.0+0x40>
		LOG_INF( "Interface Mode: %s",                                      \
    2d6a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    2d6e:	466c      	mov	r4, sp
    2d70:	2b05      	cmp	r3, #5
    2d72:	bf98      	it	ls
    2d74:	4a6e      	ldrls	r2, [pc, #440]	; (2f30 <Cmd_Wifi_Status.isra.0+0x25c>)
    2d76:	b088      	sub	sp, #32
    2d78:	bf94      	ite	ls
    2d7a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    2d7e:	4b69      	ldrhi	r3, [pc, #420]	; (2f24 <Cmd_Wifi_Status.isra.0+0x250>)
    2d80:	466a      	mov	r2, sp
    2d82:	496c      	ldr	r1, [pc, #432]	; (2f34 <Cmd_Wifi_Status.isra.0+0x260>)
    2d84:	4864      	ldr	r0, [pc, #400]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2d86:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
    2d8e:	8393      	strh	r3, [r2, #28]
    2d90:	4b66      	ldr	r3, [pc, #408]	; (2f2c <Cmd_Wifi_Status.isra.0+0x258>)
    2d92:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2d96:	f842 3f10 	str.w	r3, [r2, #16]!
    2d9a:	f01b fc75 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2d9e:	46a5      	mov	sp, r4
		LOG_INF( "Link Mode: %s",                                           \
    2da0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    2da4:	466e      	mov	r6, sp
    2da6:	2b08      	cmp	r3, #8
    2da8:	bf98      	it	ls
    2daa:	4a63      	ldrls	r2, [pc, #396]	; (2f38 <Cmd_Wifi_Status.isra.0+0x264>)
    2dac:	b088      	sub	sp, #32
    2dae:	466c      	mov	r4, sp
    2db0:	bf94      	ite	ls
    2db2:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    2db6:	4b5b      	ldrhi	r3, [pc, #364]	; (2f24 <Cmd_Wifi_Status.isra.0+0x250>)
    2db8:	f44f 7900 	mov.w	r9, #512	; 0x200
    2dbc:	4625      	mov	r5, r4
    2dbe:	4a5f      	ldr	r2, [pc, #380]	; (2f3c <Cmd_Wifi_Status.isra.0+0x268>)
    2dc0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 2f2c <Cmd_Wifi_Status.isra.0+0x258>
    2dc4:	e9c4 2305 	strd	r2, r3, [r4, #20]
    2dc8:	f8a4 901c 	strh.w	r9, [r4, #28]
    2dcc:	f845 8f10 	str.w	r8, [r5, #16]!
    2dd0:	462a      	mov	r2, r5
    2dd2:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2dd6:	4850      	ldr	r0, [pc, #320]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2dd8:	f01b fc56 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2ddc:	46b5      	mov	sp, r6
		LOG_INF( "SSID: %-32s", status.ssid );
    2dde:	46a5      	mov	sp, r4
    2de0:	4b57      	ldr	r3, [pc, #348]	; (2f40 <Cmd_Wifi_Status.isra.0+0x26c>)
    2de2:	462a      	mov	r2, r5
    2de4:	6163      	str	r3, [r4, #20]
    2de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2dea:	61a3      	str	r3, [r4, #24]
    2dec:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2df0:	4849      	ldr	r0, [pc, #292]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2df2:	f8a4 901c 	strh.w	r9, [r4, #28]
    2df6:	f8c4 8010 	str.w	r8, [r4, #16]
    2dfa:	f01b fc45 	bl	1e688 <z_log_msg_static_create.constprop.0>
		LOG_INF( "BSSID: %-32s",                                            \
    2dfe:	2312      	movs	r3, #18
    2e00:	46b5      	mov	sp, r6
    2e02:	463a      	mov	r2, r7
    2e04:	2106      	movs	r1, #6
    2e06:	f107 0044 	add.w	r0, r7, #68	; 0x44
    2e0a:	f005 fc25 	bl	8658 <net_sprint_ll_addr_buf>
    2e0e:	46a5      	mov	sp, r4
    2e10:	4b4c      	ldr	r3, [pc, #304]	; (2f44 <Cmd_Wifi_Status.isra.0+0x270>)
    2e12:	462a      	mov	r2, r5
    2e14:	e9c4 3005 	strd	r3, r0, [r4, #20]
    2e18:	f8a4 901c 	strh.w	r9, [r4, #28]
    2e1c:	f8c4 8010 	str.w	r8, [r4, #16]
    2e20:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2e24:	483c      	ldr	r0, [pc, #240]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2e26:	f01b fc2f 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2e2a:	46b5      	mov	sp, r6
		LOG_INF( "Band: %s", wifi_band_txt( status.band ));
    2e2c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
    2e30:	466e      	mov	r6, sp
    2e32:	2b02      	cmp	r3, #2
    2e34:	bf98      	it	ls
    2e36:	4a44      	ldrls	r2, [pc, #272]	; (2f48 <Cmd_Wifi_Status.isra.0+0x274>)
    2e38:	b088      	sub	sp, #32
    2e3a:	466c      	mov	r4, sp
    2e3c:	bf94      	ite	ls
    2e3e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    2e42:	4b38      	ldrhi	r3, [pc, #224]	; (2f24 <Cmd_Wifi_Status.isra.0+0x250>)
    2e44:	4a41      	ldr	r2, [pc, #260]	; (2f4c <Cmd_Wifi_Status.isra.0+0x278>)
    2e46:	4625      	mov	r5, r4
    2e48:	e9c4 2305 	strd	r2, r3, [r4, #20]
    2e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
    2e50:	83a3      	strh	r3, [r4, #28]
    2e52:	4b36      	ldr	r3, [pc, #216]	; (2f2c <Cmd_Wifi_Status.isra.0+0x258>)
    2e54:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2e58:	f845 3f10 	str.w	r3, [r5, #16]!
    2e5c:	462a      	mov	r2, r5
    2e5e:	482e      	ldr	r0, [pc, #184]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2e60:	f01b fc12 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2e64:	46b5      	mov	sp, r6
		LOG_INF( "Channel: %d", status.channel );
    2e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2e68:	46a5      	mov	sp, r4
    2e6a:	4a39      	ldr	r2, [pc, #228]	; (2f50 <Cmd_Wifi_Status.isra.0+0x27c>)
    2e6c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2e70:	e9c4 2305 	strd	r2, r3, [r4, #20]
    2e74:	2303      	movs	r3, #3
    2e76:	462a      	mov	r2, r5
    2e78:	6123      	str	r3, [r4, #16]
    2e7a:	4827      	ldr	r0, [pc, #156]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2e7c:	f01b fc04 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2e80:	46b5      	mov	sp, r6
		LOG_INF( "Security: %s", wifi_security_txt( status.security ));
    2e82:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
    2e86:	466c      	mov	r4, sp
    2e88:	2b07      	cmp	r3, #7
    2e8a:	bf98      	it	ls
    2e8c:	4a31      	ldrls	r2, [pc, #196]	; (2f54 <Cmd_Wifi_Status.isra.0+0x280>)
    2e8e:	b088      	sub	sp, #32
    2e90:	bf94      	ite	ls
    2e92:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    2e96:	4b23      	ldrhi	r3, [pc, #140]	; (2f24 <Cmd_Wifi_Status.isra.0+0x250>)
    2e98:	466a      	mov	r2, sp
    2e9a:	492f      	ldr	r1, [pc, #188]	; (2f58 <Cmd_Wifi_Status.isra.0+0x284>)
    2e9c:	481e      	ldr	r0, [pc, #120]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2e9e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
    2ea6:	8393      	strh	r3, [r2, #28]
    2ea8:	4b20      	ldr	r3, [pc, #128]	; (2f2c <Cmd_Wifi_Status.isra.0+0x258>)
    2eaa:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2eae:	f842 3f10 	str.w	r3, [r2, #16]!
    2eb2:	f01b fbe9 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2eb6:	46a5      	mov	sp, r4
		LOG_INF( "MFP: %s", wifi_mfp_txt( status.mfp ));
    2eb8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    2ebc:	466e      	mov	r6, sp
    2ebe:	2b02      	cmp	r3, #2
    2ec0:	bf98      	it	ls
    2ec2:	4a26      	ldrls	r2, [pc, #152]	; (2f5c <Cmd_Wifi_Status.isra.0+0x288>)
    2ec4:	b088      	sub	sp, #32
    2ec6:	466c      	mov	r4, sp
    2ec8:	bf94      	ite	ls
    2eca:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    2ece:	4b15      	ldrhi	r3, [pc, #84]	; (2f24 <Cmd_Wifi_Status.isra.0+0x250>)
    2ed0:	4a23      	ldr	r2, [pc, #140]	; (2f60 <Cmd_Wifi_Status.isra.0+0x28c>)
    2ed2:	4625      	mov	r5, r4
    2ed4:	e9c4 2305 	strd	r2, r3, [r4, #20]
    2ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
    2edc:	83a3      	strh	r3, [r4, #28]
    2ede:	4b13      	ldr	r3, [pc, #76]	; (2f2c <Cmd_Wifi_Status.isra.0+0x258>)
    2ee0:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    2ee4:	f845 3f10 	str.w	r3, [r5, #16]!
    2ee8:	462a      	mov	r2, r5
    2eea:	480b      	ldr	r0, [pc, #44]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2eec:	f01b fbcc 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2ef0:	46b5      	mov	sp, r6
		LOG_INF( "RSSI: %d", status.rssi );
    2ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2ef4:	46a5      	mov	sp, r4
    2ef6:	4a1b      	ldr	r2, [pc, #108]	; (2f64 <Cmd_Wifi_Status.isra.0+0x290>)
    2ef8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    2efc:	e9c4 2305 	strd	r2, r3, [r4, #20]
    2f00:	2303      	movs	r3, #3
    2f02:	462a      	mov	r2, r5
    2f04:	4804      	ldr	r0, [pc, #16]	; (2f18 <Cmd_Wifi_Status.isra.0+0x244>)
    2f06:	6123      	str	r3, [r4, #16]
    2f08:	f01b fbbe 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2f0c:	46b5      	mov	sp, r6
    2f0e:	e701      	b.n	2d14 <Cmd_Wifi_Status.isra.0+0x40>
    2f10:	51560006 	.word	0x51560006
    2f14:	00031f79 	.word	0x00031f79
    2f18:	00024d80 	.word	0x00024d80
    2f1c:	00031f8f 	.word	0x00031f8f
    2f20:	00024ef4 	.word	0x00024ef4
    2f24:	00031f71 	.word	0x00031f71
    2f28:	00031fa2 	.word	0x00031fa2
    2f2c:	01000003 	.word	0x01000003
    2f30:	00024edc 	.word	0x00024edc
    2f34:	00031fac 	.word	0x00031fac
    2f38:	00024eb8 	.word	0x00024eb8
    2f3c:	00031fbf 	.word	0x00031fbf
    2f40:	00031fce 	.word	0x00031fce
    2f44:	00031fcd 	.word	0x00031fcd
    2f48:	00024f1c 	.word	0x00024f1c
    2f4c:	00031fda 	.word	0x00031fda
    2f50:	00031fe3 	.word	0x00031fe3
    2f54:	00024f34 	.word	0x00024f34
    2f58:	00031fef 	.word	0x00031fef
    2f5c:	00024f28 	.word	0x00024f28
    2f60:	00031ffc 	.word	0x00031ffc
    2f64:	00032004 	.word	0x00032004

00002f68 <Handle_Wifi_Events>:
					 		struct net_if *interface) {
    2f68:	b5b0      	push	{r4, r5, r7, lr}
	switch ( managementEvent ) {
    2f6a:	4b36      	ldr	r3, [pc, #216]	; (3044 <Handle_Wifi_Events+0xdc>)
					 		struct net_if *interface) {
    2f6c:	b086      	sub	sp, #24
	switch ( managementEvent ) {
    2f6e:	4299      	cmp	r1, r3
					 		struct net_if *interface) {
    2f70:	af00      	add	r7, sp, #0
	switch ( managementEvent ) {
    2f72:	d005      	beq.n	2f80 <Handle_Wifi_Events+0x18>
    2f74:	3301      	adds	r3, #1
    2f76:	4299      	cmp	r1, r3
    2f78:	d02d      	beq.n	2fd6 <Handle_Wifi_Events+0x6e>
}
    2f7a:	3718      	adds	r7, #24
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bdb0      	pop	{r4, r5, r7, pc}
	if ( context.connected ) {
    2f80:	4c31      	ldr	r4, [pc, #196]	; (3048 <Handle_Wifi_Events+0xe0>)
    2f82:	7923      	ldrb	r3, [r4, #4]
    2f84:	07d9      	lsls	r1, r3, #31
    2f86:	d4f8      	bmi.n	2f7a <Handle_Wifi_Events+0x12>
	if ( status -> status ) {
    2f88:	6883      	ldr	r3, [r0, #8]
    2f8a:	681b      	ldr	r3, [r3, #0]
    2f8c:	b19b      	cbz	r3, 2fb6 <Handle_Wifi_Events+0x4e>
		LOG_ERR( "Connection failed (%d)", status -> status );
    2f8e:	466d      	mov	r5, sp
    2f90:	b088      	sub	sp, #32
    2f92:	466a      	mov	r2, sp
    2f94:	492d      	ldr	r1, [pc, #180]	; (304c <Handle_Wifi_Events+0xe4>)
    2f96:	482e      	ldr	r0, [pc, #184]	; (3050 <Handle_Wifi_Events+0xe8>)
    2f98:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2f9c:	2303      	movs	r3, #3
    2f9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2fa2:	f842 3f10 	str.w	r3, [r2, #16]!
    2fa6:	f01b fb6f 	bl	1e688 <z_log_msg_static_create.constprop.0>
    2faa:	46ad      	mov	sp, r5
	context.connect_result = true;
    2fac:	7923      	ldrb	r3, [r4, #4]
    2fae:	f043 0302 	orr.w	r3, r3, #2
    2fb2:	7123      	strb	r3, [r4, #4]
    2fb4:	e7e1      	b.n	2f7a <Handle_Wifi_Events+0x12>
		LOG_INF( "Connected" );
    2fb6:	4b27      	ldr	r3, [pc, #156]	; (3054 <Handle_Wifi_Events+0xec>)
    2fb8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    2fbc:	617b      	str	r3, [r7, #20]
    2fbe:	2302      	movs	r3, #2
    2fc0:	4823      	ldr	r0, [pc, #140]	; (3050 <Handle_Wifi_Events+0xe8>)
    2fc2:	613b      	str	r3, [r7, #16]
    2fc4:	f107 0210 	add.w	r2, r7, #16
    2fc8:	f01b fb5e 	bl	1e688 <z_log_msg_static_create.constprop.0>
		context.connected = true;
    2fcc:	7923      	ldrb	r3, [r4, #4]
    2fce:	f043 0301 	orr.w	r3, r3, #1
    2fd2:	7123      	strb	r3, [r4, #4]
    2fd4:	e7ea      	b.n	2fac <Handle_Wifi_Events+0x44>
	if ( !context.connected ) {
    2fd6:	4c1c      	ldr	r4, [pc, #112]	; (3048 <Handle_Wifi_Events+0xe0>)
    2fd8:	7923      	ldrb	r3, [r4, #4]
    2fda:	07da      	lsls	r2, r3, #31
    2fdc:	d5cd      	bpl.n	2f7a <Handle_Wifi_Events+0x12>
	if ( context.disconnect_requested ) {
    2fde:	f013 0504 	ands.w	r5, r3, #4
    2fe2:	6882      	ldr	r2, [r0, #8]
    2fe4:	d01f      	beq.n	3026 <Handle_Wifi_Events+0xbe>
		LOG_INF( "Disconnection request %s (%d)",                           \
    2fe6:	6811      	ldr	r1, [r2, #0]
    2fe8:	4b1b      	ldr	r3, [pc, #108]	; (3058 <Handle_Wifi_Events+0xf0>)
    2fea:	4a1c      	ldr	r2, [pc, #112]	; (305c <Handle_Wifi_Events+0xf4>)
    2fec:	466d      	mov	r5, sp
    2fee:	b08a      	sub	sp, #40	; 0x28
    2ff0:	2900      	cmp	r1, #0
    2ff2:	bf08      	it	eq
    2ff4:	4613      	moveq	r3, r2
    2ff6:	466a      	mov	r2, sp
    2ff8:	4819      	ldr	r0, [pc, #100]	; (3060 <Handle_Wifi_Events+0xf8>)
    2ffa:	61d1      	str	r1, [r2, #28]
    2ffc:	e9c2 0305 	strd	r0, r3, [r2, #20]
    3000:	f44f 7300 	mov.w	r3, #512	; 0x200
    3004:	8413      	strh	r3, [r2, #32]
    3006:	4b17      	ldr	r3, [pc, #92]	; (3064 <Handle_Wifi_Events+0xfc>)
    3008:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    300c:	f842 3f10 	str.w	r3, [r2, #16]!
    3010:	480f      	ldr	r0, [pc, #60]	; (3050 <Handle_Wifi_Events+0xe8>)
    3012:	f01b fb39 	bl	1e688 <z_log_msg_static_create.constprop.0>
    3016:	46ad      	mov	sp, r5
		context.disconnect_requested = false;
    3018:	7923      	ldrb	r3, [r4, #4]
    301a:	f36f 0382 	bfc	r3, #2, #1
		context.connected = false;
    301e:	7123      	strb	r3, [r4, #4]
	Cmd_Wifi_Status();
    3020:	f7ff fe58 	bl	2cd4 <Cmd_Wifi_Status.isra.0>
}
    3024:	e7a9      	b.n	2f7a <Handle_Wifi_Events+0x12>
		LOG_INF( "Received Disconnected" );
    3026:	4b10      	ldr	r3, [pc, #64]	; (3068 <Handle_Wifi_Events+0x100>)
    3028:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    302c:	617b      	str	r3, [r7, #20]
    302e:	2302      	movs	r3, #2
    3030:	4807      	ldr	r0, [pc, #28]	; (3050 <Handle_Wifi_Events+0xe8>)
    3032:	613b      	str	r3, [r7, #16]
    3034:	f107 0210 	add.w	r2, r7, #16
    3038:	f01b fb26 	bl	1e688 <z_log_msg_static_create.constprop.0>
		context.connected = false;
    303c:	7923      	ldrb	r3, [r4, #4]
    303e:	f365 0300 	bfi	r3, r5, #0, #1
    3042:	e7ec      	b.n	301e <Handle_Wifi_Events+0xb6>
    3044:	d1560003 	.word	0xd1560003
    3048:	20002a08 	.word	0x20002a08
    304c:	00032012 	.word	0x00032012
    3050:	00024d80 	.word	0x00024d80
    3054:	00032029 	.word	0x00032029
    3058:	00032103 	.word	0x00032103
    305c:	0003200d 	.word	0x0003200d
    3060:	00032033 	.word	0x00032033
    3064:	01000004 	.word	0x01000004
    3068:	00032051 	.word	0x00032051

0000306c <Wifi_Stationing>:
*       printing by LOG commands the connection status.
*       This function is used on an independent thread.
*/
void Wifi_Stationing( void ){
    int i;
	memset( &context, 0, sizeof( context ));
    306c:	2300      	movs	r3, #0
void Wifi_Stationing( void ){
    306e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset( &context, 0, sizeof( context ));
    3072:	4d58      	ldr	r5, [pc, #352]	; (31d4 <Wifi_Stationing+0x168>)
void Wifi_Stationing( void ){
    3074:	b087      	sub	sp, #28
				  uint32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    3076:	4858      	ldr	r0, [pc, #352]	; (31d8 <Wifi_Stationing+0x16c>)
	memset( &context, 0, sizeof( context ));
    3078:	e9c5 3300 	strd	r3, r3, [r5]
    307c:	4b57      	ldr	r3, [pc, #348]	; (31dc <Wifi_Stationing+0x170>)
void Wifi_Stationing( void ){
    307e:	af00      	add	r7, sp, #0
    3080:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    3082:	4b57      	ldr	r3, [pc, #348]	; (31e0 <Wifi_Stationing+0x174>)
				                Handle_Net_Events,                          \
				                NET_EVENT_IPV4_DHCP_BOUND );

	net_mgmt_add_event_callback( &netEventsCallback );

	LOG_INF( "Starting %s with CPU frequency: %d MHz",                      \
    3084:	466c      	mov	r4, sp
    3086:	6103      	str	r3, [r0, #16]
	net_mgmt_add_event_callback( &wifiEventsCallback );
    3088:	f005 fd50 	bl	8b2c <net_mgmt_add_event_callback>
	cb->handler = handler;
    308c:	4855      	ldr	r0, [pc, #340]	; (31e4 <Wifi_Stationing+0x178>)
    308e:	4b56      	ldr	r3, [pc, #344]	; (31e8 <Wifi_Stationing+0x17c>)
    3090:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    3092:	4b56      	ldr	r3, [pc, #344]	; (31ec <Wifi_Stationing+0x180>)
    3094:	6103      	str	r3, [r0, #16]
	net_mgmt_add_event_callback( &netEventsCallback );
    3096:	f005 fd49 	bl	8b2c <net_mgmt_add_event_callback>
	LOG_INF( "Starting %s with CPU frequency: %d MHz",                      \
    309a:	4b55      	ldr	r3, [pc, #340]	; (31f0 <Wifi_Stationing+0x184>)
    309c:	4a55      	ldr	r2, [pc, #340]	; (31f4 <Wifi_Stationing+0x188>)
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	b08a      	sub	sp, #40	; 0x28
    30a2:	fbb3 f3f2 	udiv	r3, r3, r2
    30a6:	466a      	mov	r2, sp
    30a8:	4953      	ldr	r1, [pc, #332]	; (31f8 <Wifi_Stationing+0x18c>)
    30aa:	4854      	ldr	r0, [pc, #336]	; (31fc <Wifi_Stationing+0x190>)
    30ac:	6151      	str	r1, [r2, #20]
    30ae:	4954      	ldr	r1, [pc, #336]	; (3200 <Wifi_Stationing+0x194>)
    30b0:	e9c2 1306 	strd	r1, r3, [r2, #24]
    30b4:	f44f 7300 	mov.w	r3, #512	; 0x200
    30b8:	8413      	strh	r3, [r2, #32]
    30ba:	4b52      	ldr	r3, [pc, #328]	; (3204 <Wifi_Stationing+0x198>)
    30bc:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    30c0:	f842 3f10 	str.w	r3, [r2, #16]!
    30c4:	f01b fae0 	bl	1e688 <z_log_msg_static_create.constprop.0>
    30c8:	46a5      	mov	sp, r4
	return z_impl_k_sleep(timeout);
    30ca:	2100      	movs	r1, #0
    30cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    30d0:	f013 f92c 	bl	1632c <z_impl_k_sleep>
			CONFIG_BOARD, SystemCoreClock/MHZ( 1 ));
	k_sleep( K_SECONDS( 1 ));

	LOG_INF( "Static IP address (overridable): %s/%s -> %s",                \
    30d4:	b08c      	sub	sp, #48	; 0x30
    30d6:	466a      	mov	r2, sp
    30d8:	494b      	ldr	r1, [pc, #300]	; (3208 <Wifi_Stationing+0x19c>)
    30da:	4b4c      	ldr	r3, [pc, #304]	; (320c <Wifi_Stationing+0x1a0>)
    30dc:	61d1      	str	r1, [r2, #28]
    30de:	494c      	ldr	r1, [pc, #304]	; (3210 <Wifi_Stationing+0x1a4>)
    30e0:	6153      	str	r3, [r2, #20]
    30e2:	6039      	str	r1, [r7, #0]
    30e4:	f240 4102 	movw	r1, #1026	; 0x402
    30e8:	4b4a      	ldr	r3, [pc, #296]	; (3214 <Wifi_Stationing+0x1a8>)
    30ea:	80b9      	strh	r1, [r7, #4]
    30ec:	6879      	ldr	r1, [r7, #4]
    30ee:	6193      	str	r3, [r2, #24]
    30f0:	6213      	str	r3, [r2, #32]
    30f2:	4847      	ldr	r0, [pc, #284]	; (3210 <Wifi_Stationing+0x1a4>)
    30f4:	4b48      	ldr	r3, [pc, #288]	; (3218 <Wifi_Stationing+0x1ac>)
    30f6:	6250      	str	r0, [r2, #36]	; 0x24
    30f8:	8511      	strh	r1, [r2, #40]	; 0x28
    30fa:	4840      	ldr	r0, [pc, #256]	; (31fc <Wifi_Stationing+0x190>)
    30fc:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    3100:	f842 3f10 	str.w	r3, [r2, #16]!
    3104:	f01b fac0 	bl	1e688 <z_log_msg_static_create.constprop.0>
	parameters -> ssid = CONFIG_STA_SAMPLE_SSID;
    3108:	f8df 8110 	ldr.w	r8, [pc, #272]	; 321c <Wifi_Stationing+0x1b0>
    310c:	46a5      	mov	sp, r4
	if (net_mgmt(                                                           \
    310e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 3220 <Wifi_Stationing+0x1b4>
	parameters -> timeout = SYS_FOREVER_MS;
    3112:	4c44      	ldr	r4, [pc, #272]	; (3224 <Wifi_Stationing+0x1b8>)
	struct net_if *interface = net_if_get_default();
    3114:	f004 ff22 	bl	7f5c <net_if_get_default>
	context.connected = false;
    3118:	792b      	ldrb	r3, [r5, #4]
	struct net_if *interface = net_if_get_default();
    311a:	4601      	mov	r1, r0
	context.connected = false;
    311c:	f023 0303 	bic.w	r3, r3, #3
    3120:	712b      	strb	r3, [r5, #4]
	parameters -> timeout = SYS_FOREVER_MS;
    3122:	f04f 33ff 	mov.w	r3, #4294967295
    3126:	61e3      	str	r3, [r4, #28]
	parameters -> ssid_length = strlen( parameters -> ssid );
    3128:	2304      	movs	r3, #4
    312a:	7123      	strb	r3, [r4, #4]
	parameters -> psk = CONFIG_STA_SAMPLE_PASSWORD;
    312c:	4b3e      	ldr	r3, [pc, #248]	; (3228 <Wifi_Stationing+0x1bc>)
	if (net_mgmt(                                                           \
    312e:	4648      	mov	r0, r9
	parameters -> psk = CONFIG_STA_SAMPLE_PASSWORD;
    3130:	60a3      	str	r3, [r4, #8]
	parameters -> psk_length = strlen( parameters -> psk );
    3132:	2308      	movs	r3, #8
    3134:	7323      	strb	r3, [r4, #12]
	parameters -> channel = WIFI_CHANNEL_ANY;
    3136:	f240 13ff 	movw	r3, #511	; 0x1ff
    313a:	82e3      	strh	r3, [r4, #22]
	parameters -> mfp = WIFI_MFP_OPTIONAL;
    313c:	2301      	movs	r3, #1
	if (net_mgmt(                                                           \
    313e:	4a39      	ldr	r2, [pc, #228]	; (3224 <Wifi_Stationing+0x1b8>)
	parameters -> mfp = WIFI_MFP_OPTIONAL;
    3140:	7623      	strb	r3, [r4, #24]
	if (net_mgmt(                                                           \
    3142:	2320      	movs	r3, #32
	parameters -> ssid = CONFIG_STA_SAMPLE_SSID;
    3144:	f8c4 8000 	str.w	r8, [r4]
	if (net_mgmt(                                                           \
    3148:	f01d fa5c 	bl	20604 <net_mgmt_NET_REQUEST_WIFI_CONNECT>
    314c:	2302      	movs	r3, #2
    314e:	b320      	cbz	r0, 319a <Wifi_Stationing+0x12e>
		LOG_ERR( "Connection request failed" );
    3150:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3154:	4a35      	ldr	r2, [pc, #212]	; (322c <Wifi_Stationing+0x1c0>)
    3156:	e9c7 3204 	strd	r3, r2, [r7, #16]
    315a:	f107 0210 	add.w	r2, r7, #16
void Wifi_Stationing( void ){
    315e:	2664      	movs	r6, #100	; 0x64
	LOG_INF( "Connection requested" );
    3160:	4826      	ldr	r0, [pc, #152]	; (31fc <Wifi_Stationing+0x190>)
    3162:	f01b fa91 	bl	1e688 <z_log_msg_static_create.constprop.0>
    3166:	2100      	movs	r1, #0
    3168:	f242 6067 	movw	r0, #9831	; 0x2667
    316c:	f013 f8de 	bl	1632c <z_impl_k_sleep>
	while ( 1 ) {
		Wifi_Connect();

		for ( i = 0; i < TIMEOUT_MS; i++ ) {
			k_sleep( K_MSEC( STATUS_POLLING_MS ));
			Cmd_Wifi_Status();
    3170:	f7ff fdb0 	bl	2cd4 <Cmd_Wifi_Status.isra.0>
			if ( context.connect_result ) {
    3174:	792b      	ldrb	r3, [r5, #4]
    3176:	0799      	lsls	r1, r3, #30
    3178:	d417      	bmi.n	31aa <Wifi_Stationing+0x13e>
		for ( i = 0; i < TIMEOUT_MS; i++ ) {
    317a:	3e01      	subs	r6, #1
    317c:	d1f3      	bne.n	3166 <Wifi_Stationing+0xfa>
				break;
			}
		}
		if ( context.connected ) {
    317e:	07db      	lsls	r3, r3, #31
    3180:	d415      	bmi.n	31ae <Wifi_Stationing+0x142>
			LOG_INF( "============" );
			k_sleep( K_FOREVER );
		}
		else if ( !context.connect_result ) {
			LOG_ERR( "Connection Timed Out" );
    3182:	4b2b      	ldr	r3, [pc, #172]	; (3230 <Wifi_Stationing+0x1c4>)
    3184:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3188:	617b      	str	r3, [r7, #20]
    318a:	2302      	movs	r3, #2
    318c:	481b      	ldr	r0, [pc, #108]	; (31fc <Wifi_Stationing+0x190>)
    318e:	613b      	str	r3, [r7, #16]
    3190:	f107 0210 	add.w	r2, r7, #16
    3194:	f01b fa78 	bl	1e688 <z_log_msg_static_create.constprop.0>
    3198:	e7bc      	b.n	3114 <Wifi_Stationing+0xa8>
	LOG_INF( "Connection requested" );
    319a:	4a26      	ldr	r2, [pc, #152]	; (3234 <Wifi_Stationing+0x1c8>)
    319c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    31a0:	e9c7 3204 	strd	r3, r2, [r7, #16]
    31a4:	f107 0210 	add.w	r2, r7, #16
    31a8:	e7d9      	b.n	315e <Wifi_Stationing+0xf2>
		if ( context.connected ) {
    31aa:	07da      	lsls	r2, r3, #31
    31ac:	d5b2      	bpl.n	3114 <Wifi_Stationing+0xa8>
			LOG_INF( "============" );
    31ae:	4b22      	ldr	r3, [pc, #136]	; (3238 <Wifi_Stationing+0x1cc>)
    31b0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    31b4:	617b      	str	r3, [r7, #20]
    31b6:	2302      	movs	r3, #2
    31b8:	4810      	ldr	r0, [pc, #64]	; (31fc <Wifi_Stationing+0x190>)
    31ba:	613b      	str	r3, [r7, #16]
    31bc:	f107 0210 	add.w	r2, r7, #16
    31c0:	f01b fa62 	bl	1e688 <z_log_msg_static_create.constprop.0>
    31c4:	f04f 31ff 	mov.w	r1, #4294967295
    31c8:	f04f 30ff 	mov.w	r0, #4294967295
    31cc:	f013 f8ae 	bl	1632c <z_impl_k_sleep>
    31d0:	e7a0      	b.n	3114 <Wifi_Stationing+0xa8>
    31d2:	bf00      	nop
    31d4:	20002a08 	.word	0x20002a08
    31d8:	20002a24 	.word	0x20002a24
    31dc:	00002f69 	.word	0x00002f69
    31e0:	d1560007 	.word	0xd1560007
    31e4:	20002a10 	.word	0x20002a10
    31e8:	00002c81 	.word	0x00002c81
    31ec:	e0040008 	.word	0xe0040008
    31f0:	200009dc 	.word	0x200009dc
    31f4:	000f4240 	.word	0x000f4240
    31f8:	00032067 	.word	0x00032067
    31fc:	00024d80 	.word	0x00024d80
    3200:	0003208e 	.word	0x0003208e
    3204:	01000004 	.word	0x01000004
    3208:	000320d4 	.word	0x000320d4
    320c:	000320a7 	.word	0x000320a7
    3210:	03010200 	.word	0x03010200
    3214:	00032490 	.word	0x00032490
    3218:	03000005 	.word	0x03000005
    321c:	000320e2 	.word	0x000320e2
    3220:	51560002 	.word	0x51560002
    3224:	200029e8 	.word	0x200029e8
    3228:	000320e7 	.word	0x000320e7
    322c:	000320f0 	.word	0x000320f0
    3230:	0003211f 	.word	0x0003211f
    3234:	0003210a 	.word	0x0003210a
    3238:	00031f95 	.word	0x00031f95

0000323c <Task_Wifi_Stationing_Init>:

/*! Task_Wifi_Stationing_Init initializes the task Wifi Stationing.
*
* @brief Wifi Stationing initialization
*/
void Task_Wifi_Stationing_Init( void ){
    323c:	b510      	push	{r4, lr}
    323e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3240:	2200      	movs	r2, #0
    3242:	2300      	movs	r3, #0
    3244:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3248:	2300      	movs	r3, #0
    324a:	2204      	movs	r2, #4
    324c:	4c0b      	ldr	r4, [pc, #44]	; (327c <Task_Wifi_Stationing_Init+0x40>)
    324e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3252:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3256:	9300      	str	r3, [sp, #0]
    3258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    325c:	4620      	mov	r0, r4
    325e:	4b08      	ldr	r3, [pc, #32]	; (3280 <Task_Wifi_Stationing_Init+0x44>)
    3260:	4908      	ldr	r1, [pc, #32]	; (3284 <Task_Wifi_Stationing_Init+0x48>)
    3262:	f012 f931 	bl	154c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    3266:	4908      	ldr	r1, [pc, #32]	; (3288 <Task_Wifi_Stationing_Init+0x4c>)
    3268:	4620      	mov	r0, r4
    326a:	f020 fde3 	bl	23e34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    326e:	4620      	mov	r0, r4
					0,														\
					K_NO_WAIT);	

	 k_thread_name_set(&wifiThread, "wifiStationing");
	 k_thread_start(&wifiThread);
}
    3270:	b008      	add	sp, #32
    3272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3276:	f020 bde2 	b.w	23e3e <z_impl_k_thread_start>
    327a:	bf00      	nop
    327c:	200016b8 	.word	0x200016b8
    3280:	0000306d 	.word	0x0000306d
    3284:	20007750 	.word	0x20007750
    3288:	00032134 	.word	0x00032134

0000328c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3290:	b091      	sub	sp, #68	; 0x44
    3292:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    3294:	f002 0304 	and.w	r3, r2, #4
    3298:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    329a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    329e:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    32a0:	0784      	lsls	r4, r0, #30
{
    32a2:	4605      	mov	r5, r0
    32a4:	460e      	mov	r6, r1
    32a6:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    32aa:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    32ac:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    32ae:	f040 81bd 	bne.w	362c <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    32b2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    32b4:	b130      	cbz	r0, 32c4 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    32b6:	2907      	cmp	r1, #7
    32b8:	d809      	bhi.n	32ce <cbvprintf_package+0x42>
		return -ENOSPC;
    32ba:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    32be:	b011      	add	sp, #68	; 0x44
    32c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    32c4:	f001 0607 	and.w	r6, r1, #7
    32c8:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    32ca:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    32ce:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    32d0:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    32d4:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    32d8:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    32da:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    32de:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    32e0:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    32e2:	46cb      	mov	fp, r9
	size = sizeof(char *);
    32e4:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    32e6:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    32ea:	b10d      	cbz	r5, 32f0 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    32ec:	9a00      	ldr	r2, [sp, #0]
    32ee:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    32f0:	9805      	ldr	r0, [sp, #20]
    32f2:	2800      	cmp	r0, #0
    32f4:	f300 80eb 	bgt.w	34ce <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    32f8:	4899      	ldr	r0, [pc, #612]	; (3560 <cbvprintf_package+0x2d4>)
    32fa:	9a00      	ldr	r2, [sp, #0]
    32fc:	4282      	cmp	r2, r0
    32fe:	d303      	bcc.n	3308 <cbvprintf_package+0x7c>
    3300:	4898      	ldr	r0, [pc, #608]	; (3564 <cbvprintf_package+0x2d8>)
    3302:	4282      	cmp	r2, r0
    3304:	f0c0 80e3 	bcc.w	34ce <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    3308:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    330a:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    330e:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    3310:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    3314:	f100 8106 	bmi.w	3524 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    3318:	2f0f      	cmp	r7, #15
    331a:	f200 80b4 	bhi.w	3486 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    331e:	2d00      	cmp	r5, #0
    3320:	f000 8108 	beq.w	3534 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    3324:	f107 0240 	add.w	r2, r7, #64	; 0x40
    3328:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    332c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    332e:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    3332:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    3336:	9804      	ldr	r0, [sp, #16]
    3338:	3001      	adds	r0, #1
    333a:	9004      	str	r0, [sp, #16]
    333c:	e0ea      	b.n	3514 <cbvprintf_package+0x288>
			switch (*fmt) {
    333e:	287a      	cmp	r0, #122	; 0x7a
    3340:	d860      	bhi.n	3404 <cbvprintf_package+0x178>
    3342:	284b      	cmp	r0, #75	; 0x4b
    3344:	d80e      	bhi.n	3364 <cbvprintf_package+0xd8>
    3346:	2847      	cmp	r0, #71	; 0x47
    3348:	d85c      	bhi.n	3404 <cbvprintf_package+0x178>
    334a:	2829      	cmp	r0, #41	; 0x29
    334c:	d82f      	bhi.n	33ae <cbvprintf_package+0x122>
    334e:	2825      	cmp	r0, #37	; 0x25
    3350:	d055      	beq.n	33fe <cbvprintf_package+0x172>
    3352:	d857      	bhi.n	3404 <cbvprintf_package+0x178>
    3354:	2820      	cmp	r0, #32
    3356:	d07d      	beq.n	3454 <cbvprintf_package+0x1c8>
    3358:	3823      	subs	r0, #35	; 0x23
    335a:	f1d0 0b00 	rsbs	fp, r0, #0
    335e:	eb4b 0b00 	adc.w	fp, fp, r0
    3362:	e077      	b.n	3454 <cbvprintf_package+0x1c8>
    3364:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    3368:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    336c:	d84a      	bhi.n	3404 <cbvprintf_package+0x178>
    336e:	e8df f00c 	tbb	[pc, ip]
    3372:	4971      	.short	0x4971
    3374:	49494949 	.word	0x49494949
    3378:	49494949 	.word	0x49494949
    337c:	494c4949 	.word	0x494c4949
    3380:	49494949 	.word	0x49494949
    3384:	5a494949 	.word	0x5a494949
    3388:	5a4c4c49 	.word	0x5a4c4c49
    338c:	4c715a5a 	.word	0x4c715a5a
    3390:	4971496e 	.word	0x4971496e
    3394:	49184c18 	.word	0x49184c18
    3398:	4c808349 	.word	0x4c808349
    339c:	494c4949 	.word	0x494c4949
    33a0:	80          	.byte	0x80
    33a1:	00          	.byte	0x00
    33a2:	2000      	movs	r0, #0
    33a4:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    33a8:	f04f 0a04 	mov.w	sl, #4
    33ac:	e039      	b.n	3422 <cbvprintf_package+0x196>
    33ae:	2201      	movs	r2, #1
			switch (*fmt) {
    33b0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    33b4:	fa5f fc8c 	uxtb.w	ip, ip
    33b8:	fa02 fc0c 	lsl.w	ip, r2, ip
    33bc:	ea1c 0f0e 	tst.w	ip, lr
    33c0:	d148      	bne.n	3454 <cbvprintf_package+0x1c8>
    33c2:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    33c6:	d12e      	bne.n	3426 <cbvprintf_package+0x19a>
    33c8:	ea1c 0b02 	ands.w	fp, ip, r2
    33cc:	d042      	beq.n	3454 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    33ce:	3c01      	subs	r4, #1
    33d0:	4454      	add	r4, sl
    33d2:	f1ca 0c00 	rsb	ip, sl, #0
    33d6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    33da:	2d00      	cmp	r5, #0
    33dc:	d061      	beq.n	34a2 <cbvprintf_package+0x216>
    33de:	eba3 0c05 	sub.w	ip, r3, r5
    33e2:	44a4      	add	ip, r4
    33e4:	4566      	cmp	r6, ip
    33e6:	f4ff af68 	bcc.w	32ba <cbvprintf_package+0x2e>
		if (is_str_arg) {
    33ea:	2800      	cmp	r0, #0
    33ec:	d168      	bne.n	34c0 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    33ee:	2b04      	cmp	r3, #4
    33f0:	d147      	bne.n	3482 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    33f2:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    33f6:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    33f8:	2304      	movs	r3, #4
    33fa:	3404      	adds	r4, #4
    33fc:	e02a      	b.n	3454 <cbvprintf_package+0x1c8>
				arg_idx--;
    33fe:	9a01      	ldr	r2, [sp, #4]
    3400:	3a01      	subs	r2, #1
    3402:	9201      	str	r2, [sp, #4]
				parsing = false;
    3404:	f04f 0b00 	mov.w	fp, #0
				continue;
    3408:	e024      	b.n	3454 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    340a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    340e:	286c      	cmp	r0, #108	; 0x6c
    3410:	d134      	bne.n	347c <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    3412:	2000      	movs	r0, #0
    3414:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    3418:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    341a:	2b6c      	cmp	r3, #108	; 0x6c
    341c:	d1c4      	bne.n	33a8 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    341e:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    3422:	4653      	mov	r3, sl
    3424:	e7d3      	b.n	33ce <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    3426:	f108 0807 	add.w	r8, r8, #7
    342a:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    342e:	3407      	adds	r4, #7
    3430:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    3434:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    3438:	b135      	cbz	r5, 3448 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    343a:	9806      	ldr	r0, [sp, #24]
    343c:	4420      	add	r0, r4
    343e:	42b0      	cmp	r0, r6
    3440:	f63f af3b 	bhi.w	32ba <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    3444:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    3448:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    344c:	3408      	adds	r4, #8
			switch (*fmt) {
    344e:	f04f 0a08 	mov.w	sl, #8
    3452:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    3454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3458:	2800      	cmp	r0, #0
    345a:	d078      	beq.n	354e <cbvprintf_package+0x2c2>
			if (!parsing) {
    345c:	f1bb 0f00 	cmp.w	fp, #0
    3460:	f47f af6d 	bne.w	333e <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    3464:	2825      	cmp	r0, #37	; 0x25
    3466:	d1f5      	bne.n	3454 <cbvprintf_package+0x1c8>
					parsing = true;
    3468:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    346c:	9b01      	ldr	r3, [sp, #4]
    346e:	3301      	adds	r3, #1
    3470:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    3472:	f04f 0a04 	mov.w	sl, #4
    3476:	e7ec      	b.n	3452 <cbvprintf_package+0x1c6>
			switch (*fmt) {
    3478:	4658      	mov	r0, fp
    347a:	e793      	b.n	33a4 <cbvprintf_package+0x118>
    347c:	2000      	movs	r0, #0
				parsing = false;
    347e:	4683      	mov	fp, r0
    3480:	e7a5      	b.n	33ce <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    3482:	2b08      	cmp	r3, #8
    3484:	d002      	beq.n	348c <cbvprintf_package+0x200>
					return -EINVAL;
    3486:	f06f 0015 	mvn.w	r0, #21
    348a:	e718      	b.n	32be <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    348c:	f108 0807 	add.w	r8, r8, #7
    3490:	f028 0807 	bic.w	r8, r8, #7
    3494:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    3498:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    349c:	2308      	movs	r3, #8
    349e:	3408      	adds	r4, #8
    34a0:	e7d8      	b.n	3454 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    34a2:	b968      	cbnz	r0, 34c0 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    34a4:	2b04      	cmp	r3, #4
    34a6:	d102      	bne.n	34ae <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    34a8:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    34ac:	e7a4      	b.n	33f8 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    34ae:	2b08      	cmp	r3, #8
    34b0:	d1e9      	bne.n	3486 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    34b2:	f108 0807 	add.w	r8, r8, #7
    34b6:	f028 0807 	bic.w	r8, r8, #7
    34ba:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    34be:	e7ed      	b.n	349c <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    34c0:	9a05      	ldr	r2, [sp, #20]
    34c2:	3a01      	subs	r2, #1
    34c4:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    34c6:	f858 2b04 	ldr.w	r2, [r8], #4
    34ca:	9200      	str	r2, [sp, #0]
    34cc:	e70d      	b.n	32ea <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    34ce:	9a03      	ldr	r2, [sp, #12]
    34d0:	0790      	lsls	r0, r2, #30
    34d2:	d520      	bpl.n	3516 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    34d4:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    34d8:	eba4 0e05 	sub.w	lr, r4, r5
    34dc:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    34e0:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    34e4:	d2cf      	bcs.n	3486 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    34e6:	2f0f      	cmp	r7, #15
    34e8:	d8cd      	bhi.n	3486 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    34ea:	b1f5      	cbz	r5, 352a <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    34ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
    34f0:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    34f4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    34f6:	b2c0      	uxtb	r0, r0
    34f8:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    34fc:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    3500:	f1bc 0f00 	cmp.w	ip, #0
    3504:	f43f af17 	beq.w	3336 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    3508:	f060 007f 	orn	r0, r0, #127	; 0x7f
    350c:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    3510:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    3514:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    3516:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    351a:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    351e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    3520:	9206      	str	r2, [sp, #24]
    3522:	e797      	b.n	3454 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3524:	f04f 0c00 	mov.w	ip, #0
    3528:	e7da      	b.n	34e0 <cbvprintf_package+0x254>
				} else if (is_ro) {
    352a:	f1bc 0f00 	cmp.w	ip, #0
    352e:	d001      	beq.n	3534 <cbvprintf_package+0x2a8>
					len += 1;
    3530:	3601      	adds	r6, #1
    3532:	e7ef      	b.n	3514 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    3534:	9802      	ldr	r0, [sp, #8]
					len += 2;
    3536:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    3538:	2800      	cmp	r0, #0
    353a:	d1eb      	bne.n	3514 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    353c:	9800      	ldr	r0, [sp, #0]
    353e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    3542:	f014 f823 	bl	1758c <strlen>
    3546:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    354a:	4406      	add	r6, r0
    354c:	e7e2      	b.n	3514 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    354e:	1b63      	subs	r3, r4, r5
    3550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3554:	d297      	bcs.n	3486 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    3556:	b93d      	cbnz	r5, 3568 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    3558:	f1a6 0408 	sub.w	r4, r6, #8
    355c:	18e0      	adds	r0, r4, r3
    355e:	e6ae      	b.n	32be <cbvprintf_package+0x32>
    3560:	00024868 	.word	0x00024868
    3564:	00036858 	.word	0x00036858
	if (rws_pos_en) {
    3568:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    356a:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    356c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    356e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    3570:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    3574:	b1c2      	cbz	r2, 35a8 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    3576:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    3578:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    357c:	f1b9 0f00 	cmp.w	r9, #0
    3580:	d005      	beq.n	358e <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    3582:	2200      	movs	r2, #0
    3584:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    3586:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    358a:	4297      	cmp	r7, r2
    358c:	d10e      	bne.n	35ac <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    358e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    3592:	f1c5 0301 	rsb	r3, r5, #1
    3596:	f10d 0820 	add.w	r8, sp, #32
    359a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    359c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    35a0:	4557      	cmp	r7, sl
    35a2:	d112      	bne.n	35ca <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    35a4:	1b60      	subs	r0, r4, r5
    35a6:	e68a      	b.n	32be <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    35a8:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    35aa:	e7e5      	b.n	3578 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    35ac:	f810 3b01 	ldrb.w	r3, [r0], #1
    35b0:	0619      	lsls	r1, r3, #24
    35b2:	d508      	bpl.n	35c6 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    35b4:	eb04 0e0c 	add.w	lr, r4, ip
    35b8:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    35ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    35be:	f4ff ae7c 	bcc.w	32ba <cbvprintf_package+0x2e>
			*buf++ = pos;
    35c2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    35c6:	3201      	adds	r2, #1
    35c8:	e7df      	b.n	358a <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    35ca:	f1b9 0f00 	cmp.w	r9, #0
    35ce:	d003      	beq.n	35d8 <cbvprintf_package+0x34c>
    35d0:	f998 2000 	ldrsb.w	r2, [r8]
    35d4:	2a00      	cmp	r2, #0
    35d6:	db17      	blt.n	3608 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    35d8:	9b02      	ldr	r3, [sp, #8]
    35da:	b1d3      	cbz	r3, 3612 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    35dc:	f81a 200b 	ldrb.w	r2, [sl, fp]
    35e0:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    35e4:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	1898      	adds	r0, r3, r2
    35ea:	4420      	add	r0, r4
    35ec:	4286      	cmp	r6, r0
    35ee:	f4ff ae64 	bcc.w	32ba <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    35f2:	f898 0000 	ldrb.w	r0, [r8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    35f6:	9900      	ldr	r1, [sp, #0]
    35f8:	f804 0b01 	strb.w	r0, [r4], #1
    35fc:	4620      	mov	r0, r4
    35fe:	9203      	str	r2, [sp, #12]
    3600:	f7fd faa8 	bl	b54 <memcpy>
		buf += size;
    3604:	9a03      	ldr	r2, [sp, #12]
    3606:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    3608:	f10a 0a01 	add.w	sl, sl, #1
    360c:	f108 0801 	add.w	r8, r8, #1
    3610:	e7c6      	b.n	35a0 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    3612:	f898 2000 	ldrb.w	r2, [r8]
    3616:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    361a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    361c:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    361e:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    3620:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    3624:	f013 ffb2 	bl	1758c <strlen>
    3628:	1c42      	adds	r2, r0, #1
    362a:	e7dc      	b.n	35e6 <cbvprintf_package+0x35a>
		return -EFAULT;
    362c:	f06f 000d 	mvn.w	r0, #13
    3630:	e645      	b.n	32be <cbvprintf_package+0x32>
    3632:	bf00      	nop

00003634 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    3634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3638:	b095      	sub	sp, #84	; 0x54
    363a:	af00      	add	r7, sp, #0
    363c:	61bb      	str	r3, [r7, #24]
    363e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3640:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    3642:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    3646:	468a      	mov	sl, r1
	ros_nbr   = buf[2];
    3648:	f890 b002 	ldrb.w	fp, [r0, #2]
{
    364c:	627a      	str	r2, [r7, #36]	; 0x24
    364e:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    3650:	b941      	cbnz	r1, 3664 <cbprintf_package_convert+0x30>
	s_nbr     = buf[1];
    3652:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
    3654:	7800      	ldrb	r0, [r0, #0]
    3656:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    365a:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    365c:	4555      	cmp	r5, sl
    365e:	d817      	bhi.n	3690 <cbprintf_package_convert+0x5c>
	return (size_t)(uintptr_t)(buf - start);
    3660:	eba0 0a04 	sub.w	sl, r0, r4
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    3664:	78e3      	ldrb	r3, [r4, #3]
    3666:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    3668:	f1bb 0f00 	cmp.w	fp, #0
    366c:	d002      	beq.n	3674 <cbprintf_package_convert+0x40>
    366e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3670:	07d8      	lsls	r0, r3, #31
    3672:	d416      	bmi.n	36a2 <cbprintf_package_convert+0x6e>
	rw_cpy = rws_nbr > 0 &&
    3674:	697b      	ldr	r3, [r7, #20]
    3676:	bb53      	cbnz	r3, 36ce <cbprintf_package_convert+0x9a>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    3678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    367a:	b11b      	cbz	r3, 3684 <cbprintf_package_convert+0x50>
			cb(in_packaged, in_len, ctx);
    367c:	4651      	mov	r1, sl
    367e:	4620      	mov	r0, r4
    3680:	69ba      	ldr	r2, [r7, #24]
    3682:	4798      	blx	r3
		}

		return in_len;
    3684:	4655      	mov	r5, sl

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    3686:	4628      	mov	r0, r5
    3688:	3754      	adds	r7, #84	; 0x54
    368a:	46bd      	mov	sp, r7
    368c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    3690:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
    3692:	4630      	mov	r0, r6
    3694:	f013 ff7a 	bl	1758c <strlen>
    3698:	3001      	adds	r0, #1
    369a:	4430      	add	r0, r6
	for (unsigned int i = 0; i < s_nbr; i++) {
    369c:	f10a 0a01 	add.w	sl, sl, #1
    36a0:	e7dc      	b.n	365c <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    36a2:	7823      	ldrb	r3, [r4, #0]
    36a4:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    36a6:	623b      	str	r3, [r7, #32]
    36a8:	009b      	lsls	r3, r3, #2
    36aa:	60fb      	str	r3, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    36ac:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    36ae:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
    36b0:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    36b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36b6:	2b00      	cmp	r3, #0
    36b8:	f040 80ff 	bne.w	38ba <cbprintf_package_convert+0x286>
		out_len = (int)in_len;
    36bc:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    36be:	2600      	movs	r6, #0
		out_len = (int)in_len;
    36c0:	4655      	mov	r5, sl
		if (ro_cpy) {
    36c2:	eb09 0a0b 	add.w	sl, r9, fp
			for (unsigned int i = 0; i < ros_nbr; i++) {
    36c6:	45d0      	cmp	r8, sl
    36c8:	d151      	bne.n	376e <cbprintf_package_convert+0x13a>
    36ca:	44d9      	add	r9, fp
    36cc:	e013      	b.n	36f6 <cbprintf_package_convert+0xc2>
	rw_cpy = rws_nbr > 0 &&
    36ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    36d0:	0799      	lsls	r1, r3, #30
    36d2:	d5d1      	bpl.n	3678 <cbprintf_package_convert+0x44>
	args_size = in_desc->len * sizeof(int);
    36d4:	7823      	ldrb	r3, [r4, #0]
    36d6:	4699      	mov	r9, r3
    36d8:	623b      	str	r3, [r7, #32]
    36da:	009b      	lsls	r3, r3, #2
    36dc:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    36de:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    36e0:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    36e4:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    36e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36e8:	2b00      	cmp	r3, #0
    36ea:	d17a      	bne.n	37e2 <cbprintf_package_convert+0x1ae>
		out_len = (int)in_len;
    36ec:	4655      	mov	r5, sl
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    36ee:	f1bb 0f00 	cmp.w	fp, #0
    36f2:	d14f      	bne.n	3794 <cbprintf_package_convert+0x160>
	size_t strl_cnt = 0;
    36f4:	465e      	mov	r6, fp
		for (unsigned int i = 0; i < rws_nbr; i++) {
    36f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    36f8:	f013 0f05 	tst.w	r3, #5
    36fc:	bf0c      	ite	eq
    36fe:	f04f 0b02 	moveq.w	fp, #2
    3702:	f04f 0b01 	movne.w	fp, #1
    3706:	697b      	ldr	r3, [r7, #20]
    3708:	eb09 0a43 	add.w	sl, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    370c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    370e:	f003 0302 	and.w	r3, r3, #2
    3712:	627b      	str	r3, [r7, #36]	; 0x24
		for (unsigned int i = 0; i < rws_nbr; i++) {
    3714:	45d1      	cmp	r9, sl
    3716:	d0b6      	beq.n	3686 <cbprintf_package_convert+0x52>
			uint8_t arg_idx = *str_pos++;
    3718:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    371c:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    3720:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    3724:	4bab      	ldr	r3, [pc, #684]	; (39d4 <cbprintf_package_convert+0x3a0>)
    3726:	4598      	cmp	r8, r3
    3728:	d302      	bcc.n	3730 <cbprintf_package_convert+0xfc>
    372a:	4bab      	ldr	r3, [pc, #684]	; (39d8 <cbprintf_package_convert+0x3a4>)
    372c:	4598      	cmp	r8, r3
    372e:	d338      	bcc.n	37a2 <cbprintf_package_convert+0x16e>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    3730:	693b      	ldr	r3, [r7, #16]
    3732:	2b00      	cmp	r3, #0
    3734:	d042      	beq.n	37bc <cbprintf_package_convert+0x188>
    3736:	69f8      	ldr	r0, [r7, #28]
    3738:	f01a ffda 	bl	1e6f0 <is_ptr>
    373c:	2800      	cmp	r0, #0
    373e:	d03d      	beq.n	37bc <cbprintf_package_convert+0x188>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    3740:	46e8      	mov	r8, sp
    3742:	b08a      	sub	sp, #40	; 0x28
    3744:	466a      	mov	r2, sp
    3746:	4ba5      	ldr	r3, [pc, #660]	; (39dc <cbprintf_package_convert+0x3a8>)
    3748:	6153      	str	r3, [r2, #20]
    374a:	69fb      	ldr	r3, [r7, #28]
    374c:	e9c2 3106 	strd	r3, r1, [r2, #24]
    3750:	f44f 7300 	mov.w	r3, #512	; 0x200
    3754:	8413      	strh	r3, [r2, #32]
    3756:	4ba2      	ldr	r3, [pc, #648]	; (39e0 <cbprintf_package_convert+0x3ac>)
    3758:	f842 3f10 	str.w	r3, [r2, #16]!
    375c:	2300      	movs	r3, #0
    375e:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    3762:	48a0      	ldr	r0, [pc, #640]	; (39e4 <cbprintf_package_convert+0x3b0>)
    3764:	f001 fb8e 	bl	4e84 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    3768:	3d02      	subs	r5, #2
    376a:	46c5      	mov	sp, r8
				continue;
    376c:	e7d2      	b.n	3714 <cbprintf_package_convert+0xe0>
				const char *str = *(const char **)&buf32[*str_pos];
    376e:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
    3772:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    3776:	f013 ff09 	bl	1758c <strlen>
				if (strl && strl_cnt < strl_len) {
    377a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    377c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    377e:	b13b      	cbz	r3, 3790 <cbprintf_package_convert+0x15c>
    3780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3784:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    3786:	bf3e      	ittt	cc
    3788:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
    378a:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
    378e:	3601      	addcc	r6, #1
				out_len += len;
    3790:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    3792:	e798      	b.n	36c6 <cbprintf_package_convert+0x92>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    3794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3796:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
    379a:	bf1c      	itt	ne
    379c:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    379e:	44d9      	addne	r9, fp
    37a0:	e7a9      	b.n	36f6 <cbprintf_package_convert+0xc2>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    37a2:	693b      	ldr	r3, [r7, #16]
    37a4:	b123      	cbz	r3, 37b0 <cbprintf_package_convert+0x17c>
    37a6:	69f8      	ldr	r0, [r7, #28]
    37a8:	f01a ffa2 	bl	1e6f0 <is_ptr>
    37ac:	2800      	cmp	r0, #0
    37ae:	d1c7      	bne.n	3740 <cbprintf_package_convert+0x10c>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    37b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    37b2:	07da      	lsls	r2, r3, #31
    37b4:	d405      	bmi.n	37c2 <cbprintf_package_convert+0x18e>
					out_len -= drop_ro_str_pos ? 2 : 1;
    37b6:	eba5 050b 	sub.w	r5, r5, fp
    37ba:	e7ab      	b.n	3714 <cbprintf_package_convert+0xe0>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    37bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37be:	2b00      	cmp	r3, #0
    37c0:	d0a8      	beq.n	3714 <cbprintf_package_convert+0xe0>
		return 1 + strlen(str);
    37c2:	4640      	mov	r0, r8
    37c4:	f013 fee2 	bl	1758c <strlen>
				if (strl && strl_cnt < strl_len) {
    37c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    37ca:	b143      	cbz	r3, 37de <cbprintf_package_convert+0x1aa>
    37cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    37d0:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    37d2:	bf3f      	itttt	cc
    37d4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    37d6:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    37d8:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    37dc:	3601      	addcc	r6, #1
				out_len += (len - 1);
    37de:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    37e0:	e798      	b.n	3714 <cbprintf_package_convert+0xe0>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    37e2:	f1bb 0f00 	cmp.w	fp, #0
    37e6:	d06e      	beq.n	38c6 <cbprintf_package_convert+0x292>
    37e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    37ea:	f013 0604 	ands.w	r6, r3, #4
    37ee:	d06d      	beq.n	38cc <cbprintf_package_convert+0x298>
		keep_cnt = ros_nbr;
    37f0:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    37f2:	2600      	movs	r6, #0
		dst = keep_str_pos;
    37f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
    37f8:	465a      	mov	r2, fp
    37fa:	4649      	mov	r1, r9
    37fc:	f7fd f9aa 	bl	b54 <memcpy>
	str_pos += ros_nbr;
    3800:	697b      	ldr	r3, [r7, #20]
    3802:	44d9      	add	r9, fp
	for (unsigned int i = 0; i < rws_nbr; i++) {
    3804:	005b      	lsls	r3, r3, #1
    3806:	607b      	str	r3, [r7, #4]
    3808:	697b      	ldr	r3, [r7, #20]
    380a:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    380e:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    3810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3812:	f003 0302 	and.w	r3, r3, #2
    3816:	603b      	str	r3, [r7, #0]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    3818:	68bb      	ldr	r3, [r7, #8]
    381a:	454b      	cmp	r3, r9
    381c:	d158      	bne.n	38d0 <cbprintf_package_convert+0x29c>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    381e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    3820:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    3822:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    3824:	0789      	lsls	r1, r1, #30
    3826:	bf48      	it	mi
    3828:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    382a:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    382e:	bf58      	it	pl
    3830:	ea4f 0158 	movpl.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    3834:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    3836:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    3838:	f100 809a 	bmi.w	3970 <cbprintf_package_convert+0x33c>
    383c:	f010 0f04 	tst.w	r0, #4
    3840:	bf14      	ite	ne
    3842:	4640      	movne	r0, r8
    3844:	2000      	moveq	r0, #0
    3846:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    3848:	7062      	strb	r2, [r4, #1]
    384a:	70a0      	strb	r0, [r4, #2]
    384c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    384e:	4620      	mov	r0, r4
    3850:	69ba      	ldr	r2, [r7, #24]
    3852:	68f9      	ldr	r1, [r7, #12]
    3854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3856:	4798      	blx	r3
	if (rv < 0) {
    3858:	1e05      	subs	r5, r0, #0
    385a:	f6ff af14 	blt.w	3686 <cbprintf_package_convert+0x52>
	*in_desc = in_desc_backup;
    385e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    3860:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    3862:	7023      	strb	r3, [r4, #0]
    3864:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    3866:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    3868:	7063      	strb	r3, [r4, #1]
    386a:	697b      	ldr	r3, [r7, #20]
    386c:	f884 b002 	strb.w	fp, [r4, #2]
    3870:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    3872:	f107 0040 	add.w	r0, r7, #64	; 0x40
    3876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3878:	4798      	blx	r3
	if (rv < 0) {
    387a:	f1b0 0800 	subs.w	r8, r0, #0
    387e:	f2c0 80a4 	blt.w	39ca <cbprintf_package_convert+0x396>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	ebaa 010b 	sub.w	r1, sl, fp
    3888:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	4648      	mov	r0, r9
    388e:	1ac9      	subs	r1, r1, r3
    3890:	69ba      	ldr	r2, [r7, #24]
    3892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3894:	4798      	blx	r3
	if (rv < 0) {
    3896:	2800      	cmp	r0, #0
    3898:	f2c0 8099 	blt.w	39ce <cbprintf_package_convert+0x39a>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    389c:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    38a0:	44a8      	add	r8, r5
	out_len += rv;
    38a2:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    38a6:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    38aa:	45b3      	cmp	fp, r6
    38ac:	d362      	bcc.n	3974 <cbprintf_package_convert+0x340>
	(void)cb(NULL, 0, ctx);
    38ae:	2100      	movs	r1, #0
    38b0:	69ba      	ldr	r2, [r7, #24]
    38b2:	4608      	mov	r0, r1
    38b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38b6:	4798      	blx	r3
	return out_len;
    38b8:	e6e5      	b.n	3686 <cbprintf_package_convert+0x52>
	if (cb == NULL) {
    38ba:	465e      	mov	r6, fp
    38bc:	f04f 0800 	mov.w	r8, #0
    38c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
    38c4:	e798      	b.n	37f8 <cbprintf_package_convert+0x1c4>
		scpy_cnt = 0;
    38c6:	465e      	mov	r6, fp
		keep_cnt = 0;
    38c8:	46d8      	mov	r8, fp
    38ca:	e799      	b.n	3800 <cbprintf_package_convert+0x1cc>
    38cc:	46b0      	mov	r8, r6
    38ce:	e797      	b.n	3800 <cbprintf_package_convert+0x1cc>
		uint8_t arg_idx = *str_pos++;
    38d0:	f819 1b02 	ldrb.w	r1, [r9], #2
    38d4:	4b3f      	ldr	r3, [pc, #252]	; (39d4 <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
    38d6:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    38da:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    38de:	4298      	cmp	r0, r3
    38e0:	d302      	bcc.n	38e8 <cbprintf_package_convert+0x2b4>
    38e2:	4b3d      	ldr	r3, [pc, #244]	; (39d8 <cbprintf_package_convert+0x3a4>)
    38e4:	4298      	cmp	r0, r3
    38e6:	d31d      	bcc.n	3924 <cbprintf_package_convert+0x2f0>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    38e8:	693b      	ldr	r3, [r7, #16]
    38ea:	b123      	cbz	r3, 38f6 <cbprintf_package_convert+0x2c2>
    38ec:	69f8      	ldr	r0, [r7, #28]
    38ee:	f01a feff 	bl	1e6f0 <is_ptr>
    38f2:	2800      	cmp	r0, #0
    38f4:	d190      	bne.n	3818 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    38f6:	683b      	ldr	r3, [r7, #0]
    38f8:	b9fb      	cbnz	r3, 393a <cbprintf_package_convert+0x306>
				keep_str_pos[keep_cnt++] = arg_idx;
    38fa:	f108 0328 	add.w	r3, r8, #40	; 0x28
    38fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
    3902:	f108 0001 	add.w	r0, r8, #1
    3906:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    390a:	f107 0350 	add.w	r3, r7, #80	; 0x50
    390e:	f108 0802 	add.w	r8, r8, #2
    3912:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    3916:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    391a:	fa5f f888 	uxtb.w	r8, r8
    391e:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    3922:	e779      	b.n	3818 <cbprintf_package_convert+0x1e4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    3924:	693b      	ldr	r3, [r7, #16]
    3926:	b12b      	cbz	r3, 3934 <cbprintf_package_convert+0x300>
    3928:	69f8      	ldr	r0, [r7, #28]
    392a:	f01a fee1 	bl	1e6f0 <is_ptr>
    392e:	2800      	cmp	r0, #0
    3930:	f47f af72 	bne.w	3818 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    3934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3936:	07db      	lsls	r3, r3, #31
    3938:	d509      	bpl.n	394e <cbprintf_package_convert+0x31a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    393a:	f106 0328 	add.w	r3, r6, #40	; 0x28
    393e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    3942:	1c71      	adds	r1, r6, #1
    3944:	189e      	adds	r6, r3, r2
    3946:	f806 5c20 	strb.w	r5, [r6, #-32]
    394a:	b2ce      	uxtb	r6, r1
    394c:	e764      	b.n	3818 <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    394e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3950:	0758      	lsls	r0, r3, #29
    3952:	f57f af61 	bpl.w	3818 <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
    3956:	f108 0328 	add.w	r3, r8, #40	; 0x28
    395a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    395e:	f108 0101 	add.w	r1, r8, #1
    3962:	eb03 0802 	add.w	r8, r3, r2
    3966:	f808 5c10 	strb.w	r5, [r8, #-16]
    396a:	fa5f f881 	uxtb.w	r8, r1
    396e:	e753      	b.n	3818 <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    3970:	2000      	movs	r0, #0
    3972:	e768      	b.n	3846 <cbprintf_package_convert+0x212>
		uint8_t loc = cpy_str_pos[i];
    3974:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    3978:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    397c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    3980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3982:	b1fb      	cbz	r3, 39c4 <cbprintf_package_convert+0x390>
    3984:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    3988:	2101      	movs	r1, #1
    398a:	69ba      	ldr	r2, [r7, #24]
    398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    398e:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    3992:	4798      	blx	r3
		if (rv < 0) {
    3994:	2800      	cmp	r0, #0
    3996:	db1a      	blt.n	39ce <cbprintf_package_convert+0x39a>
		out_len += rv;
    3998:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    399a:	f1b8 0f00 	cmp.w	r8, #0
    399e:	d106      	bne.n	39ae <cbprintf_package_convert+0x37a>
    39a0:	4648      	mov	r0, r9
    39a2:	f013 fdf3 	bl	1758c <strlen>
    39a6:	f100 0801 	add.w	r8, r0, #1
    39aa:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    39ae:	4641      	mov	r1, r8
    39b0:	4648      	mov	r0, r9
    39b2:	69ba      	ldr	r2, [r7, #24]
    39b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39b6:	4798      	blx	r3
		if (rv < 0) {
    39b8:	2800      	cmp	r0, #0
    39ba:	db08      	blt.n	39ce <cbprintf_package_convert+0x39a>
		out_len += rv;
    39bc:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    39be:	f10b 0b01 	add.w	fp, fp, #1
    39c2:	e772      	b.n	38aa <cbprintf_package_convert+0x276>
		uint16_t str_len = strl ? strl[i] : 0;
    39c4:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    39c8:	e7de      	b.n	3988 <cbprintf_package_convert+0x354>
    39ca:	4645      	mov	r5, r8
    39cc:	e65b      	b.n	3686 <cbprintf_package_convert+0x52>
    39ce:	4605      	mov	r5, r0
    39d0:	e659      	b.n	3686 <cbprintf_package_convert+0x52>
    39d2:	bf00      	nop
    39d4:	00024868 	.word	0x00024868
    39d8:	00036858 	.word	0x00036858
    39dc:	00032322 	.word	0x00032322
    39e0:	01000004 	.word	0x01000004
    39e4:	00024c68 	.word	0x00024c68

000039e8 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    39e8:	280f      	cmp	r0, #15
{
    39ea:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    39ec:	d906      	bls.n	39fc <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    39ee:	f01c fb28 	bl	20042 <__errno>
    39f2:	2309      	movs	r3, #9
    39f4:	6003      	str	r3, [r0, #0]
		return -1;
    39f6:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    39fa:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <_check_fd+0x28>)
    39fe:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    3a02:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
    3a06:	2b00      	cmp	r3, #0
    3a08:	d0f1      	beq.n	39ee <_check_fd+0x6>
	return 0;
    3a0a:	2000      	movs	r0, #0
    3a0c:	e7f5      	b.n	39fa <_check_fd+0x12>
    3a0e:	bf00      	nop
    3a10:	200006a0 	.word	0x200006a0

00003a14 <z_fd_unref.isra.0>:
static int z_fd_unref(int fd)
    3a14:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    3a16:	490d      	ldr	r1, [pc, #52]	; (3a4c <z_fd_unref.isra.0+0x38>)
    3a18:	0140      	lsls	r0, r0, #5
    3a1a:	f100 0308 	add.w	r3, r0, #8
    3a1e:	440b      	add	r3, r1
    3a20:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
    3a24:	b182      	cbz	r2, 3a48 <z_fd_unref.isra.0+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    3a26:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a28:	e8d3 5fef 	ldaex	r5, [r3]
    3a2c:	4295      	cmp	r5, r2
    3a2e:	d104      	bne.n	3a3a <z_fd_unref.isra.0+0x26>
    3a30:	e8c3 4fec 	stlex	ip, r4, [r3]
    3a34:	f1bc 0f00 	cmp.w	ip, #0
    3a38:	d1f6      	bne.n	3a28 <z_fd_unref.isra.0+0x14>
    3a3a:	d1f1      	bne.n	3a20 <z_fd_unref.isra.0+0xc>
	if (old_rc != 1) {
    3a3c:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
    3a3e:	bf01      	itttt	eq
    3a40:	2300      	moveq	r3, #0
    3a42:	180a      	addeq	r2, r1, r0
    3a44:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
    3a46:	6053      	streq	r3, [r2, #4]
}
    3a48:	bd30      	pop	{r4, r5, pc}
    3a4a:	bf00      	nop
    3a4c:	20000698 	.word	0x20000698

00003a50 <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
    3a50:	b570      	push	{r4, r5, r6, lr}
    3a52:	4604      	mov	r4, r0
    3a54:	460e      	mov	r6, r1
    3a56:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
    3a58:	f7ff ffc6 	bl	39e8 <_check_fd>
    3a5c:	2800      	cmp	r0, #0
    3a5e:	db0c      	blt.n	3a7a <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
    3a60:	4b07      	ldr	r3, [pc, #28]	; (3a80 <z_get_fd_obj_and_vtable+0x30>)
    3a62:	0161      	lsls	r1, r4, #5
    3a64:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3a68:	6862      	ldr	r2, [r4, #4]
    3a6a:	6032      	str	r2, [r6, #0]

	if (lock) {
    3a6c:	b11d      	cbz	r5, 3a76 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
    3a6e:	f101 020c 	add.w	r2, r1, #12
    3a72:	441a      	add	r2, r3
    3a74:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
    3a76:	5858      	ldr	r0, [r3, r1]
}
    3a78:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    3a7a:	2000      	movs	r0, #0
    3a7c:	e7fc      	b.n	3a78 <z_get_fd_obj_and_vtable+0x28>
    3a7e:	bf00      	nop
    3a80:	20000698 	.word	0x20000698

00003a84 <z_reserve_fd>:

int z_reserve_fd(void)
{
    3a84:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    3a86:	2400      	movs	r4, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    3a88:	f04f 33ff 	mov.w	r3, #4294967295
    3a8c:	f04f 32ff 	mov.w	r2, #4294967295
    3a90:	4814      	ldr	r0, [pc, #80]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3a92:	f011 fe6f 	bl	15774 <z_impl_k_mutex_lock>
    3a96:	4b14      	ldr	r3, [pc, #80]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3a98:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    3a9c:	b17a      	cbz	r2, 3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    3a9e:	3401      	adds	r4, #1
    3aa0:	2c10      	cmp	r4, #16
    3aa2:	f103 0320 	add.w	r3, r3, #32
    3aa6:	d1f7      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
	errno = ENFILE;
    3aa8:	f01c facb 	bl	20042 <__errno>
    3aac:	2317      	movs	r3, #23
	return -1;
    3aae:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    3ab2:	6003      	str	r3, [r0, #0]
		fdtable[fd].obj = NULL;
		fdtable[fd].vtable = NULL;
		k_mutex_init(&fdtable[fd].lock);
	}

	k_mutex_unlock(&fdtable_lock);
    3ab4:	480b      	ldr	r0, [pc, #44]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3ab6:	f01a fe5d 	bl	1e774 <k_mutex_unlock.isra.0>

	return fd;
}
    3aba:	4620      	mov	r0, r4
    3abc:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3abe:	e8d3 0fef 	ldaex	r0, [r3]
    3ac2:	3001      	adds	r0, #1
    3ac4:	e8c3 0fe1 	stlex	r1, r0, [r3]
    3ac8:	2900      	cmp	r1, #0
    3aca:	d1f8      	bne.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
		fdtable[fd].obj = NULL;
    3acc:	4807      	ldr	r0, [pc, #28]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3ace:	0163      	lsls	r3, r4, #5
    3ad0:	eb00 1144 	add.w	r1, r0, r4, lsl #5
    3ad4:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
    3ad6:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    3ad8:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
    3ada:	4418      	add	r0, r3
    3adc:	f020 f9c0 	bl	23e60 <z_impl_k_mutex_init>
    3ae0:	e7e8      	b.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3ae2:	bf00      	nop
    3ae4:	20001238 	.word	0x20001238
    3ae8:	200006a0 	.word	0x200006a0
    3aec:	20000698 	.word	0x20000698

00003af0 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    3af0:	b410      	push	{r4}
    3af2:	4604      	mov	r4, r0
    3af4:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    3af6:	4b09      	ldr	r3, [pc, #36]	; (3b1c <z_finalize_fd+0x2c>)
    3af8:	0162      	lsls	r2, r4, #5
    3afa:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3afe:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
    3b00:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    3b02:	b140      	cbz	r0, 3b16 <z_finalize_fd+0x26>
    3b04:	68c4      	ldr	r4, [r0, #12]
    3b06:	b134      	cbz	r4, 3b16 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    3b08:	320c      	adds	r2, #12
    3b0a:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
    3b0c:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    3b0e:	f240 1205 	movw	r2, #261	; 0x105
    3b12:	f01a be20 	b.w	1e756 <z_fdtable_call_ioctl>
}
    3b16:	bc10      	pop	{r4}
    3b18:	4770      	bx	lr
    3b1a:	bf00      	nop
    3b1c:	20000698 	.word	0x20000698

00003b20 <_read>:
}

#ifdef CONFIG_POSIX_API

ssize_t read(int fd, void *buf, size_t sz)
{
    3b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b24:	4604      	mov	r4, r0
    3b26:	460f      	mov	r7, r1
    3b28:	4690      	mov	r8, r2
	ssize_t res;

	if (_check_fd(fd) < 0) {
    3b2a:	f7ff ff5d 	bl	39e8 <_check_fd>
    3b2e:	2800      	cmp	r0, #0
    3b30:	db19      	blt.n	3b66 <_read+0x46>
		return -1;
	}

	(void)k_mutex_lock(&fdtable[fd].lock, K_FOREVER);
    3b32:	4e0e      	ldr	r6, [pc, #56]	; (3b6c <_read+0x4c>)
    3b34:	0164      	lsls	r4, r4, #5
    3b36:	f104 050c 	add.w	r5, r4, #12
    3b3a:	4435      	add	r5, r6
	return z_impl_k_mutex_lock(mutex, timeout);
    3b3c:	f04f 32ff 	mov.w	r2, #4294967295
    3b40:	f04f 33ff 	mov.w	r3, #4294967295
    3b44:	4628      	mov	r0, r5
    3b46:	f011 fe15 	bl	15774 <z_impl_k_mutex_lock>

	res = fdtable[fd].vtable->read(fdtable[fd].obj, buf, sz);
    3b4a:	1933      	adds	r3, r6, r4
    3b4c:	685b      	ldr	r3, [r3, #4]
    3b4e:	5930      	ldr	r0, [r6, r4]
    3b50:	4642      	mov	r2, r8
    3b52:	4639      	mov	r1, r7
    3b54:	681b      	ldr	r3, [r3, #0]
    3b56:	4798      	blx	r3
    3b58:	4604      	mov	r4, r0

	k_mutex_unlock(&fdtable[fd].lock);
    3b5a:	4628      	mov	r0, r5
    3b5c:	f01a fe0a 	bl	1e774 <k_mutex_unlock.isra.0>

	return res;
}
    3b60:	4620      	mov	r0, r4
    3b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
    3b66:	f04f 34ff 	mov.w	r4, #4294967295
    3b6a:	e7f9      	b.n	3b60 <_read+0x40>
    3b6c:	20000698 	.word	0x20000698

00003b70 <_write>:
FUNC_ALIAS(read, _read, ssize_t);

ssize_t write(int fd, const void *buf, size_t sz)
{
    3b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b74:	4604      	mov	r4, r0
    3b76:	460f      	mov	r7, r1
    3b78:	4690      	mov	r8, r2
	ssize_t res;

	if (_check_fd(fd) < 0) {
    3b7a:	f7ff ff35 	bl	39e8 <_check_fd>
    3b7e:	2800      	cmp	r0, #0
    3b80:	db19      	blt.n	3bb6 <_write+0x46>
		return -1;
	}

	(void)k_mutex_lock(&fdtable[fd].lock, K_FOREVER);
    3b82:	4e0e      	ldr	r6, [pc, #56]	; (3bbc <_write+0x4c>)
    3b84:	0164      	lsls	r4, r4, #5
    3b86:	f104 050c 	add.w	r5, r4, #12
    3b8a:	4435      	add	r5, r6
    3b8c:	f04f 32ff 	mov.w	r2, #4294967295
    3b90:	f04f 33ff 	mov.w	r3, #4294967295
    3b94:	4628      	mov	r0, r5
    3b96:	f011 fded 	bl	15774 <z_impl_k_mutex_lock>

	res = fdtable[fd].vtable->write(fdtable[fd].obj, buf, sz);
    3b9a:	1933      	adds	r3, r6, r4
    3b9c:	685b      	ldr	r3, [r3, #4]
    3b9e:	5930      	ldr	r0, [r6, r4]
    3ba0:	4642      	mov	r2, r8
    3ba2:	4639      	mov	r1, r7
    3ba4:	685b      	ldr	r3, [r3, #4]
    3ba6:	4798      	blx	r3
    3ba8:	4604      	mov	r4, r0

	k_mutex_unlock(&fdtable[fd].lock);
    3baa:	4628      	mov	r0, r5
    3bac:	f01a fde2 	bl	1e774 <k_mutex_unlock.isra.0>

	return res;
}
    3bb0:	4620      	mov	r0, r4
    3bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
    3bb6:	f04f 34ff 	mov.w	r4, #4294967295
    3bba:	e7f9      	b.n	3bb0 <_write+0x40>
    3bbc:	20000698 	.word	0x20000698

00003bc0 <_close>:
FUNC_ALIAS(write, _write, ssize_t);

int close(int fd)
{
    3bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bc2:	4605      	mov	r5, r0
	int res;

	if (_check_fd(fd) < 0) {
    3bc4:	f7ff ff10 	bl	39e8 <_check_fd>
    3bc8:	2800      	cmp	r0, #0
    3bca:	db19      	blt.n	3c00 <_close+0x40>
		return -1;
	}

	(void)k_mutex_lock(&fdtable[fd].lock, K_FOREVER);
    3bcc:	4f0e      	ldr	r7, [pc, #56]	; (3c08 <_close+0x48>)
    3bce:	016c      	lsls	r4, r5, #5
    3bd0:	f104 060c 	add.w	r6, r4, #12
    3bd4:	443e      	add	r6, r7
    3bd6:	f04f 32ff 	mov.w	r2, #4294967295
    3bda:	f04f 33ff 	mov.w	r3, #4294967295
    3bde:	4630      	mov	r0, r6
    3be0:	f011 fdc8 	bl	15774 <z_impl_k_mutex_lock>

	res = fdtable[fd].vtable->close(fdtable[fd].obj);
    3be4:	193b      	adds	r3, r7, r4
    3be6:	685b      	ldr	r3, [r3, #4]
    3be8:	5938      	ldr	r0, [r7, r4]
    3bea:	689b      	ldr	r3, [r3, #8]
    3bec:	4798      	blx	r3
    3bee:	4604      	mov	r4, r0

	k_mutex_unlock(&fdtable[fd].lock);
    3bf0:	4630      	mov	r0, r6
    3bf2:	f01a fdbf 	bl	1e774 <k_mutex_unlock.isra.0>
	(void)z_fd_unref(fd);
    3bf6:	4628      	mov	r0, r5
    3bf8:	f7ff ff0c 	bl	3a14 <z_fd_unref.isra.0>

	z_free_fd(fd);

	return res;
}
    3bfc:	4620      	mov	r0, r4
    3bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
    3c00:	f04f 34ff 	mov.w	r4, #4294967295
    3c04:	e7fa      	b.n	3bfc <_close+0x3c>
    3c06:	bf00      	nop
    3c08:	20000698 	.word	0x20000698

00003c0c <_lseek>:

	return z_fdtable_call_ioctl(fdtable[fd].vtable, fdtable[fd].obj, ZFD_IOCTL_FSYNC);
}

off_t lseek(int fd, off_t offset, int whence)
{
    3c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3c0e:	4604      	mov	r4, r0
    3c10:	460d      	mov	r5, r1
    3c12:	4616      	mov	r6, r2
	if (_check_fd(fd) < 0) {
    3c14:	f7ff fee8 	bl	39e8 <_check_fd>
    3c18:	2800      	cmp	r0, #0
    3c1a:	db0d      	blt.n	3c38 <_lseek+0x2c>
		return -1;
	}

	return z_fdtable_call_ioctl(fdtable[fd].vtable, fdtable[fd].obj, ZFD_IOCTL_LSEEK,
    3c1c:	4908      	ldr	r1, [pc, #32]	; (3c40 <_lseek+0x34>)
    3c1e:	0160      	lsls	r0, r4, #5
    3c20:	9600      	str	r6, [sp, #0]
    3c22:	eb01 1444 	add.w	r4, r1, r4, lsl #5
    3c26:	462b      	mov	r3, r5
    3c28:	5809      	ldr	r1, [r1, r0]
    3c2a:	f240 1201 	movw	r2, #257	; 0x101
    3c2e:	6860      	ldr	r0, [r4, #4]
    3c30:	f01a fd91 	bl	1e756 <z_fdtable_call_ioctl>
			  offset, whence);
}
    3c34:	b002      	add	sp, #8
    3c36:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3c38:	f04f 30ff 	mov.w	r0, #4294967295
    3c3c:	e7fa      	b.n	3c34 <_lseek+0x28>
    3c3e:	bf00      	nop
    3c40:	20000698 	.word	0x20000698

00003c44 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    3c44:	4b01      	ldr	r3, [pc, #4]	; (3c4c <__printk_hook_install+0x8>)
    3c46:	6018      	str	r0, [r3, #0]
}
    3c48:	4770      	bx	lr
    3c4a:	bf00      	nop
    3c4c:	20000898 	.word	0x20000898

00003c50 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3c50:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    3c52:	2500      	movs	r5, #0
{
    3c54:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    3c56:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    3c5a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    3c5c:	9500      	str	r5, [sp, #0]
    3c5e:	a903      	add	r1, sp, #12
    3c60:	4805      	ldr	r0, [pc, #20]	; (3c78 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    3c62:	9505      	str	r5, [sp, #20]
    3c64:	f000 f97a 	bl	3f5c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    3c68:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    3c6c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3c6e:	bfb8      	it	lt
    3c70:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3c72:	b007      	add	sp, #28
    3c74:	bd30      	pop	{r4, r5, pc}
    3c76:	bf00      	nop
    3c78:	0001e79d 	.word	0x0001e79d

00003c7c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c80:	8b05      	ldrh	r5, [r0, #24]
{
    3c82:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3c84:	0728      	lsls	r0, r5, #28
{
    3c86:	4690      	mov	r8, r2
	if (processing) {
    3c88:	d411      	bmi.n	3cae <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    3c8a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c8c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    3c90:	f040 80cd 	bne.w	3e2e <process_event+0x1b2>
			evt = process_recheck(mgr);
    3c94:	4620      	mov	r0, r4
    3c96:	f01b f864 	bl	1ed62 <process_recheck>
		}

		if (evt == EVT_NOP) {
    3c9a:	b178      	cbz	r0, 3cbc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    3c9c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3c9e:	8b21      	ldrh	r1, [r4, #24]
    3ca0:	2804      	cmp	r0, #4
    3ca2:	d811      	bhi.n	3cc8 <process_event+0x4c>
    3ca4:	e8df f000 	tbb	[pc, r0]
    3ca8:	856d10c3 	.word	0x856d10c3
    3cac:	95          	.byte	0x95
    3cad:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    3cae:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3cb0:	bf0c      	ite	eq
    3cb2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3cb6:	f045 0520 	orrne.w	r5, r5, #32
    3cba:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3cbc:	f388 8811 	msr	BASEPRI, r8
    3cc0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3cc8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3ccc:	45aa      	cmp	sl, r5
    3cce:	f000 80a6 	beq.w	3e1e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    3cd2:	2700      	movs	r7, #0
    3cd4:	46b9      	mov	r9, r7
    3cd6:	463e      	mov	r6, r7
    3cd8:	68a3      	ldr	r3, [r4, #8]
    3cda:	2b00      	cmp	r3, #0
    3cdc:	f000 80bd 	beq.w	3e5a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3ce0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3ce4:	8321      	strh	r1, [r4, #24]
    3ce6:	f388 8811 	msr	BASEPRI, r8
    3cea:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3cee:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3cf0:	2900      	cmp	r1, #0
    3cf2:	f000 80bb 	beq.w	3e6c <process_event+0x1f0>
	return node->next;
    3cf6:	680d      	ldr	r5, [r1, #0]
    3cf8:	2900      	cmp	r1, #0
    3cfa:	f000 80b7 	beq.w	3e6c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    3cfe:	4633      	mov	r3, r6
    3d00:	4652      	mov	r2, sl
    3d02:	4620      	mov	r0, r4
    3d04:	f8d1 8004 	ldr.w	r8, [r1, #4]
    3d08:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3d0a:	2d00      	cmp	r5, #0
    3d0c:	d076      	beq.n	3dfc <process_event+0x180>
    3d0e:	682b      	ldr	r3, [r5, #0]
    3d10:	4629      	mov	r1, r5
    3d12:	461d      	mov	r5, r3
    3d14:	e7f0      	b.n	3cf8 <process_event+0x7c>
    3d16:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3d1a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3d1c:	2a01      	cmp	r2, #1
    3d1e:	d81b      	bhi.n	3d58 <process_event+0xdc>
	list->head = NULL;
    3d20:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3d22:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    3d26:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    3d28:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3d2a:	b289      	uxth	r1, r1
	list->tail = NULL;
    3d2c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3d30:	d109      	bne.n	3d46 <process_event+0xca>
    3d32:	463b      	mov	r3, r7
    3d34:	e003      	b.n	3d3e <process_event+0xc2>
				mgr->refs += 1U;
    3d36:	8b62      	ldrh	r2, [r4, #26]
    3d38:	3201      	adds	r2, #1
    3d3a:	8362      	strh	r2, [r4, #26]
	return node->next;
    3d3c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d1f9      	bne.n	3d36 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3d42:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    3d46:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    3d48:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3d4a:	f01b f80a 	bl	1ed62 <process_recheck>
    3d4e:	2800      	cmp	r0, #0
    3d50:	d07b      	beq.n	3e4a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3d52:	f041 0120 	orr.w	r1, r1, #32
    3d56:	e077      	b.n	3e48 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3d58:	2b04      	cmp	r3, #4
    3d5a:	d10a      	bne.n	3d72 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3d5c:	f021 0107 	bic.w	r1, r1, #7
    3d60:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    3d62:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    3d64:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3d66:	f01a fffc 	bl	1ed62 <process_recheck>
    3d6a:	b110      	cbz	r0, 3d72 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3d6c:	f041 0120 	orr.w	r1, r1, #32
    3d70:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3d72:	8b21      	ldrh	r1, [r4, #24]
    3d74:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3d78:	45aa      	cmp	sl, r5
    3d7a:	d050      	beq.n	3e1e <process_event+0x1a2>
    3d7c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    3d7e:	46b9      	mov	r9, r7
    3d80:	e7aa      	b.n	3cd8 <process_event+0x5c>
			transit = mgr->transitions->start;
    3d82:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3d84:	f021 0107 	bic.w	r1, r1, #7
    3d88:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    3d8c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    3d8e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    3d92:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    3d94:	d12d      	bne.n	3df2 <process_event+0x176>
		    || (transit != NULL)) {
    3d96:	f1b9 0f00 	cmp.w	r9, #0
    3d9a:	d040      	beq.n	3e1e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3d9c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3da0:	8321      	strh	r1, [r4, #24]
    3da2:	f388 8811 	msr	BASEPRI, r8
    3da6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    3daa:	4620      	mov	r0, r4
    3dac:	4939      	ldr	r1, [pc, #228]	; (3e94 <process_event+0x218>)
    3dae:	47c8      	blx	r9
    3db0:	e029      	b.n	3e06 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3db2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    3db6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3db8:	f041 0104 	orr.w	r1, r1, #4
    3dbc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    3dbe:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    3dc0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    3dc4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    3dc6:	d0e6      	beq.n	3d96 <process_event+0x11a>
    3dc8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3dca:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    3dce:	463e      	mov	r6, r7
    3dd0:	e782      	b.n	3cd8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3dd2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    3dd6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3dd8:	f041 0105 	orr.w	r1, r1, #5
    3ddc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    3dde:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    3de0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    3de4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    3de6:	d0d6      	beq.n	3d96 <process_event+0x11a>
    3de8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3dea:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    3dee:	463e      	mov	r6, r7
    3df0:	e772      	b.n	3cd8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    3df2:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3df4:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    3df8:	463e      	mov	r6, r7
    3dfa:	e76d      	b.n	3cd8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3dfc:	462b      	mov	r3, r5
    3dfe:	e787      	b.n	3d10 <process_event+0x94>
			if (transit != NULL) {
    3e00:	f1b9 0f00 	cmp.w	r9, #0
    3e04:	d1d1      	bne.n	3daa <process_event+0x12e>
	__asm__ volatile(
    3e06:	f04f 0320 	mov.w	r3, #32
    3e0a:	f3ef 8811 	mrs	r8, BASEPRI
    3e0e:	f383 8812 	msr	BASEPRI_MAX, r3
    3e12:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3e16:	8b23      	ldrh	r3, [r4, #24]
    3e18:	f023 0308 	bic.w	r3, r3, #8
    3e1c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3e1e:	8b25      	ldrh	r5, [r4, #24]
    3e20:	06ea      	lsls	r2, r5, #27
    3e22:	d52e      	bpl.n	3e82 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3e24:	f025 0310 	bic.w	r3, r5, #16
    3e28:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    3e2a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    3e2e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e30:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    3e32:	2e00      	cmp	r6, #0
    3e34:	f6bf af6f 	bge.w	3d16 <process_event+0x9a>
	list->head = NULL;
    3e38:	2300      	movs	r3, #0
		*clients = mgr->clients;
    3e3a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    3e3c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3e40:	f021 0107 	bic.w	r1, r1, #7
    3e44:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3e48:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3e4a:	8b21      	ldrh	r1, [r4, #24]
    3e4c:	f04f 0900 	mov.w	r9, #0
    3e50:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3e54:	45aa      	cmp	sl, r5
    3e56:	f47f af3f 	bne.w	3cd8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    3e5a:	2f00      	cmp	r7, #0
    3e5c:	d09b      	beq.n	3d96 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3e5e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3e62:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    3e64:	f388 8811 	msr	BASEPRI, r8
    3e68:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    3e6c:	2f00      	cmp	r7, #0
    3e6e:	d0c7      	beq.n	3e00 <process_event+0x184>
	return node->next;
    3e70:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    3e72:	4639      	mov	r1, r7
    3e74:	4633      	mov	r3, r6
    3e76:	4652      	mov	r2, sl
    3e78:	4620      	mov	r0, r4
    3e7a:	f01a ff9e 	bl	1edba <notify_one>
	list->head = node;
    3e7e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    3e80:	e7f4      	b.n	3e6c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3e82:	06ab      	lsls	r3, r5, #26
    3e84:	f57f af1a 	bpl.w	3cbc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3e88:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3e8c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    3e8e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    3e92:	e6ff      	b.n	3c94 <process_event+0x18>
    3e94:	0001ede7 	.word	0x0001ede7

00003e98 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e9a:	4602      	mov	r2, r0
    3e9c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    3e9e:	270a      	movs	r7, #10
	size_t val = 0;
    3ea0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    3ea2:	4e07      	ldr	r6, [pc, #28]	; (3ec0 <extract_decimal+0x28>)
    3ea4:	460b      	mov	r3, r1
    3ea6:	781c      	ldrb	r4, [r3, #0]
    3ea8:	3101      	adds	r1, #1
    3eaa:	5d35      	ldrb	r5, [r6, r4]
    3eac:	076d      	lsls	r5, r5, #29
    3eae:	d401      	bmi.n	3eb4 <extract_decimal+0x1c>
	}
	*str = sp;
    3eb0:	6013      	str	r3, [r2, #0]
	return val;
}
    3eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    3eb4:	fb07 4300 	mla	r3, r7, r0, r4
    3eb8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3ebc:	e7f2      	b.n	3ea4 <extract_decimal+0xc>
    3ebe:	bf00      	nop
    3ec0:	000311c1 	.word	0x000311c1

00003ec4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ec8:	4615      	mov	r5, r2
    3eca:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    3ecc:	78d3      	ldrb	r3, [r2, #3]
    3ece:	4a22      	ldr	r2, [pc, #136]	; (3f58 <encode_uint+0x94>)
	switch (specifier) {
    3ed0:	2b6f      	cmp	r3, #111	; 0x6f
    3ed2:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    3ed6:	4680      	mov	r8, r0
    3ed8:	460f      	mov	r7, r1
    3eda:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    3ede:	d029      	beq.n	3f34 <encode_uint+0x70>
    3ee0:	d824      	bhi.n	3f2c <encode_uint+0x68>
		return 10;
    3ee2:	2b58      	cmp	r3, #88	; 0x58
    3ee4:	bf0c      	ite	eq
    3ee6:	2610      	moveq	r6, #16
    3ee8:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3eea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    3eee:	4632      	mov	r2, r6
    3ef0:	2300      	movs	r3, #0
    3ef2:	4640      	mov	r0, r8
    3ef4:	4639      	mov	r1, r7
    3ef6:	f7fc fd6d 	bl	9d4 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    3efa:	2a09      	cmp	r2, #9
    3efc:	b2d4      	uxtb	r4, r2
    3efe:	d81e      	bhi.n	3f3e <encode_uint+0x7a>
    3f00:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    3f02:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f04:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    3f06:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f0a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    3f0e:	d301      	bcc.n	3f14 <encode_uint+0x50>
    3f10:	45d1      	cmp	r9, sl
    3f12:	d811      	bhi.n	3f38 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3f14:	782b      	ldrb	r3, [r5, #0]
    3f16:	069b      	lsls	r3, r3, #26
    3f18:	d505      	bpl.n	3f26 <encode_uint+0x62>
		if (radix == 8) {
    3f1a:	2e08      	cmp	r6, #8
    3f1c:	d115      	bne.n	3f4a <encode_uint+0x86>
			conv->altform_0 = true;
    3f1e:	78ab      	ldrb	r3, [r5, #2]
    3f20:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    3f24:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    3f26:	4648      	mov	r0, r9
    3f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    3f2c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    3f30:	2b70      	cmp	r3, #112	; 0x70
    3f32:	e7d7      	b.n	3ee4 <encode_uint+0x20>
	switch (specifier) {
    3f34:	2608      	movs	r6, #8
    3f36:	e7d8      	b.n	3eea <encode_uint+0x26>
		value /= radix;
    3f38:	4680      	mov	r8, r0
    3f3a:	460f      	mov	r7, r1
    3f3c:	e7d7      	b.n	3eee <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f3e:	f1bb 0f01 	cmp.w	fp, #1
    3f42:	bf0c      	ite	eq
    3f44:	3437      	addeq	r4, #55	; 0x37
    3f46:	3457      	addne	r4, #87	; 0x57
    3f48:	e7db      	b.n	3f02 <encode_uint+0x3e>
		} else if (radix == 16) {
    3f4a:	2e10      	cmp	r6, #16
    3f4c:	d1eb      	bne.n	3f26 <encode_uint+0x62>
			conv->altform_0c = true;
    3f4e:	78ab      	ldrb	r3, [r5, #2]
    3f50:	f043 0310 	orr.w	r3, r3, #16
    3f54:	e7e6      	b.n	3f24 <encode_uint+0x60>
    3f56:	bf00      	nop
    3f58:	000311c1 	.word	0x000311c1

00003f5c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    3f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f60:	468a      	mov	sl, r1
    3f62:	4616      	mov	r6, r2
    3f64:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3f66:	2500      	movs	r5, #0
{
    3f68:	b097      	sub	sp, #92	; 0x5c
    3f6a:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3f6c:	7830      	ldrb	r0, [r6, #0]
    3f6e:	b908      	cbnz	r0, 3f74 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3f70:	4628      	mov	r0, r5
    3f72:	e34a      	b.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
			OUTC(*fp++);
    3f74:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    3f76:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    3f78:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    3f7a:	d007      	beq.n	3f8c <z_cbvprintf_impl+0x30>
			OUTC('%');
    3f7c:	4651      	mov	r1, sl
    3f7e:	9b03      	ldr	r3, [sp, #12]
    3f80:	4798      	blx	r3
    3f82:	2800      	cmp	r0, #0
    3f84:	f2c0 8341 	blt.w	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    3f88:	3501      	adds	r5, #1
		if (bps == NULL) {
    3f8a:	e1f0      	b.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
		} state = {
    3f8c:	2218      	movs	r2, #24
    3f8e:	2100      	movs	r1, #0
    3f90:	a810      	add	r0, sp, #64	; 0x40
    3f92:	f013 fa21 	bl	173d8 <memset>
	if (*sp == '%') {
    3f96:	7873      	ldrb	r3, [r6, #1]
    3f98:	2b25      	cmp	r3, #37	; 0x25
    3f9a:	f000 80a3 	beq.w	40e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe4>
    3f9e:	2300      	movs	r3, #0
    3fa0:	4698      	mov	r8, r3
    3fa2:	469e      	mov	lr, r3
    3fa4:	469c      	mov	ip, r3
    3fa6:	4618      	mov	r0, r3
    3fa8:	1c71      	adds	r1, r6, #1
    3faa:	460f      	mov	r7, r1
		switch (*sp) {
    3fac:	f811 2b01 	ldrb.w	r2, [r1], #1
    3fb0:	2a2b      	cmp	r2, #43	; 0x2b
    3fb2:	f000 80c6 	beq.w	4142 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x142>
    3fb6:	f200 80bd 	bhi.w	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
    3fba:	2a20      	cmp	r2, #32
    3fbc:	f000 80c4 	beq.w	4148 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x148>
    3fc0:	2a23      	cmp	r2, #35	; 0x23
    3fc2:	f000 80c4 	beq.w	414e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14e>
    3fc6:	b12b      	cbz	r3, 3fd4 <z_cbvprintf_impl+0x78>
    3fc8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3fd0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    3fd4:	f1b8 0f00 	cmp.w	r8, #0
    3fd8:	d005      	beq.n	3fe6 <z_cbvprintf_impl+0x8a>
    3fda:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3fde:	f043 0320 	orr.w	r3, r3, #32
    3fe2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    3fe6:	f1be 0f00 	cmp.w	lr, #0
    3fea:	d005      	beq.n	3ff8 <z_cbvprintf_impl+0x9c>
    3fec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3ff0:	f043 0310 	orr.w	r3, r3, #16
    3ff4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    3ff8:	f1bc 0f00 	cmp.w	ip, #0
    3ffc:	d005      	beq.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    3ffe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    4002:	f043 0308 	orr.w	r3, r3, #8
    4006:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    400a:	b128      	cbz	r0, 4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
    400c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    4010:	f043 0304 	orr.w	r3, r3, #4
    4014:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    4018:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    401c:	f003 0144 	and.w	r1, r3, #68	; 0x44
    4020:	2944      	cmp	r1, #68	; 0x44
    4022:	d103      	bne.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
		conv->flag_zero = false;
    4024:	f36f 1386 	bfc	r3, #6, #1
    4028:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    402c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    4030:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    4032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4036:	9709      	str	r7, [sp, #36]	; 0x24
    4038:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    403c:	f040 808c 	bne.w	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
		conv->width_star = true;
    4040:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    4044:	f043 0301 	orr.w	r3, r3, #1
    4048:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    404c:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    404e:	781a      	ldrb	r2, [r3, #0]
    4050:	2a2e      	cmp	r2, #46	; 0x2e
    4052:	bf0c      	ite	eq
    4054:	2101      	moveq	r1, #1
    4056:	2100      	movne	r1, #0
    4058:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    405c:	f361 0241 	bfi	r2, r1, #1, #1
    4060:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    4064:	d10c      	bne.n	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
	++sp;
    4066:	1c5a      	adds	r2, r3, #1
    4068:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    406a:	785a      	ldrb	r2, [r3, #1]
    406c:	2a2a      	cmp	r2, #42	; 0x2a
    406e:	f040 8083 	bne.w	4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>
		conv->prec_star = true;
    4072:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    4076:	3302      	adds	r3, #2
		conv->prec_star = true;
    4078:	f042 0204 	orr.w	r2, r2, #4
    407c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    4080:	781a      	ldrb	r2, [r3, #0]
    4082:	2a6c      	cmp	r2, #108	; 0x6c
    4084:	f000 80a4 	beq.w	41d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1d0>
    4088:	f200 8086 	bhi.w	4198 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x198>
    408c:	2a68      	cmp	r2, #104	; 0x68
    408e:	f000 808c 	beq.w	41aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1aa>
    4092:	2a6a      	cmp	r2, #106	; 0x6a
    4094:	f000 80a5 	beq.w	41e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e2>
    4098:	2a4c      	cmp	r2, #76	; 0x4c
    409a:	f000 80aa 	beq.w	41f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f2>
	conv->specifier = *sp++;
    409e:	461a      	mov	r2, r3
    40a0:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    40a4:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    40a6:	9204      	str	r2, [sp, #16]
    40a8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    40ac:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    40b0:	f200 8117 	bhi.w	42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
    40b4:	2b6d      	cmp	r3, #109	; 0x6d
    40b6:	f200 80a9 	bhi.w	420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>
    40ba:	2b69      	cmp	r3, #105	; 0x69
    40bc:	f200 8111 	bhi.w	42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
    40c0:	2b57      	cmp	r3, #87	; 0x57
    40c2:	f200 80be 	bhi.w	4242 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x242>
    40c6:	2b41      	cmp	r3, #65	; 0x41
    40c8:	d003      	beq.n	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40ca:	3b45      	subs	r3, #69	; 0x45
    40cc:	2b02      	cmp	r3, #2
    40ce:	f200 8108 	bhi.w	42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
		conv->specifier_cat = SPECIFIER_FP;
    40d2:	2204      	movs	r2, #4
    40d4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    40d8:	f362 0302 	bfi	r3, r2, #0, #3
    40dc:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    40e0:	2301      	movs	r3, #1
			break;
    40e2:	e0ca      	b.n	427a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27a>
		conv->specifier = *sp++;
    40e4:	1cb2      	adds	r2, r6, #2
    40e6:	9204      	str	r2, [sp, #16]
    40e8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    40ec:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    40f0:	07d9      	lsls	r1, r3, #31
    40f2:	f140 80fd 	bpl.w	42f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f0>
			width = va_arg(ap, int);
    40f6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    40fa:	f1b8 0f00 	cmp.w	r8, #0
    40fe:	da07      	bge.n	4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
				conv->flag_dash = true;
    4100:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    4104:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    4108:	f042 0204 	orr.w	r2, r2, #4
    410c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    4110:	075a      	lsls	r2, r3, #29
    4112:	f140 80f6 	bpl.w	4302 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x302>
			int arg = va_arg(ap, int);
    4116:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    411a:	f1bb 0f00 	cmp.w	fp, #0
    411e:	f280 80f5 	bge.w	430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
				conv->prec_present = false;
    4122:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    4126:	f36f 0341 	bfc	r3, #1, #1
    412a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    412e:	f04f 3bff 	mov.w	fp, #4294967295
    4132:	e0eb      	b.n	430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
		switch (*sp) {
    4134:	2a2d      	cmp	r2, #45	; 0x2d
    4136:	d00d      	beq.n	4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>
    4138:	2a30      	cmp	r2, #48	; 0x30
    413a:	f47f af44 	bne.w	3fc6 <z_cbvprintf_impl+0x6a>
    413e:	2301      	movs	r3, #1
	} while (loop);
    4140:	e733      	b.n	3faa <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    4142:	f04f 0c01 	mov.w	ip, #1
    4146:	e730      	b.n	3faa <z_cbvprintf_impl+0x4e>
    4148:	f04f 0e01 	mov.w	lr, #1
    414c:	e72d      	b.n	3faa <z_cbvprintf_impl+0x4e>
    414e:	f04f 0801 	mov.w	r8, #1
    4152:	e72a      	b.n	3faa <z_cbvprintf_impl+0x4e>
    4154:	2001      	movs	r0, #1
    4156:	e728      	b.n	3faa <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    4158:	a809      	add	r0, sp, #36	; 0x24
    415a:	f7ff fe9d 	bl	3e98 <extract_decimal>
	if (sp != wp) {
    415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4160:	42bb      	cmp	r3, r7
    4162:	f43f af74 	beq.w	404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
		conv->unsupported |= ((conv->width_value < 0)
    4166:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    416a:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    416c:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    416e:	f360 0241 	bfi	r2, r0, #1, #1
    4172:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    4176:	e76a      	b.n	404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
	size_t prec = extract_decimal(&sp);
    4178:	a809      	add	r0, sp, #36	; 0x24
    417a:	f7ff fe8d 	bl	3e98 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    417e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    4182:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    4184:	f3c3 0240 	ubfx	r2, r3, #1, #1
    4188:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    418c:	f362 0341 	bfi	r3, r2, #1, #1
    4190:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    4194:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4196:	e773      	b.n	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
	switch (*sp) {
    4198:	2a74      	cmp	r2, #116	; 0x74
    419a:	d026      	beq.n	41ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ea>
    419c:	2a7a      	cmp	r2, #122	; 0x7a
    419e:	f47f af7e 	bne.w	409e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9e>
		conv->length_mod = LENGTH_Z;
    41a2:	2106      	movs	r1, #6
    41a4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    41a8:	e00c      	b.n	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
		if (*++sp == 'h') {
    41aa:	785a      	ldrb	r2, [r3, #1]
    41ac:	2a68      	cmp	r2, #104	; 0x68
    41ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    41b2:	d106      	bne.n	41c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c2>
			conv->length_mod = LENGTH_HH;
    41b4:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    41b6:	f361 02c6 	bfi	r2, r1, #3, #4
    41ba:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    41be:	3302      	adds	r3, #2
    41c0:	e76d      	b.n	409e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9e>
			conv->length_mod = LENGTH_H;
    41c2:	2102      	movs	r1, #2
    41c4:	f361 02c6 	bfi	r2, r1, #3, #4
    41c8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    41cc:	3301      	adds	r3, #1
    41ce:	e766      	b.n	409e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9e>
		if (*++sp == 'l') {
    41d0:	785a      	ldrb	r2, [r3, #1]
    41d2:	2a6c      	cmp	r2, #108	; 0x6c
    41d4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    41d8:	d101      	bne.n	41de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1de>
			conv->length_mod = LENGTH_LL;
    41da:	2104      	movs	r1, #4
    41dc:	e7eb      	b.n	41b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b6>
			conv->length_mod = LENGTH_L;
    41de:	2103      	movs	r1, #3
    41e0:	e7f0      	b.n	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
		conv->length_mod = LENGTH_J;
    41e2:	2105      	movs	r1, #5
    41e4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    41e8:	e7ec      	b.n	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
		conv->length_mod = LENGTH_T;
    41ea:	2107      	movs	r1, #7
    41ec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    41f0:	e7e8      	b.n	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
		conv->unsupported = true;
    41f2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    41f6:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    41fa:	f022 0202 	bic.w	r2, r2, #2
    41fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    4202:	f042 0202 	orr.w	r2, r2, #2
    4206:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    420a:	e7df      	b.n	41cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1cc>
	switch (conv->specifier) {
    420c:	3b6e      	subs	r3, #110	; 0x6e
    420e:	b2d9      	uxtb	r1, r3
    4210:	2301      	movs	r3, #1
    4212:	408b      	lsls	r3, r1
    4214:	f240 4182 	movw	r1, #1154	; 0x482
    4218:	420b      	tst	r3, r1
    421a:	d138      	bne.n	428e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28e>
    421c:	f013 0f24 	tst.w	r3, #36	; 0x24
    4220:	d152      	bne.n	42c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c8>
    4222:	07df      	lsls	r7, r3, #31
    4224:	d55d      	bpl.n	42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
		conv->specifier_cat = SPECIFIER_PTR;
    4226:	2103      	movs	r1, #3
    4228:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    422c:	f361 0302 	bfi	r3, r1, #0, #3
    4230:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    4234:	f002 0378 	and.w	r3, r2, #120	; 0x78
    4238:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    423c:	4243      	negs	r3, r0
    423e:	4143      	adcs	r3, r0
    4240:	e01b      	b.n	427a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27a>
    4242:	2001      	movs	r0, #1
	switch (conv->specifier) {
    4244:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    4248:	b2c9      	uxtb	r1, r1
    424a:	fa00 f101 	lsl.w	r1, r0, r1
    424e:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    4252:	f47f af3e 	bne.w	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    4256:	f640 0701 	movw	r7, #2049	; 0x801
    425a:	4239      	tst	r1, r7
    425c:	d11d      	bne.n	429a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29a>
    425e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    4262:	d03e      	beq.n	42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
		conv->specifier_cat = SPECIFIER_SINT;
    4264:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    4268:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    426c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    4270:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    4272:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    4276:	d034      	beq.n	42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
	bool unsupported = false;
    4278:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    427a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    427e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    4282:	430b      	orrs	r3, r1
    4284:	f363 0241 	bfi	r2, r3, #1, #1
    4288:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    428c:	e72e      	b.n	40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
		conv->specifier_cat = SPECIFIER_UINT;
    428e:	2102      	movs	r1, #2
    4290:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    4294:	f361 0302 	bfi	r3, r1, #0, #3
    4298:	e7e8      	b.n	426c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26c>
    429a:	2002      	movs	r0, #2
    429c:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    42a0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    42a4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    42a8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    42aa:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    42ae:	bf02      	ittt	eq
    42b0:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    42b4:	f041 0101 	orreq.w	r1, r1, #1
    42b8:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    42bc:	2b63      	cmp	r3, #99	; 0x63
    42be:	d1db      	bne.n	4278 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x278>
			unsupported = (conv->length_mod != LENGTH_NONE);
    42c0:	1e13      	subs	r3, r2, #0
    42c2:	bf18      	it	ne
    42c4:	2301      	movne	r3, #1
    42c6:	e7d8      	b.n	427a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27a>
		conv->specifier_cat = SPECIFIER_PTR;
    42c8:	2103      	movs	r1, #3
    42ca:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    42ce:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    42d2:	f361 0302 	bfi	r3, r1, #0, #3
    42d6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    42da:	bf14      	ite	ne
    42dc:	2301      	movne	r3, #1
    42de:	2300      	moveq	r3, #0
    42e0:	e7cb      	b.n	427a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27a>
		conv->invalid = true;
    42e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    42e6:	f043 0301 	orr.w	r3, r3, #1
    42ea:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    42ee:	e7c3      	b.n	4278 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x278>
		} else if (conv->width_present) {
    42f0:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    42f4:	2a00      	cmp	r2, #0
		int width = -1;
    42f6:	bfac      	ite	ge
    42f8:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    42fc:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    4300:	e706      	b.n	4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
		} else if (conv->prec_present) {
    4302:	079f      	lsls	r7, r3, #30
    4304:	f57f af13 	bpl.w	412e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12e>
			precision = conv->prec_value;
    4308:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    430c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    430e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    4312:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    4316:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    431a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    431e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    4320:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    4324:	d133      	bne.n	438e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38e>
			switch (length_mod) {
    4326:	1ecb      	subs	r3, r1, #3
    4328:	2b04      	cmp	r3, #4
    432a:	d804      	bhi.n	4336 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x336>
    432c:	e8df f003 	tbb	[pc, r3]
    4330:	21464621 	.word	0x21464621
    4334:	21          	.byte	0x21
    4335:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    4336:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    4338:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    433a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    433e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    4342:	d11c      	bne.n	437e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x37e>
				value->sint = (signed char)value->sint;
    4344:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    4348:	17da      	asrs	r2, r3, #31
    434a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    434e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    4350:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    4354:	f013 0703 	ands.w	r7, r3, #3
    4358:	d050      	beq.n	43fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3fc>
			OUTS(sp, fp);
    435a:	4632      	mov	r2, r6
    435c:	4651      	mov	r1, sl
    435e:	9b04      	ldr	r3, [sp, #16]
    4360:	9803      	ldr	r0, [sp, #12]
    4362:	f01a fde6 	bl	1ef32 <outs>
    4366:	2800      	cmp	r0, #0
    4368:	f2c0 814f 	blt.w	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    436c:	4405      	add	r5, r0
			continue;
    436e:	9e04      	ldr	r6, [sp, #16]
    4370:	e5fc      	b.n	3f6c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4372:	f854 3b04 	ldr.w	r3, [r4], #4
    4376:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    4378:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    437c:	e7e8      	b.n	4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>
			} else if (length_mod == LENGTH_H) {
    437e:	2902      	cmp	r1, #2
    4380:	d1e5      	bne.n	434e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34e>
				value->sint = (short)value->sint;
    4382:	b21a      	sxth	r2, r3
    4384:	f343 33c0 	sbfx	r3, r3, #15, #1
    4388:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    438c:	e7df      	b.n	434e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34e>
		} else if (specifier_cat == SPECIFIER_UINT) {
    438e:	2b02      	cmp	r3, #2
    4390:	d124      	bne.n	43dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3dc>
			switch (length_mod) {
    4392:	1ecb      	subs	r3, r1, #3
    4394:	2b04      	cmp	r3, #4
    4396:	d804      	bhi.n	43a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a2>
    4398:	e8df f003 	tbb	[pc, r3]
    439c:	18101018 	.word	0x18101018
    43a0:	18          	.byte	0x18
    43a1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    43a2:	2901      	cmp	r1, #1
    43a4:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    43a8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    43ac:	d014      	beq.n	43d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3d8>
			} else if (length_mod == LENGTH_H) {
    43ae:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    43b0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    43b4:	d1cc      	bne.n	4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>
				value->uint = (unsigned short)value->uint;
    43b6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    43b8:	9310      	str	r3, [sp, #64]	; 0x40
    43ba:	e7c9      	b.n	4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>
					(uint_value_type)va_arg(ap,
    43bc:	3407      	adds	r4, #7
    43be:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    43c2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    43c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    43ca:	e7c1      	b.n	4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>
					(uint_value_type)va_arg(ap, size_t);
    43cc:	f854 3b04 	ldr.w	r3, [r4], #4
    43d0:	9310      	str	r3, [sp, #64]	; 0x40
    43d2:	2300      	movs	r3, #0
    43d4:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    43d6:	e7bb      	b.n	4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>
				value->uint = (unsigned char)value->uint;
    43d8:	b2db      	uxtb	r3, r3
    43da:	e7cd      	b.n	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>
		} else if (specifier_cat == SPECIFIER_FP) {
    43dc:	2b04      	cmp	r3, #4
    43de:	d108      	bne.n	43f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f2>
					(sint_value_type)va_arg(ap, long long);
    43e0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    43e2:	f024 0407 	bic.w	r4, r4, #7
    43e6:	e9d4 2300 	ldrd	r2, r3, [r4]
    43ea:	3408      	adds	r4, #8
    43ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    43f0:	e7ae      	b.n	4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>
		} else if (specifier_cat == SPECIFIER_PTR) {
    43f2:	2b03      	cmp	r3, #3
    43f4:	d1ac      	bne.n	4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>
			value->ptr = va_arg(ap, void *);
    43f6:	f854 3b04 	ldr.w	r3, [r4], #4
    43fa:	e7dd      	b.n	43b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b8>
		switch (conv->specifier) {
    43fc:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    4400:	2878      	cmp	r0, #120	; 0x78
    4402:	d8b4      	bhi.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
    4404:	2862      	cmp	r0, #98	; 0x62
    4406:	d81d      	bhi.n	4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>
    4408:	2825      	cmp	r0, #37	; 0x25
    440a:	f43f adb7 	beq.w	3f7c <z_cbvprintf_impl+0x20>
    440e:	2858      	cmp	r0, #88	; 0x58
    4410:	d1ad      	bne.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    4412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    4416:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    441a:	9300      	str	r3, [sp, #0]
    441c:	aa12      	add	r2, sp, #72	; 0x48
    441e:	ab0a      	add	r3, sp, #40	; 0x28
    4420:	f7ff fd50 	bl	3ec4 <encode_uint>
			if (precision >= 0) {
    4424:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    4428:	4681      	mov	r9, r0
			if (precision >= 0) {
    442a:	f280 8098 	bge.w	455e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x55e>
		if (bps == NULL) {
    442e:	f1b9 0f00 	cmp.w	r9, #0
    4432:	d09c      	beq.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
		size_t nj_len = (bpe - bps);
    4434:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    4438:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    443c:	2f00      	cmp	r7, #0
    443e:	d050      	beq.n	44e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e2>
			nj_len += 1U;
    4440:	3301      	adds	r3, #1
    4442:	e04e      	b.n	44e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e2>
		switch (conv->specifier) {
    4444:	3863      	subs	r0, #99	; 0x63
    4446:	2815      	cmp	r0, #21
    4448:	d891      	bhi.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
    444a:	a201      	add	r2, pc, #4	; (adr r2, 4450 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x450>)
    444c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    4450:	000044d1 	.word	0x000044d1
    4454:	00004535 	.word	0x00004535
    4458:	0000436f 	.word	0x0000436f
    445c:	0000436f 	.word	0x0000436f
    4460:	0000436f 	.word	0x0000436f
    4464:	0000436f 	.word	0x0000436f
    4468:	00004535 	.word	0x00004535
    446c:	0000436f 	.word	0x0000436f
    4470:	0000436f 	.word	0x0000436f
    4474:	0000436f 	.word	0x0000436f
    4478:	0000436f 	.word	0x0000436f
    447c:	000045bf 	.word	0x000045bf
    4480:	00004559 	.word	0x00004559
    4484:	00004581 	.word	0x00004581
    4488:	0000436f 	.word	0x0000436f
    448c:	0000436f 	.word	0x0000436f
    4490:	000044a9 	.word	0x000044a9
    4494:	0000436f 	.word	0x0000436f
    4498:	00004559 	.word	0x00004559
    449c:	0000436f 	.word	0x0000436f
    44a0:	0000436f 	.word	0x0000436f
    44a4:	00004559 	.word	0x00004559
			if (precision >= 0) {
    44a8:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    44ac:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    44b0:	db0a      	blt.n	44c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c8>
				len = strnlen(bps, precision);
    44b2:	4659      	mov	r1, fp
    44b4:	4648      	mov	r0, r9
    44b6:	f013 f8cb 	bl	17650 <strnlen>
		if (bps == NULL) {
    44ba:	f1b9 0f00 	cmp.w	r9, #0
    44be:	f43f af56 	beq.w	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
			bpe = bps + len;
    44c2:	eb09 0600 	add.w	r6, r9, r0
    44c6:	e076      	b.n	45b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b6>
				len = strlen(bps);
    44c8:	4648      	mov	r0, r9
    44ca:	f013 f85f 	bl	1758c <strlen>
    44ce:	e7f8      	b.n	44c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    44d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    44d2:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    44d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    44d8:	2301      	movs	r3, #1
			bpe = buf + 1;
    44da:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    44de:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    44e2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    44e6:	f011 0210 	ands.w	r2, r1, #16
    44ea:	9206      	str	r2, [sp, #24]
    44ec:	f000 8081 	beq.w	45f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f2>
			nj_len += 2U;
    44f0:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    44f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    44f4:	4413      	add	r3, r2
    44f6:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    44f8:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    44fa:	bf44      	itt	mi
    44fc:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    44fe:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    4500:	f1b8 0f00 	cmp.w	r8, #0
    4504:	f340 808e 	ble.w	4624 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x624>
			width -= (int)nj_len;
    4508:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    450c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    4510:	0758      	lsls	r0, r3, #29
    4512:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    4516:	f100 8085 	bmi.w	4624 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x624>
				if (conv->flag_zero) {
    451a:	0659      	lsls	r1, r3, #25
    451c:	d578      	bpl.n	4610 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x610>
					if (sign != 0) {
    451e:	b13f      	cbz	r7, 4530 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x530>
						OUTC(sign);
    4520:	4651      	mov	r1, sl
    4522:	4638      	mov	r0, r7
    4524:	9b03      	ldr	r3, [sp, #12]
    4526:	4798      	blx	r3
    4528:	2800      	cmp	r0, #0
    452a:	db6e      	blt.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    452c:	465f      	mov	r7, fp
    452e:	3501      	adds	r5, #1
					pad = '0';
    4530:	2330      	movs	r3, #48	; 0x30
    4532:	e06e      	b.n	4612 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x612>
			if (conv->flag_plus) {
    4534:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    4536:	bf5a      	itte	pl
    4538:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    453c:	015f      	lslpl	r7, r3, #5
				sign = '+';
    453e:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    4540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    4544:	2b00      	cmp	r3, #0
    4546:	f6bf af64 	bge.w	4412 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x412>
				value->uint = (uint_value_type)-sint;
    454a:	4252      	negs	r2, r2
    454c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    4550:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    4552:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    4556:	e75c      	b.n	4412 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x412>
		switch (conv->specifier) {
    4558:	2700      	movs	r7, #0
    455a:	e75a      	b.n	4412 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x412>
		char sign = 0;
    455c:	2700      	movs	r7, #0
				conv->flag_zero = false;
    455e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    4562:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4566:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    456a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    456e:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    4570:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    4574:	f67f af5b 	bls.w	442e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42e>
					conv->pad0_value = precision - (int)len;
    4578:	ebab 0303 	sub.w	r3, fp, r3
    457c:	9313      	str	r3, [sp, #76]	; 0x4c
    457e:	e756      	b.n	442e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42e>
			if (value->ptr != NULL) {
    4580:	9810      	ldr	r0, [sp, #64]	; 0x40
    4582:	b380      	cbz	r0, 45e6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5e6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4584:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    4588:	ab0a      	add	r3, sp, #40	; 0x28
    458a:	2100      	movs	r1, #0
    458c:	9600      	str	r6, [sp, #0]
    458e:	aa12      	add	r2, sp, #72	; 0x48
    4590:	f7ff fc98 	bl	3ec4 <encode_uint>
				conv->altform_0c = true;
    4594:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    4598:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    459c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    45a0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    45a4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    45a8:	4681      	mov	r9, r0
				conv->altform_0c = true;
    45aa:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    45ae:	dad5      	bge.n	455c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x55c>
		if (bps == NULL) {
    45b0:	2800      	cmp	r0, #0
    45b2:	f43f aedc 	beq.w	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
		char sign = 0;
    45b6:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    45b8:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    45bc:	e791      	b.n	44e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e2>
				store_count(conv, value->ptr, count);
    45be:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    45c0:	2907      	cmp	r1, #7
    45c2:	f63f aed4 	bhi.w	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
    45c6:	e8df f001 	tbb	[pc, r1]
    45ca:	040c      	.short	0x040c
    45cc:	08080c06 	.word	0x08080c06
    45d0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    45d2:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    45d4:	e6cb      	b.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
		*(short *)dp = (short)count;
    45d6:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    45d8:	e6c9      	b.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
		*(intmax_t *)dp = (intmax_t)count;
    45da:	17ea      	asrs	r2, r5, #31
    45dc:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    45e0:	e6c5      	b.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    45e2:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    45e4:	e6c3      	b.n	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
			bpe = bps + 5;
    45e6:	4e31      	ldr	r6, [pc, #196]	; (46ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6ac>)
		char sign = 0;
    45e8:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    45ea:	2305      	movs	r3, #5
    45ec:	f1a6 0905 	sub.w	r9, r6, #5
    45f0:	e777      	b.n	44e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e2>
		} else if (conv->altform_0) {
    45f2:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    45f4:	bf48      	it	mi
    45f6:	3301      	addmi	r3, #1
    45f8:	e77b      	b.n	44f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4f2>
					OUTC(pad);
    45fa:	4618      	mov	r0, r3
    45fc:	9307      	str	r3, [sp, #28]
    45fe:	4651      	mov	r1, sl
    4600:	9b03      	ldr	r3, [sp, #12]
    4602:	4798      	blx	r3
    4604:	2800      	cmp	r0, #0
    4606:	9b07      	ldr	r3, [sp, #28]
    4608:	da04      	bge.n	4614 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x614>
#undef OUTS
#undef OUTC
}
    460a:	b017      	add	sp, #92	; 0x5c
    460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    4610:	2320      	movs	r3, #32
					pad = '0';
    4612:	46c3      	mov	fp, r8
				while (width-- > 0) {
    4614:	4659      	mov	r1, fp
    4616:	2900      	cmp	r1, #0
    4618:	f10b 3bff 	add.w	fp, fp, #4294967295
    461c:	dced      	bgt.n	45fa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5fa>
    461e:	4445      	add	r5, r8
    4620:	46d8      	mov	r8, fp
    4622:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    4624:	b137      	cbz	r7, 4634 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x634>
			OUTC(sign);
    4626:	4651      	mov	r1, sl
    4628:	4638      	mov	r0, r7
    462a:	9b03      	ldr	r3, [sp, #12]
    462c:	4798      	blx	r3
    462e:	2800      	cmp	r0, #0
    4630:	dbeb      	blt.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    4632:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    4634:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    4638:	06da      	lsls	r2, r3, #27
    463a:	d401      	bmi.n	4640 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x640>
    463c:	071b      	lsls	r3, r3, #28
    463e:	d506      	bpl.n	464e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64e>
				OUTC('0');
    4640:	4651      	mov	r1, sl
    4642:	2030      	movs	r0, #48	; 0x30
    4644:	9b03      	ldr	r3, [sp, #12]
    4646:	4798      	blx	r3
    4648:	2800      	cmp	r0, #0
    464a:	dbde      	blt.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    464c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    464e:	9b06      	ldr	r3, [sp, #24]
    4650:	b13b      	cbz	r3, 4662 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x662>
				OUTC(conv->specifier);
    4652:	4651      	mov	r1, sl
    4654:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    4658:	9b03      	ldr	r3, [sp, #12]
    465a:	4798      	blx	r3
    465c:	2800      	cmp	r0, #0
    465e:	dbd4      	blt.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    4660:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    4662:	9f05      	ldr	r7, [sp, #20]
    4664:	442f      	add	r7, r5
    4666:	e006      	b.n	4676 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x676>
				OUTC('0');
    4668:	4651      	mov	r1, sl
    466a:	2030      	movs	r0, #48	; 0x30
    466c:	9b03      	ldr	r3, [sp, #12]
    466e:	4798      	blx	r3
    4670:	2800      	cmp	r0, #0
    4672:	dbca      	blt.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    4674:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    4676:	1b7b      	subs	r3, r7, r5
    4678:	2b00      	cmp	r3, #0
    467a:	dcf5      	bgt.n	4668 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x668>
			OUTS(bps, bpe);
    467c:	4633      	mov	r3, r6
    467e:	464a      	mov	r2, r9
    4680:	4651      	mov	r1, sl
    4682:	9803      	ldr	r0, [sp, #12]
    4684:	f01a fc55 	bl	1ef32 <outs>
    4688:	2800      	cmp	r0, #0
    468a:	dbbe      	blt.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    468c:	4405      	add	r5, r0
		while (width > 0) {
    468e:	44a8      	add	r8, r5
    4690:	eba8 0305 	sub.w	r3, r8, r5
    4694:	2b00      	cmp	r3, #0
    4696:	f77f ae6a 	ble.w	436e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36e>
			OUTC(' ');
    469a:	4651      	mov	r1, sl
    469c:	2020      	movs	r0, #32
    469e:	9b03      	ldr	r3, [sp, #12]
    46a0:	4798      	blx	r3
    46a2:	2800      	cmp	r0, #0
    46a4:	dbb1      	blt.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    46a6:	3501      	adds	r5, #1
			--width;
    46a8:	e7f2      	b.n	4690 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x690>
    46aa:	bf00      	nop
    46ac:	000323db 	.word	0x000323db

000046b0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    46b0:	4604      	mov	r4, r0
    46b2:	b508      	push	{r3, lr}
	__asm__ volatile(
    46b4:	f04f 0220 	mov.w	r2, #32
    46b8:	f3ef 8311 	mrs	r3, BASEPRI
    46bc:	f382 8812 	msr	BASEPRI_MAX, r2
    46c0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    46c4:	f009 fd8e 	bl	e1e4 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    46c8:	4620      	mov	r0, r4
    46ca:	f002 fa1d 	bl	6b08 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    46ce:	4803      	ldr	r0, [pc, #12]	; (46dc <sys_reboot+0x2c>)
    46d0:	f01a f877 	bl	1e7c2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    46d4:	f001 fd1e 	bl	6114 <arch_cpu_idle>
    46d8:	e7fc      	b.n	46d4 <sys_reboot+0x24>
    46da:	bf00      	nop
    46dc:	000323dc 	.word	0x000323dc

000046e0 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    46e0:	4b05      	ldr	r3, [pc, #20]	; (46f8 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    46e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    46e6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    46ea:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    46ee:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    46f2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    46f6:	4770      	bx	lr
    46f8:	50842500 	.word	0x50842500

000046fc <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
    46fc:	b510      	push	{r4, lr}
    46fe:	f04f 0320 	mov.w	r3, #32
    4702:	f3ef 8411 	mrs	r4, BASEPRI
    4706:	f383 8812 	msr	BASEPRI_MAX, r3
    470a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    470e:	2201      	movs	r2, #1
    4710:	4b0c      	ldr	r3, [pc, #48]	; (4744 <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    4712:	490d      	ldr	r1, [pc, #52]	; (4748 <nordicsemi_nrf53_init+0x4c>)
    4714:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    4718:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    471a:	2000      	movs	r0, #0
    471c:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    4720:	f7ff ffde 	bl	46e0 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    4724:	4610      	mov	r0, r2
    4726:	f7ff ffdb 	bl	46e0 <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    472a:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    472e:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    4732:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    4736:	f384 8811 	msr	BASEPRI, r4
    473a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    473e:	2000      	movs	r0, #0
    4740:	bd10      	pop	{r4, pc}
    4742:	bf00      	nop
    4744:	50001000 	.word	0x50001000
    4748:	50004000 	.word	0x50004000

0000474c <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    474c:	2305      	movs	r3, #5
{
    474e:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    4750:	4d14      	ldr	r5, [pc, #80]	; (47a4 <z_arm_on_enter_cpu_idle+0x58>)
    4752:	4e15      	ldr	r6, [pc, #84]	; (47a8 <z_arm_on_enter_cpu_idle+0x5c>)
    4754:	782c      	ldrb	r4, [r5, #0]
    4756:	3401      	adds	r4, #1
    4758:	fbb4 f3f3 	udiv	r3, r4, r3
    475c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4760:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    4762:	f01e f97a 	bl	22a5a <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    4766:	4a11      	ldr	r2, [pc, #68]	; (47ac <z_arm_on_enter_cpu_idle+0x60>)
    4768:	7813      	ldrb	r3, [r2, #0]
    476a:	b123      	cbz	r3, 4776 <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    476c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    4770:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    4772:	2807      	cmp	r0, #7
    4774:	d914      	bls.n	47a0 <z_arm_on_enter_cpu_idle+0x54>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4776:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    477a:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    477e:	b141      	cbz	r1, 4792 <z_arm_on_enter_cpu_idle+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4780:	2100      	movs	r1, #0
    4782:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4786:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    478a:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    478c:	b90c      	cbnz	r4, 4792 <z_arm_on_enter_cpu_idle+0x46>
			timestamps_filled = true;
    478e:	2301      	movs	r3, #1
    4790:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    4792:	782c      	ldrb	r4, [r5, #0]
    4794:	f01e f961 	bl	22a5a <sys_clock_cycle_get_32>
    4798:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    479c:	2001      	movs	r0, #1
}
    479e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    47a0:	2000      	movs	r0, #0
    47a2:	e7fc      	b.n	479e <z_arm_on_enter_cpu_idle+0x52>
    47a4:	2000541d 	.word	0x2000541d
    47a8:	20002a38 	.word	0x20002a38
    47ac:	2000541c 	.word	0x2000541c

000047b0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    47b0:	b148      	cbz	r0, 47c6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    47b2:	4b05      	ldr	r3, [pc, #20]	; (47c8 <arch_busy_wait+0x18>)
    47b4:	4a05      	ldr	r2, [pc, #20]	; (47cc <arch_busy_wait+0x1c>)
    47b6:	681b      	ldr	r3, [r3, #0]
    47b8:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    47bc:	4358      	muls	r0, r3
    47be:	4b04      	ldr	r3, [pc, #16]	; (47d0 <arch_busy_wait+0x20>)
    47c0:	f043 0301 	orr.w	r3, r3, #1
    47c4:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    47c6:	4770      	bx	lr
    47c8:	200009dc 	.word	0x200009dc
    47cc:	000f4240 	.word	0x000f4240
    47d0:	00024dc0 	.word	0x00024dc0

000047d4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    47d4:	2806      	cmp	r0, #6
    47d6:	d107      	bne.n	47e8 <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    47d8:	2201      	movs	r2, #1
    47da:	4b04      	ldr	r3, [pc, #16]	; (47ec <pm_state_set+0x18>)
    47dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    47e0:	f3bf 8f4f 	dsb	sy
        __WFE();
    47e4:	bf20      	wfe
    while (true)
    47e6:	e7fd      	b.n	47e4 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    47e8:	4770      	bx	lr
    47ea:	bf00      	nop
    47ec:	50004000 	.word	0x50004000

000047f0 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(void)
{
    47f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f2:	b083      	sub	sp, #12
    47f4:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    47f6:	1d38      	adds	r0, r7, #4
    47f8:	f00f fd48 	bl	1428c <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    47fc:	4b27      	ldr	r3, [pc, #156]	; (489c <sync_rtc_setup+0xac>)
    47fe:	4298      	cmp	r0, r3
    4800:	d149      	bne.n	4896 <sync_rtc_setup+0xa6>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    4802:	f009 fc87 	bl	e114 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    4806:	1e04      	subs	r4, r0, #0
    4808:	da13      	bge.n	4832 <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    480a:	7938      	ldrb	r0, [r7, #4]
    480c:	f00f fd44 	bl	14298 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    4810:	466d      	mov	r5, sp
    4812:	b088      	sub	sp, #32
    4814:	466a      	mov	r2, sp
    4816:	4b22      	ldr	r3, [pc, #136]	; (48a0 <sync_rtc_setup+0xb0>)
    4818:	e9c2 3405 	strd	r3, r4, [r2, #20]
    481c:	2303      	movs	r3, #3
    481e:	f842 3f10 	str.w	r3, [r2, #16]!
    4822:	2300      	movs	r3, #0
    4824:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4828:	481e      	ldr	r0, [pc, #120]	; (48a4 <sync_rtc_setup+0xb4>)
    482a:	f000 fb2b 	bl	4e84 <z_impl_z_log_msg_static_create>
    482e:	46ad      	mov	sp, r5
	}

	return rv;
    4830:	e02d      	b.n	488e <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    4832:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    4836:	4d1c      	ldr	r5, [pc, #112]	; (48a8 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    4838:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    483a:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    483c:	80fb      	strh	r3, [r7, #6]
    483e:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	b914      	cbnz	r4, 484a <sync_rtc_setup+0x5a>
		return -ENOSYS;
    4844:	f06f 0457 	mvn.w	r4, #87	; 0x57
    4848:	e7e2      	b.n	4810 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    484a:	2108      	movs	r1, #8
    484c:	4628      	mov	r0, r5
    484e:	4a17      	ldr	r2, [pc, #92]	; (48ac <sync_rtc_setup+0xbc>)
    4850:	47a0      	blx	r4
	if (err < 0) {
    4852:	1e04      	subs	r4, r0, #0
    4854:	dbdc      	blt.n	4810 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    4856:	6933      	ldr	r3, [r6, #16]
    4858:	2b00      	cmp	r3, #0
    485a:	d0f3      	beq.n	4844 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    485c:	2201      	movs	r2, #1
    485e:	2108      	movs	r1, #8
    4860:	4628      	mov	r0, r5
    4862:	4798      	blx	r3
	if (rv < 0) {
    4864:	1e04      	subs	r4, r0, #0
    4866:	dbd3      	blt.n	4810 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    4868:	2301      	movs	r3, #1
    486a:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    486c:	4a10      	ldr	r2, [pc, #64]	; (48b0 <sync_rtc_setup+0xc0>)
    486e:	40ab      	lsls	r3, r5
    4870:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    4874:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    4876:	79fe      	ldrb	r6, [r7, #7]
    4878:	f01e f8e4 	bl	22a44 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    487c:	4b0d      	ldr	r3, [pc, #52]	; (48b4 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    487e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    4882:	00b6      	lsls	r6, r6, #2
    4884:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    4888:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    488a:	2c00      	cmp	r4, #0
    488c:	d1c0      	bne.n	4810 <sync_rtc_setup+0x20>
}
    488e:	4620      	mov	r0, r4
    4890:	370c      	adds	r7, #12
    4892:	46bd      	mov	sp, r7
    4894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    4896:	f06f 0412 	mvn.w	r4, #18
    489a:	e7b9      	b.n	4810 <sync_rtc_setup+0x20>
    489c:	0bad0000 	.word	0x0bad0000
    48a0:	00032409 	.word	0x00032409
    48a4:	00024d88 	.word	0x00024d88
    48a8:	000249a0 	.word	0x000249a0
    48ac:	000048fd 	.word	0x000048fd
    48b0:	50017000 	.word	0x50017000
    48b4:	5002a180 	.word	0x5002a180

000048b8 <rtc_cb>:
{
    48b8:	b538      	push	{r3, r4, r5, lr}
    48ba:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    48bc:	f3c4 2507 	ubfx	r5, r4, #8, #8
    48c0:	4628      	mov	r0, r5
    48c2:	f009 fa99 	bl	ddf8 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    48c6:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    48c8:	4b0a      	ldr	r3, [pc, #40]	; (48f4 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    48ca:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    48cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    48d0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    48d4:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    48d6:	2301      	movs	r3, #1
    48d8:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    48da:	4a07      	ldr	r2, [pc, #28]	; (48f8 <rtc_cb+0x40>)
    48dc:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    48de:	4628      	mov	r0, r5
    48e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    48e4:	f009 fc34 	bl	e150 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    48e8:	4620      	mov	r0, r4
}
    48ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    48ee:	f00f bcd3 	b.w	14298 <nrfx_dppi_channel_free>
    48f2:	bf00      	nop
    48f4:	5002a080 	.word	0x5002a080
    48f8:	50017000 	.word	0x50017000

000048fc <mbox_callback>:
{
    48fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    48fe:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    4900:	6883      	ldr	r3, [r0, #8]
    4902:	691b      	ldr	r3, [r3, #16]
    4904:	b10b      	cbz	r3, 490a <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    4906:	2200      	movs	r2, #0
    4908:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    490a:	f3c4 2607 	ubfx	r6, r4, #8, #8
    490e:	4630      	mov	r0, r6
    4910:	f009 fa7a 	bl	de08 <z_nrf_rtc_timer_compare_read>
    4914:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    4916:	4630      	mov	r0, r6
    4918:	f01e f894 	bl	22a44 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    491c:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    491e:	4b10      	ldr	r3, [pc, #64]	; (4960 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    4920:	0e22      	lsrs	r2, r4, #24
    4922:	0092      	lsls	r2, r2, #2
    4924:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    4928:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    492a:	4630      	mov	r0, r6
    492c:	f009 fa64 	bl	ddf8 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    4930:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    4932:	4b0c      	ldr	r3, [pc, #48]	; (4964 <mbox_callback+0x68>)
    4934:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    4938:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    493a:	b2e2      	uxtb	r2, r4
    493c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    4940:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    4942:	4b09      	ldr	r3, [pc, #36]	; (4968 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    4944:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    4948:	f105 0232 	add.w	r2, r5, #50	; 0x32
    494c:	9300      	str	r3, [sp, #0]
    494e:	4630      	mov	r0, r6
    4950:	463b      	mov	r3, r7
    4952:	9401      	str	r4, [sp, #4]
    4954:	0052      	lsls	r2, r2, #1
    4956:	f01e f87e 	bl	22a56 <z_nrf_rtc_timer_set>
}
    495a:	b003      	add	sp, #12
    495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    495e:	bf00      	nop
    4960:	5002a180 	.word	0x5002a180
    4964:	5002a080 	.word	0x5002a080
    4968:	000048b9 	.word	0x000048b9

0000496c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    496c:	f00f bb0c 	b.w	13f88 <SystemInit>

00004970 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    4970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4974:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    4976:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    4978:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    497c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 49d0 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    4980:	b914      	cbnz	r4, 4988 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    4982:	4638      	mov	r0, r7
    4984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    4988:	fa94 f5a4 	rbit	r5, r4
    498c:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    4990:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    4994:	012e      	lsls	r6, r5, #4
    4996:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    499a:	ea6f 0a03 	mvn.w	sl, r3
    499e:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    49a2:	7b2b      	ldrb	r3, [r5, #12]
    49a4:	2b00      	cmp	r3, #0
    49a6:	d0eb      	beq.n	4980 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    49a8:	f858 3006 	ldr.w	r3, [r8, r6]
    49ac:	691b      	ldr	r3, [r3, #16]
    49ae:	b94b      	cbnz	r3, 49c4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    49b0:	4446      	add	r6, r8
			log_backend_enable(backend,
    49b2:	6873      	ldr	r3, [r6, #4]
    49b4:	2204      	movs	r2, #4
    49b6:	4628      	mov	r0, r5
    49b8:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    49ba:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    49be:	f000 fa4d 	bl	4e5c <log_backend_enable>
    49c2:	e7dd      	b.n	4980 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    49c4:	4628      	mov	r0, r5
    49c6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    49c8:	2800      	cmp	r0, #0
    49ca:	d1d9      	bne.n	4980 <activate_foreach_backend+0x10>
    49cc:	e7f0      	b.n	49b0 <activate_foreach_backend+0x40>
    49ce:	bf00      	nop
    49d0:	00024da0 	.word	0x00024da0

000049d4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    49d4:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    49d6:	2200      	movs	r2, #0
{
    49d8:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    49da:	490f      	ldr	r1, [pc, #60]	; (4a18 <enable_logger+0x44>)
    49dc:	480f      	ldr	r0, [pc, #60]	; (4a1c <enable_logger+0x48>)
    49de:	f01f fd97 	bl	24510 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    49e2:	2200      	movs	r2, #0
    49e4:	2300      	movs	r3, #0
    49e6:	2400      	movs	r4, #0
    49e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    49ec:	230e      	movs	r3, #14
    49ee:	4d0c      	ldr	r5, [pc, #48]	; (4a20 <enable_logger+0x4c>)
    49f0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    49f4:	f44f 7240 	mov.w	r2, #768	; 0x300
    49f8:	4628      	mov	r0, r5
    49fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    49fe:	4b09      	ldr	r3, [pc, #36]	; (4a24 <enable_logger+0x50>)
    4a00:	4909      	ldr	r1, [pc, #36]	; (4a28 <enable_logger+0x54>)
    4a02:	9400      	str	r4, [sp, #0]
    4a04:	f010 fd60 	bl	154c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    4a08:	4908      	ldr	r1, [pc, #32]	; (4a2c <enable_logger+0x58>)
    4a0a:	4628      	mov	r0, r5
    4a0c:	f01f fa12 	bl	23e34 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    4a10:	4620      	mov	r0, r4
    4a12:	b009      	add	sp, #36	; 0x24
    4a14:	bd30      	pop	{r4, r5, pc}
    4a16:	bf00      	nop
    4a18:	00004a31 	.word	0x00004a31
    4a1c:	20001fc0 	.word	0x20001fc0
    4a20:	20001738 	.word	0x20001738
    4a24:	00004d09 	.word	0x00004d09
    4a28:	20008750 	.word	0x20008750
    4a2c:	0003243a 	.word	0x0003243a

00004a30 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4a30:	4801      	ldr	r0, [pc, #4]	; (4a38 <log_process_thread_timer_expiry_fn+0x8>)
    4a32:	f010 bf89 	b.w	15948 <z_impl_k_sem_give>
    4a36:	bf00      	nop
    4a38:	20001334 	.word	0x20001334

00004a3c <z_log_init>:
{
    4a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a40:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    4a42:	481f      	ldr	r0, [pc, #124]	; (4ac0 <z_log_init+0x84>)
{
    4a44:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    4a46:	f01a fcfc 	bl	1f442 <atomic_inc>
    4a4a:	4606      	mov	r6, r0
    4a4c:	2800      	cmp	r0, #0
    4a4e:	d030      	beq.n	4ab2 <z_log_init+0x76>
	uint32_t mask = 0;
    4a50:	2500      	movs	r5, #0
}
    4a52:	4628      	mov	r0, r5
    4a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    4a58:	7b23      	ldrb	r3, [r4, #12]
    4a5a:	b173      	cbz	r3, 4a7a <z_log_init+0x3e>
	if (backend->api->init) {
    4a5c:	6823      	ldr	r3, [r4, #0]
    4a5e:	68db      	ldr	r3, [r3, #12]
    4a60:	b10b      	cbz	r3, 4a66 <z_log_init+0x2a>
		backend->api->init(backend);
    4a62:	4620      	mov	r0, r4
    4a64:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    4a66:	6823      	ldr	r3, [r4, #0]
    4a68:	691b      	ldr	r3, [r3, #16]
    4a6a:	b9d3      	cbnz	r3, 4aa2 <z_log_init+0x66>
				log_backend_enable(backend,
    4a6c:	6863      	ldr	r3, [r4, #4]
    4a6e:	2204      	movs	r2, #4
    4a70:	4620      	mov	r0, r4
    4a72:	6819      	ldr	r1, [r3, #0]
    4a74:	f000 f9f2 	bl	4e5c <log_backend_enable>
			i++;
    4a78:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4a7a:	3410      	adds	r4, #16
    4a7c:	454c      	cmp	r4, r9
    4a7e:	d3eb      	bcc.n	4a58 <z_log_init+0x1c>
	if (blocking) {
    4a80:	f1b8 0f00 	cmp.w	r8, #0
    4a84:	d0e5      	beq.n	4a52 <z_log_init+0x16>
		while (mask) {
    4a86:	2d00      	cmp	r5, #0
    4a88:	d0e2      	beq.n	4a50 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    4a8a:	4628      	mov	r0, r5
    4a8c:	f7ff ff70 	bl	4970 <activate_foreach_backend>
    4a90:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    4a92:	2f00      	cmp	r7, #0
    4a94:	d0f7      	beq.n	4a86 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    4a96:	2100      	movs	r1, #0
    4a98:	f44f 70a4 	mov.w	r0, #328	; 0x148
    4a9c:	f011 fc46 	bl	1632c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4aa0:	e7f1      	b.n	4a86 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    4aa2:	4620      	mov	r0, r4
    4aa4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    4aa6:	2800      	cmp	r0, #0
    4aa8:	d0e0      	beq.n	4a6c <z_log_init+0x30>
				mask |= BIT(i);
    4aaa:	fa0a f306 	lsl.w	r3, sl, r6
    4aae:	431d      	orrs	r5, r3
    4ab0:	e7e2      	b.n	4a78 <z_log_init+0x3c>
	uint32_t mask = 0;
    4ab2:	4605      	mov	r5, r0
				mask |= BIT(i);
    4ab4:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4ab8:	4c02      	ldr	r4, [pc, #8]	; (4ac4 <z_log_init+0x88>)
    4aba:	f8df 900c 	ldr.w	r9, [pc, #12]	; 4ac8 <z_log_init+0x8c>
    4abe:	e7dd      	b.n	4a7c <z_log_init+0x40>
    4ac0:	20002a5c 	.word	0x20002a5c
    4ac4:	00024da0 	.word	0x00024da0
    4ac8:	00024db0 	.word	0x00024db0

00004acc <log_format_func_t_get>:
}
    4acc:	4b01      	ldr	r3, [pc, #4]	; (4ad4 <log_format_func_t_get+0x8>)
    4ace:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4ad2:	4770      	bx	lr
    4ad4:	00024f78 	.word	0x00024f78

00004ad8 <log_set_timestamp_func>:
{
    4ad8:	b508      	push	{r3, lr}
    4ada:	4603      	mov	r3, r0
    4adc:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    4ade:	b12b      	cbz	r3, 4aec <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    4ae0:	4a04      	ldr	r2, [pc, #16]	; (4af4 <log_set_timestamp_func+0x1c>)
    4ae2:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    4ae4:	f000 fc6e 	bl	53c4 <log_output_timestamp_freq_set>
	return 0;
    4ae8:	2000      	movs	r0, #0
}
    4aea:	bd08      	pop	{r3, pc}
		return -EINVAL;
    4aec:	f06f 0015 	mvn.w	r0, #21
    4af0:	e7fb      	b.n	4aea <log_set_timestamp_func+0x12>
    4af2:	bf00      	nop
    4af4:	2000089c 	.word	0x2000089c

00004af8 <z_log_notify_backend_enabled>:
{
    4af8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    4afa:	4c04      	ldr	r4, [pc, #16]	; (4b0c <z_log_notify_backend_enabled+0x14>)
    4afc:	7823      	ldrb	r3, [r4, #0]
    4afe:	b913      	cbnz	r3, 4b06 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    4b00:	4803      	ldr	r0, [pc, #12]	; (4b10 <z_log_notify_backend_enabled+0x18>)
    4b02:	f010 ff21 	bl	15948 <z_impl_k_sem_give>
	backend_attached = true;
    4b06:	2301      	movs	r3, #1
    4b08:	7023      	strb	r3, [r4, #0]
}
    4b0a:	bd10      	pop	{r4, pc}
    4b0c:	2000541e 	.word	0x2000541e
    4b10:	20001334 	.word	0x20001334

00004b14 <z_log_dropped>:
{
    4b14:	b510      	push	{r4, lr}
    4b16:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    4b18:	4806      	ldr	r0, [pc, #24]	; (4b34 <z_log_dropped+0x20>)
    4b1a:	f01a fc92 	bl	1f442 <atomic_inc>
	if (buffered) {
    4b1e:	b13c      	cbz	r4, 4b30 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4b20:	4b05      	ldr	r3, [pc, #20]	; (4b38 <z_log_dropped+0x24>)
    4b22:	e8d3 1fef 	ldaex	r1, [r3]
    4b26:	3901      	subs	r1, #1
    4b28:	e8c3 1fe2 	stlex	r2, r1, [r3]
    4b2c:	2a00      	cmp	r2, #0
    4b2e:	d1f8      	bne.n	4b22 <z_log_dropped+0xe>
}
    4b30:	bd10      	pop	{r4, pc}
    4b32:	bf00      	nop
    4b34:	20002a54 	.word	0x20002a54
    4b38:	20002a58 	.word	0x20002a58

00004b3c <z_log_dropped_read_and_clear>:
}
    4b3c:	2000      	movs	r0, #0
    4b3e:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4b40:	4b03      	ldr	r3, [pc, #12]	; (4b50 <z_log_dropped_read_and_clear+0x14>)
    4b42:	e8d3 0fef 	ldaex	r0, [r3]
    4b46:	e8c3 1fe2 	stlex	r2, r1, [r3]
    4b4a:	2a00      	cmp	r2, #0
    4b4c:	d1f9      	bne.n	4b42 <z_log_dropped_read_and_clear+0x6>
    4b4e:	4770      	bx	lr
    4b50:	20002a54 	.word	0x20002a54

00004b54 <dropped_notify>:
{
    4b54:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    4b56:	f7ff fff1 	bl	4b3c <z_log_dropped_read_and_clear>
    4b5a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4b5c:	4c07      	ldr	r4, [pc, #28]	; (4b7c <dropped_notify+0x28>)
    4b5e:	4e08      	ldr	r6, [pc, #32]	; (4b80 <dropped_notify+0x2c>)
    4b60:	42b4      	cmp	r4, r6
    4b62:	d300      	bcc.n	4b66 <dropped_notify+0x12>
}
    4b64:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    4b66:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    4b68:	795b      	ldrb	r3, [r3, #5]
    4b6a:	b12b      	cbz	r3, 4b78 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    4b6c:	6823      	ldr	r3, [r4, #0]
    4b6e:	685b      	ldr	r3, [r3, #4]
    4b70:	b113      	cbz	r3, 4b78 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    4b72:	4629      	mov	r1, r5
    4b74:	4620      	mov	r0, r4
    4b76:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4b78:	3410      	adds	r4, #16
    4b7a:	e7f1      	b.n	4b60 <dropped_notify+0xc>
    4b7c:	00024da0 	.word	0x00024da0
    4b80:	00024db0 	.word	0x00024db0

00004b84 <z_log_msg_init>:
{
    4b84:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    4b86:	4c04      	ldr	r4, [pc, #16]	; (4b98 <z_log_msg_init+0x14>)
    4b88:	4904      	ldr	r1, [pc, #16]	; (4b9c <z_log_msg_init+0x18>)
    4b8a:	4620      	mov	r0, r4
    4b8c:	f01a fae4 	bl	1f158 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    4b90:	4b03      	ldr	r3, [pc, #12]	; (4ba0 <z_log_msg_init+0x1c>)
    4b92:	601c      	str	r4, [r3, #0]
}
    4b94:	bd10      	pop	{r4, pc}
    4b96:	bf00      	nop
    4b98:	2000113c 	.word	0x2000113c
    4b9c:	00024f64 	.word	0x00024f64
    4ba0:	20002a4c 	.word	0x20002a4c

00004ba4 <log_core_init>:
{
    4ba4:	b508      	push	{r3, lr}
	panic_mode = false;
    4ba6:	2300      	movs	r3, #0
    4ba8:	4a07      	ldr	r2, [pc, #28]	; (4bc8 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    4baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    4bae:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    4bb0:	4a06      	ldr	r2, [pc, #24]	; (4bcc <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    4bb2:	4807      	ldr	r0, [pc, #28]	; (4bd0 <log_core_init+0x2c>)
	dropped_cnt = 0;
    4bb4:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    4bb6:	4a07      	ldr	r2, [pc, #28]	; (4bd4 <log_core_init+0x30>)
    4bb8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    4bba:	f7ff ff8d 	bl	4ad8 <log_set_timestamp_func>
}
    4bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    4bc2:	f7ff bfdf 	b.w	4b84 <z_log_msg_init>
    4bc6:	bf00      	nop
    4bc8:	2000541f 	.word	0x2000541f
    4bcc:	20002a54 	.word	0x20002a54
    4bd0:	0001f43f 	.word	0x0001f43f
    4bd4:	20002a58 	.word	0x20002a58

00004bd8 <z_log_msg_alloc>:
{
    4bd8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    4bda:	2200      	movs	r2, #0
    4bdc:	2300      	movs	r3, #0
    4bde:	4801      	ldr	r0, [pc, #4]	; (4be4 <z_log_msg_alloc+0xc>)
    4be0:	f01a badb 	b.w	1f19a <mpsc_pbuf_alloc>
    4be4:	2000113c 	.word	0x2000113c

00004be8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    4be8:	4801      	ldr	r0, [pc, #4]	; (4bf0 <z_log_msg_local_claim+0x8>)
    4bea:	f01a bb74 	b.w	1f2d6 <mpsc_pbuf_claim>
    4bee:	bf00      	nop
    4bf0:	2000113c 	.word	0x2000113c

00004bf4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    4bf4:	4b02      	ldr	r3, [pc, #8]	; (4c00 <z_log_msg_free+0xc>)
{
    4bf6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    4bf8:	6818      	ldr	r0, [r3, #0]
    4bfa:	f01a bbbe 	b.w	1f37a <mpsc_pbuf_free>
    4bfe:	bf00      	nop
    4c00:	20002a4c 	.word	0x20002a4c

00004c04 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    4c04:	4801      	ldr	r0, [pc, #4]	; (4c0c <z_log_msg_pending+0x8>)
    4c06:	f01a bbf4 	b.w	1f3f2 <mpsc_pbuf_is_pending>
    4c0a:	bf00      	nop
    4c0c:	2000113c 	.word	0x2000113c

00004c10 <z_impl_log_process>:
{
    4c10:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    4c12:	4b26      	ldr	r3, [pc, #152]	; (4cac <z_impl_log_process+0x9c>)
    4c14:	7818      	ldrb	r0, [r3, #0]
    4c16:	2800      	cmp	r0, #0
    4c18:	d047      	beq.n	4caa <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    4c1a:	f7ff ffe5 	bl	4be8 <z_log_msg_local_claim>
	if (msg) {
    4c1e:	4605      	mov	r5, r0
    4c20:	b170      	cbz	r0, 4c40 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4c22:	4b23      	ldr	r3, [pc, #140]	; (4cb0 <z_impl_log_process+0xa0>)
    4c24:	e8d3 1fef 	ldaex	r1, [r3]
    4c28:	3901      	subs	r1, #1
    4c2a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    4c2e:	2a00      	cmp	r2, #0
    4c30:	d1f8      	bne.n	4c24 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4c32:	4c20      	ldr	r4, [pc, #128]	; (4cb4 <z_impl_log_process+0xa4>)
    4c34:	4e20      	ldr	r6, [pc, #128]	; (4cb8 <z_impl_log_process+0xa8>)
    4c36:	42b4      	cmp	r4, r6
    4c38:	d32d      	bcc.n	4c96 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    4c3a:	4628      	mov	r0, r5
    4c3c:	f7ff ffda 	bl	4bf4 <z_log_msg_free>
	return dropped_cnt > 0;
    4c40:	4b1e      	ldr	r3, [pc, #120]	; (4cbc <z_impl_log_process+0xac>)
    4c42:	4c1f      	ldr	r4, [pc, #124]	; (4cc0 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	2b00      	cmp	r3, #0
    4c48:	dd19      	ble.n	4c7e <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    4c4a:	f01f fc39 	bl	244c0 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4c52:	fba0 0302 	umull	r0, r3, r0, r2
    4c56:	fb02 3101 	mla	r1, r2, r1, r3
    4c5a:	0bc3      	lsrs	r3, r0, #15
    4c5c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    4c60:	e9d4 2000 	ldrd	r2, r0, [r4]
    4c64:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    4c66:	f240 32e9 	movw	r2, #1001	; 0x3e9
    4c6a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    4c6e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    4c72:	4293      	cmp	r3, r2
    4c74:	f171 0100 	sbcs.w	r1, r1, #0
    4c78:	d301      	bcc.n	4c7e <z_impl_log_process+0x6e>
				dropped_notify();
    4c7a:	f7ff ff6b 	bl	4b54 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    4c7e:	e9d4 3200 	ldrd	r3, r2, [r4]
    4c82:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    4c86:	f142 0200 	adc.w	r2, r2, #0
    4c8a:	e9c4 3200 	strd	r3, r2, [r4]
}
    4c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    4c92:	f7ff bfb7 	b.w	4c04 <z_log_msg_pending>
	return backend->cb->active;
    4c96:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    4c98:	795b      	ldrb	r3, [r3, #5]
    4c9a:	b123      	cbz	r3, 4ca6 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    4c9c:	6823      	ldr	r3, [r4, #0]
    4c9e:	4629      	mov	r1, r5
    4ca0:	4620      	mov	r0, r4
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4ca6:	3410      	adds	r4, #16
    4ca8:	e7c5      	b.n	4c36 <z_impl_log_process+0x26>
}
    4caa:	bd70      	pop	{r4, r5, r6, pc}
    4cac:	2000541e 	.word	0x2000541e
    4cb0:	20002a58 	.word	0x20002a58
    4cb4:	00024da0 	.word	0x00024da0
    4cb8:	00024db0 	.word	0x00024db0
    4cbc:	20002a54 	.word	0x20002a54
    4cc0:	20001fb8 	.word	0x20001fb8

00004cc4 <z_impl_log_panic>:
{
    4cc4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    4cc6:	4d0d      	ldr	r5, [pc, #52]	; (4cfc <z_impl_log_panic+0x38>)
    4cc8:	7829      	ldrb	r1, [r5, #0]
    4cca:	b961      	cbnz	r1, 4ce6 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    4ccc:	2001      	movs	r0, #1
    4cce:	f7ff feb5 	bl	4a3c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4cd2:	4c0b      	ldr	r4, [pc, #44]	; (4d00 <z_impl_log_panic+0x3c>)
    4cd4:	4e0b      	ldr	r6, [pc, #44]	; (4d04 <z_impl_log_panic+0x40>)
    4cd6:	42b4      	cmp	r4, r6
    4cd8:	d306      	bcc.n	4ce8 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    4cda:	f7ff ff99 	bl	4c10 <z_impl_log_process>
		while (log_process() == true) {
    4cde:	2800      	cmp	r0, #0
    4ce0:	d1fb      	bne.n	4cda <z_impl_log_panic+0x16>
	panic_mode = true;
    4ce2:	2301      	movs	r3, #1
    4ce4:	702b      	strb	r3, [r5, #0]
}
    4ce6:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    4ce8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    4cea:	795b      	ldrb	r3, [r3, #5]
    4cec:	b11b      	cbz	r3, 4cf6 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    4cee:	6823      	ldr	r3, [r4, #0]
    4cf0:	4620      	mov	r0, r4
    4cf2:	689b      	ldr	r3, [r3, #8]
    4cf4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4cf6:	3410      	adds	r4, #16
    4cf8:	e7ed      	b.n	4cd6 <z_impl_log_panic+0x12>
    4cfa:	bf00      	nop
    4cfc:	2000541f 	.word	0x2000541f
    4d00:	00024da0 	.word	0x00024da0
    4d04:	00024db0 	.word	0x00024db0

00004d08 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    4d08:	2100      	movs	r1, #0
{
    4d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    4d0e:	4608      	mov	r0, r1
    4d10:	f7ff fe94 	bl	4a3c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    4d14:	4604      	mov	r4, r0
    4d16:	b348      	cbz	r0, 4d6c <log_process_thread_func+0x64>
    4d18:	f240 6867 	movw	r8, #1639	; 0x667
    4d1c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    4d20:	f011 fb38 	bl	16394 <z_impl_z_current_get>
	proc_tid = process_tid;
    4d24:	4b1a      	ldr	r3, [pc, #104]	; (4d90 <log_process_thread_func+0x88>)
    4d26:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    4d28:	b130      	cbz	r0, 4d38 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    4d2a:	4b1a      	ldr	r3, [pc, #104]	; (4d94 <log_process_thread_func+0x8c>)
	    process_tid &&
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	2b09      	cmp	r3, #9
    4d30:	dd02      	ble.n	4d38 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    4d32:	4819      	ldr	r0, [pc, #100]	; (4d98 <log_process_thread_func+0x90>)
    4d34:	f010 fe08 	bl	15948 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    4d38:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4d3a:	4f18      	ldr	r7, [pc, #96]	; (4d9c <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    4d3c:	f8df a058 	ldr.w	sl, [pc, #88]	; 4d98 <log_process_thread_func+0x90>
		if (activate_mask) {
    4d40:	b144      	cbz	r4, 4d54 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    4d42:	4620      	mov	r0, r4
    4d44:	f7ff fe14 	bl	4970 <activate_foreach_backend>
			if (!activate_mask) {
    4d48:	4604      	mov	r4, r0
    4d4a:	b918      	cbnz	r0, 4d54 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    4d4c:	f04f 38ff 	mov.w	r8, #4294967295
    4d50:	f04f 39ff 	mov.w	r9, #4294967295
    4d54:	f7ff ff5c 	bl	4c10 <z_impl_log_process>
		if (log_process() == false) {
    4d58:	4606      	mov	r6, r0
    4d5a:	b928      	cbnz	r0, 4d68 <log_process_thread_func+0x60>
			if (processed_any) {
    4d5c:	b9b5      	cbnz	r5, 4d8c <log_process_thread_func+0x84>
    4d5e:	4642      	mov	r2, r8
    4d60:	464b      	mov	r3, r9
    4d62:	4650      	mov	r0, sl
    4d64:	f010 fe16 	bl	15994 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    4d68:	4635      	mov	r5, r6
    4d6a:	e7e9      	b.n	4d40 <log_process_thread_func+0x38>
    4d6c:	f04f 38ff 	mov.w	r8, #4294967295
    4d70:	f04f 39ff 	mov.w	r9, #4294967295
    4d74:	e7d4      	b.n	4d20 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    4d76:	682b      	ldr	r3, [r5, #0]
    4d78:	699b      	ldr	r3, [r3, #24]
    4d7a:	b11b      	cbz	r3, 4d84 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    4d7c:	2200      	movs	r2, #0
    4d7e:	4628      	mov	r0, r5
    4d80:	4611      	mov	r1, r2
    4d82:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4d84:	3510      	adds	r5, #16
    4d86:	42bd      	cmp	r5, r7
    4d88:	d3f5      	bcc.n	4d76 <log_process_thread_func+0x6e>
    4d8a:	e7e8      	b.n	4d5e <log_process_thread_func+0x56>
    4d8c:	4d04      	ldr	r5, [pc, #16]	; (4da0 <log_process_thread_func+0x98>)
    4d8e:	e7fa      	b.n	4d86 <log_process_thread_func+0x7e>
    4d90:	20002a50 	.word	0x20002a50
    4d94:	20002a58 	.word	0x20002a58
    4d98:	20001334 	.word	0x20001334
    4d9c:	00024db0 	.word	0x00024db0
    4da0:	00024da0 	.word	0x00024da0

00004da4 <z_log_msg_post_finalize>:
{
    4da4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    4da6:	4818      	ldr	r0, [pc, #96]	; (4e08 <z_log_msg_post_finalize+0x64>)
    4da8:	f01a fb4b 	bl	1f442 <atomic_inc>
	if (panic_mode) {
    4dac:	4b17      	ldr	r3, [pc, #92]	; (4e0c <z_log_msg_post_finalize+0x68>)
    4dae:	781b      	ldrb	r3, [r3, #0]
    4db0:	b17b      	cbz	r3, 4dd2 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    4db2:	f04f 0320 	mov.w	r3, #32
    4db6:	f3ef 8411 	mrs	r4, BASEPRI
    4dba:	f383 8812 	msr	BASEPRI_MAX, r3
    4dbe:	f3bf 8f6f 	isb	sy
    4dc2:	f7ff ff25 	bl	4c10 <z_impl_log_process>
	__asm__ volatile(
    4dc6:	f384 8811 	msr	BASEPRI, r4
    4dca:	f3bf 8f6f 	isb	sy
}
    4dce:	b002      	add	sp, #8
    4dd0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    4dd2:	4b0f      	ldr	r3, [pc, #60]	; (4e10 <z_log_msg_post_finalize+0x6c>)
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d0f9      	beq.n	4dce <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    4dda:	b950      	cbnz	r0, 4df2 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    4ddc:	2200      	movs	r2, #0
    4dde:	2300      	movs	r3, #0
    4de0:	480c      	ldr	r0, [pc, #48]	; (4e14 <z_log_msg_post_finalize+0x70>)
    4de2:	e9cd 2300 	strd	r2, r3, [sp]
    4de6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4dea:	2300      	movs	r3, #0
    4dec:	f011 fd7e 	bl	168ec <z_impl_k_timer_start>
    4df0:	e7ed      	b.n	4dce <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    4df2:	280a      	cmp	r0, #10
    4df4:	d1eb      	bne.n	4dce <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    4df6:	4807      	ldr	r0, [pc, #28]	; (4e14 <z_log_msg_post_finalize+0x70>)
    4df8:	f01f fb96 	bl	24528 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    4dfc:	4806      	ldr	r0, [pc, #24]	; (4e18 <z_log_msg_post_finalize+0x74>)
}
    4dfe:	b002      	add	sp, #8
    4e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e04:	f010 bda0 	b.w	15948 <z_impl_k_sem_give>
    4e08:	20002a58 	.word	0x20002a58
    4e0c:	2000541f 	.word	0x2000541f
    4e10:	20002a50 	.word	0x20002a50
    4e14:	20001fc0 	.word	0x20001fc0
    4e18:	20001334 	.word	0x20001334

00004e1c <z_log_msg_commit>:
{
    4e1c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    4e1e:	4b06      	ldr	r3, [pc, #24]	; (4e38 <z_log_msg_commit+0x1c>)
{
    4e20:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    4e22:	681b      	ldr	r3, [r3, #0]
    4e24:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    4e26:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    4e28:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    4e2a:	4804      	ldr	r0, [pc, #16]	; (4e3c <z_log_msg_commit+0x20>)
    4e2c:	f01a fa33 	bl	1f296 <mpsc_pbuf_commit>
}
    4e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    4e34:	f7ff bfb6 	b.w	4da4 <z_log_msg_post_finalize>
    4e38:	2000089c 	.word	0x2000089c
    4e3c:	2000113c 	.word	0x2000113c

00004e40 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    4e40:	4a04      	ldr	r2, [pc, #16]	; (4e54 <log_source_name_get+0x14>)
    4e42:	4b05      	ldr	r3, [pc, #20]	; (4e58 <log_source_name_get+0x18>)
    4e44:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    4e46:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    4e4a:	bf34      	ite	cc
    4e4c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    4e50:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    4e52:	4770      	bx	lr
    4e54:	00024c50 	.word	0x00024c50
    4e58:	00024da0 	.word	0x00024da0

00004e5c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    4e5c:	4b08      	ldr	r3, [pc, #32]	; (4e80 <log_backend_enable+0x24>)
{
    4e5e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    4e60:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    4e62:	6844      	ldr	r4, [r0, #4]
    4e64:	111b      	asrs	r3, r3, #4
    4e66:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    4e68:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    4e6a:	6843      	ldr	r3, [r0, #4]
    4e6c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    4e6e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    4e70:	6843      	ldr	r3, [r0, #4]
    4e72:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    4e74:	6843      	ldr	r3, [r0, #4]
    4e76:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    4e78:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    4e7a:	f7ff be3d 	b.w	4af8 <z_log_notify_backend_enabled>
    4e7e:	bf00      	nop
    4e80:	00024da0 	.word	0x00024da0

00004e84 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    4e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e88:	b08f      	sub	sp, #60	; 0x3c
    4e8a:	f3c1 284a 	ubfx	r8, r1, #9, #11
    4e8e:	af04      	add	r7, sp, #16
    4e90:	460d      	mov	r5, r1
    4e92:	4691      	mov	r9, r2
    4e94:	60b8      	str	r0, [r7, #8]
    4e96:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    4e98:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    4e9a:	f1b8 0f00 	cmp.w	r8, #0
    4e9e:	d063      	beq.n	4f68 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    4ea0:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    4ea2:	f04f 0b04 	mov.w	fp, #4
    4ea6:	f04f 0a0a 	mov.w	sl, #10
    4eaa:	f107 0314 	add.w	r3, r7, #20
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    4eae:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    4eb2:	e9c7 6607 	strd	r6, r6, [r7, #28]
    4eb6:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    4eb8:	9301      	str	r3, [sp, #4]
    4eba:	f8cd b008 	str.w	fp, [sp, #8]
    4ebe:	f8cd a000 	str.w	sl, [sp]
    4ec2:	f107 031c 	add.w	r3, r7, #28
    4ec6:	4632      	mov	r2, r6
    4ec8:	4648      	mov	r0, r9
    4eca:	68f9      	ldr	r1, [r7, #12]
    4ecc:	f7fe fbb2 	bl	3634 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    4ed0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    4ed4:	4603      	mov	r3, r0
    4ed6:	d31c      	bcc.n	4f12 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    4ed8:	466c      	mov	r4, sp
    4eda:	b08a      	sub	sp, #40	; 0x28
    4edc:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4ee0:	ab04      	add	r3, sp, #16
    4ee2:	4826      	ldr	r0, [pc, #152]	; (4f7c <z_impl_z_log_msg_static_create+0xf8>)
    4ee4:	461a      	mov	r2, r3
    4ee6:	e9c3 0105 	strd	r0, r1, [r3, #20]
    4eea:	f240 71ff 	movw	r1, #2047	; 0x7ff
    4eee:	61d9      	str	r1, [r3, #28]
    4ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
    4ef4:	8419      	strh	r1, [r3, #32]
    4ef6:	4b22      	ldr	r3, [pc, #136]	; (4f80 <z_impl_z_log_msg_static_create+0xfc>)
    4ef8:	f842 3f10 	str.w	r3, [r2, #16]!
    4efc:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    4f00:	4633      	mov	r3, r6
    4f02:	4820      	ldr	r0, [pc, #128]	; (4f84 <z_impl_z_log_msg_static_create+0x100>)
    4f04:	f7ff ffbe 	bl	4e84 <z_impl_z_log_msg_static_create>
    4f08:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    4f0a:	372c      	adds	r7, #44	; 0x2c
    4f0c:	46bd      	mov	sp, r7
    4f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    4f12:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    4f16:	f104 0017 	add.w	r0, r4, #23
    4f1a:	4418      	add	r0, r3
    4f1c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    4f20:	0880      	lsrs	r0, r0, #2
    4f22:	603b      	str	r3, [r7, #0]
    4f24:	f7ff fe58 	bl	4bd8 <z_log_msg_alloc>
    4f28:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    4f2c:	4604      	mov	r4, r0
    4f2e:	b190      	cbz	r0, 4f56 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    4f30:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
    4f32:	f100 0110 	add.w	r1, r0, #16
    4f36:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
    4f3a:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    4f3e:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    4f40:	e9cd a300 	strd	sl, r3, [sp]
    4f44:	f8cd b008 	str.w	fp, [sp, #8]
    4f48:	4648      	mov	r0, r9
    4f4a:	4a0f      	ldr	r2, [pc, #60]	; (4f88 <z_impl_z_log_msg_static_create+0x104>)
    4f4c:	68f9      	ldr	r1, [r7, #12]
    4f4e:	f107 031c 	add.w	r3, r7, #28
    4f52:	f7fe fb6f 	bl	3634 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    4f56:	f368 2553 	bfi	r5, r8, #9, #11
    4f5a:	462a      	mov	r2, r5
    4f5c:	4620      	mov	r0, r4
    4f5e:	687b      	ldr	r3, [r7, #4]
    4f60:	68b9      	ldr	r1, [r7, #8]
    4f62:	f01a faa0 	bl	1f4a6 <z_log_msg_finalize>
    4f66:	e7d0      	b.n	4f0a <z_impl_z_log_msg_static_create+0x86>
    4f68:	f104 0017 	add.w	r0, r4, #23
    4f6c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    4f70:	0880      	lsrs	r0, r0, #2
    4f72:	f7ff fe31 	bl	4bd8 <z_log_msg_alloc>
    4f76:	4604      	mov	r4, r0
    4f78:	e7ed      	b.n	4f56 <z_impl_z_log_msg_static_create+0xd2>
    4f7a:	bf00      	nop
    4f7c:	0003244f 	.word	0x0003244f
    4f80:	01000004 	.word	0x01000004
    4f84:	00024c90 	.word	0x00024c90
    4f88:	0001f47b 	.word	0x0001f47b

00004f8c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    4f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f90:	b087      	sub	sp, #28
    4f92:	4604      	mov	r4, r0
    4f94:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    4f98:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    4f9c:	460f      	mov	r7, r1
    4f9e:	4693      	mov	fp, r2
    4fa0:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    4fa2:	b3a6      	cbz	r6, 500e <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    4fa4:	2110      	movs	r1, #16
    4fa6:	4633      	mov	r3, r6
    4fa8:	4652      	mov	r2, sl
    4faa:	2000      	movs	r0, #0
    4fac:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    4fb0:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    4fb4:	f7fe f96a 	bl	328c <cbvprintf_package>
    4fb8:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    4fba:	f105 0017 	add.w	r0, r5, #23
    4fbe:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    4fc0:	4b14      	ldr	r3, [pc, #80]	; (5014 <z_impl_z_log_msg_runtime_vcreate+0x88>)
    4fc2:	f004 0407 	and.w	r4, r4, #7
    4fc6:	f00b 0b07 	and.w	fp, fp, #7
    4fca:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    4fcc:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    4fd0:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    4fd4:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    4fd8:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    4fda:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    4fdc:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    4fde:	f7ff fdfb 	bl	4bd8 <z_log_msg_alloc>
	struct log_msg_desc desc =
    4fe2:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    4fe6:	4605      	mov	r5, r0
    4fe8:	b140      	cbz	r0, 4ffc <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    4fea:	b13e      	cbz	r6, 4ffc <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    4fec:	4633      	mov	r3, r6
    4fee:	4652      	mov	r2, sl
    4ff0:	9903      	ldr	r1, [sp, #12]
    4ff2:	f8cd 9000 	str.w	r9, [sp]
    4ff6:	3010      	adds	r0, #16
    4ff8:	f7fe f948 	bl	328c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    4ffc:	4643      	mov	r3, r8
    4ffe:	4622      	mov	r2, r4
    5000:	4639      	mov	r1, r7
    5002:	4628      	mov	r0, r5
	}
}
    5004:	b007      	add	sp, #28
    5006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    500a:	f01a ba4c 	b.w	1f4a6 <z_log_msg_finalize>
		plen = 0;
    500e:	4631      	mov	r1, r6
    5010:	e7d3      	b.n	4fba <z_impl_z_log_msg_runtime_vcreate+0x2e>
    5012:	bf00      	nop
    5014:	000ffe00 	.word	0x000ffe00

00005018 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5018:	b40e      	push	{r1, r2, r3}
    501a:	b503      	push	{r0, r1, lr}
    501c:	ab03      	add	r3, sp, #12
    501e:	f853 2b04 	ldr.w	r2, [r3], #4
    5022:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5024:	4804      	ldr	r0, [pc, #16]	; (5038 <print_formatted+0x20>)
	va_start(args, fmt);
    5026:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5028:	f01a fa63 	bl	1f4f2 <cbvprintf>
	va_end(args);

	return length;
}
    502c:	b002      	add	sp, #8
    502e:	f85d eb04 	ldr.w	lr, [sp], #4
    5032:	b003      	add	sp, #12
    5034:	4770      	bx	lr
    5036:	bf00      	nop
    5038:	0001f51b 	.word	0x0001f51b

0000503c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    503c:	06ca      	lsls	r2, r1, #27
    503e:	d405      	bmi.n	504c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5040:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    5042:	bf4c      	ite	mi
    5044:	4902      	ldrmi	r1, [pc, #8]	; (5050 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    5046:	4903      	ldrpl	r1, [pc, #12]	; (5054 <newline_print+0x18>)
    5048:	f7ff bfe6 	b.w	5018 <print_formatted>
	}
}
    504c:	4770      	bx	lr
    504e:	bf00      	nop
    5050:	0003248f 	.word	0x0003248f
    5054:	0003248e 	.word	0x0003248e

00005058 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    5058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    505c:	b089      	sub	sp, #36	; 0x24
    505e:	469a      	mov	sl, r3
    5060:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    5064:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    5068:	9305      	str	r3, [sp, #20]
    506a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    506c:	4604      	mov	r4, r0
    506e:	460d      	mov	r5, r1
    5070:	9e16      	ldr	r6, [sp, #88]	; 0x58
    5072:	9206      	str	r2, [sp, #24]
    5074:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    5076:	f1bb 0f00 	cmp.w	fp, #0
    507a:	f000 8085 	beq.w	5188 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    507e:	f006 0308 	and.w	r3, r6, #8
    5082:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    5084:	f01a f9f7 	bl	1f476 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    5088:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    508c:	4602      	mov	r2, r0
    508e:	2800      	cmp	r0, #0
    5090:	d049      	beq.n	5126 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    5092:	4620      	mov	r0, r4
    5094:	4985      	ldr	r1, [pc, #532]	; (52ac <log_output_process+0x254>)
    5096:	f7ff ffbf 	bl	5018 <print_formatted>
    509a:	4680      	mov	r8, r0
	if (stamp) {
    509c:	f1b9 0f00 	cmp.w	r9, #0
    50a0:	d008      	beq.n	50b4 <log_output_process+0x5c>
	if (!format) {
    50a2:	f016 0f44 	tst.w	r6, #68	; 0x44
    50a6:	d140      	bne.n	512a <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    50a8:	462a      	mov	r2, r5
    50aa:	4620      	mov	r0, r4
    50ac:	4980      	ldr	r1, [pc, #512]	; (52b0 <log_output_process+0x258>)
    50ae:	f7ff ffb3 	bl	5018 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    50b2:	4480      	add	r8, r0
	if (color) {
    50b4:	f006 0301 	and.w	r3, r6, #1
    50b8:	b153      	cbz	r3, 50d0 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    50ba:	4b7e      	ldr	r3, [pc, #504]	; (52b4 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    50bc:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    50be:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    50c2:	4b7d      	ldr	r3, [pc, #500]	; (52b8 <log_output_process+0x260>)
    50c4:	497d      	ldr	r1, [pc, #500]	; (52bc <log_output_process+0x264>)
    50c6:	2a00      	cmp	r2, #0
    50c8:	bf08      	it	eq
    50ca:	461a      	moveq	r2, r3
    50cc:	f7ff ffa4 	bl	5018 <print_formatted>
	if (level_on) {
    50d0:	f006 0308 	and.w	r3, r6, #8
    50d4:	2b00      	cmp	r3, #0
    50d6:	d054      	beq.n	5182 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    50d8:	4b79      	ldr	r3, [pc, #484]	; (52c0 <log_output_process+0x268>)
    50da:	4620      	mov	r0, r4
    50dc:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    50e0:	4978      	ldr	r1, [pc, #480]	; (52c4 <log_output_process+0x26c>)
    50e2:	f7ff ff99 	bl	5018 <print_formatted>
    50e6:	4605      	mov	r5, r0
	if (domain) {
    50e8:	9b06      	ldr	r3, [sp, #24]
    50ea:	b12b      	cbz	r3, 50f8 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    50ec:	461a      	mov	r2, r3
    50ee:	4620      	mov	r0, r4
    50f0:	4975      	ldr	r1, [pc, #468]	; (52c8 <log_output_process+0x270>)
    50f2:	f7ff ff91 	bl	5018 <print_formatted>
    50f6:	4405      	add	r5, r0
	if (source) {
    50f8:	f1ba 0f00 	cmp.w	sl, #0
    50fc:	d005      	beq.n	510a <log_output_process+0xb2>
		total += print_formatted(output,
    50fe:	4652      	mov	r2, sl
    5100:	4620      	mov	r0, r4
    5102:	4972      	ldr	r1, [pc, #456]	; (52cc <log_output_process+0x274>)
    5104:	f7ff ff88 	bl	5018 <print_formatted>
    5108:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    510a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    510c:	2f00      	cmp	r7, #0
    510e:	d149      	bne.n	51a4 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    5110:	9b04      	ldr	r3, [sp, #16]
    5112:	2b00      	cmp	r3, #0
    5114:	d14f      	bne.n	51b6 <log_output_process+0x15e>
	if (color) {
    5116:	07f3      	lsls	r3, r6, #31
    5118:	f100 80c1 	bmi.w	529e <log_output_process+0x246>
	newline_print(output, flags);
    511c:	4631      	mov	r1, r6
    511e:	4620      	mov	r0, r4
    5120:	f7ff ff8c 	bl	503c <newline_print>
}
    5124:	e0b5      	b.n	5292 <log_output_process+0x23a>
	uint32_t length = 0U;
    5126:	4680      	mov	r8, r0
    5128:	e7b8      	b.n	509c <log_output_process+0x44>
	} else if (freq != 0U) {
    512a:	4b69      	ldr	r3, [pc, #420]	; (52d0 <log_output_process+0x278>)
    512c:	6818      	ldr	r0, [r3, #0]
    512e:	2800      	cmp	r0, #0
    5130:	d0bf      	beq.n	50b2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    5132:	4b68      	ldr	r3, [pc, #416]	; (52d4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    5134:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    513e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    5142:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    5146:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    514a:	fb09 f505 	mul.w	r5, r9, r5
    514e:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5152:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    5156:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    515a:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    515e:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    5162:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5166:	fb09 f505 	mul.w	r5, r9, r5
    516a:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    516e:	fb0c 1113 	mls	r1, ip, r3, r1
    5172:	4620      	mov	r0, r4
    5174:	9100      	str	r1, [sp, #0]
    5176:	e9cd e501 	strd	lr, r5, [sp, #4]
    517a:	4957      	ldr	r1, [pc, #348]	; (52d8 <log_output_process+0x280>)
    517c:	f7ff ff4c 	bl	5018 <print_formatted>
    5180:	e797      	b.n	50b2 <log_output_process+0x5a>
	int total = 0;
    5182:	f006 0508 	and.w	r5, r6, #8
    5186:	e7af      	b.n	50e8 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    5188:	f1ba 0f01 	cmp.w	sl, #1
    518c:	d106      	bne.n	519c <log_output_process+0x144>
	if (package) {
    518e:	2f00      	cmp	r7, #0
    5190:	d165      	bne.n	525e <log_output_process+0x206>
	if (data_len) {
    5192:	9b04      	ldr	r3, [sp, #16]
    5194:	2b00      	cmp	r3, #0
    5196:	d07c      	beq.n	5292 <log_output_process+0x23a>
		prefix_offset = 0;
    5198:	2500      	movs	r5, #0
    519a:	e00c      	b.n	51b6 <log_output_process+0x15e>
	if (package) {
    519c:	2f00      	cmp	r7, #0
    519e:	d0f8      	beq.n	5192 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    51a0:	484e      	ldr	r0, [pc, #312]	; (52dc <log_output_process+0x284>)
    51a2:	e05d      	b.n	5260 <log_output_process+0x208>
		cb = out_func;
    51a4:	484e      	ldr	r0, [pc, #312]	; (52e0 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    51a6:	463b      	mov	r3, r7
    51a8:	4622      	mov	r2, r4
    51aa:	494e      	ldr	r1, [pc, #312]	; (52e4 <log_output_process+0x28c>)
    51ac:	f019 fa6f 	bl	1e68e <cbpprintf_external>
	if (data_len) {
    51b0:	9b04      	ldr	r3, [sp, #16]
    51b2:	2b00      	cmp	r3, #0
    51b4:	d069      	beq.n	528a <log_output_process+0x232>
		print_formatted(output, " ");
    51b6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 52e8 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    51ba:	f8df 9130 	ldr.w	r9, [pc, #304]	; 52ec <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    51be:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    51c0:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    51c2:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    51c4:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    51c6:	bf28      	it	cs
    51c8:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    51ca:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    51ce:	f7ff ff35 	bl	503c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    51d2:	4555      	cmp	r5, sl
    51d4:	dc46      	bgt.n	5264 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    51d6:	9b05      	ldr	r3, [sp, #20]
    51d8:	4649      	mov	r1, r9
    51da:	4620      	mov	r0, r4
    51dc:	781a      	ldrb	r2, [r3, #0]
    51de:	f7ff ff1b 	bl	5018 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    51e2:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    51e6:	f01a 0f07 	tst.w	sl, #7
    51ea:	d103      	bne.n	51f4 <log_output_process+0x19c>
			print_formatted(output, " ");
    51ec:	4641      	mov	r1, r8
    51ee:	4620      	mov	r0, r4
    51f0:	f7ff ff12 	bl	5018 <print_formatted>
		if (i < length) {
    51f4:	4557      	cmp	r7, sl
    51f6:	d93c      	bls.n	5272 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    51f8:	9b05      	ldr	r3, [sp, #20]
    51fa:	4649      	mov	r1, r9
    51fc:	4620      	mov	r0, r4
    51fe:	f813 200a 	ldrb.w	r2, [r3, sl]
    5202:	f7ff ff09 	bl	5018 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5206:	f10a 0a01 	add.w	sl, sl, #1
    520a:	f1ba 0f10 	cmp.w	sl, #16
    520e:	d1ea      	bne.n	51e6 <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5210:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    5214:	4620      	mov	r0, r4
    5216:	4936      	ldr	r1, [pc, #216]	; (52f0 <log_output_process+0x298>)
    5218:	f7ff fefe 	bl	5018 <print_formatted>
		if (i < length) {
    521c:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    521e:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    5220:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    5222:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    5224:	4b33      	ldr	r3, [pc, #204]	; (52f4 <log_output_process+0x29c>)
    5226:	5c99      	ldrb	r1, [r3, r2]
    5228:	f011 0f97 	tst.w	r1, #151	; 0x97
    522c:	bf08      	it	eq
    522e:	222e      	moveq	r2, #46	; 0x2e
    5230:	4931      	ldr	r1, [pc, #196]	; (52f8 <log_output_process+0x2a0>)
    5232:	f7ff fef1 	bl	5018 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5236:	f10a 0a01 	add.w	sl, sl, #1
    523a:	f1ba 0f10 	cmp.w	sl, #16
    523e:	d01d      	beq.n	527c <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    5240:	f01a 0f07 	tst.w	sl, #7
    5244:	d103      	bne.n	524e <log_output_process+0x1f6>
			print_formatted(output, " ");
    5246:	4641      	mov	r1, r8
    5248:	4620      	mov	r0, r4
    524a:	f7ff fee5 	bl	5018 <print_formatted>
		if (i < length) {
    524e:	4557      	cmp	r7, sl
    5250:	4652      	mov	r2, sl
    5252:	d8e4      	bhi.n	521e <log_output_process+0x1c6>
			print_formatted(output, " ");
    5254:	4641      	mov	r1, r8
    5256:	4620      	mov	r0, r4
    5258:	f7ff fede 	bl	5018 <print_formatted>
    525c:	e7eb      	b.n	5236 <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    525e:	4820      	ldr	r0, [pc, #128]	; (52e0 <log_output_process+0x288>)
		prefix_offset = 0;
    5260:	465d      	mov	r5, fp
    5262:	e7a0      	b.n	51a6 <log_output_process+0x14e>
		print_formatted(output, " ");
    5264:	4641      	mov	r1, r8
    5266:	4620      	mov	r0, r4
    5268:	f7ff fed6 	bl	5018 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    526c:	f10a 0a01 	add.w	sl, sl, #1
    5270:	e7af      	b.n	51d2 <log_output_process+0x17a>
			print_formatted(output, "   ");
    5272:	4620      	mov	r0, r4
    5274:	4921      	ldr	r1, [pc, #132]	; (52fc <log_output_process+0x2a4>)
    5276:	f7ff fecf 	bl	5018 <print_formatted>
    527a:	e7c4      	b.n	5206 <log_output_process+0x1ae>
		data += length;
    527c:	9b05      	ldr	r3, [sp, #20]
    527e:	443b      	add	r3, r7
    5280:	9305      	str	r3, [sp, #20]
	} while (len);
    5282:	9b04      	ldr	r3, [sp, #16]
    5284:	1bdb      	subs	r3, r3, r7
    5286:	9304      	str	r3, [sp, #16]
    5288:	d199      	bne.n	51be <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    528a:	f1bb 0f00 	cmp.w	fp, #0
    528e:	f47f af42 	bne.w	5116 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    5292:	4620      	mov	r0, r4
}
    5294:	b009      	add	sp, #36	; 0x24
    5296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    529a:	f01a b931 	b.w	1f500 <log_output_flush>
		print_formatted(output, "%s", log_color);
    529e:	4620      	mov	r0, r4
    52a0:	4a05      	ldr	r2, [pc, #20]	; (52b8 <log_output_process+0x260>)
    52a2:	4906      	ldr	r1, [pc, #24]	; (52bc <log_output_process+0x264>)
    52a4:	f7ff feb8 	bl	5018 <print_formatted>
}
    52a8:	e738      	b.n	511c <log_output_process+0xc4>
    52aa:	bf00      	nop
    52ac:	00032496 	.word	0x00032496
    52b0:	0003249a 	.word	0x0003249a
    52b4:	00024f88 	.word	0x00024f88
    52b8:	00032491 	.word	0x00032491
    52bc:	00032001 	.word	0x00032001
    52c0:	00024f9c 	.word	0x00024f9c
    52c4:	000324bf 	.word	0x000324bf
    52c8:	000324c5 	.word	0x000324c5
    52cc:	000324c9 	.word	0x000324c9
    52d0:	20002a64 	.word	0x20002a64
    52d4:	20002a60 	.word	0x20002a60
    52d8:	000324a3 	.word	0x000324a3
    52dc:	0001f549 	.word	0x0001f549
    52e0:	0001f51b 	.word	0x0001f51b
    52e4:	0001f4f3 	.word	0x0001f4f3
    52e8:	000324d6 	.word	0x000324d6
    52ec:	000324ce 	.word	0x000324ce
    52f0:	000324d8 	.word	0x000324d8
    52f4:	000311c1 	.word	0x000311c1
    52f8:	000324da 	.word	0x000324da
    52fc:	000324d4 	.word	0x000324d4

00005300 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    5300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    5304:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    5306:	684b      	ldr	r3, [r1, #4]
    5308:	4605      	mov	r5, r0
    530a:	460c      	mov	r4, r1
    530c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    530e:	688e      	ldr	r6, [r1, #8]
    5310:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    5312:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    5316:	b15b      	cbz	r3, 5330 <log_output_msg_process+0x30>
    5318:	4a13      	ldr	r2, [pc, #76]	; (5368 <log_output_msg_process+0x68>)
    531a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    531c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    5320:	2900      	cmp	r1, #0
    5322:	db1f      	blt.n	5364 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    5324:	7820      	ldrb	r0, [r4, #0]
    5326:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    532a:	f7ff fd89 	bl	4e40 <log_source_name_get>
    532e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    5330:	4621      	mov	r1, r4
    5332:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    5336:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    5338:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    533c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    533e:	eb01 0402 	add.w	r4, r1, r2
    5342:	bf08      	it	eq
    5344:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    5346:	f3c0 100b 	ubfx	r0, r0, #4, #12
    534a:	e9cd 0803 	strd	r0, r8, [sp, #12]
    534e:	e9cd 1401 	strd	r1, r4, [sp, #4]
    5352:	2200      	movs	r2, #0
    5354:	4631      	mov	r1, r6
    5356:	4628      	mov	r0, r5
    5358:	9700      	str	r7, [sp, #0]
    535a:	f7ff fe7d 	bl	5058 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    535e:	b006      	add	sp, #24
    5360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    5364:	2300      	movs	r3, #0
    5366:	e7e3      	b.n	5330 <log_output_msg_process+0x30>
    5368:	00024c50 	.word	0x00024c50

0000536c <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    536c:	f242 730f 	movw	r3, #9999	; 0x270f
{
    5370:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5372:	428b      	cmp	r3, r1
    5374:	bf28      	it	cs
    5376:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    5378:	6805      	ldr	r5, [r0, #0]
{
    537a:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    537c:	2105      	movs	r1, #5
    537e:	4668      	mov	r0, sp
    5380:	4a0d      	ldr	r2, [pc, #52]	; (53b8 <log_output_dropped_process+0x4c>)
    5382:	f019 fa2b 	bl	1e7dc <snprintk>
    5386:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5388:	6863      	ldr	r3, [r4, #4]
    538a:	4628      	mov	r0, r5
    538c:	220b      	movs	r2, #11
    538e:	685b      	ldr	r3, [r3, #4]
    5390:	490a      	ldr	r1, [pc, #40]	; (53bc <log_output_dropped_process+0x50>)
    5392:	f01a f8a1 	bl	1f4d8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    5396:	6863      	ldr	r3, [r4, #4]
    5398:	4632      	mov	r2, r6
    539a:	4669      	mov	r1, sp
    539c:	4628      	mov	r0, r5
    539e:	685b      	ldr	r3, [r3, #4]
    53a0:	f01a f89a 	bl	1f4d8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    53a4:	6863      	ldr	r3, [r4, #4]
    53a6:	221b      	movs	r2, #27
    53a8:	4628      	mov	r0, r5
    53aa:	685b      	ldr	r3, [r3, #4]
    53ac:	4904      	ldr	r1, [pc, #16]	; (53c0 <log_output_dropped_process+0x54>)
    53ae:	f01a f893 	bl	1f4d8 <buffer_write>
		     output->control_block->ctx);
}
    53b2:	b002      	add	sp, #8
    53b4:	bd70      	pop	{r4, r5, r6, pc}
    53b6:	bf00      	nop
    53b8:	000332c8 	.word	0x000332c8
    53bc:	000324f9 	.word	0x000324f9
    53c0:	000324dd 	.word	0x000324dd

000053c4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    53c4:	2100      	movs	r1, #0
    53c6:	2301      	movs	r3, #1
    53c8:	4a06      	ldr	r2, [pc, #24]	; (53e4 <log_output_timestamp_freq_set+0x20>)
    53ca:	4290      	cmp	r0, r2
    53cc:	d806      	bhi.n	53dc <log_output_timestamp_freq_set+0x18>
    53ce:	4a06      	ldr	r2, [pc, #24]	; (53e8 <log_output_timestamp_freq_set+0x24>)
    53d0:	b901      	cbnz	r1, 53d4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    53d2:	2301      	movs	r3, #1
    53d4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    53d6:	4b05      	ldr	r3, [pc, #20]	; (53ec <log_output_timestamp_freq_set+0x28>)
    53d8:	6018      	str	r0, [r3, #0]
}
    53da:	4770      	bx	lr
		timestamp_div *= 2U;
    53dc:	2101      	movs	r1, #1
		frequency /= 2U;
    53de:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    53e0:	005b      	lsls	r3, r3, #1
    53e2:	e7f2      	b.n	53ca <log_output_timestamp_freq_set+0x6>
    53e4:	000f4240 	.word	0x000f4240
    53e8:	20002a60 	.word	0x20002a60
    53ec:	20002a64 	.word	0x20002a64

000053f0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    53f0:	4b01      	ldr	r3, [pc, #4]	; (53f8 <format_set+0x8>)
	return 0;
}
    53f2:	2000      	movs	r0, #0
	log_format_current = log_type;
    53f4:	6019      	str	r1, [r3, #0]
}
    53f6:	4770      	bx	lr
    53f8:	20002a7c 	.word	0x20002a7c

000053fc <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    53fc:	2201      	movs	r2, #1
    53fe:	4b02      	ldr	r3, [pc, #8]	; (5408 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5400:	4802      	ldr	r0, [pc, #8]	; (540c <panic+0x10>)
    5402:	701a      	strb	r2, [r3, #0]
    5404:	f01a b87c 	b.w	1f500 <log_output_flush>
    5408:	20005421 	.word	0x20005421
    540c:	00024fcc 	.word	0x00024fcc

00005410 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    5410:	4801      	ldr	r0, [pc, #4]	; (5418 <dropped+0x8>)
    5412:	f7ff bfab 	b.w	536c <log_output_dropped_process>
    5416:	bf00      	nop
    5418:	00024fcc 	.word	0x00024fcc

0000541c <process>:
{
    541c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    541e:	4b06      	ldr	r3, [pc, #24]	; (5438 <process+0x1c>)
{
    5420:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5422:	6818      	ldr	r0, [r3, #0]
    5424:	f7ff fb52 	bl	4acc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    5428:	4621      	mov	r1, r4
}
    542a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    542e:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    5430:	220f      	movs	r2, #15
    5432:	4802      	ldr	r0, [pc, #8]	; (543c <process+0x20>)
    5434:	4718      	bx	r3
    5436:	bf00      	nop
    5438:	20002a7c 	.word	0x20002a7c
    543c:	00024fcc 	.word	0x00024fcc

00005440 <char_out>:
{
    5440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5442:	460d      	mov	r5, r1
    5444:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5446:	4f06      	ldr	r7, [pc, #24]	; (5460 <char_out+0x20>)
    5448:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    544a:	42b4      	cmp	r4, r6
    544c:	d101      	bne.n	5452 <char_out+0x12>
}
    544e:	4628      	mov	r0, r5
    5450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    5452:	f814 1b01 	ldrb.w	r1, [r4], #1
    5456:	68bb      	ldr	r3, [r7, #8]
    5458:	4801      	ldr	r0, [pc, #4]	; (5460 <char_out+0x20>)
    545a:	685b      	ldr	r3, [r3, #4]
    545c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    545e:	e7f4      	b.n	544a <char_out+0xa>
    5460:	00024988 	.word	0x00024988

00005464 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    5464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5468:	4605      	mov	r5, r0
	__asm__ volatile(
    546a:	f04f 0320 	mov.w	r3, #32
    546e:	f3ef 8611 	mrs	r6, BASEPRI
    5472:	f383 8812 	msr	BASEPRI_MAX, r3
    5476:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    547a:	f04f 090c 	mov.w	r9, #12
	return list->head;
    547e:	4b0d      	ldr	r3, [pc, #52]	; (54b4 <pm_state_notify+0x50>)
    5480:	4f0d      	ldr	r7, [pc, #52]	; (54b8 <pm_state_notify+0x54>)
    5482:	681c      	ldr	r4, [r3, #0]
    5484:	f8df 8034 	ldr.w	r8, [pc, #52]	; 54bc <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5488:	b92c      	cbnz	r4, 5496 <pm_state_notify+0x32>
	__asm__ volatile(
    548a:	f386 8811 	msr	BASEPRI, r6
    548e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    5492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    5496:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    549a:	2d00      	cmp	r5, #0
    549c:	bf18      	it	ne
    549e:	4613      	movne	r3, r2
		if (callback) {
    54a0:	b12b      	cbz	r3, 54ae <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    54a2:	f898 2014 	ldrb.w	r2, [r8, #20]
    54a6:	fb09 f202 	mul.w	r2, r9, r2
    54aa:	5cb8      	ldrb	r0, [r7, r2]
    54ac:	4798      	blx	r3
	return node->next;
    54ae:	6824      	ldr	r4, [r4, #0]
    54b0:	e7ea      	b.n	5488 <pm_state_notify+0x24>
    54b2:	bf00      	nop
    54b4:	20002a98 	.word	0x20002a98
    54b8:	20002a8c 	.word	0x20002a8c
    54bc:	200047dc 	.word	0x200047dc

000054c0 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    54c0:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    54c2:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    54c4:	4b16      	ldr	r3, [pc, #88]	; (5520 <pm_system_resume+0x60>)
    54c6:	7d1c      	ldrb	r4, [r3, #20]
    54c8:	f004 031f 	and.w	r3, r4, #31
    54cc:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    54ce:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    54d0:	4b14      	ldr	r3, [pc, #80]	; (5524 <pm_system_resume+0x64>)
    54d2:	0961      	lsrs	r1, r4, #5
    54d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    54d8:	e8d3 1fef 	ldaex	r1, [r3]
    54dc:	ea01 0500 	and.w	r5, r1, r0
    54e0:	e8c3 5fe6 	stlex	r6, r5, [r3]
    54e4:	2e00      	cmp	r6, #0
    54e6:	d1f7      	bne.n	54d8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    54e8:	420a      	tst	r2, r1
    54ea:	d013      	beq.n	5514 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    54ec:	4b0e      	ldr	r3, [pc, #56]	; (5528 <pm_system_resume+0x68>)
    54ee:	4d0f      	ldr	r5, [pc, #60]	; (552c <pm_system_resume+0x6c>)
    54f0:	b18b      	cbz	r3, 5516 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    54f2:	230c      	movs	r3, #12
    54f4:	4363      	muls	r3, r4
    54f6:	18ea      	adds	r2, r5, r3
    54f8:	7851      	ldrb	r1, [r2, #1]
    54fa:	5ce8      	ldrb	r0, [r5, r3]
    54fc:	f019 ff87 	bl	1f40e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    5500:	2000      	movs	r0, #0
    5502:	f7ff ffaf 	bl	5464 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5506:	230c      	movs	r3, #12
    5508:	435c      	muls	r4, r3
    550a:	2300      	movs	r3, #0
    550c:	192a      	adds	r2, r5, r4
    550e:	512b      	str	r3, [r5, r4]
    5510:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    5514:	bd70      	pop	{r4, r5, r6, pc}
    5516:	f383 8811 	msr	BASEPRI, r3
    551a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    551e:	e7ef      	b.n	5500 <pm_system_resume+0x40>
    5520:	200047dc 	.word	0x200047dc
    5524:	20002aa0 	.word	0x20002aa0
    5528:	0001f40f 	.word	0x0001f40f
    552c:	20002a8c 	.word	0x20002a8c

00005530 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    5530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    5534:	4b32      	ldr	r3, [pc, #200]	; (5600 <pm_system_suspend+0xd0>)
{
    5536:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    5538:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    553a:	f04f 0320 	mov.w	r3, #32
    553e:	f3ef 8811 	mrs	r8, BASEPRI
    5542:	f383 8812 	msr	BASEPRI_MAX, r3
    5546:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    554a:	240c      	movs	r4, #12
    554c:	436c      	muls	r4, r5
    554e:	4b2d      	ldr	r3, [pc, #180]	; (5604 <pm_system_suspend+0xd4>)
    5550:	4e2d      	ldr	r6, [pc, #180]	; (5608 <pm_system_suspend+0xd8>)
    5552:	5d19      	ldrb	r1, [r3, r4]
    5554:	191a      	adds	r2, r3, r4
    5556:	2900      	cmp	r1, #0
    5558:	d047      	beq.n	55ea <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    555a:	ca07      	ldmia	r2, {r0, r1, r2}
    555c:	eb06 0c04 	add.w	ip, r6, r4
    5560:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    5564:	2200      	movs	r2, #0
    5566:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    5568:	f388 8811 	msr	BASEPRI, r8
    556c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    5570:	230c      	movs	r3, #12
    5572:	436b      	muls	r3, r5
    5574:	5cf0      	ldrb	r0, [r6, r3]
    5576:	18f2      	adds	r2, r6, r3
    5578:	b3a8      	cbz	r0, 55e6 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    557a:	1c7b      	adds	r3, r7, #1
    557c:	d010      	beq.n	55a0 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    557e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5582:	2100      	movs	r1, #0
    5584:	f8d2 c008 	ldr.w	ip, [r2, #8]
    5588:	4c20      	ldr	r4, [pc, #128]	; (560c <pm_system_suspend+0xdc>)
    558a:	2300      	movs	r3, #0
    558c:	fbec 4100 	umlal	r4, r1, ip, r0
    5590:	4a1f      	ldr	r2, [pc, #124]	; (5610 <pm_system_suspend+0xe0>)
    5592:	4620      	mov	r0, r4
    5594:	f7fb fa1e 	bl	9d4 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    5598:	2101      	movs	r1, #1
    559a:	1a38      	subs	r0, r7, r0
    559c:	f008 fde6 	bl	e16c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    55a0:	f010 fe0a 	bl	161b8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    55a4:	2001      	movs	r0, #1
    55a6:	f7ff ff5d 	bl	5464 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    55aa:	4b1a      	ldr	r3, [pc, #104]	; (5614 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    55ac:	096a      	lsrs	r2, r5, #5
    55ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    55b2:	2201      	movs	r2, #1
    55b4:	f005 011f 	and.w	r1, r5, #31
    55b8:	408a      	lsls	r2, r1
    55ba:	e8d3 0fef 	ldaex	r0, [r3]
    55be:	4310      	orrs	r0, r2
    55c0:	e8c3 0fe1 	stlex	r1, r0, [r3]
    55c4:	2900      	cmp	r1, #0
    55c6:	d1f8      	bne.n	55ba <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    55c8:	4b13      	ldr	r3, [pc, #76]	; (5618 <pm_system_suspend+0xe8>)
    55ca:	b13b      	cbz	r3, 55dc <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    55cc:	230c      	movs	r3, #12
    55ce:	fb03 f005 	mul.w	r0, r3, r5
    55d2:	1833      	adds	r3, r6, r0
    55d4:	7859      	ldrb	r1, [r3, #1]
    55d6:	5c30      	ldrb	r0, [r6, r0]
    55d8:	f7ff f8fc 	bl	47d4 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    55dc:	f7ff ff70 	bl	54c0 <pm_system_resume>
	k_sched_unlock();
    55e0:	f010 fdfe 	bl	161e0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    55e4:	2001      	movs	r0, #1
}
    55e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    55ea:	4601      	mov	r1, r0
    55ec:	4628      	mov	r0, r5
    55ee:	f000 f815 	bl	561c <pm_policy_next_state>
		if (info != NULL) {
    55f2:	2800      	cmp	r0, #0
    55f4:	d0b8      	beq.n	5568 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    55f6:	c807      	ldmia	r0, {r0, r1, r2}
    55f8:	4434      	add	r4, r6
    55fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    55fe:	e7b3      	b.n	5568 <pm_system_suspend+0x38>
    5600:	200047dc 	.word	0x200047dc
    5604:	20002a80 	.word	0x20002a80
    5608:	20002a8c 	.word	0x20002a8c
    560c:	000f423f 	.word	0x000f423f
    5610:	000f4240 	.word	0x000f4240
    5614:	20002aa0 	.word	0x20002aa0
    5618:	000047d5 	.word	0x000047d5

0000561c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5620:	b085      	sub	sp, #20
    5622:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5624:	a903      	add	r1, sp, #12
    5626:	f000 f843 	bl	56b0 <pm_state_cpu_get_all>
    562a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    562e:	4604      	mov	r4, r0
    5630:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5634:	4b1b      	ldr	r3, [pc, #108]	; (56a4 <pm_policy_next_state+0x88>)
    5636:	9d03      	ldr	r5, [sp, #12]
    5638:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    563c:	1e43      	subs	r3, r0, #1
    563e:	b21b      	sxth	r3, r3
    5640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5644:	f8df 8060 	ldr.w	r8, [pc, #96]	; 56a8 <pm_policy_next_state+0x8c>
    5648:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    564c:	b924      	cbnz	r4, 5658 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    564e:	46a1      	mov	r9, r4
}
    5650:	4648      	mov	r0, r9
    5652:	b005      	add	sp, #20
    5654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5658:	46c4      	mov	ip, r8
    565a:	4659      	mov	r1, fp
    565c:	6868      	ldr	r0, [r5, #4]
    565e:	2300      	movs	r3, #0
    5660:	fbe0 c107 	umlal	ip, r1, r0, r7
    5664:	4a11      	ldr	r2, [pc, #68]	; (56ac <pm_policy_next_state+0x90>)
    5666:	4660      	mov	r0, ip
    5668:	f7fb f9b4 	bl	9d4 <__aeabi_uldivmod>
    566c:	46c4      	mov	ip, r8
    566e:	4659      	mov	r1, fp
    5670:	9001      	str	r0, [sp, #4]
    5672:	68a8      	ldr	r0, [r5, #8]
    5674:	2300      	movs	r3, #0
    5676:	fbe0 c107 	umlal	ip, r1, r0, r7
    567a:	4a0c      	ldr	r2, [pc, #48]	; (56ac <pm_policy_next_state+0x90>)
    567c:	4660      	mov	r0, ip
    567e:	f7fb f9a9 	bl	9d4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5682:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    5686:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5688:	d001      	beq.n	568e <pm_policy_next_state+0x72>
    568a:	4582      	cmp	sl, r0
    568c:	d905      	bls.n	569a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    568e:	1c73      	adds	r3, r6, #1
    5690:	d0de      	beq.n	5650 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    5692:	9b01      	ldr	r3, [sp, #4]
    5694:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    5696:	42b0      	cmp	r0, r6
    5698:	d9da      	bls.n	5650 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    569a:	3c01      	subs	r4, #1
    569c:	b2a4      	uxth	r4, r4
    569e:	3d0c      	subs	r5, #12
    56a0:	e7d4      	b.n	564c <pm_policy_next_state+0x30>
    56a2:	bf00      	nop
    56a4:	200008a0 	.word	0x200008a0
    56a8:	000f423f 	.word	0x000f423f
    56ac:	000f4240 	.word	0x000f4240

000056b0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    56b0:	b908      	cbnz	r0, 56b6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    56b2:	4b02      	ldr	r3, [pc, #8]	; (56bc <pm_state_cpu_get_all+0xc>)
    56b4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    56b6:	2000      	movs	r0, #0
    56b8:	4770      	bx	lr
    56ba:	bf00      	nop
    56bc:	00024fdc 	.word	0x00024fdc

000056c0 <zsock_connected_cb>:
}
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_connected_cb(struct net_context *ctx, int status, void *user_data)
{
    56c0:	b507      	push	{r0, r1, r2, lr}
	if (status < 0) {
    56c2:	2900      	cmp	r1, #0
    56c4:	da08      	bge.n	56d8 <zsock_connected_cb+0x18>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
    56c6:	6e42      	ldr	r2, [r0, #100]	; 0x64
		ctx->user_data = INT_TO_POINTER(-status);
    56c8:	4249      	negs	r1, r1
    56ca:	f042 0204 	orr.w	r2, r2, #4
    56ce:	6041      	str	r1, [r0, #4]
	(ctx)->socket_data = UINT_TO_POINTER(val);
    56d0:	6642      	str	r2, [r0, #100]	; 0x64
		sock_set_error(ctx);
	} else if (status == 0) {
		(void)net_context_recv(ctx, zsock_received_cb, K_NO_WAIT, ctx->user_data);
	}
}
    56d2:	b003      	add	sp, #12
    56d4:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (status == 0) {
    56d8:	d1fb      	bne.n	56d2 <zsock_connected_cb+0x12>
		(void)net_context_recv(ctx, zsock_received_cb, K_NO_WAIT, ctx->user_data);
    56da:	6843      	ldr	r3, [r0, #4]
    56dc:	2200      	movs	r2, #0
    56de:	9300      	str	r3, [sp, #0]
    56e0:	4902      	ldr	r1, [pc, #8]	; (56ec <zsock_connected_cb+0x2c>)
    56e2:	2300      	movs	r3, #0
    56e4:	f003 fea0 	bl	9428 <net_context_recv>
}
    56e8:	e7f3      	b.n	56d2 <zsock_connected_cb+0x12>
    56ea:	bf00      	nop
    56ec:	0001f775 	.word	0x0001f775

000056f0 <zsock_socket_internal>:
{
    56f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    56f2:	4607      	mov	r7, r0
    56f4:	460e      	mov	r6, r1
    56f6:	4614      	mov	r4, r2
	int fd = z_reserve_fd();
    56f8:	f7fe f9c4 	bl	3a84 <z_reserve_fd>
	if (fd < 0) {
    56fc:	1e05      	subs	r5, r0, #0
    56fe:	db17      	blt.n	5730 <zsock_socket_internal+0x40>
	if (proto == 0) {
    5700:	b93c      	cbnz	r4, 5712 <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
    5702:	1e7b      	subs	r3, r7, #1
    5704:	2b01      	cmp	r3, #1
    5706:	d804      	bhi.n	5712 <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
    5708:	2e02      	cmp	r6, #2
    570a:	d016      	beq.n	573a <zsock_socket_internal+0x4a>
				proto = IPPROTO_TCP;
    570c:	2e01      	cmp	r6, #1
    570e:	bf08      	it	eq
    5710:	2406      	moveq	r4, #6
	res = net_context_get(family, type, proto, &ctx);
    5712:	b2f1      	uxtb	r1, r6
    5714:	ab01      	add	r3, sp, #4
    5716:	b2a2      	uxth	r2, r4
    5718:	b2b8      	uxth	r0, r7
    571a:	f003 fb99 	bl	8e50 <net_context_get>
	if (res < 0) {
    571e:	1e06      	subs	r6, r0, #0
    5720:	da0d      	bge.n	573e <zsock_socket_internal+0x4e>
		z_free_fd(fd);
    5722:	4628      	mov	r0, r5
    5724:	f019 f828 	bl	1e778 <z_free_fd>
		errno = -res;
    5728:	f01a fc8b 	bl	20042 <__errno>
    572c:	4276      	negs	r6, r6
    572e:	6006      	str	r6, [r0, #0]
		return -1;
    5730:	f04f 35ff 	mov.w	r5, #4294967295
}
    5734:	4628      	mov	r0, r5
    5736:	b003      	add	sp, #12
    5738:	bdf0      	pop	{r4, r5, r6, r7, pc}
				proto = IPPROTO_UDP;
    573a:	2411      	movs	r4, #17
    573c:	e7e9      	b.n	5712 <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
    573e:	2300      	movs	r3, #0
    5740:	9801      	ldr	r0, [sp, #4]
    5742:	6043      	str	r3, [r0, #4]
	ctx->socket_data = NULL;
    5744:	6643      	str	r3, [r0, #100]	; 0x64
	z_impl_k_queue_init(queue);
    5746:	3068      	adds	r0, #104	; 0x68
    5748:	f01e fc03 	bl	23f52 <z_impl_k_queue_init>
	k_condvar_init(&ctx->cond.recv);
    574c:	9801      	ldr	r0, [sp, #4]
    574e:	3080      	adds	r0, #128	; 0x80
	return z_impl_k_condvar_init(condvar);
    5750:	f01e fe78 	bl	24444 <z_impl_k_condvar_init>
	if (proto == IPPROTO_TCP) {
    5754:	2c06      	cmp	r4, #6
    5756:	d102      	bne.n	575e <zsock_socket_internal+0x6e>
		net_context_ref(ctx);
    5758:	9801      	ldr	r0, [sp, #4]
    575a:	f01b fb3f 	bl	20ddc <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    575e:	4628      	mov	r0, r5
    5760:	4a02      	ldr	r2, [pc, #8]	; (576c <zsock_socket_internal+0x7c>)
    5762:	9901      	ldr	r1, [sp, #4]
    5764:	f7fe f9c4 	bl	3af0 <z_finalize_fd>
	return fd;
    5768:	e7e4      	b.n	5734 <zsock_socket_internal+0x44>
    576a:	bf00      	nop
    576c:	00024fdc 	.word	0x00024fdc

00005770 <zsock_accepted_cb>:
			      int status, void *user_data) {
    5770:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5772:	9d06      	ldr	r5, [sp, #24]
    5774:	4604      	mov	r4, r0
	if (status == 0) {
    5776:	b9c3      	cbnz	r3, 57aa <zsock_accepted_cb+0x3a>
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
    5778:	9300      	str	r3, [sp, #0]
    577a:	2200      	movs	r2, #0
    577c:	2300      	movs	r3, #0
    577e:	490c      	ldr	r1, [pc, #48]	; (57b0 <zsock_accepted_cb+0x40>)
    5780:	f003 fe52 	bl	9428 <net_context_recv>
	z_impl_k_queue_init(queue);
    5784:	f104 0068 	add.w	r0, r4, #104	; 0x68
    5788:	f01e fbe3 	bl	23f52 <z_impl_k_queue_init>
	return z_impl_k_condvar_init(condvar);
    578c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    5790:	f01e fe58 	bl	24444 <z_impl_k_condvar_init>
		k_fifo_put(&parent->accept_q, new_ctx);
    5794:	f105 0068 	add.w	r0, r5, #104	; 0x68
    5798:	4621      	mov	r1, r4
    579a:	f01e fc06 	bl	23faa <k_queue_append>
		net_context_ref(new_ctx);
    579e:	4620      	mov	r0, r4
}
    57a0:	b003      	add	sp, #12
    57a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_ref(new_ctx);
    57a6:	f01b bb19 	b.w	20ddc <net_context_ref>
}
    57aa:	b003      	add	sp, #12
    57ac:	bd30      	pop	{r4, r5, pc}
    57ae:	bf00      	nop
    57b0:	0001f775 	.word	0x0001f775

000057b4 <get_sock_vtable.part.0>:
static inline void *get_sock_vtable(int sock,
    57b4:	b580      	push	{r7, lr}
		NET_ERR("invalid access on sock %d by thread %p", sock,
    57b6:	4b0a      	ldr	r3, [pc, #40]	; (57e0 <get_sock_vtable.part.0+0x2c>)
static inline void *get_sock_vtable(int sock,
    57b8:	af00      	add	r7, sp, #0
		NET_ERR("invalid access on sock %d by thread %p", sock,
    57ba:	b088      	sub	sp, #32
    57bc:	466a      	mov	r2, sp
    57be:	689b      	ldr	r3, [r3, #8]
    57c0:	61d3      	str	r3, [r2, #28]
    57c2:	2304      	movs	r3, #4
    57c4:	4907      	ldr	r1, [pc, #28]	; (57e4 <get_sock_vtable.part.0+0x30>)
    57c6:	e9c2 1005 	strd	r1, r0, [r2, #20]
    57ca:	f842 3f10 	str.w	r3, [r2, #16]!
    57ce:	2300      	movs	r3, #0
    57d0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    57d4:	4804      	ldr	r0, [pc, #16]	; (57e8 <get_sock_vtable.part.0+0x34>)
    57d6:	f7ff fb55 	bl	4e84 <z_impl_z_log_msg_static_create>
}
    57da:	46bd      	mov	sp, r7
    57dc:	bd80      	pop	{r7, pc}
    57de:	bf00      	nop
    57e0:	200047dc 	.word	0x200047dc
    57e4:	000325a8 	.word	0x000325a8
    57e8:	00024d30 	.word	0x00024d30

000057ec <zsock_wait_data.part.0>:
			net_pkt_priority(pkt),
			net_pkt_stats_tick(pkt));
	}
}

int zsock_wait_data(struct net_context *ctx, k_timeout_t *timeout)
    57ec:	b580      	push	{r7, lr}
    57ee:	af00      	add	r7, sp, #0
		/* For some reason the lock pointer is not set properly
		 * when called by fdtable.c:z_finalize_fd()
		 * It is not practical to try to figure out the fdtable
		 * lock at this point so skip it.
		 */
		NET_WARN("No lock pointer set for context %p", ctx);
    57f0:	b088      	sub	sp, #32
    57f2:	466a      	mov	r2, sp
    57f4:	4b07      	ldr	r3, [pc, #28]	; (5814 <zsock_wait_data.part.0+0x28>)
    57f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    57fa:	2303      	movs	r3, #3
    57fc:	f842 3f10 	str.w	r3, [r2, #16]!
    5800:	2300      	movs	r3, #0
    5802:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5806:	4804      	ldr	r0, [pc, #16]	; (5818 <zsock_wait_data.part.0+0x2c>)
    5808:	f7ff fb3c 	bl	4e84 <z_impl_z_log_msg_static_create>
		return k_condvar_wait(&ctx->cond.recv, ctx->cond.lock,
				      *timeout);
	}

	return 0;
}
    580c:	f06f 0015 	mvn.w	r0, #21
    5810:	46bd      	mov	sp, r7
    5812:	bd80      	pop	{r7, pc}
    5814:	000325cf 	.word	0x000325cf
    5818:	00024d30 	.word	0x00024d30

0000581c <z_impl_zsock_socket>:
{
    581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5820:	4605      	mov	r5, r0
    5822:	460e      	mov	r6, r1
    5824:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    5826:	4c10      	ldr	r4, [pc, #64]	; (5868 <z_impl_zsock_socket+0x4c>)
    5828:	f8df 8040 	ldr.w	r8, [pc, #64]	; 586c <z_impl_zsock_socket+0x50>
    582c:	4544      	cmp	r4, r8
    582e:	d307      	bcc.n	5840 <z_impl_zsock_socket+0x24>
	errno = EAFNOSUPPORT;
    5830:	f01a fc07 	bl	20042 <__errno>
    5834:	236a      	movs	r3, #106	; 0x6a
    5836:	6003      	str	r3, [r0, #0]
}
    5838:	f04f 30ff 	mov.w	r0, #4294967295
    583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
    5840:	6823      	ldr	r3, [r4, #0]
    5842:	42ab      	cmp	r3, r5
    5844:	d000      	beq.n	5848 <z_impl_zsock_socket+0x2c>
    5846:	b963      	cbnz	r3, 5862 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
    5848:	463a      	mov	r2, r7
    584a:	4631      	mov	r1, r6
    584c:	4628      	mov	r0, r5
    584e:	68a3      	ldr	r3, [r4, #8]
    5850:	4798      	blx	r3
    5852:	b130      	cbz	r0, 5862 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
    5854:	463a      	mov	r2, r7
    5856:	4631      	mov	r1, r6
    5858:	4628      	mov	r0, r5
    585a:	68e3      	ldr	r3, [r4, #12]
}
    585c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
    5860:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    5862:	3410      	adds	r4, #16
    5864:	e7e2      	b.n	582c <z_impl_zsock_socket+0x10>
    5866:	bf00      	nop
    5868:	00024c40 	.word	0x00024c40
    586c:	00024c50 	.word	0x00024c50

00005870 <zsock_bind_ctx>:
{
    5870:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5872:	4605      	mov	r5, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
    5874:	f003 fbcc 	bl	9010 <net_context_bind>
    5878:	1e04      	subs	r4, r0, #0
    587a:	da06      	bge.n	588a <zsock_bind_ctx+0x1a>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    587c:	f01a fbe1 	bl	20042 <__errno>
    5880:	4264      	negs	r4, r4
    5882:	6004      	str	r4, [r0, #0]
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
    5884:	f04f 30ff 	mov.w	r0, #4294967295
    5888:	e006      	b.n	5898 <zsock_bind_ctx+0x28>
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
    588a:	f8b5 3090 	ldrh.w	r3, [r5, #144]	; 0x90
    588e:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
    5892:	2b02      	cmp	r3, #2
    5894:	d002      	beq.n	589c <zsock_bind_ctx+0x2c>
	return 0;
    5896:	2000      	movs	r0, #0
}
    5898:	b003      	add	sp, #12
    589a:	bd30      	pop	{r4, r5, pc}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    589c:	686b      	ldr	r3, [r5, #4]
    589e:	2200      	movs	r2, #0
    58a0:	9300      	str	r3, [sp, #0]
    58a2:	4628      	mov	r0, r5
    58a4:	2300      	movs	r3, #0
    58a6:	4903      	ldr	r1, [pc, #12]	; (58b4 <zsock_bind_ctx+0x44>)
    58a8:	f003 fdbe 	bl	9428 <net_context_recv>
    58ac:	1e04      	subs	r4, r0, #0
    58ae:	daf2      	bge.n	5896 <zsock_bind_ctx+0x26>
    58b0:	e7e4      	b.n	587c <zsock_bind_ctx+0xc>
    58b2:	bf00      	nop
    58b4:	0001f775 	.word	0x0001f775

000058b8 <zsock_connect_ctx>:
{
    58b8:	b5f0      	push	{r4, r5, r6, r7, lr}
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
    58ba:	f8b0 5090 	ldrh.w	r5, [r0, #144]	; 0x90
    58be:	4604      	mov	r4, r0
	return (enum net_context_state)
    58c0:	f3c5 0541 	ubfx	r5, r5, #1, #2
	if (net_context_get_state(ctx) == NET_CONTEXT_CONNECTED) {
    58c4:	2d02      	cmp	r5, #2
{
    58c6:	b085      	sub	sp, #20
	if (net_context_get_state(ctx) == NET_CONTEXT_CONNECTED) {
    58c8:	d03d      	beq.n	5946 <zsock_connect_ctx+0x8e>
	} else if (net_context_get_state(ctx) == NET_CONTEXT_CONNECTING) {
    58ca:	2d01      	cmp	r5, #1
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
    58cc:	6e43      	ldr	r3, [r0, #100]	; 0x64
    58ce:	d110      	bne.n	58f2 <zsock_connect_ctx+0x3a>
		if (sock_is_error(ctx)) {
    58d0:	075b      	lsls	r3, r3, #29
    58d2:	d506      	bpl.n	58e2 <zsock_connect_ctx+0x2a>
			SET_ERRNO(-POINTER_TO_INT(ctx->user_data));
    58d4:	6844      	ldr	r4, [r0, #4]
    58d6:	2c00      	cmp	r4, #0
    58d8:	dd35      	ble.n	5946 <zsock_connect_ctx+0x8e>
    58da:	f01a fbb2 	bl	20042 <__errno>
		SET_ERRNO(net_context_connect(ctx, addr, addrlen,
    58de:	6004      	str	r4, [r0, #0]
    58e0:	e003      	b.n	58ea <zsock_connect_ctx+0x32>
			SET_ERRNO(-EALREADY);
    58e2:	f01a fbae 	bl	20042 <__errno>
    58e6:	2378      	movs	r3, #120	; 0x78
    58e8:	6003      	str	r3, [r0, #0]
			SET_ERRNO(-POINTER_TO_INT(ctx->user_data));
    58ea:	f04f 30ff 	mov.w	r0, #4294967295
}
    58ee:	b005      	add	sp, #20
    58f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (sock_is_nonblock(ctx)) {
    58f2:	f013 0302 	ands.w	r3, r3, #2
    58f6:	d00e      	beq.n	5916 <zsock_connect_ctx+0x5e>
		timeout = K_NO_WAIT;
    58f8:	2600      	movs	r6, #0
    58fa:	2700      	movs	r7, #0
		SET_ERRNO(net_context_connect(ctx, addr, addrlen,
    58fc:	6843      	ldr	r3, [r0, #4]
    58fe:	e9cd 6700 	strd	r6, r7, [sp]
    5902:	9302      	str	r3, [sp, #8]
    5904:	4b11      	ldr	r3, [pc, #68]	; (594c <zsock_connect_ctx+0x94>)
    5906:	f01b fb10 	bl	20f2a <net_context_connect>
    590a:	1e04      	subs	r4, r0, #0
    590c:	da1b      	bge.n	5946 <zsock_connect_ctx+0x8e>
    590e:	f01a fb98 	bl	20042 <__errno>
    5912:	4264      	negs	r4, r4
    5914:	e7e3      	b.n	58de <zsock_connect_ctx+0x26>
		timeout = K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT);
    5916:	f44f 36c0 	mov.w	r6, #98304	; 0x18000
    591a:	2700      	movs	r7, #0
		SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    591c:	9302      	str	r3, [sp, #8]
    591e:	e9cd 6700 	strd	r6, r7, [sp]
    5922:	f01b fb02 	bl	20f2a <net_context_connect>
    5926:	1e05      	subs	r5, r0, #0
    5928:	da04      	bge.n	5934 <zsock_connect_ctx+0x7c>
    592a:	f01a fb8a 	bl	20042 <__errno>
    592e:	426d      	negs	r5, r5
    5930:	6005      	str	r5, [r0, #0]
    5932:	e7da      	b.n	58ea <zsock_connect_ctx+0x32>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    5934:	6863      	ldr	r3, [r4, #4]
    5936:	2200      	movs	r2, #0
    5938:	9300      	str	r3, [sp, #0]
    593a:	4620      	mov	r0, r4
    593c:	2300      	movs	r3, #0
    593e:	4904      	ldr	r1, [pc, #16]	; (5950 <zsock_connect_ctx+0x98>)
    5940:	f003 fd72 	bl	9428 <net_context_recv>
    5944:	e7e1      	b.n	590a <zsock_connect_ctx+0x52>
		return 0;
    5946:	2000      	movs	r0, #0
    5948:	e7d1      	b.n	58ee <zsock_connect_ctx+0x36>
    594a:	bf00      	nop
    594c:	000056c1 	.word	0x000056c1
    5950:	0001f775 	.word	0x0001f775

00005954 <zsock_listen_ctx>:
{
    5954:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5956:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
    5958:	f01b fa91 	bl	20e7e <net_context_listen>
    595c:	1e04      	subs	r4, r0, #0
    595e:	da07      	bge.n	5970 <zsock_listen_ctx+0x1c>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    5960:	f01a fb6f 	bl	20042 <__errno>
    5964:	4264      	negs	r4, r4
    5966:	6004      	str	r4, [r0, #0]
	SET_ERRNO(net_context_listen(ctx, backlog));
    5968:	f04f 30ff 	mov.w	r0, #4294967295
}
    596c:	b003      	add	sp, #12
    596e:	bd30      	pop	{r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    5970:	2200      	movs	r2, #0
    5972:	2300      	movs	r3, #0
    5974:	4628      	mov	r0, r5
    5976:	4904      	ldr	r1, [pc, #16]	; (5988 <zsock_listen_ctx+0x34>)
    5978:	9500      	str	r5, [sp, #0]
    597a:	f01b fb4f 	bl	2101c <net_context_accept>
    597e:	1e04      	subs	r4, r0, #0
    5980:	dbee      	blt.n	5960 <zsock_listen_ctx+0xc>
	return 0;
    5982:	2000      	movs	r0, #0
    5984:	e7f2      	b.n	596c <zsock_listen_ctx+0x18>
    5986:	bf00      	nop
    5988:	00005771 	.word	0x00005771

0000598c <zsock_accept_ctx>:
{
    598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5990:	4604      	mov	r4, r0
    5992:	460f      	mov	r7, r1
    5994:	4616      	mov	r6, r2
	fd = z_reserve_fd();
    5996:	f7fe f875 	bl	3a84 <z_reserve_fd>
	if (fd < 0) {
    599a:	1e05      	subs	r5, r0, #0
    599c:	db17      	blt.n	59ce <zsock_accept_ctx+0x42>
    599e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	if (sock_is_nonblock(parent)) {
    59a0:	f013 0802 	ands.w	r8, r3, #2
    59a4:	bf0c      	ite	eq
    59a6:	f04f 32ff 	moveq.w	r2, #4294967295
    59aa:	2200      	movne	r2, #0
    59ac:	4613      	mov	r3, r2
	return z_impl_k_queue_get(queue, timeout);
    59ae:	f104 0068 	add.w	r0, r4, #104	; 0x68
    59b2:	f00f ff95 	bl	158e0 <z_impl_k_queue_get>
	if (ctx == NULL) {
    59b6:	4604      	mov	r4, r0
    59b8:	b990      	cbnz	r0, 59e0 <zsock_accept_ctx+0x54>
		z_free_fd(fd);
    59ba:	4628      	mov	r0, r5
    59bc:	f018 fedc 	bl	1e778 <z_free_fd>
		if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    59c0:	f1b8 0f00 	cmp.w	r8, #0
    59c4:	d008      	beq.n	59d8 <zsock_accept_ctx+0x4c>
			errno = EAGAIN;
    59c6:	f01a fb3c 	bl	20042 <__errno>
    59ca:	230b      	movs	r3, #11
			errno = EINVAL;
    59cc:	6003      	str	r3, [r0, #0]
		return -1;
    59ce:	f04f 35ff 	mov.w	r5, #4294967295
}
    59d2:	4628      	mov	r0, r5
    59d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			errno = EINVAL;
    59d8:	f01a fb33 	bl	20042 <__errno>
    59dc:	2316      	movs	r3, #22
    59de:	e7f5      	b.n	59cc <zsock_accept_ctx+0x40>
	return z_impl_k_queue_peek_tail(queue);
    59e0:	3068      	adds	r0, #104	; 0x68
    59e2:	f01e fb0a 	bl	23ffa <z_impl_k_queue_peek_tail>
	if (last_pkt) {
    59e6:	b1a0      	cbz	r0, 5a12 <zsock_accept_ctx+0x86>
}

#if defined(CONFIG_NET_SOCKETS)
static inline uint8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
    59e8:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
		if (net_pkt_eof(last_pkt)) {
    59ec:	0799      	lsls	r1, r3, #30
    59ee:	d510      	bpl.n	5a12 <zsock_accept_ctx+0x86>
	val = (val & ~mask) | flag;
    59f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
			z_free_fd(fd);
    59f2:	4628      	mov	r0, r5
    59f4:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
    59f8:	6663      	str	r3, [r4, #100]	; 0x64
    59fa:	f018 febd 	bl	1e778 <z_free_fd>
			zsock_flush_queue(ctx);
    59fe:	4620      	mov	r0, r4
    5a00:	f019 fe9e 	bl	1f740 <zsock_flush_queue>
			net_context_put(ctx);
    5a04:	4620      	mov	r0, r4
    5a06:	f003 fadb 	bl	8fc0 <net_context_put>
			errno = ECONNABORTED;
    5a0a:	f01a fb1a 	bl	20042 <__errno>
    5a0e:	2371      	movs	r3, #113	; 0x71
    5a10:	e7dc      	b.n	59cc <zsock_accept_ctx+0x40>
	return context->flags & NET_CONTEXT_CLOSING_SOCK;
    5a12:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	if (net_context_is_closing(ctx)) {
    5a16:	055a      	lsls	r2, r3, #21
    5a18:	d50d      	bpl.n	5a36 <zsock_accept_ctx+0xaa>
		errno = ECONNABORTED;
    5a1a:	f01a fb12 	bl	20042 <__errno>
    5a1e:	2371      	movs	r3, #113	; 0x71
    5a20:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
    5a22:	4628      	mov	r0, r5
    5a24:	f018 fea8 	bl	1e778 <z_free_fd>
			zsock_flush_queue(ctx);
    5a28:	4620      	mov	r0, r4
    5a2a:	f019 fe89 	bl	1f740 <zsock_flush_queue>
			net_context_put(ctx);
    5a2e:	4620      	mov	r0, r4
    5a30:	f003 fac6 	bl	8fc0 <net_context_put>
			return -1;
    5a34:	e7cb      	b.n	59ce <zsock_accept_ctx+0x42>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
    5a36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5a3a:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
	if (addr != NULL && addrlen != NULL) {
    5a3e:	b177      	cbz	r7, 5a5e <zsock_accept_ctx+0xd2>
    5a40:	b16e      	cbz	r6, 5a5e <zsock_accept_ctx+0xd2>
		int len = MIN(*addrlen, sizeof(ctx->remote));
    5a42:	6832      	ldr	r2, [r6, #0]
    5a44:	4638      	mov	r0, r7
    5a46:	2a08      	cmp	r2, #8
    5a48:	bf28      	it	cs
    5a4a:	2208      	movcs	r2, #8
    5a4c:	f104 0128 	add.w	r1, r4, #40	; 0x28
    5a50:	f7fb f880 	bl	b54 <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
    5a54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5a56:	2b01      	cmp	r3, #1
    5a58:	d107      	bne.n	5a6a <zsock_accept_ctx+0xde>
			*addrlen = sizeof(struct sockaddr_in);
    5a5a:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
    5a5c:	6033      	str	r3, [r6, #0]
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    5a5e:	4621      	mov	r1, r4
    5a60:	4628      	mov	r0, r5
    5a62:	4a08      	ldr	r2, [pc, #32]	; (5a84 <zsock_accept_ctx+0xf8>)
    5a64:	f7fe f844 	bl	3af0 <z_finalize_fd>
	return fd;
    5a68:	e7b3      	b.n	59d2 <zsock_accept_ctx+0x46>
		} else if (ctx->remote.sa_family == AF_INET6) {
    5a6a:	2b02      	cmp	r3, #2
    5a6c:	d101      	bne.n	5a72 <zsock_accept_ctx+0xe6>
			*addrlen = sizeof(struct sockaddr_in6);
    5a6e:	2318      	movs	r3, #24
    5a70:	e7f4      	b.n	5a5c <zsock_accept_ctx+0xd0>
			z_free_fd(fd);
    5a72:	4628      	mov	r0, r5
    5a74:	f018 fe80 	bl	1e778 <z_free_fd>
			errno = ENOTSUP;
    5a78:	f01a fae3 	bl	20042 <__errno>
    5a7c:	2386      	movs	r3, #134	; 0x86
    5a7e:	6003      	str	r3, [r0, #0]
    5a80:	e7d2      	b.n	5a28 <zsock_accept_ctx+0x9c>
    5a82:	bf00      	nop
    5a84:	00024fdc 	.word	0x00024fdc

00005a88 <zsock_sendto_ctx>:
{
    5a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a8c:	4690      	mov	r8, r2
	k_timeout_t timeout = K_FOREVER;
    5a8e:	f04f 3aff 	mov.w	sl, #4294967295
    5a92:	f04f 3bff 	mov.w	fp, #4294967295
	uint32_t retry_timeout = WAIT_BUFS_INITIAL_MS;
    5a96:	220a      	movs	r2, #10
{
    5a98:	b08d      	sub	sp, #52	; 0x34
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    5a9a:	065b      	lsls	r3, r3, #25
{
    5a9c:	4604      	mov	r4, r0
    5a9e:	460f      	mov	r7, r1
	k_timeout_t timeout = K_FOREVER;
    5aa0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
	uint32_t retry_timeout = WAIT_BUFS_INITIAL_MS;
    5aa4:	9209      	str	r2, [sp, #36]	; 0x24
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    5aa6:	d403      	bmi.n	5ab0 <zsock_sendto_ctx+0x28>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
    5aa8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    5aaa:	f013 0302 	ands.w	r3, r3, #2
    5aae:	d041      	beq.n	5b34 <zsock_sendto_ctx+0xac>
		timeout = K_NO_WAIT;
    5ab0:	2500      	movs	r5, #0
    5ab2:	462e      	mov	r6, r5
    5ab4:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	end = sys_clock_timeout_end_calc(timeout);
    5ab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    5abc:	f01e fd06 	bl	244cc <sys_clock_timeout_end_calc>
	status = net_context_recv(ctx, zsock_received_cb,
    5ac0:	6863      	ldr	r3, [r4, #4]
	end = sys_clock_timeout_end_calc(timeout);
    5ac2:	9107      	str	r1, [sp, #28]
	status = net_context_recv(ctx, zsock_received_cb,
    5ac4:	9300      	str	r3, [sp, #0]
	end = sys_clock_timeout_end_calc(timeout);
    5ac6:	4681      	mov	r9, r0
	status = net_context_recv(ctx, zsock_received_cb,
    5ac8:	2200      	movs	r2, #0
    5aca:	2300      	movs	r3, #0
    5acc:	4620      	mov	r0, r4
    5ace:	4929      	ldr	r1, [pc, #164]	; (5b74 <zsock_sendto_ctx+0xec>)
    5ad0:	f003 fcaa 	bl	9428 <net_context_recv>
	if (status < 0) {
    5ad4:	f1b0 0a00 	subs.w	sl, r0, #0
    5ad8:	db38      	blt.n	5b4c <zsock_sendto_ctx+0xc4>
			status = net_context_sendto(ctx, buf, len, dest_addr,
    5ada:	f04f 0a00 	mov.w	sl, #0
			status = send_check_and_wait(ctx, status, buf_timeout,
    5ade:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
		if (dest_addr) {
    5ae2:	9816      	ldr	r0, [sp, #88]	; 0x58
			status = net_context_sendto(ctx, buf, len, dest_addr,
    5ae4:	6861      	ldr	r1, [r4, #4]
    5ae6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
		if (dest_addr) {
    5aea:	2800      	cmp	r0, #0
    5aec:	d038      	beq.n	5b60 <zsock_sendto_ctx+0xd8>
			status = net_context_sendto(ctx, buf, len, dest_addr,
    5aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5af4:	9104      	str	r1, [sp, #16]
    5af6:	9300      	str	r3, [sp, #0]
    5af8:	4642      	mov	r2, r8
    5afa:	4603      	mov	r3, r0
    5afc:	4639      	mov	r1, r7
    5afe:	4620      	mov	r0, r4
    5b00:	f8cd a004 	str.w	sl, [sp, #4]
    5b04:	f01b fb10 	bl	21128 <net_context_sendto>
		if (status < 0) {
    5b08:	2800      	cmp	r0, #0
    5b0a:	da26      	bge.n	5b5a <zsock_sendto_ctx+0xd2>
			status = send_check_and_wait(ctx, status, buf_timeout,
    5b0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    5b10:	4601      	mov	r1, r0
    5b12:	e9cd 2300 	strd	r2, r3, [sp]
    5b16:	4620      	mov	r0, r4
    5b18:	462a      	mov	r2, r5
    5b1a:	4633      	mov	r3, r6
    5b1c:	f8cd b008 	str.w	fp, [sp, #8]
    5b20:	f019 fe73 	bl	1f80a <send_check_and_wait>
			if (status < 0) {
    5b24:	2800      	cmp	r0, #0
    5b26:	db18      	blt.n	5b5a <zsock_sendto_ctx+0xd2>
			timeout_recalc(end, &timeout);
    5b28:	4648      	mov	r0, r9
    5b2a:	9907      	ldr	r1, [sp, #28]
    5b2c:	aa0a      	add	r2, sp, #40	; 0x28
    5b2e:	f019 fde5 	bl	1f6fc <timeout_recalc>
		if (dest_addr) {
    5b32:	e7d6      	b.n	5ae2 <zsock_sendto_ctx+0x5a>
		net_context_get_option(ctx, NET_OPT_SNDTIMEO, &timeout, NULL);
    5b34:	2105      	movs	r1, #5
    5b36:	aa0a      	add	r2, sp, #40	; 0x28
    5b38:	f003 fd38 	bl	95ac <net_context_get_option>
		buf_timeout = sys_clock_timeout_end_calc(MAX_WAIT_BUFS);
    5b3c:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    5b40:	2100      	movs	r1, #0
    5b42:	f01e fcc3 	bl	244cc <sys_clock_timeout_end_calc>
    5b46:	4605      	mov	r5, r0
    5b48:	460e      	mov	r6, r1
    5b4a:	e7b5      	b.n	5ab8 <zsock_sendto_ctx+0x30>
		errno = -status;
    5b4c:	f01a fa79 	bl	20042 <__errno>
    5b50:	f1ca 0300 	rsb	r3, sl, #0
    5b54:	6003      	str	r3, [r0, #0]
		return -1;
    5b56:	f04f 30ff 	mov.w	r0, #4294967295
}
    5b5a:	b00d      	add	sp, #52	; 0x34
    5b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = net_context_send(ctx, buf, len, NULL, timeout,
    5b60:	e9cd 2300 	strd	r2, r3, [sp]
    5b64:	9102      	str	r1, [sp, #8]
    5b66:	4642      	mov	r2, r8
    5b68:	4639      	mov	r1, r7
    5b6a:	4620      	mov	r0, r4
    5b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5b6e:	f01b fa86 	bl	2107e <net_context_send>
    5b72:	e7c9      	b.n	5b08 <zsock_sendto_ctx+0x80>
    5b74:	0001f775 	.word	0x0001f775

00005b78 <zsock_recvfrom_ctx>:
}

ssize_t zsock_recvfrom_ctx(struct net_context *ctx, void *buf, size_t max_len,
			   int flags,
			   struct sockaddr *src_addr, socklen_t *addrlen)
{
    5b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b7c:	b093      	sub	sp, #76	; 0x4c
    5b7e:	af00      	add	r7, sp, #0
    5b80:	4605      	mov	r5, r0
    5b82:	e9d7 681c 	ldrd	r6, r8, [r7, #112]	; 0x70
    5b86:	6139      	str	r1, [r7, #16]
    5b88:	61bb      	str	r3, [r7, #24]
	enum net_sock_type sock_type = net_context_get_type(ctx);

	if (max_len == 0) {
    5b8a:	61fa      	str	r2, [r7, #28]
    5b8c:	2a00      	cmp	r2, #0
    5b8e:	f000 8148 	beq.w	5e22 <zsock_recvfrom_ctx+0x2aa>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
    5b92:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
    5b96:	f3c3 1281 	ubfx	r2, r3, #6, #2
		return 0;
	}

	if (sock_type == SOCK_DGRAM) {
    5b9a:	2a02      	cmp	r2, #2
    5b9c:	f040 8102 	bne.w	5da4 <zsock_recvfrom_ctx+0x22c>
	k_timeout_t timeout = K_FOREVER;
    5ba0:	f04f 33ff 	mov.w	r3, #4294967295
    5ba4:	f04f 32ff 	mov.w	r2, #4294967295
    5ba8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    5bac:	69bb      	ldr	r3, [r7, #24]
    5bae:	065c      	lsls	r4, r3, #25
    5bb0:	d403      	bmi.n	5bba <zsock_recvfrom_ctx+0x42>
    5bb2:	6e43      	ldr	r3, [r0, #100]	; 0x64
    5bb4:	f013 0302 	ands.w	r3, r3, #2
    5bb8:	d02c      	beq.n	5c14 <zsock_recvfrom_ctx+0x9c>
		timeout = K_NO_WAIT;
    5bba:	2200      	movs	r2, #0
    5bbc:	2300      	movs	r3, #0
    5bbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (flags & ZSOCK_MSG_PEEK) {
    5bc2:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
    5bc6:	69bb      	ldr	r3, [r7, #24]
		res = fifo_wait_non_empty(&ctx->recv_q, timeout);
    5bc8:	f105 0468 	add.w	r4, r5, #104	; 0x68
	if (flags & ZSOCK_MSG_PEEK) {
    5bcc:	f013 0302 	ands.w	r3, r3, #2
    5bd0:	617b      	str	r3, [r7, #20]
    5bd2:	d039      	beq.n	5c48 <zsock_recvfrom_ctx+0xd0>
	struct k_poll_event events[] = {
    5bd4:	2210      	movs	r2, #16
    5bd6:	2100      	movs	r1, #0
    5bd8:	f107 0030 	add.w	r0, r7, #48	; 0x30
    5bdc:	f011 fbfc 	bl	173d8 <memset>
    5be0:	2304      	movs	r3, #4
    5be2:	643c      	str	r4, [r7, #64]	; 0x40
    5be4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    5be8:	2101      	movs	r1, #1
    5bea:	4652      	mov	r2, sl
    5bec:	465b      	mov	r3, fp
    5bee:	f107 0030 	add.w	r0, r7, #48	; 0x30
    5bf2:	f010 feab 	bl	1694c <z_impl_k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
    5bf6:	f100 020b 	add.w	r2, r0, #11
    5bfa:	2a0b      	cmp	r2, #11
    5bfc:	4681      	mov	r9, r0
    5bfe:	d803      	bhi.n	5c08 <zsock_recvfrom_ctx+0x90>
    5c00:	4ba6      	ldr	r3, [pc, #664]	; (5e9c <zsock_recvfrom_ctx+0x324>)
    5c02:	4113      	asrs	r3, r2
    5c04:	07d9      	lsls	r1, r3, #31
    5c06:	d516      	bpl.n	5c36 <zsock_recvfrom_ctx+0xbe>
			errno = -res;
    5c08:	f01a fa1b 	bl	20042 <__errno>
    5c0c:	f1c9 0300 	rsb	r3, r9, #0
		errno = ENOTCONN;
    5c10:	6003      	str	r3, [r0, #0]
		return -1;
    5c12:	e09d      	b.n	5d50 <zsock_recvfrom_ctx+0x1d8>
		net_context_get_option(ctx, NET_OPT_RCVTIMEO, &timeout, NULL);
    5c14:	2104      	movs	r1, #4
    5c16:	f107 0220 	add.w	r2, r7, #32
    5c1a:	f003 fcc7 	bl	95ac <net_context_get_option>
		ret = zsock_wait_data(ctx, &timeout);
    5c1e:	4628      	mov	r0, r5
    5c20:	f107 0120 	add.w	r1, r7, #32
    5c24:	f01a f845 	bl	1fcb2 <zsock_wait_data>
		if (ret < 0) {
    5c28:	1e04      	subs	r4, r0, #0
    5c2a:	daca      	bge.n	5bc2 <zsock_recvfrom_ctx+0x4a>
				errno = -res;
    5c2c:	f01a fa09 	bl	20042 <__errno>
    5c30:	4264      	negs	r4, r4
				errno = POINTER_TO_INT(ctx->user_data);
    5c32:	6004      	str	r4, [r0, #0]
				return -1;
    5c34:	e08c      	b.n	5d50 <zsock_recvfrom_ctx+0x1d8>
	return z_impl_k_queue_peek_head(queue);
    5c36:	4620      	mov	r0, r4
    5c38:	f01e f9db 	bl	23ff2 <z_impl_k_queue_peek_head>
	return z_impl_k_queue_get(queue, timeout);
    5c3c:	4604      	mov	r4, r0
	if (!pkt) {
    5c3e:	b948      	cbnz	r0, 5c54 <zsock_recvfrom_ctx+0xdc>
				errno = EAGAIN;
    5c40:	f01a f9ff 	bl	20042 <__errno>
    5c44:	230b      	movs	r3, #11
    5c46:	e7e3      	b.n	5c10 <zsock_recvfrom_ctx+0x98>
    5c48:	4652      	mov	r2, sl
    5c4a:	465b      	mov	r3, fp
    5c4c:	4620      	mov	r0, r4
    5c4e:	f00f fe47 	bl	158e0 <z_impl_k_queue_get>
    5c52:	e7f3      	b.n	5c3c <zsock_recvfrom_ctx+0xc4>
 */
static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
					 struct net_pkt_cursor *backup)
{
	backup->buf = pkt->cursor.buf;
	backup->pos = pkt->cursor.pos;
    5c54:	e9d0 a903 	ldrd	sl, r9, [r0, #12]
	if (src_addr && addrlen) {
    5c58:	2e00      	cmp	r6, #0
    5c5a:	d04a      	beq.n	5cf2 <zsock_recvfrom_ctx+0x17a>
    5c5c:	f1b8 0f00 	cmp.w	r8, #0
    5c60:	d047      	beq.n	5cf2 <zsock_recvfrom_ctx+0x17a>
 *
 * @return Network context IP protocol.
 */
static inline uint16_t net_context_get_proto(struct net_context *context)
{
	return context->proto;
    5c62:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
			rv = sock_get_pkt_src_addr(pkt, net_context_get_proto(ctx),
    5c66:	f8d8 5000 	ldr.w	r5, [r8]
    5c6a:	60fb      	str	r3, [r7, #12]
	net_pkt_cursor_init(pkt);
    5c6c:	f01b fc33 	bl	214d6 <net_pkt_cursor_init>
	return pkt->family;
    5c70:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	addr->sa_family = net_pkt_family(pkt);
    5c74:	095b      	lsrs	r3, r3, #5
    5c76:	8033      	strh	r3, [r6, #0]
    5c78:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
    5c7c:	095b      	lsrs	r3, r3, #5
    5c7e:	2b01      	cmp	r3, #1
    5c80:	d172      	bne.n	5d68 <zsock_recvfrom_ctx+0x1f0>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
    5c82:	2200      	movs	r2, #0
    5c84:	2314      	movs	r3, #20
		if (addrlen < sizeof(struct sockaddr_in)) {
    5c86:	2d07      	cmp	r5, #7
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
    5c88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (addrlen < sizeof(struct sockaddr_in)) {
    5c8c:	d943      	bls.n	5d16 <zsock_recvfrom_ctx+0x19e>
		ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(
    5c8e:	f107 0b30 	add.w	fp, r7, #48	; 0x30
    5c92:	4659      	mov	r1, fp
    5c94:	4620      	mov	r0, r4
    5c96:	f003 fe41 	bl	991c <net_pkt_get_data>
		if (!ipv4_hdr ||
    5c9a:	4605      	mov	r5, r0
    5c9c:	b910      	cbnz	r0, 5ca4 <zsock_recvfrom_ctx+0x12c>
			ret = -ENOBUFS;
    5c9e:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5ca2:	e03a      	b.n	5d1a <zsock_recvfrom_ctx+0x1a2>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
    5ca4:	4620      	mov	r0, r4
    5ca6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    5ca8:	f01b fc7f 	bl	215aa <net_pkt_skip>
		if (!ipv4_hdr ||
    5cac:	2800      	cmp	r0, #0
    5cae:	d1f6      	bne.n	5c9e <zsock_recvfrom_ctx+0x126>
		    net_pkt_skip(pkt, net_pkt_ipv4_opts_len(pkt))) {
    5cb0:	4620      	mov	r0, r4
    5cb2:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
    5cb6:	f01b fc78 	bl	215aa <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv4_access) ||
    5cba:	2800      	cmp	r0, #0
    5cbc:	d1ef      	bne.n	5c9e <zsock_recvfrom_ctx+0x126>
 *  @param src Source IP address.
 */
static inline void net_ipv4_addr_copy_raw(uint8_t *dest,
					  const uint8_t *src)
{
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
    5cbe:	68ea      	ldr	r2, [r5, #12]
			rv = sock_get_pkt_src_addr(pkt, net_context_get_proto(ctx),
    5cc0:	7b3b      	ldrb	r3, [r7, #12]
    5cc2:	6072      	str	r2, [r6, #4]
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    5cc4:	2b11      	cmp	r3, #17
    5cc6:	d146      	bne.n	5d56 <zsock_recvfrom_ctx+0x1de>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
    5cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
    5ccc:	633b      	str	r3, [r7, #48]	; 0x30
    5cce:	2308      	movs	r3, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
    5cd0:	4659      	mov	r1, fp
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
    5cd2:	637b      	str	r3, [r7, #52]	; 0x34
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
    5cd4:	4620      	mov	r0, r4
    5cd6:	f003 fe21 	bl	991c <net_pkt_get_data>
		if (!tcp_hdr) {
    5cda:	2800      	cmp	r0, #0
    5cdc:	d0df      	beq.n	5c9e <zsock_recvfrom_ctx+0x126>
		*port = tcp_hdr->src_port;
    5cde:	8803      	ldrh	r3, [r0, #0]
    5ce0:	8073      	strh	r3, [r6, #2]
	pkt->cursor.pos = backup->pos;
    5ce2:	e9c4 a903 	strd	sl, r9, [r4, #12]
		if (src_addr->sa_family == AF_INET) {
    5ce6:	8833      	ldrh	r3, [r6, #0]
    5ce8:	2b01      	cmp	r3, #1
    5cea:	d140      	bne.n	5d6e <zsock_recvfrom_ctx+0x1f6>
			*addrlen = sizeof(struct sockaddr_in);
    5cec:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
    5cee:	f8c8 3000 	str.w	r3, [r8]
	recv_len = net_pkt_remaining_data(pkt);
    5cf2:	4620      	mov	r0, r4
    5cf4:	f01b fd5d 	bl	217b2 <net_pkt_remaining_data>
	read_len = MIN(recv_len, max_len);
    5cf8:	69fe      	ldr	r6, [r7, #28]
	recv_len = net_pkt_remaining_data(pkt);
    5cfa:	4605      	mov	r5, r0
	read_len = MIN(recv_len, max_len);
    5cfc:	4286      	cmp	r6, r0
    5cfe:	bf28      	it	cs
    5d00:	4606      	movcs	r6, r0
	if (net_pkt_read(pkt, buf, read_len)) {
    5d02:	6939      	ldr	r1, [r7, #16]
    5d04:	4632      	mov	r2, r6
    5d06:	4620      	mov	r0, r4
    5d08:	f01b fce9 	bl	216de <net_pkt_read>
    5d0c:	b3c0      	cbz	r0, 5d80 <zsock_recvfrom_ctx+0x208>
		errno = ENOBUFS;
    5d0e:	f01a f998 	bl	20042 <__errno>
    5d12:	2369      	movs	r3, #105	; 0x69
    5d14:	e032      	b.n	5d7c <zsock_recvfrom_ctx+0x204>
			ret = -EINVAL;
    5d16:	f06f 0515 	mvn.w	r5, #21
    5d1a:	e9c4 a903 	strd	sl, r9, [r4, #12]
				errno = -rv;
    5d1e:	f01a f990 	bl	20042 <__errno>
				LOG_ERR("sock_get_pkt_src_addr %d", rv);
    5d22:	466e      	mov	r6, sp
				errno = -rv;
    5d24:	426b      	negs	r3, r5
				LOG_ERR("sock_get_pkt_src_addr %d", rv);
    5d26:	b088      	sub	sp, #32
				errno = -rv;
    5d28:	6003      	str	r3, [r0, #0]
				LOG_ERR("sock_get_pkt_src_addr %d", rv);
    5d2a:	466a      	mov	r2, sp
    5d2c:	4b5c      	ldr	r3, [pc, #368]	; (5ea0 <zsock_recvfrom_ctx+0x328>)
    5d2e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    5d32:	2303      	movs	r3, #3
    5d34:	f842 3f10 	str.w	r3, [r2, #16]!
    5d38:	2300      	movs	r3, #0
    5d3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5d3e:	4859      	ldr	r0, [pc, #356]	; (5ea4 <zsock_recvfrom_ctx+0x32c>)
    5d40:	f7ff f8a0 	bl	4e84 <z_impl_z_log_msg_static_create>
    5d44:	46b5      	mov	sp, r6
	if (!(flags & ZSOCK_MSG_PEEK)) {
    5d46:	697b      	ldr	r3, [r7, #20]
    5d48:	b913      	cbnz	r3, 5d50 <zsock_recvfrom_ctx+0x1d8>
		net_pkt_unref(pkt);
    5d4a:	4620      	mov	r0, r4
    5d4c:	f01b fb32 	bl	213b4 <net_pkt_unref>
		return -1;
    5d50:	f04f 36ff 	mov.w	r6, #4294967295
    5d54:	e01e      	b.n	5d94 <zsock_recvfrom_ctx+0x21c>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
    5d56:	2b06      	cmp	r3, #6
    5d58:	d106      	bne.n	5d68 <zsock_recvfrom_ctx+0x1f0>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
    5d5a:	2314      	movs	r3, #20
    5d5c:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
    5d60:	62fb      	str	r3, [r7, #44]	; 0x2c
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
    5d62:	f107 0128 	add.w	r1, r7, #40	; 0x28
    5d66:	e7b5      	b.n	5cd4 <zsock_recvfrom_ctx+0x15c>
		ret = -ENOTSUP;
    5d68:	f06f 0585 	mvn.w	r5, #133	; 0x85
    5d6c:	e7d5      	b.n	5d1a <zsock_recvfrom_ctx+0x1a2>
		} else if (src_addr->sa_family == AF_INET6) {
    5d6e:	2b02      	cmp	r3, #2
    5d70:	d101      	bne.n	5d76 <zsock_recvfrom_ctx+0x1fe>
			*addrlen = sizeof(struct sockaddr_in6);
    5d72:	2318      	movs	r3, #24
    5d74:	e7bb      	b.n	5cee <zsock_recvfrom_ctx+0x176>
			errno = ENOTSUP;
    5d76:	f01a f964 	bl	20042 <__errno>
    5d7a:	2386      	movs	r3, #134	; 0x86
		errno = ENOBUFS;
    5d7c:	6003      	str	r3, [r0, #0]
		goto fail;
    5d7e:	e7e2      	b.n	5d46 <zsock_recvfrom_ctx+0x1ce>
	if (!(flags & ZSOCK_MSG_PEEK)) {
    5d80:	697b      	ldr	r3, [r7, #20]
    5d82:	b963      	cbnz	r3, 5d9e <zsock_recvfrom_ctx+0x226>
		net_pkt_unref(pkt);
    5d84:	4620      	mov	r0, r4
    5d86:	f01b fb15 	bl	213b4 <net_pkt_unref>
	return (flags & ZSOCK_MSG_TRUNC) ? recv_len : read_len;
    5d8a:	69bb      	ldr	r3, [r7, #24]
    5d8c:	f013 0f20 	tst.w	r3, #32
    5d90:	bf18      	it	ne
    5d92:	462e      	movne	r6, r5
	} else {
		__ASSERT(0, "Unknown socket type");
	}

	return 0;
}
    5d94:	4630      	mov	r0, r6
    5d96:	374c      	adds	r7, #76	; 0x4c
    5d98:	46bd      	mov	sp, r7
    5d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d9e:	e9c4 a903 	strd	sl, r9, [r4, #12]
}
    5da2:	e7f2      	b.n	5d8a <zsock_recvfrom_ctx+0x212>
	} else if (sock_type == SOCK_STREAM) {
    5da4:	2a01      	cmp	r2, #1
    5da6:	d13c      	bne.n	5e22 <zsock_recvfrom_ctx+0x2aa>
	k_timeout_t timeout = K_FOREVER;
    5da8:	f04f 38ff 	mov.w	r8, #4294967295
    5dac:	f04f 39ff 	mov.w	r9, #4294967295
	const bool waitall = flags & ZSOCK_MSG_WAITALL;
    5db0:	69ba      	ldr	r2, [r7, #24]
	if (!net_context_is_used(ctx)) {
    5db2:	f013 0b01 	ands.w	fp, r3, #1
	k_timeout_t timeout = K_FOREVER;
    5db6:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
	const bool waitall = flags & ZSOCK_MSG_WAITALL;
    5dba:	f402 7880 	and.w	r8, r2, #256	; 0x100
	if (!net_context_is_used(ctx)) {
    5dbe:	d103      	bne.n	5dc8 <zsock_recvfrom_ctx+0x250>
		errno = EBADF;
    5dc0:	f01a f93f 	bl	20042 <__errno>
    5dc4:	2309      	movs	r3, #9
    5dc6:	e723      	b.n	5c10 <zsock_recvfrom_ctx+0x98>
	if (net_context_get_state(ctx) != NET_CONTEXT_CONNECTED) {
    5dc8:	f3c3 0341 	ubfx	r3, r3, #1, #2
    5dcc:	2b02      	cmp	r3, #2
    5dce:	d003      	beq.n	5dd8 <zsock_recvfrom_ctx+0x260>
		errno = ENOTCONN;
    5dd0:	f01a f937 	bl	20042 <__errno>
    5dd4:	2380      	movs	r3, #128	; 0x80
    5dd6:	e71b      	b.n	5c10 <zsock_recvfrom_ctx+0x98>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    5dd8:	69bb      	ldr	r3, [r7, #24]
    5dda:	065b      	lsls	r3, r3, #25
    5ddc:	d402      	bmi.n	5de4 <zsock_recvfrom_ctx+0x26c>
    5dde:	6e43      	ldr	r3, [r0, #100]	; 0x64
    5de0:	079e      	lsls	r6, r3, #30
    5de2:	d513      	bpl.n	5e0c <zsock_recvfrom_ctx+0x294>
		timeout = K_NO_WAIT;
    5de4:	2200      	movs	r2, #0
    5de6:	2300      	movs	r3, #0
    5de8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	end = sys_clock_timeout_end_calc(timeout);
    5dec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
    5df0:	f01e fb6c 	bl	244cc <sys_clock_timeout_end_calc>
	size_t recv_len = 0;
    5df4:	2600      	movs	r6, #0
	end = sys_clock_timeout_end_calc(timeout);
    5df6:	e9c7 1001 	strd	r1, r0, [r7, #4]
		pkt = k_fifo_peek_head(&ctx->recv_q);
    5dfa:	f105 0a68 	add.w	sl, r5, #104	; 0x68
    5dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		if (sock_is_error(ctx)) {
    5e00:	075c      	lsls	r4, r3, #29
    5e02:	d50c      	bpl.n	5e1e <zsock_recvfrom_ctx+0x2a6>
				errno = POINTER_TO_INT(ctx->user_data);
    5e04:	686c      	ldr	r4, [r5, #4]
    5e06:	f01a f91c 	bl	20042 <__errno>
    5e0a:	e712      	b.n	5c32 <zsock_recvfrom_ctx+0xba>
	} else if (!sock_is_eof(ctx) && !sock_is_error(ctx)) {
    5e0c:	f013 0305 	ands.w	r3, r3, #5
    5e10:	d1ec      	bne.n	5dec <zsock_recvfrom_ctx+0x274>
		net_context_get_option(ctx, NET_OPT_RCVTIMEO, &timeout, NULL);
    5e12:	2104      	movs	r1, #4
    5e14:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5e18:	f003 fbc8 	bl	95ac <net_context_get_option>
    5e1c:	e7e6      	b.n	5dec <zsock_recvfrom_ctx+0x274>
		if (sock_is_eof(ctx)) {
    5e1e:	07d8      	lsls	r0, r3, #31
    5e20:	d501      	bpl.n	5e26 <zsock_recvfrom_ctx+0x2ae>
		return 0;
    5e22:	2600      	movs	r6, #0
    5e24:	e7b6      	b.n	5d94 <zsock_recvfrom_ctx+0x21c>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5e26:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    5e2a:	4313      	orrs	r3, r2
    5e2c:	d007      	beq.n	5e3e <zsock_recvfrom_ctx+0x2c6>
			res = zsock_wait_data(ctx, &timeout);
    5e2e:	4628      	mov	r0, r5
    5e30:	f107 0130 	add.w	r1, r7, #48	; 0x30
    5e34:	f019 ff3d 	bl	1fcb2 <zsock_wait_data>
			if (res < 0) {
    5e38:	1e04      	subs	r4, r0, #0
    5e3a:	f6ff aef7 	blt.w	5c2c <zsock_recvfrom_ctx+0xb4>
	return z_impl_k_queue_peek_head(queue);
    5e3e:	4650      	mov	r0, sl
    5e40:	f01e f8d7 	bl	23ff2 <z_impl_k_queue_peek_head>
		if (!pkt) {
    5e44:	4604      	mov	r4, r0
    5e46:	b950      	cbnz	r0, 5e5e <zsock_recvfrom_ctx+0x2e6>
			if (waitall && (recv_len > 0)) {
    5e48:	f1b8 0f00 	cmp.w	r8, #0
    5e4c:	d001      	beq.n	5e52 <zsock_recvfrom_ctx+0x2da>
    5e4e:	2e00      	cmp	r6, #0
    5e50:	d1a0      	bne.n	5d94 <zsock_recvfrom_ctx+0x21c>
    5e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
			} else if (sock_is_error(ctx)) {
    5e54:	0759      	lsls	r1, r3, #29
    5e56:	d4d5      	bmi.n	5e04 <zsock_recvfrom_ctx+0x28c>
			} else if (sock_is_eof(ctx)) {
    5e58:	07da      	lsls	r2, r3, #31
    5e5a:	d4e2      	bmi.n	5e22 <zsock_recvfrom_ctx+0x2aa>
    5e5c:	e6f0      	b.n	5c40 <zsock_recvfrom_ctx+0xc8>
	backup->buf = pkt->cursor.buf;
    5e5e:	68c3      	ldr	r3, [r0, #12]
    5e60:	617b      	str	r3, [r7, #20]
	backup->pos = pkt->cursor.pos;
    5e62:	6903      	ldr	r3, [r0, #16]
    5e64:	60fb      	str	r3, [r7, #12]
		data_len = net_pkt_remaining_data(pkt);
    5e66:	f01b fca4 	bl	217b2 <net_pkt_remaining_data>
		if (recv_len + read_len > max_len) {
    5e6a:	69fa      	ldr	r2, [r7, #28]
    5e6c:	1983      	adds	r3, r0, r6
    5e6e:	429a      	cmp	r2, r3
			read_len = max_len - recv_len;
    5e70:	bf38      	it	cc
    5e72:	4613      	movcc	r3, r2
		data_len = net_pkt_remaining_data(pkt);
    5e74:	4681      	mov	r9, r0
		bool release_pkt = true;
    5e76:	bf2e      	itee	cs
    5e78:	465b      	movcs	r3, fp
			read_len = max_len - recv_len;
    5e7a:	eba3 0906 	subcc.w	r9, r3, r6
			release_pkt = false;
    5e7e:	2300      	movcc	r3, #0
    5e80:	603b      	str	r3, [r7, #0]
		if (net_pkt_read(pkt, (uint8_t *)buf + recv_len, read_len)) {
    5e82:	693b      	ldr	r3, [r7, #16]
    5e84:	464a      	mov	r2, r9
    5e86:	1999      	adds	r1, r3, r6
    5e88:	4620      	mov	r0, r4
    5e8a:	f01b fc28 	bl	216de <net_pkt_read>
    5e8e:	683b      	ldr	r3, [r7, #0]
    5e90:	b150      	cbz	r0, 5ea8 <zsock_recvfrom_ctx+0x330>
			errno = ENOBUFS;
    5e92:	f01a f8d6 	bl	20042 <__errno>
    5e96:	2369      	movs	r3, #105	; 0x69
    5e98:	e6ba      	b.n	5c10 <zsock_recvfrom_ctx+0x98>
    5e9a:	bf00      	nop
    5e9c:	fffff77e 	.word	0xfffff77e
    5ea0:	000325f2 	.word	0x000325f2
    5ea4:	00024d30 	.word	0x00024d30
		if (!(flags & ZSOCK_MSG_PEEK)) {
    5ea8:	69ba      	ldr	r2, [r7, #24]
		recv_len += read_len;
    5eaa:	444e      	add	r6, r9
		if (!(flags & ZSOCK_MSG_PEEK)) {
    5eac:	f012 0902 	ands.w	r9, r2, #2
    5eb0:	d127      	bne.n	5f02 <zsock_recvfrom_ctx+0x38a>
			if (release_pkt) {
    5eb2:	b17b      	cbz	r3, 5ed4 <zsock_recvfrom_ctx+0x35c>
	return z_impl_k_queue_get(queue, timeout);
    5eb4:	2300      	movs	r3, #0
    5eb6:	2200      	movs	r2, #0
    5eb8:	4650      	mov	r0, sl
    5eba:	f00f fd11 	bl	158e0 <z_impl_k_queue_get>
	return pkt->sent_or_eof;
    5ebe:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
				net_pkt_unref(pkt);
    5ec2:	4620      	mov	r0, r4
				if (net_pkt_eof(pkt)) {
    5ec4:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
    5ec6:	bf42      	ittt	mi
    5ec8:	6e6b      	ldrmi	r3, [r5, #100]	; 0x64
    5eca:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
    5ece:	666b      	strmi	r3, [r5, #100]	; 0x64
				net_pkt_unref(pkt);
    5ed0:	f01b fa70 	bl	213b4 <net_pkt_unref>
		timeout_recalc(end, &timeout);
    5ed4:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
    5ed8:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5edc:	f019 fc0e 	bl	1f6fc <timeout_recalc>
	} while ((recv_len == 0) || (waitall && (recv_len < max_len)));
    5ee0:	2e00      	cmp	r6, #0
    5ee2:	d08c      	beq.n	5dfe <zsock_recvfrom_ctx+0x286>
    5ee4:	f1b8 0f00 	cmp.w	r8, #0
    5ee8:	d002      	beq.n	5ef0 <zsock_recvfrom_ctx+0x378>
    5eea:	69fb      	ldr	r3, [r7, #28]
    5eec:	42b3      	cmp	r3, r6
    5eee:	d886      	bhi.n	5dfe <zsock_recvfrom_ctx+0x286>
	if (!(flags & ZSOCK_MSG_PEEK)) {
    5ef0:	f1b9 0f00 	cmp.w	r9, #0
    5ef4:	f47f af4e 	bne.w	5d94 <zsock_recvfrom_ctx+0x21c>
		net_context_update_recv_wnd(ctx, recv_len);
    5ef8:	4631      	mov	r1, r6
    5efa:	4628      	mov	r0, r5
    5efc:	f01b f939 	bl	21172 <net_context_update_recv_wnd>
		return zsock_recv_stream(ctx, buf, max_len, flags);
    5f00:	e748      	b.n	5d94 <zsock_recvfrom_ctx+0x21c>
	pkt->cursor.buf = backup->buf;
    5f02:	697b      	ldr	r3, [r7, #20]
    5f04:	60e3      	str	r3, [r4, #12]
	pkt->cursor.pos = backup->pos;
    5f06:	68fb      	ldr	r3, [r7, #12]
    5f08:	6123      	str	r3, [r4, #16]
}
    5f0a:	e7e3      	b.n	5ed4 <zsock_recvfrom_ctx+0x35c>

00005f0c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    5f0c:	4801      	ldr	r0, [pc, #4]	; (5f14 <nrf_cc3xx_platform_abort_init+0x8>)
    5f0e:	f015 bdc3 	b.w	1ba98 <nrf_cc3xx_platform_set_abort>
    5f12:	bf00      	nop
    5f14:	0002501c 	.word	0x0002501c

00005f18 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5f18:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    5f1a:	4604      	mov	r4, r0
    5f1c:	b918      	cbnz	r0, 5f26 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    5f1e:	4b0f      	ldr	r3, [pc, #60]	; (5f5c <mutex_free_platform+0x44>)
    5f20:	480f      	ldr	r0, [pc, #60]	; (5f60 <mutex_free_platform+0x48>)
    5f22:	685b      	ldr	r3, [r3, #4]
    5f24:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5f26:	6861      	ldr	r1, [r4, #4]
    5f28:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    5f2c:	d00f      	beq.n	5f4e <mutex_free_platform+0x36>
    5f2e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    5f32:	d00c      	beq.n	5f4e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5f34:	4d0b      	ldr	r5, [pc, #44]	; (5f64 <mutex_free_platform+0x4c>)
    5f36:	42a9      	cmp	r1, r5
    5f38:	d009      	beq.n	5f4e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    5f3a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    5f3e:	d007      	beq.n	5f50 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5f40:	4621      	mov	r1, r4
    5f42:	4809      	ldr	r0, [pc, #36]	; (5f68 <mutex_free_platform+0x50>)
    5f44:	f01d ff47 	bl	23dd6 <k_mem_slab_free>
        mutex->mutex = NULL;
    5f48:	2300      	movs	r3, #0
    5f4a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    5f4c:	6065      	str	r5, [r4, #4]
}
    5f4e:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    5f50:	2214      	movs	r2, #20
    5f52:	6820      	ldr	r0, [r4, #0]
    5f54:	f011 fa40 	bl	173d8 <memset>
    5f58:	e7f8      	b.n	5f4c <mutex_free_platform+0x34>
    5f5a:	bf00      	nop
    5f5c:	20000be8 	.word	0x20000be8
    5f60:	00032614 	.word	0x00032614
    5f64:	a95c5f2c 	.word	0xa95c5f2c
    5f68:	20002fa4 	.word	0x20002fa4

00005f6c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5f6c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5f6e:	b360      	cbz	r0, 5fca <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    5f70:	6843      	ldr	r3, [r0, #4]
    5f72:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    5f76:	d00e      	beq.n	5f96 <mutex_lock_platform+0x2a>
    5f78:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    5f7c:	d018      	beq.n	5fb0 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5f7e:	4a14      	ldr	r2, [pc, #80]	; (5fd0 <mutex_lock_platform+0x64>)
    5f80:	4293      	cmp	r3, r2
    5f82:	d020      	beq.n	5fc6 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    5f84:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5f86:	f04f 32ff 	mov.w	r2, #4294967295
    5f8a:	f04f 33ff 	mov.w	r3, #4294967295
    5f8e:	f00f fbf1 	bl	15774 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    5f92:	b158      	cbz	r0, 5fac <mutex_lock_platform+0x40>
    5f94:	e015      	b.n	5fc2 <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5f96:	2201      	movs	r2, #1
    5f98:	6803      	ldr	r3, [r0, #0]
    5f9a:	e8d3 1fef 	ldaex	r1, [r3]
    5f9e:	2900      	cmp	r1, #0
    5fa0:	d103      	bne.n	5faa <mutex_lock_platform+0x3e>
    5fa2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    5fa6:	2800      	cmp	r0, #0
    5fa8:	d1f7      	bne.n	5f9a <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5faa:	d10a      	bne.n	5fc2 <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    5fac:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    5fae:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    5fb0:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    5fb2:	4a08      	ldr	r2, [pc, #32]	; (5fd4 <mutex_lock_platform+0x68>)
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    5fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d0f4      	beq.n	5fac <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5fc2:	4805      	ldr	r0, [pc, #20]	; (5fd8 <mutex_lock_platform+0x6c>)
    5fc4:	e7f3      	b.n	5fae <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5fc6:	4805      	ldr	r0, [pc, #20]	; (5fdc <mutex_lock_platform+0x70>)
    5fc8:	e7f1      	b.n	5fae <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5fca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5fce:	e7ee      	b.n	5fae <mutex_lock_platform+0x42>
    5fd0:	a95c5f2c 	.word	0xa95c5f2c
    5fd4:	50030000 	.word	0x50030000
    5fd8:	ffff8fe9 	.word	0xffff8fe9
    5fdc:	ffff8fea 	.word	0xffff8fea

00005fe0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5fe0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5fe2:	b320      	cbz	r0, 602e <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5fe4:	6843      	ldr	r3, [r0, #4]
    5fe6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    5fea:	d009      	beq.n	6000 <mutex_unlock_platform+0x20>
    5fec:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    5ff0:	d013      	beq.n	601a <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5ff2:	4a11      	ldr	r2, [pc, #68]	; (6038 <mutex_unlock_platform+0x58>)
    5ff4:	4293      	cmp	r3, r2
    5ff6:	d01d      	beq.n	6034 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    5ff8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    5ffa:	f00f fc35 	bl	15868 <z_impl_k_mutex_unlock>
    5ffe:	e014      	b.n	602a <mutex_unlock_platform+0x4a>
    6000:	2200      	movs	r2, #0
    6002:	6803      	ldr	r3, [r0, #0]
    6004:	e8d3 1fef 	ldaex	r1, [r3]
    6008:	2901      	cmp	r1, #1
    600a:	d103      	bne.n	6014 <mutex_unlock_platform+0x34>
    600c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    6010:	2800      	cmp	r0, #0
    6012:	d1f7      	bne.n	6004 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    6014:	d009      	beq.n	602a <mutex_unlock_platform+0x4a>
    6016:	4809      	ldr	r0, [pc, #36]	; (603c <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    6018:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    601a:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    601c:	6803      	ldr	r3, [r0, #0]
    601e:	4a08      	ldr	r2, [pc, #32]	; (6040 <mutex_unlock_platform+0x60>)
    6020:	781b      	ldrb	r3, [r3, #0]
    6022:	f503 7380 	add.w	r3, r3, #256	; 0x100
    6026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    602a:	2000      	movs	r0, #0
    602c:	e7f4      	b.n	6018 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    602e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6032:	e7f1      	b.n	6018 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    6034:	4803      	ldr	r0, [pc, #12]	; (6044 <mutex_unlock_platform+0x64>)
    6036:	e7ef      	b.n	6018 <mutex_unlock_platform+0x38>
    6038:	a95c5f2c 	.word	0xa95c5f2c
    603c:	ffff8fe9 	.word	0xffff8fe9
    6040:	50030000 	.word	0x50030000
    6044:	ffff8fea 	.word	0xffff8fea

00006048 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6048:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    604a:	4604      	mov	r4, r0
    604c:	b918      	cbnz	r0, 6056 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    604e:	4b1d      	ldr	r3, [pc, #116]	; (60c4 <mutex_init_platform+0x7c>)
    6050:	481d      	ldr	r0, [pc, #116]	; (60c8 <mutex_init_platform+0x80>)
    6052:	685b      	ldr	r3, [r3, #4]
    6054:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    6056:	6863      	ldr	r3, [r4, #4]
    6058:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    605c:	d02f      	beq.n	60be <mutex_init_platform+0x76>
    605e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    6062:	d02c      	beq.n	60be <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    6064:	4a19      	ldr	r2, [pc, #100]	; (60cc <mutex_init_platform+0x84>)
    6066:	4293      	cmp	r3, r2
    6068:	d119      	bne.n	609e <mutex_init_platform+0x56>
    606a:	6823      	ldr	r3, [r4, #0]
    606c:	bb03      	cbnz	r3, 60b0 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    606e:	f04f 32ff 	mov.w	r2, #4294967295
    6072:	f04f 33ff 	mov.w	r3, #4294967295
    6076:	4621      	mov	r1, r4
    6078:	4815      	ldr	r0, [pc, #84]	; (60d0 <mutex_init_platform+0x88>)
    607a:	f00f f9a3 	bl	153c4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    607e:	b908      	cbnz	r0, 6084 <mutex_init_platform+0x3c>
    6080:	6823      	ldr	r3, [r4, #0]
    6082:	b91b      	cbnz	r3, 608c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    6084:	4b0f      	ldr	r3, [pc, #60]	; (60c4 <mutex_init_platform+0x7c>)
    6086:	4813      	ldr	r0, [pc, #76]	; (60d4 <mutex_init_platform+0x8c>)
    6088:	685b      	ldr	r3, [r3, #4]
    608a:	4798      	blx	r3
    608c:	2214      	movs	r2, #20
    608e:	2100      	movs	r1, #0
    6090:	6820      	ldr	r0, [r4, #0]
    6092:	f011 f9a1 	bl	173d8 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    6096:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    609a:	6063      	str	r3, [r4, #4]
    609c:	e008      	b.n	60b0 <mutex_init_platform+0x68>
    switch(flags){
    609e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    60a2:	d80d      	bhi.n	60c0 <mutex_init_platform+0x78>
    60a4:	2b3a      	cmp	r3, #58	; 0x3a
    60a6:	d003      	beq.n	60b0 <mutex_init_platform+0x68>
    60a8:	f640 62ba 	movw	r2, #3770	; 0xeba
    60ac:	4293      	cmp	r3, r2
    60ae:	d1de      	bne.n	606e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    60b0:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    60b2:	f01d fed5 	bl	23e60 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    60b6:	6863      	ldr	r3, [r4, #4]
    60b8:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    60bc:	6063      	str	r3, [r4, #4]
}
    60be:	bd10      	pop	{r4, pc}
    switch(flags){
    60c0:	4a05      	ldr	r2, [pc, #20]	; (60d8 <mutex_init_platform+0x90>)
    60c2:	e7f3      	b.n	60ac <mutex_init_platform+0x64>
    60c4:	20000be8 	.word	0x20000be8
    60c8:	00032614 	.word	0x00032614
    60cc:	a95c5f2c 	.word	0xa95c5f2c
    60d0:	20002fa4 	.word	0x20002fa4
    60d4:	0003263a 	.word	0x0003263a
    60d8:	3a00003a 	.word	0x3a00003a

000060dc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    60dc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    60de:	4906      	ldr	r1, [pc, #24]	; (60f8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    60e0:	2340      	movs	r3, #64	; 0x40
    60e2:	2214      	movs	r2, #20
    60e4:	4805      	ldr	r0, [pc, #20]	; (60fc <nrf_cc3xx_platform_mutex_init+0x20>)
    60e6:	f01d fe68 	bl	23dba <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    60ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    60ee:	4904      	ldr	r1, [pc, #16]	; (6100 <nrf_cc3xx_platform_mutex_init+0x24>)
    60f0:	4804      	ldr	r0, [pc, #16]	; (6104 <nrf_cc3xx_platform_mutex_init+0x28>)
    60f2:	f015 bd95 	b.w	1bc20 <nrf_cc3xx_platform_set_mutexes>
    60f6:	bf00      	nop
    60f8:	20002aa4 	.word	0x20002aa4
    60fc:	20002fa4 	.word	0x20002fa4
    6100:	00025024 	.word	0x00025024
    6104:	00025038 	.word	0x00025038

00006108 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6108:	4901      	ldr	r1, [pc, #4]	; (6110 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    610a:	2210      	movs	r2, #16
	str	r2, [r1]
    610c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    610e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    6110:	e000ed10 	.word	0xe000ed10

00006114 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6114:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6116:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6118:	f380 8811 	msr	BASEPRI, r0
	isb
    611c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    6120:	b501      	push	{r0, lr}
    6122:	f7fe fb13 	bl	474c <z_arm_on_enter_cpu_idle>
    6126:	2800      	cmp	r0, #0
    6128:	d002      	beq.n	6130 <_skip_0>
    612a:	f3bf 8f4f 	dsb	sy
    612e:	bf30      	wfi

00006130 <_skip_0>:
    6130:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6134:	b662      	cpsie	i
	isb
    6136:	f3bf 8f6f 	isb	sy

	bx	lr
    613a:	4770      	bx	lr

0000613c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    613c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    613e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6140:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    6144:	b501      	push	{r0, lr}
    6146:	f7fe fb01 	bl	474c <z_arm_on_enter_cpu_idle>
    614a:	2800      	cmp	r0, #0
    614c:	d002      	beq.n	6154 <_skip_1>
    614e:	f3bf 8f4f 	dsb	sy
    6152:	bf20      	wfe

00006154 <_skip_1>:
    6154:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    6158:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    615c:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    615e:	4770      	bx	lr

00006160 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6164:	4681      	mov	r9, r0

	if (esf != NULL) {
    6166:	460c      	mov	r4, r1
{
    6168:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    616a:	2900      	cmp	r1, #0
    616c:	d04c      	beq.n	6208 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    616e:	e9d1 1200 	ldrd	r1, r2, [r1]
    6172:	466e      	mov	r6, sp
    6174:	b08a      	sub	sp, #40	; 0x28
    6176:	68a3      	ldr	r3, [r4, #8]
    6178:	466d      	mov	r5, sp
    617a:	f04f 0a05 	mov.w	sl, #5
    617e:	46a8      	mov	r8, r5
    6180:	4825      	ldr	r0, [pc, #148]	; (6218 <z_arm_fatal_error+0xb8>)
    6182:	e9c5 2307 	strd	r2, r3, [r5, #28]
    6186:	e9c5 0105 	strd	r0, r1, [r5, #20]
    618a:	f848 af10 	str.w	sl, [r8, #16]!
    618e:	2300      	movs	r3, #0
    6190:	4642      	mov	r2, r8
    6192:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    6196:	4821      	ldr	r0, [pc, #132]	; (621c <z_arm_fatal_error+0xbc>)
    6198:	f7fe fe74 	bl	4e84 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    619c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    61a0:	46b5      	mov	sp, r6
    61a2:	6963      	ldr	r3, [r4, #20]
    61a4:	46ad      	mov	sp, r5
    61a6:	481e      	ldr	r0, [pc, #120]	; (6220 <z_arm_fatal_error+0xc0>)
    61a8:	e9c5 2307 	strd	r2, r3, [r5, #28]
    61ac:	e9c5 0105 	strd	r0, r1, [r5, #20]
    61b0:	f8c5 a010 	str.w	sl, [r5, #16]
    61b4:	2300      	movs	r3, #0
    61b6:	4642      	mov	r2, r8
    61b8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    61bc:	4817      	ldr	r0, [pc, #92]	; (621c <z_arm_fatal_error+0xbc>)
    61be:	f7fe fe61 	bl	4e84 <z_impl_z_log_msg_static_create>
    61c2:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    61c4:	b088      	sub	sp, #32
    61c6:	69e3      	ldr	r3, [r4, #28]
    61c8:	466d      	mov	r5, sp
    61ca:	f04f 0a03 	mov.w	sl, #3
    61ce:	46a8      	mov	r8, r5
    61d0:	4a14      	ldr	r2, [pc, #80]	; (6224 <z_arm_fatal_error+0xc4>)
    61d2:	e9c5 2305 	strd	r2, r3, [r5, #20]
    61d6:	f848 af10 	str.w	sl, [r8, #16]!
    61da:	2300      	movs	r3, #0
    61dc:	4642      	mov	r2, r8
    61de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    61e2:	480e      	ldr	r0, [pc, #56]	; (621c <z_arm_fatal_error+0xbc>)
    61e4:	f7fe fe4e 	bl	4e84 <z_impl_z_log_msg_static_create>
    61e8:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    61ea:	69a3      	ldr	r3, [r4, #24]
    61ec:	46ad      	mov	sp, r5
    61ee:	4a0e      	ldr	r2, [pc, #56]	; (6228 <z_arm_fatal_error+0xc8>)
    61f0:	f8c5 a010 	str.w	sl, [r5, #16]
    61f4:	e9c5 2305 	strd	r2, r3, [r5, #20]
    61f8:	2300      	movs	r3, #0
    61fa:	4642      	mov	r2, r8
    61fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6200:	4806      	ldr	r0, [pc, #24]	; (621c <z_arm_fatal_error+0xbc>)
    6202:	f7fe fe3f 	bl	4e84 <z_impl_z_log_msg_static_create>
    6206:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6208:	4621      	mov	r1, r4
    620a:	4648      	mov	r0, r9
    620c:	f00e ff42 	bl	15094 <z_fatal_error>
}
    6210:	46bd      	mov	sp, r7
    6212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6216:	bf00      	nop
    6218:	00032667 	.word	0x00032667
    621c:	00024d68 	.word	0x00024d68
    6220:	00032696 	.word	0x00032696
    6224:	000326c5 	.word	0x000326c5
    6228:	000326d4 	.word	0x000326d4

0000622c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    622c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    622e:	2800      	cmp	r0, #0
    6230:	db07      	blt.n	6242 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6232:	2301      	movs	r3, #1
    6234:	0941      	lsrs	r1, r0, #5
    6236:	4a03      	ldr	r2, [pc, #12]	; (6244 <arch_irq_enable+0x18>)
    6238:	f000 001f 	and.w	r0, r0, #31
    623c:	4083      	lsls	r3, r0
    623e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    6242:	4770      	bx	lr
    6244:	e000e100 	.word	0xe000e100

00006248 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6248:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    624a:	2800      	cmp	r0, #0
    624c:	db0c      	blt.n	6268 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    624e:	2201      	movs	r2, #1
    6250:	4906      	ldr	r1, [pc, #24]	; (626c <arch_irq_disable+0x24>)
    6252:	0943      	lsrs	r3, r0, #5
    6254:	f000 001f 	and.w	r0, r0, #31
    6258:	4082      	lsls	r2, r0
    625a:	3320      	adds	r3, #32
    625c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    6260:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6264:	f3bf 8f6f 	isb	sy
}
    6268:	4770      	bx	lr
    626a:	bf00      	nop
    626c:	e000e100 	.word	0xe000e100

00006270 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6270:	4b05      	ldr	r3, [pc, #20]	; (6288 <arch_irq_is_enabled+0x18>)
    6272:	0942      	lsrs	r2, r0, #5
    6274:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6278:	2301      	movs	r3, #1
    627a:	f000 001f 	and.w	r0, r0, #31
    627e:	fa03 f000 	lsl.w	r0, r3, r0
}
    6282:	4010      	ands	r0, r2
    6284:	4770      	bx	lr
    6286:	bf00      	nop
    6288:	e000e100 	.word	0xe000e100

0000628c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    628c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    628e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    6290:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6294:	bfac      	ite	ge
    6296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    629a:	4b06      	ldrlt	r3, [pc, #24]	; (62b4 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    629c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    62a0:	b2c9      	uxtb	r1, r1
    62a2:	bfab      	itete	ge
    62a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    62a8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    62ac:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    62b0:	5419      	strblt	r1, [r3, r0]
}
    62b2:	4770      	bx	lr
    62b4:	e000ed14 	.word	0xe000ed14

000062b8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    62b8:	bf30      	wfi
    b z_SysNmiOnReset
    62ba:	f7ff bffd 	b.w	62b8 <z_SysNmiOnReset>
    62be:	bf00      	nop

000062c0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    62c0:	4a0b      	ldr	r2, [pc, #44]	; (62f0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    62c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    62c4:	4b0b      	ldr	r3, [pc, #44]	; (62f4 <z_arm_prep_c+0x34>)
    62c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    62ca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    62cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    62d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    62d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    62dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    62e0:	f00e ff9a 	bl	15218 <z_bss_zero>
	z_data_copy();
    62e4:	f010 f912 	bl	1650c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    62e8:	f000 fbcc 	bl	6a84 <z_arm_interrupt_init>
	z_cstart();
    62ec:	f00e ffd4 	bl	15298 <z_cstart>
    62f0:	00000000 	.word	0x00000000
    62f4:	e000ed00 	.word	0xe000ed00

000062f8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    62f8:	4a09      	ldr	r2, [pc, #36]	; (6320 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    62fa:	490a      	ldr	r1, [pc, #40]	; (6324 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    62fc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    62fe:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    6300:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    6302:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6304:	4908      	ldr	r1, [pc, #32]	; (6328 <arch_swap+0x30>)
    6306:	684b      	ldr	r3, [r1, #4]
    6308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    630c:	604b      	str	r3, [r1, #4]
    630e:	2300      	movs	r3, #0
    6310:	f383 8811 	msr	BASEPRI, r3
    6314:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6318:	6893      	ldr	r3, [r2, #8]
}
    631a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    631c:	4770      	bx	lr
    631e:	bf00      	nop
    6320:	200047dc 	.word	0x200047dc
    6324:	00031190 	.word	0x00031190
    6328:	e000ed00 	.word	0xe000ed00

0000632c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    632c:	4913      	ldr	r1, [pc, #76]	; (637c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    632e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6330:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6334:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6336:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    633a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    633e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    6340:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6344:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6348:	4f0d      	ldr	r7, [pc, #52]	; (6380 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    634a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    634e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    6350:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6352:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6354:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    6356:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6358:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    635a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    635e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    6362:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6366:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    636a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    636e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    6370:	f019 fe0e 	bl	1ff90 <configure_builtin_stack_guard>
    pop {r2, lr}
    6374:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    6378:	4770      	bx	lr
    637a:	0000      	.short	0x0000
    ldr r1, =_kernel
    637c:	200047dc 	.word	0x200047dc
    ldr v4, =_SCS_ICSR
    6380:	e000ed04 	.word	0xe000ed04

00006384 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    6384:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6388:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    638a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    638e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6392:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6394:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6398:	2902      	cmp	r1, #2
    beq _oops
    639a:	d0ff      	beq.n	639c <_oops>

0000639c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    639c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    639e:	f019 fde8 	bl	1ff72 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    63a2:	bd01      	pop	{r0, pc}

000063a4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    63a4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    63a8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    63aa:	490b      	ldr	r1, [pc, #44]	; (63d8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    63ac:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    63b0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    63b2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    63b6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    63ba:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    63bc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    63c0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    63c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    63c8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    63cc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    63ce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    63d0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    63d2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    63d4:	4770      	bx	lr
    63d6:	bf00      	nop
    63d8:	0001e7f7 	.word	0x0001e7f7

000063dc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    63dc:	4b08      	ldr	r3, [pc, #32]	; (6400 <arch_switch_to_main_thread+0x24>)
    63de:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    63e0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    63e2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    63e6:	4610      	mov	r0, r2
    63e8:	f381 8809 	msr	PSP, r1
    63ec:	2100      	movs	r1, #0
    63ee:	b663      	cpsie	if
    63f0:	f381 8811 	msr	BASEPRI, r1
    63f4:	f3bf 8f6f 	isb	sy
    63f8:	2200      	movs	r2, #0
    63fa:	2300      	movs	r3, #0
    63fc:	f018 f9fb 	bl	1e7f6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6400:	200047dc 	.word	0x200047dc

00006404 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6404:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6406:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6408:	4a0b      	ldr	r2, [pc, #44]	; (6438 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    640a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    640c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    640e:	bf1e      	ittt	ne
	movne	r1, #0
    6410:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6412:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    6414:	f01d fd15 	blne	23e42 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6418:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    641a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    641e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6422:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6426:	4905      	ldr	r1, [pc, #20]	; (643c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6428:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    642a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    642c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    642e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6432:	4903      	ldr	r1, [pc, #12]	; (6440 <_isr_wrapper+0x3c>)
	bx r1
    6434:	4708      	bx	r1
    6436:	0000      	.short	0x0000
	ldr r2, =_kernel
    6438:	200047dc 	.word	0x200047dc
	ldr r1, =_sw_isr_table
    643c:	000249e8 	.word	0x000249e8
	ldr r1, =z_arm_int_exit
    6440:	00006445 	.word	0x00006445

00006444 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6444:	4b07      	ldr	r3, [pc, #28]	; (6464 <_EXIT_EXC+0xe>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6446:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6448:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    644a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    644c:	d003      	beq.n	6456 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    644e:	4906      	ldr	r1, [pc, #24]	; (6468 <_EXIT_EXC+0x12>)
	ldr r2, =_SCS_ICSR_PENDSV
    6450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6454:	600a      	str	r2, [r1, #0]

00006456 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
    6456:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
    6458:	f00e ffe2 	bl	15420 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
	mov lr, r1
#else
	pop {r0, lr}
    645c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6460:	4770      	bx	lr
    6462:	0000      	.short	0x0000
	ldr r3, =_kernel
    6464:	200047dc 	.word	0x200047dc
	ldr r1, =_SCS_ICSR
    6468:	e000ed04 	.word	0xe000ed04

0000646c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6470:	b086      	sub	sp, #24
    6472:	4606      	mov	r6, r0
    6474:	460d      	mov	r5, r1
    6476:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    6478:	2402      	movs	r4, #2
    647a:	4b44      	ldr	r3, [pc, #272]	; (658c <mem_manage_fault.constprop.0+0x120>)
    647c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6480:	617b      	str	r3, [r7, #20]
    6482:	4843      	ldr	r0, [pc, #268]	; (6590 <mem_manage_fault.constprop.0+0x124>)
    6484:	613c      	str	r4, [r7, #16]
    6486:	f107 0210 	add.w	r2, r7, #16
    648a:	f019 fd85 	bl	1ff98 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    648e:	4b41      	ldr	r3, [pc, #260]	; (6594 <mem_manage_fault.constprop.0+0x128>)
    6490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6492:	06db      	lsls	r3, r3, #27
    6494:	d578      	bpl.n	6588 <mem_manage_fault.constprop.0+0x11c>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    6496:	4b40      	ldr	r3, [pc, #256]	; (6598 <mem_manage_fault.constprop.0+0x12c>)
    6498:	483d      	ldr	r0, [pc, #244]	; (6590 <mem_manage_fault.constprop.0+0x124>)
    649a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    649e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    64a2:	f107 0210 	add.w	r2, r7, #16
    64a6:	f019 fd77 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    64aa:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    64ac:	4b39      	ldr	r3, [pc, #228]	; (6594 <mem_manage_fault.constprop.0+0x128>)
    64ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64b0:	071c      	lsls	r4, r3, #28
    64b2:	d50b      	bpl.n	64cc <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    64b4:	4b39      	ldr	r3, [pc, #228]	; (659c <mem_manage_fault.constprop.0+0x130>)
    64b6:	4836      	ldr	r0, [pc, #216]	; (6590 <mem_manage_fault.constprop.0+0x124>)
    64b8:	617b      	str	r3, [r7, #20]
    64ba:	2302      	movs	r3, #2
    64bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64c0:	613b      	str	r3, [r7, #16]
    64c2:	f107 0210 	add.w	r2, r7, #16
    64c6:	f019 fd67 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    64ca:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    64cc:	4c31      	ldr	r4, [pc, #196]	; (6594 <mem_manage_fault.constprop.0+0x128>)
    64ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    64d0:	0799      	lsls	r1, r3, #30
    64d2:	d523      	bpl.n	651c <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    64d4:	46e8      	mov	r8, sp
    64d6:	4b32      	ldr	r3, [pc, #200]	; (65a0 <mem_manage_fault.constprop.0+0x134>)
    64d8:	f107 0210 	add.w	r2, r7, #16
    64dc:	617b      	str	r3, [r7, #20]
    64de:	2302      	movs	r3, #2
    64e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64e4:	613b      	str	r3, [r7, #16]
    64e6:	482a      	ldr	r0, [pc, #168]	; (6590 <mem_manage_fault.constprop.0+0x124>)
    64e8:	f019 fd56 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    64ec:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    64ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    64f0:	0612      	lsls	r2, r2, #24
    64f2:	d512      	bpl.n	651a <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    64f4:	b088      	sub	sp, #32
    64f6:	466a      	mov	r2, sp
    64f8:	492a      	ldr	r1, [pc, #168]	; (65a4 <mem_manage_fault.constprop.0+0x138>)
    64fa:	4825      	ldr	r0, [pc, #148]	; (6590 <mem_manage_fault.constprop.0+0x124>)
    64fc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6500:	2303      	movs	r3, #3
    6502:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6506:	f842 3f10 	str.w	r3, [r2, #16]!
    650a:	f019 fd45 	bl	1ff98 <z_log_msg_static_create.constprop.0>
    650e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    6510:	b11e      	cbz	r6, 651a <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6518:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    651a:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    651c:	4b1d      	ldr	r3, [pc, #116]	; (6594 <mem_manage_fault.constprop.0+0x128>)
    651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6520:	07de      	lsls	r6, r3, #31
    6522:	d50b      	bpl.n	653c <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    6524:	4b20      	ldr	r3, [pc, #128]	; (65a8 <mem_manage_fault.constprop.0+0x13c>)
    6526:	481a      	ldr	r0, [pc, #104]	; (6590 <mem_manage_fault.constprop.0+0x124>)
    6528:	617b      	str	r3, [r7, #20]
    652a:	2302      	movs	r3, #2
    652c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6530:	613b      	str	r3, [r7, #16]
    6532:	f107 0210 	add.w	r2, r7, #16
    6536:	f019 fd2f 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    653a:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    653c:	4b15      	ldr	r3, [pc, #84]	; (6594 <mem_manage_fault.constprop.0+0x128>)
    653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6540:	069c      	lsls	r4, r3, #26
    6542:	d50b      	bpl.n	655c <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    6544:	4b19      	ldr	r3, [pc, #100]	; (65ac <mem_manage_fault.constprop.0+0x140>)
    6546:	4812      	ldr	r0, [pc, #72]	; (6590 <mem_manage_fault.constprop.0+0x124>)
    6548:	617b      	str	r3, [r7, #20]
    654a:	2302      	movs	r3, #2
    654c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6550:	613b      	str	r3, [r7, #16]
    6552:	f107 0210 	add.w	r2, r7, #16
    6556:	f019 fd1f 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    655a:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    655c:	4b0d      	ldr	r3, [pc, #52]	; (6594 <mem_manage_fault.constprop.0+0x128>)

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    655e:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6562:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6564:	bf58      	it	pl
    6566:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    656a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    656c:	bf42      	ittt	mi
    656e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    6570:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    6574:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6578:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    657c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    657e:	2300      	movs	r3, #0
    6580:	702b      	strb	r3, [r5, #0]
}
    6582:	46bd      	mov	sp, r7
    6584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    6588:	2010      	movs	r0, #16
    658a:	e78f      	b.n	64ac <mem_manage_fault.constprop.0+0x40>
    658c:	00032702 	.word	0x00032702
    6590:	00024d68 	.word	0x00024d68
    6594:	e000ed00 	.word	0xe000ed00
    6598:	00032718 	.word	0x00032718
    659c:	0003274b 	.word	0x0003274b
    65a0:	0003275e 	.word	0x0003275e
    65a4:	00032776 	.word	0x00032776
    65a8:	0003278c 	.word	0x0003278c
    65ac:	000327ab 	.word	0x000327ab

000065b0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    65b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65b4:	b086      	sub	sp, #24
    65b6:	4606      	mov	r6, r0
    65b8:	460d      	mov	r5, r1
    65ba:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    65bc:	2402      	movs	r4, #2
    65be:	4b47      	ldr	r3, [pc, #284]	; (66dc <bus_fault.constprop.0+0x12c>)
    65c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65c4:	617b      	str	r3, [r7, #20]
    65c6:	4846      	ldr	r0, [pc, #280]	; (66e0 <bus_fault.constprop.0+0x130>)
    65c8:	613c      	str	r4, [r7, #16]
    65ca:	f107 0210 	add.w	r2, r7, #16
    65ce:	f019 fce3 	bl	1ff98 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    65d2:	4b44      	ldr	r3, [pc, #272]	; (66e4 <bus_fault.constprop.0+0x134>)
    65d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65d6:	04d9      	lsls	r1, r3, #19
    65d8:	d56d      	bpl.n	66b6 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    65da:	4b43      	ldr	r3, [pc, #268]	; (66e8 <bus_fault.constprop.0+0x138>)
    65dc:	4840      	ldr	r0, [pc, #256]	; (66e0 <bus_fault.constprop.0+0x130>)
    65de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65e2:	e9c7 4304 	strd	r4, r3, [r7, #16]
    65e6:	f107 0210 	add.w	r2, r7, #16
    65ea:	f019 fcd5 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    65ee:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    65f0:	4b3c      	ldr	r3, [pc, #240]	; (66e4 <bus_fault.constprop.0+0x134>)
    65f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65f4:	051a      	lsls	r2, r3, #20
    65f6:	d50b      	bpl.n	6610 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    65f8:	4b3c      	ldr	r3, [pc, #240]	; (66ec <bus_fault.constprop.0+0x13c>)
    65fa:	4839      	ldr	r0, [pc, #228]	; (66e0 <bus_fault.constprop.0+0x130>)
    65fc:	617b      	str	r3, [r7, #20]
    65fe:	2302      	movs	r3, #2
    6600:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6604:	613b      	str	r3, [r7, #16]
    6606:	f107 0210 	add.w	r2, r7, #16
    660a:	f019 fcc5 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    660e:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6610:	4c34      	ldr	r4, [pc, #208]	; (66e4 <bus_fault.constprop.0+0x134>)
    6612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6614:	059b      	lsls	r3, r3, #22
    6616:	d523      	bpl.n	6660 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    6618:	46e8      	mov	r8, sp
    661a:	4b35      	ldr	r3, [pc, #212]	; (66f0 <bus_fault.constprop.0+0x140>)
    661c:	4830      	ldr	r0, [pc, #192]	; (66e0 <bus_fault.constprop.0+0x130>)
    661e:	617b      	str	r3, [r7, #20]
    6620:	2302      	movs	r3, #2
    6622:	f107 0210 	add.w	r2, r7, #16
    6626:	613b      	str	r3, [r7, #16]
    6628:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    662c:	f019 fcb4 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6630:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6632:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6634:	0410      	lsls	r0, r2, #16
    6636:	d512      	bpl.n	665e <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6638:	b088      	sub	sp, #32
    663a:	466a      	mov	r2, sp
    663c:	492d      	ldr	r1, [pc, #180]	; (66f4 <bus_fault.constprop.0+0x144>)
    663e:	4828      	ldr	r0, [pc, #160]	; (66e0 <bus_fault.constprop.0+0x130>)
    6640:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6644:	2303      	movs	r3, #3
    6646:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    664a:	f842 3f10 	str.w	r3, [r2, #16]!
    664e:	f019 fca3 	bl	1ff98 <z_log_msg_static_create.constprop.0>
    6652:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    6654:	b11e      	cbz	r6, 665e <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6658:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    665c:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    665e:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6660:	4b20      	ldr	r3, [pc, #128]	; (66e4 <bus_fault.constprop.0+0x134>)
    6662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6664:	0559      	lsls	r1, r3, #21
    6666:	d50b      	bpl.n	6680 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    6668:	4b23      	ldr	r3, [pc, #140]	; (66f8 <bus_fault.constprop.0+0x148>)
    666a:	481d      	ldr	r0, [pc, #116]	; (66e0 <bus_fault.constprop.0+0x130>)
    666c:	617b      	str	r3, [r7, #20]
    666e:	2302      	movs	r3, #2
    6670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6674:	613b      	str	r3, [r7, #16]
    6676:	f107 0210 	add.w	r2, r7, #16
    667a:	f019 fc8d 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    667e:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6680:	4b18      	ldr	r3, [pc, #96]	; (66e4 <bus_fault.constprop.0+0x134>)
    6682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6684:	05d2      	lsls	r2, r2, #23
    6686:	d518      	bpl.n	66ba <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    6688:	4b1c      	ldr	r3, [pc, #112]	; (66fc <bus_fault.constprop.0+0x14c>)
    668a:	4815      	ldr	r0, [pc, #84]	; (66e0 <bus_fault.constprop.0+0x130>)
    668c:	617b      	str	r3, [r7, #20]
    668e:	2302      	movs	r3, #2
    6690:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6694:	613b      	str	r3, [r7, #16]
    6696:	f107 0210 	add.w	r2, r7, #16
    669a:	f019 fc7d 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    669e:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    66a0:	4a10      	ldr	r2, [pc, #64]	; (66e4 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    66a2:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    66a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    66a6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    66aa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    66ac:	2300      	movs	r3, #0
    66ae:	702b      	strb	r3, [r5, #0]
}
    66b0:	46bd      	mov	sp, r7
    66b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    66b6:	2016      	movs	r0, #22
    66b8:	e79a      	b.n	65f0 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    66ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66bc:	049b      	lsls	r3, r3, #18
    66be:	d5ef      	bpl.n	66a0 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    66c0:	4b0f      	ldr	r3, [pc, #60]	; (6700 <bus_fault.constprop.0+0x150>)
    66c2:	4807      	ldr	r0, [pc, #28]	; (66e0 <bus_fault.constprop.0+0x130>)
    66c4:	617b      	str	r3, [r7, #20]
    66c6:	2302      	movs	r3, #2
    66c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    66cc:	613b      	str	r3, [r7, #16]
    66ce:	f107 0210 	add.w	r2, r7, #16
    66d2:	f019 fc61 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    66d6:	201c      	movs	r0, #28
    66d8:	e7e2      	b.n	66a0 <bus_fault.constprop.0+0xf0>
    66da:	bf00      	nop
    66dc:	000327da 	.word	0x000327da
    66e0:	00024d68 	.word	0x00024d68
    66e4:	e000ed00 	.word	0xe000ed00
    66e8:	000327f0 	.word	0x000327f0
    66ec:	0003274b 	.word	0x0003274b
    66f0:	00032801 	.word	0x00032801
    66f4:	0003281a 	.word	0x0003281a
    66f8:	0003282f 	.word	0x0003282f
    66fc:	0003284a 	.word	0x0003284a
    6700:	000327ab 	.word	0x000327ab

00006704 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6704:	b510      	push	{r4, lr}
    6706:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    6708:	2402      	movs	r4, #2
    670a:	4b3e      	ldr	r3, [pc, #248]	; (6804 <usage_fault.constprop.0+0x100>)
    670c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6710:	483d      	ldr	r0, [pc, #244]	; (6808 <usage_fault.constprop.0+0x104>)
    6712:	aa04      	add	r2, sp, #16
    6714:	9305      	str	r3, [sp, #20]
    6716:	9404      	str	r4, [sp, #16]
    6718:	f019 fc3e 	bl	1ff98 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    671c:	4b3b      	ldr	r3, [pc, #236]	; (680c <usage_fault.constprop.0+0x108>)
    671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6720:	0199      	lsls	r1, r3, #6
    6722:	d56c      	bpl.n	67fe <usage_fault.constprop.0+0xfa>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    6724:	4b3a      	ldr	r3, [pc, #232]	; (6810 <usage_fault.constprop.0+0x10c>)
    6726:	4838      	ldr	r0, [pc, #224]	; (6808 <usage_fault.constprop.0+0x104>)
    6728:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    672c:	aa04      	add	r2, sp, #16
    672e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    6732:	f019 fc31 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    6736:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6738:	4b34      	ldr	r3, [pc, #208]	; (680c <usage_fault.constprop.0+0x108>)
    673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    673c:	01da      	lsls	r2, r3, #7
    673e:	d50a      	bpl.n	6756 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    6740:	4b34      	ldr	r3, [pc, #208]	; (6814 <usage_fault.constprop.0+0x110>)
    6742:	4831      	ldr	r0, [pc, #196]	; (6808 <usage_fault.constprop.0+0x104>)
    6744:	9305      	str	r3, [sp, #20]
    6746:	2302      	movs	r3, #2
    6748:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    674c:	aa04      	add	r2, sp, #16
    674e:	9304      	str	r3, [sp, #16]
    6750:	f019 fc22 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    6754:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    6756:	4b2d      	ldr	r3, [pc, #180]	; (680c <usage_fault.constprop.0+0x108>)
    6758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    675a:	02db      	lsls	r3, r3, #11
    675c:	d50a      	bpl.n	6774 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    675e:	2402      	movs	r4, #2
    6760:	4b2d      	ldr	r3, [pc, #180]	; (6818 <usage_fault.constprop.0+0x114>)
    6762:	4829      	ldr	r0, [pc, #164]	; (6808 <usage_fault.constprop.0+0x104>)
    6764:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6768:	aa04      	add	r2, sp, #16
    676a:	9305      	str	r3, [sp, #20]
    676c:	9404      	str	r4, [sp, #16]
    676e:	f019 fc13 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    6772:	4620      	mov	r0, r4
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6774:	4b25      	ldr	r3, [pc, #148]	; (680c <usage_fault.constprop.0+0x108>)
    6776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6778:	031c      	lsls	r4, r3, #12
    677a:	d50a      	bpl.n	6792 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    677c:	4b27      	ldr	r3, [pc, #156]	; (681c <usage_fault.constprop.0+0x118>)
    677e:	4822      	ldr	r0, [pc, #136]	; (6808 <usage_fault.constprop.0+0x104>)
    6780:	9305      	str	r3, [sp, #20]
    6782:	2302      	movs	r3, #2
    6784:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6788:	aa04      	add	r2, sp, #16
    678a:	9304      	str	r3, [sp, #16]
    678c:	f019 fc04 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    6790:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6792:	4b1e      	ldr	r3, [pc, #120]	; (680c <usage_fault.constprop.0+0x108>)
    6794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6796:	0359      	lsls	r1, r3, #13
    6798:	d50a      	bpl.n	67b0 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    679a:	4b21      	ldr	r3, [pc, #132]	; (6820 <usage_fault.constprop.0+0x11c>)
    679c:	481a      	ldr	r0, [pc, #104]	; (6808 <usage_fault.constprop.0+0x104>)
    679e:	9305      	str	r3, [sp, #20]
    67a0:	2302      	movs	r3, #2
    67a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    67a6:	aa04      	add	r2, sp, #16
    67a8:	9304      	str	r3, [sp, #16]
    67aa:	f019 fbf5 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    67ae:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    67b0:	4b16      	ldr	r3, [pc, #88]	; (680c <usage_fault.constprop.0+0x108>)
    67b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67b4:	039a      	lsls	r2, r3, #14
    67b6:	d50a      	bpl.n	67ce <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    67b8:	4b1a      	ldr	r3, [pc, #104]	; (6824 <usage_fault.constprop.0+0x120>)
    67ba:	4813      	ldr	r0, [pc, #76]	; (6808 <usage_fault.constprop.0+0x104>)
    67bc:	9305      	str	r3, [sp, #20]
    67be:	2302      	movs	r3, #2
    67c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    67c4:	aa04      	add	r2, sp, #16
    67c6:	9304      	str	r3, [sp, #16]
    67c8:	f019 fbe6 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    67cc:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    67ce:	4b0f      	ldr	r3, [pc, #60]	; (680c <usage_fault.constprop.0+0x108>)
    67d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d2:	03db      	lsls	r3, r3, #15
    67d4:	d50a      	bpl.n	67ec <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    67d6:	4b14      	ldr	r3, [pc, #80]	; (6828 <usage_fault.constprop.0+0x124>)
    67d8:	480b      	ldr	r0, [pc, #44]	; (6808 <usage_fault.constprop.0+0x104>)
    67da:	9305      	str	r3, [sp, #20]
    67dc:	2302      	movs	r3, #2
    67de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    67e2:	aa04      	add	r2, sp, #16
    67e4:	9304      	str	r3, [sp, #16]
    67e6:	f019 fbd7 	bl	1ff98 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    67ea:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    67ec:	4a07      	ldr	r2, [pc, #28]	; (680c <usage_fault.constprop.0+0x108>)
    67ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    67f0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    67f4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    67f8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    67fa:	b006      	add	sp, #24
    67fc:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    67fe:	201d      	movs	r0, #29
    6800:	e79a      	b.n	6738 <usage_fault.constprop.0+0x34>
    6802:	bf00      	nop
    6804:	00032862 	.word	0x00032862
    6808:	00024d68 	.word	0x00024d68
    680c:	e000ed00 	.word	0xe000ed00
    6810:	0003287a 	.word	0x0003287a
    6814:	0003288d 	.word	0x0003288d
    6818:	000328a7 	.word	0x000328a7
    681c:	000328d1 	.word	0x000328d1
    6820:	000328ef 	.word	0x000328ef
    6824:	00032914 	.word	0x00032914
    6828:	0003292e 	.word	0x0003292e

0000682c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    682c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6830:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6832:	4b7b      	ldr	r3, [pc, #492]	; (6a20 <z_arm_fault+0x1f4>)
{
    6834:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6836:	f8d3 8004 	ldr.w	r8, [r3, #4]
    683a:	2600      	movs	r6, #0
{
    683c:	af00      	add	r7, sp, #0
    683e:	f3c8 0508 	ubfx	r5, r8, #0, #9
    6842:	f386 8811 	msr	BASEPRI, r6
    6846:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    684a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    684e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6852:	d10e      	bne.n	6872 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6854:	f002 030c 	and.w	r3, r2, #12
    6858:	2b08      	cmp	r3, #8
    685a:	d11b      	bne.n	6894 <z_arm_fault+0x68>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    685c:	4b71      	ldr	r3, [pc, #452]	; (6a24 <z_arm_fault+0x1f8>)
    685e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6862:	61fb      	str	r3, [r7, #28]
    6864:	2302      	movs	r3, #2
    6866:	4870      	ldr	r0, [pc, #448]	; (6a28 <z_arm_fault+0x1fc>)
    6868:	61bb      	str	r3, [r7, #24]
    686a:	f107 0218 	add.w	r2, r7, #24
    686e:	f019 fb93 	bl	1ff98 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    6872:	2600      	movs	r6, #0
		return NULL;
    6874:	4634      	mov	r4, r6
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
    6876:	4b6d      	ldr	r3, [pc, #436]	; (6a2c <z_arm_fault+0x200>)
    6878:	601c      	str	r4, [r3, #0]
	*recoverable = false;
    687a:	2300      	movs	r3, #0
    687c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    687e:	1eeb      	subs	r3, r5, #3
    6880:	2b09      	cmp	r3, #9
    6882:	f200 80ac 	bhi.w	69de <z_arm_fault+0x1b2>
    6886:	e8df f003 	tbb	[pc, r3]
    688a:	9f0a      	.short	0x9f0a
    688c:	aaaa9ba2 	.word	0xaaaa9ba2
    6890:	a5aaaaaa 	.word	0xa5aaaaaa
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6894:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    6896:	bf4c      	ite	mi
    6898:	460c      	movmi	r4, r1
			*nested_exc = true;
    689a:	2601      	movpl	r6, #1
    689c:	e7eb      	b.n	6876 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    689e:	46e9      	mov	r9, sp
    68a0:	f04f 0802 	mov.w	r8, #2
    68a4:	4b62      	ldr	r3, [pc, #392]	; (6a30 <z_arm_fault+0x204>)
    68a6:	f107 0218 	add.w	r2, r7, #24
    68aa:	61fb      	str	r3, [r7, #28]
    68ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    68b0:	485d      	ldr	r0, [pc, #372]	; (6a28 <z_arm_fault+0x1fc>)
    68b2:	f8c7 8018 	str.w	r8, [r7, #24]
    68b6:	f019 fb6f 	bl	1ff98 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    68ba:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    68bc:	4d58      	ldr	r5, [pc, #352]	; (6a20 <z_arm_fault+0x1f4>)
	*recoverable = false;
    68be:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    68c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    68c2:	079a      	lsls	r2, r3, #30
    68c4:	d50b      	bpl.n	68de <z_arm_fault+0xb2>
		PR_EXC("  Bus fault on vector table read");
    68c6:	4b5b      	ldr	r3, [pc, #364]	; (6a34 <z_arm_fault+0x208>)
		PR_EXC("  Debug event");
    68c8:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    68cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    68d0:	4855      	ldr	r0, [pc, #340]	; (6a28 <z_arm_fault+0x1fc>)
    68d2:	f107 0218 	add.w	r2, r7, #24
    68d6:	f019 fb5f 	bl	1ff98 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    68da:	2300      	movs	r3, #0
    68dc:	e041      	b.n	6962 <z_arm_fault+0x136>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    68de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    68e0:	2b00      	cmp	r3, #0
    68e2:	da01      	bge.n	68e8 <z_arm_fault+0xbc>
		PR_EXC("  Debug event");
    68e4:	4b54      	ldr	r3, [pc, #336]	; (6a38 <z_arm_fault+0x20c>)
    68e6:	e7ef      	b.n	68c8 <z_arm_fault+0x9c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    68e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    68ea:	005b      	lsls	r3, r3, #1
    68ec:	d5f5      	bpl.n	68da <z_arm_fault+0xae>
		PR_EXC("  Fault escalation (see below)");
    68ee:	4b53      	ldr	r3, [pc, #332]	; (6a3c <z_arm_fault+0x210>)
    68f0:	f107 0218 	add.w	r2, r7, #24
    68f4:	e9c7 8306 	strd	r8, r3, [r7, #24]
    68f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    68fc:	484a      	ldr	r0, [pc, #296]	; (6a28 <z_arm_fault+0x1fc>)
    68fe:	f019 fb4b 	bl	1ff98 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    6902:	696b      	ldr	r3, [r5, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    6904:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    6906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    690a:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    690c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6910:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    6914:	696b      	ldr	r3, [r5, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    6916:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    691a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    691e:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    6920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6924:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    6928:	f64d 7302 	movw	r3, #57090	; 0xdf02
    692c:	429a      	cmp	r2, r3
    692e:	d008      	beq.n	6942 <z_arm_fault+0x116>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    6930:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6932:	b2db      	uxtb	r3, r3
    6934:	2b00      	cmp	r3, #0
    6936:	d036      	beq.n	69a6 <z_arm_fault+0x17a>
			reason = mem_manage_fault(esf, 1, recoverable);
    6938:	2001      	movs	r0, #1
    693a:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    693c:	f7ff fd96 	bl	646c <mem_manage_fault.constprop.0>
    6940:	e040      	b.n	69c4 <z_arm_fault+0x198>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6942:	b088      	sub	sp, #32
    6944:	6823      	ldr	r3, [r4, #0]
    6946:	466a      	mov	r2, sp
    6948:	493d      	ldr	r1, [pc, #244]	; (6a40 <z_arm_fault+0x214>)
    694a:	4837      	ldr	r0, [pc, #220]	; (6a28 <z_arm_fault+0x1fc>)
    694c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6950:	2303      	movs	r3, #3
    6952:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6956:	f842 3f10 	str.w	r3, [r2, #16]!
    695a:	f019 fb1d 	bl	1ff98 <z_log_msg_static_create.constprop.0>
    695e:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    6960:	6823      	ldr	r3, [r4, #0]
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6962:	79fa      	ldrb	r2, [r7, #7]
    6964:	b9da      	cbnz	r2, 699e <z_arm_fault+0x172>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6966:	f107 0508 	add.w	r5, r7, #8
    696a:	f104 0c20 	add.w	ip, r4, #32
    696e:	462a      	mov	r2, r5
    6970:	6820      	ldr	r0, [r4, #0]
    6972:	6861      	ldr	r1, [r4, #4]
    6974:	3408      	adds	r4, #8
    6976:	c203      	stmia	r2!, {r0, r1}
    6978:	4564      	cmp	r4, ip
    697a:	4615      	mov	r5, r2
    697c:	d1f7      	bne.n	696e <z_arm_fault+0x142>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    697e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6980:	2e00      	cmp	r6, #0
    6982:	d047      	beq.n	6a14 <z_arm_fault+0x1e8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6984:	f3c2 0108 	ubfx	r1, r2, #0, #9
    6988:	b921      	cbnz	r1, 6994 <z_arm_fault+0x168>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    698a:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    698e:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6992:	627a      	str	r2, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    6994:	4618      	mov	r0, r3
    6996:	f107 0108 	add.w	r1, r7, #8
    699a:	f7ff fbe1 	bl	6160 <z_arm_fatal_error>
}
    699e:	372c      	adds	r7, #44	; 0x2c
    69a0:	46bd      	mov	sp, r7
    69a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    69a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69a8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    69ac:	d004      	beq.n	69b8 <z_arm_fault+0x18c>
			reason = bus_fault(esf, 1, recoverable);
    69ae:	2001      	movs	r0, #1
    69b0:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    69b2:	f7ff fdfd 	bl	65b0 <bus_fault.constprop.0>
    69b6:	e005      	b.n	69c4 <z_arm_fault+0x198>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    69b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    69be:	d38c      	bcc.n	68da <z_arm_fault+0xae>
			reason = usage_fault(esf);
    69c0:	f7ff fea0 	bl	6704 <usage_fault.constprop.0>
    69c4:	4603      	mov	r3, r0
    69c6:	e7cc      	b.n	6962 <z_arm_fault+0x136>
		reason = mem_manage_fault(esf, 0, recoverable);
    69c8:	2000      	movs	r0, #0
    69ca:	1df9      	adds	r1, r7, #7
    69cc:	e7b6      	b.n	693c <z_arm_fault+0x110>
		reason = bus_fault(esf, 0, recoverable);
    69ce:	2000      	movs	r0, #0
    69d0:	1df9      	adds	r1, r7, #7
    69d2:	e7ee      	b.n	69b2 <z_arm_fault+0x186>
	PR_FAULT_INFO(
    69d4:	4b1b      	ldr	r3, [pc, #108]	; (6a44 <z_arm_fault+0x218>)
    69d6:	61fb      	str	r3, [r7, #28]
    69d8:	2302      	movs	r3, #2
    69da:	61bb      	str	r3, [r7, #24]
    69dc:	e776      	b.n	68cc <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
    69de:	4a1a      	ldr	r2, [pc, #104]	; (6a48 <z_arm_fault+0x21c>)
    69e0:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    69e4:	46e8      	mov	r8, sp
    69e6:	b08a      	sub	sp, #40	; 0x28
    69e8:	4b18      	ldr	r3, [pc, #96]	; (6a4c <z_arm_fault+0x220>)
    69ea:	bf18      	it	ne
    69ec:	4613      	movne	r3, r2
    69ee:	466a      	mov	r2, sp
    69f0:	4917      	ldr	r1, [pc, #92]	; (6a50 <z_arm_fault+0x224>)
    69f2:	3d10      	subs	r5, #16
    69f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    69f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    69fc:	8413      	strh	r3, [r2, #32]
    69fe:	4b15      	ldr	r3, [pc, #84]	; (6a54 <z_arm_fault+0x228>)
    6a00:	61d5      	str	r5, [r2, #28]
    6a02:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    6a06:	4808      	ldr	r0, [pc, #32]	; (6a28 <z_arm_fault+0x1fc>)
    6a08:	f842 3f10 	str.w	r3, [r2, #16]!
    6a0c:	f019 fac4 	bl	1ff98 <z_log_msg_static_create.constprop.0>
    6a10:	46c5      	mov	sp, r8
}
    6a12:	e762      	b.n	68da <z_arm_fault+0xae>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6a14:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    6a18:	f022 0201 	bic.w	r2, r2, #1
    6a1c:	e7b9      	b.n	6992 <z_arm_fault+0x166>
    6a1e:	bf00      	nop
    6a20:	e000ed00 	.word	0xe000ed00
    6a24:	00032987 	.word	0x00032987
    6a28:	00024d68 	.word	0x00024d68
    6a2c:	20002fc0 	.word	0x20002fc0
    6a30:	000329b2 	.word	0x000329b2
    6a34:	000329c9 	.word	0x000329c9
    6a38:	000329ea 	.word	0x000329ea
    6a3c:	000329f8 	.word	0x000329f8
    6a40:	00032a17 	.word	0x00032a17
    6a44:	00032a33 	.word	0x00032a33
    6a48:	0003296e 	.word	0x0003296e
    6a4c:	00032959 	.word	0x00032959
    6a50:	00032a57 	.word	0x00032a57
    6a54:	01000004 	.word	0x01000004

00006a58 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6a58:	4b04      	ldr	r3, [pc, #16]	; (6a6c <z_arm_fault_init+0x14>)
    6a5a:	695a      	ldr	r2, [r3, #20]
    6a5c:	f042 0210 	orr.w	r2, r2, #16
    6a60:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    6a62:	695a      	ldr	r2, [r3, #20]
    6a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6a68:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    6a6a:	4770      	bx	lr
    6a6c:	e000ed00 	.word	0xe000ed00

00006a70 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6a70:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6a74:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6a78:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6a7a:	4672      	mov	r2, lr
	bl z_arm_fault
    6a7c:	f7ff fed6 	bl	682c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6a80:	bd01      	pop	{r0, pc}
    6a82:	bf00      	nop

00006a84 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6a84:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6a86:	2120      	movs	r1, #32
    6a88:	4803      	ldr	r0, [pc, #12]	; (6a98 <z_arm_interrupt_init+0x14>)
    6a8a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6a8c:	3301      	adds	r3, #1
    6a8e:	2b45      	cmp	r3, #69	; 0x45
    6a90:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6a94:	d1f9      	bne.n	6a8a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6a96:	4770      	bx	lr
    6a98:	e000e100 	.word	0xe000e100

00006a9c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    6a9c:	2000      	movs	r0, #0
    msr CONTROL, r0
    6a9e:	f380 8814 	msr	CONTROL, r0
    isb
    6aa2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    6aa6:	2000      	movs	r0, #0
    msr MSPLIM, r0
    6aa8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    6aac:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    6ab0:	f7fd ff5c 	bl	496c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    6ab4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6ab6:	4911      	ldr	r1, [pc, #68]	; (6afc <__start+0x60>)
    str r0, [r1]
    6ab8:	6008      	str	r0, [r1, #0]
    dsb
    6aba:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6abe:	4810      	ldr	r0, [pc, #64]	; (6b00 <__start+0x64>)
    msr msp, r0
    6ac0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    6ac4:	f000 f844 	bl	6b50 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6ac8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6aca:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    6ace:	480d      	ldr	r0, [pc, #52]	; (6b04 <__start+0x68>)
    ldr r1, =0xaa
    6ad0:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl z_early_memset
    6ad8:	f01d f8e3 	bl	23ca2 <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6adc:	4809      	ldr	r0, [pc, #36]	; (6b04 <__start+0x68>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6ae2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6ae4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6ae8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6aec:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6aee:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6af4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6af8:	f7ff fbe2 	bl	62c0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    6afc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6b00:	2000cf90 	.word	0x2000cf90
    ldr r0, =z_interrupt_stacks
    6b04:	2000b650 	.word	0x2000b650

00006b08 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    6b08:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6b0c:	4905      	ldr	r1, [pc, #20]	; (6b24 <sys_arch_reboot+0x1c>)
    6b0e:	4b06      	ldr	r3, [pc, #24]	; (6b28 <sys_arch_reboot+0x20>)
    6b10:	68ca      	ldr	r2, [r1, #12]
    6b12:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6b16:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6b18:	60cb      	str	r3, [r1, #12]
    6b1a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6b1e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6b20:	e7fd      	b.n	6b1e <sys_arch_reboot+0x16>
    6b22:	bf00      	nop
    6b24:	e000ed00 	.word	0xe000ed00
    6b28:	05fa0004 	.word	0x05fa0004

00006b2c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    6b2c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    6b2e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6b30:	4906      	ldr	r1, [pc, #24]	; (6b4c <z_arm_clear_arm_mpu_config+0x20>)
    6b32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    6b36:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    6b3a:	4293      	cmp	r3, r2
    6b3c:	db00      	blt.n	6b40 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    6b3e:	4770      	bx	lr
  mpu->RNR = rnr;
    6b40:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    6b44:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    6b48:	3301      	adds	r3, #1
    6b4a:	e7f6      	b.n	6b3a <z_arm_clear_arm_mpu_config+0xe>
    6b4c:	e000ed00 	.word	0xe000ed00

00006b50 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6b50:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6b52:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6b54:	2400      	movs	r4, #0
    6b56:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6b5a:	f7ff ffe7 	bl	6b2c <z_arm_clear_arm_mpu_config>
    6b5e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    6b60:	f04f 30ff 	mov.w	r0, #4294967295
    6b64:	4a0c      	ldr	r2, [pc, #48]	; (6b98 <z_arm_init_arch_hw_at_boot+0x48>)
    6b66:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    6b6a:	3301      	adds	r3, #1
    6b6c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    6b6e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    6b72:	d1f8      	bne.n	6b66 <z_arm_init_arch_hw_at_boot+0x16>
    6b74:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6b76:	f04f 30ff 	mov.w	r0, #4294967295
    6b7a:	4a07      	ldr	r2, [pc, #28]	; (6b98 <z_arm_init_arch_hw_at_boot+0x48>)
    6b7c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6b80:	3301      	adds	r3, #1
    6b82:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6b84:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6b88:	d1f8      	bne.n	6b7c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    6b8a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    6b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b90:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6b94:	bd10      	pop	{r4, pc}
    6b96:	bf00      	nop
    6b98:	e000e100 	.word	0xe000e100

00006b9c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6b9c:	4b08      	ldr	r3, [pc, #32]	; (6bc0 <z_impl_k_thread_abort+0x24>)
    6b9e:	689b      	ldr	r3, [r3, #8]
    6ba0:	4283      	cmp	r3, r0
    6ba2:	d10b      	bne.n	6bbc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6ba4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6ba8:	b143      	cbz	r3, 6bbc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6baa:	4b06      	ldr	r3, [pc, #24]	; (6bc4 <z_impl_k_thread_abort+0x28>)
    6bac:	685a      	ldr	r2, [r3, #4]
    6bae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6bb2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    6bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    6bba:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    6bbc:	f00f bbf0 	b.w	163a0 <z_thread_abort>
    6bc0:	200047dc 	.word	0x200047dc
    6bc4:	e000ed00 	.word	0xe000ed00

00006bc8 <arch_coredump_info_dump>:
 * inside function. So do it here.
 */
static struct arm_arch_block arch_blk;

void arch_coredump_info_dump(const z_arch_esf_t *esf)
{
    6bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6bca:	4605      	mov	r5, r0
	struct coredump_arch_hdr_t hdr = {
    6bcc:	4b14      	ldr	r3, [pc, #80]	; (6c20 <arch_coredump_info_dump+0x58>)
    6bce:	6818      	ldr	r0, [r3, #0]
    6bd0:	791b      	ldrb	r3, [r3, #4]
    6bd2:	9000      	str	r0, [sp, #0]
    6bd4:	f88d 3004 	strb.w	r3, [sp, #4]
		.hdr_version = ARCH_HDR_VER,
		.num_bytes = sizeof(arch_blk),
	};

	/* Nothing to process */
	if (esf == NULL) {
    6bd8:	b305      	cbz	r5, 6c1c <arch_coredump_info_dump+0x54>
		return;
	}

	(void)memset(&arch_blk, 0, sizeof(arch_blk));
    6bda:	4c12      	ldr	r4, [pc, #72]	; (6c24 <arch_coredump_info_dump+0x5c>)
    6bdc:	2244      	movs	r2, #68	; 0x44
    6bde:	2100      	movs	r1, #0
    6be0:	4620      	mov	r0, r4
    6be2:	f010 fbf9 	bl	173d8 <memset>
	 * Not all are in ESF but the GDB stub
	 * will need to send all 17 as one packet.
	 * The stub will need to send undefined
	 * for registers not presented in coredump.
	 */
	arch_blk.r.r0 = esf->basic.r0;
    6be6:	682b      	ldr	r3, [r5, #0]
		arch_blk.r.r11 = esf->extra_info.callee->v8;
	}
#endif

	/* Send for output */
	coredump_buffer_output((uint8_t *)&hdr, sizeof(hdr));
    6be8:	2105      	movs	r1, #5
	arch_blk.r.r0 = esf->basic.r0;
    6bea:	6023      	str	r3, [r4, #0]
	arch_blk.r.r1 = esf->basic.r1;
    6bec:	686b      	ldr	r3, [r5, #4]
	coredump_buffer_output((uint8_t *)&hdr, sizeof(hdr));
    6bee:	4668      	mov	r0, sp
	arch_blk.r.r1 = esf->basic.r1;
    6bf0:	6063      	str	r3, [r4, #4]
	arch_blk.r.r2 = esf->basic.r2;
    6bf2:	68ab      	ldr	r3, [r5, #8]
    6bf4:	60a3      	str	r3, [r4, #8]
	arch_blk.r.r3 = esf->basic.r3;
    6bf6:	68eb      	ldr	r3, [r5, #12]
    6bf8:	60e3      	str	r3, [r4, #12]
	arch_blk.r.r12 = esf->basic.ip;
    6bfa:	692b      	ldr	r3, [r5, #16]
    6bfc:	6123      	str	r3, [r4, #16]
	arch_blk.r.lr = esf->basic.lr;
    6bfe:	696b      	ldr	r3, [r5, #20]
    6c00:	6163      	str	r3, [r4, #20]
	arch_blk.r.pc = esf->basic.pc;
    6c02:	69ab      	ldr	r3, [r5, #24]
    6c04:	61a3      	str	r3, [r4, #24]
	arch_blk.r.xpsr = esf->basic.xpsr;
    6c06:	69eb      	ldr	r3, [r5, #28]
    6c08:	61e3      	str	r3, [r4, #28]
	arch_blk.r.sp = z_arm_coredump_fault_sp;
    6c0a:	4b07      	ldr	r3, [pc, #28]	; (6c28 <arch_coredump_info_dump+0x60>)
    6c0c:	681b      	ldr	r3, [r3, #0]
    6c0e:	6223      	str	r3, [r4, #32]
	coredump_buffer_output((uint8_t *)&hdr, sizeof(hdr));
    6c10:	f000 fa30 	bl	7074 <coredump_buffer_output>
	coredump_buffer_output((uint8_t *)&arch_blk, sizeof(arch_blk));
    6c14:	2144      	movs	r1, #68	; 0x44
    6c16:	4620      	mov	r0, r4
    6c18:	f000 fa2c 	bl	7074 <coredump_buffer_output>
}
    6c1c:	b003      	add	sp, #12
    6c1e:	bd30      	pop	{r4, r5, pc}
    6c20:	00024db0 	.word	0x00024db0
    6c24:	20005422 	.word	0x20005422
    6c28:	20002fc0 	.word	0x20002fc0

00006c2c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6c2e:	4c09      	ldr	r4, [pc, #36]	; (6c54 <z_arm_configure_static_mpu_regions+0x28>)
    6c30:	4a09      	ldr	r2, [pc, #36]	; (6c58 <z_arm_configure_static_mpu_regions+0x2c>)
    6c32:	4623      	mov	r3, r4
    6c34:	2101      	movs	r1, #1
    6c36:	4809      	ldr	r0, [pc, #36]	; (6c5c <z_arm_configure_static_mpu_regions+0x30>)
    6c38:	f000 f92a 	bl	6e90 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    6c3c:	2300      	movs	r3, #0
    6c3e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    6c40:	4b07      	ldr	r3, [pc, #28]	; (6c60 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    6c42:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    6c44:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    6c46:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    6c48:	9301      	str	r3, [sp, #4]
    6c4a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    6c4c:	f000 f92a 	bl	6ea4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    6c50:	b004      	add	sp, #16
    6c52:	bd10      	pop	{r4, pc}
    6c54:	20070000 	.word	0x20070000
    6c58:	20000000 	.word	0x20000000
    6c5c:	00025048 	.word	0x00025048
    6c60:	20001438 	.word	0x20001438

00006c64 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    6c64:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    6c66:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    6c68:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    6c6a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    6c6e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    6c72:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    6c74:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    6c76:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    6c78:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    6c7c:	4905      	ldr	r1, [pc, #20]	; (6c94 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    6c7e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    6c82:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    6c86:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    6c8a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    6c8e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    6c92:	bd10      	pop	{r4, pc}
    6c94:	e000ed00 	.word	0xe000ed00

00006c98 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    6c98:	b580      	push	{r7, lr}
    6c9a:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6c9c:	b088      	sub	sp, #32
    6c9e:	466a      	mov	r2, sp
    6ca0:	4b07      	ldr	r3, [pc, #28]	; (6cc0 <region_allocate_and_init.part.0+0x28>)
    6ca2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    6ca6:	2303      	movs	r3, #3
    6ca8:	f842 3f10 	str.w	r3, [r2, #16]!
    6cac:	2300      	movs	r3, #0
    6cae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6cb2:	4804      	ldr	r0, [pc, #16]	; (6cc4 <region_allocate_and_init.part.0+0x2c>)
    6cb4:	f7fe f8e6 	bl	4e84 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    6cb8:	f06f 0015 	mvn.w	r0, #21
    6cbc:	46bd      	mov	sp, r7
    6cbe:	bd80      	pop	{r7, pc}
    6cc0:	00032a6e 	.word	0x00032a6e
    6cc4:	00024cb0 	.word	0x00024cb0

00006cc8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    6cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ccc:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6cce:	4606      	mov	r6, r0
    6cd0:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    6cd4:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    6cd6:	4d5f      	ldr	r5, [pc, #380]	; (6e54 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    6cd8:	af00      	add	r7, sp, #0
    6cda:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	4599      	cmp	r9, r3
    6ce0:	da35      	bge.n	6d4e <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    6ce2:	f8d6 8004 	ldr.w	r8, [r6, #4]
    6ce6:	f1b8 0f00 	cmp.w	r8, #0
    6cea:	d054      	beq.n	6d96 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    6cec:	f1b8 0f1f 	cmp.w	r8, #31
    6cf0:	d91b      	bls.n	6d2a <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    6cf2:	f018 0f1f 	tst.w	r8, #31
    6cf6:	d118      	bne.n	6d2a <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    6cf8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    6cfc:	f01b 0f1f 	tst.w	fp, #31
    6d00:	d113      	bne.n	6d2a <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    6d02:	4658      	mov	r0, fp
    6d04:	f019 f94d 	bl	1ffa2 <arm_cmse_mpu_region_get>
    6d08:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    6d0a:	eb08 000b 	add.w	r0, r8, fp
    6d0e:	3801      	subs	r0, #1
    6d10:	f019 f947 	bl	1ffa2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    6d14:	4582      	cmp	sl, r0
    6d16:	d01f      	beq.n	6d58 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    6d18:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    6d1c:	466c      	mov	r4, sp
    6d1e:	b088      	sub	sp, #32
    6d20:	466a      	mov	r2, sp
    6d22:	494d      	ldr	r1, [pc, #308]	; (6e58 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    6d24:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    6d28:	e005      	b.n	6d36 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    6d2a:	466c      	mov	r4, sp
    6d2c:	b088      	sub	sp, #32
    6d2e:	466a      	mov	r2, sp
    6d30:	4b4a      	ldr	r3, [pc, #296]	; (6e5c <mpu_configure_regions_and_partition.constprop.0+0x194>)
    6d32:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    6d36:	2303      	movs	r3, #3
    6d38:	f842 3f10 	str.w	r3, [r2, #16]!
    6d3c:	2300      	movs	r3, #0
    6d3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6d42:	4847      	ldr	r0, [pc, #284]	; (6e60 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    6d44:	f7fe f89e 	bl	4e84 <z_impl_z_log_msg_static_create>
    6d48:	46a5      	mov	sp, r4
			return -EINVAL;
    6d4a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    6d4e:	4620      	mov	r0, r4
    6d50:	371c      	adds	r7, #28
    6d52:	46bd      	mov	sp, r7
    6d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    6d58:	f11a 0f16 	cmn.w	sl, #22
    6d5c:	d0de      	beq.n	6d1c <mpu_configure_regions_and_partition.constprop.0+0x54>
    6d5e:	4554      	cmp	r4, sl
    6d60:	dddc      	ble.n	6d1c <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    6d62:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    6d66:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    6d6a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    6d6e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    6d72:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    6d76:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    6d7a:	e9d6 2100 	ldrd	r2, r1, [r6]
    6d7e:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    6d80:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    6d82:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    6d86:	d11e      	bne.n	6dc6 <mpu_configure_regions_and_partition.constprop.0+0xfe>
    6d88:	45d8      	cmp	r8, fp
    6d8a:	d108      	bne.n	6d9e <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    6d8c:	4631      	mov	r1, r6
    6d8e:	fa5f f08a 	uxtb.w	r0, sl
    6d92:	f019 f90f 	bl	1ffb4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    6d96:	f109 0901 	add.w	r9, r9, #1
    6d9a:	360c      	adds	r6, #12
    6d9c:	e79e      	b.n	6cdc <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    6d9e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    6da2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    6da6:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    6daa:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    6dae:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    6db0:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    6db2:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    6db6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    6db8:	f019 f8fc 	bl	1ffb4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    6dbc:	f110 0f16 	cmn.w	r0, #22
    6dc0:	d0c3      	beq.n	6d4a <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    6dc2:	1c44      	adds	r4, r0, #1
    6dc4:	e7e7      	b.n	6d96 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    6dc6:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    6dc8:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    6dca:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    6dcc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    6dd0:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    6dd4:	d108      	bne.n	6de8 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    6dd6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    6dda:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    6ddc:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    6de0:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    6de2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    6de6:	e7e7      	b.n	6db8 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    6de8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    6dec:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    6df0:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    6df2:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    6df6:	4631      	mov	r1, r6
    6df8:	f019 f8dc 	bl	1ffb4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    6dfc:	f110 0f16 	cmn.w	r0, #22
    6e00:	d0a3      	beq.n	6d4a <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    6e02:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    6e06:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    6e0a:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    6e0c:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    6e10:	f362 0304 	bfi	r3, r2, #0, #5
    6e14:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    6e16:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    6e1a:	7c3a      	ldrb	r2, [r7, #16]
    6e1c:	085b      	lsrs	r3, r3, #1
    6e1e:	f363 1247 	bfi	r2, r3, #5, #3
    6e22:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    6e24:	e9d6 3200 	ldrd	r3, r2, [r6]
    6e28:	4413      	add	r3, r2
    6e2a:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    6e2c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    6e30:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    6e32:	4443      	add	r3, r8
    6e34:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    6e38:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    6e3a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    6e3e:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    6e40:	617b      	str	r3, [r7, #20]
    6e42:	d902      	bls.n	6e4a <mpu_configure_regions_and_partition.constprop.0+0x182>
    6e44:	f7ff ff28 	bl	6c98 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    6e48:	e7b8      	b.n	6dbc <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    6e4a:	f107 0108 	add.w	r1, r7, #8
    6e4e:	f7ff ff09 	bl	6c64 <region_init>
    6e52:	e7b6      	b.n	6dc2 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    6e54:	e000ed00 	.word	0xe000ed00
    6e58:	00032ab7 	.word	0x00032ab7
    6e5c:	00032a94 	.word	0x00032a94
    6e60:	00024cb0 	.word	0x00024cb0

00006e64 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6e64:	2205      	movs	r2, #5
    6e66:	4b04      	ldr	r3, [pc, #16]	; (6e78 <arm_core_mpu_enable+0x14>)
    6e68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6e6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e70:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6e74:	4770      	bx	lr
    6e76:	bf00      	nop
    6e78:	e000ed00 	.word	0xe000ed00

00006e7c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6e7c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6e80:	2200      	movs	r2, #0
    6e82:	4b02      	ldr	r3, [pc, #8]	; (6e8c <arm_core_mpu_disable+0x10>)
    6e84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6e88:	4770      	bx	lr
    6e8a:	bf00      	nop
    6e8c:	e000ed00 	.word	0xe000ed00

00006e90 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6e90:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6e92:	4c03      	ldr	r4, [pc, #12]	; (6ea0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    6e94:	7822      	ldrb	r2, [r4, #0]
    6e96:	f7ff ff17 	bl	6cc8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6e9a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6e9c:	bd10      	pop	{r4, pc}
    6e9e:	bf00      	nop
    6ea0:	20005466 	.word	0x20005466

00006ea4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    6ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ea8:	4d29      	ldr	r5, [pc, #164]	; (6f50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    6eaa:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    6eac:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    6eae:	f04f 0800 	mov.w	r8, #0
    6eb2:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    6eb4:	4f27      	ldr	r7, [pc, #156]	; (6f54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    6eb6:	45d0      	cmp	r8, sl
    6eb8:	da1b      	bge.n	6ef2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    6eba:	f8d6 9004 	ldr.w	r9, [r6, #4]
    6ebe:	f1b9 0f00 	cmp.w	r9, #0
    6ec2:	d03f      	beq.n	6f44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    6ec4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    6ec6:	4608      	mov	r0, r1
    6ec8:	9101      	str	r1, [sp, #4]
    6eca:	f019 f86a 	bl	1ffa2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    6ece:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    6ed0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    6ed2:	eb09 0001 	add.w	r0, r9, r1
    6ed6:	3801      	subs	r0, #1
    6ed8:	f019 f863 	bl	1ffa2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    6edc:	4284      	cmp	r4, r0
    6ede:	f04f 0214 	mov.w	r2, #20
    6ee2:	4b1d      	ldr	r3, [pc, #116]	; (6f58 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    6ee4:	d008      	beq.n	6ef8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    6ee6:	fb02 f308 	mul.w	r3, r2, r8
    6eea:	f06f 0215 	mvn.w	r2, #21
    6eee:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    6ef2:	b003      	add	sp, #12
    6ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    6ef8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    6efc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    6efe:	d0f8      	beq.n	6ef2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    6f00:	7819      	ldrb	r1, [r3, #0]
    6f02:	42a1      	cmp	r1, r4
    6f04:	ddf5      	ble.n	6ef2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    6f06:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    6f0a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    6f0e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    6f12:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    6f16:	f100 0108 	add.w	r1, r0, #8
    6f1a:	7b00      	ldrb	r0, [r0, #12]
    6f1c:	f364 0004 	bfi	r0, r4, #0, #5
    6f20:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    6f22:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    6f26:	790c      	ldrb	r4, [r1, #4]
    6f28:	0840      	lsrs	r0, r0, #1
    6f2a:	f360 1447 	bfi	r4, r0, #5, #3
    6f2e:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    6f30:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    6f34:	f021 011f 	bic.w	r1, r1, #31
    6f38:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    6f3a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    6f3e:	f021 011f 	bic.w	r1, r1, #31
    6f42:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    6f44:	f108 0801 	add.w	r8, r8, #1
    6f48:	3514      	adds	r5, #20
    6f4a:	360c      	adds	r6, #12
    6f4c:	e7b3      	b.n	6eb6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    6f4e:	bf00      	nop
    6f50:	20002fc4 	.word	0x20002fc4
    6f54:	e000ed00 	.word	0xe000ed00
    6f58:	20005466 	.word	0x20005466

00006f5c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    6f5c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6f5e:	4d0e      	ldr	r5, [pc, #56]	; (6f98 <z_arm_mpu_init+0x3c>)
    6f60:	682c      	ldr	r4, [r5, #0]
    6f62:	2c08      	cmp	r4, #8
    6f64:	d815      	bhi.n	6f92 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6f66:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    6f68:	f7ff ff88 	bl	6e7c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    6f6c:	4b0b      	ldr	r3, [pc, #44]	; (6f9c <z_arm_mpu_init+0x40>)
    6f6e:	4a0c      	ldr	r2, [pc, #48]	; (6fa0 <z_arm_mpu_init+0x44>)
    6f70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6f74:	4284      	cmp	r4, r0
    6f76:	d105      	bne.n	6f84 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6f78:	4b0a      	ldr	r3, [pc, #40]	; (6fa4 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6f7a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    6f7c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    6f7e:	f7ff ff71 	bl	6e64 <arm_core_mpu_enable>
}
    6f82:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    6f84:	6869      	ldr	r1, [r5, #4]
    6f86:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    6f8a:	f7ff fe6b 	bl	6c64 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6f8e:	3001      	adds	r0, #1
    6f90:	e7f0      	b.n	6f74 <z_arm_mpu_init+0x18>
		return -1;
    6f92:	f04f 30ff 	mov.w	r0, #4294967295
    6f96:	e7f4      	b.n	6f82 <z_arm_mpu_init+0x26>
    6f98:	00025054 	.word	0x00025054
    6f9c:	e000ed00 	.word	0xe000ed00
    6fa0:	0044ffaa 	.word	0x0044ffaa
    6fa4:	20005466 	.word	0x20005466

00006fa8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6fa8:	4b01      	ldr	r3, [pc, #4]	; (6fb0 <__stdout_hook_install+0x8>)
    6faa:	6018      	str	r0, [r3, #0]
}
    6fac:	4770      	bx	lr
    6fae:	bf00      	nop
    6fb0:	200008c4 	.word	0x200008c4

00006fb4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fb6:	460d      	mov	r5, r1
    6fb8:	4f09      	ldr	r7, [pc, #36]	; (6fe0 <z_impl_zephyr_write_stdout+0x2c>)
    6fba:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6fbc:	f1c0 0401 	rsb	r4, r0, #1
    6fc0:	19a3      	adds	r3, r4, r6
    6fc2:	429d      	cmp	r5, r3
    6fc4:	dc01      	bgt.n	6fca <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    6fc6:	4628      	mov	r0, r5
    6fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    6fca:	7873      	ldrb	r3, [r6, #1]
    6fcc:	2b0a      	cmp	r3, #10
    6fce:	d102      	bne.n	6fd6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    6fd0:	200d      	movs	r0, #13
    6fd2:	683b      	ldr	r3, [r7, #0]
    6fd4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    6fd6:	683b      	ldr	r3, [r7, #0]
    6fd8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    6fdc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    6fde:	e7ef      	b.n	6fc0 <z_impl_zephyr_write_stdout+0xc>
    6fe0:	200008c4 	.word	0x200008c4

00006fe4 <_exit>:
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
	_write(1, "exit\n", 5);
    6fe4:	2205      	movs	r2, #5
    6fe6:	2001      	movs	r0, #1
{
    6fe8:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    6fea:	4902      	ldr	r1, [pc, #8]	; (6ff4 <_exit+0x10>)
    6fec:	f7fc fdc0 	bl	3b70 <_write>
	while (1) {
    6ff0:	e7fe      	b.n	6ff0 <_exit+0xc>
    6ff2:	bf00      	nop
    6ff4:	00032ada 	.word	0x00032ada

00006ff8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    6ff8:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    6ffa:	4c07      	ldr	r4, [pc, #28]	; (7018 <_sbrk+0x20>)
    6ffc:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    6ffe:	18c2      	adds	r2, r0, r3
    7000:	4806      	ldr	r0, [pc, #24]	; (701c <_sbrk+0x24>)
    7002:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    7006:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
    700a:	428a      	cmp	r2, r1
		heap_sz += count;
    700c:	bf36      	itet	cc
    700e:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    7010:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    7014:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    7016:	bd10      	pop	{r4, pc}
    7018:	20002fd8 	.word	0x20002fd8
    701c:	2003b8e4 	.word	0x2003b8e4

00007020 <__chk_fail>:
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
    7020:	221d      	movs	r2, #29
{
    7022:	b508      	push	{r3, lr}
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
    7024:	4904      	ldr	r1, [pc, #16]	; (7038 <__chk_fail+0x18>)
    7026:	2002      	movs	r0, #2
    7028:	f7fc fda2 	bl	3b70 <_write>
	k_oops();
    702c:	4040      	eors	r0, r0
    702e:	f380 8811 	msr	BASEPRI, r0
    7032:	f04f 0003 	mov.w	r0, #3
    7036:	df02      	svc	2
	CODE_UNREACHABLE;
    7038:	00032ae0 	.word	0x00032ae0

0000703c <posix_thread_pool_init>:
{
	size_t i;


	for (i = 0; i < CONFIG_MAX_PTHREAD_COUNT; ++i) {
		posix_thread_pool[i].state = PTHREAD_EXITED;
    703c:	2203      	movs	r2, #3
    703e:	4b06      	ldr	r3, [pc, #24]	; (7058 <posix_thread_pool_init+0x1c>)
	}

	return 0;
}
    7040:	2000      	movs	r0, #0
		posix_thread_pool[i].state = PTHREAD_EXITED;
    7042:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    7046:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    704a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
    704e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    7052:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
}
    7056:	4770      	bx	lr
    7058:	20001ff8 	.word	0x20001ff8

0000705c <z_coredump_start>:
	z_coredump_end();
}

void z_coredump_start(void)
{
	backend_api->start();
    705c:	4b01      	ldr	r3, [pc, #4]	; (7064 <z_coredump_start+0x8>)
    705e:	681b      	ldr	r3, [r3, #0]
    7060:	4718      	bx	r3
    7062:	bf00      	nop
    7064:	200008c8 	.word	0x200008c8

00007068 <z_coredump_end>:
}

void z_coredump_end(void)
{
	backend_api->end();
    7068:	4b01      	ldr	r3, [pc, #4]	; (7070 <z_coredump_end+0x8>)
    706a:	685b      	ldr	r3, [r3, #4]
    706c:	4718      	bx	r3
    706e:	bf00      	nop
    7070:	200008c8 	.word	0x200008c8

00007074 <coredump_buffer_output>:
}

void coredump_buffer_output(uint8_t *buf, size_t buflen)
{
	if ((buf == NULL) || (buflen == 0)) {
    7074:	b118      	cbz	r0, 707e <coredump_buffer_output+0xa>
    7076:	b111      	cbz	r1, 707e <coredump_buffer_output+0xa>
		/* Invalid buffer, skip */
		return;
	}

	backend_api->buffer_output(buf, buflen);
    7078:	4b01      	ldr	r3, [pc, #4]	; (7080 <coredump_buffer_output+0xc>)
    707a:	689b      	ldr	r3, [r3, #8]
    707c:	4718      	bx	r3
}
    707e:	4770      	bx	lr
    7080:	200008c8 	.word	0x200008c8

00007084 <coredump_memory_dump>:

void coredump_memory_dump(uintptr_t start_addr, uintptr_t end_addr)
{
    7084:	b530      	push	{r4, r5, lr}
	struct coredump_mem_hdr_t m;
	size_t len;

	if ((start_addr == POINTER_TO_UINT(NULL)) ||
    7086:	4604      	mov	r4, r0
{
    7088:	b085      	sub	sp, #20
	if ((start_addr == POINTER_TO_UINT(NULL)) ||
    708a:	b1c0      	cbz	r0, 70be <coredump_memory_dump+0x3a>
	    (end_addr == POINTER_TO_UINT(NULL))) {
		return;
	}

	if (start_addr >= end_addr) {
    708c:	4288      	cmp	r0, r1
    708e:	d216      	bcs.n	70be <coredump_memory_dump+0x3a>
		return;
	}

	len = end_addr - start_addr;

	m.id = COREDUMP_MEM_HDR_ID;
    7090:	234d      	movs	r3, #77	; 0x4d
    7092:	f88d 3004 	strb.w	r3, [sp, #4]
	m.hdr_version = COREDUMP_MEM_HDR_VER;
    7096:	2301      	movs	r3, #1
    7098:	f88d 3005 	strb.w	r3, [sp, #5]
    709c:	2300      	movs	r3, #0
    709e:	f88d 3006 	strb.w	r3, [sp, #6]
	backend_api->buffer_output(buf, buflen);
    70a2:	4b08      	ldr	r3, [pc, #32]	; (70c4 <coredump_memory_dump+0x40>)
	len = end_addr - start_addr;
    70a4:	1a0d      	subs	r5, r1, r0

	if (sizeof(uintptr_t) == 8) {
		m.start	= sys_cpu_to_le64(start_addr);
		m.end = sys_cpu_to_le64(end_addr);
	} else if (sizeof(uintptr_t) == 4) {
		m.start	= sys_cpu_to_le32(start_addr);
    70a6:	f8cd 0007 	str.w	r0, [sp, #7]
		m.end = sys_cpu_to_le32(end_addr);
    70aa:	f8cd 100b 	str.w	r1, [sp, #11]
	backend_api->buffer_output(buf, buflen);
    70ae:	a801      	add	r0, sp, #4
    70b0:	210b      	movs	r1, #11
    70b2:	689b      	ldr	r3, [r3, #8]
    70b4:	4798      	blx	r3
	}

	coredump_buffer_output((uint8_t *)&m, sizeof(m));

	coredump_buffer_output((uint8_t *)start_addr, len);
    70b6:	4629      	mov	r1, r5
    70b8:	4620      	mov	r0, r4
    70ba:	f7ff ffdb 	bl	7074 <coredump_buffer_output>
}
    70be:	b005      	add	sp, #20
    70c0:	bd30      	pop	{r4, r5, pc}
    70c2:	bf00      	nop
    70c4:	200008c8 	.word	0x200008c8

000070c8 <coredump>:
{
    70c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    70ca:	460d      	mov	r5, r1
    70cc:	4606      	mov	r6, r0
    70ce:	4614      	mov	r4, r2
	z_coredump_start();
    70d0:	f7ff ffc4 	bl	705c <z_coredump_start>
	struct coredump_hdr_t hdr = {
    70d4:	f244 535a 	movw	r3, #17754	; 0x455a
    70d8:	f8ad 3004 	strh.w	r3, [sp, #4]
    70dc:	2301      	movs	r3, #1
    70de:	f8ad 3006 	strh.w	r3, [sp, #6]
    70e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
    70e6:	9603      	str	r6, [sp, #12]
    70e8:	9302      	str	r3, [sp, #8]
	hdr.tgt_code = sys_cpu_to_le16(arch_coredump_tgt_code_get());
    70ea:	f018 ff58 	bl	1ff9e <arch_coredump_tgt_code_get>
	backend_api->buffer_output((uint8_t *)&hdr, sizeof(hdr));
    70ee:	4b0d      	ldr	r3, [pc, #52]	; (7124 <coredump+0x5c>)
	hdr.tgt_code = sys_cpu_to_le16(arch_coredump_tgt_code_get());
    70f0:	f8ad 0008 	strh.w	r0, [sp, #8]
	backend_api->buffer_output((uint8_t *)&hdr, sizeof(hdr));
    70f4:	210c      	movs	r1, #12
    70f6:	689b      	ldr	r3, [r3, #8]
    70f8:	a801      	add	r0, sp, #4
    70fa:	4798      	blx	r3
	if (esf != NULL) {
    70fc:	b115      	cbz	r5, 7104 <coredump+0x3c>
		arch_coredump_info_dump(esf);
    70fe:	4628      	mov	r0, r5
    7100:	f7ff fd62 	bl	6bc8 <arch_coredump_info_dump>
	if (thread != NULL) {
    7104:	b14c      	cbz	r4, 711a <coredump+0x52>
	coredump_memory_dump(POINTER_TO_UINT(thread), end_addr);
    7106:	4620      	mov	r0, r4
    7108:	f104 0180 	add.w	r1, r4, #128	; 0x80
    710c:	f7ff ffba 	bl	7084 <coredump_memory_dump>
	end_addr = thread->stack_info.start + thread->stack_info.size;
    7110:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
	coredump_memory_dump(thread->stack_info.start, end_addr);
    7114:	4401      	add	r1, r0
    7116:	f7ff ffb5 	bl	7084 <coredump_memory_dump>
}
    711a:	b004      	add	sp, #16
    711c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_coredump_end();
    7120:	f7ff bfa2 	b.w	7068 <z_coredump_end>
    7124:	200008c8 	.word	0x200008c8

00007128 <coredump_logging_backend_query>:
static int coredump_logging_backend_query(enum coredump_query_id query_id,
					  void *arg)
{
	int ret;

	switch (query_id) {
    7128:	b910      	cbnz	r0, 7130 <coredump_logging_backend_query+0x8>
	case COREDUMP_QUERY_GET_ERROR:
		ret = error;
    712a:	4b03      	ldr	r3, [pc, #12]	; (7138 <coredump_logging_backend_query+0x10>)
    712c:	6818      	ldr	r0, [r3, #0]
		break;
    712e:	4770      	bx	lr
	default:
		ret = -ENOTSUP;
    7130:	f06f 0085 	mvn.w	r0, #133	; 0x85
		break;
	}

	return ret;
}
    7134:	4770      	bx	lr
    7136:	bf00      	nop
    7138:	20002fdc 	.word	0x20002fdc

0000713c <coredump_logging_backend_cmd>:
static int coredump_logging_backend_cmd(enum coredump_cmd_id cmd_id,
					void *arg)
{
	int ret;

	switch (cmd_id) {
    713c:	b910      	cbnz	r0, 7144 <coredump_logging_backend_cmd+0x8>
	case COREDUMP_CMD_CLEAR_ERROR:
		ret = 0;
		error = 0;
    713e:	4b03      	ldr	r3, [pc, #12]	; (714c <coredump_logging_backend_cmd+0x10>)
    7140:	6018      	str	r0, [r3, #0]
		break;
    7142:	4770      	bx	lr
	default:
		ret = -ENOTSUP;
    7144:	f06f 0085 	mvn.w	r0, #133	; 0x85
		break;
	}

	return ret;
}
    7148:	4770      	bx	lr
    714a:	bf00      	nop
    714c:	20002fdc 	.word	0x20002fdc

00007150 <coredump_logging_backend_start>:
	error = 0;
    7150:	2200      	movs	r2, #0
{
    7152:	b510      	push	{r4, lr}
	error = 0;
    7154:	4b0b      	ldr	r3, [pc, #44]	; (7184 <coredump_logging_backend_start+0x34>)
{
    7156:	b086      	sub	sp, #24
	error = 0;
    7158:	601a      	str	r2, [r3, #0]
    715a:	f7fd fd59 	bl	4c10 <z_impl_log_process>
	while (LOG_PROCESS()) {
    715e:	4604      	mov	r4, r0
    7160:	2800      	cmp	r0, #0
    7162:	d1fa      	bne.n	715a <coredump_logging_backend_start+0xa>
	z_impl_log_panic();
    7164:	f7fd fdae 	bl	4cc4 <z_impl_log_panic>
	LOG_ERR(COREDUMP_PREFIX_STR COREDUMP_BEGIN_STR);
    7168:	4b07      	ldr	r3, [pc, #28]	; (7188 <coredump_logging_backend_start+0x38>)
    716a:	9305      	str	r3, [sp, #20]
    716c:	2302      	movs	r3, #2
    716e:	9304      	str	r3, [sp, #16]
    7170:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7174:	4623      	mov	r3, r4
    7176:	4805      	ldr	r0, [pc, #20]	; (718c <coredump_logging_backend_start+0x3c>)
    7178:	aa04      	add	r2, sp, #16
    717a:	f7fd fe83 	bl	4e84 <z_impl_z_log_msg_static_create>
}
    717e:	b006      	add	sp, #24
    7180:	bd10      	pop	{r4, pc}
    7182:	bf00      	nop
    7184:	20002fdc 	.word	0x20002fdc
    7188:	00032b0d 	.word	0x00032b0d
    718c:	00024c78 	.word	0x00024c78

00007190 <coredump_logging_backend_buffer_output>:
{
    7190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7194:	460e      	mov	r6, r1
	if ((buf == NULL) || (buflen == 0)) {
    7196:	4604      	mov	r4, r0
{
    7198:	af00      	add	r7, sp, #0
	if ((buf == NULL) || (buflen == 0)) {
    719a:	b100      	cbz	r0, 719e <coredump_logging_backend_buffer_output+0xe>
    719c:	b921      	cbnz	r1, 71a8 <coredump_logging_backend_buffer_output+0x18>
		error = -EINVAL;
    719e:	f06f 0215 	mvn.w	r2, #21
		remaining = 0;
    71a2:	2600      	movs	r6, #0
		error = -EINVAL;
    71a4:	4b20      	ldr	r3, [pc, #128]	; (7228 <coredump_logging_backend_buffer_output+0x98>)
    71a6:	601a      	str	r2, [r3, #0]
		if (hex2char(buf[i] >> 4, &log_buf[log_ptr]) < 0) {
    71a8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 722c <coredump_logging_backend_buffer_output+0x9c>
			LOG_ERR(COREDUMP_PREFIX_STR "%s", log_buf);
    71ac:	f8df 9080 	ldr.w	r9, [pc, #128]	; 7230 <coredump_logging_backend_buffer_output+0xa0>
	while (remaining > 0) {
    71b0:	b16e      	cbz	r6, 71ce <coredump_logging_backend_buffer_output+0x3e>
    71b2:	2500      	movs	r5, #0
		if (hex2char(buf[i] >> 4, &log_buf[log_ptr]) < 0) {
    71b4:	7820      	ldrb	r0, [r4, #0]
    71b6:	eb08 0105 	add.w	r1, r8, r5
    71ba:	0900      	lsrs	r0, r0, #4
    71bc:	f017 fade 	bl	1e77c <hex2char>
    71c0:	2800      	cmp	r0, #0
    71c2:	46a2      	mov	sl, r4
    71c4:	da06      	bge.n	71d4 <coredump_logging_backend_buffer_output+0x44>
			error = -EINVAL;
    71c6:	f06f 0215 	mvn.w	r2, #21
    71ca:	4b17      	ldr	r3, [pc, #92]	; (7228 <coredump_logging_backend_buffer_output+0x98>)
    71cc:	601a      	str	r2, [r3, #0]
}
    71ce:	46bd      	mov	sp, r7
    71d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (hex2char(buf[i] & 0xf, &log_buf[log_ptr]) < 0) {
    71d4:	f89a 0000 	ldrb.w	r0, [sl]
		log_ptr++;
    71d8:	1c69      	adds	r1, r5, #1
		if (hex2char(buf[i] & 0xf, &log_buf[log_ptr]) < 0) {
    71da:	fa58 f181 	uxtab	r1, r8, r1
    71de:	f000 000f 	and.w	r0, r0, #15
    71e2:	f017 facb 	bl	1e77c <hex2char>
    71e6:	2800      	cmp	r0, #0
    71e8:	f104 0401 	add.w	r4, r4, #1
    71ec:	dbeb      	blt.n	71c6 <coredump_logging_backend_buffer_output+0x36>
		log_ptr++;
    71ee:	3502      	adds	r5, #2
    71f0:	b2ed      	uxtb	r5, r5
		if ((log_ptr >= LOG_BUF_SZ) || (remaining == 0)) {
    71f2:	2d40      	cmp	r5, #64	; 0x40
		remaining--;
    71f4:	f106 36ff 	add.w	r6, r6, #4294967295
		if ((log_ptr >= LOG_BUF_SZ) || (remaining == 0)) {
    71f8:	d001      	beq.n	71fe <coredump_logging_backend_buffer_output+0x6e>
    71fa:	2e00      	cmp	r6, #0
    71fc:	d1da      	bne.n	71b4 <coredump_logging_backend_buffer_output+0x24>
			log_buf[log_ptr] = '\0';
    71fe:	2300      	movs	r3, #0
    7200:	f808 3005 	strb.w	r3, [r8, r5]
			LOG_ERR(COREDUMP_PREFIX_STR "%s", log_buf);
    7204:	466d      	mov	r5, sp
    7206:	b088      	sub	sp, #32
    7208:	466a      	mov	r2, sp
    720a:	f44f 7100 	mov.w	r1, #512	; 0x200
    720e:	8391      	strh	r1, [r2, #28]
    7210:	4908      	ldr	r1, [pc, #32]	; (7234 <coredump_logging_backend_buffer_output+0xa4>)
    7212:	e9c2 9805 	strd	r9, r8, [r2, #20]
    7216:	f842 1f10 	str.w	r1, [r2, #16]!
    721a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    721e:	4806      	ldr	r0, [pc, #24]	; (7238 <coredump_logging_backend_buffer_output+0xa8>)
    7220:	f7fd fe30 	bl	4e84 <z_impl_z_log_msg_static_create>
    7224:	46ad      	mov	sp, r5
			log_ptr = 0;
    7226:	e7c3      	b.n	71b0 <coredump_logging_backend_buffer_output+0x20>
    7228:	20002fdc 	.word	0x20002fdc
    722c:	20005467 	.word	0x20005467
    7230:	00032b18 	.word	0x00032b18
    7234:	01000003 	.word	0x01000003
    7238:	00024c78 	.word	0x00024c78

0000723c <coredump_logging_backend_end>:
{
    723c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (error != 0) {
    723e:	4b0e      	ldr	r3, [pc, #56]	; (7278 <coredump_logging_backend_end+0x3c>)
    7240:	681b      	ldr	r3, [r3, #0]
    7242:	b153      	cbz	r3, 725a <coredump_logging_backend_end+0x1e>
		LOG_ERR(COREDUMP_PREFIX_STR COREDUMP_ERROR_STR);
    7244:	4b0d      	ldr	r3, [pc, #52]	; (727c <coredump_logging_backend_end+0x40>)
    7246:	9305      	str	r3, [sp, #20]
    7248:	2302      	movs	r3, #2
    724a:	9304      	str	r3, [sp, #16]
    724c:	2300      	movs	r3, #0
    724e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7252:	480b      	ldr	r0, [pc, #44]	; (7280 <coredump_logging_backend_end+0x44>)
    7254:	aa04      	add	r2, sp, #16
    7256:	f7fd fe15 	bl	4e84 <z_impl_z_log_msg_static_create>
	LOG_ERR(COREDUMP_PREFIX_STR COREDUMP_END_STR);
    725a:	4b0a      	ldr	r3, [pc, #40]	; (7284 <coredump_logging_backend_end+0x48>)
    725c:	9305      	str	r3, [sp, #20]
    725e:	2302      	movs	r3, #2
    7260:	9304      	str	r3, [sp, #16]
    7262:	2300      	movs	r3, #0
    7264:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7268:	4805      	ldr	r0, [pc, #20]	; (7280 <coredump_logging_backend_end+0x44>)
    726a:	aa04      	add	r2, sp, #16
    726c:	f7fd fe0a 	bl	4e84 <z_impl_z_log_msg_static_create>
}
    7270:	b007      	add	sp, #28
    7272:	f85d fb04 	ldr.w	pc, [sp], #4
    7276:	bf00      	nop
    7278:	20002fdc 	.word	0x20002fdc
    727c:	00032b1f 	.word	0x00032b1f
    7280:	00024c78 	.word	0x00024c78
    7284:	00032b36 	.word	0x00032b36

00007288 <z_impl_sys_rand32_get>:
static const struct device *const entropy_dev =
	DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
    7288:	b507      	push	{r0, r1, r2, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    728a:	2204      	movs	r2, #4
    728c:	4807      	ldr	r0, [pc, #28]	; (72ac <z_impl_sys_rand32_get+0x24>)
    728e:	eb0d 0102 	add.w	r1, sp, r2
    7292:	6883      	ldr	r3, [r0, #8]
    7294:	681b      	ldr	r3, [r3, #0]
    7296:	4798      	blx	r3
	__ASSERT(device_is_ready(entropy_dev), "Entropy device %s not ready",
		 entropy_dev->name);

	ret = entropy_get_entropy(entropy_dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    7298:	2800      	cmp	r0, #0
    729a:	da02      	bge.n	72a2 <z_impl_sys_rand32_get+0x1a>
    729c:	f01b fbdd 	bl	22a5a <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    72a0:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    72a2:	9801      	ldr	r0, [sp, #4]
    72a4:	b003      	add	sp, #12
    72a6:	f85d fb04 	ldr.w	pc, [sp], #4
    72aa:	bf00      	nop
    72ac:	00024970 	.word	0x00024970

000072b0 <z_impl_sys_rand_get>:
	return 0;
}

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
    72b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    72b2:	4606      	mov	r6, r0
    72b4:	460d      	mov	r5, r1
    72b6:	480d      	ldr	r0, [pc, #52]	; (72ec <z_impl_sys_rand_get+0x3c>)
    72b8:	b28a      	uxth	r2, r1
    72ba:	6883      	ldr	r3, [r0, #8]
    72bc:	4631      	mov	r1, r6
    72be:	681b      	ldr	r3, [r3, #0]
    72c0:	4798      	blx	r3
	if (unlikely(ret < 0)) {
    72c2:	2800      	cmp	r0, #0
    72c4:	da10      	bge.n	72e8 <z_impl_sys_rand_get+0x38>
		uint32_t len = 0;
    72c6:	2400      	movs	r4, #0
    72c8:	e00c      	b.n	72e4 <z_impl_sys_rand_get+0x34>
			size_t copylen = outlen - len;
    72ca:	1b2f      	subs	r7, r5, r4
			if (copylen > blocksize) {
    72cc:	2f04      	cmp	r7, #4
    72ce:	bf28      	it	cs
    72d0:	2704      	movcs	r7, #4
    72d2:	f01b fbc2 	bl	22a5a <sys_clock_cycle_get_32>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    72d6:	463a      	mov	r2, r7
			random_num = k_cycle_get_32();
    72d8:	9001      	str	r0, [sp, #4]
    72da:	a901      	add	r1, sp, #4
    72dc:	1930      	adds	r0, r6, r4
    72de:	f7f9 fc39 	bl	b54 <memcpy>
			len += copylen;
    72e2:	443c      	add	r4, r7
		while (len < outlen) {
    72e4:	42a5      	cmp	r5, r4
    72e6:	d8f0      	bhi.n	72ca <z_impl_sys_rand_get+0x1a>
	rand_get(dst, outlen, false);
}
    72e8:	b003      	add	sp, #12
    72ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72ec:	00024970 	.word	0x00024970

000072f0 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    72f0:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    72f2:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    72f4:	4b05      	ldr	r3, [pc, #20]	; (730c <net_buf_id+0x1c>)
    72f6:	fb01 3302 	mla	r3, r1, r2, r3
    72fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    72fc:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    72fe:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    7300:	331b      	adds	r3, #27
    7302:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    7306:	fbb0 f0f3 	udiv	r0, r0, r3
    730a:	4770      	bx	lr
    730c:	20001364 	.word	0x20001364

00007310 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    7310:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    7312:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7314:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    7316:	4b09      	ldr	r3, [pc, #36]	; (733c <fixed_data_alloc+0x2c>)
    7318:	fb04 3302 	mla	r3, r4, r2, r3
    731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
    731e:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    7320:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    7322:	681a      	ldr	r2, [r3, #0]
    7324:	4294      	cmp	r4, r2
    7326:	bf94      	ite	ls
    7328:	600c      	strls	r4, [r1, #0]
    732a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    732c:	e9d3 5400 	ldrd	r5, r4, [r3]
    7330:	f7ff ffde 	bl	72f0 <net_buf_id>
}
    7334:	fb05 4000 	mla	r0, r5, r0, r4
    7338:	bd38      	pop	{r3, r4, r5, pc}
    733a:	bf00      	nop
    733c:	20001364 	.word	0x20001364

00007340 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    7340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7344:	4605      	mov	r5, r0
    7346:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    7348:	4610      	mov	r0, r2
    734a:	4619      	mov	r1, r3
{
    734c:	4691      	mov	r9, r2
    734e:	4698      	mov	r8, r3
    7350:	4617      	mov	r7, r2
    7352:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    7354:	f01d f8ba 	bl	244cc <sys_clock_timeout_end_calc>
    7358:	4682      	mov	sl, r0
    735a:	468b      	mov	fp, r1
	__asm__ volatile(
    735c:	f04f 0320 	mov.w	r3, #32
    7360:	f3ef 8111 	mrs	r1, BASEPRI
    7364:	f383 8812 	msr	BASEPRI_MAX, r3
    7368:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    736c:	8b6b      	ldrh	r3, [r5, #26]
    736e:	2b00      	cmp	r3, #0
    7370:	d058      	beq.n	7424 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    7372:	8b2a      	ldrh	r2, [r5, #24]
    7374:	429a      	cmp	r2, r3
    7376:	d93c      	bls.n	73f2 <net_buf_alloc_len+0xb2>
    7378:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    737a:	2200      	movs	r2, #0
    737c:	2300      	movs	r3, #0
    737e:	4628      	mov	r0, r5
    7380:	f00e faae 	bl	158e0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    7384:	9900      	ldr	r1, [sp, #0]
    7386:	4604      	mov	r4, r0
    7388:	2800      	cmp	r0, #0
    738a:	d032      	beq.n	73f2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
    738c:	f381 8811 	msr	BASEPRI, r1
    7390:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    7394:	9b01      	ldr	r3, [sp, #4]
    7396:	2b00      	cmp	r3, #0
    7398:	d055      	beq.n	7446 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    739a:	ea58 0309 	orrs.w	r3, r8, r9
    739e:	d00f      	beq.n	73c0 <net_buf_alloc_len+0x80>
    73a0:	f1b8 3fff 	cmp.w	r8, #4294967295
    73a4:	bf08      	it	eq
    73a6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
    73aa:	d009      	beq.n	73c0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    73ac:	f00f fa12 	bl	167d4 <sys_clock_tick_get>
    73b0:	ebba 0700 	subs.w	r7, sl, r0
    73b4:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
    73b8:	2e00      	cmp	r6, #0
    73ba:	bfbc      	itt	lt
    73bc:	2700      	movlt	r7, #0
    73be:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
    73c0:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    73c4:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
    73c6:	4d25      	ldr	r5, [pc, #148]	; (745c <net_buf_alloc_len+0x11c>)
    73c8:	463a      	mov	r2, r7
    73ca:	fb08 5303 	mla	r3, r8, r3, r5
    73ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73d0:	4620      	mov	r0, r4
    73d2:	681b      	ldr	r3, [r3, #0]
    73d4:	a901      	add	r1, sp, #4
    73d6:	f8d3 9000 	ldr.w	r9, [r3]
    73da:	4633      	mov	r3, r6
    73dc:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    73de:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
    73e0:	2800      	cmp	r0, #0
    73e2:	d131      	bne.n	7448 <net_buf_alloc_len+0x108>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    73e4:	7aa0      	ldrb	r0, [r4, #10]
    73e6:	4621      	mov	r1, r4
    73e8:	fb00 5008 	mla	r0, r0, r8, r5
    73ec:	f01c fde8 	bl	23fc0 <k_queue_prepend>
}
    73f0:	e024      	b.n	743c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
    73f2:	8b68      	ldrh	r0, [r5, #26]
    73f4:	1e43      	subs	r3, r0, #1
    73f6:	836b      	strh	r3, [r5, #26]
    73f8:	f381 8811 	msr	BASEPRI, r1
    73fc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    7400:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    7402:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    7404:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    7406:	331b      	adds	r3, #27
    7408:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    740c:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    740e:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
    7412:	4b12      	ldr	r3, [pc, #72]	; (745c <net_buf_alloc_len+0x11c>)
    7414:	4a12      	ldr	r2, [pc, #72]	; (7460 <net_buf_alloc_len+0x120>)
    7416:	1aeb      	subs	r3, r5, r3
    7418:	109b      	asrs	r3, r3, #2
    741a:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
    741c:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
    741e:	7f2b      	ldrb	r3, [r5, #28]
    7420:	72e3      	strb	r3, [r4, #11]
		goto success;
    7422:	e7b7      	b.n	7394 <net_buf_alloc_len+0x54>
    7424:	f381 8811 	msr	BASEPRI, r1
    7428:	f3bf 8f6f 	isb	sy
    742c:	464a      	mov	r2, r9
    742e:	4643      	mov	r3, r8
    7430:	4628      	mov	r0, r5
    7432:	f00e fa55 	bl	158e0 <z_impl_k_queue_get>
	if (!buf) {
    7436:	4604      	mov	r4, r0
    7438:	2800      	cmp	r0, #0
    743a:	d1ab      	bne.n	7394 <net_buf_alloc_len+0x54>
		return NULL;
    743c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    743e:	4620      	mov	r0, r4
    7440:	b003      	add	sp, #12
    7442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    7446:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
    7448:	2300      	movs	r3, #0
	buf->ref   = 1U;
    744a:	2201      	movs	r2, #1
	buf->frags = NULL;
    744c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
    744e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
    7450:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
    7452:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    7454:	6963      	ldr	r3, [r4, #20]
    7456:	8262      	strh	r2, [r4, #18]
    7458:	60e3      	str	r3, [r4, #12]
	return buf;
    745a:	e7f0      	b.n	743e <net_buf_alloc_len+0xfe>
    745c:	20001364 	.word	0x20001364
    7460:	ba2e8ba3 	.word	0xba2e8ba3

00007464 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    7464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7468:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    746a:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    746c:	272c      	movs	r7, #44	; 0x2c
    746e:	4d15      	ldr	r5, [pc, #84]	; (74c4 <net_buf_unref+0x60>)
	while (buf) {
    7470:	b90c      	cbnz	r4, 7476 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    7472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    7476:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
    7478:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
    747c:	3b01      	subs	r3, #1
    747e:	b2db      	uxtb	r3, r3
    7480:	7223      	strb	r3, [r4, #8]
    7482:	2b00      	cmp	r3, #0
    7484:	d1f5      	bne.n	7472 <net_buf_unref+0xe>
		if (buf->__buf) {
    7486:	6961      	ldr	r1, [r4, #20]
    7488:	b159      	cbz	r1, 74a2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    748a:	7a63      	ldrb	r3, [r4, #9]
    748c:	07db      	lsls	r3, r3, #31
    748e:	d407      	bmi.n	74a0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7490:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
    7492:	4620      	mov	r0, r4
    7494:	fb07 5303 	mla	r3, r7, r3, r5
    7498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	689b      	ldr	r3, [r3, #8]
    749e:	4798      	blx	r3
			buf->__buf = NULL;
    74a0:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
    74a2:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
    74a4:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
    74a6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    74aa:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
    74ac:	6a1b      	ldr	r3, [r3, #32]
    74ae:	b11b      	cbz	r3, 74b8 <net_buf_unref+0x54>
			pool->destroy(buf);
    74b0:	4620      	mov	r0, r4
    74b2:	4798      	blx	r3
{
    74b4:	4644      	mov	r4, r8
    74b6:	e7db      	b.n	7470 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    74b8:	4621      	mov	r1, r4
    74ba:	fb00 5007 	mla	r0, r0, r7, r5
    74be:	f01c fd7f 	bl	23fc0 <k_queue_prepend>
}
    74c2:	e7f7      	b.n	74b4 <net_buf_unref+0x50>
    74c4:	20001364 	.word	0x20001364

000074c8 <net_eth_broadcast_addr>:
	{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };

const struct net_eth_addr *net_eth_broadcast_addr(void)
{
	return &broadcast_eth_addr;
}
    74c8:	4800      	ldr	r0, [pc, #0]	; (74cc <net_eth_broadcast_addr+0x4>)
    74ca:	4770      	bx	lr
    74cc:	00032b5f 	.word	0x00032b5f

000074d0 <ethernet_send>:

	net_pkt_frag_unref(buf);
}

static int ethernet_send(struct net_if *iface, struct net_pkt *pkt)
{
    74d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    74d4:	6803      	ldr	r3, [r0, #0]
    74d6:	4607      	mov	r7, r0
	const struct ethernet_api *api = net_if_get_device(iface)->api;
    74d8:	681b      	ldr	r3, [r3, #0]
{
    74da:	460d      	mov	r5, r1
	const struct ethernet_api *api = net_if_get_device(iface)->api;
    74dc:	689e      	ldr	r6, [r3, #8]
	struct ethernet_context *ctx = net_if_l2_data(iface);
	uint16_t ptype = 0;
	int ret;
	struct net_pkt *orig_pkt = pkt;

	if (!api) {
    74de:	2e00      	cmp	r6, #0
    74e0:	f000 80af 	beq.w	7642 <ethernet_send+0x172>
	return pkt->family;
    74e4:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
		}
		ethernet_update_tx_stats(iface, pkt);
		ret = net_pkt_get_len(pkt);
		net_pkt_unref(pkt);
		return ret;
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    74e8:	ea4f 1853 	mov.w	r8, r3, lsr #5
    74ec:	f1b8 0f01 	cmp.w	r8, #1
    74f0:	f040 8088 	bne.w	7604 <ethernet_send+0x134>
	return pkt->frags->data;
    74f4:	688b      	ldr	r3, [r1, #8]
	return pkt->iface;
    74f6:	f8d1 9018 	ldr.w	r9, [r1, #24]
	return pkt->frags->data;
    74fa:	68dc      	ldr	r4, [r3, #12]
 */
#if defined(CONFIG_NET_NATIVE_IPV4)
static inline bool net_ipv4_is_addr_bcast(struct net_if *iface,
					  const struct in_addr *addr)
{
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    74fc:	f001 fa9c 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    7500:	6922      	ldr	r2, [r4, #16]
    7502:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    7504:	429a      	cmp	r2, r3
    7506:	d103      	bne.n	7510 <ethernet_send+0x40>
				 */
				pkt = tmp;
				ptype = htons(NET_ETH_PTYPE_ARP);
				net_pkt_set_family(pkt, AF_INET);
			} else {
				ptype = htons(NET_ETH_PTYPE_IP);
    7508:	462c      	mov	r4, r5
    750a:	f04f 0808 	mov.w	r8, #8
    750e:	e022      	b.n	7556 <ethernet_send+0x86>
		return true;
	}

	return net_if_ipv4_is_addr_bcast(iface, addr);
    7510:	4648      	mov	r0, r9
    7512:	f104 0110 	add.w	r1, r4, #16
    7516:	f000 fd59 	bl	7fcc <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
    751a:	2800      	cmp	r0, #0
    751c:	d1f4      	bne.n	7508 <ethernet_send+0x38>
    751e:	68ab      	ldr	r3, [r5, #8]
	    net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
    7520:	68d9      	ldr	r1, [r3, #12]
    7522:	3110      	adds	r1, #16
    7524:	4608      	mov	r0, r1
    7526:	f018 fdf6 	bl	20116 <net_ipv4_is_addr_mcast>
	if (ethernet_ipv4_dst_is_broadcast_or_mcast(pkt)) {
    752a:	4602      	mov	r2, r0
    752c:	2800      	cmp	r0, #0
    752e:	d1eb      	bne.n	7508 <ethernet_send+0x38>
		arp_pkt = net_arp_prepare(pkt, (struct in_addr *)NET_IPV4_HDR(pkt)->dst, NULL);
    7530:	4628      	mov	r0, r5
    7532:	f000 f9c5 	bl	78c0 <net_arp_prepare>
		if (!arp_pkt) {
    7536:	4604      	mov	r4, r0
    7538:	2800      	cmp	r0, #0
    753a:	d070      	beq.n	761e <ethernet_send+0x14e>
		if (pkt != arp_pkt) {
    753c:	4285      	cmp	r5, r0
    753e:	d0e4      	beq.n	750a <ethernet_send+0x3a>
			net_pkt_unref(pkt);
    7540:	4628      	mov	r0, r5
    7542:	f019 ff37 	bl	213b4 <net_pkt_unref>
	pkt->family = family;
    7546:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    754a:	f368 1347 	bfi	r3, r8, #5, #3
    754e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	} else if (IS_ENABLED(CONFIG_NET_LLDP) && net_pkt_is_lldp(pkt)) {
		ptype = htons(NET_ETH_PTYPE_LLDP);
	} else if (IS_ENABLED(CONFIG_NET_ARP)) {
		/* Unknown type: Unqueued pkt is an ARP reply.
		 */
		ptype = htons(NET_ETH_PTYPE_ARP);
    7552:	f44f 68c1 	mov.w	r8, #1544	; 0x608

	/* If the ll dst addr has not been set before, let's assume
	 * temporarily it's a broadcast one. When filling the header,
	 * it might detect this should be multicast and act accordingly.
	 */
	if (!net_pkt_lladdr_dst(pkt)->addr) {
    7556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7558:	b923      	cbnz	r3, 7564 <ethernet_send+0x94>
		net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)broadcast_eth_addr.addr;
    755a:	4b3b      	ldr	r3, [pc, #236]	; (7648 <ethernet_send+0x178>)
    755c:	62e3      	str	r3, [r4, #44]	; 0x2c
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    755e:	2306      	movs	r3, #6
    7560:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hdr_frag = net_pkt_get_frag(pkt, hdr_len, NET_BUF_TIMEOUT);
    7564:	f640 42cd 	movw	r2, #3277	; 0xccd
    7568:	2300      	movs	r3, #0
    756a:	210e      	movs	r1, #14
    756c:	4620      	mov	r0, r4
    756e:	f002 f88b 	bl	9688 <net_pkt_get_frag>
	if (!hdr_frag) {
    7572:	4681      	mov	r9, r0
    7574:	2800      	cmp	r0, #0
    7576:	d052      	beq.n	761e <ethernet_send+0x14e>
		if (ptype == htons(NET_ETH_PTYPE_ARP) ||
    7578:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
		hdr = (struct net_eth_hdr *)(hdr_frag->data);
    757c:	68c1      	ldr	r1, [r0, #12]
		if (ptype == htons(NET_ETH_PTYPE_ARP) ||
    757e:	d048      	beq.n	7612 <ethernet_send+0x142>
	return pkt->family;
    7580:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (net_pkt_family(pkt) == AF_INET &&
    7584:	095b      	lsrs	r3, r3, #5
    7586:	2b01      	cmp	r3, #1
    7588:	d143      	bne.n	7612 <ethernet_send+0x142>
	return pkt->frags->data;
    758a:	68a3      	ldr	r3, [r4, #8]
	    net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
    758c:	68da      	ldr	r2, [r3, #12]
    758e:	3210      	adds	r2, #16
    7590:	4610      	mov	r0, r2
    7592:	f018 fdc0 	bl	20116 <net_ipv4_is_addr_mcast>
	if (net_pkt_family(pkt) == AF_INET &&
    7596:	2800      	cmp	r0, #0
    7598:	d03b      	beq.n	7612 <ethernet_send+0x142>
		net_eth_ipv4_mcast_to_mac_addr(
    759a:	4610      	mov	r0, r2
    759c:	f018 fec4 	bl	20328 <net_eth_ipv4_mcast_to_mac_addr>
    75a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    75a2:	f109 000c 	add.w	r0, r9, #12
    75a6:	681a      	ldr	r2, [r3, #0]
    75a8:	f8c1 2006 	str.w	r2, [r1, #6]
    75ac:	889b      	ldrh	r3, [r3, #4]
		hdr->type = ptype;
    75ae:	f8a1 800c 	strh.w	r8, [r1, #12]
    75b2:	814b      	strh	r3, [r1, #10]
    75b4:	210e      	movs	r1, #14
    75b6:	f018 fd99 	bl	200ec <net_buf_simple_add>
	net_pkt_frag_insert(pkt, hdr_frag);
    75ba:	4649      	mov	r1, r9
    75bc:	4620      	mov	r0, r4
    75be:	f019 ff1d 	bl	213fc <net_pkt_frag_insert>
	if (!ethernet_fill_header(ctx, pkt, ptype)) {
		ret = -ENOMEM;
		goto error;
	}

	net_pkt_cursor_init(pkt);
    75c2:	4620      	mov	r0, r4
    75c4:	f019 ff87 	bl	214d6 <net_pkt_cursor_init>
    75c8:	683a      	ldr	r2, [r7, #0]
			      struct net_if *iface,
			      struct net_pkt *pkt)
{
	net_capture_pkt(iface, pkt);

	return send_fn(dev, pkt);
    75ca:	69b3      	ldr	r3, [r6, #24]
    75cc:	4621      	mov	r1, r4
    75ce:	6810      	ldr	r0, [r2, #0]
    75d0:	4798      	blx	r3

send:
	ret = net_l2_send(api->send, net_if_get_device(iface), iface, pkt);
	if (ret != 0) {
    75d2:	4606      	mov	r6, r0
    75d4:	b340      	cbz	r0, 7628 <ethernet_send+0x158>
	buf = pkt->buffer;
    75d6:	68a0      	ldr	r0, [r4, #8]
	pkt->buffer = buf->frags;
    75d8:	6843      	ldr	r3, [r0, #4]
    75da:	60a3      	str	r3, [r4, #8]
	buf->frags = NULL;
    75dc:	2300      	movs	r3, #0
    75de:	6043      	str	r3, [r0, #4]
	net_pkt_frag_unref(buf);
    75e0:	f019 fee4 	bl	213ac <net_pkt_frag_unref>
		eth_stats_update_errors_tx(iface);
		ethernet_remove_l2_header(pkt);
		if (IS_ENABLED(CONFIG_NET_ARP) && ptype == htons(NET_ETH_PTYPE_ARP)) {
    75e4:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
    75e8:	d11b      	bne.n	7622 <ethernet_send+0x152>
			/* Original packet was added to ARP's pending Q, so, to avoid it
			 * being freed, take a reference, the reference is dropped when we
			 * clear the pending Q in ARP and then it will be freed by net_if.
			 */
			net_pkt_ref(orig_pkt);
    75ea:	4628      	mov	r0, r5
    75ec:	f019 fec9 	bl	21382 <net_pkt_ref>
    75f0:	68a3      	ldr	r3, [r4, #8]
			if (net_arp_clear_pending(iface,
    75f2:	4638      	mov	r0, r7
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
    75f4:	68d9      	ldr	r1, [r3, #12]
			if (net_arp_clear_pending(iface,
    75f6:	3110      	adds	r1, #16
    75f8:	f000 fadc 	bl	7bb4 <net_arp_clear_pending>
	ethernet_update_tx_stats(iface, pkt);

	ret = net_pkt_get_len(pkt);
	ethernet_remove_l2_header(pkt);

	net_pkt_unref(pkt);
    75fc:	4620      	mov	r0, r4
    75fe:	f019 fed9 	bl	213b4 <net_pkt_unref>
    7602:	e00e      	b.n	7622 <ethernet_send+0x152>
	pkt->family = family;
    7604:	2201      	movs	r2, #1
    7606:	f362 1347 	bfi	r3, r2, #5, #3
}
    760a:	460c      	mov	r4, r1
	pkt->family = family;
    760c:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
    7610:	e79f      	b.n	7552 <ethernet_send+0x82>
    7612:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7614:	681a      	ldr	r2, [r3, #0]
    7616:	600a      	str	r2, [r1, #0]
    7618:	889b      	ldrh	r3, [r3, #4]
    761a:	808b      	strh	r3, [r1, #4]
    761c:	e7c0      	b.n	75a0 <ethernet_send+0xd0>
				ret = -ENOMEM;
    761e:	f06f 060b 	mvn.w	r6, #11
error:
	return ret;
}
    7622:	4630      	mov	r0, r6
    7624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ret = net_pkt_get_len(pkt);
    7628:	68a0      	ldr	r0, [r4, #8]
	if (ret != 0) {
    762a:	4603      	mov	r3, r0
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
    762c:	b92b      	cbnz	r3, 763a <ethernet_send+0x16a>
	pkt->buffer = buf->frags;
    762e:	6842      	ldr	r2, [r0, #4]
    7630:	60a2      	str	r2, [r4, #8]
	buf->frags = NULL;
    7632:	6043      	str	r3, [r0, #4]
	net_pkt_frag_unref(buf);
    7634:	f019 feba 	bl	213ac <net_pkt_frag_unref>
    7638:	e7e0      	b.n	75fc <ethernet_send+0x12c>
		bytes += buf->len;
    763a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
    763c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
    763e:	4416      	add	r6, r2
		buf = buf->frags;
    7640:	e7f4      	b.n	762c <ethernet_send+0x15c>
		ret = -ENOENT;
    7642:	f06f 0601 	mvn.w	r6, #1
    7646:	e7ec      	b.n	7622 <ethernet_send+0x152>
    7648:	00032b5f 	.word	0x00032b5f

0000764c <ethernet_init>:
	return net_mgmt(NET_REQUEST_ETHERNET_SET_PROMISC_MODE, iface,
			&params, sizeof(struct ethernet_req_params));
}

void ethernet_init(struct net_if *iface)
{
    764c:	b538      	push	{r3, r4, r5, lr}
	return iface->if_dev->l2_data;
    764e:	6803      	ldr	r3, [r0, #0]
    7650:	4605      	mov	r5, r0
    7652:	689c      	ldr	r4, [r3, #8]
	int i;
#endif

	NET_DBG("Initializing Ethernet L2 %p for iface %p", ctx, iface);

	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
    7654:	2301      	movs	r3, #1
	ctx->iface = iface;
	k_work_init(&ctx->carrier_work, carrier_on_off);
    7656:	490b      	ldr	r1, [pc, #44]	; (7684 <ethernet_init+0x38>)
	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
    7658:	7623      	strb	r3, [r4, #24]
	ctx->iface = iface;
    765a:	6160      	str	r0, [r4, #20]
	k_work_init(&ctx->carrier_work, carrier_on_off);
    765c:	1d20      	adds	r0, r4, #4
    765e:	f01c fd53 	bl	24108 <k_work_init>

	if (net_eth_get_hw_capabilities(iface) & ETHERNET_PROMISC_MODE) {
    7662:	6828      	ldr	r0, [r5, #0]
    7664:	f018 fdb6 	bl	201d4 <net_eth_get_hw_capabilities.isra.0>
    7668:	0543      	lsls	r3, r0, #21
		ctx->ethernet_l2_flags |= NET_L2_PROMISC_MODE;
    766a:	bf42      	ittt	mi
    766c:	7e23      	ldrbmi	r3, [r4, #24]
    766e:	f043 0304 	orrmi.w	r3, r3, #4
    7672:	7623      	strbmi	r3, [r4, #24]
			break;
		}
	}
#endif

	net_arp_init();
    7674:	f000 fab2 	bl	7bdc <net_arp_init>

	ctx->is_init = true;
    7678:	7e63      	ldrb	r3, [r4, #25]
    767a:	f043 0302 	orr.w	r3, r3, #2
    767e:	7663      	strb	r3, [r4, #25]
}
    7680:	bd38      	pop	{r3, r4, r5, pc}
    7682:	bf00      	nop
    7684:	00020191 	.word	0x00020191

00007688 <ethernet_mgmt_raise_carrier_on_event>:
				     const void *info, size_t length);

static inline void net_mgmt_event_notify(uint32_t mgmt_event,
					 struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
    7688:	2300      	movs	r3, #0

NET_MGMT_REGISTER_REQUEST_HANDLER(NET_REQUEST_ETHERNET_GET_TXTIME_PARAM,
				  ethernet_get_config);

void ethernet_mgmt_raise_carrier_on_event(struct net_if *iface)
{
    768a:	4601      	mov	r1, r0
    768c:	461a      	mov	r2, r3
    768e:	4801      	ldr	r0, [pc, #4]	; (7694 <ethernet_mgmt_raise_carrier_on_event+0xc>)
    7690:	f001 bab0 	b.w	8bf4 <net_mgmt_event_notify_with_info>
    7694:	d2080001 	.word	0xd2080001

00007698 <ethernet_mgmt_raise_carrier_off_event>:
    7698:	2300      	movs	r3, #0
	net_mgmt_event_notify(NET_EVENT_ETHERNET_CARRIER_ON, iface);
}

void ethernet_mgmt_raise_carrier_off_event(struct net_if *iface)
{
    769a:	4601      	mov	r1, r0
    769c:	461a      	mov	r2, r3
    769e:	4801      	ldr	r0, [pc, #4]	; (76a4 <ethernet_mgmt_raise_carrier_off_event+0xc>)
    76a0:	f001 baa8 	b.w	8bf4 <net_mgmt_event_notify_with_info>
    76a4:	d2080002 	.word	0xd2080002

000076a8 <arp_entry_get_last_from_table>:

	return CONTAINER_OF(node, struct arp_entry, node);
}

static struct arp_entry *arp_entry_get_last_from_table(void)
{
    76a8:	b508      	push	{r3, lr}
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    76aa:	4b08      	ldr	r3, [pc, #32]	; (76cc <arp_entry_get_last_from_table+0x24>)
    76ac:	685a      	ldr	r2, [r3, #4]
	/* We assume last entry is the oldest one,
	 * so is the preferred one to be taken out.
	 */

	node = sys_slist_peek_tail(&arp_table);
	if (!node) {
    76ae:	b13a      	cbz	r2, 76c0 <arp_entry_get_last_from_table+0x18>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    76b0:	2100      	movs	r1, #0
	return list->head;
    76b2:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    76b4:	b123      	cbz	r3, 76c0 <arp_entry_get_last_from_table+0x18>
    76b6:	429a      	cmp	r2, r3
    76b8:	d104      	bne.n	76c4 <arp_entry_get_last_from_table+0x1c>
    76ba:	4804      	ldr	r0, [pc, #16]	; (76cc <arp_entry_get_last_from_table+0x24>)
    76bc:	f018 fe52 	bl	20364 <sys_slist_remove>
	}

	sys_slist_find_and_remove(&arp_table, node);

	return CONTAINER_OF(node, struct arp_entry, node);
}
    76c0:	4610      	mov	r0, r2
    76c2:	bd08      	pop	{r3, pc}
	return node->next;
    76c4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    76c6:	681b      	ldr	r3, [r3, #0]
    76c8:	e7f4      	b.n	76b4 <arp_entry_get_last_from_table+0xc>
    76ca:	bf00      	nop
    76cc:	20002ff4 	.word	0x20002ff4

000076d0 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    76d0:	4602      	mov	r2, r0
    76d2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    76d4:	4801      	ldr	r0, [pc, #4]	; (76dc <k_mutex_lock.constprop.0.isra.0+0xc>)
    76d6:	f00e b84d 	b.w	15774 <z_impl_k_mutex_lock>
    76da:	bf00      	nop
    76dc:	20002fe0 	.word	0x20002fe0

000076e0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    76e0:	4801      	ldr	r0, [pc, #4]	; (76e8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    76e2:	f00e b8c1 	b.w	15868 <z_impl_k_mutex_unlock>
    76e6:	bf00      	nop
    76e8:	20002fe0 	.word	0x20002fe0

000076ec <arp_update>:
static void arp_update(struct net_if *iface,
		       struct in_addr *src,
		       struct net_eth_addr *hwaddr,
		       bool gratuitous,
		       bool force)
{
    76ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76f0:	4606      	mov	r6, r0
    76f2:	460f      	mov	r7, r1
	struct arp_entry *entry;
	struct net_pkt *pkt;

	NET_DBG("src %s", net_sprint_ipv4_addr(src));

	k_mutex_lock(&arp_mutex, K_FOREVER);
    76f4:	f04f 30ff 	mov.w	r0, #4294967295
    76f8:	f04f 31ff 	mov.w	r1, #4294967295
{
    76fc:	4615      	mov	r5, r2
    76fe:	4698      	mov	r8, r3
    7700:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	k_mutex_lock(&arp_mutex, K_FOREVER);
    7704:	f7ff ffe4 	bl	76d0 <k_mutex_lock.constprop.0.isra.0>
	sys_snode_t *prev = NULL;
    7708:	2300      	movs	r3, #0
    770a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 7808 <arp_update+0x11c>
    770e:	9301      	str	r3, [sp, #4]
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
    7710:	f8da b000 	ldr.w	fp, [sl]
    7714:	463a      	mov	r2, r7
    7716:	4631      	mov	r1, r6
    7718:	4658      	mov	r0, fp
    771a:	ab01      	add	r3, sp, #4
    771c:	f018 fe53 	bl	203c6 <arp_entry_find.isra.0>
	if (entry) {
    7720:	4604      	mov	r4, r0
    7722:	bb58      	cbnz	r0, 777c <arp_update+0x90>
	if (sys_slist_is_empty(&arp_pending_entries)) {
    7724:	f1bb 0f00 	cmp.w	fp, #0
    7728:	d102      	bne.n	7730 <arp_update+0x44>
		k_work_cancel_delayable(&arp_request_timer);
    772a:	4838      	ldr	r0, [pc, #224]	; (780c <arp_update+0x120>)
    772c:	f01c fd4e 	bl	241cc <k_work_cancel_delayable>

	entry = arp_entry_get_pending(iface, src);
	if (!entry) {
		if (IS_ENABLED(CONFIG_NET_ARP_GRATUITOUS) && gratuitous) {
    7730:	f1b8 0f00 	cmp.w	r8, #0
    7734:	d00b      	beq.n	774e <arp_update+0x62>
	entry = arp_entry_find(&arp_table, iface, src, &prev);
    7736:	4836      	ldr	r0, [pc, #216]	; (7810 <arp_update+0x124>)
    7738:	463a      	mov	r2, r7
    773a:	4631      	mov	r1, r6
    773c:	6800      	ldr	r0, [r0, #0]
    773e:	ab01      	add	r3, sp, #4
    7740:	f018 fe41 	bl	203c6 <arp_entry_find.isra.0>
	if (entry) {
    7744:	b118      	cbz	r0, 774e <arp_update+0x62>
    7746:	682b      	ldr	r3, [r5, #0]
    7748:	6103      	str	r3, [r0, #16]
    774a:	88ab      	ldrh	r3, [r5, #4]
    774c:	8283      	strh	r3, [r0, #20]
			arp_gratuitous(iface, src, hwaddr);
		}

		if (force) {
    774e:	f1b9 0f00 	cmp.w	r9, #0
    7752:	d00e      	beq.n	7772 <arp_update+0x86>
			sys_snode_t *prev = NULL;
    7754:	2300      	movs	r3, #0
			struct arp_entry *entry;

			entry = arp_entry_find(&arp_table, iface, src, &prev);
    7756:	482e      	ldr	r0, [pc, #184]	; (7810 <arp_update+0x124>)
    7758:	4631      	mov	r1, r6
			sys_snode_t *prev = NULL;
    775a:	9301      	str	r3, [sp, #4]
			entry = arp_entry_find(&arp_table, iface, src, &prev);
    775c:	463a      	mov	r2, r7
    775e:	6800      	ldr	r0, [r0, #0]
    7760:	ab01      	add	r3, sp, #4
    7762:	f018 fe30 	bl	203c6 <arp_entry_find.isra.0>
			if (entry) {
    7766:	4601      	mov	r1, r0
    7768:	b390      	cbz	r0, 77d0 <arp_update+0xe4>
    776a:	682b      	ldr	r3, [r5, #0]
    776c:	6103      	str	r3, [r0, #16]
    776e:	88ab      	ldrh	r3, [r5, #4]
    7770:	8283      	strh	r3, [r0, #20]

		net_if_queue_tx(iface, pkt);
	}

	k_mutex_unlock(&arp_mutex);
}
    7772:	b003      	add	sp, #12
    7774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_mutex_unlock(&arp_mutex);
    7778:	f7ff bfb2 	b.w	76e0 <k_mutex_unlock.constprop.0.isra.0>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
    777c:	4602      	mov	r2, r0
    777e:	9901      	ldr	r1, [sp, #4]
    7780:	4650      	mov	r0, sl
    7782:	f018 fdef 	bl	20364 <sys_slist_remove>
	if (sys_slist_is_empty(&arp_pending_entries)) {
    7786:	f8da 3000 	ldr.w	r3, [sl]
    778a:	b913      	cbnz	r3, 7792 <arp_update+0xa6>
		k_work_cancel_delayable(&arp_request_timer);
    778c:	481f      	ldr	r0, [pc, #124]	; (780c <arp_update+0x120>)
    778e:	f01c fd1d 	bl	241cc <k_work_cancel_delayable>
    7792:	682b      	ldr	r3, [r5, #0]
	sys_slist_prepend(&arp_table, &entry->node);
    7794:	4621      	mov	r1, r4
    7796:	6123      	str	r3, [r4, #16]
    7798:	88ab      	ldrh	r3, [r5, #4]
    779a:	481d      	ldr	r0, [pc, #116]	; (7810 <arp_update+0x124>)
    779c:	82a3      	strh	r3, [r4, #20]
    779e:	f018 fdda 	bl	20356 <sys_slist_prepend>
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    77a2:	2706      	movs	r7, #6
		pkt = k_fifo_get(&entry->pending_queue, K_FOREVER);
    77a4:	f104 0518 	add.w	r5, r4, #24
	while (!k_fifo_is_empty(&entry->pending_queue)) {
    77a8:	69a3      	ldr	r3, [r4, #24]
    77aa:	2b00      	cmp	r3, #0
    77ac:	d0e1      	beq.n	7772 <arp_update+0x86>
	return z_impl_k_queue_get(queue, timeout);
    77ae:	f04f 32ff 	mov.w	r2, #4294967295
    77b2:	f04f 33ff 	mov.w	r3, #4294967295
    77b6:	4628      	mov	r0, r5
    77b8:	f00e f892 	bl	158e0 <z_impl_k_queue_get>
	return pkt->frags->data;
    77bc:	6883      	ldr	r3, [r0, #8]
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    77be:	f880 7030 	strb.w	r7, [r0, #48]	; 0x30
		net_pkt_lladdr_dst(pkt)->addr =
    77c2:	68db      	ldr	r3, [r3, #12]
    77c4:	4601      	mov	r1, r0
    77c6:	62c3      	str	r3, [r0, #44]	; 0x2c
		net_if_queue_tx(iface, pkt);
    77c8:	4630      	mov	r0, r6
    77ca:	f019 f961 	bl	20a90 <net_if_queue_tx>
    77ce:	e7eb      	b.n	77a8 <arp_update+0xbc>
	return list->head;
    77d0:	4810      	ldr	r0, [pc, #64]	; (7814 <arp_update+0x128>)
    77d2:	6804      	ldr	r4, [r0, #0]
	if (!node) {
    77d4:	b18c      	cbz	r4, 77fa <arp_update+0x10e>
	sys_slist_remove(&arp_free_entries, NULL, node);
    77d6:	4622      	mov	r2, r4
    77d8:	f018 fdc4 	bl	20364 <sys_slist_remove>
					entry->req_start = k_uptime_get_32();
    77dc:	f018 fdd2 	bl	20384 <k_uptime_get_32>
					entry->iface = iface;
    77e0:	e9c4 0601 	strd	r0, r6, [r4, #4]
					net_ipaddr_copy(&entry->ip, src);
    77e4:	683b      	ldr	r3, [r7, #0]
    77e6:	60e3      	str	r3, [r4, #12]
    77e8:	682b      	ldr	r3, [r5, #0]
					sys_slist_prepend(&arp_table, &entry->node);
    77ea:	4621      	mov	r1, r4
    77ec:	6123      	str	r3, [r4, #16]
    77ee:	88ab      	ldrh	r3, [r5, #4]
    77f0:	4807      	ldr	r0, [pc, #28]	; (7810 <arp_update+0x124>)
    77f2:	82a3      	strh	r3, [r4, #20]
    77f4:	f018 fdaf 	bl	20356 <sys_slist_prepend>
    77f8:	e7bb      	b.n	7772 <arp_update+0x86>
					entry = arp_entry_get_last_from_table();
    77fa:	f7ff ff55 	bl	76a8 <arp_entry_get_last_from_table>
				if (entry) {
    77fe:	4604      	mov	r4, r0
    7800:	2800      	cmp	r0, #0
    7802:	d1eb      	bne.n	77dc <arp_update+0xf0>
    7804:	e7b5      	b.n	7772 <arp_update+0x86>
    7806:	bf00      	nop
    7808:	20002ffc 	.word	0x20002ffc
    780c:	20002318 	.word	0x20002318
    7810:	20002ff4 	.word	0x20002ff4
    7814:	20003004 	.word	0x20003004

00007818 <arp_request_timeout>:
{
    7818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t current = k_uptime_get_32();
    781c:	f018 fdb2 	bl	20384 <k_uptime_get_32>
	k_mutex_lock(&arp_mutex, K_FOREVER);
    7820:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t current = k_uptime_get_32();
    7824:	4607      	mov	r7, r0
	k_mutex_lock(&arp_mutex, K_FOREVER);
    7826:	f04f 30ff 	mov.w	r0, #4294967295
    782a:	f7ff ff51 	bl	76d0 <k_mutex_lock.constprop.0.isra.0>
    782e:	4b21      	ldr	r3, [pc, #132]	; (78b4 <arp_request_timeout+0x9c>)
    7830:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    7832:	b344      	cbz	r4, 7886 <arp_request_timeout+0x6e>
	return node->next;
    7834:	6825      	ldr	r5, [r4, #0]
		sys_slist_remove(&arp_pending_entries, NULL, &entry->node);
    7836:	f8df 907c 	ldr.w	r9, [pc, #124]	; 78b4 <arp_request_timeout+0x9c>
	return list->tail;
    783a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 78b8 <arp_request_timeout+0xa0>
			    ARP_REQUEST_TIMEOUT - current) > 0) {
    783e:	f5c7 67fa 	rsb	r7, r7, #2000	; 0x7d0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    7842:	b91c      	cbnz	r4, 784c <arp_request_timeout+0x34>
}
    7844:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	k_mutex_unlock(&arp_mutex);
    7848:	f7ff bf4a 	b.w	76e0 <k_mutex_unlock.constprop.0.isra.0>
			    ARP_REQUEST_TIMEOUT - current) > 0) {
    784c:	6866      	ldr	r6, [r4, #4]
    784e:	443e      	add	r6, r7
		if ((int32_t)(entry->req_start +
    7850:	2e00      	cmp	r6, #0
    7852:	dc1c      	bgt.n	788e <arp_request_timeout+0x76>
		arp_entry_cleanup(entry, true);
    7854:	2101      	movs	r1, #1
    7856:	4620      	mov	r0, r4
    7858:	f018 fdc3 	bl	203e2 <arp_entry_cleanup>
		sys_slist_remove(&arp_pending_entries, NULL, &entry->node);
    785c:	4622      	mov	r2, r4
    785e:	2100      	movs	r1, #0
    7860:	4648      	mov	r0, r9
    7862:	f018 fd7f 	bl	20364 <sys_slist_remove>
	parent->next = child;
    7866:	2300      	movs	r3, #0
    7868:	6023      	str	r3, [r4, #0]
	return list->tail;
    786a:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND(slist, snode)
    786e:	b933      	cbnz	r3, 787e <arp_request_timeout+0x66>
	list->head = node;
    7870:	e9c8 4400 	strd	r4, r4, [r8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    7874:	b14d      	cbz	r5, 788a <arp_request_timeout+0x72>
	return node->next;
    7876:	682b      	ldr	r3, [r5, #0]
    7878:	462c      	mov	r4, r5
    787a:	461d      	mov	r5, r3
    787c:	e7e1      	b.n	7842 <arp_request_timeout+0x2a>
	parent->next = child;
    787e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7880:	f8c8 4004 	str.w	r4, [r8, #4]
}
    7884:	e7f6      	b.n	7874 <arp_request_timeout+0x5c>
    7886:	4625      	mov	r5, r4
    7888:	e7d5      	b.n	7836 <arp_request_timeout+0x1e>
    788a:	462b      	mov	r3, r5
    788c:	e7f4      	b.n	7878 <arp_request_timeout+0x60>
			return ((t * to_hz + off) / from_hz);
    788e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    7892:	f240 30e7 	movw	r0, #999	; 0x3e7
    7896:	2100      	movs	r1, #0
    7898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    789c:	2300      	movs	r3, #0
    789e:	fbe6 0104 	umlal	r0, r1, r6, r4
    78a2:	f7f9 f897 	bl	9d4 <__aeabi_uldivmod>
    78a6:	4602      	mov	r2, r0
    78a8:	460b      	mov	r3, r1
		k_work_reschedule(&arp_request_timer,
    78aa:	4804      	ldr	r0, [pc, #16]	; (78bc <arp_request_timeout+0xa4>)
    78ac:	f00e fa48 	bl	15d40 <k_work_reschedule>
    78b0:	e7c8      	b.n	7844 <arp_request_timeout+0x2c>
    78b2:	bf00      	nop
    78b4:	20002ffc 	.word	0x20002ffc
    78b8:	20003004 	.word	0x20003004
    78bc:	20002318 	.word	0x20002318

000078c0 <net_arp_prepare>:
{
    78c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78c4:	b087      	sub	sp, #28
    78c6:	468a      	mov	sl, r1
    78c8:	4691      	mov	r9, r2
	if (!pkt || !pkt->buffer) {
    78ca:	4605      	mov	r5, r0
{
    78cc:	af02      	add	r7, sp, #8
	if (!pkt || !pkt->buffer) {
    78ce:	b1e0      	cbz	r0, 790a <net_arp_prepare+0x4a>
    78d0:	6883      	ldr	r3, [r0, #8]
    78d2:	b1d3      	cbz	r3, 790a <net_arp_prepare+0x4a>
	if (!current_ip && !is_ipv4_ll_used &&
    78d4:	b9fa      	cbnz	r2, 7916 <net_arp_prepare+0x56>
	    !net_if_ipv4_addr_mask_cmp(net_pkt_iface(pkt), request_ip)) {
    78d6:	6980      	ldr	r0, [r0, #24]
    78d8:	f019 f868 	bl	209ac <net_if_ipv4_addr_mask_cmp>
	if (!current_ip && !is_ipv4_ll_used &&
    78dc:	b9d8      	cbnz	r0, 7916 <net_arp_prepare+0x56>
	return pkt->iface;
    78de:	69a9      	ldr	r1, [r5, #24]
		struct net_if_ipv4 *ipv4 = net_pkt_iface(pkt)->config.ip.ipv4;
    78e0:	688b      	ldr	r3, [r1, #8]
		if (ipv4) {
    78e2:	b1c3      	cbz	r3, 7916 <net_arp_prepare+0x56>
			addr = &ipv4->gw;
    78e4:	f103 0a30 	add.w	sl, r3, #48	; 0x30
	return UNALIGNED_GET(&addr->s_addr) == 0;
    78e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (net_ipv4_is_addr_unspecified(addr)) {
    78ea:	b9a3      	cbnz	r3, 7916 <net_arp_prepare+0x56>
				NET_ERR("Gateway not set for iface %p",
    78ec:	466c      	mov	r4, sp
    78ee:	b088      	sub	sp, #32
    78f0:	aa02      	add	r2, sp, #8
    78f2:	4877      	ldr	r0, [pc, #476]	; (7ad0 <net_arp_prepare+0x210>)
    78f4:	e9c2 0105 	strd	r0, r1, [r2, #20]
    78f8:	2103      	movs	r1, #3
    78fa:	f842 1f10 	str.w	r1, [r2, #16]!
    78fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7902:	4874      	ldr	r0, [pc, #464]	; (7ad4 <net_arp_prepare+0x214>)
    7904:	f7fd fabe 	bl	4e84 <z_impl_z_log_msg_static_create>
    7908:	46a5      	mov	sp, r4
		return NULL;
    790a:	2600      	movs	r6, #0
}
    790c:	4630      	mov	r0, r6
    790e:	3714      	adds	r7, #20
    7910:	46bd      	mov	sp, r7
    7912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	k_mutex_lock(&arp_mutex, K_FOREVER);
    7916:	f04f 30ff 	mov.w	r0, #4294967295
    791a:	f04f 31ff 	mov.w	r1, #4294967295
    791e:	f7ff fed7 	bl	76d0 <k_mutex_lock.constprop.0.isra.0>
	sys_snode_t *prev = NULL;
    7922:	2300      	movs	r3, #0
    7924:	4e6c      	ldr	r6, [pc, #432]	; (7ad8 <net_arp_prepare+0x218>)
    7926:	60fb      	str	r3, [r7, #12]
	entry = arp_entry_find(&arp_table, iface, dst, &prev);
    7928:	f8d6 8000 	ldr.w	r8, [r6]
    792c:	4652      	mov	r2, sl
    792e:	4640      	mov	r0, r8
    7930:	69a9      	ldr	r1, [r5, #24]
    7932:	f107 030c 	add.w	r3, r7, #12
    7936:	f018 fd46 	bl	203c6 <arp_entry_find.isra.0>
	if (entry) {
    793a:	4604      	mov	r4, r0
    793c:	bb28      	cbnz	r0, 798a <net_arp_prepare+0xca>
	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
    793e:	f8df b19c 	ldr.w	fp, [pc, #412]	; 7adc <net_arp_prepare+0x21c>
    7942:	4603      	mov	r3, r0
    7944:	f8db 0000 	ldr.w	r0, [fp]
    7948:	f018 fd3d 	bl	203c6 <arp_entry_find.isra.0>
		if (!entry) {
    794c:	4606      	mov	r6, r0
    794e:	2800      	cmp	r0, #0
    7950:	d138      	bne.n	79c4 <net_arp_prepare+0x104>
	return list->head;
    7952:	4863      	ldr	r0, [pc, #396]	; (7ae0 <net_arp_prepare+0x220>)
    7954:	6804      	ldr	r4, [r0, #0]
	if (!node) {
    7956:	b38c      	cbz	r4, 79bc <net_arp_prepare+0xfc>
	sys_slist_remove(&arp_free_entries, NULL, node);
    7958:	4622      	mov	r2, r4
    795a:	4631      	mov	r1, r6
    795c:	f018 fd02 	bl	20364 <sys_slist_remove>
    7960:	69ab      	ldr	r3, [r5, #24]
    7962:	607b      	str	r3, [r7, #4]
	if (current_ip) {
    7964:	f1b9 0f00 	cmp.w	r9, #0
    7968:	d139      	bne.n	79de <net_arp_prepare+0x11e>
						AF_UNSPEC, 0, NET_BUF_TIMEOUT);
    796a:	f640 42cd 	movw	r2, #3277	; 0xccd
    796e:	2300      	movs	r3, #0
		pkt = net_pkt_alloc_with_buffer(iface,
    7970:	e9cd 2300 	strd	r2, r3, [sp]
    7974:	211c      	movs	r1, #28
    7976:	464b      	mov	r3, r9
    7978:	464a      	mov	r2, r9
    797a:	6878      	ldr	r0, [r7, #4]
    797c:	f001 ffbc 	bl	98f8 <net_pkt_alloc_with_buffer>
		if (!pkt) {
    7980:	4606      	mov	r6, r0
    7982:	bb68      	cbnz	r0, 79e0 <net_arp_prepare+0x120>
		k_mutex_unlock(&arp_mutex);
    7984:	f7ff feac 	bl	76e0 <k_mutex_unlock.constprop.0.isra.0>
		return req;
    7988:	e7c0      	b.n	790c <net_arp_prepare+0x4c>
		if (&entry->node != sys_slist_peek_head(&arp_table)) {
    798a:	4540      	cmp	r0, r8
    798c:	d007      	beq.n	799e <net_arp_prepare+0xde>
			sys_slist_remove(&arp_table, prev, &entry->node);
    798e:	4602      	mov	r2, r0
    7990:	68f9      	ldr	r1, [r7, #12]
    7992:	4630      	mov	r0, r6
    7994:	f018 fce6 	bl	20364 <sys_slist_remove>
			sys_slist_prepend(&arp_table, &entry->node);
    7998:	4621      	mov	r1, r4
    799a:	f018 fcdc 	bl	20356 <sys_slist_prepend>
	k_mutex_unlock(&arp_mutex);
    799e:	f7ff fe9f 	bl	76e0 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the network link address
 */
static inline struct net_linkaddr *net_if_get_link_addr(struct net_if *iface)
{
	return &iface->if_dev->link_addr;
    79a2:	68a3      	ldr	r3, [r4, #8]
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&entry->eth;
    79a4:	3410      	adds	r4, #16
		(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
    79a6:	681b      	ldr	r3, [r3, #0]
	return pkt;
    79a8:	462e      	mov	r6, r5
		(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
    79aa:	691b      	ldr	r3, [r3, #16]
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&entry->eth;
    79ac:	62ec      	str	r4, [r5, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->addr =
    79ae:	626b      	str	r3, [r5, #36]	; 0x24
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
    79b0:	2306      	movs	r3, #6
    79b2:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    79b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	return pkt;
    79ba:	e7a7      	b.n	790c <net_arp_prepare+0x4c>
				entry = arp_entry_get_last_from_table();
    79bc:	f7ff fe74 	bl	76a8 <arp_entry_get_last_from_table>
    79c0:	4604      	mov	r4, r0
    79c2:	e7cd      	b.n	7960 <net_arp_prepare+0xa0>
						  net_pkt_ref(pkt))) {
    79c4:	4628      	mov	r0, r5
    79c6:	f019 fcdc 	bl	21382 <net_pkt_ref>
    79ca:	4601      	mov	r1, r0
			    k_queue_unique_append(&entry->pending_queue._queue,
    79cc:	f106 0018 	add.w	r0, r6, #24
    79d0:	f01c fb00 	bl	23fd4 <k_queue_unique_append>
			if (!net_pkt_ipv4_auto(pkt) &&
    79d4:	2800      	cmp	r0, #0
    79d6:	d0c3      	beq.n	7960 <net_arp_prepare+0xa0>
				k_mutex_unlock(&arp_mutex);
    79d8:	f7ff fe82 	bl	76e0 <k_mutex_unlock.constprop.0.isra.0>
				return NULL;
    79dc:	e795      	b.n	790a <net_arp_prepare+0x4a>
    79de:	462e      	mov	r6, r5
	return net_buf_simple_add(&buf->b, len);
    79e0:	68b0      	ldr	r0, [r6, #8]
    79e2:	211c      	movs	r1, #28
    79e4:	300c      	adds	r0, #12
    79e6:	f018 fb81 	bl	200ec <net_buf_simple_add>
	return pkt->frags->data;
    79ea:	68b3      	ldr	r3, [r6, #8]
    79ec:	f8d3 800c 	ldr.w	r8, [r3, #12]
	if (entry) {
    79f0:	2c00      	cmp	r4, #0
    79f2:	d05e      	beq.n	7ab2 <net_arp_prepare+0x1f2>
			k_fifo_put(&entry->pending_queue, net_pkt_ref(pending));
    79f4:	4628      	mov	r0, r5
    79f6:	f019 fcc4 	bl	21382 <net_pkt_ref>
    79fa:	4601      	mov	r1, r0
    79fc:	f104 0018 	add.w	r0, r4, #24
    7a00:	f01c fad3 	bl	23faa <k_queue_append>
	return pkt->iface;
    7a04:	69b3      	ldr	r3, [r6, #24]
		entry->iface = net_pkt_iface(pkt);
    7a06:	60a3      	str	r3, [r4, #8]
		net_ipaddr_copy(&entry->ip, next_addr);
    7a08:	f8da 3000 	ldr.w	r3, [sl]
    7a0c:	60e3      	str	r3, [r4, #12]
    7a0e:	68a3      	ldr	r3, [r4, #8]
			(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
    7a10:	681b      	ldr	r3, [r3, #0]
    7a12:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
    7a14:	6273      	str	r3, [r6, #36]	; 0x24
	parent->next = child;
    7a16:	2300      	movs	r3, #0
    7a18:	6023      	str	r3, [r4, #0]
	return list->tail;
    7a1a:	f8db 3004 	ldr.w	r3, [fp, #4]
Z_GENLIST_APPEND(slist, snode)
    7a1e:	2b00      	cmp	r3, #0
    7a20:	d143      	bne.n	7aaa <net_arp_prepare+0x1ea>
	list->head = node;
    7a22:	e9cb 4400 	strd	r4, r4, [fp]
	entry->req_start = k_uptime_get_32();
    7a26:	f018 fcad 	bl	20384 <k_uptime_get_32>
    7a2a:	6060      	str	r0, [r4, #4]
	return z_timeout_remaining(&dwork->timeout);
    7a2c:	482d      	ldr	r0, [pc, #180]	; (7ae4 <net_arp_prepare+0x224>)
    7a2e:	f01c fd23 	bl	24478 <z_timeout_remaining>
	if (!k_work_delayable_remaining_get(&arp_request_timer)) {
    7a32:	4308      	orrs	r0, r1
    7a34:	d105      	bne.n	7a42 <net_arp_prepare+0x182>
		k_work_reschedule(&arp_request_timer,
    7a36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7a3a:	2300      	movs	r3, #0
    7a3c:	482a      	ldr	r0, [pc, #168]	; (7ae8 <net_arp_prepare+0x228>)
    7a3e:	f00e f97f 	bl	15d40 <k_work_reschedule>
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
    7a42:	f04f 0b06 	mov.w	fp, #6
    7a46:	f886 b028 	strb.w	fp, [r6, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)net_eth_broadcast_addr();
    7a4a:	f7ff fd3d 	bl	74c8 <net_eth_broadcast_addr>
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    7a4e:	2108      	movs	r1, #8
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)net_eth_broadcast_addr();
    7a50:	62f0      	str	r0, [r6, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
    7a52:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    7a56:	2300      	movs	r3, #0
    7a58:	2201      	movs	r2, #1
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    7a5a:	f888 1002 	strb.w	r1, [r8, #2]
	hdr->protolen = sizeof(struct in_addr);
    7a5e:	2104      	movs	r1, #4
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
    7a60:	f888 3000 	strb.w	r3, [r8]
    7a64:	f888 2001 	strb.w	r2, [r8, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
    7a68:	f888 3003 	strb.w	r3, [r8, #3]
	hdr->hwlen = sizeof(struct net_eth_addr);
    7a6c:	f888 b004 	strb.w	fp, [r8, #4]
	hdr->protolen = sizeof(struct in_addr);
    7a70:	f888 1005 	strb.w	r1, [r8, #5]
	hdr->opcode = htons(NET_ARP_REQUEST);
    7a74:	f888 3006 	strb.w	r3, [r8, #6]
    7a78:	f888 2007 	strb.w	r2, [r8, #7]
__ssp_bos_icheck3(memset, void *, int)
    7a7c:	f8c8 3012 	str.w	r3, [r8, #18]
    7a80:	f8a8 3016 	strh.w	r3, [r8, #22]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
    7a84:	f8da 3000 	ldr.w	r3, [sl]
    7a88:	f8c8 3018 	str.w	r3, [r8, #24]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7a8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7a8e:	681a      	ldr	r2, [r3, #0]
    7a90:	f8c8 2008 	str.w	r2, [r8, #8]
    7a94:	889b      	ldrh	r3, [r3, #4]
    7a96:	f8a8 300c 	strh.w	r3, [r8, #12]
	} else if (!entry) {
    7a9a:	b97c      	cbnz	r4, 7abc <net_arp_prepare+0x1fc>
	return pkt->frags->data;
    7a9c:	68ab      	ldr	r3, [r5, #8]
		my_addr = (struct in_addr *)NET_IPV4_HDR(pending)->src;
    7a9e:	68d8      	ldr	r0, [r3, #12]
    7aa0:	300c      	adds	r0, #12
    7aa2:	6803      	ldr	r3, [r0, #0]
    7aa4:	f8c8 300e 	str.w	r3, [r8, #14]
}
    7aa8:	e76c      	b.n	7984 <net_arp_prepare+0xc4>
	parent->next = child;
    7aaa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7aac:	f8cb 4004 	str.w	r4, [fp, #4]
}
    7ab0:	e7b9      	b.n	7a26 <net_arp_prepare+0x166>
			(uint8_t *)net_if_get_link_addr(iface)->addr;
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	681b      	ldr	r3, [r3, #0]
    7ab6:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
    7ab8:	6273      	str	r3, [r6, #36]	; 0x24
    7aba:	e7c2      	b.n	7a42 <net_arp_prepare+0x182>
		my_addr = if_get_addr(entry->iface, current_ip);
    7abc:	68a3      	ldr	r3, [r4, #8]
    7abe:	4649      	mov	r1, r9
    7ac0:	6898      	ldr	r0, [r3, #8]
    7ac2:	f018 fc6c 	bl	2039e <if_get_addr.isra.0>
	if (my_addr) {
    7ac6:	2800      	cmp	r0, #0
    7ac8:	d1eb      	bne.n	7aa2 <net_arp_prepare+0x1e2>
__ssp_bos_icheck3(memset, void *, int)
    7aca:	f8c8 000e 	str.w	r0, [r8, #14]
    7ace:	e759      	b.n	7984 <net_arp_prepare+0xc4>
    7ad0:	00032b84 	.word	0x00032b84
    7ad4:	00024cb8 	.word	0x00024cb8
    7ad8:	20002ff4 	.word	0x20002ff4
    7adc:	20002ffc 	.word	0x20002ffc
    7ae0:	20003004 	.word	0x20003004
    7ae4:	20002328 	.word	0x20002328
    7ae8:	20002318 	.word	0x20002318

00007aec <net_arp_clear_cache>:

	return NET_OK;
}

void net_arp_clear_cache(struct net_if *iface)
{
    7aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return list->head;
    7af0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7ba4 <net_arp_clear_cache+0xb8>
    7af4:	4605      	mov	r5, r0
	sys_snode_t *prev = NULL;
	struct arp_entry *entry, *next;

	NET_DBG("Flushing ARP table");

	k_mutex_lock(&arp_mutex, K_FOREVER);
    7af6:	f04f 31ff 	mov.w	r1, #4294967295
    7afa:	f04f 30ff 	mov.w	r0, #4294967295
    7afe:	f7ff fde7 	bl	76d0 <k_mutex_lock.constprop.0.isra.0>
    7b02:	f8d8 4000 	ldr.w	r4, [r8]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
    7b06:	b124      	cbz	r4, 7b12 <net_arp_clear_cache+0x26>
	return node->next;
    7b08:	2700      	movs	r7, #0
    7b0a:	6826      	ldr	r6, [r4, #0]
		}

		arp_entry_cleanup(entry, false);

		sys_slist_remove(&arp_table, prev, &entry->node);
		sys_slist_prepend(&arp_free_entries, &entry->node);
    7b0c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7ba8 <net_arp_clear_cache+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
    7b10:	b98c      	cbnz	r4, 7b36 <net_arp_clear_cache+0x4a>
	return list->head;
    7b12:	4f26      	ldr	r7, [pc, #152]	; (7bac <net_arp_clear_cache+0xc0>)
    7b14:	683c      	ldr	r4, [r7, #0]

	prev = NULL;

	NET_DBG("Flushing ARP pending requests");

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    7b16:	b12c      	cbz	r4, 7b24 <net_arp_clear_cache+0x38>
	return node->next;
    7b18:	f04f 0800 	mov.w	r8, #0
    7b1c:	6826      	ldr	r6, [r4, #0]
		}

		arp_entry_cleanup(entry, true);

		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
		sys_slist_prepend(&arp_free_entries, &entry->node);
    7b1e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 7ba8 <net_arp_clear_cache+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    7b22:	bb1c      	cbnz	r4, 7b6c <net_arp_clear_cache+0x80>
	}

	if (sys_slist_is_empty(&arp_pending_entries)) {
    7b24:	683b      	ldr	r3, [r7, #0]
    7b26:	b913      	cbnz	r3, 7b2e <net_arp_clear_cache+0x42>
		k_work_cancel_delayable(&arp_request_timer);
    7b28:	4821      	ldr	r0, [pc, #132]	; (7bb0 <net_arp_clear_cache+0xc4>)
    7b2a:	f01c fb4f 	bl	241cc <k_work_cancel_delayable>
	}

	k_mutex_unlock(&arp_mutex);
}
    7b2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	k_mutex_unlock(&arp_mutex);
    7b32:	f7ff bdd5 	b.w	76e0 <k_mutex_unlock.constprop.0.isra.0>
			prev = &entry->node;
    7b36:	4623      	mov	r3, r4
		if (iface && iface != entry->iface) {
    7b38:	b115      	cbz	r5, 7b40 <net_arp_clear_cache+0x54>
    7b3a:	68a2      	ldr	r2, [r4, #8]
    7b3c:	42aa      	cmp	r2, r5
    7b3e:	d10d      	bne.n	7b5c <net_arp_clear_cache+0x70>
		arp_entry_cleanup(entry, false);
    7b40:	2100      	movs	r1, #0
    7b42:	4620      	mov	r0, r4
    7b44:	f018 fc4d 	bl	203e2 <arp_entry_cleanup>
		sys_slist_remove(&arp_table, prev, &entry->node);
    7b48:	4639      	mov	r1, r7
    7b4a:	4640      	mov	r0, r8
    7b4c:	4622      	mov	r2, r4
    7b4e:	f018 fc09 	bl	20364 <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
    7b52:	4621      	mov	r1, r4
    7b54:	4648      	mov	r0, r9
    7b56:	f018 fbfe 	bl	20356 <sys_slist_prepend>
    7b5a:	463b      	mov	r3, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
    7b5c:	b126      	cbz	r6, 7b68 <net_arp_clear_cache+0x7c>
    7b5e:	6832      	ldr	r2, [r6, #0]
    7b60:	4634      	mov	r4, r6
    7b62:	461f      	mov	r7, r3
    7b64:	4616      	mov	r6, r2
    7b66:	e7d3      	b.n	7b10 <net_arp_clear_cache+0x24>
    7b68:	4632      	mov	r2, r6
    7b6a:	e7f9      	b.n	7b60 <net_arp_clear_cache+0x74>
			prev = &entry->node;
    7b6c:	4623      	mov	r3, r4
		if (iface && iface != entry->iface) {
    7b6e:	b115      	cbz	r5, 7b76 <net_arp_clear_cache+0x8a>
    7b70:	68a2      	ldr	r2, [r4, #8]
    7b72:	4295      	cmp	r5, r2
    7b74:	d10d      	bne.n	7b92 <net_arp_clear_cache+0xa6>
		arp_entry_cleanup(entry, true);
    7b76:	2101      	movs	r1, #1
    7b78:	4620      	mov	r0, r4
    7b7a:	f018 fc32 	bl	203e2 <arp_entry_cleanup>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
    7b7e:	4641      	mov	r1, r8
    7b80:	4638      	mov	r0, r7
    7b82:	4622      	mov	r2, r4
    7b84:	f018 fbee 	bl	20364 <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
    7b88:	4621      	mov	r1, r4
    7b8a:	4648      	mov	r0, r9
    7b8c:	f018 fbe3 	bl	20356 <sys_slist_prepend>
    7b90:	4643      	mov	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
    7b92:	b126      	cbz	r6, 7b9e <net_arp_clear_cache+0xb2>
    7b94:	6832      	ldr	r2, [r6, #0]
    7b96:	4634      	mov	r4, r6
    7b98:	4698      	mov	r8, r3
    7b9a:	4616      	mov	r6, r2
    7b9c:	e7c1      	b.n	7b22 <net_arp_clear_cache+0x36>
    7b9e:	4632      	mov	r2, r6
    7ba0:	e7f9      	b.n	7b96 <net_arp_clear_cache+0xaa>
    7ba2:	bf00      	nop
    7ba4:	20002ff4 	.word	0x20002ff4
    7ba8:	20003004 	.word	0x20003004
    7bac:	20002ffc 	.word	0x20002ffc
    7bb0:	20002318 	.word	0x20002318

00007bb4 <net_arp_clear_pending>:

int net_arp_clear_pending(struct net_if *iface, struct in_addr *dst)
{
    7bb4:	b508      	push	{r3, lr}
    7bb6:	460a      	mov	r2, r1
	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
    7bb8:	4601      	mov	r1, r0
    7bba:	4807      	ldr	r0, [pc, #28]	; (7bd8 <net_arp_clear_pending+0x24>)
    7bbc:	2300      	movs	r3, #0
    7bbe:	6800      	ldr	r0, [r0, #0]
    7bc0:	f018 fc01 	bl	203c6 <arp_entry_find.isra.0>
	struct arp_entry *entry = arp_entry_find_pending(iface, dst);

	if (!entry) {
    7bc4:	b120      	cbz	r0, 7bd0 <net_arp_clear_pending+0x1c>
		return -ENOENT;
	}

	arp_entry_cleanup(entry, true);
    7bc6:	2101      	movs	r1, #1
    7bc8:	f018 fc0b 	bl	203e2 <arp_entry_cleanup>

	return 0;
    7bcc:	2000      	movs	r0, #0
}
    7bce:	bd08      	pop	{r3, pc}
		return -ENOENT;
    7bd0:	f06f 0001 	mvn.w	r0, #1
    7bd4:	e7fb      	b.n	7bce <net_arp_clear_pending+0x1a>
    7bd6:	bf00      	nop
    7bd8:	20002ffc 	.word	0x20002ffc

00007bdc <net_arp_init>:

	return ret;
}

void net_arp_init(void)
{
    7bdc:	b538      	push	{r3, r4, r5, lr}
	int i;

	if (arp_cache_initialized) {
    7bde:	4d12      	ldr	r5, [pc, #72]	; (7c28 <net_arp_init+0x4c>)
    7be0:	782b      	ldrb	r3, [r5, #0]
    7be2:	bb03      	cbnz	r3, 7c26 <net_arp_init+0x4a>
	list->head = NULL;
    7be4:	4a11      	ldr	r2, [pc, #68]	; (7c2c <net_arp_init+0x50>)
    7be6:	4c12      	ldr	r4, [pc, #72]	; (7c30 <net_arp_init+0x54>)
	list->tail = NULL;
    7be8:	e9c2 3300 	strd	r3, r3, [r2]
	list->head = NULL;
    7bec:	4a11      	ldr	r2, [pc, #68]	; (7c34 <net_arp_init+0x58>)
	list->tail = NULL;
    7bee:	e9c4 3300 	strd	r3, r3, [r4]
    7bf2:	e9c2 3300 	strd	r3, r3, [r2]
	z_impl_k_queue_init(queue);
    7bf6:	4810      	ldr	r0, [pc, #64]	; (7c38 <net_arp_init+0x5c>)
    7bf8:	f01c f9ab 	bl	23f52 <z_impl_k_queue_init>
	sys_slist_init(&arp_table);

	for (i = 0; i < CONFIG_NET_ARP_TABLE_SIZE; i++) {
		/* Inserting entry as free with initialised packet queue */
		k_fifo_init(&arp_entries[i].pending_queue);
		sys_slist_prepend(&arp_free_entries, &arp_entries[i].node);
    7bfc:	4620      	mov	r0, r4
    7bfe:	490f      	ldr	r1, [pc, #60]	; (7c3c <net_arp_init+0x60>)
    7c00:	f018 fba9 	bl	20356 <sys_slist_prepend>
    7c04:	f101 0048 	add.w	r0, r1, #72	; 0x48
    7c08:	f01c f9a3 	bl	23f52 <z_impl_k_queue_init>
    7c0c:	4620      	mov	r0, r4
    7c0e:	490c      	ldr	r1, [pc, #48]	; (7c40 <net_arp_init+0x64>)
    7c10:	f018 fba1 	bl	20356 <sys_slist_prepend>
	}

	k_work_init_delayable(&arp_request_timer, arp_request_timeout);
    7c14:	490b      	ldr	r1, [pc, #44]	; (7c44 <net_arp_init+0x68>)
    7c16:	480c      	ldr	r0, [pc, #48]	; (7c48 <net_arp_init+0x6c>)
    7c18:	f01c faca 	bl	241b0 <k_work_init_delayable>
	return z_impl_k_mutex_init(mutex);
    7c1c:	480b      	ldr	r0, [pc, #44]	; (7c4c <net_arp_init+0x70>)
    7c1e:	f01c f91f 	bl	23e60 <z_impl_k_mutex_init>

	k_mutex_init(&arp_mutex);

	arp_cache_initialized = true;
    7c22:	2301      	movs	r3, #1
    7c24:	702b      	strb	r3, [r5, #0]
}
    7c26:	bd38      	pop	{r3, r4, r5, pc}
    7c28:	200054a8 	.word	0x200054a8
    7c2c:	20002ffc 	.word	0x20002ffc
    7c30:	20003004 	.word	0x20003004
    7c34:	20002ff4 	.word	0x20002ff4
    7c38:	20003024 	.word	0x20003024
    7c3c:	2000300c 	.word	0x2000300c
    7c40:	2000303c 	.word	0x2000303c
    7c44:	00007819 	.word	0x00007819
    7c48:	20002318 	.word	0x20002318
    7c4c:	20002fe0 	.word	0x20002fe0

00007c50 <wifi_mgmt_raise_twt_event>:
}

NET_MGMT_REGISTER_REQUEST_HANDLER(NET_REQUEST_WIFI_TWT, wifi_set_twt);

void wifi_mgmt_raise_twt_event(struct net_if *iface, struct wifi_twt_params *twt_params)
{
    7c50:	460a      	mov	r2, r1
	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_TWT,
    7c52:	2320      	movs	r3, #32
    7c54:	4601      	mov	r1, r0
    7c56:	4801      	ldr	r0, [pc, #4]	; (7c5c <wifi_mgmt_raise_twt_event+0xc>)
    7c58:	f000 bfcc 	b.w	8bf4 <net_mgmt_event_notify_with_info>
    7c5c:	d1560006 	.word	0xd1560006

00007c60 <net_ipv4_is_ll_addr>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xFFFF0000) == 0xA9FE0000;
    7c60:	6803      	ldr	r3, [r0, #0]
}
    7c62:	4804      	ldr	r0, [pc, #16]	; (7c74 <net_ipv4_is_ll_addr+0x14>)
    7c64:	ba1b      	rev	r3, r3
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xFFFF0000) == 0xA9FE0000;
    7c66:	0c1b      	lsrs	r3, r3, #16
    7c68:	041b      	lsls	r3, r3, #16
}
    7c6a:	1a1b      	subs	r3, r3, r0
    7c6c:	4258      	negs	r0, r3
    7c6e:	4158      	adcs	r0, r3
    7c70:	4770      	bx	lr
    7c72:	bf00      	nop
    7c74:	a9fe0000 	.word	0xa9fe0000

00007c78 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    7c78:	4602      	mov	r2, r0
    7c7a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    7c7c:	4801      	ldr	r0, [pc, #4]	; (7c84 <k_mutex_lock.constprop.0.isra.0+0xc>)
    7c7e:	f00d bd79 	b.w	15774 <z_impl_k_mutex_lock>
    7c82:	bf00      	nop
    7c84:	2000124c 	.word	0x2000124c

00007c88 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    7c88:	4801      	ldr	r0, [pc, #4]	; (7c90 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    7c8a:	f00d bded 	b.w	15868 <z_impl_k_mutex_unlock>
    7c8e:	bf00      	nop
    7c90:	2000124c 	.word	0x2000124c

00007c94 <iface_router_update_timer>:
	/* Signed number of ms until router lifetime ends */
	return (int32_t)(ends - now);
}

static void iface_router_update_timer(uint32_t now)
{
    7c94:	b538      	push	{r3, r4, r5, lr}
	struct net_if_router *router, *next;
	uint32_t new_delay = UINT32_MAX;

	k_mutex_lock(&lock, K_FOREVER);
    7c96:	f04f 31ff 	mov.w	r1, #4294967295
{
    7c9a:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
    7c9c:	f04f 30ff 	mov.w	r0, #4294967295
    7ca0:	f7ff ffea 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    7ca4:	4b1b      	ldr	r3, [pc, #108]	; (7d14 <iface_router_update_timer+0x80>)
    7ca6:	681b      	ldr	r3, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    7ca8:	b173      	cbz	r3, 7cc8 <iface_router_update_timer+0x34>
	return node->next;
    7caa:	681a      	ldr	r2, [r3, #0]
    7cac:	f04f 34ff 	mov.w	r4, #4294967295
	ends += MSEC_PER_SEC * router->lifetime;
    7cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    7cb4:	b953      	cbnz	r3, 7ccc <iface_router_update_timer+0x38>
		}

		new_delay = MIN((uint32_t)ends, new_delay);
	}

	if (new_delay == UINT32_MAX) {
    7cb6:	1c63      	adds	r3, r4, #1
    7cb8:	d11a      	bne.n	7cf0 <iface_router_update_timer+0x5c>
		k_work_cancel_delayable(&router_timer);
    7cba:	4817      	ldr	r0, [pc, #92]	; (7d18 <iface_router_update_timer+0x84>)
    7cbc:	f01c fa86 	bl	241cc <k_work_cancel_delayable>
	} else {
		k_work_reschedule(&router_timer, K_MSEC(new_delay));
	}

	k_mutex_unlock(&lock);
}
    7cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
    7cc4:	f7ff bfe0 	b.w	7c88 <k_mutex_unlock.constprop.0.isra.0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    7cc8:	461a      	mov	r2, r3
    7cca:	e7ef      	b.n	7cac <iface_router_update_timer+0x18>
	return (int32_t)(ends - now);
    7ccc:	69d9      	ldr	r1, [r3, #28]
	ends += MSEC_PER_SEC * router->lifetime;
    7cce:	8c1b      	ldrh	r3, [r3, #32]
	return (int32_t)(ends - now);
    7cd0:	1b49      	subs	r1, r1, r5
    7cd2:	fb00 1303 	mla	r3, r0, r3, r1
		if (ends <= 0) {
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	dd09      	ble.n	7cee <iface_router_update_timer+0x5a>
		new_delay = MIN((uint32_t)ends, new_delay);
    7cda:	429c      	cmp	r4, r3
    7cdc:	bf28      	it	cs
    7cde:	461c      	movcs	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    7ce0:	b11a      	cbz	r2, 7cea <iface_router_update_timer+0x56>
    7ce2:	6811      	ldr	r1, [r2, #0]
    7ce4:	4613      	mov	r3, r2
    7ce6:	460a      	mov	r2, r1
    7ce8:	e7e4      	b.n	7cb4 <iface_router_update_timer+0x20>
    7cea:	4611      	mov	r1, r2
    7cec:	e7fa      	b.n	7ce4 <iface_router_update_timer+0x50>
			new_delay = 0;
    7cee:	2400      	movs	r4, #0
    7cf0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    7cf4:	f240 30e7 	movw	r0, #999	; 0x3e7
    7cf8:	2100      	movs	r1, #0
    7cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7cfe:	2300      	movs	r3, #0
    7d00:	fbe4 0105 	umlal	r0, r1, r4, r5
    7d04:	f7f8 fe66 	bl	9d4 <__aeabi_uldivmod>
    7d08:	4602      	mov	r2, r0
    7d0a:	460b      	mov	r3, r1
		k_work_reschedule(&router_timer, K_MSEC(new_delay));
    7d0c:	4802      	ldr	r0, [pc, #8]	; (7d18 <iface_router_update_timer+0x84>)
    7d0e:	f00e f817 	bl	15d40 <k_work_reschedule>
    7d12:	e7d5      	b.n	7cc0 <iface_router_update_timer+0x2c>
    7d14:	200030b4 	.word	0x200030b4
    7d18:	20002348 	.word	0x20002348

00007d1c <net_if_ipv4_get_best_match.isra.0>:
	}

	return false;
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
    7d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
	struct in_addr *src = NULL;
	uint8_t len;
	int i;

	if (!ipv4) {
    7d1e:	4604      	mov	r4, r0
    7d20:	b388      	cbz	r0, 7d86 <net_if_ipv4_get_best_match.isra.0+0x6a>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    7d22:	6940      	ldr	r0, [r0, #20]
    7d24:	4b19      	ldr	r3, [pc, #100]	; (7d8c <net_if_ipv4_get_best_match.isra.0+0x70>)
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
    7d26:	2500      	movs	r5, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    7d28:	4003      	ands	r3, r0
    7d2a:	4819      	ldr	r0, [pc, #100]	; (7d90 <net_if_ipv4_get_best_match.isra.0+0x74>)
    7d2c:	4283      	cmp	r3, r0
    7d2e:	d119      	bne.n	7d64 <net_if_ipv4_get_best_match.isra.0+0x48>
    7d30:	8823      	ldrh	r3, [r4, #0]
    7d32:	2b01      	cmp	r3, #1
    7d34:	d116      	bne.n	7d64 <net_if_ipv4_get_best_match.isra.0+0x48>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
    7d36:	1d26      	adds	r6, r4, #4
    7d38:	4630      	mov	r0, r6
    7d3a:	f7ff ff91 	bl	7c60 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
    7d3e:	b988      	cbnz	r0, 7d64 <net_if_ipv4_get_best_match.isra.0+0x48>
	uint8_t len = 0U;
    7d40:	462b      	mov	r3, r5
    7d42:	1e48      	subs	r0, r1, #1
    7d44:	3403      	adds	r4, #3
		if (src[j] == dst[j]) {
    7d46:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    7d4a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    7d4e:	42b9      	cmp	r1, r7
    7d50:	d10a      	bne.n	7d68 <net_if_ipv4_get_best_match.isra.0+0x4c>
			len += 8U;
    7d52:	3308      	adds	r3, #8
    7d54:	b2db      	uxtb	r3, r3
	for (j = 0U; j < addr_len; j++) {
    7d56:	2b20      	cmp	r3, #32
    7d58:	d1f5      	bne.n	7d46 <net_if_ipv4_get_best_match.isra.0+0x2a>
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
			continue;
		}

		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
		if (len >= *best_so_far) {
    7d5a:	7811      	ldrb	r1, [r2, #0]
    7d5c:	4299      	cmp	r1, r3
    7d5e:	d801      	bhi.n	7d64 <net_if_ipv4_get_best_match.isra.0+0x48>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
    7d60:	4635      	mov	r5, r6
			*best_so_far = len;
    7d62:	7013      	strb	r3, [r2, #0]
			src = &ipv4->unicast[i].address.in_addr;
		}
	}

	return src;
}
    7d64:	4628      	mov	r0, r5
    7d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xor = src[j] ^ dst[j];
    7d68:	4079      	eors	r1, r7
				if (!(xor & 0x80)) {
    7d6a:	060f      	lsls	r7, r1, #24
    7d6c:	d4f5      	bmi.n	7d5a <net_if_ipv4_get_best_match.isra.0+0x3e>
    7d6e:	f103 0008 	add.w	r0, r3, #8
    7d72:	b2c0      	uxtb	r0, r0
					len++;
    7d74:	3301      	adds	r3, #1
    7d76:	b2db      	uxtb	r3, r3
					xor <<= 1;
    7d78:	0049      	lsls	r1, r1, #1
			for (k = 0U; k < 8; k++) {
    7d7a:	4298      	cmp	r0, r3
					xor <<= 1;
    7d7c:	b2c9      	uxtb	r1, r1
			for (k = 0U; k < 8; k++) {
    7d7e:	d0ec      	beq.n	7d5a <net_if_ipv4_get_best_match.isra.0+0x3e>
				if (!(xor & 0x80)) {
    7d80:	060c      	lsls	r4, r1, #24
    7d82:	d4ea      	bmi.n	7d5a <net_if_ipv4_get_best_match.isra.0+0x3e>
    7d84:	e7f6      	b.n	7d74 <net_if_ipv4_get_best_match.isra.0+0x58>
		return NULL;
    7d86:	4605      	mov	r5, r0
    7d88:	e7ec      	b.n	7d64 <net_if_ipv4_get_best_match.isra.0+0x48>
    7d8a:	bf00      	nop
    7d8c:	0002ff00 	.word	0x0002ff00
    7d90:	00020100 	.word	0x00020100

00007d94 <need_calc_checksum>:

	k_mutex_unlock(&lock);
}

static bool need_calc_checksum(struct net_if *iface, enum ethernet_hw_caps caps)
{
    7d94:	b510      	push	{r4, lr}
    7d96:	4603      	mov	r3, r0
#if defined(CONFIG_NET_L2_ETHERNET)
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
    7d98:	f018 fd36 	bl	20808 <net_if_l2>
    7d9c:	4a08      	ldr	r2, [pc, #32]	; (7dc0 <need_calc_checksum+0x2c>)
{
    7d9e:	460c      	mov	r4, r1
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
    7da0:	4282      	cmp	r2, r0
    7da2:	d10b      	bne.n	7dbc <need_calc_checksum+0x28>
	return iface->if_dev->dev;
    7da4:	681b      	ldr	r3, [r3, #0]
    7da6:	6818      	ldr	r0, [r3, #0]
enum ethernet_hw_caps net_eth_get_hw_capabilities(struct net_if *iface)
{
	const struct ethernet_api *eth =
		(struct ethernet_api *)net_if_get_device(iface)->api;

	if (!eth->get_capabilities) {
    7da8:	6883      	ldr	r3, [r0, #8]
    7daa:	68db      	ldr	r3, [r3, #12]
    7dac:	b10b      	cbz	r3, 7db2 <need_calc_checksum+0x1e>
		return (enum ethernet_hw_caps)0;
	}

	return eth->get_capabilities(net_if_get_device(iface));
    7dae:	4798      	blx	r3
    7db0:	4603      	mov	r3, r0
		return true;
	}

	return !(net_eth_get_hw_capabilities(iface) & caps);
    7db2:	421c      	tst	r4, r3
    7db4:	bf0c      	ite	eq
    7db6:	2001      	moveq	r0, #1
    7db8:	2000      	movne	r0, #0
	ARG_UNUSED(iface);
	ARG_UNUSED(caps);

	return true;
#endif
}
    7dba:	bd10      	pop	{r4, pc}
		return true;
    7dbc:	2001      	movs	r0, #1
    7dbe:	e7fc      	b.n	7dba <need_calc_checksum+0x26>
    7dc0:	20001424 	.word	0x20001424

00007dc4 <iface_router_expired>:
{
    7dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t current_time = k_uptime_get_32();
    7dc8:	f018 fd3a 	bl	20840 <k_uptime_get_32>
	return list->head;
    7dcc:	4e23      	ldr	r6, [pc, #140]	; (7e5c <iface_router_expired+0x98>)
    7dce:	4680      	mov	r8, r0
	k_mutex_lock(&lock, K_FOREVER);
    7dd0:	f04f 31ff 	mov.w	r1, #4294967295
    7dd4:	f04f 30ff 	mov.w	r0, #4294967295
    7dd8:	f7ff ff4e 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
    7ddc:	6834      	ldr	r4, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    7dde:	b12c      	cbz	r4, 7dec <iface_router_expired+0x28>
	return node->next;
    7de0:	2500      	movs	r5, #0
	ends += MSEC_PER_SEC * router->lifetime;
    7de2:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	parent->next = child;
    7de6:	46a9      	mov	r9, r5
	return node->next;
    7de8:	6827      	ldr	r7, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    7dea:	b934      	cbnz	r4, 7dfa <iface_router_expired+0x36>
	iface_router_update_timer(current_time);
    7dec:	4640      	mov	r0, r8
    7dee:	f7ff ff51 	bl	7c94 <iface_router_update_timer>
}
    7df2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_mutex_unlock(&lock);
    7df6:	f7ff bf47 	b.w	7c88 <k_mutex_unlock.constprop.0.isra.0>
	return (int32_t)(ends - now);
    7dfa:	69e3      	ldr	r3, [r4, #28]
	ends += MSEC_PER_SEC * router->lifetime;
    7dfc:	8c21      	ldrh	r1, [r4, #32]
	return (int32_t)(ends - now);
    7dfe:	eba3 0308 	sub.w	r3, r3, r8
    7e02:	fb0a 3301 	mla	r3, sl, r1, r3
		if (ends > 0) {
    7e06:	2b00      	cmp	r3, #0
			prev_node = &router->node;
    7e08:	4622      	mov	r2, r4
		if (ends > 0) {
    7e0a:	dc19      	bgt.n	7e40 <iface_router_expired+0x7c>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    7e0c:	88a3      	ldrh	r3, [r4, #4]
    7e0e:	2b01      	cmp	r3, #1
    7e10:	d106      	bne.n	7e20 <iface_router_expired+0x5c>
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ROUTER_DEL,
    7e12:	2310      	movs	r3, #16
    7e14:	69a1      	ldr	r1, [r4, #24]
    7e16:	4812      	ldr	r0, [pc, #72]	; (7e60 <iface_router_expired+0x9c>)
    7e18:	f104 0208 	add.w	r2, r4, #8
    7e1c:	f000 feea 	bl	8bf4 <net_mgmt_event_notify_with_info>
    7e20:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e22:	b99d      	cbnz	r5, 7e4c <iface_router_expired+0x88>
    7e24:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    7e26:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e28:	4294      	cmp	r4, r2
    7e2a:	d100      	bne.n	7e2e <iface_router_expired+0x6a>
	list->tail = node;
    7e2c:	6073      	str	r3, [r6, #4]
		router->is_used = false;
    7e2e:	462a      	mov	r2, r5
    7e30:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	parent->next = child;
    7e34:	f8c4 9000 	str.w	r9, [r4]
    7e38:	f369 0300 	bfi	r3, r9, #0, #1
    7e3c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    7e40:	b157      	cbz	r7, 7e58 <iface_router_expired+0x94>
	return node->next;
    7e42:	683b      	ldr	r3, [r7, #0]
    7e44:	463c      	mov	r4, r7
    7e46:	4615      	mov	r5, r2
    7e48:	461f      	mov	r7, r3
    7e4a:	e7ce      	b.n	7dea <iface_router_expired+0x26>
	parent->next = child;
    7e4c:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e4e:	6873      	ldr	r3, [r6, #4]
    7e50:	429c      	cmp	r4, r3
	list->tail = node;
    7e52:	bf08      	it	eq
    7e54:	6075      	streq	r5, [r6, #4]
}
    7e56:	e7ea      	b.n	7e2e <iface_router_expired+0x6a>
    7e58:	463b      	mov	r3, r7
    7e5a:	e7f3      	b.n	7e44 <iface_router_expired+0x80>
    7e5c:	200030b4 	.word	0x200030b4
    7e60:	e0040006 	.word	0xe0040006

00007e64 <update_operational_state>:
	return "";
#endif /* CONFIG_NET_IF_LOG_LEVEL >= LOG_LEVEL_DBG */
}

static void update_operational_state(struct net_if *iface)
{
    7e64:	b598      	push	{r3, r4, r7, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
    7e66:	6803      	ldr	r3, [r0, #0]
{
    7e68:	af00      	add	r7, sp, #0
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
    7e6a:	2100      	movs	r1, #0
    7e6c:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
    7e6e:	7e9a      	ldrb	r2, [r3, #26]
    7e70:	f018 fd23 	bl	208ba <net_if_flag_is_set>
	enum net_if_oper_state new_state = NET_IF_OPER_UNKNOWN;

	if (!net_if_is_admin_up(iface)) {
    7e74:	b9c0      	cbnz	r0, 7ea8 <update_operational_state+0x44>
		iface->if_dev->oper_state = oper_state;
    7e76:	2302      	movs	r3, #2
    7e78:	6821      	ldr	r1, [r4, #0]
    7e7a:	768b      	strb	r3, [r1, #26]
	return iface->if_dev->oper_state;
    7e7c:	6820      	ldr	r0, [r4, #0]
	}

	new_state = NET_IF_OPER_UP;

exit:
	if (net_if_oper_state_set(iface, new_state) != new_state) {
    7e7e:	7e81      	ldrb	r1, [r0, #26]
    7e80:	4299      	cmp	r1, r3
    7e82:	d035      	beq.n	7ef0 <update_operational_state+0x8c>
		NET_ERR("Failed to update oper state to %d", new_state);
    7e84:	466c      	mov	r4, sp
    7e86:	b088      	sub	sp, #32
    7e88:	466a      	mov	r2, sp
    7e8a:	491e      	ldr	r1, [pc, #120]	; (7f04 <update_operational_state+0xa0>)
    7e8c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    7e90:	2303      	movs	r3, #3
    7e92:	f842 3f10 	str.w	r3, [r2, #16]!
    7e96:	2300      	movs	r3, #0
    7e98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7e9c:	481a      	ldr	r0, [pc, #104]	; (7f08 <update_operational_state+0xa4>)
    7e9e:	f7fc fff1 	bl	4e84 <z_impl_z_log_msg_static_create>
    7ea2:	46a5      	mov	sp, r4
	} else {
		if (prev_state == NET_IF_OPER_UP) {
			notify_iface_down(iface);
		}
	}
}
    7ea4:	46bd      	mov	sp, r7
    7ea6:	bd98      	pop	{r3, r4, r7, pc}
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
    7ea8:	2109      	movs	r1, #9
    7eaa:	4620      	mov	r0, r4
    7eac:	f018 fd05 	bl	208ba <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
    7eb0:	2800      	cmp	r0, #0
    7eb2:	d0e0      	beq.n	7e76 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
    7eb4:	210a      	movs	r1, #10
    7eb6:	4620      	mov	r0, r4
    7eb8:	f018 fcff 	bl	208ba <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
    7ebc:	6821      	ldr	r1, [r4, #0]
    7ebe:	f1c0 0306 	rsb	r3, r0, #6
    7ec2:	b2db      	uxtb	r3, r3
    7ec4:	768b      	strb	r3, [r1, #26]
	return iface->if_dev->oper_state;
    7ec6:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
    7ec8:	7e81      	ldrb	r1, [r0, #26]
    7eca:	4299      	cmp	r1, r3
    7ecc:	d1da      	bne.n	7e84 <update_operational_state+0x20>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
    7ece:	2906      	cmp	r1, #6
    7ed0:	d10e      	bne.n	7ef0 <update_operational_state+0x8c>
		if (prev_state != NET_IF_OPER_UP) {
    7ed2:	2a06      	cmp	r2, #6
    7ed4:	d0e6      	beq.n	7ea4 <update_operational_state+0x40>
	net_if_flag_set(iface, NET_IF_RUNNING);
    7ed6:	2108      	movs	r1, #8
    7ed8:	f018 fd04 	bl	208e4 <net_if_flag_set.isra.0>
    7edc:	2300      	movs	r3, #0
    7ede:	4621      	mov	r1, r4
    7ee0:	461a      	mov	r2, r3
    7ee2:	480a      	ldr	r0, [pc, #40]	; (7f0c <update_operational_state+0xa8>)
    7ee4:	f000 fe86 	bl	8bf4 <net_mgmt_event_notify_with_info>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    7ee8:	4620      	mov	r0, r4
    7eea:	f018 fc9c 	bl	20826 <l2_flags_get>
}
    7eee:	e7d9      	b.n	7ea4 <update_operational_state+0x40>
		if (prev_state == NET_IF_OPER_UP) {
    7ef0:	2a06      	cmp	r2, #6
    7ef2:	d1d7      	bne.n	7ea4 <update_operational_state+0x40>
	net_if_flag_clear(iface, NET_IF_RUNNING);
    7ef4:	2108      	movs	r1, #8
    7ef6:	f018 fce9 	bl	208cc <net_if_flag_clear.isra.0>
    7efa:	2300      	movs	r3, #0
    7efc:	4621      	mov	r1, r4
    7efe:	461a      	mov	r2, r3
    7f00:	4803      	ldr	r0, [pc, #12]	; (7f10 <update_operational_state+0xac>)
    7f02:	e7ef      	b.n	7ee4 <update_operational_state+0x80>
    7f04:	00032bc0 	.word	0x00032bc0
    7f08:	00024d10 	.word	0x00024d10
    7f0c:	d0010002 	.word	0xd0010002
    7f10:	d0010001 	.word	0xd0010001

00007f14 <z_impl_net_if_get_by_index>:
	if (index <= 0) {
    7f14:	2800      	cmp	r0, #0
    7f16:	dd09      	ble.n	7f2c <z_impl_net_if_get_by_index+0x18>
	if (&_net_if_list_start[index - 1] >= _net_if_list_end) {
    7f18:	2248      	movs	r2, #72	; 0x48
    7f1a:	1e43      	subs	r3, r0, #1
    7f1c:	4804      	ldr	r0, [pc, #16]	; (7f30 <z_impl_net_if_get_by_index+0x1c>)
    7f1e:	fb02 0003 	mla	r0, r2, r3, r0
		return NULL;
    7f22:	4b04      	ldr	r3, [pc, #16]	; (7f34 <z_impl_net_if_get_by_index+0x20>)
    7f24:	4298      	cmp	r0, r3
    7f26:	bf28      	it	cs
    7f28:	2000      	movcs	r0, #0
    7f2a:	4770      	bx	lr
    7f2c:	2000      	movs	r0, #0
}
    7f2e:	4770      	bx	lr
    7f30:	200013c0 	.word	0x200013c0
    7f34:	20001408 	.word	0x20001408

00007f38 <net_if_lookup_by_dev>:
{
    7f38:	4603      	mov	r3, r0
	STRUCT_SECTION_FOREACH(net_if, iface) {
    7f3a:	4a06      	ldr	r2, [pc, #24]	; (7f54 <net_if_lookup_by_dev+0x1c>)
    7f3c:	4806      	ldr	r0, [pc, #24]	; (7f58 <net_if_lookup_by_dev+0x20>)
    7f3e:	4290      	cmp	r0, r2
    7f40:	d301      	bcc.n	7f46 <net_if_lookup_by_dev+0xe>
	return NULL;
    7f42:	2000      	movs	r0, #0
}
    7f44:	4770      	bx	lr
	return iface->if_dev->dev;
    7f46:	6801      	ldr	r1, [r0, #0]
		if (net_if_get_device(iface) == dev) {
    7f48:	6809      	ldr	r1, [r1, #0]
    7f4a:	428b      	cmp	r3, r1
    7f4c:	d0fa      	beq.n	7f44 <net_if_lookup_by_dev+0xc>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    7f4e:	3048      	adds	r0, #72	; 0x48
    7f50:	e7f5      	b.n	7f3e <net_if_lookup_by_dev+0x6>
    7f52:	bf00      	nop
    7f54:	20001408 	.word	0x20001408
    7f58:	200013c0 	.word	0x200013c0

00007f5c <net_if_get_default>:
	if (&_net_if_list_start[0] == &_net_if_list_end[0]) {
    7f5c:	4b05      	ldr	r3, [pc, #20]	; (7f74 <net_if_get_default+0x18>)
    7f5e:	4a06      	ldr	r2, [pc, #24]	; (7f78 <net_if_get_default+0x1c>)
    7f60:	4293      	cmp	r3, r2
    7f62:	d005      	beq.n	7f70 <net_if_get_default+0x14>
	if (default_iface != NULL) {
    7f64:	4a05      	ldr	r2, [pc, #20]	; (7f7c <net_if_get_default+0x20>)
    7f66:	6810      	ldr	r0, [r2, #0]
	return iface ? iface : _net_if_list_start;
    7f68:	2800      	cmp	r0, #0
    7f6a:	bf08      	it	eq
    7f6c:	4618      	moveq	r0, r3
    7f6e:	4770      	bx	lr
		return NULL;
    7f70:	2000      	movs	r0, #0
}
    7f72:	4770      	bx	lr
    7f74:	200013c0 	.word	0x200013c0
    7f78:	20001408 	.word	0x20001408
    7f7c:	200030bc 	.word	0x200030bc

00007f80 <net_if_config_ipv4_get>:
{
    7f80:	b538      	push	{r3, r4, r5, lr}
    7f82:	4604      	mov	r4, r0
    7f84:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
    7f86:	f04f 30ff 	mov.w	r0, #4294967295
    7f8a:	f04f 31ff 	mov.w	r1, #4294967295
    7f8e:	f7ff fe73 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
    7f92:	2106      	movs	r1, #6
    7f94:	4620      	mov	r0, r4
    7f96:	f018 fc90 	bl	208ba <net_if_flag_is_set>
    7f9a:	b190      	cbz	r0, 7fc2 <net_if_config_ipv4_get+0x42>
	if (iface->config.ip.ipv4) {
    7f9c:	68a3      	ldr	r3, [r4, #8]
    7f9e:	b14b      	cbz	r3, 7fb4 <net_if_config_ipv4_get+0x34>
		if (ipv4) {
    7fa0:	b105      	cbz	r5, 7fa4 <net_if_config_ipv4_get+0x24>
			*ipv4 = &ipv4_addresses[i].ipv4;
    7fa2:	602b      	str	r3, [r5, #0]
	int ret = 0;
    7fa4:	2400      	movs	r4, #0
	k_mutex_unlock(&lock);
    7fa6:	f7ff fe6f 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    7faa:	4620      	mov	r0, r4
    7fac:	bd38      	pop	{r3, r4, r5, pc}
		iface->config.ip.ipv4 = &ipv4_addresses[i].ipv4;
    7fae:	60a3      	str	r3, [r4, #8]
		ipv4_addresses[i].iface = iface;
    7fb0:	63dc      	str	r4, [r3, #60]	; 0x3c
    7fb2:	e7f5      	b.n	7fa0 <net_if_config_ipv4_get+0x20>
		if (ipv4_addresses[i].iface) {
    7fb4:	4b04      	ldr	r3, [pc, #16]	; (7fc8 <net_if_config_ipv4_get+0x48>)
    7fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    7fb8:	2a00      	cmp	r2, #0
    7fba:	d0f8      	beq.n	7fae <net_if_config_ipv4_get+0x2e>
	ret = -ESRCH;
    7fbc:	f06f 0402 	mvn.w	r4, #2
    7fc0:	e7f1      	b.n	7fa6 <net_if_config_ipv4_get+0x26>
		ret = -ENOTSUP;
    7fc2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7fc6:	e7ee      	b.n	7fa6 <net_if_config_ipv4_get+0x26>
    7fc8:	20003074 	.word	0x20003074

00007fcc <net_if_ipv4_is_addr_bcast>:
{
    7fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fce:	4604      	mov	r4, r0
    7fd0:	460e      	mov	r6, r1
	k_mutex_lock(&lock, K_FOREVER);
    7fd2:	f04f 30ff 	mov.w	r0, #4294967295
    7fd6:	f04f 31ff 	mov.w	r1, #4294967295
    7fda:	f7ff fe4d 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (iface) {
    7fde:	b1a4      	cbz	r4, 800a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
		ret = ipv4_is_broadcast_address(iface, addr);
    7fe0:	4620      	mov	r0, r4
    7fe2:	4631      	mov	r1, r6
    7fe4:	f018 fd04 	bl	209f0 <ipv4_is_broadcast_address>
    7fe8:	4604      	mov	r4, r0
	k_mutex_unlock(&lock);
    7fea:	f7ff fe4d 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    7fee:	4620      	mov	r0, r4
    7ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = ipv4_is_broadcast_address(iface, addr);
    7ff2:	4631      	mov	r1, r6
    7ff4:	4628      	mov	r0, r5
    7ff6:	f018 fcfb 	bl	209f0 <ipv4_is_broadcast_address>
		if (ret) {
    7ffa:	4604      	mov	r4, r0
    7ffc:	2800      	cmp	r0, #0
    7ffe:	d1f4      	bne.n	7fea <net_if_ipv4_is_addr_bcast+0x1e>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    8000:	3548      	adds	r5, #72	; 0x48
    8002:	42bd      	cmp	r5, r7
    8004:	d3f5      	bcc.n	7ff2 <net_if_ipv4_is_addr_bcast+0x26>
out:
    8006:	2400      	movs	r4, #0
    8008:	e7ef      	b.n	7fea <net_if_ipv4_is_addr_bcast+0x1e>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    800a:	4d01      	ldr	r5, [pc, #4]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    800c:	4f01      	ldr	r7, [pc, #4]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    800e:	e7f8      	b.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    8010:	200013c0 	.word	0x200013c0
    8014:	20001408 	.word	0x20001408

00008018 <net_if_ipv4_select_src_iface>:
{
    8018:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&lock, K_FOREVER);
    801a:	f04f 31ff 	mov.w	r1, #4294967295
{
    801e:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
    8020:	f04f 30ff 	mov.w	r0, #4294967295
    8024:	f7ff fe28 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    8028:	4c09      	ldr	r4, [pc, #36]	; (8050 <net_if_ipv4_select_src_iface+0x38>)
    802a:	4e0a      	ldr	r6, [pc, #40]	; (8054 <net_if_ipv4_select_src_iface+0x3c>)
    802c:	42b4      	cmp	r4, r6
    802e:	d306      	bcc.n	803e <net_if_ipv4_select_src_iface+0x26>
		selected = net_if_get_default();
    8030:	f7ff ff94 	bl	7f5c <net_if_get_default>
    8034:	4604      	mov	r4, r0
	k_mutex_unlock(&lock);
    8036:	f7ff fe27 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    803a:	4620      	mov	r0, r4
    803c:	bd70      	pop	{r4, r5, r6, pc}
		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
    803e:	4629      	mov	r1, r5
    8040:	4620      	mov	r0, r4
    8042:	f018 fcb3 	bl	209ac <net_if_ipv4_addr_mask_cmp>
		if (ret) {
    8046:	2800      	cmp	r0, #0
    8048:	d1f5      	bne.n	8036 <net_if_ipv4_select_src_iface+0x1e>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    804a:	3448      	adds	r4, #72	; 0x48
    804c:	e7ee      	b.n	802c <net_if_ipv4_select_src_iface+0x14>
    804e:	bf00      	nop
    8050:	200013c0 	.word	0x200013c0
    8054:	20001408 	.word	0x20001408

00008058 <net_if_ipv4_select_src_addr>:
{
    8058:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t best_match = 0U;
    805c:	2300      	movs	r3, #0
{
    805e:	460e      	mov	r6, r1
    8060:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
    8062:	f04f 31ff 	mov.w	r1, #4294967295
    8066:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t best_match = 0U;
    806a:	f88d 3007 	strb.w	r3, [sp, #7]
	k_mutex_lock(&lock, K_FOREVER);
    806e:	f7ff fe03 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (!net_ipv4_is_ll_addr(dst)) {
    8072:	4630      	mov	r0, r6
    8074:	f7ff fdf4 	bl	7c60 <net_ipv4_is_ll_addr>
    8078:	bb00      	cbnz	r0, 80bc <net_if_ipv4_select_src_addr+0x64>
		if (dst_iface) {
    807a:	b1d5      	cbz	r5, 80b2 <net_if_ipv4_select_src_addr+0x5a>
			src = net_if_ipv4_get_best_match(dst_iface, dst,
    807c:	4631      	mov	r1, r6
    807e:	68a8      	ldr	r0, [r5, #8]
    8080:	f10d 0207 	add.w	r2, sp, #7
    8084:	f7ff fe4a 	bl	7d1c <net_if_ipv4_get_best_match.isra.0>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
    8088:	4604      	mov	r4, r0
    808a:	e00b      	b.n	80a4 <net_if_ipv4_select_src_addr+0x4c>
				addr = net_if_ipv4_get_best_match(iface, dst,
    808c:	68b8      	ldr	r0, [r7, #8]
    808e:	4631      	mov	r1, r6
    8090:	f10d 0207 	add.w	r2, sp, #7
    8094:	f7ff fe42 	bl	7d1c <net_if_ipv4_get_best_match.isra.0>
				if (addr) {
    8098:	2800      	cmp	r0, #0
    809a:	bf18      	it	ne
    809c:	4604      	movne	r4, r0
			STRUCT_SECTION_FOREACH(net_if, iface) {
    809e:	3748      	adds	r7, #72	; 0x48
    80a0:	4547      	cmp	r7, r8
    80a2:	d3f3      	bcc.n	808c <net_if_ipv4_select_src_addr+0x34>
	if (!src) {
    80a4:	b1d4      	cbz	r4, 80dc <net_if_ipv4_select_src_addr+0x84>
	k_mutex_unlock(&lock);
    80a6:	f7ff fdef 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    80aa:	4620      	mov	r0, r4
    80ac:	b002      	add	sp, #8
    80ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct in_addr *src = NULL;
    80b2:	462c      	mov	r4, r5
			STRUCT_SECTION_FOREACH(net_if, iface) {
    80b4:	4f10      	ldr	r7, [pc, #64]	; (80f8 <net_if_ipv4_select_src_addr+0xa0>)
    80b6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80fc <net_if_ipv4_select_src_addr+0xa4>
    80ba:	e7f1      	b.n	80a0 <net_if_ipv4_select_src_addr+0x48>
		if (dst_iface) {
    80bc:	b1cd      	cbz	r5, 80f2 <net_if_ipv4_select_src_addr+0x9a>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
    80be:	2101      	movs	r1, #1
    80c0:	4628      	mov	r0, r5
    80c2:	f018 fca8 	bl	20a16 <net_if_ipv4_get_ll>
    80c6:	e7df      	b.n	8088 <net_if_ipv4_select_src_addr+0x30>
				addr = net_if_ipv4_get_ll(iface,
    80c8:	2101      	movs	r1, #1
    80ca:	4630      	mov	r0, r6
    80cc:	f018 fca3 	bl	20a16 <net_if_ipv4_get_ll>
				if (addr) {
    80d0:	4604      	mov	r4, r0
    80d2:	2800      	cmp	r0, #0
    80d4:	d1e7      	bne.n	80a6 <net_if_ipv4_select_src_addr+0x4e>
			STRUCT_SECTION_FOREACH(net_if, iface) {
    80d6:	3648      	adds	r6, #72	; 0x48
    80d8:	42be      	cmp	r6, r7
    80da:	d3f5      	bcc.n	80c8 <net_if_ipv4_select_src_addr+0x70>
		src = net_if_ipv4_get_global_addr(dst_iface,
    80dc:	2101      	movs	r1, #1
    80de:	4628      	mov	r0, r5
    80e0:	f018 fc9c 	bl	20a1c <net_if_ipv4_get_global_addr>
		if (!src) {
    80e4:	4604      	mov	r4, r0
    80e6:	2800      	cmp	r0, #0
    80e8:	d1dd      	bne.n	80a6 <net_if_ipv4_select_src_addr+0x4e>
			src = net_ipv4_unspecified_address();
    80ea:	f000 fca1 	bl	8a30 <net_ipv4_unspecified_address>
    80ee:	4604      	mov	r4, r0
    80f0:	e7d9      	b.n	80a6 <net_if_ipv4_select_src_addr+0x4e>
			STRUCT_SECTION_FOREACH(net_if, iface) {
    80f2:	4e01      	ldr	r6, [pc, #4]	; (80f8 <net_if_ipv4_select_src_addr+0xa0>)
    80f4:	4f01      	ldr	r7, [pc, #4]	; (80fc <net_if_ipv4_select_src_addr+0xa4>)
    80f6:	e7ef      	b.n	80d8 <net_if_ipv4_select_src_addr+0x80>
    80f8:	200013c0 	.word	0x200013c0
    80fc:	20001408 	.word	0x20001408

00008100 <net_if_ipv4_addr_lookup>:
{
    8100:	b570      	push	{r4, r5, r6, lr}
    8102:	4605      	mov	r5, r0
    8104:	460c      	mov	r4, r1
	k_mutex_lock(&lock, K_FOREVER);
    8106:	f04f 30ff 	mov.w	r0, #4294967295
    810a:	f04f 31ff 	mov.w	r1, #4294967295
    810e:	f7ff fdb3 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    8112:	4b0d      	ldr	r3, [pc, #52]	; (8148 <net_if_ipv4_addr_lookup+0x48>)
    8114:	4a0d      	ldr	r2, [pc, #52]	; (814c <net_if_ipv4_addr_lookup+0x4c>)
    8116:	4293      	cmp	r3, r2
    8118:	d301      	bcc.n	811e <net_if_ipv4_addr_lookup+0x1e>
	struct net_if_addr *ifaddr = NULL;
    811a:	2400      	movs	r4, #0
    811c:	e00e      	b.n	813c <net_if_ipv4_addr_lookup+0x3c>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
    811e:	6898      	ldr	r0, [r3, #8]
		if (!ipv4) {
    8120:	b180      	cbz	r0, 8144 <net_if_ipv4_addr_lookup+0x44>
			if (!ipv4->unicast[i].is_used ||
    8122:	7d81      	ldrb	r1, [r0, #22]
    8124:	0789      	lsls	r1, r1, #30
    8126:	d50d      	bpl.n	8144 <net_if_ipv4_addr_lookup+0x44>
    8128:	8801      	ldrh	r1, [r0, #0]
    812a:	2901      	cmp	r1, #1
    812c:	d10a      	bne.n	8144 <net_if_ipv4_addr_lookup+0x44>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
    812e:	6829      	ldr	r1, [r5, #0]
    8130:	6846      	ldr	r6, [r0, #4]
    8132:	428e      	cmp	r6, r1
    8134:	d106      	bne.n	8144 <net_if_ipv4_addr_lookup+0x44>
				if (ret) {
    8136:	b104      	cbz	r4, 813a <net_if_ipv4_addr_lookup+0x3a>
					*ret = iface;
    8138:	6023      	str	r3, [r4, #0]
				ifaddr = &ipv4->unicast[i];
    813a:	4604      	mov	r4, r0
	k_mutex_unlock(&lock);
    813c:	f7ff fda4 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    8140:	4620      	mov	r0, r4
    8142:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(net_if, iface) {
    8144:	3348      	adds	r3, #72	; 0x48
    8146:	e7e6      	b.n	8116 <net_if_ipv4_addr_lookup+0x16>
    8148:	200013c0 	.word	0x200013c0
    814c:	20001408 	.word	0x20001408

00008150 <net_if_ipv4_addr_add>:
{
    8150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8154:	4606      	mov	r6, r0
    8156:	460f      	mov	r7, r1
	k_mutex_lock(&lock, K_FOREVER);
    8158:	f04f 30ff 	mov.w	r0, #4294967295
    815c:	f04f 31ff 	mov.w	r1, #4294967295
{
    8160:	4690      	mov	r8, r2
    8162:	461d      	mov	r5, r3
	k_mutex_lock(&lock, K_FOREVER);
    8164:	f7ff fd88 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_config_ipv4_get(iface, &ipv4) < 0) {
    8168:	4630      	mov	r0, r6
    816a:	a901      	add	r1, sp, #4
    816c:	f7ff ff08 	bl	7f80 <net_if_config_ipv4_get>
    8170:	2800      	cmp	r0, #0
    8172:	db31      	blt.n	81d8 <net_if_ipv4_addr_add+0x88>
	ifaddr = ipv4_addr_find(iface, addr);
    8174:	68b4      	ldr	r4, [r6, #8]
		if (!ipv4->unicast[i].is_used) {
    8176:	7da3      	ldrb	r3, [r4, #22]
    8178:	079a      	lsls	r2, r3, #30
    817a:	d503      	bpl.n	8184 <net_if_ipv4_addr_add+0x34>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    817c:	683a      	ldr	r2, [r7, #0]
    817e:	6863      	ldr	r3, [r4, #4]
		if (net_ipv4_addr_cmp(addr,
    8180:	429a      	cmp	r2, r3
    8182:	d00a      	beq.n	819a <net_if_ipv4_addr_add+0x4a>
		if (addr_type == NET_ADDR_DHCP
    8184:	f1b8 0f02 	cmp.w	r8, #2
		struct net_if_addr *cur = &ipv4->unicast[i];
    8188:	9c01      	ldr	r4, [sp, #4]
		if (addr_type == NET_ADDR_DHCP
    818a:	d102      	bne.n	8192 <net_if_ipv4_addr_add+0x42>
		    && cur->addr_type == NET_ADDR_OVERRIDABLE) {
    818c:	7d23      	ldrb	r3, [r4, #20]
    818e:	2b04      	cmp	r3, #4
    8190:	d002      	beq.n	8198 <net_if_ipv4_addr_add+0x48>
		if (!ipv4->unicast[i].is_used) {
    8192:	7da3      	ldrb	r3, [r4, #22]
    8194:	079b      	lsls	r3, r3, #30
    8196:	d41f      	bmi.n	81d8 <net_if_ipv4_addr_add+0x88>
	if (ifaddr) {
    8198:	b92c      	cbnz	r4, 81a6 <net_if_ipv4_addr_add+0x56>
	k_mutex_unlock(&lock);
    819a:	f7ff fd75 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    819e:	4620      	mov	r0, r4
    81a0:	b002      	add	sp, #8
    81a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ifaddr->address.family = AF_INET;
    81a6:	2201      	movs	r2, #1
		ifaddr->is_used = true;
    81a8:	7da3      	ldrb	r3, [r4, #22]
		ifaddr->address.family = AF_INET;
    81aa:	8022      	strh	r2, [r4, #0]
		ifaddr->is_used = true;
    81ac:	f043 0302 	orr.w	r3, r3, #2
    81b0:	75a3      	strb	r3, [r4, #22]
						addr->s4_addr32[0];
    81b2:	683b      	ldr	r3, [r7, #0]
    81b4:	7da1      	ldrb	r1, [r4, #22]
		ifaddr->address.in_addr.s4_addr32[0] =
    81b6:	6063      	str	r3, [r4, #4]
		if (vlifetime) {
    81b8:	fab5 f385 	clz	r3, r5
    81bc:	095b      	lsrs	r3, r3, #5
    81be:	f363 0100 	bfi	r1, r3, #0, #1
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
    81c2:	2304      	movs	r3, #4
    81c4:	75a1      	strb	r1, [r4, #22]
		ifaddr->addr_state = NET_ADDR_PREFERRED;
    81c6:	7562      	strb	r2, [r4, #21]
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
    81c8:	4631      	mov	r1, r6
    81ca:	4804      	ldr	r0, [pc, #16]	; (81dc <net_if_ipv4_addr_add+0x8c>)
		ifaddr->addr_type = addr_type;
    81cc:	f884 8014 	strb.w	r8, [r4, #20]
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
    81d0:	18e2      	adds	r2, r4, r3
    81d2:	f000 fd0f 	bl	8bf4 <net_mgmt_event_notify_with_info>
		goto out;
    81d6:	e7e0      	b.n	819a <net_if_ipv4_addr_add+0x4a>
	struct net_if_addr *ifaddr = NULL;
    81d8:	2400      	movs	r4, #0
    81da:	e7de      	b.n	819a <net_if_ipv4_addr_add+0x4a>
    81dc:	e0040001 	.word	0xe0040001

000081e0 <net_if_ipv4_addr_rm>:
{
    81e0:	b570      	push	{r4, r5, r6, lr}
    81e2:	4604      	mov	r4, r0
    81e4:	460e      	mov	r6, r1
	k_mutex_lock(&lock, K_FOREVER);
    81e6:	f04f 30ff 	mov.w	r0, #4294967295
    81ea:	f04f 31ff 	mov.w	r1, #4294967295
    81ee:	f7ff fd43 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	ipv4 = iface->config.ip.ipv4;
    81f2:	68a2      	ldr	r2, [r4, #8]
	if (!ipv4) {
    81f4:	b90a      	cbnz	r2, 81fa <net_if_ipv4_addr_rm+0x1a>
	bool ret = false;
    81f6:	2500      	movs	r5, #0
    81f8:	e011      	b.n	821e <net_if_ipv4_addr_rm+0x3e>
		if (!ipv4->unicast[i].is_used) {
    81fa:	7d93      	ldrb	r3, [r2, #22]
    81fc:	0799      	lsls	r1, r3, #30
    81fe:	f3c3 0540 	ubfx	r5, r3, #1, #1
    8202:	d50c      	bpl.n	821e <net_if_ipv4_addr_rm+0x3e>
    8204:	6830      	ldr	r0, [r6, #0]
    8206:	6851      	ldr	r1, [r2, #4]
		if (!net_ipv4_addr_cmp(&ipv4->unicast[i].address.in_addr,
    8208:	4288      	cmp	r0, r1
    820a:	d1f4      	bne.n	81f6 <net_if_ipv4_addr_rm+0x16>
		ipv4->unicast[i].is_used = false;
    820c:	f36f 0341 	bfc	r3, #1, #1
    8210:	7593      	strb	r3, [r2, #22]
		net_mgmt_event_notify_with_info(
    8212:	2304      	movs	r3, #4
    8214:	4621      	mov	r1, r4
    8216:	4804      	ldr	r0, [pc, #16]	; (8228 <net_if_ipv4_addr_rm+0x48>)
    8218:	441a      	add	r2, r3
    821a:	f000 fceb 	bl	8bf4 <net_mgmt_event_notify_with_info>
	k_mutex_unlock(&lock);
    821e:	f7ff fd33 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    8222:	4628      	mov	r0, r5
    8224:	bd70      	pop	{r4, r5, r6, pc}
    8226:	bf00      	nop
    8228:	e0040002 	.word	0xe0040002

0000822c <net_if_ipv4_maddr_lookup>:
{
    822c:	b570      	push	{r4, r5, r6, lr}
    822e:	4606      	mov	r6, r0
    8230:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
    8232:	f04f 30ff 	mov.w	r0, #4294967295
    8236:	f04f 31ff 	mov.w	r1, #4294967295
    823a:	f7ff fd1d 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    823e:	4b14      	ldr	r3, [pc, #80]	; (8290 <net_if_ipv4_maddr_lookup+0x64>)
    8240:	4a14      	ldr	r2, [pc, #80]	; (8294 <net_if_ipv4_maddr_lookup+0x68>)
    8242:	4293      	cmp	r3, r2
    8244:	d214      	bcs.n	8270 <net_if_ipv4_maddr_lookup+0x44>
		if (ret && *ret && iface != *ret) {
    8246:	b165      	cbz	r5, 8262 <net_if_ipv4_maddr_lookup+0x36>
    8248:	6829      	ldr	r1, [r5, #0]
    824a:	b151      	cbz	r1, 8262 <net_if_ipv4_maddr_lookup+0x36>
    824c:	4299      	cmp	r1, r3
    824e:	d10c      	bne.n	826a <net_if_ipv4_maddr_lookup+0x3e>
		addr = ipv4_maddr_find(iface, true, maddr);
    8250:	689c      	ldr	r4, [r3, #8]
	if (!ipv4) {
    8252:	b97c      	cbnz	r4, 8274 <net_if_ipv4_maddr_lookup+0x48>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    8254:	3348      	adds	r3, #72	; 0x48
    8256:	4293      	cmp	r3, r2
    8258:	d3f6      	bcc.n	8248 <net_if_ipv4_maddr_lookup+0x1c>
	k_mutex_unlock(&lock);
    825a:	f7ff fd15 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    825e:	4620      	mov	r0, r4
    8260:	bd70      	pop	{r4, r5, r6, pc}
		addr = ipv4_maddr_find(iface, true, maddr);
    8262:	689c      	ldr	r4, [r3, #8]
	if (!ipv4) {
    8264:	b934      	cbnz	r4, 8274 <net_if_ipv4_maddr_lookup+0x48>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    8266:	3348      	adds	r3, #72	; 0x48
    8268:	e7eb      	b.n	8242 <net_if_ipv4_maddr_lookup+0x16>
    826a:	3348      	adds	r3, #72	; 0x48
    826c:	4293      	cmp	r3, r2
    826e:	d3eb      	bcc.n	8248 <net_if_ipv4_maddr_lookup+0x1c>
out:
    8270:	2400      	movs	r4, #0
    8272:	e7f2      	b.n	825a <net_if_ipv4_maddr_lookup+0x2e>
		if ((is_used && !ipv4->mcast[i].is_used) ||
    8274:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    8278:	07c9      	lsls	r1, r1, #31
    827a:	d5f4      	bpl.n	8266 <net_if_ipv4_maddr_lookup+0x3a>
		if (addr) {
    827c:	b11e      	cbz	r6, 8286 <net_if_ipv4_maddr_lookup+0x5a>
    827e:	69e0      	ldr	r0, [r4, #28]
    8280:	6831      	ldr	r1, [r6, #0]
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
    8282:	4288      	cmp	r0, r1
    8284:	d1ef      	bne.n	8266 <net_if_ipv4_maddr_lookup+0x3a>
			if (ret) {
    8286:	b105      	cbz	r5, 828a <net_if_ipv4_maddr_lookup+0x5e>
				*ret = iface;
    8288:	602b      	str	r3, [r5, #0]
		return &ipv4->mcast[i];
    828a:	3418      	adds	r4, #24
    828c:	e7e5      	b.n	825a <net_if_ipv4_maddr_lookup+0x2e>
    828e:	bf00      	nop
    8290:	200013c0 	.word	0x200013c0
    8294:	20001408 	.word	0x20001408

00008298 <net_if_call_link_cb>:
{
    8298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    829a:	4605      	mov	r5, r0
    829c:	460e      	mov	r6, r1
	k_mutex_lock(&lock, K_FOREVER);
    829e:	f04f 30ff 	mov.w	r0, #4294967295
    82a2:	f04f 31ff 	mov.w	r1, #4294967295
{
    82a6:	4617      	mov	r7, r2
	k_mutex_lock(&lock, K_FOREVER);
    82a8:	f7ff fce6 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    82ac:	4b0a      	ldr	r3, [pc, #40]	; (82d8 <net_if_call_link_cb+0x40>)
    82ae:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    82b0:	b10b      	cbz	r3, 82b6 <net_if_call_link_cb+0x1e>
	return node->next;
    82b2:	681c      	ldr	r4, [r3, #0]
    82b4:	b91b      	cbnz	r3, 82be <net_if_call_link_cb+0x26>
}
    82b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
    82ba:	f7ff bce5 	b.w	7c88 <k_mutex_unlock.constprop.0.isra.0>
		link->cb(iface, lladdr, status);
    82be:	463a      	mov	r2, r7
    82c0:	4631      	mov	r1, r6
    82c2:	4628      	mov	r0, r5
    82c4:	685b      	ldr	r3, [r3, #4]
    82c6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
    82c8:	b11c      	cbz	r4, 82d2 <net_if_call_link_cb+0x3a>
    82ca:	6822      	ldr	r2, [r4, #0]
    82cc:	4623      	mov	r3, r4
    82ce:	4614      	mov	r4, r2
    82d0:	e7f0      	b.n	82b4 <net_if_call_link_cb+0x1c>
    82d2:	4622      	mov	r2, r4
    82d4:	e7fa      	b.n	82cc <net_if_call_link_cb+0x34>
    82d6:	bf00      	nop
    82d8:	2000306c 	.word	0x2000306c

000082dc <net_if_tx.isra.0>:
	struct net_linkaddr ll_dst = {
    82dc:	2300      	movs	r3, #0
static bool net_if_tx(struct net_if *iface, struct net_pkt *pkt)
    82de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82e2:	b084      	sub	sp, #16
    82e4:	af00      	add	r7, sp, #0
    82e6:	4605      	mov	r5, r0
	if (!pkt) {
    82e8:	460c      	mov	r4, r1
	struct net_linkaddr ll_dst = {
    82ea:	e9c7 3300 	strd	r3, r3, [r7]
	if (!pkt) {
    82ee:	2900      	cmp	r1, #0
    82f0:	d03e      	beq.n	8370 <net_if_tx.isra.0+0x94>
	return list->head;
    82f2:	4b2a      	ldr	r3, [pc, #168]	; (839c <net_if_tx.isra.0+0xc0>)
	if (!sys_slist_is_empty(&link_callbacks)) {
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	b18b      	cbz	r3, 831c <net_if_tx.isra.0+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
    82f8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    82fa:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   uint8_t *new_addr, uint8_t new_len)
{
	if (!lladdr_store || !new_addr) {
    82fe:	b169      	cbz	r1, 831c <net_if_tx.isra.0+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
    8300:	2e06      	cmp	r6, #6
    8302:	d80b      	bhi.n	831c <net_if_tx.isra.0+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
    8304:	f107 030a 	add.w	r3, r7, #10
    8308:	4618      	mov	r0, r3
    830a:	4632      	mov	r2, r6
	lladdr_store->len = new_len;
    830c:	727e      	strb	r6, [r7, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
    830e:	f7f8 fc21 	bl	b54 <memcpy>
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
    8312:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
			ll_dst.addr = ll_dst_storage.addr;
    8316:	6038      	str	r0, [r7, #0]
			ll_dst.len = ll_dst_storage.len;
    8318:	713e      	strb	r6, [r7, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
    831a:	717b      	strb	r3, [r7, #5]
	if (net_if_flag_is_set(iface, NET_IF_LOWER_UP)) {
    831c:	2109      	movs	r1, #9
    831e:	4628      	mov	r0, r5
	return pkt->context;
    8320:	f8d4 8014 	ldr.w	r8, [r4, #20]
    8324:	f018 fac9 	bl	208ba <net_if_flag_is_set>
    8328:	4603      	mov	r3, r0
    832a:	b328      	cbz	r0, 8378 <net_if_tx.isra.0+0x9c>
	return pkt->family;
    832c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
		status = net_if_l2(iface)->send(iface, pkt);
    8330:	4628      	mov	r0, r5
		if (IS_ENABLED(CONFIG_NET_TCP) &&
    8332:	095a      	lsrs	r2, r3, #5
	pkt->pkt_queued = send;
    8334:	bf1c      	itt	ne
    8336:	f36f 0382 	bfcne	r3, #2, #1
    833a:	f884 3037 	strbne.w	r3, [r4, #55]	; 0x37
		status = net_if_l2(iface)->send(iface, pkt);
    833e:	f018 fa63 	bl	20808 <net_if_l2>
    8342:	4621      	mov	r1, r4
    8344:	6843      	ldr	r3, [r0, #4]
    8346:	4628      	mov	r0, r5
    8348:	4798      	blx	r3
	if (status < 0) {
    834a:	1e06      	subs	r6, r0, #0
    834c:	da02      	bge.n	8354 <net_if_tx.isra.0+0x78>
		net_pkt_unref(pkt);
    834e:	4620      	mov	r0, r4
    8350:	f019 f830 	bl	213b4 <net_pkt_unref>
	if (context) {
    8354:	f1b8 0f00 	cmp.w	r8, #0
    8358:	d003      	beq.n	8362 <net_if_tx.isra.0+0x86>
		net_context_send_cb(context, status);
    835a:	4631      	mov	r1, r6
    835c:	4640      	mov	r0, r8
    835e:	f018 fa58 	bl	20812 <net_context_send_cb>
	if (ll_dst.addr) {
    8362:	683b      	ldr	r3, [r7, #0]
    8364:	b123      	cbz	r3, 8370 <net_if_tx.isra.0+0x94>
		net_if_call_link_cb(iface, &ll_dst, status);
    8366:	4632      	mov	r2, r6
    8368:	4639      	mov	r1, r7
    836a:	4628      	mov	r0, r5
    836c:	f7ff ff94 	bl	8298 <net_if_call_link_cb>
}
    8370:	3710      	adds	r7, #16
    8372:	46bd      	mov	sp, r7
    8374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NET_WARN("iface %p is down", iface);
    8378:	466e      	mov	r6, sp
    837a:	b088      	sub	sp, #32
    837c:	466a      	mov	r2, sp
    837e:	4908      	ldr	r1, [pc, #32]	; (83a0 <net_if_tx.isra.0+0xc4>)
    8380:	e9c2 1505 	strd	r1, r5, [r2, #20]
    8384:	2103      	movs	r1, #3
    8386:	f842 1f10 	str.w	r1, [r2, #16]!
    838a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    838e:	4805      	ldr	r0, [pc, #20]	; (83a4 <net_if_tx.isra.0+0xc8>)
    8390:	f7fc fd78 	bl	4e84 <z_impl_z_log_msg_static_create>
    8394:	46b5      	mov	sp, r6
		status = -ENETDOWN;
    8396:	f06f 0672 	mvn.w	r6, #114	; 0x72
    839a:	e7d8      	b.n	834e <net_if_tx.isra.0+0x72>
    839c:	2000306c 	.word	0x2000306c
    83a0:	00032be2 	.word	0x00032be2
    83a4:	00024d10 	.word	0x00024d10

000083a8 <net_if_send_data>:
{
    83a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83ac:	4605      	mov	r5, r0
	return pkt->context;
    83ae:	694e      	ldr	r6, [r1, #20]
	k_mutex_lock(&lock, K_FOREVER);
    83b0:	f04f 30ff 	mov.w	r0, #4294967295
{
    83b4:	af00      	add	r7, sp, #0
    83b6:	460c      	mov	r4, r1
	k_mutex_lock(&lock, K_FOREVER);
    83b8:	f04f 31ff 	mov.w	r1, #4294967295
    83bc:	f7ff fc5c 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (!net_if_flag_is_set(iface, NET_IF_LOWER_UP) ||
    83c0:	2109      	movs	r1, #9
    83c2:	4628      	mov	r0, r5
    83c4:	f018 fa79 	bl	208ba <net_if_flag_is_set>
    83c8:	b9c8      	cbnz	r0, 83fe <net_if_send_data+0x56>
		NET_WARN("iface %p is down", iface);
    83ca:	46e8      	mov	r8, sp
    83cc:	b088      	sub	sp, #32
    83ce:	466a      	mov	r2, sp
    83d0:	4b1f      	ldr	r3, [pc, #124]	; (8450 <net_if_send_data+0xa8>)
    83d2:	e9c2 3505 	strd	r3, r5, [r2, #20]
    83d6:	2303      	movs	r3, #3
    83d8:	f842 3f10 	str.w	r3, [r2, #16]!
    83dc:	2300      	movs	r3, #0
    83de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    83e2:	481c      	ldr	r0, [pc, #112]	; (8454 <net_if_send_data+0xac>)
    83e4:	f7fc fd4e 	bl	4e84 <z_impl_z_log_msg_static_create>
    83e8:	46c5      	mov	sp, r8
		if (context) {
    83ea:	bb1e      	cbnz	r6, 8434 <net_if_send_data+0x8c>
		if (dst->addr) {
    83ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    83ee:	bb3b      	cbnz	r3, 8440 <net_if_send_data+0x98>
		verdict = NET_DROP;
    83f0:	2402      	movs	r4, #2
	k_mutex_unlock(&lock);
    83f2:	f7ff fc49 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    83f6:	4620      	mov	r0, r4
    83f8:	46bd      	mov	sp, r7
    83fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {
    83fe:	2104      	movs	r1, #4
    8400:	4628      	mov	r0, r5
    8402:	f018 fa5a 	bl	208ba <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_LOWER_UP) ||
    8406:	2800      	cmp	r0, #0
    8408:	d1df      	bne.n	83ca <net_if_send_data+0x22>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
    840a:	2101      	movs	r1, #1
    840c:	4628      	mov	r0, r5
    840e:	f018 fa54 	bl	208ba <net_if_flag_is_set>
    8412:	b948      	cbnz	r0, 8428 <net_if_send_data+0x80>
    8414:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8416:	b93b      	cbnz	r3, 8428 <net_if_send_data+0x80>
	return net_if_get_link_addr(pkt->iface);
    8418:	69a3      	ldr	r3, [r4, #24]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
    841a:	681a      	ldr	r2, [r3, #0]
    841c:	6912      	ldr	r2, [r2, #16]
    841e:	6262      	str	r2, [r4, #36]	; 0x24
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
    8420:	681b      	ldr	r3, [r3, #0]
    8422:	7d1b      	ldrb	r3, [r3, #20]
    8424:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		net_if_queue_tx(iface, pkt);
    8428:	4621      	mov	r1, r4
    842a:	4628      	mov	r0, r5
    842c:	f018 fb30 	bl	20a90 <net_if_queue_tx>
    8430:	2400      	movs	r4, #0
    8432:	e7de      	b.n	83f2 <net_if_send_data+0x4a>
			net_context_send_cb(context, status);
    8434:	f06f 0172 	mvn.w	r1, #114	; 0x72
    8438:	4630      	mov	r0, r6
    843a:	f018 f9ea 	bl	20812 <net_context_send_cb>
    843e:	e7d5      	b.n	83ec <net_if_send_data+0x44>
			net_if_call_link_cb(iface, dst, status);
    8440:	f06f 0272 	mvn.w	r2, #114	; 0x72
    8444:	4628      	mov	r0, r5
    8446:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    844a:	f7ff ff25 	bl	8298 <net_if_call_link_cb>
    844e:	e7cf      	b.n	83f0 <net_if_send_data+0x48>
    8450:	00032be2 	.word	0x00032be2
    8454:	00024d10 	.word	0x00024d10

00008458 <net_if_get_by_iface>:
	if (!(iface >= _net_if_list_start && iface < _net_if_list_end)) {
    8458:	4b07      	ldr	r3, [pc, #28]	; (8478 <net_if_get_by_iface+0x20>)
    845a:	4298      	cmp	r0, r3
    845c:	d308      	bcc.n	8470 <net_if_get_by_iface+0x18>
    845e:	4a07      	ldr	r2, [pc, #28]	; (847c <net_if_get_by_iface+0x24>)
    8460:	4290      	cmp	r0, r2
    8462:	d205      	bcs.n	8470 <net_if_get_by_iface+0x18>
	return (iface - _net_if_list_start) + 1;
    8464:	1ac0      	subs	r0, r0, r3
    8466:	4b06      	ldr	r3, [pc, #24]	; (8480 <net_if_get_by_iface+0x28>)
    8468:	10c0      	asrs	r0, r0, #3
    846a:	4358      	muls	r0, r3
    846c:	3001      	adds	r0, #1
    846e:	4770      	bx	lr
		return -1;
    8470:	f04f 30ff 	mov.w	r0, #4294967295
}
    8474:	4770      	bx	lr
    8476:	bf00      	nop
    8478:	200013c0 	.word	0x200013c0
    847c:	20001408 	.word	0x20001408
    8480:	38e38e39 	.word	0x38e38e39

00008484 <net_if_foreach>:
{
    8484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8486:	4605      	mov	r5, r0
    8488:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
    848a:	4c05      	ldr	r4, [pc, #20]	; (84a0 <net_if_foreach+0x1c>)
    848c:	4f05      	ldr	r7, [pc, #20]	; (84a4 <net_if_foreach+0x20>)
    848e:	42bc      	cmp	r4, r7
    8490:	d300      	bcc.n	8494 <net_if_foreach+0x10>
}
    8492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb(iface, user_data);
    8494:	4620      	mov	r0, r4
    8496:	4631      	mov	r1, r6
    8498:	47a8      	blx	r5
	STRUCT_SECTION_FOREACH(net_if, iface) {
    849a:	3448      	adds	r4, #72	; 0x48
    849c:	e7f7      	b.n	848e <net_if_foreach+0xa>
    849e:	bf00      	nop
    84a0:	200013c0 	.word	0x200013c0
    84a4:	20001408 	.word	0x20001408

000084a8 <net_if_up>:
	return;
#endif
}

int net_if_up(struct net_if *iface)
{
    84a8:	b538      	push	{r3, r4, r5, lr}
    84aa:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
    84ac:	f04f 31ff 	mov.w	r1, #4294967295
    84b0:	f04f 30ff 	mov.w	r0, #4294967295
    84b4:	f7ff fbe0 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    84b8:	2100      	movs	r1, #0
    84ba:	4628      	mov	r0, r5
    84bc:	f018 f9fd 	bl	208ba <net_if_flag_is_set>
    84c0:	b9e0      	cbnz	r0, 84fc <net_if_up+0x54>
		status = -EALREADY;
		goto out;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    84c2:	4628      	mov	r0, r5
    84c4:	f018 f9a0 	bl	20808 <net_if_l2>
    84c8:	4604      	mov	r4, r0
    84ca:	b130      	cbz	r0, 84da <net_if_up+0x32>
    84cc:	6884      	ldr	r4, [r0, #8]
    84ce:	b124      	cbz	r4, 84da <net_if_up+0x32>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
    84d0:	2101      	movs	r1, #1
    84d2:	4628      	mov	r0, r5
    84d4:	47a0      	blx	r4
	if (status < 0) {
    84d6:	1e04      	subs	r4, r0, #0
    84d8:	db0c      	blt.n	84f4 <net_if_up+0x4c>
	}

	init_igmp(iface);

done:
	net_if_flag_set(iface, NET_IF_UP);
    84da:	2100      	movs	r1, #0
    84dc:	6828      	ldr	r0, [r5, #0]
    84de:	f018 fa01 	bl	208e4 <net_if_flag_set.isra.0>
    84e2:	2300      	movs	r3, #0
    84e4:	4807      	ldr	r0, [pc, #28]	; (8504 <net_if_up+0x5c>)
    84e6:	461a      	mov	r2, r3
    84e8:	4629      	mov	r1, r5
    84ea:	f000 fb83 	bl	8bf4 <net_mgmt_event_notify_with_info>
	net_mgmt_event_notify(NET_EVENT_IF_ADMIN_UP, iface);
	update_operational_state(iface);
    84ee:	4628      	mov	r0, r5
    84f0:	f7ff fcb8 	bl	7e64 <update_operational_state>

out:
	k_mutex_unlock(&lock);
    84f4:	f7ff fbc8 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
    84f8:	4620      	mov	r0, r4
    84fa:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
    84fc:	f06f 0477 	mvn.w	r4, #119	; 0x77
    8500:	e7f8      	b.n	84f4 <net_if_up+0x4c>
    8502:	bf00      	nop
    8504:	d0010004 	.word	0xd0010004

00008508 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    8508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    850c:	b086      	sub	sp, #24
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
    850e:	f04f 30ff 	mov.w	r0, #4294967295
    8512:	f04f 31ff 	mov.w	r1, #4294967295
{
    8516:	af00      	add	r7, sp, #0
	k_mutex_lock(&lock, K_FOREVER);
    8518:	f7ff fbae 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	int if_count = 0;
    851c:	2500      	movs	r5, #0

	net_tc_tx_init();
    851e:	f019 fa67 	bl	219f0 <net_tc_tx_init>

	STRUCT_SECTION_FOREACH(net_if, iface) {
    8522:	4c38      	ldr	r4, [pc, #224]	; (8604 <net_if_init+0xfc>)
    8524:	4e38      	ldr	r6, [pc, #224]	; (8608 <net_if_init+0x100>)
		NET_ERR("Iface %p driver API init NULL", iface);
    8526:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 860c <net_if_init+0x104>
    852a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8610 <net_if_init+0x108>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    852e:	42b4      	cmp	r4, r6
    8530:	d313      	bcc.n	855a <net_if_init+0x52>
		init_iface(iface);
		if_count++;
	}

	if (if_count == 0) {
    8532:	2d00      	cmp	r5, #0
    8534:	d139      	bne.n	85aa <net_if_init+0xa2>
		NET_ERR("There is no network interface to work with!");
    8536:	4b37      	ldr	r3, [pc, #220]	; (8614 <net_if_init+0x10c>)
    8538:	617b      	str	r3, [r7, #20]
    853a:	2302      	movs	r3, #2
    853c:	613b      	str	r3, [r7, #16]
    853e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8542:	462b      	mov	r3, r5
    8544:	4832      	ldr	r0, [pc, #200]	; (8610 <net_if_init+0x108>)
    8546:	f107 0210 	add.w	r2, r7, #16
    854a:	f7fc fc9b 	bl	4e84 <z_impl_z_log_msg_static_create>
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif

out:
	k_mutex_unlock(&lock);
    854e:	f7ff fb9b 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
    8552:	3718      	adds	r7, #24
    8554:	46bd      	mov	sp, r7
    8556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    855a:	6820      	ldr	r0, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
    855c:	6803      	ldr	r3, [r0, #0]
    855e:	f8d3 a008 	ldr.w	sl, [r3, #8]
	if (!api || !api->init) {
    8562:	f1ba 0f00 	cmp.w	sl, #0
    8566:	d002      	beq.n	856e <net_if_init+0x66>
    8568:	f8da 3000 	ldr.w	r3, [sl]
    856c:	b98b      	cbnz	r3, 8592 <net_if_init+0x8a>
		NET_ERR("Iface %p driver API init NULL", iface);
    856e:	46ea      	mov	sl, sp
    8570:	b088      	sub	sp, #32
    8572:	466a      	mov	r2, sp
    8574:	2303      	movs	r3, #3
    8576:	e9c2 8405 	strd	r8, r4, [r2, #20]
    857a:	f842 3f10 	str.w	r3, [r2, #16]!
    857e:	2300      	movs	r3, #0
    8580:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8584:	4648      	mov	r0, r9
    8586:	f7fc fc7d 	bl	4e84 <z_impl_z_log_msg_static_create>
    858a:	46d5      	mov	sp, sl
		if_count++;
    858c:	3501      	adds	r5, #1
	STRUCT_SECTION_FOREACH(net_if, iface) {
    858e:	3448      	adds	r4, #72	; 0x48
    8590:	e7cd      	b.n	852e <net_if_init+0x26>
	net_if_flag_set(iface, NET_IF_IPV4);
    8592:	2106      	movs	r1, #6
    8594:	f018 f9a6 	bl	208e4 <net_if_flag_set.isra.0>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
    8598:	2109      	movs	r1, #9
    859a:	6820      	ldr	r0, [r4, #0]
    859c:	f018 f9ad 	bl	208fa <net_if_flag_test_and_set.isra.0>
	api->init(iface);
    85a0:	4620      	mov	r0, r4
    85a2:	f8da 3000 	ldr.w	r3, [sl]
    85a6:	4798      	blx	r3
    85a8:	e7f0      	b.n	858c <net_if_init+0x84>
	if (if_count > ARRAY_SIZE(ipv4_addresses)) {
    85aa:	2d01      	cmp	r5, #1
    85ac:	d01d      	beq.n	85ea <net_if_init+0xe2>
		NET_WARN("You have %zu IPv4 net_if addresses but %d "
    85ae:	466c      	mov	r4, sp
    85b0:	b088      	sub	sp, #32
    85b2:	466a      	mov	r2, sp
    85b4:	4b18      	ldr	r3, [pc, #96]	; (8618 <net_if_init+0x110>)
    85b6:	6153      	str	r3, [r2, #20]
    85b8:	2301      	movs	r3, #1
    85ba:	e9c2 3506 	strd	r3, r5, [r2, #24]
    85be:	2304      	movs	r3, #4
    85c0:	f842 3f10 	str.w	r3, [r2, #16]!
    85c4:	2300      	movs	r3, #0
    85c6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    85ca:	4811      	ldr	r0, [pc, #68]	; (8610 <net_if_init+0x108>)
    85cc:	f7fc fc5a 	bl	4e84 <z_impl_z_log_msg_static_create>
    85d0:	46a5      	mov	sp, r4
		NET_WARN("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT "
    85d2:	4b12      	ldr	r3, [pc, #72]	; (861c <net_if_init+0x114>)
    85d4:	617b      	str	r3, [r7, #20]
    85d6:	2302      	movs	r3, #2
    85d8:	613b      	str	r3, [r7, #16]
    85da:	2300      	movs	r3, #0
    85dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    85e0:	480b      	ldr	r0, [pc, #44]	; (8610 <net_if_init+0x108>)
    85e2:	f107 0210 	add.w	r2, r7, #16
    85e6:	f7fc fc4d 	bl	4e84 <z_impl_z_log_msg_static_create>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
    85ea:	2240      	movs	r2, #64	; 0x40
    85ec:	4b0c      	ldr	r3, [pc, #48]	; (8620 <net_if_init+0x118>)
	k_work_init_delayable(&router_timer, iface_router_expired);
    85ee:	490d      	ldr	r1, [pc, #52]	; (8624 <net_if_init+0x11c>)
    85f0:	480d      	ldr	r0, [pc, #52]	; (8628 <net_if_init+0x120>)
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
    85f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	k_work_init_delayable(&router_timer, iface_router_expired);
    85f6:	f01b fddb 	bl	241b0 <k_work_init_delayable>
	list->head = NULL;
    85fa:	2200      	movs	r2, #0
    85fc:	4b0b      	ldr	r3, [pc, #44]	; (862c <net_if_init+0x124>)
	list->tail = NULL;
    85fe:	e9c3 2200 	strd	r2, r2, [r3]
}
    8602:	e7a4      	b.n	854e <net_if_init+0x46>
    8604:	200013c0 	.word	0x200013c0
    8608:	20001408 	.word	0x20001408
    860c:	00032bf3 	.word	0x00032bf3
    8610:	00024d10 	.word	0x00024d10
    8614:	00032c11 	.word	0x00032c11
    8618:	00032c3d 	.word	0x00032c3d
    861c:	00032c7a 	.word	0x00032c7a
    8620:	20003074 	.word	0x20003074
    8624:	00007dc5 	.word	0x00007dc5
    8628:	20002348 	.word	0x20002348
    862c:	200030b4 	.word	0x200030b4

00008630 <net_if_post_init>:

void net_if_post_init(void)
{
    8630:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
    8632:	4c07      	ldr	r4, [pc, #28]	; (8650 <net_if_post_init+0x20>)
    8634:	4d07      	ldr	r5, [pc, #28]	; (8654 <net_if_post_init+0x24>)
    8636:	42ac      	cmp	r4, r5
    8638:	d300      	bcc.n	863c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    863a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    863c:	2103      	movs	r1, #3
    863e:	4620      	mov	r0, r4
    8640:	f018 f93b 	bl	208ba <net_if_flag_is_set>
    8644:	b910      	cbnz	r0, 864c <net_if_post_init+0x1c>
			net_if_up(iface);
    8646:	4620      	mov	r0, r4
    8648:	f7ff ff2e 	bl	84a8 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    864c:	3448      	adds	r4, #72	; 0x48
    864e:	e7f2      	b.n	8636 <net_if_post_init+0x6>
    8650:	200013c0 	.word	0x200013c0
    8654:	20001408 	.word	0x20001408

00008658 <net_sprint_ll_addr_buf>:
	return ptr;
}

char *net_sprint_ll_addr_buf(const uint8_t *ll, uint8_t ll_len,
			     char *buf, int buflen)
{
    8658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    865c:	4615      	mov	r5, r2
	uint8_t i, len, blen;
	char *ptr = buf;

	if (ll == NULL) {
    865e:	4606      	mov	r6, r0
    8660:	b310      	cbz	r0, 86a8 <net_sprint_ll_addr_buf+0x50>
		return "<unknown>";
	}

	switch (ll_len) {
    8662:	2902      	cmp	r1, #2
	default:
		len = 6U;
		break;
	}

	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
    8664:	b2dc      	uxtb	r4, r3
	switch (ll_len) {
    8666:	d002      	beq.n	866e <net_sprint_ll_addr_buf+0x16>
		len = 6U;
    8668:	2908      	cmp	r1, #8
    866a:	bf18      	it	ne
    866c:	2106      	movne	r1, #6
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
    866e:	b914      	cbnz	r4, 8676 <net_sprint_ll_addr_buf+0x1e>
		*ptr++ = ':';
		blen -= 3U;
	}

	if (!(ptr - buf)) {
		return NULL;
    8670:	2000      	movs	r0, #0
	}

	*(ptr - 1) = '\0';
	return buf;
}
    8672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
    8676:	4628      	mov	r0, r5
		*ptr++ = ':';
    8678:	f04f 083a 	mov.w	r8, #58	; 0x3a
    867c:	1877      	adds	r7, r6, r1
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
    867e:	2301      	movs	r3, #1
    8680:	f816 1b01 	ldrb.w	r1, [r6], #1
    8684:	2241      	movs	r2, #65	; 0x41
    8686:	f018 fa3e 	bl	20b06 <net_byte_to_hex>
		blen -= 3U;
    868a:	3c03      	subs	r4, #3
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
    868c:	42be      	cmp	r6, r7
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
    868e:	4603      	mov	r3, r0
		blen -= 3U;
    8690:	b2e4      	uxtb	r4, r4
		*ptr++ = ':';
    8692:	f800 8b01 	strb.w	r8, [r0], #1
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
    8696:	d001      	beq.n	869c <net_sprint_ll_addr_buf+0x44>
    8698:	2c00      	cmp	r4, #0
    869a:	d1f0      	bne.n	867e <net_sprint_ll_addr_buf+0x26>
	if (!(ptr - buf)) {
    869c:	4285      	cmp	r5, r0
    869e:	d0e7      	beq.n	8670 <net_sprint_ll_addr_buf+0x18>
	*(ptr - 1) = '\0';
    86a0:	2200      	movs	r2, #0
	return buf;
    86a2:	4628      	mov	r0, r5
	*(ptr - 1) = '\0';
    86a4:	701a      	strb	r2, [r3, #0]
	return buf;
    86a6:	e7e4      	b.n	8672 <net_sprint_ll_addr_buf+0x1a>
		return "<unknown>";
    86a8:	4800      	ldr	r0, [pc, #0]	; (86ac <net_sprint_ll_addr_buf+0x54>)
    86aa:	e7e2      	b.n	8672 <net_sprint_ll_addr_buf+0x1a>
    86ac:	00032cb9 	.word	0x00032cb9

000086b0 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
    86b0:	2300      	movs	r3, #0
{
    86b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
    86b6:	2802      	cmp	r0, #2
{
    86b8:	b089      	sub	sp, #36	; 0x24
    86ba:	4605      	mov	r5, r0
    86bc:	4688      	mov	r8, r1
    86be:	4693      	mov	fp, r2
	unsigned char zeros[8] = { 0 };
    86c0:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
    86c4:	d14d      	bne.n	8762 <z_impl_net_addr_ntop+0xb2>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
    86c6:	a806      	add	r0, sp, #24
    86c8:	9104      	str	r1, [sp, #16]
    86ca:	4601      	mov	r1, r0
{
    86cc:	461a      	mov	r2, r3
    86ce:	e006      	b.n	86de <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
    86d0:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
    86d2:	3201      	adds	r2, #1
				zeros[i]++;
    86d4:	3401      	adds	r4, #1
    86d6:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
    86d8:	b2d4      	uxtb	r4, r2
    86da:	2c08      	cmp	r4, #8
    86dc:	d003      	beq.n	86e6 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
    86de:	f838 4012 	ldrh.w	r4, [r8, r2, lsl #1]
    86e2:	2c00      	cmp	r4, #0
    86e4:	d0f4      	beq.n	86d0 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
    86e6:	3301      	adds	r3, #1
    86e8:	2b08      	cmp	r3, #8
    86ea:	f101 0101 	add.w	r1, r1, #1
    86ee:	d1ed      	bne.n	86cc <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
    86f0:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
    86f4:	2601      	movs	r6, #1
			}
		}

		for (i = 0U; i < 8; i++) {
    86f6:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
    86f8:	f810 2b01 	ldrb.w	r2, [r0], #1
    86fc:	42b2      	cmp	r2, r6
				longest = zeros[i];
				pos = i;
    86fe:	bf88      	it	hi
    8700:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
    8702:	f103 0301 	add.w	r3, r3, #1
    8706:	b2db      	uxtb	r3, r3
				pos = i;
    8708:	bf88      	it	hi
    870a:	4616      	movhi	r6, r2
		for (i = 0U; i < 8; i++) {
    870c:	2b08      	cmp	r3, #8
    870e:	d1f3      	bne.n	86f8 <z_impl_net_addr_ntop+0x48>
		len = 8;
    8710:	469a      	mov	sl, r3
    8712:	2e01      	cmp	r6, #1
    8714:	f04f 033a 	mov.w	r3, #58	; 0x3a
    8718:	bf08      	it	eq
    871a:	f04f 37ff 	moveq.w	r7, #4294967295
    871e:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
    8720:	2200      	movs	r2, #0
	char delim = ':';
    8722:	4658      	mov	r0, fp
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
    8724:	4614      	mov	r4, r2
    8726:	4613      	mov	r3, r2
		/* IPv4 address a.b.c.d */
		if (len == 4) {
    8728:	f1ba 0f04 	cmp.w	sl, #4
    872c:	d158      	bne.n	87e0 <z_impl_net_addr_ntop+0x130>
			uint8_t l;

			value = (uint32_t)addr->s4_addr[i];
    872e:	f818 1003 	ldrb.w	r1, [r8, r3]

			/* net_byte_to_udec() eats 0 */
			if (value == 0U) {
				*ptr++ = '0';
    8732:	4603      	mov	r3, r0
			if (value == 0U) {
    8734:	bb19      	cbnz	r1, 877e <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
    8736:	2130      	movs	r1, #48	; 0x30
    8738:	f803 1b02 	strb.w	r1, [r3], #2
				*ptr++ = delim;
    873c:	9901      	ldr	r1, [sp, #4]
    873e:	7041      	strb	r1, [r0, #1]
    8740:	4618      	mov	r0, r3
	for (i = 0U; i < len; i++) {
    8742:	3401      	adds	r4, #1
    8744:	b2e4      	uxtb	r4, r4
    8746:	4554      	cmp	r4, sl
    8748:	4623      	mov	r3, r4
    874a:	dbed      	blt.n	8728 <z_impl_net_addr_ntop+0x78>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
    874c:	4558      	cmp	r0, fp
    874e:	d00a      	beq.n	8766 <z_impl_net_addr_ntop+0xb6>
		return NULL;
	}

	if (family == AF_INET) {
    8750:	2d01      	cmp	r5, #1
    8752:	f04f 0300 	mov.w	r3, #0
    8756:	f040 8089 	bne.w	886c <z_impl_net_addr_ntop+0x1bc>
		*(ptr - 1) = '\0';
    875a:	f800 3c01 	strb.w	r3, [r0, #-1]
		return NULL;
    875e:	4658      	mov	r0, fp
    8760:	e002      	b.n	8768 <z_impl_net_addr_ntop+0xb8>
	} else if (family == AF_INET) {
    8762:	2801      	cmp	r0, #1
    8764:	d003      	beq.n	876e <z_impl_net_addr_ntop+0xbe>
		return NULL;
    8766:	2000      	movs	r0, #0
	} else {
		*ptr = '\0';
	}

	return dst;
}
    8768:	b009      	add	sp, #36	; 0x24
    876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
    876e:	232e      	movs	r3, #46	; 0x2e
		len = 4;
    8770:	f04f 0a04 	mov.w	sl, #4
	int8_t pos = -1;
    8774:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
    8778:	4606      	mov	r6, r0
		delim = '.';
    877a:	9301      	str	r3, [sp, #4]
    877c:	e7d0      	b.n	8720 <z_impl_net_addr_ntop+0x70>
			l = net_value_to_udec(ptr, value, 0);
    877e:	f04f 0e00 	mov.w	lr, #0
    8782:	f04f 0c09 	mov.w	ip, #9
    8786:	f8cd e008 	str.w	lr, [sp, #8]
    878a:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8870 <z_impl_net_addr_ntop+0x1c0>
		temp = value / divisor;
    878e:	fbb1 f9fe 	udiv	r9, r1, lr
    8792:	9103      	str	r1, [sp, #12]
    8794:	f8cd 9014 	str.w	r9, [sp, #20]
		value = value % divisor;
    8798:	fb0e 1119 	mls	r1, lr, r9, r1
		if ((precision > i) || (temp != 0)) {
    879c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    87a0:	45cc      	cmp	ip, r9
    87a2:	db03      	blt.n	87ac <z_impl_net_addr_ntop+0xfc>
    87a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
    87a8:	45f1      	cmp	r9, lr
    87aa:	d307      	bcc.n	87bc <z_impl_net_addr_ntop+0x10c>
			*buf++ = (char) (temp + '0');
    87ac:	f8dd 9014 	ldr.w	r9, [sp, #20]
    87b0:	f8cd c008 	str.w	ip, [sp, #8]
    87b4:	f109 0930 	add.w	r9, r9, #48	; 0x30
    87b8:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    87bc:	f04f 090a 	mov.w	r9, #10
    87c0:	f10c 3cff 	add.w	ip, ip, #4294967295
    87c4:	f1bc 3fff 	cmp.w	ip, #4294967295
    87c8:	fbbe fef9 	udiv	lr, lr, r9
    87cc:	d1df      	bne.n	878e <z_impl_net_addr_ntop+0xde>
	*buf = 0;
    87ce:	2100      	movs	r1, #0
    87d0:	7019      	strb	r1, [r3, #0]
	return buf - start;
    87d2:	1a1b      	subs	r3, r3, r0
			*ptr++ = delim;
    87d4:	fa50 f083 	uxtab	r0, r0, r3
    87d8:	9b01      	ldr	r3, [sp, #4]
    87da:	f800 3b01 	strb.w	r3, [r0], #1
			continue;
    87de:	e7b0      	b.n	8742 <z_impl_net_addr_ntop+0x92>
		if (i == pos) {
    87e0:	429f      	cmp	r7, r3
    87e2:	d10d      	bne.n	8800 <z_impl_net_addr_ntop+0x150>
			if (needcolon || i == 0U) {
    87e4:	b902      	cbnz	r2, 87e8 <z_impl_net_addr_ntop+0x138>
    87e6:	b914      	cbnz	r4, 87ee <z_impl_net_addr_ntop+0x13e>
				*ptr++ = ':';
    87e8:	233a      	movs	r3, #58	; 0x3a
    87ea:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
    87ee:	f04f 033a 	mov.w	r3, #58	; 0x3a
    87f2:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
    87f6:	1e73      	subs	r3, r6, #1
    87f8:	4423      	add	r3, r4
			needcolon = false;
    87fa:	2200      	movs	r2, #0
			i += longest - 1U;
    87fc:	b2dc      	uxtb	r4, r3
			continue;
    87fe:	e7a0      	b.n	8742 <z_impl_net_addr_ntop+0x92>
		if (needcolon) {
    8800:	b11a      	cbz	r2, 880a <z_impl_net_addr_ntop+0x15a>
			*ptr++ = ':';
    8802:	f04f 033a 	mov.w	r3, #58	; 0x3a
    8806:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
    880a:	9b04      	ldr	r3, [sp, #16]
    880c:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    8810:	ba52      	rev16	r2, r2
		if (bh) {
    8812:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
    8816:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
    881a:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
    881e:	d016      	beq.n	884e <z_impl_net_addr_ntop+0x19e>
			if (bh > 0x0f) {
    8820:	2b0f      	cmp	r3, #15
		bh = value >> 8;
    8822:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
    8824:	d90a      	bls.n	883c <z_impl_net_addr_ntop+0x18c>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
    8826:	2300      	movs	r3, #0
    8828:	2261      	movs	r2, #97	; 0x61
    882a:	f018 f96c 	bl	20b06 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
    882e:	2301      	movs	r3, #1
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    8830:	2261      	movs	r2, #97	; 0x61
    8832:	4649      	mov	r1, r9
    8834:	f018 f967 	bl	20b06 <net_byte_to_hex>
		needcolon = true;
    8838:	2201      	movs	r2, #1
    883a:	e782      	b.n	8742 <z_impl_net_addr_ntop+0x92>
				if (bh < 10) {
    883c:	2b09      	cmp	r3, #9
    883e:	d804      	bhi.n	884a <z_impl_net_addr_ntop+0x19a>
					*ptr++ = (char)(bh + '0');
    8840:	3130      	adds	r1, #48	; 0x30
    8842:	b2c9      	uxtb	r1, r1
    8844:	f800 1b01 	strb.w	r1, [r0], #1
    8848:	e7f1      	b.n	882e <z_impl_net_addr_ntop+0x17e>
					*ptr++ = (char) (bh - 10 + 'a');
    884a:	3157      	adds	r1, #87	; 0x57
    884c:	e7f9      	b.n	8842 <z_impl_net_addr_ntop+0x192>
		} else if (bl > 0x0f) {
    884e:	f1b9 0f0f 	cmp.w	r9, #15
    8852:	d8ed      	bhi.n	8830 <z_impl_net_addr_ntop+0x180>
			if (bl < 10) {
    8854:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
    8858:	bf94      	ite	ls
    885a:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
    885e:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
    8862:	fa5f f989 	uxtb.w	r9, r9
    8866:	f800 9b01 	strb.w	r9, [r0], #1
    886a:	e7e5      	b.n	8838 <z_impl_net_addr_ntop+0x188>
		*ptr = '\0';
    886c:	7003      	strb	r3, [r0, #0]
    886e:	e776      	b.n	875e <z_impl_net_addr_ntop+0xae>
    8870:	3b9aca00 	.word	0x3b9aca00

00008874 <net_sprint_addr>:
{
    8874:	b410      	push	{r4}
	char *s = buf[++i % NBUFS];
    8876:	4b08      	ldr	r3, [pc, #32]	; (8898 <net_sprint_addr+0x24>)
    8878:	681a      	ldr	r2, [r3, #0]
    887a:	3201      	adds	r2, #1
    887c:	601a      	str	r2, [r3, #0]
    887e:	2303      	movs	r3, #3
    8880:	fb92 f3f3 	sdiv	r3, r2, r3
    8884:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8888:	1ad2      	subs	r2, r2, r3
    888a:	2328      	movs	r3, #40	; 0x28
    888c:	4c03      	ldr	r4, [pc, #12]	; (889c <net_sprint_addr+0x28>)
    888e:	fb03 4202 	mla	r2, r3, r2, r4
}
    8892:	bc10      	pop	{r4}
    8894:	f7ff bf0c 	b.w	86b0 <z_impl_net_addr_ntop>
    8898:	200030c0 	.word	0x200030c0
    889c:	200054a9 	.word	0x200054a9

000088a0 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
    88a0:	2801      	cmp	r0, #1
{
    88a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    88a6:	460c      	mov	r4, r1
    88a8:	4616      	mov	r6, r2
	if (family == AF_INET) {
    88aa:	d126      	bne.n	88fa <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
    88ac:	4608      	mov	r0, r1
    88ae:	f00e fe6d 	bl	1758c <strlen>
		for (i = 0; i < len; i++) {
    88b2:	4623      	mov	r3, r4
    88b4:	4420      	add	r0, r4
    88b6:	4298      	cmp	r0, r3
    88b8:	d112      	bne.n	88e0 <z_impl_net_addr_pton+0x40>
    88ba:	4635      	mov	r5, r6
    88bc:	2300      	movs	r3, #0
    88be:	3603      	adds	r6, #3
    88c0:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
    88c4:	4620      	mov	r0, r4
    88c6:	220a      	movs	r2, #10
    88c8:	a901      	add	r1, sp, #4
    88ca:	f00e ff65 	bl	17798 <strtol>

			src = ++endptr;
    88ce:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
    88d0:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
    88d4:	42ae      	cmp	r6, r5
			src = ++endptr;
    88d6:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
    88da:	d1f3      	bne.n	88c4 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
    88dc:	2000      	movs	r0, #0
    88de:	e009      	b.n	88f4 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
    88e0:	f813 2b01 	ldrb.w	r2, [r3], #1
    88e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    88e8:	2909      	cmp	r1, #9
    88ea:	d9e4      	bls.n	88b6 <z_impl_net_addr_pton+0x16>
    88ec:	2a2e      	cmp	r2, #46	; 0x2e
    88ee:	d0e2      	beq.n	88b6 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
    88f0:	f06f 0015 	mvn.w	r0, #21
}
    88f4:	b003      	add	sp, #12
    88f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
    88fa:	2802      	cmp	r0, #2
    88fc:	d1f8      	bne.n	88f0 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
    88fe:	212e      	movs	r1, #46	; 0x2e
    8900:	4620      	mov	r0, r4
    8902:	f00e fddb 	bl	174bc <strchr>
		if (*src == ':') {
    8906:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
    8908:	2800      	cmp	r0, #0
    890a:	bf0c      	ite	eq
    890c:	2708      	moveq	r7, #8
    890e:	2706      	movne	r7, #6
		if (*src == ':') {
    8910:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
    8912:	bf08      	it	eq
    8914:	3401      	addeq	r4, #1
		len = strlen(src);
    8916:	4620      	mov	r0, r4
    8918:	f00e fe38 	bl	1758c <strlen>
		for (i = 0; i < len; i++) {
    891c:	2200      	movs	r2, #0
    891e:	4943      	ldr	r1, [pc, #268]	; (8a2c <z_impl_net_addr_pton+0x18c>)
    8920:	4282      	cmp	r2, r0
    8922:	db23      	blt.n	896c <z_impl_net_addr_pton+0xcc>
		for (i = 0; i < expected_groups; i++) {
    8924:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
    8926:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
    8928:	7823      	ldrb	r3, [r4, #0]
    892a:	2b00      	cmp	r3, #0
    892c:	d0e0      	beq.n	88f0 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
    892e:	2b3a      	cmp	r3, #58	; 0x3a
    8930:	d041      	beq.n	89b6 <z_impl_net_addr_pton+0x116>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
    8932:	2210      	movs	r2, #16
    8934:	2100      	movs	r1, #0
    8936:	4620      	mov	r0, r4
    8938:	f00e ff2e 	bl	17798 <strtol>
    893c:	2210      	movs	r2, #16
    893e:	4681      	mov	r9, r0
    8940:	2100      	movs	r1, #0
    8942:	4620      	mov	r0, r4
    8944:	f00e ff28 	bl	17798 <strtol>
    8948:	f3c9 2907 	ubfx	r9, r9, #8, #8
    894c:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
    8950:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
    8954:	213a      	movs	r1, #58	; 0x3a
    8956:	4620      	mov	r0, r4
    8958:	f00e fdb0 	bl	174bc <strchr>
				if (src) {
    895c:	b1d8      	cbz	r0, 8996 <z_impl_net_addr_pton+0xf6>
					src++;
    895e:	1c44      	adds	r4, r0, #1
		for (i = 0; i < expected_groups; i++) {
    8960:	3501      	adds	r5, #1
    8962:	42af      	cmp	r7, r5
    8964:	dce0      	bgt.n	8928 <z_impl_net_addr_pton+0x88>
		if (expected_groups == 6) {
    8966:	2f06      	cmp	r7, #6
    8968:	d1b8      	bne.n	88dc <z_impl_net_addr_pton+0x3c>
    896a:	e03e      	b.n	89ea <z_impl_net_addr_pton+0x14a>
			if (!(src[i] >= '0' && src[i] <= '9') &&
    896c:	5ca3      	ldrb	r3, [r4, r2]
    896e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    8972:	2d09      	cmp	r5, #9
    8974:	d909      	bls.n	898a <z_impl_net_addr_pton+0xea>
    8976:	2b46      	cmp	r3, #70	; 0x46
    8978:	d809      	bhi.n	898e <z_impl_net_addr_pton+0xee>
    897a:	2b2d      	cmp	r3, #45	; 0x2d
    897c:	d9b8      	bls.n	88f0 <z_impl_net_addr_pton+0x50>
    897e:	3b2e      	subs	r3, #46	; 0x2e
    8980:	b2db      	uxtb	r3, r3
    8982:	fa21 f303 	lsr.w	r3, r1, r3
    8986:	07db      	lsls	r3, r3, #31
    8988:	d5b2      	bpl.n	88f0 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
    898a:	3201      	adds	r2, #1
    898c:	e7c8      	b.n	8920 <z_impl_net_addr_pton+0x80>
    898e:	3b61      	subs	r3, #97	; 0x61
    8990:	2b05      	cmp	r3, #5
    8992:	d9fa      	bls.n	898a <z_impl_net_addr_pton+0xea>
    8994:	e7ac      	b.n	88f0 <z_impl_net_addr_pton+0x50>
					if (i < expected_groups - 1) {
    8996:	1e7b      	subs	r3, r7, #1
    8998:	42ab      	cmp	r3, r5
    899a:	dca9      	bgt.n	88f0 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
    899c:	3501      	adds	r5, #1
    899e:	42bd      	cmp	r5, r7
    89a0:	dba6      	blt.n	88f0 <z_impl_net_addr_pton+0x50>
		if (expected_groups == 6) {
    89a2:	2f06      	cmp	r7, #6
    89a4:	d19a      	bne.n	88dc <z_impl_net_addr_pton+0x3c>
    89a6:	e7a3      	b.n	88f0 <z_impl_net_addr_pton+0x50>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
    89a8:	eb06 0345 	add.w	r3, r6, r5, lsl #1
    89ac:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
    89b0:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
    89b4:	3501      	adds	r5, #1
    89b6:	42bd      	cmp	r5, r7
    89b8:	dbf6      	blt.n	89a8 <z_impl_net_addr_pton+0x108>
			tmp = strrchr(src, ':');
    89ba:	213a      	movs	r1, #58	; 0x3a
    89bc:	4620      	mov	r0, r4
    89be:	f00e fe59 	bl	17674 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
    89c2:	42a0      	cmp	r0, r4
    89c4:	d129      	bne.n	8a1a <z_impl_net_addr_pton+0x17a>
    89c6:	2f06      	cmp	r7, #6
    89c8:	d00e      	beq.n	89e8 <z_impl_net_addr_pton+0x148>
    89ca:	7863      	ldrb	r3, [r4, #1]
    89cc:	2b00      	cmp	r3, #0
    89ce:	d085      	beq.n	88dc <z_impl_net_addr_pton+0x3c>
			i = expected_groups - 1;
    89d0:	1e7d      	subs	r5, r7, #1
    89d2:	3001      	adds	r0, #1
				if (*tmp == ':') {
    89d4:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    89d8:	2b3a      	cmp	r3, #58	; 0x3a
    89da:	d101      	bne.n	89e0 <z_impl_net_addr_pton+0x140>
				if (i < 0) {
    89dc:	3d01      	subs	r5, #1
    89de:	d387      	bcc.n	88f0 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
    89e0:	4284      	cmp	r4, r0
    89e2:	d1f7      	bne.n	89d4 <z_impl_net_addr_pton+0x134>
			src++;
    89e4:	3401      	adds	r4, #1
    89e6:	e7bb      	b.n	8960 <z_impl_net_addr_pton+0xc0>
				src++;
    89e8:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
    89ea:	2500      	movs	r5, #0
    89ec:	360b      	adds	r6, #11
				if (!src || !*src) {
    89ee:	7823      	ldrb	r3, [r4, #0]
    89f0:	2b00      	cmp	r3, #0
    89f2:	f43f af7d 	beq.w	88f0 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
    89f6:	2100      	movs	r1, #0
    89f8:	220a      	movs	r2, #10
    89fa:	4620      	mov	r0, r4
    89fc:	f00e fecc 	bl	17798 <strtol>
				src = strchr(src, '.');
    8a00:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
    8a02:	f806 0f01 	strb.w	r0, [r6, #1]!
				src = strchr(src, '.');
    8a06:	4620      	mov	r0, r4
    8a08:	f00e fd58 	bl	174bc <strchr>
				if (src) {
    8a0c:	b150      	cbz	r0, 8a24 <z_impl_net_addr_pton+0x184>
			for (i = 0; i < 4; i++) {
    8a0e:	3501      	adds	r5, #1
    8a10:	2d04      	cmp	r5, #4
					src++;
    8a12:	f100 0401 	add.w	r4, r0, #1
			for (i = 0; i < 4; i++) {
    8a16:	d1ea      	bne.n	89ee <z_impl_net_addr_pton+0x14e>
    8a18:	e760      	b.n	88dc <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
    8a1a:	2f06      	cmp	r7, #6
				tmp--;
    8a1c:	bf08      	it	eq
    8a1e:	f100 30ff 	addeq.w	r0, r0, #4294967295
    8a22:	e7d5      	b.n	89d0 <z_impl_net_addr_pton+0x130>
					if (i < 3) {
    8a24:	2d03      	cmp	r5, #3
    8a26:	f47f af63 	bne.w	88f0 <z_impl_net_addr_pton+0x50>
    8a2a:	e757      	b.n	88dc <z_impl_net_addr_pton+0x3c>
    8a2c:	01f81001 	.word	0x01f81001

00008a30 <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
    8a30:	4800      	ldr	r0, [pc, #0]	; (8a34 <net_ipv4_unspecified_address+0x4>)
    8a32:	4770      	bx	lr
    8a34:	0002508c 	.word	0x0002508c

00008a38 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
    8a38:	4800      	ldr	r0, [pc, #0]	; (8a3c <net_ipv4_broadcast_address+0x4>)
    8a3a:	4770      	bx	lr
    8a3c:	00025088 	.word	0x00025088

00008a40 <mgmt_thread>:
	log_stack_usage(&mgmt_thread_data);
#endif
}

static void mgmt_thread(void)
{
    8a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
    8a44:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8b20 <mgmt_thread+0xe0>
	return z_impl_k_mutex_lock(mutex, timeout);
    8a48:	4f36      	ldr	r7, [pc, #216]	; (8b24 <mgmt_thread+0xe4>)
    8a4a:	b093      	sub	sp, #76	; 0x4c
	return z_impl_k_msgq_get(msgq, data, timeout);
    8a4c:	f10d 0804 	add.w	r8, sp, #4
    8a50:	f04f 32ff 	mov.w	r2, #4294967295
    8a54:	f04f 33ff 	mov.w	r3, #4294967295
    8a58:	4641      	mov	r1, r8
    8a5a:	4648      	mov	r0, r9
    8a5c:	f00c fe30 	bl	156c0 <z_impl_k_msgq_get>
	} while (k_msgq_get(&event_msgq, dst, K_FOREVER) != 0);
    8a60:	4605      	mov	r5, r0
    8a62:	2800      	cmp	r0, #0
    8a64:	d1f4      	bne.n	8a50 <mgmt_thread+0x10>
	return list->head;
    8a66:	4e30      	ldr	r6, [pc, #192]	; (8b28 <mgmt_thread+0xe8>)
	return z_impl_k_mutex_lock(mutex, timeout);
    8a68:	f04f 32ff 	mov.w	r2, #4294967295
    8a6c:	f04f 33ff 	mov.w	r3, #4294967295
    8a70:	4638      	mov	r0, r7
    8a72:	f00c fe7f 	bl	15774 <z_impl_k_mutex_lock>
    8a76:	6834      	ldr	r4, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    8a78:	b11c      	cbz	r4, 8a82 <mgmt_thread+0x42>
	parent->next = child;
    8a7a:	46aa      	mov	sl, r5
	return node->next;
    8a7c:	f8d4 b000 	ldr.w	fp, [r4]
    8a80:	b92c      	cbnz	r4, 8a8e <mgmt_thread+0x4e>
		/* take the lock to prevent changes to the callback structure during use */
		(void)k_mutex_lock(&net_mgmt_callback_lock, K_FOREVER);

		mgmt_run_callbacks(&mgmt_event);

		(void)k_mutex_unlock(&net_mgmt_callback_lock);
    8a82:	4638      	mov	r0, r7
    8a84:	f018 f977 	bl	20d76 <k_mutex_unlock.isra.0>
	z_impl_k_yield();
    8a88:	f00d fbce 	bl	16228 <z_impl_k_yield>
	while (1) {
    8a8c:	e7de      	b.n	8a4c <mgmt_thread+0xc>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
    8a8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
    8a90:	6922      	ldr	r2, [r4, #16]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
    8a92:	ea83 0102 	eor.w	r1, r3, r2
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
    8a96:	ea83 0002 	eor.w	r0, r3, r2
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
    8a9a:	f3c1 7101 	ubfx	r1, r1, #28, #2
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
    8a9e:	f3c0 400a 	ubfx	r0, r0, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
    8aa2:	4301      	orrs	r1, r0
    8aa4:	d124      	bne.n	8af0 <mgmt_thread+0xb0>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
    8aa6:	b299      	uxth	r1, r3
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
    8aa8:	b121      	cbz	r1, 8ab4 <mgmt_thread+0x74>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
    8aaa:	b291      	uxth	r1, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
    8aac:	b111      	cbz	r1, 8ab4 <mgmt_thread+0x74>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
    8aae:	4013      	ands	r3, r2
    8ab0:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
    8ab2:	b1eb      	cbz	r3, 8af0 <mgmt_thread+0xb0>
		if (mgmt_event->info_length) {
    8ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ab6:	b31b      	cbz	r3, 8b00 <mgmt_thread+0xc0>
			cb->info = (void *)mgmt_event->info;
    8ab8:	f8c4 8008 	str.w	r8, [r4, #8]
			cb->info_length = mgmt_event->info_length;
    8abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
    8abe:	0112      	lsls	r2, r2, #4
			cb->info_length = mgmt_event->info_length;
    8ac0:	60e3      	str	r3, [r4, #12]
			struct mgmt_event_wait *sync_data =
    8ac2:	6863      	ldr	r3, [r4, #4]
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
    8ac4:	d524      	bpl.n	8b10 <mgmt_thread+0xd0>
			if (sync_data->iface &&
    8ac6:	6999      	ldr	r1, [r3, #24]
    8ac8:	b111      	cbz	r1, 8ad0 <mgmt_thread+0x90>
    8aca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8acc:	4291      	cmp	r1, r2
    8ace:	d10f      	bne.n	8af0 <mgmt_thread+0xb0>
			cb->raised_event = mgmt_event->event;
    8ad0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8ad2:	6122      	str	r2, [r4, #16]
			sync_data->iface = mgmt_event->iface;
    8ad4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8ad6:	619a      	str	r2, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
    8ad8:	6822      	ldr	r2, [r4, #0]
    8ada:	b99d      	cbnz	r5, 8b04 <mgmt_thread+0xc4>
    8adc:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    8ade:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    8ae0:	429c      	cmp	r4, r3
    8ae2:	d100      	bne.n	8ae6 <mgmt_thread+0xa6>
	list->tail = node;
    8ae4:	6072      	str	r2, [r6, #4]
			k_sem_give(cb->sync_call);
    8ae6:	6860      	ldr	r0, [r4, #4]
	parent->next = child;
    8ae8:	f8c4 a000 	str.w	sl, [r4]
	z_impl_k_sem_give(sem);
    8aec:	f00c ff2c 	bl	15948 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    8af0:	f1bb 0f00 	cmp.w	fp, #0
    8af4:	d012      	beq.n	8b1c <mgmt_thread+0xdc>
	return node->next;
    8af6:	f8db 3000 	ldr.w	r3, [fp]
    8afa:	465c      	mov	r4, fp
    8afc:	469b      	mov	fp, r3
    8afe:	e7bf      	b.n	8a80 <mgmt_thread+0x40>
			cb->info = NULL;
    8b00:	60a3      	str	r3, [r4, #8]
			cb->info_length = 0;
    8b02:	e7dc      	b.n	8abe <mgmt_thread+0x7e>
	parent->next = child;
    8b04:	602a      	str	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    8b06:	6873      	ldr	r3, [r6, #4]
    8b08:	429c      	cmp	r4, r3
	list->tail = node;
    8b0a:	bf08      	it	eq
    8b0c:	6075      	streq	r5, [r6, #4]
}
    8b0e:	e7ea      	b.n	8ae6 <mgmt_thread+0xa6>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
    8b10:	4620      	mov	r0, r4
    8b12:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    8b16:	4798      	blx	r3
			prev = &cb->node;
    8b18:	4625      	mov	r5, r4
    8b1a:	e7e9      	b.n	8af0 <mgmt_thread+0xb0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    8b1c:	465b      	mov	r3, fp
    8b1e:	e7ec      	b.n	8afa <mgmt_thread+0xba>
    8b20:	200012ec 	.word	0x200012ec
    8b24:	20001274 	.word	0x20001274
    8b28:	20003108 	.word	0x20003108

00008b2c <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
    8b2c:	b510      	push	{r4, lr}
    8b2e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    8b30:	f04f 32ff 	mov.w	r2, #4294967295
    8b34:	f04f 33ff 	mov.w	r3, #4294967295
    8b38:	4809      	ldr	r0, [pc, #36]	; (8b60 <net_mgmt_add_event_callback+0x34>)
    8b3a:	f00c fe1b 	bl	15774 <z_impl_k_mutex_lock>
	return list->head;
    8b3e:	4b09      	ldr	r3, [pc, #36]	; (8b64 <net_mgmt_add_event_callback+0x38>)
    8b40:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    8b42:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    8b44:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    8b46:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    8b48:	b902      	cbnz	r2, 8b4c <net_mgmt_add_event_callback+0x20>
	list->tail = node;
    8b4a:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
    8b4c:	4a06      	ldr	r2, [pc, #24]	; (8b68 <net_mgmt_add_event_callback+0x3c>)
    8b4e:	6923      	ldr	r3, [r4, #16]
    8b50:	6811      	ldr	r1, [r2, #0]

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	(void)k_mutex_unlock(&net_mgmt_callback_lock);
    8b52:	4803      	ldr	r0, [pc, #12]	; (8b60 <net_mgmt_add_event_callback+0x34>)
	global_event_mask |= event_mask;
    8b54:	430b      	orrs	r3, r1
    8b56:	6013      	str	r3, [r2, #0]
}
    8b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)k_mutex_unlock(&net_mgmt_callback_lock);
    8b5c:	f018 b90b 	b.w	20d76 <k_mutex_unlock.isra.0>
    8b60:	20001274 	.word	0x20001274
    8b64:	20003108 	.word	0x20003108
    8b68:	20003110 	.word	0x20003110

00008b6c <net_mgmt_del_event_callback>:

void net_mgmt_del_event_callback(struct net_mgmt_event_callback *cb)
{
    8b6c:	b510      	push	{r4, lr}
    8b6e:	4604      	mov	r4, r0
    8b70:	f04f 32ff 	mov.w	r2, #4294967295
    8b74:	f04f 33ff 	mov.w	r3, #4294967295
    8b78:	481b      	ldr	r0, [pc, #108]	; (8be8 <net_mgmt_del_event_callback+0x7c>)
    8b7a:	f00c fdfb 	bl	15774 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8b7e:	2100      	movs	r1, #0
	return list->head;
    8b80:	4b1a      	ldr	r3, [pc, #104]	; (8bec <net_mgmt_del_event_callback+0x80>)
    8b82:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8b84:	b152      	cbz	r2, 8b9c <net_mgmt_del_event_callback+0x30>
    8b86:	4294      	cmp	r4, r2
    8b88:	d11e      	bne.n	8bc8 <net_mgmt_del_event_callback+0x5c>
	return node->next;
    8b8a:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    8b8c:	b9b1      	cbnz	r1, 8bbc <net_mgmt_del_event_callback+0x50>
    8b8e:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    8b90:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    8b92:	428c      	cmp	r4, r1
    8b94:	d100      	bne.n	8b98 <net_mgmt_del_event_callback+0x2c>
	list->tail = node;
    8b96:	605a      	str	r2, [r3, #4]
	parent->next = child;
    8b98:	2200      	movs	r2, #0
    8b9a:	6022      	str	r2, [r4, #0]
	global_event_mask = 0U;
    8b9c:	2200      	movs	r2, #0
    8b9e:	4c14      	ldr	r4, [pc, #80]	; (8bf0 <net_mgmt_del_event_callback+0x84>)
	return list->head;
    8ba0:	681b      	ldr	r3, [r3, #0]
    8ba2:	6022      	str	r2, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    8ba4:	b19b      	cbz	r3, 8bce <net_mgmt_del_event_callback+0x62>
	return node->next;
    8ba6:	681a      	ldr	r2, [r3, #0]
    8ba8:	2000      	movs	r0, #0
    8baa:	4601      	mov	r1, r0
    8bac:	b98b      	cbnz	r3, 8bd2 <net_mgmt_del_event_callback+0x66>
    8bae:	b100      	cbz	r0, 8bb2 <net_mgmt_del_event_callback+0x46>
    8bb0:	6021      	str	r1, [r4, #0]

	sys_slist_find_and_remove(&event_callbacks, &cb->node);

	mgmt_rebuild_global_event_mask();

	(void)k_mutex_unlock(&net_mgmt_callback_lock);
    8bb2:	480d      	ldr	r0, [pc, #52]	; (8be8 <net_mgmt_del_event_callback+0x7c>)
}
    8bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)k_mutex_unlock(&net_mgmt_callback_lock);
    8bb8:	f018 b8dd 	b.w	20d76 <k_mutex_unlock.isra.0>
	parent->next = child;
    8bbc:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    8bbe:	685a      	ldr	r2, [r3, #4]
    8bc0:	4294      	cmp	r4, r2
	list->tail = node;
    8bc2:	bf08      	it	eq
    8bc4:	6059      	streq	r1, [r3, #4]
}
    8bc6:	e7e7      	b.n	8b98 <net_mgmt_del_event_callback+0x2c>
	return node->next;
    8bc8:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8bca:	6812      	ldr	r2, [r2, #0]
    8bcc:	e7da      	b.n	8b84 <net_mgmt_del_event_callback+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    8bce:	461a      	mov	r2, r3
    8bd0:	e7ea      	b.n	8ba8 <net_mgmt_del_event_callback+0x3c>
	global_event_mask |= event_mask;
    8bd2:	691b      	ldr	r3, [r3, #16]
    8bd4:	4319      	orrs	r1, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
    8bd6:	b122      	cbz	r2, 8be2 <net_mgmt_del_event_callback+0x76>
	return node->next;
    8bd8:	6810      	ldr	r0, [r2, #0]
    8bda:	4613      	mov	r3, r2
    8bdc:	4602      	mov	r2, r0
    8bde:	2001      	movs	r0, #1
    8be0:	e7e4      	b.n	8bac <net_mgmt_del_event_callback+0x40>
    8be2:	4610      	mov	r0, r2
    8be4:	e7f9      	b.n	8bda <net_mgmt_del_event_callback+0x6e>
    8be6:	bf00      	nop
    8be8:	20001274 	.word	0x20001274
    8bec:	20003108 	.word	0x20003108
    8bf0:	20003110 	.word	0x20003110

00008bf4 <net_mgmt_event_notify_with_info>:

void net_mgmt_event_notify_with_info(uint32_t mgmt_event, struct net_if *iface,
				     const void *info, size_t length)
{
    8bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8bf8:	4605      	mov	r5, r0
    8bfa:	461e      	mov	r6, r3
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
    8bfc:	4b31      	ldr	r3, [pc, #196]	; (8cc4 <net_mgmt_event_notify_with_info+0xd0>)
	return (((NET_MGMT_GET_LAYER(mgmt_event) &
    8bfe:	0f2c      	lsrs	r4, r5, #28
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
    8c00:	6818      	ldr	r0, [r3, #0]
		((NET_MGMT_GET_LAYER_CODE(mgmt_event) &
    8c02:	0c2b      	lsrs	r3, r5, #16
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
    8c04:	ea24 7410 	bic.w	r4, r4, r0, lsr #28
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
    8c08:	ea23 4310 	bic.w	r3, r3, r0, lsr #16
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
    8c0c:	f004 0403 	and.w	r4, r4, #3
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
    8c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
    8c14:	ea25 0000 	bic.w	r0, r5, r0
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
    8c18:	431c      	orrs	r4, r3
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
    8c1a:	b280      	uxth	r0, r0
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
    8c1c:	4304      	orrs	r4, r0
{
    8c1e:	4689      	mov	r9, r1
    8c20:	4690      	mov	r8, r2
    8c22:	af00      	add	r7, sp, #0
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
    8c24:	d14a      	bne.n	8cbc <net_mgmt_event_notify_with_info+0xc8>
    8c26:	f04f 32ff 	mov.w	r2, #4294967295
    8c2a:	f04f 33ff 	mov.w	r3, #4294967295
    8c2e:	4826      	ldr	r0, [pc, #152]	; (8cc8 <net_mgmt_event_notify_with_info+0xd4>)
    8c30:	f00c fda0 	bl	15774 <z_impl_k_mutex_lock>
	memset(&new_event, 0, sizeof(struct mgmt_event_entry));
    8c34:	4b25      	ldr	r3, [pc, #148]	; (8ccc <net_mgmt_event_notify_with_info+0xd8>)
    8c36:	2244      	movs	r2, #68	; 0x44
    8c38:	4618      	mov	r0, r3
    8c3a:	4621      	mov	r1, r4
    8c3c:	f00e fbcc 	bl	173d8 <memset>
    8c40:	4603      	mov	r3, r0
	if (info && length) {
    8c42:	f1b8 0f00 	cmp.w	r8, #0
    8c46:	d008      	beq.n	8c5a <net_mgmt_event_notify_with_info+0x66>
    8c48:	b13e      	cbz	r6, 8c5a <net_mgmt_event_notify_with_info+0x66>
		if (length <= NET_EVENT_INFO_MAX_SIZE) {
    8c4a:	2e38      	cmp	r6, #56	; 0x38
    8c4c:	d820      	bhi.n	8c90 <net_mgmt_event_notify_with_info+0x9c>
			memcpy(new_event.info, info, length);
    8c4e:	4632      	mov	r2, r6
    8c50:	4641      	mov	r1, r8
    8c52:	f7f7 ff7f 	bl	b54 <memcpy>
    8c56:	4603      	mov	r3, r0
			new_event.info_length = length;
    8c58:	6386      	str	r6, [r0, #56]	; 0x38
	new_event.iface = iface;
    8c5a:	e9c3 590f 	strd	r5, r9, [r3, #60]	; 0x3c
	return z_impl_k_msgq_put(msgq, data, timeout);
    8c5e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    8c62:	2300      	movs	r3, #0
    8c64:	4919      	ldr	r1, [pc, #100]	; (8ccc <net_mgmt_event_notify_with_info+0xd8>)
    8c66:	481a      	ldr	r0, [pc, #104]	; (8cd0 <net_mgmt_event_notify_with_info+0xdc>)
    8c68:	f00c fcd2 	bl	15610 <z_impl_k_msgq_put>
	if (k_msgq_put(&event_msgq, &new_event,
    8c6c:	b318      	cbz	r0, 8cb6 <net_mgmt_event_notify_with_info+0xc2>
		NET_WARN("Failure to push event (%u), "
    8c6e:	466c      	mov	r4, sp
    8c70:	b088      	sub	sp, #32
    8c72:	466a      	mov	r2, sp
    8c74:	4b17      	ldr	r3, [pc, #92]	; (8cd4 <net_mgmt_event_notify_with_info+0xe0>)
    8c76:	e9c2 3505 	strd	r3, r5, [r2, #20]
    8c7a:	2303      	movs	r3, #3
    8c7c:	f842 3f10 	str.w	r3, [r2, #16]!
    8c80:	2300      	movs	r3, #0
    8c82:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8c86:	4814      	ldr	r0, [pc, #80]	; (8cd8 <net_mgmt_event_notify_with_info+0xe4>)
    8c88:	f7fc f8fc 	bl	4e84 <z_impl_z_log_msg_static_create>
    8c8c:	46a5      	mov	sp, r4
    8c8e:	e012      	b.n	8cb6 <net_mgmt_event_notify_with_info+0xc2>
			NET_ERR("Event %u info length %zu > max size %zu",
    8c90:	46e8      	mov	r8, sp
    8c92:	b08a      	sub	sp, #40	; 0x28
    8c94:	466a      	mov	r2, sp
    8c96:	4b11      	ldr	r3, [pc, #68]	; (8cdc <net_mgmt_event_notify_with_info+0xe8>)
    8c98:	61d6      	str	r6, [r2, #28]
    8c9a:	e9c2 3505 	strd	r3, r5, [r2, #20]
    8c9e:	2338      	movs	r3, #56	; 0x38
    8ca0:	6213      	str	r3, [r2, #32]
    8ca2:	2305      	movs	r3, #5
    8ca4:	f842 3f10 	str.w	r3, [r2, #16]!
    8ca8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    8cac:	4623      	mov	r3, r4
    8cae:	480a      	ldr	r0, [pc, #40]	; (8cd8 <net_mgmt_event_notify_with_info+0xe4>)
    8cb0:	f7fc f8e8 	bl	4e84 <z_impl_z_log_msg_static_create>
    8cb4:	46c5      	mov	sp, r8
	(void)k_mutex_unlock(&net_mgmt_event_lock);
    8cb6:	4804      	ldr	r0, [pc, #16]	; (8cc8 <net_mgmt_event_notify_with_info+0xd4>)
    8cb8:	f018 f85d 	bl	20d76 <k_mutex_unlock.isra.0>
			NET_MGMT_GET_LAYER_CODE(mgmt_event),
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
	}
}
    8cbc:	46bd      	mov	sp, r7
    8cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8cc2:	bf00      	nop
    8cc4:	20003110 	.word	0x20003110
    8cc8:	20001288 	.word	0x20001288
    8ccc:	200030c4 	.word	0x200030c4
    8cd0:	200012ec 	.word	0x200012ec
    8cd4:	00032d21 	.word	0x00032d21
    8cd8:	00024d20 	.word	0x00024d20
    8cdc:	00032cf9 	.word	0x00032cf9

00008ce0 <net_mgmt_event_init>:
				    raised_event, NULL, info, info_length,
				    timeout);
}

void net_mgmt_event_init(void)
{
    8ce0:	b510      	push	{r4, lr}
    8ce2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8ce4:	2200      	movs	r2, #0
    8ce6:	2300      	movs	r3, #0
    8ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8cec:	2300      	movs	r3, #0
    8cee:	f04f 32ff 	mov.w	r2, #4294967295
    8cf2:	4c0a      	ldr	r4, [pc, #40]	; (8d1c <net_mgmt_event_init+0x3c>)
    8cf4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    8cf8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    8cfc:	9300      	str	r3, [sp, #0]
    8cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8d02:	4620      	mov	r0, r4
    8d04:	4b06      	ldr	r3, [pc, #24]	; (8d20 <net_mgmt_event_init+0x40>)
    8d06:	4907      	ldr	r1, [pc, #28]	; (8d24 <net_mgmt_event_init+0x44>)
    8d08:	f00c fbde 	bl	154c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    8d0c:	4620      	mov	r0, r4
    8d0e:	4906      	ldr	r1, [pc, #24]	; (8d28 <net_mgmt_event_init+0x48>)
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
    8d10:	b008      	add	sp, #32
    8d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d16:	f01b b88d 	b.w	23e34 <z_impl_k_thread_name_set>
    8d1a:	bf00      	nop
    8d1c:	20002378 	.word	0x20002378
    8d20:	00008a41 	.word	0x00008a41
    8d24:	20008a50 	.word	0x20008a50
    8d28:	00032b7b 	.word	0x00032b7b

00008d2c <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol proto,
			   uint16_t local_port,
			   const struct sockaddr *local_addr)

{
    8d2c:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    8d2e:	2400      	movs	r4, #0
    8d30:	4b0f      	ldr	r3, [pc, #60]	; (8d70 <check_used_port+0x44>)
	return context->flags & NET_CONTEXT_IN_USE;
    8d32:	f8b3 5090 	ldrh.w	r5, [r3, #144]	; 0x90
		if (!net_context_is_used(&contexts[i])) {
    8d36:	07ed      	lsls	r5, r5, #31
    8d38:	d50f      	bpl.n	8d5a <check_used_port+0x2e>
			continue;
		}

		if (!(net_context_get_proto(&contexts[i]) == proto &&
    8d3a:	f8b3 508e 	ldrh.w	r5, [r3, #142]	; 0x8e
    8d3e:	4285      	cmp	r5, r0
    8d40:	d10b      	bne.n	8d5a <check_used_port+0x2e>
    8d42:	8c5d      	ldrh	r5, [r3, #34]	; 0x22
    8d44:	428d      	cmp	r5, r1
    8d46:	d108      	bne.n	8d5a <check_used_port+0x2e>
							     sin6_addr,
				    &((struct sockaddr_in6 *)
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    8d48:	8815      	ldrh	r5, [r2, #0]
    8d4a:	2d01      	cmp	r5, #1
    8d4c:	d105      	bne.n	8d5a <check_used_port+0x2e>
			   local_addr->sa_family == AF_INET) {
			if (net_sin_ptr(&contexts[i].local)->sin_addr == NULL) {
    8d4e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    8d50:	b11d      	cbz	r5, 8d5a <check_used_port+0x2e>
    8d52:	6856      	ldr	r6, [r2, #4]
    8d54:	682d      	ldr	r5, [r5, #0]
				continue;
			}

			if (net_ipv4_addr_cmp(
    8d56:	42ae      	cmp	r6, r5
    8d58:	d006      	beq.n	8d68 <check_used_port+0x3c>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    8d5a:	3401      	adds	r4, #1
    8d5c:	2c0a      	cmp	r4, #10
    8d5e:	f103 0394 	add.w	r3, r3, #148	; 0x94
    8d62:	d1e6      	bne.n	8d32 <check_used_port+0x6>
				return -EEXIST;
			}
		}
	}

	return 0;
    8d64:	2000      	movs	r0, #0
}
    8d66:	bd70      	pop	{r4, r5, r6, pc}
				return -EEXIST;
    8d68:	f06f 0010 	mvn.w	r0, #16
    8d6c:	e7fb      	b.n	8d66 <check_used_port+0x3a>
    8d6e:	bf00      	nop
    8d70:	2000312c 	.word	0x2000312c

00008d74 <find_available_port>:

static uint16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
    8d74:	b570      	push	{r4, r5, r6, lr}
    8d76:	4604      	mov	r4, r0
    8d78:	460d      	mov	r5, r1
	uint16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
    8d7a:	4e08      	ldr	r6, [pc, #32]	; (8d9c <find_available_port+0x28>)
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    8d7c:	f7fe fa84 	bl	7288 <z_impl_sys_rand32_get>
    8d80:	ea40 0306 	orr.w	r3, r0, r6
    8d84:	ba5b      	rev16	r3, r3
	} while (check_used_port(net_context_get_proto(context),
    8d86:	462a      	mov	r2, r5
    8d88:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    8d8c:	b299      	uxth	r1, r3
    8d8e:	f7ff ffcd 	bl	8d2c <check_used_port>
				 htons(local_port), addr) == -EEXIST);
    8d92:	3011      	adds	r0, #17
    8d94:	d0f2      	beq.n	8d7c <find_available_port+0x8>

	return htons(local_port);
}
    8d96:	4608      	mov	r0, r1
    8d98:	bd70      	pop	{r4, r5, r6, pc}
    8d9a:	bf00      	nop
    8d9c:	ffff8000 	.word	0xffff8000

00008da0 <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
    8da0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8da4:	4c29      	ldr	r4, [pc, #164]	; (8e4c <net_context_packet_received+0xac>)
    8da6:	460e      	mov	r6, r1
    8da8:	4617      	mov	r7, r2
    8daa:	4698      	mov	r8, r3
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    8dac:	2500      	movs	r5, #0
    8dae:	46a2      	mov	sl, r4
    8db0:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
		if (!net_context_is_used(&contexts[i])) {
    8db4:	07db      	lsls	r3, r3, #31
    8db6:	d521      	bpl.n	8dfc <net_context_packet_received+0x5c>
		if (contexts[i].conn_handler == conn_handler) {
    8db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8dba:	4298      	cmp	r0, r3
    8dbc:	d11e      	bne.n	8dfc <net_context_packet_received+0x5c>
			return &contexts[i];
    8dbe:	2394      	movs	r3, #148	; 0x94
    8dc0:	435d      	muls	r5, r3
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
	NET_ASSERT(net_pkt_iface(pkt));

	k_mutex_lock(&context->lock, K_FOREVER);
    8dc2:	f105 040c 	add.w	r4, r5, #12
    8dc6:	4454      	add	r4, sl
    8dc8:	f04f 33ff 	mov.w	r3, #4294967295
    8dcc:	f04f 32ff 	mov.w	r2, #4294967295
    8dd0:	4620      	mov	r0, r4
    8dd2:	f017 ffff 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
    8dd6:	69b0      	ldr	r0, [r6, #24]
    8dd8:	f7ff fb3e 	bl	8458 <net_if_get_by_iface>
			return &contexts[i];
    8ddc:	eb0a 0905 	add.w	r9, sl, r5
    8de0:	f889 0092 	strb.w	r0, [r9, #146]	; 0x92
	pkt->context = ctx;
    8de4:	f8c6 9014 	str.w	r9, [r6, #20]
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
    8de8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    8dec:	b9cb      	cbnz	r3, 8e22 <net_context_packet_received+0x82>
	verdict = NET_OK;

	return verdict;

unlock:
	k_mutex_unlock(&context->lock);
    8dee:	4620      	mov	r0, r4
    8df0:	f017 fff2 	bl	20dd8 <k_mutex_unlock.isra.0>

	return verdict;
    8df4:	2002      	movs	r0, #2
}
    8df6:	b002      	add	sp, #8
    8df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    8dfc:	3501      	adds	r5, #1
    8dfe:	2d0a      	cmp	r5, #10
    8e00:	f104 0494 	add.w	r4, r4, #148	; 0x94
    8e04:	d1d4      	bne.n	8db0 <net_context_packet_received+0x10>
	k_mutex_lock(&context->lock, K_FOREVER);
    8e06:	f04f 32ff 	mov.w	r2, #4294967295
    8e0a:	f04f 33ff 	mov.w	r3, #4294967295
    8e0e:	200c      	movs	r0, #12
    8e10:	f017 ffe0 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
    8e14:	69b0      	ldr	r0, [r6, #24]
    8e16:	f7ff fb1f 	bl	8458 <net_if_get_by_iface>
    8e1a:	2300      	movs	r3, #0
    8e1c:	f883 3092 	strb.w	r3, [r3, #146]	; 0x92
    8e20:	deff      	udf	#255	; 0xff
	k_sem_give(&context->recv_data_wait);
    8e22:	f105 004c 	add.w	r0, r5, #76	; 0x4c
	z_impl_k_sem_give(sem);
    8e26:	4450      	add	r0, sl
    8e28:	f00c fd8e 	bl	15948 <z_impl_k_sem_give>
	k_mutex_unlock(&context->lock);
    8e2c:	4620      	mov	r0, r4
	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
    8e2e:	2400      	movs	r4, #0
	k_mutex_unlock(&context->lock);
    8e30:	f017 ffd2 	bl	20dd8 <k_mutex_unlock.isra.0>
	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
    8e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e36:	9400      	str	r4, [sp, #0]
    8e38:	9301      	str	r3, [sp, #4]
    8e3a:	4648      	mov	r0, r9
    8e3c:	4643      	mov	r3, r8
    8e3e:	463a      	mov	r2, r7
    8e40:	4631      	mov	r1, r6
    8e42:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
    8e46:	47a8      	blx	r5
	return verdict;
    8e48:	4620      	mov	r0, r4
    8e4a:	e7d4      	b.n	8df6 <net_context_packet_received+0x56>
    8e4c:	2000312c 	.word	0x2000312c

00008e50 <net_context_get>:
	switch (family) {
    8e50:	2802      	cmp	r0, #2
{
    8e52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e56:	468a      	mov	sl, r1
    8e58:	4614      	mov	r4, r2
    8e5a:	4698      	mov	r8, r3
	switch (family) {
    8e5c:	d805      	bhi.n	8e6a <net_context_get+0x1a>
    8e5e:	b960      	cbnz	r0, 8e7a <net_context_get+0x2a>
    8e60:	f06f 0469 	mvn.w	r4, #105	; 0x69
}
    8e64:	4620      	mov	r0, r4
    8e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (family) {
    8e6a:	3803      	subs	r0, #3
			return -EPFNOSUPPORT;
    8e6c:	2801      	cmp	r0, #1
    8e6e:	bf8c      	ite	hi
    8e70:	f06f 0469 	mvnhi.w	r4, #105	; 0x69
    8e74:	f06f 045f 	mvnls.w	r4, #95	; 0x5f
    8e78:	e7f4      	b.n	8e64 <net_context_get+0x14>
		if (family == AF_INET6 && !IS_ENABLED(CONFIG_NET_IPV6)) {
    8e7a:	2802      	cmp	r0, #2
    8e7c:	f000 8091 	beq.w	8fa2 <net_context_get+0x152>
		switch (type) {
    8e80:	2902      	cmp	r1, #2
    8e82:	d006      	beq.n	8e92 <net_context_get+0x42>
    8e84:	2903      	cmp	r1, #3
    8e86:	d007      	beq.n	8e98 <net_context_get+0x48>
    8e88:	2901      	cmp	r1, #1
    8e8a:	d023      	beq.n	8ed4 <net_context_get+0x84>
    8e8c:	f06f 046a 	mvn.w	r4, #106	; 0x6a
    8e90:	e7e8      	b.n	8e64 <net_context_get+0x14>
			if (proto != IPPROTO_UDP) {
    8e92:	2a11      	cmp	r2, #17
			if (proto != IPPROTO_TCP) {
    8e94:	f040 8088 	bne.w	8fa8 <net_context_get+0x158>
	if (!context) {
    8e98:	f1b8 0f00 	cmp.w	r8, #0
    8e9c:	f000 8087 	beq.w	8fae <net_context_get+0x15e>
	return z_impl_k_sem_take(sem, timeout);
    8ea0:	f04f 33ff 	mov.w	r3, #4294967295
    8ea4:	f04f 32ff 	mov.w	r2, #4294967295
    8ea8:	4842      	ldr	r0, [pc, #264]	; (8fb4 <net_context_get+0x164>)
    8eaa:	f00c fd73 	bl	15994 <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    8eae:	4b42      	ldr	r3, [pc, #264]	; (8fb8 <net_context_get+0x168>)
    8eb0:	2500      	movs	r5, #0
    8eb2:	461e      	mov	r6, r3
	return context->flags & NET_CONTEXT_IN_USE;
    8eb4:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
		if (net_context_is_used(&contexts[i])) {
    8eb8:	f011 0101 	ands.w	r1, r1, #1
    8ebc:	d00c      	beq.n	8ed8 <net_context_get+0x88>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
    8ebe:	3501      	adds	r5, #1
    8ec0:	2d0a      	cmp	r5, #10
    8ec2:	f103 0394 	add.w	r3, r3, #148	; 0x94
    8ec6:	d1f5      	bne.n	8eb4 <net_context_get+0x64>
	ret = -ENOENT;
    8ec8:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
    8ecc:	4839      	ldr	r0, [pc, #228]	; (8fb4 <net_context_get+0x164>)
    8ece:	f00c fd3b 	bl	15948 <z_impl_k_sem_give>
}
    8ed2:	e7c7      	b.n	8e64 <net_context_get+0x14>
			if (proto != IPPROTO_TCP) {
    8ed4:	2a06      	cmp	r2, #6
    8ed6:	e7dd      	b.n	8e94 <net_context_get+0x44>
		memset(&contexts[i], 0, sizeof(contexts[i]));
    8ed8:	2294      	movs	r2, #148	; 0x94
    8eda:	fb02 f705 	mul.w	r7, r2, r5
    8ede:	eb06 0907 	add.w	r9, r6, r7
    8ee2:	4648      	mov	r0, r9
    8ee4:	f00e fa78 	bl	173d8 <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
    8ee8:	f7ff f838 	bl	7f5c <net_if_get_default>
			&& proto == IPPROTO_TCP) {
    8eec:	2c06      	cmp	r4, #6
    8eee:	d04c      	beq.n	8f8a <net_context_get+0x13a>
		contexts[i].iface = -1;
    8ef0:	2094      	movs	r0, #148	; 0x94
    8ef2:	23ff      	movs	r3, #255	; 0xff
		contexts[i].flags = 0U;
    8ef4:	2100      	movs	r1, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8ef6:	f04f 0c01 	mov.w	ip, #1
		contexts[i].iface = -1;
    8efa:	fb00 6205 	mla	r2, r0, r5, r6
    8efe:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
    8f02:	4b2e      	ldr	r3, [pc, #184]	; (8fbc <net_context_get+0x16c>)
		contexts[i].flags = 0U;
    8f04:	f8a2 1090 	strh.w	r1, [r2, #144]	; 0x90
    8f08:	443b      	add	r3, r7
    8f0a:	e8d3 efef 	ldaex	lr, [r3]
    8f0e:	e8c3 cfeb 	stlex	fp, ip, [r3]
    8f12:	f1bb 0f00 	cmp.w	fp, #0
    8f16:	d1f8      	bne.n	8f0a <net_context_get+0xba>
	context->flags |= flag;
    8f18:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
	if (type == SOCK_DGRAM || type == SOCK_STREAM || type == SOCK_RAW) {
    8f1c:	f10a 32ff 	add.w	r2, sl, #4294967295
    8f20:	2a02      	cmp	r2, #2
    8f22:	d938      	bls.n	8f96 <net_context_get+0x146>
	context->flags |= flag;
    8f24:	fb00 6505 	mla	r5, r0, r5, r6
	context->proto = proto;
    8f28:	f8a5 408e 	strh.w	r4, [r5, #142]	; 0x8e
    8f2c:	2400      	movs	r4, #0
	context->flags |= flag;
    8f2e:	4319      	orrs	r1, r3
    8f30:	f041 0108 	orr.w	r1, r1, #8
			(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
    8f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
    8f38:	f8a5 1090 	strh.w	r1, [r5, #144]	; 0x90
    8f3c:	18f2      	adds	r2, r6, r3
    8f3e:	50f4      	str	r4, [r6, r3]
			(void)memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
    8f40:	f107 0320 	add.w	r3, r7, #32
    8f44:	eb06 0a03 	add.w	sl, r6, r3
    8f48:	6054      	str	r4, [r2, #4]
					find_available_port(&contexts[i], (struct sockaddr *)addr);
    8f4a:	4651      	mov	r1, sl
    8f4c:	50f4      	str	r4, [r6, r3]
    8f4e:	4648      	mov	r0, r9
    8f50:	f8ca 4004 	str.w	r4, [sl, #4]
    8f54:	f7ff ff0e 	bl	8d74 <find_available_port>
				addr->sin_port =
    8f58:	f8aa 0002 	strh.w	r0, [sl, #2]
				if (!addr->sin_port) {
    8f5c:	b1f0      	cbz	r0, 8f9c <net_context_get+0x14c>
			k_sem_init(&contexts[i].recv_data_wait, 1, K_SEM_MAX_LIMIT);
    8f5e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
	return z_impl_k_sem_init(sem, initial_count, limit);
    8f62:	f04f 32ff 	mov.w	r2, #4294967295
    8f66:	2101      	movs	r1, #1
    8f68:	4430      	add	r0, r6
    8f6a:	f01b f84a 	bl	24002 <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
    8f6e:	f107 000c 	add.w	r0, r7, #12
	return z_impl_k_mutex_init(mutex);
    8f72:	4430      	add	r0, r6
    8f74:	f01a ff74 	bl	23e60 <z_impl_k_mutex_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
    8f78:	f8b5 3090 	ldrh.w	r3, [r5, #144]	; 0x90
    8f7c:	f043 0301 	orr.w	r3, r3, #1
    8f80:	f8a5 3090 	strh.w	r3, [r5, #144]	; 0x90
		*context = &contexts[i];
    8f84:	f8c8 9000 	str.w	r9, [r8]
		break;
    8f88:	e7a0      	b.n	8ecc <net_context_get+0x7c>
			if (net_tcp_get(&contexts[i]) < 0) {
    8f8a:	4648      	mov	r0, r9
    8f8c:	f001 ffd0 	bl	af30 <net_tcp_get>
    8f90:	2800      	cmp	r0, #0
    8f92:	daad      	bge.n	8ef0 <net_context_get+0xa0>
    8f94:	e798      	b.n	8ec8 <net_context_get+0x78>
		flag = type << 6;
    8f96:	ea4f 118a 	mov.w	r1, sl, lsl #6
    8f9a:	e7c3      	b.n	8f24 <net_context_get+0xd4>
					ret = -EADDRINUSE;
    8f9c:	f06f 046f 	mvn.w	r4, #111	; 0x6f
    8fa0:	e794      	b.n	8ecc <net_context_get+0x7c>
			return -EPFNOSUPPORT;
    8fa2:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    8fa6:	e75d      	b.n	8e64 <net_context_get+0x14>
				return -EPROTONOSUPPORT;
    8fa8:	f06f 047a 	mvn.w	r4, #122	; 0x7a
    8fac:	e75a      	b.n	8e64 <net_context_get+0x14>
		return -EINVAL;
    8fae:	f06f 0415 	mvn.w	r4, #21
    8fb2:	e757      	b.n	8e64 <net_context_get+0x14>
    8fb4:	20003114 	.word	0x20003114
    8fb8:	2000312c 	.word	0x2000312c
    8fbc:	20003134 	.word	0x20003134

00008fc0 <net_context_put>:
{
    8fc0:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
    8fc2:	4604      	mov	r4, r0
    8fc4:	b1f0      	cbz	r0, 9004 <net_context_put+0x44>
    8fc6:	4b11      	ldr	r3, [pc, #68]	; (900c <net_context_put+0x4c>)
    8fc8:	4298      	cmp	r0, r3
    8fca:	d31b      	bcc.n	9004 <net_context_put+0x44>
    8fcc:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
    8fd0:	4298      	cmp	r0, r3
    8fd2:	d217      	bcs.n	9004 <net_context_put+0x44>
	context->connect_cb = NULL;
    8fd4:	2500      	movs	r5, #0
	k_mutex_lock(&context->lock, K_FOREVER);
    8fd6:	f100 060c 	add.w	r6, r0, #12
    8fda:	f04f 32ff 	mov.w	r2, #4294967295
    8fde:	f04f 33ff 	mov.w	r3, #4294967295
    8fe2:	4630      	mov	r0, r6
    8fe4:	f017 fef6 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	net_tcp_put(context);
    8fe8:	4620      	mov	r0, r4
	context->send_cb = NULL;
    8fea:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
	context->connect_cb = NULL;
    8fee:	63e5      	str	r5, [r4, #60]	; 0x3c
	net_tcp_put(context);
    8ff0:	f002 fa06 	bl	b400 <net_tcp_put>
	net_context_unref(context);
    8ff4:	4620      	mov	r0, r4
    8ff6:	f017 fefb 	bl	20df0 <net_context_unref>
	k_mutex_unlock(&context->lock);
    8ffa:	4630      	mov	r0, r6
    8ffc:	f017 feec 	bl	20dd8 <k_mutex_unlock.isra.0>
	return ret;
    9000:	4628      	mov	r0, r5
}
    9002:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    9004:	f06f 0015 	mvn.w	r0, #21
    9008:	e7fb      	b.n	9002 <net_context_put+0x42>
    900a:	bf00      	nop
    900c:	2000312c 	.word	0x2000312c

00009010 <net_context_bind>:
{
    9010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9014:	b083      	sub	sp, #12
	if (context->conn_handler) {
    9016:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
    9018:	4605      	mov	r5, r0
    901a:	460e      	mov	r6, r1
    901c:	af00      	add	r7, sp, #0
	if (context->conn_handler) {
    901e:	2c00      	cmp	r4, #0
    9020:	f040 808c 	bne.w	913c <net_context_bind+0x12c>
	if (IS_ENABLED(CONFIG_NET_IPV4) && addr->sa_family == AF_INET) {
    9024:	880b      	ldrh	r3, [r1, #0]
    9026:	2b01      	cmp	r3, #1
    9028:	f040 808b 	bne.w	9142 <net_context_bind+0x132>
		if (addrlen < sizeof(struct sockaddr_in)) {
    902c:	2a07      	cmp	r2, #7
		struct net_if *iface = NULL;
    902e:	607c      	str	r4, [r7, #4]
		if (addrlen < sizeof(struct sockaddr_in)) {
    9030:	f240 8087 	bls.w	9142 <net_context_bind+0x132>
		if (net_context_is_bound_to_iface(context)) {
    9034:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
    9038:	051b      	lsls	r3, r3, #20
    903a:	d504      	bpl.n	9046 <net_context_bind+0x36>
	return net_if_get_by_index(context->iface);
    903c:	f990 0092 	ldrsb.w	r0, [r0, #146]	; 0x92
		union { uintptr_t x; int val; } parm0 = { .val = index };
		return (struct net_if *) arch_syscall_invoke1(parm0.x, K_SYSCALL_NET_IF_GET_BY_INDEX);
	}
#endif
	compiler_barrier();
	return z_impl_net_if_get_by_index(index);
    9040:	f7fe ff68 	bl	7f14 <z_impl_net_if_get_by_index>
			iface = net_context_get_iface(context);
    9044:	6078      	str	r0, [r7, #4]
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
    9046:	f106 0804 	add.w	r8, r6, #4
    904a:	4640      	mov	r0, r8
    904c:	f017 fe95 	bl	20d7a <net_ipv4_is_addr_mcast>
    9050:	b160      	cbz	r0, 906c <net_context_bind+0x5c>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
    9052:	4640      	mov	r0, r8
    9054:	1d39      	adds	r1, r7, #4
    9056:	f7ff f8e9 	bl	822c <net_if_ipv4_maddr_lookup>
			if (!maddr) {
    905a:	2800      	cmp	r0, #0
    905c:	d138      	bne.n	90d0 <net_context_bind+0xc0>
				return -ENOENT;
    905e:	f06f 0401 	mvn.w	r4, #1
}
    9062:	4620      	mov	r0, r4
    9064:	370c      	adds	r7, #12
    9066:	46bd      	mov	sp, r7
    9068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
    906c:	6872      	ldr	r2, [r6, #4]
			if (iface == NULL) {
    906e:	687b      	ldr	r3, [r7, #4]
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
    9070:	bb3a      	cbnz	r2, 90c2 <net_context_bind+0xb2>
			if (iface == NULL) {
    9072:	b923      	cbnz	r3, 907e <net_context_bind+0x6e>
				iface = net_if_ipv4_select_src_iface(
    9074:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    9078:	f7fe ffce 	bl	8018 <net_if_ipv4_select_src_iface>
    907c:	6078      	str	r0, [r7, #4]
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
    907e:	f7ff fcd7 	bl	8a30 <net_ipv4_unspecified_address>
    9082:	4604      	mov	r4, r0
		if (!iface) {
    9084:	f8d7 9004 	ldr.w	r9, [r7, #4]
    9088:	f1b9 0f00 	cmp.w	r9, #0
    908c:	d122      	bne.n	90d4 <net_context_bind+0xc4>
			NET_ERR("Cannot bind to %s",
    908e:	4641      	mov	r1, r8
    9090:	2001      	movs	r0, #1
    9092:	f7ff fbef 	bl	8874 <net_sprint_addr>
    9096:	466c      	mov	r4, sp
    9098:	b088      	sub	sp, #32
    909a:	466a      	mov	r2, sp
    909c:	4b2a      	ldr	r3, [pc, #168]	; (9148 <net_context_bind+0x138>)
    909e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    90a2:	f44f 7300 	mov.w	r3, #512	; 0x200
    90a6:	8393      	strh	r3, [r2, #28]
    90a8:	4b28      	ldr	r3, [pc, #160]	; (914c <net_context_bind+0x13c>)
    90aa:	f842 3f10 	str.w	r3, [r2, #16]!
    90ae:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    90b2:	464b      	mov	r3, r9
    90b4:	4826      	ldr	r0, [pc, #152]	; (9150 <net_context_bind+0x140>)
    90b6:	f7fb fee5 	bl	4e84 <z_impl_z_log_msg_static_create>
    90ba:	46a5      	mov	sp, r4
			return -EADDRNOTAVAIL;
    90bc:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    90c0:	e7cf      	b.n	9062 <net_context_bind+0x52>
			ifaddr = net_if_ipv4_addr_lookup(
    90c2:	b903      	cbnz	r3, 90c6 <net_context_bind+0xb6>
    90c4:	1d3c      	adds	r4, r7, #4
    90c6:	4621      	mov	r1, r4
    90c8:	4640      	mov	r0, r8
    90ca:	f7ff f819 	bl	8100 <net_if_ipv4_addr_lookup>
    90ce:	e7c4      	b.n	905a <net_context_bind+0x4a>
			ptr = &ifaddr->address.in_addr;
    90d0:	1d04      	adds	r4, r0, #4
    90d2:	e7d7      	b.n	9084 <net_context_bind+0x74>
		k_mutex_lock(&context->lock, K_FOREVER);
    90d4:	f105 080c 	add.w	r8, r5, #12
    90d8:	f04f 32ff 	mov.w	r2, #4294967295
    90dc:	f04f 33ff 	mov.w	r3, #4294967295
    90e0:	4640      	mov	r0, r8
    90e2:	f017 fe77 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	context->iface = net_if_get_by_iface(iface);
    90e6:	6878      	ldr	r0, [r7, #4]
    90e8:	f7ff f9b6 	bl	8458 <net_if_get_by_iface>
    90ec:	f885 0092 	strb.w	r0, [r5, #146]	; 0x92
		net_sin_ptr(&context->local)->sin_family = AF_INET;
    90f0:	2001      	movs	r0, #1
		net_sin_ptr(&context->local)->sin_addr = ptr;
    90f2:	626c      	str	r4, [r5, #36]	; 0x24
		net_sin_ptr(&context->local)->sin_family = AF_INET;
    90f4:	8428      	strh	r0, [r5, #32]
		if (addr4->sin_port) {
    90f6:	8871      	ldrh	r1, [r6, #2]
    90f8:	b1e9      	cbz	r1, 9136 <net_context_bind+0x126>
			ret = check_used_port(AF_INET, addr4->sin_port,
    90fa:	4632      	mov	r2, r6
    90fc:	f7ff fe16 	bl	8d2c <check_used_port>
			if (!ret) {
    9100:	4604      	mov	r4, r0
    9102:	b910      	cbnz	r0, 910a <net_context_bind+0xfa>
				net_sin_ptr(&context->local)->sin_port =
    9104:	8469      	strh	r1, [r5, #34]	; 0x22
			ifaddr = net_if_ipv4_addr_lookup(
    9106:	2400      	movs	r4, #0
    9108:	e011      	b.n	912e <net_context_bind+0x11e>
				NET_ERR("Port %d is in use!",
    910a:	466d      	mov	r5, sp
    910c:	b088      	sub	sp, #32
    910e:	466a      	mov	r2, sp
    9110:	4b10      	ldr	r3, [pc, #64]	; (9154 <net_context_bind+0x144>)
    9112:	ba49      	rev16	r1, r1
    9114:	6153      	str	r3, [r2, #20]
    9116:	2303      	movs	r3, #3
    9118:	b289      	uxth	r1, r1
    911a:	6191      	str	r1, [r2, #24]
    911c:	f842 3f10 	str.w	r3, [r2, #16]!
    9120:	2300      	movs	r3, #0
    9122:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9126:	480a      	ldr	r0, [pc, #40]	; (9150 <net_context_bind+0x140>)
    9128:	f7fb feac 	bl	4e84 <z_impl_z_log_msg_static_create>
    912c:	46ad      	mov	sp, r5
		k_mutex_unlock(&context->lock);
    912e:	4640      	mov	r0, r8
    9130:	f017 fe52 	bl	20dd8 <k_mutex_unlock.isra.0>
		return ret;
    9134:	e795      	b.n	9062 <net_context_bind+0x52>
				net_sin_ptr(&context->local)->sin_port;
    9136:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
			addr4->sin_port =
    9138:	8073      	strh	r3, [r6, #2]
    913a:	e7e4      	b.n	9106 <net_context_bind+0xf6>
		return -EISCONN;
    913c:	f06f 047e 	mvn.w	r4, #126	; 0x7e
    9140:	e78f      	b.n	9062 <net_context_bind+0x52>
	return -EINVAL;
    9142:	f06f 0415 	mvn.w	r4, #21
    9146:	e78c      	b.n	9062 <net_context_bind+0x52>
    9148:	00032da5 	.word	0x00032da5
    914c:	01000003 	.word	0x01000003
    9150:	00024ce8 	.word	0x00024ce8
    9154:	00032db7 	.word	0x00032db7

00009158 <context_sendto.constprop.0>:
static int context_sendto(struct net_context *context,
    9158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    915c:	b089      	sub	sp, #36	; 0x24
    915e:	4698      	mov	r8, r3
	return context->flags & NET_CONTEXT_IN_USE;
    9160:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
    9164:	af02      	add	r7, sp, #8
    9166:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
    9168:	07d8      	lsls	r0, r3, #31
static int context_sendto(struct net_context *context,
    916a:	4689      	mov	r9, r1
    916c:	4616      	mov	r6, r2
    916e:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
    9172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9174:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
	if (!net_context_is_used(context)) {
    9178:	f140 814d 	bpl.w	9416 <context_sendto.constprop.0+0x2be>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
    917c:	b149      	cbz	r1, 9192 <context_sendto.constprop.0+0x3a>
    917e:	b942      	cbnz	r2, 9192 <context_sendto.constprop.0+0x3a>
    9180:	f1b8 0f00 	cmp.w	r8, #0
    9184:	d10c      	bne.n	91a0 <context_sendto.constprop.0+0x48>
    9186:	f1b9 0f00 	cmp.w	r9, #0
    918a:	d10c      	bne.n	91a6 <context_sendto.constprop.0+0x4e>
		return -EDESTADDRREQ;
    918c:	f06f 0878 	mvn.w	r8, #120	; 0x78
    9190:	e08a      	b.n	92a8 <context_sendto.constprop.0+0x150>
	if (!msghdr && !dst_addr) {
    9192:	f1b8 0f00 	cmp.w	r8, #0
    9196:	d0f9      	beq.n	918c <context_sendto.constprop.0+0x34>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9198:	f3c3 01c2 	ubfx	r1, r3, #3, #3
    919c:	2901      	cmp	r1, #1
    919e:	d01f      	beq.n	91e0 <context_sendto.constprop.0+0x88>
			return -EINVAL;
    91a0:	f06f 0815 	mvn.w	r8, #21
    91a4:	e080      	b.n	92a8 <context_sendto.constprop.0+0x150>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    91a6:	f3c3 02c2 	ubfx	r2, r3, #3, #3
    91aa:	2a01      	cmp	r2, #1
    91ac:	d1f8      	bne.n	91a0 <context_sendto.constprop.0+0x48>
			addrlen = msghdr->msg_namelen;
    91ae:	e9d9 8200 	ldrd	r8, r2, [r9]
			if (!addr4) {
    91b2:	f1b8 0f00 	cmp.w	r8, #0
    91b6:	d16d      	bne.n	9294 <context_sendto.constprop.0+0x13c>
		if (!addr4->sin_addr.s_addr) {
    91b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
				addr4 = net_sin(&context->remote);
    91ba:	f104 0828 	add.w	r8, r4, #40	; 0x28
		if (!addr4->sin_addr.s_addr) {
    91be:	2b00      	cmp	r3, #0
    91c0:	d0e4      	beq.n	918c <context_sendto.constprop.0+0x34>
    91c2:	46ca      	mov	sl, r9
	if (msghdr && len == 0) {
    91c4:	bb1e      	cbnz	r6, 920e <context_sendto.constprop.0+0xb6>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
    91c6:	4633      	mov	r3, r6
    91c8:	f8da 100c 	ldr.w	r1, [sl, #12]
    91cc:	428b      	cmp	r3, r1
    91ce:	d01e      	beq.n	920e <context_sendto.constprop.0+0xb6>
			len += msghdr->msg_iov[i].iov_len;
    91d0:	f8da 2008 	ldr.w	r2, [sl, #8]
    91d4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    91d8:	6852      	ldr	r2, [r2, #4]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
    91da:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
    91dc:	4416      	add	r6, r2
		for (i = 0; i < msghdr->msg_iovlen; i++) {
    91de:	e7f5      	b.n	91cc <context_sendto.constprop.0+0x74>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    91e0:	f04f 0a00 	mov.w	sl, #0
		if (addrlen < sizeof(struct sockaddr_in)) {
    91e4:	2a07      	cmp	r2, #7
    91e6:	d9db      	bls.n	91a0 <context_sendto.constprop.0+0x48>
		if (!addr4->sin_addr.s_addr) {
    91e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    91ec:	2a00      	cmp	r2, #0
    91ee:	d0cd      	beq.n	918c <context_sendto.constprop.0+0x34>
		if (net_sin(&context->remote)->sin_addr.s_addr == 0U &&
    91f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    91f2:	b94a      	cbnz	r2, 9208 <context_sendto.constprop.0+0xb0>
    91f4:	0519      	lsls	r1, r3, #20
    91f6:	d407      	bmi.n	9208 <context_sendto.constprop.0+0xb0>
			iface = net_if_ipv4_select_src_iface(&addr4->sin_addr);
    91f8:	f108 0004 	add.w	r0, r8, #4
    91fc:	f7fe ff0c 	bl	8018 <net_if_ipv4_select_src_iface>
	context->iface = net_if_get_by_iface(iface);
    9200:	f7ff f92a 	bl	8458 <net_if_get_by_iface>
    9204:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
	if (msghdr && len == 0) {
    9208:	f1ba 0f00 	cmp.w	sl, #0
    920c:	d1da      	bne.n	91c4 <context_sendto.constprop.0+0x6c>
	return net_if_get_by_index(context->iface);
    920e:	f994 0092 	ldrsb.w	r0, [r4, #146]	; 0x92
    9212:	f7fe fe7f 	bl	7f14 <z_impl_net_if_get_by_index>
	if (iface && !net_if_is_up(iface)) {
    9216:	2800      	cmp	r0, #0
    9218:	d13e      	bne.n	9298 <context_sendto.constprop.0+0x140>
	if (context->tx_slab) {
    921a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    921c:	2b00      	cmp	r3, #0
    921e:	d14f      	bne.n	92c0 <context_sendto.constprop.0+0x168>
    9220:	f994 0092 	ldrsb.w	r0, [r4, #146]	; 0x92
    9224:	f7fe fe76 	bl	7f14 <z_impl_net_if_get_by_index>
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
    9228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    922c:	2200      	movs	r2, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    922e:	f8b4 5090 	ldrh.w	r5, [r4, #144]	; 0x90
    9232:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    9236:	e9cd 1200 	strd	r1, r2, [sp]
    923a:	f3c5 02c2 	ubfx	r2, r5, #3, #3
    923e:	4631      	mov	r1, r6
    9240:	f000 fb5a 	bl	98f8 <net_pkt_alloc_with_buffer>
	if (pkt) {
    9244:	4605      	mov	r5, r0
    9246:	2800      	cmp	r0, #0
    9248:	d06a      	beq.n	9320 <context_sendto.constprop.0+0x1c8>
    924a:	6144      	str	r4, [r0, #20]
	tmp_len = net_pkt_available_payload_buffer(
    924c:	4628      	mov	r0, r5
    924e:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
    9252:	f018 f8ef 	bl	21434 <net_pkt_available_payload_buffer>
	if (tmp_len < len) {
    9256:	4286      	cmp	r6, r0
    9258:	d972      	bls.n	9340 <context_sendto.constprop.0+0x1e8>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
    925a:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    925e:	f3c3 1381 	ubfx	r3, r3, #6, #2
		if (net_context_get_type(context) == SOCK_DGRAM) {
    9262:	2b02      	cmp	r3, #2
    9264:	d16b      	bne.n	933e <context_sendto.constprop.0+0x1e6>
			NET_ERR("Available payload buffer (%zu) is not enough for requested DGRAM (%zu)",
    9266:	466c      	mov	r4, sp
    9268:	b088      	sub	sp, #32
    926a:	aa02      	add	r2, sp, #8
    926c:	4b6b      	ldr	r3, [pc, #428]	; (941c <context_sendto.constprop.0+0x2c4>)
    926e:	61d6      	str	r6, [r2, #28]
    9270:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9274:	2304      	movs	r3, #4
    9276:	f842 3f10 	str.w	r3, [r2, #16]!
    927a:	2300      	movs	r3, #0
    927c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9280:	4867      	ldr	r0, [pc, #412]	; (9420 <context_sendto.constprop.0+0x2c8>)
    9282:	f7fb fdff 	bl	4e84 <z_impl_z_log_msg_static_create>
			ret = -ENOMEM;
    9286:	f06f 080b 	mvn.w	r8, #11
    928a:	46a5      	mov	sp, r4
	net_pkt_unref(pkt);
    928c:	4628      	mov	r0, r5
    928e:	f018 f891 	bl	213b4 <net_pkt_unref>
	return ret;
    9292:	e009      	b.n	92a8 <context_sendto.constprop.0+0x150>
    9294:	46ca      	mov	sl, r9
    9296:	e7a5      	b.n	91e4 <context_sendto.constprop.0+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9298:	6803      	ldr	r3, [r0, #0]
    929a:	330c      	adds	r3, #12
    929c:	e8d3 3faf 	lda	r3, [r3]
	return net_if_flag_is_set(iface, NET_IF_UP) &&
    92a0:	07da      	lsls	r2, r3, #31
    92a2:	d406      	bmi.n	92b2 <context_sendto.constprop.0+0x15a>
		return -ENETDOWN;
    92a4:	f06f 0872 	mvn.w	r8, #114	; 0x72
}
    92a8:	4640      	mov	r0, r8
    92aa:	371c      	adds	r7, #28
    92ac:	46bd      	mov	sp, r7
    92ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92b2:	6803      	ldr	r3, [r0, #0]
    92b4:	330c      	adds	r3, #12
    92b6:	e8d3 3faf 	lda	r3, [r3]
    92ba:	05db      	lsls	r3, r3, #23
    92bc:	d4ad      	bmi.n	921a <context_sendto.constprop.0+0xc2>
    92be:	e7f1      	b.n	92a4 <context_sendto.constprop.0+0x14c>
		pkt = net_pkt_alloc_from_slab(context->tx_slab(), timeout);
    92c0:	4798      	blx	r3
    92c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    92c6:	2300      	movs	r3, #0
    92c8:	f018 f90b 	bl	214e2 <net_pkt_alloc_from_slab>
		if (!pkt) {
    92cc:	4605      	mov	r5, r0
    92ce:	b338      	cbz	r0, 9320 <context_sendto.constprop.0+0x1c8>
	return net_if_get_by_index(context->iface);
    92d0:	f994 0092 	ldrsb.w	r0, [r4, #146]	; 0x92
    92d4:	f7fe fe1e 	bl	7f14 <z_impl_net_if_get_by_index>
	pkt->iface = iface;
    92d8:	61a8      	str	r0, [r5, #24]
	if (iface) {
    92da:	b138      	cbz	r0, 92ec <context_sendto.constprop.0+0x194>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
    92dc:	6803      	ldr	r3, [r0, #0]
    92de:	7d5b      	ldrb	r3, [r3, #21]
    92e0:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
    92e4:	6803      	ldr	r3, [r0, #0]
    92e6:	7d5b      	ldrb	r3, [r3, #21]
    92e8:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
		if (net_pkt_alloc_buffer(pkt, len,
    92ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    92f0:	2100      	movs	r1, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    92f2:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	pkt->family = family;
    92f6:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
    92fa:	08db      	lsrs	r3, r3, #3
    92fc:	f363 1247 	bfi	r2, r3, #5, #3
    9300:	f885 2037 	strb.w	r2, [r5, #55]	; 0x37
	pkt->context = ctx;
    9304:	616c      	str	r4, [r5, #20]
    9306:	f894 208e 	ldrb.w	r2, [r4, #142]	; 0x8e
    930a:	e9cd 0100 	strd	r0, r1, [sp]
    930e:	4631      	mov	r1, r6
    9310:	4628      	mov	r0, r5
    9312:	f000 fa13 	bl	973c <net_pkt_alloc_buffer>
    9316:	2800      	cmp	r0, #0
    9318:	d098      	beq.n	924c <context_sendto.constprop.0+0xf4>
			net_pkt_unref(pkt);
    931a:	4628      	mov	r0, r5
    931c:	f018 f84a 	bl	213b4 <net_pkt_unref>
		NET_ERR("Failed to allocate net_pkt");
    9320:	4b40      	ldr	r3, [pc, #256]	; (9424 <context_sendto.constprop.0+0x2cc>)
    9322:	617b      	str	r3, [r7, #20]
    9324:	2302      	movs	r3, #2
    9326:	613b      	str	r3, [r7, #16]
    9328:	2300      	movs	r3, #0
    932a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    932e:	483c      	ldr	r0, [pc, #240]	; (9420 <context_sendto.constprop.0+0x2c8>)
    9330:	f107 0210 	add.w	r2, r7, #16
    9334:	f7fb fda6 	bl	4e84 <z_impl_z_log_msg_static_create>
		return -ENOBUFS;
    9338:	f06f 0868 	mvn.w	r8, #104	; 0x68
    933c:	e7b4      	b.n	92a8 <context_sendto.constprop.0+0x150>
    933e:	4606      	mov	r6, r0
	context->send_cb = cb;
    9340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	context->user_data = user_data;
    9342:	f8c4 b004 	str.w	fp, [r4, #4]
	context->send_cb = cb;
    9346:	63a3      	str	r3, [r4, #56]	; 0x38
	return context->proto;
    9348:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
    934c:	2b11      	cmp	r3, #17
    934e:	d13f      	bne.n	93d0 <context_sendto.constprop.0+0x278>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    9350:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9354:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    9358:	2b01      	cmp	r3, #1
    935a:	d156      	bne.n	940a <context_sendto.constprop.0+0x2b2>
		ret = net_context_create_ipv4_new(context, pkt,
    935c:	f108 0304 	add.w	r3, r8, #4
    9360:	2200      	movs	r2, #0
    9362:	4629      	mov	r1, r5
    9364:	4620      	mov	r0, r4
		dst_port = addr4->sin_port;
    9366:	f8b8 b002 	ldrh.w	fp, [r8, #2]
		ret = net_context_create_ipv4_new(context, pkt,
    936a:	f017 fda9 	bl	20ec0 <net_context_create_ipv4_new>
	if (ret < 0) {
    936e:	f1b0 0800 	subs.w	r8, r0, #0
    9372:	db8b      	blt.n	928c <context_sendto.constprop.0+0x134>
	ret = bind_default(context);
    9374:	4620      	mov	r0, r4
    9376:	f017 fd64 	bl	20e42 <bind_default>
	if (ret) {
    937a:	4680      	mov	r8, r0
    937c:	b968      	cbnz	r0, 939a <context_sendto.constprop.0+0x242>
	ret = net_udp_create(pkt,
    937e:	465a      	mov	r2, fp
    9380:	4628      	mov	r0, r5
    9382:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    9384:	f019 f8d6 	bl	22534 <net_udp_create>
	if (ret) {
    9388:	4680      	mov	r8, r0
    938a:	b930      	cbnz	r0, 939a <context_sendto.constprop.0+0x242>
	ret = context_write_data(pkt, buf, len, msg);
    938c:	4653      	mov	r3, sl
    938e:	4632      	mov	r2, r6
    9390:	4649      	mov	r1, r9
    9392:	4628      	mov	r0, r5
    9394:	f017 fcf9 	bl	20d8a <context_write_data>
    9398:	4680      	mov	r8, r0
		if (ret < 0) {
    939a:	f1b8 0f00 	cmp.w	r8, #0
    939e:	f6ff af75 	blt.w	928c <context_sendto.constprop.0+0x134>
	net_pkt_cursor_init(pkt);
    93a2:	4628      	mov	r0, r5
    93a4:	f018 f897 	bl	214d6 <net_pkt_cursor_init>
    93a8:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    93ac:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    93b0:	2b01      	cmp	r3, #1
    93b2:	d104      	bne.n	93be <context_sendto.constprop.0+0x266>
		net_ipv4_finalize(pkt, net_context_get_proto(context));
    93b4:	4628      	mov	r0, r5
    93b6:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
    93ba:	f018 fd82 	bl	21ec2 <net_ipv4_finalize>
		ret = net_send_data(pkt);
    93be:	4628      	mov	r0, r5
    93c0:	f017 f9b1 	bl	20726 <net_send_data>
	if (ret < 0) {
    93c4:	2800      	cmp	r0, #0
		ret = net_tcp_send_data(context, cb, user_data);
    93c6:	4680      	mov	r8, r0
	if (ret < 0) {
    93c8:	f6ff af60 	blt.w	928c <context_sendto.constprop.0+0x134>
	return len;
    93cc:	46b0      	mov	r8, r6
    93ce:	e76b      	b.n	92a8 <context_sendto.constprop.0+0x150>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
    93d0:	2b06      	cmp	r3, #6
    93d2:	d11d      	bne.n	9410 <context_sendto.constprop.0+0x2b8>
		ret = context_write_data(pkt, buf, len, msghdr);
    93d4:	4653      	mov	r3, sl
    93d6:	4632      	mov	r2, r6
    93d8:	4649      	mov	r1, r9
    93da:	4628      	mov	r0, r5
    93dc:	f017 fcd5 	bl	20d8a <context_write_data>
		if (ret < 0) {
    93e0:	f1b0 0800 	subs.w	r8, r0, #0
    93e4:	f6ff af52 	blt.w	928c <context_sendto.constprop.0+0x134>
		net_pkt_cursor_init(pkt);
    93e8:	4628      	mov	r0, r5
    93ea:	f018 f874 	bl	214d6 <net_pkt_cursor_init>
		ret = net_tcp_queue_data(context, pkt);
    93ee:	4629      	mov	r1, r5
    93f0:	4620      	mov	r0, r4
    93f2:	f002 fb27 	bl	ba44 <net_tcp_queue_data>
		if (ret < 0) {
    93f6:	f1b0 0800 	subs.w	r8, r0, #0
    93fa:	f6ff af47 	blt.w	928c <context_sendto.constprop.0+0x134>
		ret = net_tcp_send_data(context, cb, user_data);
    93fe:	465a      	mov	r2, fp
    9400:	4620      	mov	r0, r4
    9402:	6c79      	ldr	r1, [r7, #68]	; 0x44
    9404:	f018 ff5d 	bl	222c2 <net_tcp_send_data>
    9408:	e7dc      	b.n	93c4 <context_sendto.constprop.0+0x26c>
	int ret = -EINVAL;
    940a:	f06f 0815 	mvn.w	r8, #21
    940e:	e73d      	b.n	928c <context_sendto.constprop.0+0x134>
		ret = -EPROTONOSUPPORT;
    9410:	f06f 087a 	mvn.w	r8, #122	; 0x7a
    9414:	e73a      	b.n	928c <context_sendto.constprop.0+0x134>
		return -EBADF;
    9416:	f06f 0808 	mvn.w	r8, #8
    941a:	e745      	b.n	92a8 <context_sendto.constprop.0+0x150>
    941c:	00032de5 	.word	0x00032de5
    9420:	00024ce8 	.word	0x00024ce8
    9424:	00032dca 	.word	0x00032dca

00009428 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
    9428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    942c:	461f      	mov	r7, r3
	return context->flags & NET_CONTEXT_IN_USE;
    942e:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
    9432:	b088      	sub	sp, #32
	int ret;
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
    9434:	07db      	lsls	r3, r3, #31
{
    9436:	4604      	mov	r4, r0
    9438:	468a      	mov	sl, r1
    943a:	4690      	mov	r8, r2
    943c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (!net_context_is_used(context)) {
    9440:	d578      	bpl.n	9534 <net_context_recv+0x10c>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
    9442:	f100 060c 	add.w	r6, r0, #12
    9446:	f04f 33ff 	mov.w	r3, #4294967295
    944a:	f04f 32ff 	mov.w	r2, #4294967295
    944e:	4630      	mov	r0, r6
    9450:	f017 fcc0 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	return context->proto;
    9454:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
			net_context_get_iface(context),
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
    9458:	2b11      	cmp	r3, #17
    945a:	d160      	bne.n	951e <net_context_recv+0xf6>
	struct sockaddr local_addr = {
    945c:	2500      	movs	r5, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    945e:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	if (context->conn_handler) {
    9462:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9464:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	struct sockaddr local_addr = {
    9468:	f8cd 501a 	str.w	r5, [sp, #26]
    946c:	f8ad 501e 	strh.w	r5, [sp, #30]
    9470:	f8ad 3018 	strh.w	r3, [sp, #24]
	if (context->conn_handler) {
    9474:	b110      	cbz	r0, 947c <net_context_recv+0x54>
		net_conn_unregister(context->conn_handler);
    9476:	f000 fc03 	bl	9c80 <net_conn_unregister>
		context->conn_handler = NULL;
    947a:	6325      	str	r5, [r4, #48]	; 0x30
	ret = bind_default(context);
    947c:	4620      	mov	r0, r4
    947e:	f017 fce0 	bl	20e42 <bind_default>
	if (ret) {
    9482:	4605      	mov	r5, r0
    9484:	bb50      	cbnz	r0, 94dc <net_context_recv+0xb4>
    9486:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    948a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    948e:	2b01      	cmp	r3, #1
    9490:	d143      	bne.n	951a <net_context_recv+0xf2>
		if (net_sin_ptr(&context->local)->sin_addr) {
    9492:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9494:	b113      	cbz	r3, 949c <net_context_recv+0x74>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
    9496:	681b      	ldr	r3, [r3, #0]
    9498:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
    949a:	ab06      	add	r3, sp, #24
		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
    949c:	8c65      	ldrh	r5, [r4, #34]	; 0x22
	ret = net_conn_register(net_context_get_proto(context),
    949e:	f104 0c30 	add.w	ip, r4, #48	; 0x30
    94a2:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
	return context->proto;
    94a6:	f8b4 008e 	ldrh.w	r0, [r4, #142]	; 0x8e
	context->recv_cb = cb;
    94aa:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	ret = net_conn_register(net_context_get_proto(context),
    94ae:	e9cd 9c04 	strd	r9, ip, [sp, #16]
    94b2:	f8df c088 	ldr.w	ip, [pc, #136]	; 953c <net_context_recv+0x114>
    94b6:	ba6d      	rev16	r5, r5
    94b8:	e9cd 4c02 	strd	r4, ip, [sp, #8]
    94bc:	b2ad      	uxth	r5, r5
    94be:	9501      	str	r5, [sp, #4]
    94c0:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
    94c2:	f3c2 01c2 	ubfx	r1, r2, #3, #3
    94c6:	ba6d      	rev16	r5, r5
    94c8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    94cc:	b2ad      	uxth	r5, r5
    94ce:	bf18      	it	ne
    94d0:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    94d4:	9500      	str	r5, [sp, #0]
    94d6:	f000 fab5 	bl	9a44 <net_conn_register>
	    net_context_get_proto(context) == IPPROTO_UDP) {
		ret = recv_udp(context, cb, timeout, user_data);
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
		   net_context_get_proto(context) == IPPROTO_TCP) {
		ret = net_tcp_recv(context, cb, user_data);
    94da:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
    94dc:	2d00      	cmp	r5, #0
    94de:	db15      	blt.n	950c <net_context_recv+0xe4>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    94e0:	ea58 0307 	orrs.w	r3, r8, r7
    94e4:	d012      	beq.n	950c <net_context_recv+0xe4>

		/* Make sure we have the lock, then the
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);
    94e6:	344c      	adds	r4, #76	; 0x4c
	z_impl_k_sem_reset(sem);
    94e8:	4620      	mov	r0, r4
    94ea:	f00c fa7b 	bl	159e4 <z_impl_k_sem_reset>

		k_mutex_unlock(&context->lock);
    94ee:	4630      	mov	r0, r6
    94f0:	f017 fc72 	bl	20dd8 <k_mutex_unlock.isra.0>
	return z_impl_k_sem_take(sem, timeout);
    94f4:	4642      	mov	r2, r8
    94f6:	463b      	mov	r3, r7
    94f8:	4620      	mov	r0, r4
    94fa:	f00c fa4b 	bl	15994 <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
    94fe:	f04f 32ff 	mov.w	r2, #4294967295
    9502:	f04f 33ff 	mov.w	r3, #4294967295
    9506:	4630      	mov	r0, r6
    9508:	f017 fc64 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
    950c:	4630      	mov	r0, r6
    950e:	f017 fc63 	bl	20dd8 <k_mutex_unlock.isra.0>

	return ret;
}
    9512:	4628      	mov	r0, r5
    9514:	b008      	add	sp, #32
    9516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct sockaddr *laddr = NULL;
    951a:	4603      	mov	r3, r0
    951c:	e7bf      	b.n	949e <net_context_recv+0x76>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
    951e:	2b06      	cmp	r3, #6
    9520:	d105      	bne.n	952e <net_context_recv+0x106>
		ret = net_tcp_recv(context, cb, user_data);
    9522:	464a      	mov	r2, r9
    9524:	4651      	mov	r1, sl
    9526:	4620      	mov	r0, r4
    9528:	f018 fed2 	bl	222d0 <net_tcp_recv>
    952c:	e7d5      	b.n	94da <net_context_recv+0xb2>
			ret = -EPROTOTYPE;
    952e:	f06f 056a 	mvn.w	r5, #106	; 0x6a
    9532:	e7eb      	b.n	950c <net_context_recv+0xe4>
		return -EBADF;
    9534:	f06f 0508 	mvn.w	r5, #8
    9538:	e7eb      	b.n	9512 <net_context_recv+0xea>
    953a:	bf00      	nop
    953c:	00008da1 	.word	0x00008da1

00009540 <net_context_set_option>:
}

int net_context_set_option(struct net_context *context,
			   enum net_context_option option,
			   const void *value, size_t len)
{
    9540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9544:	460d      	mov	r5, r1
    9546:	4617      	mov	r7, r2
    9548:	461e      	mov	r6, r3
	int ret = 0;

	NET_ASSERT(context);

	if (!PART_OF_ARRAY(contexts, context)) {
    954a:	4604      	mov	r4, r0
    954c:	b340      	cbz	r0, 95a0 <net_context_set_option+0x60>
    954e:	4916      	ldr	r1, [pc, #88]	; (95a8 <net_context_set_option+0x68>)
    9550:	4288      	cmp	r0, r1
    9552:	d325      	bcc.n	95a0 <net_context_set_option+0x60>
    9554:	f501 61b9 	add.w	r1, r1, #1480	; 0x5c8
    9558:	4288      	cmp	r0, r1
    955a:	d221      	bcs.n	95a0 <net_context_set_option+0x60>
		return -EINVAL;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
    955c:	f100 080c 	add.w	r8, r0, #12
    9560:	f04f 32ff 	mov.w	r2, #4294967295
    9564:	f04f 33ff 	mov.w	r3, #4294967295
    9568:	4640      	mov	r0, r8
    956a:	f017 fc33 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>

	switch (option) {
    956e:	2d07      	cmp	r5, #7
    9570:	d803      	bhi.n	957a <net_context_set_option+0x3a>
    9572:	b15d      	cbz	r5, 958c <net_context_set_option+0x4c>
	case NET_OPT_PRIORITY:
		ret = set_context_priority(context, value, len);
    9574:	f06f 0485 	mvn.w	r4, #133	; 0x85
    9578:	e009      	b.n	958e <net_context_set_option+0x4e>
	switch (option) {
    957a:	2d08      	cmp	r5, #8
    957c:	d106      	bne.n	958c <net_context_set_option+0x4c>
	if (len != sizeof(int)) {
    957e:	2e04      	cmp	r6, #4
	int dscp_ecn = *((int *)value);
    9580:	683b      	ldr	r3, [r7, #0]
	if (len != sizeof(int)) {
    9582:	d10a      	bne.n	959a <net_context_set_option+0x5a>
	if ((dscp_ecn < 0) || (dscp_ecn > UINT8_MAX)) {
    9584:	2bff      	cmp	r3, #255	; 0xff
    9586:	d808      	bhi.n	959a <net_context_set_option+0x5a>
	context->options.dscp_ecn = (uint8_t)dscp_ecn;
    9588:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	int ret = 0;
    958c:	2400      	movs	r4, #0
	case NET_OPT_DSCP_ECN:
		ret = set_context_dscp_ecn(context, value, len);
		break;
	}

	k_mutex_unlock(&context->lock);
    958e:	4640      	mov	r0, r8
    9590:	f017 fc22 	bl	20dd8 <k_mutex_unlock.isra.0>

	return ret;
}
    9594:	4620      	mov	r0, r4
    9596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    959a:	f06f 0415 	mvn.w	r4, #21
    959e:	e7f6      	b.n	958e <net_context_set_option+0x4e>
		return -EINVAL;
    95a0:	f06f 0415 	mvn.w	r4, #21
    95a4:	e7f6      	b.n	9594 <net_context_set_option+0x54>
    95a6:	bf00      	nop
    95a8:	2000312c 	.word	0x2000312c

000095ac <net_context_get_option>:

int net_context_get_option(struct net_context *context,
			    enum net_context_option option,
			    void *value, size_t *len)
{
    95ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95b0:	460d      	mov	r5, r1
    95b2:	4617      	mov	r7, r2
    95b4:	461e      	mov	r6, r3
	int ret = 0;

	NET_ASSERT(context);

	if (!PART_OF_ARRAY(contexts, context)) {
    95b6:	4604      	mov	r4, r0
    95b8:	b320      	cbz	r0, 9604 <net_context_get_option+0x58>
    95ba:	4b14      	ldr	r3, [pc, #80]	; (960c <net_context_get_option+0x60>)
    95bc:	4298      	cmp	r0, r3
    95be:	d321      	bcc.n	9604 <net_context_get_option+0x58>
    95c0:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
    95c4:	4298      	cmp	r0, r3
    95c6:	d21d      	bcs.n	9604 <net_context_get_option+0x58>
		return -EINVAL;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
    95c8:	f100 080c 	add.w	r8, r0, #12
    95cc:	f04f 32ff 	mov.w	r2, #4294967295
    95d0:	f04f 33ff 	mov.w	r3, #4294967295
    95d4:	4640      	mov	r0, r8
    95d6:	f017 fbfd 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>

	switch (option) {
    95da:	2d07      	cmp	r5, #7
    95dc:	d803      	bhi.n	95e6 <net_context_get_option+0x3a>
    95de:	b155      	cbz	r5, 95f6 <net_context_get_option+0x4a>
	case NET_OPT_PRIORITY:
		ret = get_context_priority(context, value, len);
    95e0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    95e4:	e008      	b.n	95f8 <net_context_get_option+0x4c>
	switch (option) {
    95e6:	2d08      	cmp	r5, #8
    95e8:	d105      	bne.n	95f6 <net_context_get_option+0x4a>
	*((int *)value) = context->options.dscp_ecn;
    95ea:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    95ee:	603b      	str	r3, [r7, #0]
	if (len) {
    95f0:	b10e      	cbz	r6, 95f6 <net_context_get_option+0x4a>
		*len = sizeof(int);
    95f2:	2304      	movs	r3, #4
    95f4:	6033      	str	r3, [r6, #0]
	int ret = 0;
    95f6:	2400      	movs	r4, #0
	case NET_OPT_DSCP_ECN:
		ret = get_context_dscp_ecn(context, value, len);
		break;
	}

	k_mutex_unlock(&context->lock);
    95f8:	4640      	mov	r0, r8
    95fa:	f017 fbed 	bl	20dd8 <k_mutex_unlock.isra.0>

	return ret;
}
    95fe:	4620      	mov	r0, r4
    9600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    9604:	f06f 0415 	mvn.w	r4, #21
    9608:	e7f9      	b.n	95fe <net_context_get_option+0x52>
    960a:	bf00      	nop
    960c:	2000312c 	.word	0x2000312c

00009610 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
    9610:	f04f 32ff 	mov.w	r2, #4294967295
    9614:	2101      	movs	r1, #1
    9616:	4801      	ldr	r0, [pc, #4]	; (961c <net_context_init+0xc>)
    9618:	f01a bcf3 	b.w	24002 <z_impl_k_sem_init>
    961c:	20003114 	.word	0x20003114

00009620 <net_pkt_get_reserve_data>:
					       int line)
#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */
struct net_buf *net_pkt_get_reserve_data(struct net_buf_pool *pool,
					 size_t min_len, k_timeout_t timeout)
#endif /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */
{
    9620:	b5f0      	push	{r4, r5, r6, r7, lr}
    9622:	b087      	sub	sp, #28
    9624:	4606      	mov	r6, r0
    9626:	460f      	mov	r7, r1
    9628:	4615      	mov	r5, r2
    962a:	461c      	mov	r4, r3
	struct net_buf *frag;

	if (k_is_in_isr()) {
    962c:	f01a fbfc 	bl	23e28 <k_is_in_isr>
    9630:	b108      	cbz	r0, 9636 <net_pkt_get_reserve_data+0x16>
		timeout = K_NO_WAIT;
    9632:	2500      	movs	r5, #0
    9634:	462c      	mov	r4, r5
	}

#if defined(CONFIG_NET_BUF_FIXED_DATA_SIZE)
	if (min_len > CONFIG_NET_BUF_DATA_SIZE) {
    9636:	2f80      	cmp	r7, #128	; 0x80
    9638:	d807      	bhi.n	964a <net_pkt_get_reserve_data+0x2a>
	return net_buf_alloc_fixed(pool, timeout);
    963a:	462a      	mov	r2, r5
    963c:	4623      	mov	r3, r4
    963e:	4630      	mov	r0, r6
		pool2str(pool), get_name(pool), get_frees(pool),
		frag, frag->ref, caller, line);
#endif

	return frag;
}
    9640:	b007      	add	sp, #28
    9642:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9646:	f016 bcff 	b.w	20048 <net_buf_alloc_fixed>
		NET_ERR("Requested too large fragment. Increase CONFIG_NET_BUF_DATA_SIZE.");
    964a:	4b07      	ldr	r3, [pc, #28]	; (9668 <net_pkt_get_reserve_data+0x48>)
    964c:	9305      	str	r3, [sp, #20]
    964e:	2302      	movs	r3, #2
    9650:	9304      	str	r3, [sp, #16]
    9652:	2300      	movs	r3, #0
    9654:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9658:	4804      	ldr	r0, [pc, #16]	; (966c <net_pkt_get_reserve_data+0x4c>)
    965a:	aa04      	add	r2, sp, #16
    965c:	f7fb fc12 	bl	4e84 <z_impl_z_log_msg_static_create>
}
    9660:	2000      	movs	r0, #0
    9662:	b007      	add	sp, #28
    9664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9666:	bf00      	nop
    9668:	00032e49 	.word	0x00032e49
    966c:	00024d28 	.word	0x00024d28

00009670 <net_pkt_get_reserve_rx_data>:
}

#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_pkt_get_reserve_rx_data(size_t min_len, k_timeout_t timeout)
{
    9670:	4601      	mov	r1, r0
	return net_pkt_get_reserve_data(&rx_bufs, min_len, timeout);
    9672:	4801      	ldr	r0, [pc, #4]	; (9678 <net_pkt_get_reserve_rx_data+0x8>)
    9674:	f7ff bfd4 	b.w	9620 <net_pkt_get_reserve_data>
    9678:	20001364 	.word	0x20001364

0000967c <net_pkt_get_reserve_tx_data>:
}

struct net_buf *net_pkt_get_reserve_tx_data(size_t min_len, k_timeout_t timeout)
{
    967c:	4601      	mov	r1, r0
	return net_pkt_get_reserve_data(&tx_bufs, min_len, timeout);
    967e:	4801      	ldr	r0, [pc, #4]	; (9684 <net_pkt_get_reserve_tx_data+0x8>)
    9680:	f7ff bfce 	b.w	9620 <net_pkt_get_reserve_data>
    9684:	20001390 	.word	0x20001390

00009688 <net_pkt_get_frag>:
{
    9688:	b570      	push	{r4, r5, r6, lr}
    968a:	461d      	mov	r5, r3
	return pkt->context;
    968c:	6943      	ldr	r3, [r0, #20]
    968e:	460c      	mov	r4, r1
    9690:	4616      	mov	r6, r2
	if (context && context->data_pool) {
    9692:	b14b      	cbz	r3, 96a8 <net_pkt_get_frag+0x20>
    9694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9696:	b13b      	cbz	r3, 96a8 <net_pkt_get_frag+0x20>
		return net_pkt_get_reserve_data(context->data_pool(), min_len,
    9698:	4798      	blx	r3
    969a:	4632      	mov	r2, r6
    969c:	462b      	mov	r3, r5
    969e:	4621      	mov	r1, r4
}
    96a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_get_reserve_data(context->data_pool(), min_len,
    96a4:	f7ff bfbc 	b.w	9620 <net_pkt_get_reserve_data>
	if (pkt->slab == &rx_pkts) {
    96a8:	6842      	ldr	r2, [r0, #4]
    96aa:	4b07      	ldr	r3, [pc, #28]	; (96c8 <net_pkt_get_frag+0x40>)
		return net_pkt_get_reserve_rx_data(min_len, timeout);
    96ac:	4620      	mov	r0, r4
	if (pkt->slab == &rx_pkts) {
    96ae:	429a      	cmp	r2, r3
		return net_pkt_get_reserve_rx_data(min_len, timeout);
    96b0:	4632      	mov	r2, r6
    96b2:	462b      	mov	r3, r5
	if (pkt->slab == &rx_pkts) {
    96b4:	d103      	bne.n	96be <net_pkt_get_frag+0x36>
}
    96b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_get_reserve_rx_data(min_len, timeout);
    96ba:	f7ff bfd9 	b.w	9670 <net_pkt_get_reserve_rx_data>
}
    96be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_pkt_get_reserve_tx_data(min_len, timeout);
    96c2:	f7ff bfdb 	b.w	967c <net_pkt_get_reserve_tx_data>
    96c6:	bf00      	nop
    96c8:	20001180 	.word	0x20001180

000096cc <pkt_alloc>:
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout,
				 const char *caller, int line)
#else
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout)
#endif
{
    96cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    96ce:	4605      	mov	r5, r0
    96d0:	4616      	mov	r6, r2
    96d2:	461c      	mov	r4, r3
	struct net_pkt *pkt;
	uint32_t create_time;
	int ret;

	if (k_is_in_isr()) {
    96d4:	f01a fba8 	bl	23e28 <k_is_in_isr>
    96d8:	b108      	cbz	r0, 96de <pkt_alloc+0x12>
		timeout = K_NO_WAIT;
    96da:	2600      	movs	r6, #0
    96dc:	4634      	mov	r4, r6
		create_time = k_cycle_get_32();
	} else {
		ARG_UNUSED(create_time);
	}

	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
    96de:	a901      	add	r1, sp, #4
    96e0:	4632      	mov	r2, r6
    96e2:	4623      	mov	r3, r4
    96e4:	4628      	mov	r0, r5
    96e6:	f00b fe6d 	bl	153c4 <k_mem_slab_alloc>
	if (ret) {
    96ea:	4601      	mov	r1, r0
    96ec:	b990      	cbnz	r0, 9714 <pkt_alloc+0x48>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
    96ee:	9c01      	ldr	r4, [sp, #4]
    96f0:	2240      	movs	r2, #64	; 0x40
    96f2:	4620      	mov	r0, r4
    96f4:	f00d fe70 	bl	173d8 <memset>

	pkt->atomic_ref = ATOMIC_INIT(1);
    96f8:	2301      	movs	r3, #1
#define RX_DEFAULT_PRIORITY CONFIG_NET_RX_DEFAULT_PRIORITY
#else
#define RX_DEFAULT_PRIORITY 0
#endif

	if (&tx_pkts == slab) {
    96fa:	4a07      	ldr	r2, [pc, #28]	; (9718 <pkt_alloc+0x4c>)

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	net_pkt_alloc_add(pkt, true, caller, line);
#endif

	net_pkt_cursor_init(pkt);
    96fc:	4620      	mov	r0, r4
	if (&tx_pkts == slab) {
    96fe:	4295      	cmp	r5, r2
	pkt->atomic_ref = ATOMIC_INIT(1);
    9700:	6223      	str	r3, [r4, #32]
	pkt->slab = slab;
    9702:	6065      	str	r5, [r4, #4]
	pkt->priority = priority;
    9704:	bf08      	it	eq
    9706:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
	net_pkt_cursor_init(pkt);
    970a:	f017 fee4 	bl	214d6 <net_pkt_cursor_init>

	return pkt;
}
    970e:	4620      	mov	r0, r4
    9710:	b002      	add	sp, #8
    9712:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    9714:	2400      	movs	r4, #0
    9716:	e7fa      	b.n	970e <pkt_alloc+0x42>
    9718:	200011b8 	.word	0x200011b8

0000971c <net_pkt_alloc>:
struct net_pkt *net_pkt_alloc_debug(k_timeout_t timeout,
				    const char *caller, int line)
#else
struct net_pkt *net_pkt_alloc(k_timeout_t timeout)
#endif
{
    971c:	4602      	mov	r2, r0
    971e:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&tx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&tx_pkts, timeout);
    9720:	4801      	ldr	r0, [pc, #4]	; (9728 <net_pkt_alloc+0xc>)
    9722:	f7ff bfd3 	b.w	96cc <pkt_alloc>
    9726:	bf00      	nop
    9728:	200011b8 	.word	0x200011b8

0000972c <net_pkt_rx_alloc>:
struct net_pkt *net_pkt_rx_alloc_debug(k_timeout_t timeout,
				       const char *caller, int line)
#else
struct net_pkt *net_pkt_rx_alloc(k_timeout_t timeout)
#endif
{
    972c:	4602      	mov	r2, r0
    972e:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&rx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&rx_pkts, timeout);
    9730:	4801      	ldr	r0, [pc, #4]	; (9738 <net_pkt_rx_alloc+0xc>)
    9732:	f7ff bfcb 	b.w	96cc <pkt_alloc>
    9736:	bf00      	nop
    9738:	20001180 	.word	0x20001180

0000973c <net_pkt_alloc_buffer>:
{
    973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9740:	b085      	sub	sp, #20
    9742:	af00      	add	r7, sp, #0
    9744:	4680      	mov	r8, r0
    9746:	460e      	mov	r6, r1
    9748:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
    974c:	4691      	mov	r9, r2
    974e:	4605      	mov	r5, r0
    9750:	460c      	mov	r4, r1
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    9752:	f01a febb 	bl	244cc <sys_clock_timeout_end_calc>
    9756:	4682      	mov	sl, r0
    9758:	468b      	mov	fp, r1
	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
    975a:	b93e      	cbnz	r6, 976c <net_pkt_alloc_buffer+0x30>
    975c:	f1b9 0f00 	cmp.w	r9, #0
    9760:	d104      	bne.n	976c <net_pkt_alloc_buffer+0x30>
	return pkt->family;
    9762:	f898 3037 	ldrb.w	r3, [r8, #55]	; 0x37
    9766:	095b      	lsrs	r3, r3, #5
    9768:	f000 80b1 	beq.w	98ce <net_pkt_alloc_buffer+0x192>
	if (k_is_in_isr()) {
    976c:	f01a fb5c 	bl	23e28 <k_is_in_isr>
    9770:	b108      	cbz	r0, 9776 <net_pkt_alloc_buffer+0x3a>
		timeout = K_NO_WAIT;
    9772:	2500      	movs	r5, #0
    9774:	462c      	mov	r4, r5
	alloc_len = net_pkt_available_buffer(pkt);
    9776:	4640      	mov	r0, r8
    9778:	f017 fe4a 	bl	21410 <net_pkt_available_buffer>
	if (!alloc_len) {
    977c:	f898 2037 	ldrb.w	r2, [r8, #55]	; 0x37
    9780:	4603      	mov	r3, r0
    9782:	b968      	cbnz	r0, 97a0 <net_pkt_alloc_buffer+0x64>
	if (family == AF_UNSPEC) {
    9784:	0950      	lsrs	r0, r2, #5
    9786:	d00d      	beq.n	97a4 <net_pkt_alloc_buffer+0x68>
    9788:	4649      	mov	r1, r9
    978a:	f017 fd61 	bl	21250 <pkt_estimate_headers_length.part.0>
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
    978e:	4430      	add	r0, r6
	return pkt->iface;
    9790:	f8d8 6018 	ldr.w	r6, [r8, #24]
	return pkt->family;
    9794:	0952      	lsrs	r2, r2, #5
	if (net_pkt_iface(pkt)) {
    9796:	b93e      	cbnz	r6, 97a8 <net_pkt_alloc_buffer+0x6c>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    9798:	2a01      	cmp	r2, #1
    979a:	d009      	beq.n	97b0 <net_pkt_alloc_buffer+0x74>
			max_len = size;
    979c:	4606      	mov	r6, r0
    979e:	e00c      	b.n	97ba <net_pkt_alloc_buffer+0x7e>
	size_t hdr_len = 0;
    97a0:	2000      	movs	r0, #0
    97a2:	e7f4      	b.n	978e <net_pkt_alloc_buffer+0x52>
    97a4:	4618      	mov	r0, r3
    97a6:	e7f2      	b.n	978e <net_pkt_alloc_buffer+0x52>
	return iface->if_dev->mtu;
    97a8:	6831      	ldr	r1, [r6, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    97aa:	2a01      	cmp	r2, #1
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
    97ac:	8b0e      	ldrh	r6, [r1, #24]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    97ae:	d153      	bne.n	9858 <net_pkt_alloc_buffer+0x11c>
		max_len = MAX(max_len, NET_IPV4_MTU);
    97b0:	f5b6 7f10 	cmp.w	r6, #576	; 0x240
    97b4:	bf38      	it	cc
    97b6:	f44f 7610 	movcc.w	r6, #576	; 0x240
	max_len -= existing;
    97ba:	1af6      	subs	r6, r6, r3
	if (pkt->context) {
    97bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
	return MIN(size, max_len);
    97c0:	4286      	cmp	r6, r0
    97c2:	bf28      	it	cs
    97c4:	4606      	movcs	r6, r0
	if (pkt->context) {
    97c6:	2b00      	cmp	r3, #0
    97c8:	d14c      	bne.n	9864 <net_pkt_alloc_buffer+0x128>
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
    97ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
    97ce:	4944      	ldr	r1, [pc, #272]	; (98e0 <net_pkt_alloc_buffer+0x1a4>)
    97d0:	4a44      	ldr	r2, [pc, #272]	; (98e4 <net_pkt_alloc_buffer+0x1a8>)
    97d2:	4b45      	ldr	r3, [pc, #276]	; (98e8 <net_pkt_alloc_buffer+0x1ac>)
    97d4:	4288      	cmp	r0, r1
    97d6:	bf14      	ite	ne
    97d8:	4691      	movne	r9, r2
    97da:	4699      	moveq	r9, r3
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    97dc:	ea55 0304 	orrs.w	r3, r5, r4
    97e0:	d00f      	beq.n	9802 <net_pkt_alloc_buffer+0xc6>
    97e2:	f1b4 3fff 	cmp.w	r4, #4294967295
    97e6:	bf08      	it	eq
    97e8:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    97ec:	d009      	beq.n	9802 <net_pkt_alloc_buffer+0xc6>
		int64_t remaining = end - sys_clock_tick_get();
    97ee:	f00c fff1 	bl	167d4 <sys_clock_tick_get>
    97f2:	ebba 0500 	subs.w	r5, sl, r0
    97f6:	eb6b 0401 	sbc.w	r4, fp, r1
		if (remaining <= 0) {
    97fa:	2c00      	cmp	r4, #0
    97fc:	bfbc      	itt	lt
    97fe:	2500      	movlt	r5, #0
    9800:	462c      	movlt	r4, r5
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    9802:	4628      	mov	r0, r5
    9804:	4621      	mov	r1, r4
    9806:	f01a fe61 	bl	244cc <sys_clock_timeout_end_calc>
	struct net_buf *current = NULL;
    980a:	2300      	movs	r3, #0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    980c:	46b3      	mov	fp, r6
	struct net_buf *first = NULL;
    980e:	469a      	mov	sl, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    9810:	e9c7 1002 	strd	r1, r0, [r7, #8]
		new = net_buf_alloc_fixed(pool, timeout);
    9814:	607b      	str	r3, [r7, #4]
    9816:	462a      	mov	r2, r5
    9818:	4623      	mov	r3, r4
    981a:	4648      	mov	r0, r9
    981c:	f016 fc14 	bl	20048 <net_buf_alloc_fixed>
		if (!new) {
    9820:	6879      	ldr	r1, [r7, #4]
    9822:	4603      	mov	r3, r0
    9824:	bb30      	cbnz	r0, 9874 <net_pkt_alloc_buffer+0x138>
	if (first) {
    9826:	f1ba 0f00 	cmp.w	sl, #0
    982a:	d154      	bne.n	98d6 <net_pkt_alloc_buffer+0x19a>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
    982c:	466c      	mov	r4, sp
    982e:	b088      	sub	sp, #32
    9830:	466a      	mov	r2, sp
    9832:	4b2e      	ldr	r3, [pc, #184]	; (98ec <net_pkt_alloc_buffer+0x1b0>)
    9834:	e9c2 3605 	strd	r3, r6, [r2, #20]
    9838:	2303      	movs	r3, #3
    983a:	f842 3f10 	str.w	r3, [r2, #16]!
    983e:	482c      	ldr	r0, [pc, #176]	; (98f0 <net_pkt_alloc_buffer+0x1b4>)
    9840:	2300      	movs	r3, #0
    9842:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9846:	f7fb fb1d 	bl	4e84 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
    984a:	f06f 000b 	mvn.w	r0, #11
    984e:	46a5      	mov	sp, r4
}
    9850:	3714      	adds	r7, #20
    9852:	46bd      	mov	sp, r7
    9854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_if_l2(net_pkt_iface(pkt)) ==
    9858:	6849      	ldr	r1, [r1, #4]
    985a:	4a26      	ldr	r2, [pc, #152]	; (98f4 <net_pkt_alloc_buffer+0x1b8>)
    985c:	4291      	cmp	r1, r2
    985e:	d19d      	bne.n	979c <net_pkt_alloc_buffer+0x60>
			max_len += NET_ETH_MAX_HDR_SIZE;
    9860:	360e      	adds	r6, #14
    9862:	e7aa      	b.n	97ba <net_pkt_alloc_buffer+0x7e>
		pool = get_data_pool(pkt->context);
    9864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	if (context->data_pool) {
    9866:	2b00      	cmp	r3, #0
    9868:	d0af      	beq.n	97ca <net_pkt_alloc_buffer+0x8e>
		return context->data_pool();
    986a:	4798      	blx	r3
	if (!pool) {
    986c:	4681      	mov	r9, r0
    986e:	2800      	cmp	r0, #0
    9870:	d1b4      	bne.n	97dc <net_pkt_alloc_buffer+0xa0>
    9872:	e7aa      	b.n	97ca <net_pkt_alloc_buffer+0x8e>
		if (!first && !current) {
    9874:	f1ba 0f00 	cmp.w	sl, #0
    9878:	d100      	bne.n	987c <net_pkt_alloc_buffer+0x140>
    987a:	b351      	cbz	r1, 98d2 <net_pkt_alloc_buffer+0x196>
			current->frags = new;
    987c:	604b      	str	r3, [r1, #4]
		if (current->size > size) {
    987e:	8a5a      	ldrh	r2, [r3, #18]
    9880:	455a      	cmp	r2, fp
			current->size = size;
    9882:	bf88      	it	hi
    9884:	f8a3 b012 	strhhi.w	fp, [r3, #18]
		size -= current->size;
    9888:	8a5a      	ldrh	r2, [r3, #18]
    988a:	ebab 0b02 	sub.w	fp, fp, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    988e:	ea55 0204 	orrs.w	r2, r5, r4
    9892:	d012      	beq.n	98ba <net_pkt_alloc_buffer+0x17e>
    9894:	f1b4 3fff 	cmp.w	r4, #4294967295
    9898:	bf08      	it	eq
    989a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    989e:	d00c      	beq.n	98ba <net_pkt_alloc_buffer+0x17e>
    98a0:	607b      	str	r3, [r7, #4]
			int64_t remaining = end - sys_clock_tick_get();
    98a2:	f00c ff97 	bl	167d4 <sys_clock_tick_get>
    98a6:	68fb      	ldr	r3, [r7, #12]
    98a8:	1a1d      	subs	r5, r3, r0
    98aa:	68bb      	ldr	r3, [r7, #8]
    98ac:	eb63 0401 	sbc.w	r4, r3, r1
			if (remaining <= 0) {
    98b0:	2d01      	cmp	r5, #1
    98b2:	f174 0200 	sbcs.w	r2, r4, #0
    98b6:	687b      	ldr	r3, [r7, #4]
    98b8:	db02      	blt.n	98c0 <net_pkt_alloc_buffer+0x184>
	} while (size);
    98ba:	f1bb 0f00 	cmp.w	fp, #0
    98be:	d1a9      	bne.n	9814 <net_pkt_alloc_buffer+0xd8>
	if (!buf) {
    98c0:	f1ba 0f00 	cmp.w	sl, #0
    98c4:	d0b2      	beq.n	982c <net_pkt_alloc_buffer+0xf0>
	net_pkt_append_buffer(pkt, buf);
    98c6:	4651      	mov	r1, sl
    98c8:	4640      	mov	r0, r8
    98ca:	f017 fe1e 	bl	2150a <net_pkt_append_buffer>
		return 0;
    98ce:	2000      	movs	r0, #0
    98d0:	e7be      	b.n	9850 <net_pkt_alloc_buffer+0x114>
    98d2:	4682      	mov	sl, r0
    98d4:	e7d3      	b.n	987e <net_pkt_alloc_buffer+0x142>
		net_buf_unref(first);
    98d6:	4650      	mov	r0, sl
    98d8:	f7fd fdc4 	bl	7464 <net_buf_unref>
	if (!buf) {
    98dc:	e7a6      	b.n	982c <net_pkt_alloc_buffer+0xf0>
    98de:	bf00      	nop
    98e0:	200011b8 	.word	0x200011b8
    98e4:	20001364 	.word	0x20001364
    98e8:	20001390 	.word	0x20001390
    98ec:	00032e8a 	.word	0x00032e8a
    98f0:	00024d28 	.word	0x00024d28
    98f4:	20001424 	.word	0x20001424

000098f8 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
    98f8:	b530      	push	{r4, r5, lr}
    98fa:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
    98fc:	9300      	str	r3, [sp, #0]
    98fe:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    9902:	4613      	mov	r3, r2
    9904:	e9cd 4502 	strd	r4, r5, [sp, #8]
    9908:	460a      	mov	r2, r1
    990a:	4601      	mov	r1, r0
    990c:	4802      	ldr	r0, [pc, #8]	; (9918 <net_pkt_alloc_with_buffer+0x20>)
    990e:	f017 fe0d 	bl	2152c <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
    9912:	b005      	add	sp, #20
    9914:	bd30      	pop	{r4, r5, pc}
    9916:	bf00      	nop
    9918:	200011b8 	.word	0x200011b8

0000991c <net_pkt_get_data>:
	return 0;
}

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
    991c:	b5f0      	push	{r4, r5, r6, r7, lr}
    991e:	b087      	sub	sp, #28
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
    9920:	684e      	ldr	r6, [r1, #4]
{
    9922:	4604      	mov	r4, r0
    9924:	460d      	mov	r5, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
    9926:	f018 f811 	bl	2194c <net_pkt_get_contiguous_len>
		if (net_pkt_is_contiguous(pkt, access->size)) {
    992a:	4286      	cmp	r6, r0
    992c:	d803      	bhi.n	9936 <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
    992e:	6923      	ldr	r3, [r4, #16]
    9930:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
    9932:	6828      	ldr	r0, [r5, #0]
    9934:	e010      	b.n	9958 <net_pkt_get_data+0x3c>
	return pkt->overwrite;
    9936:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
			if (!access->data) {
    993a:	682b      	ldr	r3, [r5, #0]
		} else if (net_pkt_is_being_overwritten(pkt)) {
    993c:	07d2      	lsls	r2, r2, #31
    993e:	d5f8      	bpl.n	9932 <net_pkt_get_data+0x16>
			if (!access->data) {
    9940:	b963      	cbnz	r3, 995c <net_pkt_get_data+0x40>
				NET_ERR("Uncontiguous data"
    9942:	4a0c      	ldr	r2, [pc, #48]	; (9974 <net_pkt_get_data+0x58>)
    9944:	9205      	str	r2, [sp, #20]
    9946:	2202      	movs	r2, #2
    9948:	9204      	str	r2, [sp, #16]
    994a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    994e:	480a      	ldr	r0, [pc, #40]	; (9978 <net_pkt_get_data+0x5c>)
    9950:	aa04      	add	r2, sp, #16
    9952:	f7fb fa97 	bl	4e84 <z_impl_z_log_msg_static_create>
{
    9956:	2000      	movs	r0, #0
	}

	return NULL;
}
    9958:	b007      	add	sp, #28
    995a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (net_pkt_read(pkt, access->data, access->size)) {
    995c:	4619      	mov	r1, r3
	backup->pos = pkt->cursor.pos;
    995e:	e9d4 7603 	ldrd	r7, r6, [r4, #12]
    9962:	4620      	mov	r0, r4
    9964:	686a      	ldr	r2, [r5, #4]
    9966:	f017 feba 	bl	216de <net_pkt_read>
	pkt->cursor.pos = backup->pos;
    996a:	e9c4 7603 	strd	r7, r6, [r4, #12]
    996e:	2800      	cmp	r0, #0
    9970:	d0df      	beq.n	9932 <net_pkt_get_data+0x16>
    9972:	e7f0      	b.n	9956 <net_pkt_get_data+0x3a>
    9974:	00032eaf 	.word	0x00032eaf
    9978:	00024d28 	.word	0x00024d28

0000997c <net_tc_rx_init>:
	}
#endif
}

void net_tc_rx_init(void)
{
    997c:	b590      	push	{r4, r7, lr}
    997e:	b089      	sub	sp, #36	; 0x24
    9980:	af08      	add	r7, sp, #32
	z_impl_k_queue_init(queue);
    9982:	4c17      	ldr	r4, [pc, #92]	; (99e0 <net_tc_rx_init+0x64>)
    9984:	4620      	mov	r0, r4
    9986:	f01a fae4 	bl	23f52 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    998a:	f04f 32ff 	mov.w	r2, #4294967295
    998e:	f04f 33ff 	mov.w	r3, #4294967295
    9992:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9996:	2300      	movs	r3, #0
    9998:	4912      	ldr	r1, [pc, #72]	; (99e4 <net_tc_rx_init+0x68>)
    999a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    999e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    99a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    99a6:	4b10      	ldr	r3, [pc, #64]	; (99e8 <net_tc_rx_init+0x6c>)
    99a8:	9400      	str	r4, [sp, #0]
    99aa:	f104 0018 	add.w	r0, r4, #24
    99ae:	f00b fd8b 	bl	154c8 <z_impl_k_thread_create>
    99b2:	4603      	mov	r3, r0
		tid = k_thread_create(&rx_classes[i].handler, rx_stack[i],
				      K_KERNEL_STACK_SIZEOF(rx_stack[i]),
				      (k_thread_entry_t)tc_rx_handler,
				      &rx_classes[i].fifo, NULL, NULL,
				      priority, 0, K_FOREVER);
		if (!tid) {
    99b4:	b988      	cbnz	r0, 99da <net_tc_rx_init+0x5e>
			NET_ERR("Cannot create TC handler thread %d", i);
    99b6:	466c      	mov	r4, sp
    99b8:	b088      	sub	sp, #32
    99ba:	4622      	mov	r2, r4
    99bc:	490b      	ldr	r1, [pc, #44]	; (99ec <net_tc_rx_init+0x70>)
    99be:	e9c4 1005 	strd	r1, r0, [r4, #20]
    99c2:	2103      	movs	r1, #3
    99c4:	f842 1f10 	str.w	r1, [r2, #16]!
    99c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    99cc:	4808      	ldr	r0, [pc, #32]	; (99f0 <net_tc_rx_init+0x74>)
    99ce:	f7fb fa59 	bl	4e84 <z_impl_z_log_msg_static_create>
    99d2:	46a5      	mov	sp, r4
		}

		k_thread_start(tid);
	}
#endif
}
    99d4:	3704      	adds	r7, #4
    99d6:	46bd      	mov	sp, r7
    99d8:	bd90      	pop	{r4, r7, pc}
	z_impl_k_thread_start(thread);
    99da:	f01a fa30 	bl	23e3e <z_impl_k_thread_start>
    99de:	e7f9      	b.n	99d4 <net_tc_rx_init+0x58>
    99e0:	200023f8 	.word	0x200023f8
    99e4:	20009250 	.word	0x20009250
    99e8:	000219d1 	.word	0x000219d1
    99ec:	00032ed6 	.word	0x00032ed6
    99f0:	00024d40 	.word	0x00024d40

000099f4 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    99f4:	4602      	mov	r2, r0
    99f6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    99f8:	4801      	ldr	r0, [pc, #4]	; (9a00 <k_mutex_lock.constprop.0.isra.0+0xc>)
    99fa:	f00b bebb 	b.w	15774 <z_impl_k_mutex_lock>
    99fe:	bf00      	nop
    9a00:	20001224 	.word	0x20001224

00009a04 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    9a04:	4801      	ldr	r0, [pc, #4]	; (9a0c <k_mutex_unlock.constprop.0.isra.0+0x8>)
    9a06:	f00b bf2f 	b.w	15868 <z_impl_k_mutex_unlock>
    9a0a:	bf00      	nop
    9a0c:	20001224 	.word	0x20001224

00009a10 <conn_set_unused>:
	sys_slist_prepend(&conn_used, &conn->node);
	k_mutex_unlock(&conn_lock);
}

static void conn_set_unused(struct net_conn *conn)
{
    9a10:	b510      	push	{r4, lr}
    9a12:	4604      	mov	r4, r0
    9a14:	2224      	movs	r2, #36	; 0x24
    9a16:	2100      	movs	r1, #0
    9a18:	f00d fcde 	bl	173d8 <memset>
	(void)memset(conn, 0, sizeof(*conn));

	k_mutex_lock(&conn_lock, K_FOREVER);
    9a1c:	f04f 30ff 	mov.w	r0, #4294967295
    9a20:	f04f 31ff 	mov.w	r1, #4294967295
    9a24:	f7ff ffe6 	bl	99f4 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    9a28:	4b05      	ldr	r3, [pc, #20]	; (9a40 <conn_set_unused+0x30>)
    9a2a:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    9a2c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    9a2e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    9a30:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    9a32:	b902      	cbnz	r2, 9a36 <conn_set_unused+0x26>
	list->tail = node;
    9a34:	605c      	str	r4, [r3, #4]
	sys_slist_prepend(&conn_unused, &conn->node);
	k_mutex_unlock(&conn_lock);
}
    9a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&conn_lock);
    9a3a:	f7ff bfe3 	b.w	9a04 <k_mutex_unlock.constprop.0.isra.0>
    9a3e:	bf00      	nop
    9a40:	200036fc 	.word	0x200036fc

00009a44 <net_conn_register>:
		      uint16_t local_port,
		      struct net_context *context,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
    9a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a48:	b089      	sub	sp, #36	; 0x24
    9a4a:	af00      	add	r7, sp, #0
    9a4c:	6079      	str	r1, [r7, #4]
    9a4e:	4682      	mov	sl, r0
	k_mutex_lock(&conn_lock, K_FOREVER);
    9a50:	f04f 31ff 	mov.w	r1, #4294967295
    9a54:	f04f 30ff 	mov.w	r0, #4294967295
{
    9a58:	4691      	mov	r9, r2
    9a5a:	469b      	mov	fp, r3
    9a5c:	f8b7 8048 	ldrh.w	r8, [r7, #72]	; 0x48
    9a60:	f8b7 604c 	ldrh.w	r6, [r7, #76]	; 0x4c
	k_mutex_lock(&conn_lock, K_FOREVER);
    9a64:	f7ff ffc6 	bl	99f4 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    9a68:	497e      	ldr	r1, [pc, #504]	; (9c64 <net_conn_register+0x220>)
    9a6a:	680c      	ldr	r4, [r1, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
    9a6c:	b10c      	cbz	r4, 9a72 <net_conn_register+0x2e>
	return node->next;
    9a6e:	6821      	ldr	r1, [r4, #0]
    9a70:	b984      	cbnz	r4, 9a94 <net_conn_register+0x50>
	k_mutex_unlock(&conn_lock);
    9a72:	f7ff ffc7 	bl	9a04 <k_mutex_unlock.constprop.0.isra.0>
	k_mutex_lock(&conn_lock, K_FOREVER);
    9a76:	f04f 31ff 	mov.w	r1, #4294967295
    9a7a:	f04f 30ff 	mov.w	r0, #4294967295
    9a7e:	f7ff ffb9 	bl	99f4 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    9a82:	4979      	ldr	r1, [pc, #484]	; (9c68 <net_conn_register+0x224>)
    9a84:	680c      	ldr	r4, [r1, #0]
	if (!node) {
    9a86:	2c00      	cmp	r4, #0
    9a88:	d163      	bne.n	9b52 <net_conn_register+0x10e>
		k_mutex_unlock(&conn_lock);
    9a8a:	f7ff ffbb 	bl	9a04 <k_mutex_unlock.constprop.0.isra.0>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
    9a8e:	f06f 0001 	mvn.w	r0, #1
    9a92:	e055      	b.n	9b40 <net_conn_register+0xfc>
		if (conn->proto != proto) {
    9a94:	8c20      	ldrh	r0, [r4, #32]
    9a96:	4550      	cmp	r0, sl
    9a98:	d118      	bne.n	9acc <net_conn_register+0x88>
		if (conn->family != family) {
    9a9a:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    9a9e:	687b      	ldr	r3, [r7, #4]
    9aa0:	4298      	cmp	r0, r3
    9aa2:	d113      	bne.n	9acc <net_conn_register+0x88>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
    9aa4:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    9aa8:	f000 0502 	and.w	r5, r0, #2
		if (remote_addr) {
    9aac:	f1b9 0f00 	cmp.w	r9, #0
    9ab0:	d012      	beq.n	9ad8 <net_conn_register+0x94>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
    9ab2:	b15d      	cbz	r5, 9acc <net_conn_register+0x88>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9ab4:	f8b9 5000 	ldrh.w	r5, [r9]
    9ab8:	2d01      	cmp	r5, #1
    9aba:	d107      	bne.n	9acc <net_conn_register+0x88>
				   remote_addr->sa_family == AF_INET &&
    9abc:	88a5      	ldrh	r5, [r4, #4]
    9abe:	2d01      	cmp	r5, #1
    9ac0:	d104      	bne.n	9acc <net_conn_register+0x88>
    9ac2:	f8d9 c004 	ldr.w	ip, [r9, #4]
    9ac6:	68a5      	ldr	r5, [r4, #8]
				if (!net_ipv4_addr_cmp(
    9ac8:	45ac      	cmp	ip, r5
    9aca:	d007      	beq.n	9adc <net_conn_register+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
    9acc:	2900      	cmp	r1, #0
    9ace:	d03e      	beq.n	9b4e <net_conn_register+0x10a>
	return node->next;
    9ad0:	6808      	ldr	r0, [r1, #0]
    9ad2:	460c      	mov	r4, r1
    9ad4:	4601      	mov	r1, r0
    9ad6:	e7cb      	b.n	9a70 <net_conn_register+0x2c>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
    9ad8:	2d00      	cmp	r5, #0
    9ada:	d1f7      	bne.n	9acc <net_conn_register+0x88>
		if (local_addr) {
    9adc:	f000 0004 	and.w	r0, r0, #4
    9ae0:	f1bb 0f00 	cmp.w	fp, #0
    9ae4:	d030      	beq.n	9b48 <net_conn_register+0x104>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d0f0      	beq.n	9acc <net_conn_register+0x88>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9aea:	f8bb 0000 	ldrh.w	r0, [fp]
    9aee:	2801      	cmp	r0, #1
    9af0:	d1ec      	bne.n	9acc <net_conn_register+0x88>
				   local_addr->sa_family == AF_INET &&
    9af2:	89a0      	ldrh	r0, [r4, #12]
    9af4:	2801      	cmp	r0, #1
    9af6:	d1e9      	bne.n	9acc <net_conn_register+0x88>
    9af8:	f8db 5004 	ldr.w	r5, [fp, #4]
    9afc:	6920      	ldr	r0, [r4, #16]
				if (!net_ipv4_addr_cmp(
    9afe:	4285      	cmp	r5, r0
    9b00:	d1e4      	bne.n	9acc <net_conn_register+0x88>
		if (net_sin(&conn->remote_addr)->sin_port !=
    9b02:	88e5      	ldrh	r5, [r4, #6]
    9b04:	fa98 f098 	rev16.w	r0, r8
    9b08:	b280      	uxth	r0, r0
    9b0a:	4285      	cmp	r5, r0
    9b0c:	d1de      	bne.n	9acc <net_conn_register+0x88>
		if (net_sin(&conn->local_addr)->sin_port !=
    9b0e:	89e5      	ldrh	r5, [r4, #14]
    9b10:	ba70      	rev16	r0, r6
    9b12:	b280      	uxth	r0, r0
    9b14:	4285      	cmp	r5, r0
    9b16:	d1d9      	bne.n	9acc <net_conn_register+0x88>
		k_mutex_unlock(&conn_lock);
    9b18:	f7ff ff74 	bl	9a04 <k_mutex_unlock.constprop.0.isra.0>
		NET_ERR("Identical connection handler %p already found.", conn);
    9b1c:	466d      	mov	r5, sp
    9b1e:	b088      	sub	sp, #32
    9b20:	466a      	mov	r2, sp
    9b22:	4b52      	ldr	r3, [pc, #328]	; (9c6c <net_conn_register+0x228>)
    9b24:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9b28:	2303      	movs	r3, #3
    9b2a:	f842 3f10 	str.w	r3, [r2, #16]!
    9b2e:	4850      	ldr	r0, [pc, #320]	; (9c70 <net_conn_register+0x22c>)
    9b30:	2300      	movs	r3, #0
    9b32:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9b36:	f7fb f9a5 	bl	4e84 <z_impl_z_log_msg_static_create>
		return -EALREADY;
    9b3a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9b3e:	46ad      	mov	sp, r5

	return 0;
error:
	conn_set_unused(conn);
	return -EINVAL;
}
    9b40:	3724      	adds	r7, #36	; 0x24
    9b42:	46bd      	mov	sp, r7
    9b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
    9b48:	2800      	cmp	r0, #0
    9b4a:	d0da      	beq.n	9b02 <net_conn_register+0xbe>
    9b4c:	e7be      	b.n	9acc <net_conn_register+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
    9b4e:	4608      	mov	r0, r1
    9b50:	e7bf      	b.n	9ad2 <net_conn_register+0x8e>
Z_GENLIST_REMOVE(slist, snode)
    9b52:	6848      	ldr	r0, [r1, #4]
	return node->next;
    9b54:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9b56:	4284      	cmp	r4, r0
	list->tail = node;
    9b58:	bf08      	it	eq
    9b5a:	604d      	streq	r5, [r1, #4]
	list->head = node;
    9b5c:	600d      	str	r5, [r1, #0]
	parent->next = child;
    9b5e:	2500      	movs	r5, #0
    9b60:	6025      	str	r5, [r4, #0]
	k_mutex_unlock(&conn_lock);
    9b62:	f7ff ff4f 	bl	9a04 <k_mutex_unlock.constprop.0.isra.0>
	if (remote_addr) {
    9b66:	f1b9 0f00 	cmp.w	r9, #0
    9b6a:	d042      	beq.n	9bf2 <net_conn_register+0x1ae>
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9b6c:	f8b9 1000 	ldrh.w	r1, [r9]
    9b70:	2901      	cmp	r1, #1
    9b72:	d12c      	bne.n	9bce <net_conn_register+0x18a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9b74:	f8d9 1000 	ldr.w	r1, [r9]
    9b78:	6061      	str	r1, [r4, #4]
    9b7a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    9b7e:	60a1      	str	r1, [r4, #8]
			if (net_sin(remote_addr)->sin_addr.s_addr) {
    9b80:	f8d9 5004 	ldr.w	r5, [r9, #4]
    9b84:	3d00      	subs	r5, #0
    9b86:	bf18      	it	ne
    9b88:	2501      	movne	r5, #1
    9b8a:	016d      	lsls	r5, r5, #5
		flags |= NET_CONN_REMOTE_ADDR_SET;
    9b8c:	f045 0502 	orr.w	r5, r5, #2
	if (local_addr) {
    9b90:	f1bb 0f00 	cmp.w	fp, #0
    9b94:	d031      	beq.n	9bfa <net_conn_register+0x1b6>
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9b96:	f8bb 1000 	ldrh.w	r1, [fp]
    9b9a:	2901      	cmp	r1, #1
    9b9c:	d12b      	bne.n	9bf6 <net_conn_register+0x1b2>
    9b9e:	f8db 1000 	ldr.w	r1, [fp]
    9ba2:	60e1      	str	r1, [r4, #12]
    9ba4:	f8db 1004 	ldr.w	r1, [fp, #4]
    9ba8:	6121      	str	r1, [r4, #16]
			if (net_sin(local_addr)->sin_addr.s_addr) {
    9baa:	f8db 1004 	ldr.w	r1, [fp, #4]
    9bae:	b109      	cbz	r1, 9bb4 <net_conn_register+0x170>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
    9bb0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
		flags |= NET_CONN_LOCAL_ADDR_SET;
    9bb4:	f045 0504 	orr.w	r5, r5, #4
	if (remote_addr && local_addr) {
    9bb8:	f1b9 0f00 	cmp.w	r9, #0
    9bbc:	d01d      	beq.n	9bfa <net_conn_register+0x1b6>
		if (remote_addr->sa_family != local_addr->sa_family) {
    9bbe:	f8b9 2000 	ldrh.w	r2, [r9]
    9bc2:	f8bb 3000 	ldrh.w	r3, [fp]
    9bc6:	429a      	cmp	r2, r3
    9bc8:	d017      	beq.n	9bfa <net_conn_register+0x1b6>
			NET_ERR("Address families different");
    9bca:	4b2a      	ldr	r3, [pc, #168]	; (9c74 <net_conn_register+0x230>)
    9bcc:	e000      	b.n	9bd0 <net_conn_register+0x18c>
			NET_ERR("Remote address family not set");
    9bce:	4b2a      	ldr	r3, [pc, #168]	; (9c78 <net_conn_register+0x234>)
			NET_ERR("Address families different");
    9bd0:	61fb      	str	r3, [r7, #28]
    9bd2:	2302      	movs	r3, #2
    9bd4:	61bb      	str	r3, [r7, #24]
    9bd6:	2300      	movs	r3, #0
    9bd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9bdc:	4824      	ldr	r0, [pc, #144]	; (9c70 <net_conn_register+0x22c>)
    9bde:	f107 0218 	add.w	r2, r7, #24
    9be2:	f7fb f94f 	bl	4e84 <z_impl_z_log_msg_static_create>
	conn_set_unused(conn);
    9be6:	4620      	mov	r0, r4
    9be8:	f7ff ff12 	bl	9a10 <conn_set_unused>
	return -EINVAL;
    9bec:	f06f 0015 	mvn.w	r0, #21
    9bf0:	e7a6      	b.n	9b40 <net_conn_register+0xfc>
	uint8_t flags = 0U;
    9bf2:	464d      	mov	r5, r9
    9bf4:	e7cc      	b.n	9b90 <net_conn_register+0x14c>
			NET_ERR("Local address family not set");
    9bf6:	4b21      	ldr	r3, [pc, #132]	; (9c7c <net_conn_register+0x238>)
    9bf8:	e7ea      	b.n	9bd0 <net_conn_register+0x18c>
	if (remote_port) {
    9bfa:	f1b8 0f00 	cmp.w	r8, #0
    9bfe:	d005      	beq.n	9c0c <net_conn_register+0x1c8>
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
    9c00:	fa98 f898 	rev16.w	r8, r8
		flags |= NET_CONN_REMOTE_PORT_SPEC;
    9c04:	f045 0508 	orr.w	r5, r5, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
    9c08:	f8a4 8006 	strh.w	r8, [r4, #6]
	if (local_port) {
    9c0c:	b11e      	cbz	r6, 9c16 <net_conn_register+0x1d2>
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
    9c0e:	ba76      	rev16	r6, r6
		flags |= NET_CONN_LOCAL_PORT_SPEC;
    9c10:	f045 0510 	orr.w	r5, r5, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
    9c14:	81e6      	strh	r6, [r4, #14]
	conn->cb = cb;
    9c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	conn->flags = flags;
    9c18:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
	conn->cb = cb;
    9c1c:	6163      	str	r3, [r4, #20]
	conn->user_data = user_data;
    9c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	conn->proto = proto;
    9c20:	f8a4 a020 	strh.w	sl, [r4, #32]
	conn->user_data = user_data;
    9c24:	61e3      	str	r3, [r4, #28]
	conn->family = family;
    9c26:	687b      	ldr	r3, [r7, #4]
    9c28:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	conn->context = context;
    9c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9c2e:	61a3      	str	r3, [r4, #24]
	if (handle) {
    9c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9c32:	b103      	cbz	r3, 9c36 <net_conn_register+0x1f2>
		*handle = (struct net_conn_handle *)conn;
    9c34:	601c      	str	r4, [r3, #0]
	conn->flags |= NET_CONN_IN_USE;
    9c36:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	k_mutex_lock(&conn_lock, K_FOREVER);
    9c3a:	f04f 30ff 	mov.w	r0, #4294967295
	conn->flags |= NET_CONN_IN_USE;
    9c3e:	f043 0301 	orr.w	r3, r3, #1
    9c42:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	k_mutex_lock(&conn_lock, K_FOREVER);
    9c46:	f04f 31ff 	mov.w	r1, #4294967295
    9c4a:	f7ff fed3 	bl	99f4 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    9c4e:	4b05      	ldr	r3, [pc, #20]	; (9c64 <net_conn_register+0x220>)
    9c50:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    9c52:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    9c54:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    9c56:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    9c58:	b902      	cbnz	r2, 9c5c <net_conn_register+0x218>
	list->tail = node;
    9c5a:	605c      	str	r4, [r3, #4]
	k_mutex_unlock(&conn_lock);
    9c5c:	f7ff fed2 	bl	9a04 <k_mutex_unlock.constprop.0.isra.0>
	return 0;
    9c60:	2000      	movs	r0, #0
}
    9c62:	e76d      	b.n	9b40 <net_conn_register+0xfc>
    9c64:	200036f4 	.word	0x200036f4
    9c68:	200036fc 	.word	0x200036fc
    9c6c:	00032f00 	.word	0x00032f00
    9c70:	00024cd8 	.word	0x00024cd8
    9c74:	00032f6a 	.word	0x00032f6a
    9c78:	00032f2f 	.word	0x00032f2f
    9c7c:	00032f4d 	.word	0x00032f4d

00009c80 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
    9c80:	4b1b      	ldr	r3, [pc, #108]	; (9cf0 <net_conn_unregister+0x70>)
{
    9c82:	b510      	push	{r4, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
    9c84:	4298      	cmp	r0, r3
{
    9c86:	4604      	mov	r4, r0
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
    9c88:	d32c      	bcc.n	9ce4 <net_conn_unregister+0x64>
    9c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
    9c8e:	4298      	cmp	r0, r3
    9c90:	d828      	bhi.n	9ce4 <net_conn_unregister+0x64>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
    9c92:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    9c96:	07db      	lsls	r3, r3, #31
    9c98:	d527      	bpl.n	9cea <net_conn_unregister+0x6a>
		return -ENOENT;
	}

	NET_DBG("Connection handler %p removed", conn);

	k_mutex_lock(&conn_lock, K_FOREVER);
    9c9a:	f04f 31ff 	mov.w	r1, #4294967295
    9c9e:	f04f 30ff 	mov.w	r0, #4294967295
    9ca2:	f7ff fea7 	bl	99f4 <k_mutex_lock.constprop.0.isra.0>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ca6:	2100      	movs	r1, #0
	return list->head;
    9ca8:	4b12      	ldr	r3, [pc, #72]	; (9cf4 <net_conn_unregister+0x74>)
    9caa:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9cac:	b152      	cbz	r2, 9cc4 <net_conn_unregister+0x44>
    9cae:	4294      	cmp	r4, r2
    9cb0:	d115      	bne.n	9cde <net_conn_unregister+0x5e>
	return node->next;
    9cb2:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9cb4:	b969      	cbnz	r1, 9cd2 <net_conn_unregister+0x52>
    9cb6:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    9cb8:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    9cba:	428c      	cmp	r4, r1
    9cbc:	d100      	bne.n	9cc0 <net_conn_unregister+0x40>
	list->tail = node;
    9cbe:	605a      	str	r2, [r3, #4]
	parent->next = child;
    9cc0:	2300      	movs	r3, #0
    9cc2:	6023      	str	r3, [r4, #0]
	sys_slist_find_and_remove(&conn_used, &conn->node);
	k_mutex_unlock(&conn_lock);
    9cc4:	f7ff fe9e 	bl	9a04 <k_mutex_unlock.constprop.0.isra.0>

	conn_set_unused(conn);
    9cc8:	4620      	mov	r0, r4
    9cca:	f7ff fea1 	bl	9a10 <conn_set_unused>

	return 0;
    9cce:	2000      	movs	r0, #0
}
    9cd0:	bd10      	pop	{r4, pc}
    9cd2:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    9cd4:	685a      	ldr	r2, [r3, #4]
    9cd6:	4294      	cmp	r4, r2
	list->tail = node;
    9cd8:	bf08      	it	eq
    9cda:	6059      	streq	r1, [r3, #4]
}
    9cdc:	e7f0      	b.n	9cc0 <net_conn_unregister+0x40>
	return node->next;
    9cde:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ce0:	6812      	ldr	r2, [r2, #0]
    9ce2:	e7e3      	b.n	9cac <net_conn_unregister+0x2c>
		return -EINVAL;
    9ce4:	f06f 0015 	mvn.w	r0, #21
    9ce8:	e7f2      	b.n	9cd0 <net_conn_unregister+0x50>
		return -ENOENT;
    9cea:	f06f 0001 	mvn.w	r0, #1
    9cee:	e7ef      	b.n	9cd0 <net_conn_unregister+0x50>
    9cf0:	20003704 	.word	0x20003704
    9cf4:	200036f4 	.word	0x200036f4

00009cf8 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				uint8_t proto,
				union net_proto_header *proto_hdr)
{
    9cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cfc:	4699      	mov	r9, r3
	return pkt->family;
    9cfe:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
    9d02:	b089      	sub	sp, #36	; 0x24
    9d04:	095b      	lsrs	r3, r3, #5
    9d06:	9304      	str	r3, [sp, #16]
	struct net_if *pkt_iface = net_pkt_iface(pkt);
	uint8_t pkt_family = net_pkt_family(pkt);
	uint16_t src_port = 0U, dst_port = 0U;

	if (IS_ENABLED(CONFIG_NET_IP) && (pkt_family == AF_INET || pkt_family == AF_INET6)) {
    9d08:	3b01      	subs	r3, #1
    9d0a:	2b01      	cmp	r3, #1
{
    9d0c:	4605      	mov	r5, r0
    9d0e:	460e      	mov	r6, r1
	return pkt->iface;
    9d10:	f8d0 8018 	ldr.w	r8, [r0, #24]
    9d14:	9203      	str	r2, [sp, #12]
	if (IS_ENABLED(CONFIG_NET_IP) && (pkt_family == AF_INET || pkt_family == AF_INET6)) {
    9d16:	d844      	bhi.n	9da2 <net_conn_input+0xaa>
		if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
    9d18:	2a11      	cmp	r2, #17
    9d1a:	d13b      	bne.n	9d94 <net_conn_input+0x9c>
			src_port = proto_hdr->udp->src_port;
    9d1c:	f8d9 3000 	ldr.w	r3, [r9]
			dst_port = proto_hdr->udp->dst_port;
		} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
			if (proto_hdr->tcp == NULL) {
				return NET_DROP;
			}
			src_port = proto_hdr->tcp->src_port;
    9d20:	881a      	ldrh	r2, [r3, #0]
    9d22:	9202      	str	r2, [sp, #8]
			dst_port = proto_hdr->tcp->dst_port;
    9d24:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
    9d28:	9b04      	ldr	r3, [sp, #16]
    9d2a:	2b01      	cmp	r3, #1
    9d2c:	d152      	bne.n	9dd4 <net_conn_input+0xdc>
			(struct in_addr *)ip_hdr->ipv4->src);
    9d2e:	6837      	ldr	r7, [r6, #0]
 */
static inline bool net_ipv4_is_my_addr(const struct in_addr *addr)
{
	bool ret;

	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
    9d30:	2100      	movs	r1, #0
    9d32:	f107 040c 	add.w	r4, r7, #12
    9d36:	4620      	mov	r0, r4
    9d38:	f7fe f9e2 	bl	8100 <net_if_ipv4_addr_lookup>
	if (!ret) {
    9d3c:	4682      	mov	sl, r0
    9d3e:	2800      	cmp	r0, #0
    9d40:	d036      	beq.n	9db0 <net_conn_input+0xb8>
		}
		if (!conn_are_endpoints_valid(pkt, pkt_family, ip_hdr, src_port, dst_port)) {
    9d42:	9b02      	ldr	r3, [sp, #8]
    9d44:	459b      	cmp	fp, r3
    9d46:	d02c      	beq.n	9da2 <net_conn_input+0xaa>
	if (IS_ENABLED(CONFIG_NET_IP)) {
		/* If we receive a packet with multicast destination address, we might
		 * need to deliver the packet to multiple recipients.
		 */
		if (IS_ENABLED(CONFIG_NET_IPV4) && pkt_family == AF_INET) {
			if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->ipv4->dst)) {
    9d48:	6831      	ldr	r1, [r6, #0]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
    9d4a:	690b      	ldr	r3, [r1, #16]
    9d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9d50:	2be0      	cmp	r3, #224	; 0xe0
    9d52:	d041      	beq.n	9dd8 <net_conn_input+0xe0>
				is_mcast_pkt = true;
			} else if (net_if_ipv4_is_addr_bcast(pkt_iface,
    9d54:	4640      	mov	r0, r8
    9d56:	3110      	adds	r1, #16
    9d58:	f7fe f938 	bl	7fcc <net_if_ipv4_is_addr_bcast>
    9d5c:	4607      	mov	r7, r0
	bool is_mcast_pkt = false;
    9d5e:	f04f 0a00 	mov.w	sl, #0
	return list->head;
    9d62:	4b6b      	ldr	r3, [pc, #428]	; (9f10 <net_conn_input+0x218>)
    9d64:	2100      	movs	r1, #0
    9d66:	681c      	ldr	r4, [r3, #0]
    9d68:	f04f 33ff 	mov.w	r3, #4294967295
    9d6c:	f04f 0800 	mov.w	r8, #0
    9d70:	e9cd 1305 	strd	r1, r3, [sp, #20]
		} else if (IS_ENABLED(CONFIG_NET_IPV6) && pkt_family == AF_INET6) {
			is_mcast_pkt = net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->ipv6->dst);
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
    9d74:	bba4      	cbnz	r4, 9de0 <net_conn_input+0xe8>
			net_pkt_unref(pkt);
			return NET_OK;
		}
	}

	if (IS_ENABLED(CONFIG_NET_IP) && is_mcast_pkt && mcast_pkt_delivered) {
    9d76:	f1ba 0f00 	cmp.w	sl, #0
    9d7a:	f000 80bc 	beq.w	9ef6 <net_conn_input+0x1fe>
    9d7e:	9b05      	ldr	r3, [sp, #20]
    9d80:	2b00      	cmp	r3, #0
    9d82:	f000 80a5 	beq.w	9ed0 <net_conn_input+0x1d8>
		/* As one or more multicast packets
		 * have already been delivered in the loop above,
		 * we shall not call the callback again here.
		 */
		net_pkt_unref(pkt);
    9d86:	4628      	mov	r0, r5
    9d88:	f017 fb14 	bl	213b4 <net_pkt_unref>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
    9d8c:	4620      	mov	r0, r4

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
}
    9d8e:	b009      	add	sp, #36	; 0x24
    9d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
    9d94:	9b03      	ldr	r3, [sp, #12]
    9d96:	2b06      	cmp	r3, #6
    9d98:	d105      	bne.n	9da6 <net_conn_input+0xae>
			if (proto_hdr->tcp == NULL) {
    9d9a:	f8d9 3000 	ldr.w	r3, [r9]
    9d9e:	2b00      	cmp	r3, #0
    9da0:	d1be      	bne.n	9d20 <net_conn_input+0x28>
				return NET_DROP;
    9da2:	2002      	movs	r0, #2
    9da4:	e7f3      	b.n	9d8e <net_conn_input+0x96>
	uint16_t src_port = 0U, dst_port = 0U;
    9da6:	f04f 0b00 	mov.w	fp, #0
    9daa:	f8cd b008 	str.w	fp, [sp, #8]
    9dae:	e7bb      	b.n	9d28 <net_conn_input+0x30>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    9db0:	f7fe fe42 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    9db4:	68fa      	ldr	r2, [r7, #12]
    9db6:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
    9db8:	429a      	cmp	r2, r3
    9dba:	d0c2      	beq.n	9d42 <net_conn_input+0x4a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
    9dbc:	4621      	mov	r1, r4
    9dbe:	4650      	mov	r0, sl
    9dc0:	f7fe f904 	bl	7fcc <net_if_ipv4_is_addr_bcast>
			ip_hdr->ipv4->src, ip_hdr->ipv4->dst);
    9dc4:	6833      	ldr	r3, [r6, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
    9dc6:	68da      	ldr	r2, [r3, #12]
    9dc8:	691b      	ldr	r3, [r3, #16]
		(is_same_src_and_dst_addr || is_my_src_addr) && is_same_src_and_dst_port;
    9dca:	429a      	cmp	r2, r3
    9dcc:	d0b9      	beq.n	9d42 <net_conn_input+0x4a>
    9dce:	2800      	cmp	r0, #0
    9dd0:	d0ba      	beq.n	9d48 <net_conn_input+0x50>
    9dd2:	e7b6      	b.n	9d42 <net_conn_input+0x4a>
	bool is_bcast_pkt = false;
    9dd4:	2700      	movs	r7, #0
    9dd6:	e7c2      	b.n	9d5e <net_conn_input+0x66>
    9dd8:	2700      	movs	r7, #0
				is_mcast_pkt = true;
    9dda:	f04f 0a01 	mov.w	sl, #1
    9dde:	e7c0      	b.n	9d62 <net_conn_input+0x6a>
		if (conn->context != NULL &&
    9de0:	69a3      	ldr	r3, [r4, #24]
    9de2:	2b00      	cmp	r3, #0
    9de4:	d145      	bne.n	9e72 <net_conn_input+0x17a>
		if (conn->family != AF_UNSPEC &&
    9de6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    9dea:	2b00      	cmp	r3, #0
    9dec:	d150      	bne.n	9e90 <net_conn_input+0x198>
		if (conn->proto != proto) {
    9dee:	8c23      	ldrh	r3, [r4, #32]
    9df0:	9a03      	ldr	r2, [sp, #12]
    9df2:	4293      	cmp	r3, r2
    9df4:	d14a      	bne.n	9e8c <net_conn_input+0x194>
			if (net_sin(&conn->remote_addr)->sin_port &&
    9df6:	88e3      	ldrh	r3, [r4, #6]
    9df8:	b113      	cbz	r3, 9e00 <net_conn_input+0x108>
    9dfa:	9a02      	ldr	r2, [sp, #8]
    9dfc:	4293      	cmp	r3, r2
    9dfe:	d145      	bne.n	9e8c <net_conn_input+0x194>
			if (net_sin(&conn->local_addr)->sin_port &&
    9e00:	89e3      	ldrh	r3, [r4, #14]
    9e02:	b10b      	cbz	r3, 9e08 <net_conn_input+0x110>
    9e04:	455b      	cmp	r3, fp
    9e06:	d141      	bne.n	9e8c <net_conn_input+0x194>
			if ((conn->flags & NET_CONN_REMOTE_ADDR_SET) &&
    9e08:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    9e0c:	0798      	lsls	r0, r3, #30
    9e0e:	d50d      	bpl.n	9e2c <net_conn_input+0x134>
	if (addr->sa_family != net_pkt_family(pkt)) {
    9e10:	88a2      	ldrh	r2, [r4, #4]
	return pkt->family;
    9e12:	f895 1037 	ldrb.w	r1, [r5, #55]	; 0x37
    9e16:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
    9e1a:	d137      	bne.n	9e8c <net_conn_input+0x194>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9e1c:	2a01      	cmp	r2, #1
    9e1e:	d105      	bne.n	9e2c <net_conn_input+0x134>
		if (net_sin(addr)->sin_addr.s_addr) {
    9e20:	68a2      	ldr	r2, [r4, #8]
    9e22:	b11a      	cbz	r2, 9e2c <net_conn_input+0x134>
    9e24:	6831      	ldr	r1, [r6, #0]
    9e26:	68c9      	ldr	r1, [r1, #12]
			if (!net_ipv4_addr_cmp_raw((uint8_t *)&net_sin(addr)->sin_addr,
    9e28:	428a      	cmp	r2, r1
    9e2a:	d12f      	bne.n	9e8c <net_conn_input+0x194>
			if ((conn->flags & NET_CONN_LOCAL_ADDR_SET) &&
    9e2c:	0759      	lsls	r1, r3, #29
    9e2e:	d50d      	bpl.n	9e4c <net_conn_input+0x154>
	if (addr->sa_family != net_pkt_family(pkt)) {
    9e30:	89a2      	ldrh	r2, [r4, #12]
    9e32:	f895 1037 	ldrb.w	r1, [r5, #55]	; 0x37
    9e36:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
    9e3a:	d127      	bne.n	9e8c <net_conn_input+0x194>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    9e3c:	2a01      	cmp	r2, #1
    9e3e:	d105      	bne.n	9e4c <net_conn_input+0x154>
		if (net_sin(addr)->sin_addr.s_addr) {
    9e40:	6922      	ldr	r2, [r4, #16]
    9e42:	b11a      	cbz	r2, 9e4c <net_conn_input+0x154>
    9e44:	6831      	ldr	r1, [r6, #0]
    9e46:	6909      	ldr	r1, [r1, #16]
			if (!net_ipv4_addr_cmp_raw((uint8_t *)&net_sin(addr)->sin_addr,
    9e48:	428a      	cmp	r2, r1
    9e4a:	d11f      	bne.n	9e8c <net_conn_input+0x194>
			if (best_match != NULL && best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
    9e4c:	f1b8 0f00 	cmp.w	r8, #0
    9e50:	d003      	beq.n	9e5a <net_conn_input+0x162>
    9e52:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
    9e56:	0712      	lsls	r2, r2, #28
    9e58:	d418      	bmi.n	9e8c <net_conn_input+0x194>
			if (best_rank < NET_CONN_RANK(conn->flags)) {
    9e5a:	9a06      	ldr	r2, [sp, #24]
    9e5c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    9e60:	429a      	cmp	r2, r3
    9e62:	da13      	bge.n	9e8c <net_conn_input+0x194>
				if (!is_mcast_pkt) {
    9e64:	f1ba 0f00 	cmp.w	sl, #0
    9e68:	d116      	bne.n	9e98 <net_conn_input+0x1a0>
					best_rank = NET_CONN_RANK(conn->flags);
    9e6a:	b21b      	sxth	r3, r3
					continue; /* found a match - but maybe not yet the best */
    9e6c:	46a0      	mov	r8, r4
					best_rank = NET_CONN_RANK(conn->flags);
    9e6e:	9306      	str	r3, [sp, #24]
					continue; /* found a match - but maybe not yet the best */
    9e70:	e00c      	b.n	9e8c <net_conn_input+0x194>
		if (conn->context != NULL &&
    9e72:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
    9e76:	0512      	lsls	r2, r2, #20
    9e78:	d5b5      	bpl.n	9de6 <net_conn_input+0xee>
	return pkt->iface;
    9e7a:	69aa      	ldr	r2, [r5, #24]
	return net_if_get_by_index(context->iface);
    9e7c:	f993 0092 	ldrsb.w	r0, [r3, #146]	; 0x92
    9e80:	9207      	str	r2, [sp, #28]
    9e82:	f7fe f847 	bl	7f14 <z_impl_net_if_get_by_index>
		    net_context_is_bound_to_iface(conn->context) &&
    9e86:	9a07      	ldr	r2, [sp, #28]
    9e88:	4282      	cmp	r2, r0
    9e8a:	d0ac      	beq.n	9de6 <net_conn_input+0xee>
	return node->next;
    9e8c:	6824      	ldr	r4, [r4, #0]
    9e8e:	e771      	b.n	9d74 <net_conn_input+0x7c>
		if (conn->family != AF_UNSPEC &&
    9e90:	9a04      	ldr	r2, [sp, #16]
    9e92:	4293      	cmp	r3, r2
    9e94:	d0ab      	beq.n	9dee <net_conn_input+0xf6>
    9e96:	e7f9      	b.n	9e8c <net_conn_input+0x194>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
    9e98:	f640 42cd 	movw	r2, #3277	; 0xccd
    9e9c:	2300      	movs	r3, #0
    9e9e:	4628      	mov	r0, r5
    9ea0:	f017 fd51 	bl	21946 <net_pkt_clone>
				if (!mcast_pkt) {
    9ea4:	4601      	mov	r1, r0
    9ea6:	2800      	cmp	r0, #0
    9ea8:	f43f af7b 	beq.w	9da2 <net_conn_input+0xaa>
				if (conn->cb(conn, mcast_pkt, ip_hdr, proto_hdr, conn->user_data) ==
    9eac:	69e3      	ldr	r3, [r4, #28]
    9eae:	9005      	str	r0, [sp, #20]
    9eb0:	9300      	str	r3, [sp, #0]
    9eb2:	4632      	mov	r2, r6
    9eb4:	464b      	mov	r3, r9
    9eb6:	4620      	mov	r0, r4
    9eb8:	f8d4 c014 	ldr.w	ip, [r4, #20]
    9ebc:	47e0      	blx	ip
    9ebe:	2802      	cmp	r0, #2
    9ec0:	9905      	ldr	r1, [sp, #20]
    9ec2:	d102      	bne.n	9eca <net_conn_input+0x1d2>
					net_pkt_unref(mcast_pkt);
    9ec4:	4608      	mov	r0, r1
    9ec6:	f017 fa75 	bl	213b4 <net_pkt_unref>
				mcast_pkt_delivered = true;
    9eca:	f8cd a014 	str.w	sl, [sp, #20]
    9ece:	e7dd      	b.n	9e8c <net_conn_input+0x194>
	if (best_match) {
    9ed0:	f1b8 0f00 	cmp.w	r8, #0
    9ed4:	f43f af65 	beq.w	9da2 <net_conn_input+0xaa>
		if (best_match->cb(best_match, pkt, ip_hdr, proto_hdr, best_match->user_data)
    9ed8:	f8d8 301c 	ldr.w	r3, [r8, #28]
    9edc:	4632      	mov	r2, r6
    9ede:	9300      	str	r3, [sp, #0]
    9ee0:	4629      	mov	r1, r5
    9ee2:	464b      	mov	r3, r9
    9ee4:	4640      	mov	r0, r8
    9ee6:	f8d8 4014 	ldr.w	r4, [r8, #20]
    9eea:	47a0      	blx	r4
    9eec:	1e83      	subs	r3, r0, #2
    9eee:	4258      	negs	r0, r3
    9ef0:	4158      	adcs	r0, r3
    9ef2:	0040      	lsls	r0, r0, #1
    9ef4:	e74b      	b.n	9d8e <net_conn_input+0x96>
	if (best_match) {
    9ef6:	f1b8 0f00 	cmp.w	r8, #0
    9efa:	d1ed      	bne.n	9ed8 <net_conn_input+0x1e0>
	    !(is_mcast_pkt || is_bcast_pkt)) {
    9efc:	2f00      	cmp	r7, #0
    9efe:	f47f af50 	bne.w	9da2 <net_conn_input+0xaa>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
    9f02:	2203      	movs	r2, #3
    9f04:	4628      	mov	r0, r5
    9f06:	4611      	mov	r1, r2
    9f08:	f017 fee8 	bl	21cdc <net_icmpv4_send_error>
    9f0c:	e749      	b.n	9da2 <net_conn_input+0xaa>
    9f0e:	bf00      	nop
    9f10:	200036f4 	.word	0x200036f4

00009f14 <net_conn_init>:
	list->head = NULL;
    9f14:	2300      	movs	r3, #0
    9f16:	4a0b      	ldr	r2, [pc, #44]	; (9f44 <net_conn_init+0x30>)

	k_mutex_unlock(&conn_lock);
}

void net_conn_init(void)
{
    9f18:	b510      	push	{r4, lr}
	list->tail = NULL;
    9f1a:	e9c2 3300 	strd	r3, r3, [r2]
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    9f1e:	4a0a      	ldr	r2, [pc, #40]	; (9f48 <net_conn_init+0x34>)
	return list->tail;
    9f20:	4618      	mov	r0, r3
		sys_slist_prepend(&conn_unused, &conns[i].node);
    9f22:	4611      	mov	r1, r2
    9f24:	4614      	mov	r4, r2
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
    9f26:	3301      	adds	r3, #1
    9f28:	2b0a      	cmp	r3, #10
	parent->next = child;
    9f2a:	6008      	str	r0, [r1, #0]
    9f2c:	f102 0224 	add.w	r2, r2, #36	; 0x24
    9f30:	d002      	beq.n	9f38 <net_conn_init+0x24>
		sys_slist_prepend(&conn_unused, &conns[i].node);
    9f32:	4608      	mov	r0, r1
    9f34:	4611      	mov	r1, r2
    9f36:	e7f6      	b.n	9f26 <net_conn_init+0x12>
    9f38:	4b04      	ldr	r3, [pc, #16]	; (9f4c <net_conn_init+0x38>)
    9f3a:	4a05      	ldr	r2, [pc, #20]	; (9f50 <net_conn_init+0x3c>)
    9f3c:	e9c3 2400 	strd	r2, r4, [r3]
	}
}
    9f40:	bd10      	pop	{r4, pc}
    9f42:	bf00      	nop
    9f44:	200036f4 	.word	0x200036f4
    9f48:	20003704 	.word	0x20003704
    9f4c:	200036fc 	.word	0x200036fc
    9f50:	20003848 	.word	0x20003848

00009f54 <dhcpv4_set_timeout>:
}

/* Must be invoked with lock held. */
static void dhcpv4_set_timeout(struct net_if_dhcpv4 *dhcpv4,
			       uint32_t timeout)
{
    9f54:	b570      	push	{r4, r5, r6, lr}
    9f56:	4604      	mov	r4, r0
    9f58:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
    9f5a:	f01a fab1 	bl	244c0 <z_impl_k_uptime_ticks>
    9f5e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    9f62:	fba0 3206 	umull	r3, r2, r0, r6
    9f66:	fb06 2201 	mla	r2, r6, r1, r2
    9f6a:	0bdb      	lsrs	r3, r3, #15
    9f6c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    9f70:	0bd2      	lsrs	r2, r2, #15
	NET_DBG("sched timeout dhcvp4=%p timeout=%us", dhcpv4, timeout);
	dhcpv4->timer_start = k_uptime_get();
    9f72:	e9c4 3202 	strd	r3, r2, [r4, #8]
	dhcpv4->request_time = timeout;
    9f76:	6125      	str	r5, [r4, #16]

	/* NB: This interface may not be providing the next timeout
	 * event; also this timeout may replace the current timeout
	 * event.  Delegate scheduling to the timeout manager.
	 */
	k_work_reschedule(&timeout_work, K_NO_WAIT);
    9f78:	2200      	movs	r2, #0
}
    9f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&timeout_work, K_NO_WAIT);
    9f7e:	2300      	movs	r3, #0
    9f80:	4801      	ldr	r0, [pc, #4]	; (9f88 <dhcpv4_set_timeout+0x34>)
    9f82:	f00b bedd 	b.w	15d40 <k_work_reschedule>
    9f86:	bf00      	nop
    9f88:	20002498 	.word	0x20002498

00009f8c <dhcpv4_enter_bound>:
	dhcpv4_send_request(iface);
}

/* Must be invoked with lock held */
static void dhcpv4_enter_bound(struct net_if *iface)
{
    9f8c:	b570      	push	{r4, r5, r6, lr}
	uint32_t renewal_time;
	uint32_t rebinding_time;

	renewal_time = iface->config.dhcpv4.renewal_time;
    9f8e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
{
    9f90:	4604      	mov	r4, r0
	if (!renewal_time) {
    9f92:	b911      	cbnz	r1, 9f9a <dhcpv4_enter_bound+0xe>
		/* The default renewal time rfc2131 4.4.5 */
		renewal_time = iface->config.dhcpv4.lease_time / 2U;
    9f94:	6a81      	ldr	r1, [r0, #40]	; 0x28
    9f96:	0849      	lsrs	r1, r1, #1
		iface->config.dhcpv4.renewal_time = renewal_time;
    9f98:	62c1      	str	r1, [r0, #44]	; 0x2c
	}

	rebinding_time = iface->config.dhcpv4.rebinding_time;
    9f9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (!rebinding_time) {
    9f9c:	b943      	cbnz	r3, 9fb0 <dhcpv4_enter_bound+0x24>
		/* The default rebinding time rfc2131 4.4.5 */
		rebinding_time = iface->config.dhcpv4.lease_time * 875U / 1000;
    9f9e:	f240 326b 	movw	r2, #875	; 0x36b
    9fa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9fa4:	4353      	muls	r3, r2
    9fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9faa:	fbb3 f3f2 	udiv	r3, r3, r2
		iface->config.dhcpv4.rebinding_time = rebinding_time;
    9fae:	6323      	str	r3, [r4, #48]	; 0x30
	}

	iface->config.dhcpv4.state = NET_DHCPV4_BOUND;
    9fb0:	2206      	movs	r2, #6
	NET_DBG("enter state=%s renewal=%us rebinding=%us",
		net_dhcpv4_state_name(iface->config.dhcpv4.state),
		renewal_time, rebinding_time);

	dhcpv4_set_timeout(&iface->config.dhcpv4,
    9fb2:	4299      	cmp	r1, r3
    9fb4:	f104 0510 	add.w	r5, r4, #16
    9fb8:	bf28      	it	cs
    9fba:	4619      	movcs	r1, r3
    9fbc:	4628      	mov	r0, r5
	iface->config.dhcpv4.state = NET_DHCPV4_BOUND;
    9fbe:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	dhcpv4_set_timeout(&iface->config.dhcpv4,
    9fc2:	f7ff ffc7 	bl	9f54 <dhcpv4_set_timeout>
			   MIN(renewal_time, rebinding_time));

	net_mgmt_event_notify_with_info(NET_EVENT_IPV4_DHCP_BOUND, iface,
    9fc6:	462a      	mov	r2, r5
    9fc8:	4621      	mov	r1, r4
					&iface->config.dhcpv4,
					sizeof(iface->config.dhcpv4));
}
    9fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_mgmt_event_notify_with_info(NET_EVENT_IPV4_DHCP_BOUND, iface,
    9fce:	2338      	movs	r3, #56	; 0x38
    9fd0:	4801      	ldr	r0, [pc, #4]	; (9fd8 <dhcpv4_enter_bound+0x4c>)
    9fd2:	f7fe be0f 	b.w	8bf4 <net_mgmt_event_notify_with_info>
    9fd6:	bf00      	nop
    9fd8:	e0040008 	.word	0xe0040008

00009fdc <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    9fdc:	4602      	mov	r2, r0
    9fde:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    9fe0:	4801      	ldr	r0, [pc, #4]	; (9fe8 <k_mutex_lock.constprop.0.isra.0+0xc>)
    9fe2:	f00b bbc7 	b.w	15774 <z_impl_k_mutex_lock>
    9fe6:	bf00      	nop
    9fe8:	20001260 	.word	0x20001260

00009fec <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    9fec:	4801      	ldr	r0, [pc, #4]	; (9ff4 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    9fee:	f00b bc3b 	b.w	15868 <z_impl_k_mutex_unlock>
    9ff2:	bf00      	nop
    9ff4:	20001260 	.word	0x20001260

00009ff8 <dhcpv4_start_internal>:
    9ff8:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(state >= 0 && state < sizeof(name));
	return name[state];
}

static void dhcpv4_start_internal(struct net_if *iface, bool first_start)
{
    9ffa:	b570      	push	{r4, r5, r6, lr}
    9ffc:	4604      	mov	r4, r0
    9ffe:	461a      	mov	r2, r3
    a000:	460d      	mov	r5, r1
    a002:	4601      	mov	r1, r0
    a004:	4818      	ldr	r0, [pc, #96]	; (a068 <dhcpv4_start_internal+0x70>)
    a006:	f7fe fdf5 	bl	8bf4 <net_mgmt_event_notify_with_info>
	uint32_t entropy;
	uint32_t timeout = 0;

	net_mgmt_event_notify(NET_EVENT_IPV4_DHCP_START, iface);

	k_mutex_lock(&lock, K_FOREVER);
    a00a:	f04f 30ff 	mov.w	r0, #4294967295
    a00e:	f04f 31ff 	mov.w	r1, #4294967295
    a012:	f7ff ffe3 	bl	9fdc <k_mutex_lock.constprop.0.isra.0>

	switch (iface->config.dhcpv4.state) {
    a016:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    a01a:	b9f3      	cbnz	r3, a05a <dhcpv4_start_internal+0x62>
	case NET_DHCPV4_DISABLED:
		iface->config.dhcpv4.state = NET_DHCPV4_INIT;
    a01c:	2301      	movs	r3, #1
    a01e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    a022:	f7fd f931 	bl	7288 <z_impl_sys_rand32_get>
		/* A DHCP client MUST choose xid's in such a way as to
		 * minimize the change of using and xid identical to
		 * one used by another client.  Choose a random xid st
		 * startup and increment it on each new request.
		 */
		iface->config.dhcpv4.xid = entropy;
    a026:	6260      	str	r0, [r4, #36]	; 0x24

		/* Use default */
		if (first_start) {
    a028:	b135      	cbz	r5, a038 <dhcpv4_start_internal+0x40>
			/* RFC2131 4.1.1 requires we wait a random period
			 * between 1 and 10 seconds before sending the initial
			 * discover.
			 */
			timeout = entropy % (CONFIG_NET_DHCPV4_INITIAL_DELAY_MAX -
    a02a:	2309      	movs	r3, #9
    a02c:	fbb0 f3f3 	udiv	r3, r0, r3
    a030:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    a034:	1ac0      	subs	r0, r0, r3
    a036:	1c45      	adds	r5, r0, #1
	return list->head;
    a038:	4e0c      	ldr	r6, [pc, #48]	; (a06c <dhcpv4_start_internal+0x74>)
					DHCPV4_INITIAL_DELAY_MIN) + DHCPV4_INITIAL_DELAY_MIN;
		}

		NET_DBG("wait timeout=%us", timeout);

		if (sys_slist_is_empty(&dhcpv4_ifaces)) {
    a03a:	6833      	ldr	r3, [r6, #0]
    a03c:	b913      	cbnz	r3, a044 <dhcpv4_start_internal+0x4c>
			net_mgmt_add_event_callback(&mgmt4_cb);
    a03e:	480c      	ldr	r0, [pc, #48]	; (a070 <dhcpv4_start_internal+0x78>)
    a040:	f7fe fd74 	bl	8b2c <net_mgmt_add_event_callback>
	parent->next = child;
    a044:	2300      	movs	r3, #0
    a046:	6123      	str	r3, [r4, #16]
	return list->tail;
    a048:	6873      	ldr	r3, [r6, #4]
		}

		sys_slist_append(&dhcpv4_ifaces,
    a04a:	f104 0010 	add.w	r0, r4, #16
Z_GENLIST_APPEND(slist, snode)
    a04e:	b943      	cbnz	r3, a062 <dhcpv4_start_internal+0x6a>
	list->head = node;
    a050:	e9c6 0000 	strd	r0, r0, [r6]
				 &iface->config.dhcpv4.node);

		dhcpv4_set_timeout(&iface->config.dhcpv4, timeout);
    a054:	4629      	mov	r1, r5
    a056:	f7ff ff7d 	bl	9f54 <dhcpv4_set_timeout>
	case NET_DHCPV4_BOUND:
		break;
	}

	k_mutex_unlock(&lock);
}
    a05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_mutex_unlock(&lock);
    a05e:	f7ff bfc5 	b.w	9fec <k_mutex_unlock.constprop.0.isra.0>
	parent->next = child;
    a062:	6018      	str	r0, [r3, #0]
	list->tail = node;
    a064:	6070      	str	r0, [r6, #4]
}
    a066:	e7f5      	b.n	a054 <dhcpv4_start_internal+0x5c>
    a068:	e0040007 	.word	0xe0040007
    a06c:	20003880 	.word	0x20003880
    a070:	2000386c 	.word	0x2000386c

0000a074 <dhcpv4_create_message>:
{
    a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a078:	b091      	sub	sp, #68	; 0x44
    a07a:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(dhcp_access, struct dhcp_msg);
    a07c:	aa05      	add	r2, sp, #20
    a07e:	9203      	str	r2, [sp, #12]
    a080:	222c      	movs	r2, #44	; 0x2c
{
    a082:	4606      	mov	r6, r0
    a084:	460f      	mov	r7, r1
	if (src_addr == NULL) {
    a086:	461d      	mov	r5, r3
{
    a088:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
    a08c:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
	NET_PKT_DATA_ACCESS_DEFINE(dhcp_access, struct dhcp_msg);
    a090:	9204      	str	r2, [sp, #16]
	if (src_addr == NULL) {
    a092:	b913      	cbnz	r3, a09a <dhcpv4_create_message+0x26>
		addr = net_ipv4_unspecified_address();
    a094:	f7fe fccc 	bl	8a30 <net_ipv4_unspecified_address>
    a098:	4605      	mov	r5, r0
		size += DHCPV4_OLV_MSG_SERVER_ID;
    a09a:	f1ba 0f00 	cmp.w	sl, #0
    a09e:	bf0c      	ite	eq
    a0a0:	21f4      	moveq	r1, #244	; 0xf4
    a0a2:	21fa      	movne	r1, #250	; 0xfa
	if (requested_ip) {
    a0a4:	f1b9 0f00 	cmp.w	r9, #0
    a0a8:	d000      	beq.n	a0ac <dhcpv4_create_message+0x38>
		size +=  DHCPV4_OLV_MSG_REQ_IPADDR;
    a0aa:	3106      	adds	r1, #6
					IPPROTO_UDP, K_FOREVER);
    a0ac:	f04f 32ff 	mov.w	r2, #4294967295
    a0b0:	f04f 33ff 	mov.w	r3, #4294967295
	if (type == DHCPV4_MSG_TYPE_DISCOVER) {
    a0b4:	2f01      	cmp	r7, #1
	pkt = net_pkt_alloc_with_buffer(iface, size, AF_INET,
    a0b6:	e9cd 2300 	strd	r2, r3, [sp]
		size +=  DHCPV4_OLV_MSG_REQ_LIST;
    a0ba:	bf08      	it	eq
    a0bc:	3105      	addeq	r1, #5
	pkt = net_pkt_alloc_with_buffer(iface, size, AF_INET,
    a0be:	2311      	movs	r3, #17
    a0c0:	2201      	movs	r2, #1
    a0c2:	4630      	mov	r0, r6
    a0c4:	f7ff fc18 	bl	98f8 <net_pkt_alloc_with_buffer>
	pkt->ipv4_ttl = ttl;
    a0c8:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv4_create(pkt, addr, server_addr) ||
    a0ca:	4629      	mov	r1, r5
    a0cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a0ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	pkt = net_pkt_alloc_with_buffer(iface, size, AF_INET,
    a0d2:	4604      	mov	r4, r0
	if (net_ipv4_create(pkt, addr, server_addr) ||
    a0d4:	f017 fee1 	bl	21e9a <net_ipv4_create>
    a0d8:	2800      	cmp	r0, #0
    a0da:	f040 8089 	bne.w	a1f0 <dhcpv4_create_message+0x17c>
	    net_udp_create(pkt, htons(DHCPV4_CLIENT_PORT),
    a0de:	f44f 4286 	mov.w	r2, #17152	; 0x4300
    a0e2:	f44f 4188 	mov.w	r1, #17408	; 0x4400
    a0e6:	4620      	mov	r0, r4
    a0e8:	f018 fa24 	bl	22534 <net_udp_create>
	if (net_ipv4_create(pkt, addr, server_addr) ||
    a0ec:	4683      	mov	fp, r0
    a0ee:	2800      	cmp	r0, #0
    a0f0:	d17e      	bne.n	a1f0 <dhcpv4_create_message+0x17c>
	msg = (struct dhcp_msg *)net_pkt_get_data(pkt, &dhcp_access);
    a0f2:	a903      	add	r1, sp, #12
    a0f4:	4620      	mov	r0, r4
    a0f6:	f7ff fc11 	bl	991c <net_pkt_get_data>
__ssp_bos_icheck3(memset, void *, int)
    a0fa:	222a      	movs	r2, #42	; 0x2a
    a0fc:	4605      	mov	r5, r0
    a0fe:	4659      	mov	r1, fp
    a100:	3002      	adds	r0, #2
    a102:	f00d f969 	bl	173d8 <memset>
	msg->op    = DHCPV4_MSG_BOOT_REQUEST;
    a106:	2301      	movs	r3, #1
    a108:	702b      	strb	r3, [r5, #0]
	msg->htype = HARDWARE_ETHERNET_TYPE;
    a10a:	706b      	strb	r3, [r5, #1]
	msg->hlen  = net_if_get_link_addr(iface)->len;
    a10c:	6833      	ldr	r3, [r6, #0]
    a10e:	7d1b      	ldrb	r3, [r3, #20]
    a110:	70ab      	strb	r3, [r5, #2]
	msg->xid   = htonl(iface->config.dhcpv4.xid);
    a112:	6a73      	ldr	r3, [r6, #36]	; 0x24
	msg->flags = htons(DHCPV4_MSG_BROADCAST);
    a114:	f885 b00b 	strb.w	fp, [r5, #11]
    a118:	ba1b      	rev	r3, r3
	msg->xid   = htonl(iface->config.dhcpv4.xid);
    a11a:	606b      	str	r3, [r5, #4]
	msg->flags = htons(DHCPV4_MSG_BROADCAST);
    a11c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a120:	72ab      	strb	r3, [r5, #10]
	if (ciaddr) {
    a122:	f1b8 0f00 	cmp.w	r8, #0
    a126:	d002      	beq.n	a12e <dhcpv4_create_message+0xba>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a128:	f8d8 3000 	ldr.w	r3, [r8]
    a12c:	60eb      	str	r3, [r5, #12]
	return &iface->if_dev->link_addr;
    a12e:	6833      	ldr	r3, [r6, #0]
    a130:	f105 001c 	add.w	r0, r5, #28
    a134:	6919      	ldr	r1, [r3, #16]
    a136:	7d1a      	ldrb	r2, [r3, #20]
    a138:	f7f6 fd0c 	bl	b54 <memcpy>
	if (net_pkt_set_data(pkt, &dhcp_access)) {
    a13c:	a903      	add	r1, sp, #12
    a13e:	4620      	mov	r0, r4
    a140:	f017 fc41 	bl	219c6 <net_pkt_set_data>
    a144:	4601      	mov	r1, r0
    a146:	2800      	cmp	r0, #0
    a148:	d152      	bne.n	a1f0 <dhcpv4_create_message+0x17c>
	if (net_pkt_memset(pkt, 0, SIZE_OF_SNAME)) {
    a14a:	2240      	movs	r2, #64	; 0x40
    a14c:	4620      	mov	r0, r4
    a14e:	f017 fabb 	bl	216c8 <net_pkt_memset>
    a152:	4601      	mov	r1, r0
    a154:	2800      	cmp	r0, #0
    a156:	d14b      	bne.n	a1f0 <dhcpv4_create_message+0x17c>
	if (net_pkt_memset(pkt, 0, SIZE_OF_FILE)) {
    a158:	2280      	movs	r2, #128	; 0x80
    a15a:	4620      	mov	r0, r4
    a15c:	f017 fab4 	bl	216c8 <net_pkt_memset>
    a160:	2800      	cmp	r0, #0
    a162:	d145      	bne.n	a1f0 <dhcpv4_create_message+0x17c>
	if (net_pkt_write(pkt, (void *)magic_cookie,
    a164:	2204      	movs	r2, #4
    a166:	4620      	mov	r0, r4
    a168:	4924      	ldr	r1, [pc, #144]	; (a1fc <dhcpv4_create_message+0x188>)
    a16a:	f017 fc11 	bl	21990 <net_pkt_write>
    a16e:	2800      	cmp	r0, #0
    a170:	d13e      	bne.n	a1f0 <dhcpv4_create_message+0x17c>
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_MSG_TYPE,
    a172:	2201      	movs	r2, #1
    a174:	2135      	movs	r1, #53	; 0x35
    a176:	4620      	mov	r0, r4
    a178:	f10d 030b 	add.w	r3, sp, #11
    a17c:	f88d 700b 	strb.w	r7, [sp, #11]
    a180:	f017 fc56 	bl	21a30 <dhcpv4_add_option_length_value>
	    !dhcpv4_add_cookie(pkt) ||
    a184:	b3a0      	cbz	r0, a1f0 <dhcpv4_create_message+0x17c>
	if ((server_id &&
    a186:	f1ba 0f00 	cmp.w	sl, #0
    a18a:	d128      	bne.n	a1de <dhcpv4_create_message+0x16a>
	     !dhcpv4_add_server_id(pkt, &iface->config.dhcpv4.server_id)) ||
    a18c:	f1b9 0f00 	cmp.w	r9, #0
    a190:	d007      	beq.n	a1a2 <dhcpv4_create_message+0x12e>
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_REQ_IPADDR,
    a192:	2204      	movs	r2, #4
    a194:	2132      	movs	r1, #50	; 0x32
    a196:	4620      	mov	r0, r4
    a198:	f106 0338 	add.w	r3, r6, #56	; 0x38
    a19c:	f017 fc48 	bl	21a30 <dhcpv4_add_option_length_value>
	    (requested_ip &&
    a1a0:	b330      	cbz	r0, a1f0 <dhcpv4_create_message+0x17c>
	if (type == DHCPV4_MSG_TYPE_DISCOVER && !dhcpv4_add_req_options(pkt)) {
    a1a2:	2f01      	cmp	r7, #1
    a1a4:	d106      	bne.n	a1b4 <dhcpv4_create_message+0x140>
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_REQ_LIST,
    a1a6:	2203      	movs	r2, #3
    a1a8:	2137      	movs	r1, #55	; 0x37
    a1aa:	4620      	mov	r0, r4
    a1ac:	4b14      	ldr	r3, [pc, #80]	; (a200 <dhcpv4_create_message+0x18c>)
    a1ae:	f017 fc3f 	bl	21a30 <dhcpv4_add_option_length_value>
	if (type == DHCPV4_MSG_TYPE_DISCOVER && !dhcpv4_add_req_options(pkt)) {
    a1b2:	b1e8      	cbz	r0, a1f0 <dhcpv4_create_message+0x17c>
	if (net_pkt_write_u8(pkt, DHCPV4_OPTIONS_END)) {
    a1b4:	23ff      	movs	r3, #255	; 0xff
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
    a1b6:	2201      	movs	r2, #1
    a1b8:	4620      	mov	r0, r4
    a1ba:	f10d 010b 	add.w	r1, sp, #11
    a1be:	f88d 300b 	strb.w	r3, [sp, #11]
    a1c2:	f017 fbe5 	bl	21990 <net_pkt_write>
    a1c6:	b998      	cbnz	r0, a1f0 <dhcpv4_create_message+0x17c>
	net_pkt_cursor_init(pkt);
    a1c8:	4620      	mov	r0, r4
    a1ca:	f017 f984 	bl	214d6 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_UDP);
    a1ce:	2111      	movs	r1, #17
    a1d0:	4620      	mov	r0, r4
    a1d2:	f017 fe76 	bl	21ec2 <net_ipv4_finalize>
}
    a1d6:	4620      	mov	r0, r4
    a1d8:	b011      	add	sp, #68	; 0x44
    a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_SERVER_ID,
    a1de:	2204      	movs	r2, #4
    a1e0:	2136      	movs	r1, #54	; 0x36
    a1e2:	4620      	mov	r0, r4
    a1e4:	f106 0334 	add.w	r3, r6, #52	; 0x34
    a1e8:	f017 fc22 	bl	21a30 <dhcpv4_add_option_length_value>
	if ((server_id &&
    a1ec:	2800      	cmp	r0, #0
    a1ee:	d1cd      	bne.n	a18c <dhcpv4_create_message+0x118>
	net_pkt_unref(pkt);
    a1f0:	4620      	mov	r0, r4
    a1f2:	f017 f8df 	bl	213b4 <net_pkt_unref>
	return NULL;
    a1f6:	2400      	movs	r4, #0
    a1f8:	e7ed      	b.n	a1d6 <dhcpv4_create_message+0x162>
    a1fa:	bf00      	nop
    a1fc:	000330b6 	.word	0x000330b6
    a200:	20001129 	.word	0x20001129

0000a204 <net_dhcpv4_input>:
{
    a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a208:	b09b      	sub	sp, #108	; 0x6c
    a20a:	af00      	add	r7, sp, #0
	NET_PKT_DATA_ACCESS_DEFINE(dhcp_access, struct dhcp_msg);
    a20c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    a210:	61bb      	str	r3, [r7, #24]
    a212:	232c      	movs	r3, #44	; 0x2c
{
    a214:	460d      	mov	r5, r1
    a216:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_DEFINE(dhcp_access, struct dhcp_msg);
    a218:	61fb      	str	r3, [r7, #28]
	if (!conn) {
    a21a:	b928      	cbnz	r0, a228 <net_dhcpv4_input+0x24>
		return NET_DROP;
    a21c:	2402      	movs	r4, #2
}
    a21e:	4620      	mov	r0, r4
    a220:	376c      	adds	r7, #108	; 0x6c
    a222:	46bd      	mov	sp, r7
    a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt) {
    a228:	2900      	cmp	r1, #0
    a22a:	d0f7      	beq.n	a21c <net_dhcpv4_input+0x18>
	return pkt->iface;
    a22c:	698c      	ldr	r4, [r1, #24]
	if (!iface) {
    a22e:	2c00      	cmp	r4, #0
    a230:	d0f4      	beq.n	a21c <net_dhcpv4_input+0x18>
	size_t bytes = 0;
    a232:	2200      	movs	r2, #0
    a234:	688b      	ldr	r3, [r1, #8]
	while (buf) {
    a236:	2b00      	cmp	r3, #0
    a238:	d14d      	bne.n	a2d6 <net_dhcpv4_input+0xd2>
	if (net_pkt_get_len(pkt) < NET_IPV4UDPH_LEN + sizeof(struct dhcp_msg)) {
    a23a:	2a47      	cmp	r2, #71	; 0x47
    a23c:	d9ee      	bls.n	a21c <net_dhcpv4_input+0x18>
	net_pkt_cursor_init(pkt);
    a23e:	4628      	mov	r0, r5
    a240:	f017 f949 	bl	214d6 <net_pkt_cursor_init>
	if (net_pkt_skip(pkt, NET_IPV4UDPH_LEN)) {
    a244:	211c      	movs	r1, #28
    a246:	4628      	mov	r0, r5
    a248:	f017 f9af 	bl	215aa <net_pkt_skip>
    a24c:	2800      	cmp	r0, #0
    a24e:	d1e5      	bne.n	a21c <net_dhcpv4_input+0x18>
	msg = (struct dhcp_msg *)net_pkt_get_data(pkt, &dhcp_access);
    a250:	4628      	mov	r0, r5
    a252:	f107 0118 	add.w	r1, r7, #24
    a256:	f7ff fb61 	bl	991c <net_pkt_get_data>
	if (!msg) {
    a25a:	4680      	mov	r8, r0
    a25c:	2800      	cmp	r0, #0
    a25e:	d0dd      	beq.n	a21c <net_dhcpv4_input+0x18>
	k_mutex_lock(&lock, K_FOREVER);
    a260:	f04f 30ff 	mov.w	r0, #4294967295
    a264:	f04f 31ff 	mov.w	r1, #4294967295
    a268:	f7ff feb8 	bl	9fdc <k_mutex_lock.constprop.0.isra.0>
	if (!(msg->op == DHCPV4_MSG_BOOT_REPLY &&
    a26c:	f898 3000 	ldrb.w	r3, [r8]
    a270:	2b02      	cmp	r3, #2
    a272:	d12c      	bne.n	a2ce <net_dhcpv4_input+0xca>
    a274:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a278:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a27a:	ba1b      	rev	r3, r3
    a27c:	429a      	cmp	r2, r3
    a27e:	d126      	bne.n	a2ce <net_dhcpv4_input+0xca>
    a280:	6823      	ldr	r3, [r4, #0]
	      !memcmp(msg->chaddr, net_if_get_link_addr(iface)->addr,
    a282:	f108 001c 	add.w	r0, r8, #28
		      net_if_get_link_addr(iface)->len))) {
    a286:	7d1e      	ldrb	r6, [r3, #20]
	      !memcmp(msg->chaddr, net_if_get_link_addr(iface)->addr,
    a288:	6919      	ldr	r1, [r3, #16]
    a28a:	4632      	mov	r2, r6
    a28c:	f00c ffe0 	bl	17250 <memcmp>
	if (!(msg->op == DHCPV4_MSG_BOOT_REPLY &&
    a290:	b9e8      	cbnz	r0, a2ce <net_dhcpv4_input+0xca>
	if (msg->hlen != net_if_get_link_addr(iface)->len) {
    a292:	f898 3002 	ldrb.w	r3, [r8, #2]
    a296:	42b3      	cmp	r3, r6
    a298:	d119      	bne.n	a2ce <net_dhcpv4_input+0xca>
	return net_pkt_skip(pkt, access->size);
    a29a:	69f9      	ldr	r1, [r7, #28]
    a29c:	4628      	mov	r0, r5
    a29e:	f017 f984 	bl	215aa <net_pkt_skip>
	if (net_pkt_skip(pkt, SIZE_OF_SNAME + SIZE_OF_FILE)) {
    a2a2:	21c0      	movs	r1, #192	; 0xc0
    a2a4:	4628      	mov	r0, r5
    a2a6:	f017 f980 	bl	215aa <net_pkt_skip>
    a2aa:	b980      	cbnz	r0, a2ce <net_dhcpv4_input+0xca>
	if (net_pkt_read(pkt, cookie, sizeof(cookie)) ||
    a2ac:	2204      	movs	r2, #4
    a2ae:	4628      	mov	r0, r5
    a2b0:	f107 0110 	add.w	r1, r7, #16
    a2b4:	f017 fa13 	bl	216de <net_pkt_read>
    a2b8:	b948      	cbnz	r0, a2ce <net_dhcpv4_input+0xca>
	    memcmp(magic_cookie, cookie, sizeof(magic_cookie))) {
    a2ba:	2204      	movs	r2, #4
    a2bc:	48a8      	ldr	r0, [pc, #672]	; (a560 <net_dhcpv4_input+0x35c>)
    a2be:	f107 0110 	add.w	r1, r7, #16
    a2c2:	f00c ffc5 	bl	17250 <memcmp>
	if (net_pkt_read(pkt, cookie, sizeof(cookie)) ||
    a2c6:	4606      	mov	r6, r0
    a2c8:	2800      	cmp	r0, #0
    a2ca:	f000 80e9 	beq.w	a4a0 <net_dhcpv4_input+0x29c>
	enum net_verdict verdict = NET_DROP;
    a2ce:	2402      	movs	r4, #2
	k_mutex_unlock(&lock);
    a2d0:	f7ff fe8c 	bl	9fec <k_mutex_unlock.constprop.0.isra.0>
	return verdict;
    a2d4:	e7a3      	b.n	a21e <net_dhcpv4_input+0x1a>
		bytes += buf->len;
    a2d6:	8a19      	ldrh	r1, [r3, #16]
		buf = buf->frags;
    a2d8:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
    a2da:	440a      	add	r2, r1
		buf = buf->frags;
    a2dc:	e7ab      	b.n	a236 <net_dhcpv4_input+0x32>
	return net_pkt_read(pkt, data, 1);
    a2de:	2201      	movs	r2, #1
    a2e0:	4628      	mov	r0, r5
    a2e2:	f107 010e 	add.w	r1, r7, #14
    a2e6:	f017 f9fa 	bl	216de <net_pkt_read>
		if (net_pkt_read_u8(pkt, &length)) {
    a2ea:	6078      	str	r0, [r7, #4]
    a2ec:	b160      	cbz	r0, a308 <net_dhcpv4_input+0x104>
			NET_ERR("option parsing, bad length");
    a2ee:	4a9d      	ldr	r2, [pc, #628]	; (a564 <net_dhcpv4_input+0x360>)
    a2f0:	637a      	str	r2, [r7, #52]	; 0x34
    a2f2:	2202      	movs	r2, #2
    a2f4:	633a      	str	r2, [r7, #48]	; 0x30
    a2f6:	465b      	mov	r3, fp
    a2f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a2fc:	489a      	ldr	r0, [pc, #616]	; (a568 <net_dhcpv4_input+0x364>)
    a2fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a302:	f7fa fdbf 	bl	4e84 <z_impl_z_log_msg_static_create>
			return false;
    a306:	e7e2      	b.n	a2ce <net_dhcpv4_input+0xca>
		switch (type) {
    a308:	7bfb      	ldrb	r3, [r7, #15]
			if (length != 4U) {
    a30a:	7bba      	ldrb	r2, [r7, #14]
		switch (type) {
    a30c:	2b3b      	cmp	r3, #59	; 0x3b
    a30e:	d805      	bhi.n	a31c <net_dhcpv4_input+0x118>
    a310:	2b32      	cmp	r3, #50	; 0x32
    a312:	d808      	bhi.n	a326 <net_dhcpv4_input+0x122>
    a314:	2b01      	cmp	r3, #1
    a316:	d01f      	beq.n	a358 <net_dhcpv4_input+0x154>
    a318:	2b03      	cmp	r3, #3
    a31a:	d05c      	beq.n	a3d6 <net_dhcpv4_input+0x1d2>
			if (net_pkt_skip(pkt, length)) {
    a31c:	4611      	mov	r1, r2
    a31e:	4628      	mov	r0, r5
    a320:	f017 f943 	bl	215aa <net_pkt_skip>
    a324:	e0a8      	b.n	a478 <net_dhcpv4_input+0x274>
		switch (type) {
    a326:	3b33      	subs	r3, #51	; 0x33
    a328:	2b08      	cmp	r3, #8
    a32a:	d8f7      	bhi.n	a31c <net_dhcpv4_input+0x118>
    a32c:	a101      	add	r1, pc, #4	; (adr r1, a334 <net_dhcpv4_input+0x130>)
    a32e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    a332:	bf00      	nop
    a334:	0000a413 	.word	0x0000a413
    a338:	0000a31d 	.word	0x0000a31d
    a33c:	0000a47f 	.word	0x0000a47f
    a340:	0000a469 	.word	0x0000a469
    a344:	0000a31d 	.word	0x0000a31d
    a348:	0000a31d 	.word	0x0000a31d
    a34c:	0000a31d 	.word	0x0000a31d
    a350:	0000a431 	.word	0x0000a431
    a354:	0000a44f 	.word	0x0000a44f
			if (length != 4U) {
    a358:	2a04      	cmp	r2, #4
    a35a:	d005      	beq.n	a368 <net_dhcpv4_input+0x164>
				NET_ERR("options_subnet_mask, bad length");
    a35c:	4b83      	ldr	r3, [pc, #524]	; (a56c <net_dhcpv4_input+0x368>)
				NET_ERR("options_router, bad length");
    a35e:	637b      	str	r3, [r7, #52]	; 0x34
    a360:	2302      	movs	r3, #2
    a362:	633b      	str	r3, [r7, #48]	; 0x30
    a364:	2300      	movs	r3, #0
    a366:	e7c7      	b.n	a2f8 <net_dhcpv4_input+0xf4>
			if (net_pkt_read(pkt, netmask.s4_addr, length)) {
    a368:	4628      	mov	r0, r5
    a36a:	f107 0114 	add.w	r1, r7, #20
    a36e:	f017 f9b6 	bl	216de <net_pkt_read>
    a372:	b108      	cbz	r0, a378 <net_dhcpv4_input+0x174>
				NET_ERR("options_subnet_mask, short packet");
    a374:	4b7e      	ldr	r3, [pc, #504]	; (a570 <net_dhcpv4_input+0x36c>)
    a376:	e7f2      	b.n	a35e <net_dhcpv4_input+0x15a>
			net_if_ipv4_set_netmask(iface, &netmask);
    a378:	4620      	mov	r0, r4
    a37a:	f107 0114 	add.w	r1, r7, #20
    a37e:	f016 fb50 	bl	20a22 <net_if_ipv4_set_netmask>
    a382:	2201      	movs	r2, #1
    a384:	4628      	mov	r0, r5
    a386:	f107 010f 	add.w	r1, r7, #15
    a38a:	f017 f9a8 	bl	216de <net_pkt_read>
	while (!net_pkt_read_u8(pkt, &type)) {
    a38e:	4683      	mov	fp, r0
    a390:	2800      	cmp	r0, #0
    a392:	d19c      	bne.n	a2ce <net_dhcpv4_input+0xca>
		if (type == DHCPV4_OPTIONS_END) {
    a394:	7bfa      	ldrb	r2, [r7, #15]
    a396:	2aff      	cmp	r2, #255	; 0xff
    a398:	d1a1      	bne.n	a2de <net_dhcpv4_input+0xda>
	if (*msg_type == DHCPV4_MSG_TYPE_OFFER && !router_present) {
    a39a:	2e02      	cmp	r6, #2
    a39c:	f040 8082 	bne.w	a4a4 <net_dhcpv4_input+0x2a0>
    a3a0:	f1ba 0f00 	cmp.w	sl, #0
    a3a4:	d106      	bne.n	a3b4 <net_dhcpv4_input+0x1b0>
		net_if_ipv4_set_gw(iface, &any);
    a3a6:	4620      	mov	r0, r4
		struct in_addr any = INADDR_ANY_INIT;
    a3a8:	f8c7 a020 	str.w	sl, [r7, #32]
		net_if_ipv4_set_gw(iface, &any);
    a3ac:	f107 0120 	add.w	r1, r7, #32
    a3b0:	f016 fb4e 	bl	20a50 <net_if_ipv4_set_gw>
    a3b4:	f8d9 3000 	ldr.w	r3, [r9]
    a3b8:	68db      	ldr	r3, [r3, #12]
    a3ba:	6463      	str	r3, [r4, #68]	; 0x44
	switch (iface->config.dhcpv4.state) {
    a3bc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    a3c0:	2b02      	cmp	r3, #2
    a3c2:	d177      	bne.n	a4b4 <net_dhcpv4_input+0x2b0>
	iface->config.dhcpv4.state = NET_DHCPV4_REQUESTING;
    a3c4:	2303      	movs	r3, #3
    a3c6:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a3c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
	dhcpv4_send_request(iface);
    a3cc:	4620      	mov	r0, r4
    a3ce:	63a3      	str	r3, [r4, #56]	; 0x38
    a3d0:	f017 fb7b 	bl	21aca <dhcpv4_send_request>
}
    a3d4:	e06e      	b.n	a4b4 <net_dhcpv4_input+0x2b0>
			if (length % 4 != 0U || length < 4) {
    a3d6:	0793      	lsls	r3, r2, #30
    a3d8:	d101      	bne.n	a3de <net_dhcpv4_input+0x1da>
    a3da:	2a03      	cmp	r2, #3
    a3dc:	d801      	bhi.n	a3e2 <net_dhcpv4_input+0x1de>
				NET_ERR("options_router, bad length");
    a3de:	4b65      	ldr	r3, [pc, #404]	; (a574 <net_dhcpv4_input+0x370>)
    a3e0:	e7bd      	b.n	a35e <net_dhcpv4_input+0x15a>
			if (net_pkt_read(pkt, router.s4_addr, 4) ||
    a3e2:	2204      	movs	r2, #4
    a3e4:	4628      	mov	r0, r5
    a3e6:	f107 0114 	add.w	r1, r7, #20
    a3ea:	f017 f978 	bl	216de <net_pkt_read>
    a3ee:	b108      	cbz	r0, a3f4 <net_dhcpv4_input+0x1f0>
				NET_ERR("options_router, short packet");
    a3f0:	4b61      	ldr	r3, [pc, #388]	; (a578 <net_dhcpv4_input+0x374>)
    a3f2:	e7b4      	b.n	a35e <net_dhcpv4_input+0x15a>
			    net_pkt_skip(pkt, length - 4U)) {
    a3f4:	7bb9      	ldrb	r1, [r7, #14]
    a3f6:	4628      	mov	r0, r5
    a3f8:	3904      	subs	r1, #4
    a3fa:	f017 f8d6 	bl	215aa <net_pkt_skip>
			if (net_pkt_read(pkt, router.s4_addr, 4) ||
    a3fe:	2800      	cmp	r0, #0
    a400:	d1f6      	bne.n	a3f0 <net_dhcpv4_input+0x1ec>
			net_if_ipv4_set_gw(iface, &router);
    a402:	4620      	mov	r0, r4
    a404:	f107 0114 	add.w	r1, r7, #20
    a408:	f016 fb22 	bl	20a50 <net_if_ipv4_set_gw>
			router_present = true;
    a40c:	f04f 0a01 	mov.w	sl, #1
    a410:	e7b7      	b.n	a382 <net_dhcpv4_input+0x17e>
			if (length != 4U) {
    a412:	2a04      	cmp	r2, #4
    a414:	d001      	beq.n	a41a <net_dhcpv4_input+0x216>
				NET_ERR("options_lease_time, bad length");
    a416:	4b59      	ldr	r3, [pc, #356]	; (a57c <net_dhcpv4_input+0x378>)
    a418:	e7a1      	b.n	a35e <net_dhcpv4_input+0x15a>
			if (net_pkt_read_be32(
    a41a:	4628      	mov	r0, r5
    a41c:	f104 0128 	add.w	r1, r4, #40	; 0x28
    a420:	f017 f966 	bl	216f0 <net_pkt_read_be32>
    a424:	b910      	cbnz	r0, a42c <net_dhcpv4_input+0x228>
				    pkt, &iface->config.dhcpv4.lease_time) ||
    a426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a428:	2b00      	cmp	r3, #0
    a42a:	d1aa      	bne.n	a382 <net_dhcpv4_input+0x17e>
				NET_ERR("options_lease_time, wrong value");
    a42c:	4b54      	ldr	r3, [pc, #336]	; (a580 <net_dhcpv4_input+0x37c>)
    a42e:	e796      	b.n	a35e <net_dhcpv4_input+0x15a>
			if (length != 4U) {
    a430:	2a04      	cmp	r2, #4
    a432:	f47f af4c 	bne.w	a2ce <net_dhcpv4_input+0xca>
			if (net_pkt_read_be32(
    a436:	4628      	mov	r0, r5
    a438:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a43c:	f017 f958 	bl	216f0 <net_pkt_read_be32>
    a440:	2800      	cmp	r0, #0
    a442:	f47f af44 	bne.w	a2ce <net_dhcpv4_input+0xca>
				    pkt, &iface->config.dhcpv4.renewal_time) ||
    a446:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
				    &iface->config.dhcpv4.rebinding_time) ||
    a448:	2b00      	cmp	r3, #0
    a44a:	d19a      	bne.n	a382 <net_dhcpv4_input+0x17e>
    a44c:	e73f      	b.n	a2ce <net_dhcpv4_input+0xca>
			if (length != 4U) {
    a44e:	2a04      	cmp	r2, #4
    a450:	f47f af3d 	bne.w	a2ce <net_dhcpv4_input+0xca>
			if (net_pkt_read_be32(
    a454:	4628      	mov	r0, r5
    a456:	f104 0130 	add.w	r1, r4, #48	; 0x30
    a45a:	f017 f949 	bl	216f0 <net_pkt_read_be32>
    a45e:	2800      	cmp	r0, #0
    a460:	f47f af35 	bne.w	a2ce <net_dhcpv4_input+0xca>
				    &iface->config.dhcpv4.rebinding_time) ||
    a464:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a466:	e7ef      	b.n	a448 <net_dhcpv4_input+0x244>
			if (length != 4U) {
    a468:	2a04      	cmp	r2, #4
    a46a:	f47f af30 	bne.w	a2ce <net_dhcpv4_input+0xca>
			if (net_pkt_read(
    a46e:	4628      	mov	r0, r5
    a470:	f104 0134 	add.w	r1, r4, #52	; 0x34
    a474:	f017 f933 	bl	216de <net_pkt_read>
			if (net_pkt_skip(pkt, length)) {
    a478:	2800      	cmp	r0, #0
    a47a:	d082      	beq.n	a382 <net_dhcpv4_input+0x17e>
    a47c:	e727      	b.n	a2ce <net_dhcpv4_input+0xca>
			if (length != 1U) {
    a47e:	2a01      	cmp	r2, #1
    a480:	f47f af25 	bne.w	a2ce <net_dhcpv4_input+0xca>
				uint8_t val = 0U;
    a484:	2300      	movs	r3, #0
    a486:	4628      	mov	r0, r5
    a488:	f887 3020 	strb.w	r3, [r7, #32]
    a48c:	f107 0120 	add.w	r1, r7, #32
    a490:	f017 f925 	bl	216de <net_pkt_read>
				if (net_pkt_read_u8(pkt, &val)) {
    a494:	2800      	cmp	r0, #0
    a496:	f47f af1a 	bne.w	a2ce <net_dhcpv4_input+0xca>
				*msg_type = val;
    a49a:	f897 6020 	ldrb.w	r6, [r7, #32]
			break;
    a49e:	e770      	b.n	a382 <net_dhcpv4_input+0x17e>
	bool router_present = false;
    a4a0:	4682      	mov	sl, r0
    a4a2:	e76e      	b.n	a382 <net_dhcpv4_input+0x17e>
    a4a4:	f8d9 2000 	ldr.w	r2, [r9]
	switch (msg_type) {
    a4a8:	2e05      	cmp	r6, #5
    a4aa:	68d2      	ldr	r2, [r2, #12]
    a4ac:	6462      	str	r2, [r4, #68]	; 0x44
    a4ae:	d006      	beq.n	a4be <net_dhcpv4_input+0x2ba>
    a4b0:	2e06      	cmp	r6, #6
    a4b2:	d031      	beq.n	a518 <net_dhcpv4_input+0x314>
	net_pkt_unref(pkt);
    a4b4:	4628      	mov	r0, r5
    a4b6:	f016 ff7d 	bl	213b4 <net_pkt_unref>
	verdict = NET_OK;
    a4ba:	2400      	movs	r4, #0
    a4bc:	e708      	b.n	a2d0 <net_dhcpv4_input+0xcc>
	switch (iface->config.dhcpv4.state) {
    a4be:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    a4c2:	2a03      	cmp	r2, #3
    a4c4:	d006      	beq.n	a4d4 <net_dhcpv4_input+0x2d0>
    a4c6:	3a04      	subs	r2, #4
    a4c8:	2a01      	cmp	r2, #1
    a4ca:	d8f3      	bhi.n	a4b4 <net_dhcpv4_input+0x2b0>
		dhcpv4_enter_bound(iface);
    a4cc:	4620      	mov	r0, r4
    a4ce:	f7ff fd5d 	bl	9f8c <dhcpv4_enter_bound>
		break;
    a4d2:	e7ef      	b.n	a4b4 <net_dhcpv4_input+0x2b0>
		NET_INFO("Received: %s",
    a4d4:	f104 0638 	add.w	r6, r4, #56	; 0x38
    a4d8:	4631      	mov	r1, r6
    a4da:	2001      	movs	r0, #1
    a4dc:	f7fe f9ca 	bl	8874 <net_sprint_addr>
    a4e0:	46e8      	mov	r8, sp
    a4e2:	b088      	sub	sp, #32
    a4e4:	466a      	mov	r2, sp
    a4e6:	4927      	ldr	r1, [pc, #156]	; (a584 <net_dhcpv4_input+0x380>)
    a4e8:	e9c2 1005 	strd	r1, r0, [r2, #20]
    a4ec:	f44f 7100 	mov.w	r1, #512	; 0x200
    a4f0:	8391      	strh	r1, [r2, #28]
    a4f2:	4925      	ldr	r1, [pc, #148]	; (a588 <net_dhcpv4_input+0x384>)
    a4f4:	f842 1f10 	str.w	r1, [r2, #16]!
    a4f8:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    a4fc:	465b      	mov	r3, fp
    a4fe:	481a      	ldr	r0, [pc, #104]	; (a568 <net_dhcpv4_input+0x364>)
    a500:	f7fa fcc0 	bl	4e84 <z_impl_z_log_msg_static_create>
		if (!net_if_ipv4_addr_add(iface,
    a504:	2202      	movs	r2, #2
    a506:	46c5      	mov	sp, r8
    a508:	4631      	mov	r1, r6
    a50a:	4620      	mov	r0, r4
    a50c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a50e:	f7fd fe1f 	bl	8150 <net_if_ipv4_addr_add>
    a512:	2800      	cmp	r0, #0
    a514:	d1da      	bne.n	a4cc <net_dhcpv4_input+0x2c8>
    a516:	e7cd      	b.n	a4b4 <net_dhcpv4_input+0x2b0>
	switch (iface->config.dhcpv4.state) {
    a518:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    a51c:	2a03      	cmp	r2, #3
    a51e:	d90e      	bls.n	a53e <net_dhcpv4_input+0x33a>
    a520:	3a04      	subs	r2, #4
    a522:	2a01      	cmp	r2, #1
    a524:	d8c6      	bhi.n	a4b4 <net_dhcpv4_input+0x2b0>
		if (!net_if_ipv4_addr_rm(iface,
    a526:	4620      	mov	r0, r4
    a528:	f104 0138 	add.w	r1, r4, #56	; 0x38
    a52c:	f7fd fe58 	bl	81e0 <net_if_ipv4_addr_rm>
	iface->config.dhcpv4.renewal_time = 0U;
    a530:	e9c4 bb0a 	strd	fp, fp, [r4, #40]	; 0x28
	iface->config.dhcpv4.server_id.s_addr = INADDR_ANY;
    a534:	e9c4 bb0c 	strd	fp, fp, [r4, #48]	; 0x30
	iface->config.dhcpv4.requested_ip.s_addr = INADDR_ANY;
    a538:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
    a53c:	e00d      	b.n	a55a <net_dhcpv4_input+0x356>
		if (memcmp(&iface->config.dhcpv4.request_server_addr,
    a53e:	2204      	movs	r2, #4
    a540:	f104 0144 	add.w	r1, r4, #68	; 0x44
    a544:	f104 0040 	add.w	r0, r4, #64	; 0x40
    a548:	f00c fe82 	bl	17250 <memcmp>
    a54c:	2800      	cmp	r0, #0
    a54e:	d1b1      	bne.n	a4b4 <net_dhcpv4_input+0x2b0>
	iface->config.dhcpv4.renewal_time = 0U;
    a550:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
	iface->config.dhcpv4.server_id.s_addr = INADDR_ANY;
    a554:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
	iface->config.dhcpv4.requested_ip.s_addr = INADDR_ANY;
    a558:	63a0      	str	r0, [r4, #56]	; 0x38
	iface->config.dhcpv4.state = NET_DHCPV4_SELECTING;
    a55a:	2302      	movs	r3, #2
    a55c:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
    a55e:	e7a9      	b.n	a4b4 <net_dhcpv4_input+0x2b0>
    a560:	000330b6 	.word	0x000330b6
    a564:	00032f8e 	.word	0x00032f8e
    a568:	00024cf0 	.word	0x00024cf0
    a56c:	00032fa9 	.word	0x00032fa9
    a570:	00032fc9 	.word	0x00032fc9
    a574:	00032feb 	.word	0x00032feb
    a578:	00033006 	.word	0x00033006
    a57c:	00033023 	.word	0x00033023
    a580:	00033042 	.word	0x00033042
    a584:	00033062 	.word	0x00033062
    a588:	01000003 	.word	0x01000003

0000a58c <dhcpv4_iface_event_handler>:
{
    a58c:	b538      	push	{r3, r4, r5, lr}
    a58e:	4614      	mov	r4, r2
    a590:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
    a592:	f04f 30ff 	mov.w	r0, #4294967295
    a596:	f04f 31ff 	mov.w	r1, #4294967295
    a59a:	f7ff fd1f 	bl	9fdc <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    a59e:	4b1a      	ldr	r3, [pc, #104]	; (a608 <dhcpv4_iface_event_handler+0x7c>)
		if (node == &iface->config.dhcpv4.node) {
    a5a0:	f104 0210 	add.w	r2, r4, #16
    a5a4:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_NODE(&dhcpv4_ifaces, node) {
    a5a6:	b91b      	cbnz	r3, a5b0 <dhcpv4_iface_event_handler+0x24>
}
    a5a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
    a5ac:	f7ff bd1e 	b.w	9fec <k_mutex_unlock.constprop.0.isra.0>
		if (node == &iface->config.dhcpv4.node) {
    a5b0:	4293      	cmp	r3, r2
    a5b2:	d01e      	beq.n	a5f2 <dhcpv4_iface_event_handler+0x66>
	return node->next;
    a5b4:	681b      	ldr	r3, [r3, #0]
    a5b6:	e7f6      	b.n	a5a6 <dhcpv4_iface_event_handler+0x1a>
	} else if (mgmt_event == NET_EVENT_IF_UP) {
    a5b8:	4b14      	ldr	r3, [pc, #80]	; (a60c <dhcpv4_iface_event_handler+0x80>)
    a5ba:	429d      	cmp	r5, r3
    a5bc:	d1f4      	bne.n	a5a8 <dhcpv4_iface_event_handler+0x1c>
	return z_impl_k_uptime_ticks();
    a5be:	f019 ff7f 	bl	244c0 <z_impl_k_uptime_ticks>
    a5c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a5c6:	fba0 0302 	umull	r0, r3, r0, r2
    a5ca:	fb02 3101 	mla	r1, r2, r1, r3
    a5ce:	0bc3      	lsrs	r3, r0, #15
    a5d0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	dhcpv4->timer_start = k_uptime_get() - 1;
    a5d4:	3b01      	subs	r3, #1
    a5d6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
    a5da:	f141 31ff 	adc.w	r1, r1, #4294967295
    a5de:	e9c4 3106 	strd	r3, r1, [r4, #24]
	dhcpv4->request_time = 0U;
    a5e2:	2300      	movs	r3, #0
	k_work_reschedule(&timeout_work, K_NO_WAIT);
    a5e4:	2200      	movs	r2, #0
	dhcpv4->request_time = 0U;
    a5e6:	6223      	str	r3, [r4, #32]
	k_work_reschedule(&timeout_work, K_NO_WAIT);
    a5e8:	4809      	ldr	r0, [pc, #36]	; (a610 <dhcpv4_iface_event_handler+0x84>)
    a5ea:	2300      	movs	r3, #0
    a5ec:	f00b fba8 	bl	15d40 <k_work_reschedule>
}
    a5f0:	e7da      	b.n	a5a8 <dhcpv4_iface_event_handler+0x1c>
	if (mgmt_event == NET_EVENT_IF_DOWN) {
    a5f2:	4b08      	ldr	r3, [pc, #32]	; (a614 <dhcpv4_iface_event_handler+0x88>)
    a5f4:	429d      	cmp	r5, r3
    a5f6:	d1df      	bne.n	a5b8 <dhcpv4_iface_event_handler+0x2c>
		if (iface->config.dhcpv4.state == NET_DHCPV4_BOUND) {
    a5f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    a5fc:	2b06      	cmp	r3, #6
    a5fe:	d1d3      	bne.n	a5a8 <dhcpv4_iface_event_handler+0x1c>
			iface->config.dhcpv4.state = NET_DHCPV4_RENEWING;
    a600:	2304      	movs	r3, #4
    a602:	87a3      	strh	r3, [r4, #60]	; 0x3c
			NET_DBG("enter state=%s", net_dhcpv4_state_name(
    a604:	e7d0      	b.n	a5a8 <dhcpv4_iface_event_handler+0x1c>
    a606:	bf00      	nop
    a608:	20003880 	.word	0x20003880
    a60c:	d0010002 	.word	0xd0010002
    a610:	20002498 	.word	0x20002498
    a614:	d0010001 	.word	0xd0010001

0000a618 <dhcpv4_timeout>:
{
    a618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a61c:	f019 ff50 	bl	244c0 <z_impl_k_uptime_ticks>
    a620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a624:	fba0 0703 	umull	r0, r7, r0, r3
    a628:	fb03 7701 	mla	r7, r3, r1, r7
    a62c:	0bc6      	lsrs	r6, r0, #15
	k_mutex_lock(&lock, K_FOREVER);
    a62e:	f04f 31ff 	mov.w	r1, #4294967295
    a632:	f04f 30ff 	mov.w	r0, #4294967295
    a636:	f7ff fcd1 	bl	9fdc <k_mutex_lock.constprop.0.isra.0>
	return list->head;
    a63a:	4b6c      	ldr	r3, [pc, #432]	; (a7ec <dhcpv4_timeout+0x1d4>)
    a63c:	ea46 4647 	orr.w	r6, r6, r7, lsl #17
    a640:	681c      	ldr	r4, [r3, #0]
    a642:	0bff      	lsrs	r7, r7, #15
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
    a644:	b314      	cbz	r4, a68c <dhcpv4_timeout+0x74>
	return node->next;
    a646:	f8d4 a000 	ldr.w	sl, [r4]
    a64a:	f04f 38ff 	mov.w	r8, #4294967295
    a64e:	b9fc      	cbnz	r4, a690 <dhcpv4_timeout+0x78>
	k_mutex_unlock(&lock);
    a650:	f7ff fccc 	bl	9fec <k_mutex_unlock.constprop.0.isra.0>
	if (timeout_update != UINT32_MAX) {
    a654:	f1b8 3fff 	cmp.w	r8, #4294967295
    a658:	f000 80c4 	beq.w	a7e4 <dhcpv4_timeout+0x1cc>
				  K_SECONDS(timeout_update));
    a65c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a660:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    a664:	4621      	mov	r1, r4
    a666:	f240 30e7 	movw	r0, #999	; 0x3e7
    a66a:	fb03 f808 	mul.w	r8, r3, r8
    a66e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a672:	2300      	movs	r3, #0
    a674:	fbe8 0105 	umlal	r0, r1, r8, r5
    a678:	f7f6 f9ac 	bl	9d4 <__aeabi_uldivmod>
    a67c:	4602      	mov	r2, r0
    a67e:	460b      	mov	r3, r1
		k_work_reschedule(&timeout_work,
    a680:	485b      	ldr	r0, [pc, #364]	; (a7f0 <dhcpv4_timeout+0x1d8>)
}
    a682:	b003      	add	sp, #12
    a684:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_work_reschedule(&timeout_work,
    a688:	f00b bb5a 	b.w	15d40 <k_work_reschedule>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
    a68c:	46a2      	mov	sl, r4
    a68e:	e7dc      	b.n	a64a <dhcpv4_timeout+0x32>
	int64_t deadline = start + MSEC_PER_SEC * time;
    a690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a694:	6920      	ldr	r0, [r4, #16]
    a696:	4358      	muls	r0, r3
    a698:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    a69c:	18c0      	adds	r0, r0, r3
    a69e:	f141 0100 	adc.w	r1, r1, #0
	if (deadline > now) {
    a6a2:	4286      	cmp	r6, r0
    a6a4:	eb77 0301 	sbcs.w	r3, r7, r1
    a6a8:	da0d      	bge.n	a6c6 <dhcpv4_timeout+0xae>
		ret = (uint32_t)DIV_ROUND_UP(deadline - now, MSEC_PER_SEC);
    a6aa:	f240 33e7 	movw	r3, #999	; 0x3e7
    a6ae:	1b80      	subs	r0, r0, r6
    a6b0:	eb61 0107 	sbc.w	r1, r1, r7
    a6b4:	18c0      	adds	r0, r0, r3
    a6b6:	f141 0100 	adc.w	r1, r1, #0
    a6ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a6be:	2300      	movs	r3, #0
    a6c0:	f7f6 f938 	bl	934 <__aeabi_ldivmod>
	if (timeleft != 0U) {
    a6c4:	b9d8      	cbnz	r0, a6fe <dhcpv4_timeout+0xe6>
    a6c6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a6ca:	330c      	adds	r3, #12
    a6cc:	e8d3 3faf 	lda	r3, [r3]
	return net_if_flag_is_set(iface, NET_IF_UP) &&
    a6d0:	07da      	lsls	r2, r3, #31
    a6d2:	d512      	bpl.n	a6fa <dhcpv4_timeout+0xe2>
    a6d4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a6d8:	330c      	adds	r3, #12
    a6da:	e8d3 3faf 	lda	r3, [r3]
    a6de:	05db      	lsls	r3, r3, #23
    a6e0:	d50b      	bpl.n	a6fa <dhcpv4_timeout+0xe2>
	switch (iface->config.dhcpv4.state) {
    a6e2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		struct net_if *iface = CONTAINER_OF(
    a6e6:	f1a4 0910 	sub.w	r9, r4, #16
	switch (iface->config.dhcpv4.state) {
    a6ea:	3b01      	subs	r3, #1
    a6ec:	2b05      	cmp	r3, #5
    a6ee:	d804      	bhi.n	a6fa <dhcpv4_timeout+0xe2>
    a6f0:	e8df f003 	tbb	[pc, r3]
    a6f4:	6c101c14 	.word	0x6c101c14
    a6f8:	206c      	.short	0x206c
		return UINT32_MAX;
    a6fa:	f04f 30ff 	mov.w	r0, #4294967295
		if (next_timeout < timeout_update) {
    a6fe:	4580      	cmp	r8, r0
    a700:	bf28      	it	cs
    a702:	4680      	movcs	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
    a704:	f1ba 0f00 	cmp.w	sl, #0
    a708:	d06a      	beq.n	a7e0 <dhcpv4_timeout+0x1c8>
    a70a:	f8da 3000 	ldr.w	r3, [sl]
    a70e:	4654      	mov	r4, sl
    a710:	469a      	mov	sl, r3
    a712:	e79c      	b.n	a64e <dhcpv4_timeout+0x36>
		if (iface->config.dhcpv4.attempts >=
    a714:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    a718:	2b02      	cmp	r3, #2
    a71a:	d951      	bls.n	a7c0 <dhcpv4_timeout+0x1a8>
	iface->config.dhcpv4.lease_time = 0U;
    a71c:	2300      	movs	r3, #0
	iface->config.dhcpv4.renewal_time = 0U;
    a71e:	e9c4 3306 	strd	r3, r3, [r4, #24]
	iface->config.dhcpv4.server_id.s_addr = INADDR_ANY;
    a722:	e9c4 3308 	strd	r3, r3, [r4, #32]
	iface->config.dhcpv4.requested_ip.s_addr = INADDR_ANY;
    a726:	62a3      	str	r3, [r4, #40]	; 0x28
	iface->config.dhcpv4.state = NET_DHCPV4_SELECTING;
    a728:	2302      	movs	r3, #2
    a72a:	85a3      	strh	r3, [r4, #44]	; 0x2c
		return dhcpv4_send_discover(iface);
    a72c:	4648      	mov	r0, r9
    a72e:	f017 f9a1 	bl	21a74 <dhcpv4_send_discover>
    a732:	e7e4      	b.n	a6fe <dhcpv4_timeout+0xe6>
	int64_t deadline = start + MSEC_PER_SEC * time;
    a734:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t rem = dhcpv4_get_timeleft(iface->config.dhcpv4.timer_start,
    a738:	68a3      	ldr	r3, [r4, #8]
	int64_t deadline = start + MSEC_PER_SEC * time;
    a73a:	69e0      	ldr	r0, [r4, #28]
	uint32_t rem = dhcpv4_get_timeleft(iface->config.dhcpv4.timer_start,
    a73c:	9300      	str	r3, [sp, #0]
	int64_t deadline = start + MSEC_PER_SEC * time;
    a73e:	fb0b f000 	mul.w	r0, fp, r0
	uint32_t rem = dhcpv4_get_timeleft(iface->config.dhcpv4.timer_start,
    a742:	68e3      	ldr	r3, [r4, #12]
    a744:	9301      	str	r3, [sp, #4]
	int64_t deadline = start + MSEC_PER_SEC * time;
    a746:	9b00      	ldr	r3, [sp, #0]
    a748:	18c0      	adds	r0, r0, r3
    a74a:	9b01      	ldr	r3, [sp, #4]
    a74c:	f143 0100 	adc.w	r1, r3, #0
	if (deadline > now) {
    a750:	4286      	cmp	r6, r0
    a752:	eb77 0301 	sbcs.w	r3, r7, r1
    a756:	da2d      	bge.n	a7b4 <dhcpv4_timeout+0x19c>
		ret = (uint32_t)DIV_ROUND_UP(deadline - now, MSEC_PER_SEC);
    a758:	f240 33e7 	movw	r3, #999	; 0x3e7
    a75c:	1b80      	subs	r0, r0, r6
    a75e:	eb61 0107 	sbc.w	r1, r1, r7
    a762:	18c0      	adds	r0, r0, r3
    a764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a768:	f04f 0300 	mov.w	r3, #0
    a76c:	f141 0100 	adc.w	r1, r1, #0
    a770:	f7f6 f8e0 	bl	934 <__aeabi_ldivmod>
	if (rem == 0U) {
    a774:	4605      	mov	r5, r0
    a776:	b1e8      	cbz	r0, a7b4 <dhcpv4_timeout+0x19c>
	int64_t deadline = start + MSEC_PER_SEC * time;
    a778:	6a20      	ldr	r0, [r4, #32]
    a77a:	9a00      	ldr	r2, [sp, #0]
    a77c:	fb0b f000 	mul.w	r0, fp, r0
    a780:	1880      	adds	r0, r0, r2
    a782:	9a01      	ldr	r2, [sp, #4]
    a784:	f142 0100 	adc.w	r1, r2, #0
	if (deadline > now) {
    a788:	4286      	cmp	r6, r0
    a78a:	eb77 0301 	sbcs.w	r3, r7, r1
    a78e:	da1b      	bge.n	a7c8 <dhcpv4_timeout+0x1b0>
		ret = (uint32_t)DIV_ROUND_UP(deadline - now, MSEC_PER_SEC);
    a790:	f240 33e7 	movw	r3, #999	; 0x3e7
    a794:	1b80      	subs	r0, r0, r6
    a796:	eb61 0107 	sbc.w	r1, r1, r7
    a79a:	18c0      	adds	r0, r0, r3
    a79c:	f141 0100 	adc.w	r1, r1, #0
    a7a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a7a4:	2300      	movs	r3, #0
    a7a6:	f7f6 f8c5 	bl	934 <__aeabi_ldivmod>
	if (rem == 0U) {
    a7aa:	b168      	cbz	r0, a7c8 <dhcpv4_timeout+0x1b0>
	return rem;
    a7ac:	42a8      	cmp	r0, r5
    a7ae:	bf28      	it	cs
    a7b0:	4628      	movcs	r0, r5
    a7b2:	e7a4      	b.n	a6fe <dhcpv4_timeout+0xe6>
    a7b4:	2304      	movs	r3, #4
		iface->config.dhcpv4.state = NET_DHCPV4_RENEWING;
    a7b6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		iface->config.dhcpv4.attempts = 0U;
    a7ba:	2300      	movs	r3, #0
    a7bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
			return dhcpv4_send_request(iface);
    a7c0:	4648      	mov	r0, r9
    a7c2:	f017 f982 	bl	21aca <dhcpv4_send_request>
    a7c6:	e79a      	b.n	a6fe <dhcpv4_timeout+0xe6>
    a7c8:	2305      	movs	r3, #5
    a7ca:	e7f4      	b.n	a7b6 <dhcpv4_timeout+0x19e>
		if (iface->config.dhcpv4.attempts >=
    a7cc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    a7d0:	2b02      	cmp	r3, #2
    a7d2:	d9f5      	bls.n	a7c0 <dhcpv4_timeout+0x1a8>
			if (!net_if_ipv4_addr_rm(iface,
    a7d4:	4648      	mov	r0, r9
    a7d6:	f104 0128 	add.w	r1, r4, #40	; 0x28
    a7da:	f7fd fd01 	bl	81e0 <net_if_ipv4_addr_rm>
	iface->config.dhcpv4.state = NET_DHCPV4_SELECTING;
    a7de:	e79d      	b.n	a71c <dhcpv4_timeout+0x104>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
    a7e0:	4653      	mov	r3, sl
    a7e2:	e794      	b.n	a70e <dhcpv4_timeout+0xf6>
}
    a7e4:	b003      	add	sp, #12
    a7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7ea:	bf00      	nop
    a7ec:	20003880 	.word	0x20003880
    a7f0:	20002498 	.word	0x20002498

0000a7f4 <net_dhcpv4_init>:
	net_dhcpv4_stop(iface);
	dhcpv4_start_internal(iface, false);
}

int net_dhcpv4_init(void)
{
    a7f4:	b510      	push	{r4, lr}
    a7f6:	b088      	sub	sp, #32
	struct sockaddr local_addr;
	int ret;

	NET_DBG("");

	net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
    a7f8:	f7fe f91a 	bl	8a30 <net_ipv4_unspecified_address>
    a7fc:	6803      	ldr	r3, [r0, #0]
    a7fe:	9307      	str	r3, [sp, #28]

	/* Register UDP input callback on
	 * DHCPV4_SERVER_PORT(67) and DHCPV4_CLIENT_PORT(68) for
	 * all dhcpv4 related incoming packets.
	 */
	ret = net_udp_register(AF_INET, NULL, &local_addr,
    a800:	2400      	movs	r4, #0
    a802:	4b0e      	ldr	r3, [pc, #56]	; (a83c <net_dhcpv4_init+0x48>)
	local_addr.sa_family = AF_INET;
    a804:	2001      	movs	r0, #1
	ret = net_udp_register(AF_INET, NULL, &local_addr,
    a806:	e9cd 4301 	strd	r4, r3, [sp, #4]
    a80a:	2344      	movs	r3, #68	; 0x44
    a80c:	4621      	mov	r1, r4
    a80e:	9300      	str	r3, [sp, #0]
    a810:	e9cd 4403 	strd	r4, r4, [sp, #12]
    a814:	2343      	movs	r3, #67	; 0x43
    a816:	aa06      	add	r2, sp, #24
	local_addr.sa_family = AF_INET;
    a818:	f8ad 0018 	strh.w	r0, [sp, #24]
	ret = net_udp_register(AF_INET, NULL, &local_addr,
    a81c:	f017 feda 	bl	225d4 <net_udp_register>
			       DHCPV4_SERVER_PORT,
			       DHCPV4_CLIENT_PORT,
			       NULL, net_dhcpv4_input, NULL, NULL);
	if (ret < 0) {
    a820:	2800      	cmp	r0, #0
    a822:	db09      	blt.n	a838 <net_dhcpv4_init+0x44>
		NET_DBG("UDP callback registration failed");
		return ret;
	}

	k_work_init_delayable(&timeout_work, dhcpv4_timeout);
    a824:	4806      	ldr	r0, [pc, #24]	; (a840 <net_dhcpv4_init+0x4c>)
    a826:	4907      	ldr	r1, [pc, #28]	; (a844 <net_dhcpv4_init+0x50>)
    a828:	f019 fcc2 	bl	241b0 <k_work_init_delayable>
	 * if interface is coming back up again.
	 */
	net_mgmt_init_event_callback(&mgmt4_cb, dhcpv4_iface_event_handler,
					 NET_EVENT_IF_DOWN | NET_EVENT_IF_UP);

	return 0;
    a82c:	4620      	mov	r0, r4
	cb->handler = handler;
    a82e:	4b06      	ldr	r3, [pc, #24]	; (a848 <net_dhcpv4_init+0x54>)
    a830:	4a06      	ldr	r2, [pc, #24]	; (a84c <net_dhcpv4_init+0x58>)
    a832:	605a      	str	r2, [r3, #4]
	cb->event_mask = mgmt_event_mask;
    a834:	4a06      	ldr	r2, [pc, #24]	; (a850 <net_dhcpv4_init+0x5c>)
    a836:	611a      	str	r2, [r3, #16]
}
    a838:	b008      	add	sp, #32
    a83a:	bd10      	pop	{r4, pc}
    a83c:	0000a205 	.word	0x0000a205
    a840:	20002498 	.word	0x20002498
    a844:	0000a619 	.word	0x0000a619
    a848:	2000386c 	.word	0x2000386c
    a84c:	0000a58d 	.word	0x0000a58d
    a850:	d0010003 	.word	0xd0010003

0000a854 <net_icmpv4_register_handler>:
	return list->head;
    a854:	4b03      	ldr	r3, [pc, #12]	; (a864 <net_icmpv4_register_handler+0x10>)
    a856:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    a858:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    a85a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    a85c:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    a85e:	b902      	cbnz	r2, a862 <net_icmpv4_register_handler+0xe>
	list->tail = node;
    a860:	6058      	str	r0, [r3, #4]
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
    a862:	4770      	bx	lr
    a864:	20003888 	.word	0x20003888

0000a868 <net_icmpv4_input>:
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
    a868:	2200      	movs	r2, #0
    a86a:	2304      	movs	r3, #4
{
    a86c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a86e:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
    a870:	4669      	mov	r1, sp
{
    a872:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
    a874:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
    a878:	f7ff f850 	bl	991c <net_pkt_get_data>
	if (!icmp_hdr) {
    a87c:	4605      	mov	r5, r0
    a87e:	b910      	cbnz	r0, a886 <net_icmpv4_input+0x1e>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
    a880:	2002      	movs	r0, #2

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
    a882:	b002      	add	sp, #8
    a884:	bd70      	pop	{r4, r5, r6, pc}
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
    a886:	69a0      	ldr	r0, [r4, #24]
    a888:	f016 f911 	bl	20aae <net_if_need_calc_rx_checksum>
    a88c:	b9f0      	cbnz	r0, a8cc <net_icmpv4_input+0x64>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
    a88e:	69a0      	ldr	r0, [r4, #24]
    a890:	f106 0110 	add.w	r1, r6, #16
    a894:	f017 f977 	bl	21b86 <net_ipv4_is_addr_bcast>
    a898:	2800      	cmp	r0, #0
    a89a:	d1f1      	bne.n	a880 <net_icmpv4_input+0x18>
	return net_pkt_skip(pkt, access->size);
    a89c:	4620      	mov	r0, r4
    a89e:	9901      	ldr	r1, [sp, #4]
    a8a0:	f016 fe83 	bl	215aa <net_pkt_skip>
	return list->head;
    a8a4:	4b0d      	ldr	r3, [pc, #52]	; (a8dc <net_icmpv4_input+0x74>)
    a8a6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	d0e9      	beq.n	a880 <net_icmpv4_input+0x18>
		if (cb->type == icmp_hdr->type &&
    a8ac:	7a19      	ldrb	r1, [r3, #8]
    a8ae:	782a      	ldrb	r2, [r5, #0]
    a8b0:	4291      	cmp	r1, r2
    a8b2:	d1f8      	bne.n	a8a6 <net_icmpv4_input+0x3e>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    a8b4:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
    a8b6:	7869      	ldrb	r1, [r5, #1]
    a8b8:	4291      	cmp	r1, r2
    a8ba:	d001      	beq.n	a8c0 <net_icmpv4_input+0x58>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
    a8bc:	2a00      	cmp	r2, #0
    a8be:	d1f2      	bne.n	a8a6 <net_icmpv4_input+0x3e>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
    a8c0:	462a      	mov	r2, r5
    a8c2:	4631      	mov	r1, r6
    a8c4:	4620      	mov	r0, r4
    a8c6:	685b      	ldr	r3, [r3, #4]
    a8c8:	4798      	blx	r3
    a8ca:	e7da      	b.n	a882 <net_icmpv4_input+0x1a>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline uint16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
    a8cc:	2101      	movs	r1, #1
    a8ce:	4620      	mov	r0, r4
    a8d0:	f016 f9b6 	bl	20c40 <net_calc_chksum>
		if (net_calc_chksum_icmpv4(pkt) != 0U) {
    a8d4:	2800      	cmp	r0, #0
    a8d6:	d0da      	beq.n	a88e <net_icmpv4_input+0x26>
    a8d8:	e7d2      	b.n	a880 <net_icmpv4_input+0x18>
    a8da:	bf00      	nop
    a8dc:	20003888 	.word	0x20003888

0000a8e0 <net_icmpv4_init>:
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
	net_icmpv4_register_handler(&echo_request_handler);
    a8e0:	4801      	ldr	r0, [pc, #4]	; (a8e8 <net_icmpv4_init+0x8>)
    a8e2:	f7ff bfb7 	b.w	a854 <net_icmpv4_register_handler>
    a8e6:	bf00      	nop
    a8e8:	200008dc 	.word	0x200008dc

0000a8ec <tcp_unsent_len>:

	return window_full;
}

static int tcp_unsent_len(struct tcp *conn)
{
    a8ec:	b598      	push	{r3, r4, r7, lr}
	int unsent_len;

	if (conn->unacked_len > conn->send_data_total) {
    a8ee:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
    a8f2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
{
    a8f6:	af00      	add	r7, sp, #0
	if (conn->unacked_len > conn->send_data_total) {
    a8f8:	4299      	cmp	r1, r3
    a8fa:	d913      	bls.n	a924 <tcp_unsent_len+0x38>
		NET_ERR("total=%zu, unacked_len=%d",
    a8fc:	466c      	mov	r4, sp
    a8fe:	b088      	sub	sp, #32
    a900:	466a      	mov	r2, sp
    a902:	480e      	ldr	r0, [pc, #56]	; (a93c <tcp_unsent_len+0x50>)
    a904:	61d1      	str	r1, [r2, #28]
    a906:	e9c2 0305 	strd	r0, r3, [r2, #20]
    a90a:	2304      	movs	r3, #4
    a90c:	480c      	ldr	r0, [pc, #48]	; (a940 <tcp_unsent_len+0x54>)
    a90e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a912:	f842 3f10 	str.w	r3, [r2, #16]!
    a916:	f017 fc0f 	bl	22138 <z_log_msg_static_create.constprop.0>
			conn->send_data_total, conn->unacked_len);
		unsent_len = -ERANGE;
    a91a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    a91e:	46a5      	mov	sp, r4
	}
 out:
	NET_DBG("unsent_len=%d", unsent_len);

	return unsent_len;
}
    a920:	46bd      	mov	sp, r7
    a922:	bd98      	pop	{r3, r4, r7, pc}
	if (conn->unacked_len >= conn->send_win) {
    a924:	f8b0 0232 	ldrh.w	r0, [r0, #562]	; 0x232
    a928:	4281      	cmp	r1, r0
    a92a:	da05      	bge.n	a938 <tcp_unsent_len+0x4c>
	unsent_len = conn->send_data_total - conn->unacked_len;
    a92c:	1a5b      	subs	r3, r3, r1
		unsent_len = MIN(unsent_len, conn->send_win - conn->unacked_len);
    a92e:	1a40      	subs	r0, r0, r1
    a930:	4298      	cmp	r0, r3
    a932:	bfa8      	it	ge
    a934:	4618      	movge	r0, r3
    a936:	e7f3      	b.n	a920 <tcp_unsent_len+0x34>
		unsent_len = 0;
    a938:	2000      	movs	r0, #0
	return unsent_len;
    a93a:	e7f1      	b.n	a920 <tcp_unsent_len+0x34>
    a93c:	000330ce 	.word	0x000330ce
    a940:	00024d48 	.word	0x00024d48

0000a944 <tcp_send>:
{
    a944:	b510      	push	{r4, lr}
    a946:	4604      	mov	r4, r0
    a948:	b086      	sub	sp, #24
	tcp_pkt_ref(pkt);
    a94a:	f016 fd1a 	bl	21382 <net_pkt_ref>
	if (tcp_send_cb) {
    a94e:	4b0e      	ldr	r3, [pc, #56]	; (a988 <tcp_send+0x44>)
		if (tcp_send_cb(pkt) < 0) {
    a950:	4620      	mov	r0, r4
	if (tcp_send_cb) {
    a952:	681b      	ldr	r3, [r3, #0]
    a954:	b1ab      	cbz	r3, a982 <tcp_send+0x3e>
		if (tcp_send_cb(pkt) < 0) {
    a956:	4798      	blx	r3
		if (net_send_data(pkt) < 0) {
    a958:	2800      	cmp	r0, #0
    a95a:	da0c      	bge.n	a976 <tcp_send+0x32>
			NET_ERR("net_send_data()");
    a95c:	4b0b      	ldr	r3, [pc, #44]	; (a98c <tcp_send+0x48>)
    a95e:	480c      	ldr	r0, [pc, #48]	; (a990 <tcp_send+0x4c>)
    a960:	9305      	str	r3, [sp, #20]
    a962:	2302      	movs	r3, #2
    a964:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a968:	aa04      	add	r2, sp, #16
    a96a:	9304      	str	r3, [sp, #16]
    a96c:	f017 fbe4 	bl	22138 <z_log_msg_static_create.constprop.0>
			tcp_pkt_unref(pkt);
    a970:	4620      	mov	r0, r4
    a972:	f016 fd1f 	bl	213b4 <net_pkt_unref>
	tcp_pkt_unref(pkt);
    a976:	4620      	mov	r0, r4
}
    a978:	b006      	add	sp, #24
    a97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tcp_pkt_unref(pkt);
    a97e:	f016 bd19 	b.w	213b4 <net_pkt_unref>
		if (net_send_data(pkt) < 0) {
    a982:	f015 fed0 	bl	20726 <net_send_data>
    a986:	e7e7      	b.n	a958 <tcp_send+0x14>
    a988:	20003894 	.word	0x20003894
    a98c:	000330e8 	.word	0x000330e8
    a990:	00024d48 	.word	0x00024d48

0000a994 <tcp_init_isn>:

	return seq_scale(UNALIGNED_GET((uint32_t *)&hash[0]));
}

static uint32_t tcp_init_isn(struct sockaddr *saddr, struct sockaddr *daddr)
{
    a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		    saddr->sa_family == AF_INET6) {
			return tcpv6_init_isn(&net_sin6(saddr)->sin6_addr,
					      &net_sin6(daddr)->sin6_addr,
					      net_sin6(saddr)->sin6_port,
					      net_sin6(daddr)->sin6_port);
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    a998:	8805      	ldrh	r5, [r0, #0]
{
    a99a:	b08c      	sub	sp, #48	; 0x30
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    a99c:	2d01      	cmp	r5, #1
    a99e:	d136      	bne.n	aa0e <tcp_init_isn+0x7a>
			   saddr->sa_family == AF_INET) {
			return tcpv4_init_isn(&net_sin(saddr)->sin_addr,
    a9a0:	884c      	ldrh	r4, [r1, #2]
    a9a2:	8846      	ldrh	r6, [r0, #2]
    a9a4:	f8d0 8004 	ldr.w	r8, [r0, #4]
    a9a8:	684f      	ldr	r7, [r1, #4]
	} buf = {
    a9aa:	2210      	movs	r2, #16
    a9ac:	2100      	movs	r1, #0
    a9ae:	a805      	add	r0, sp, #20
    a9b0:	f00c fd12 	bl	173d8 <memset>
    a9b4:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
	if (!once) {
    a9b8:	4c17      	ldr	r4, [pc, #92]	; (aa18 <tcp_init_isn+0x84>)
	} buf = {
    a9ba:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
	if (!once) {
    a9be:	7823      	ldrb	r3, [r4, #0]
	} buf = {
    a9c0:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	if (!once) {
    a9c4:	b923      	cbnz	r3, a9d0 <tcp_init_isn+0x3c>
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
    a9c6:	2110      	movs	r1, #16
    a9c8:	4814      	ldr	r0, [pc, #80]	; (aa1c <tcp_init_isn+0x88>)
    a9ca:	f7fc fc71 	bl	72b0 <z_impl_sys_rand_get>
		once = true;
    a9ce:	7025      	strb	r5, [r4, #0]
	memcpy(buf.key, unique_key, sizeof(unique_key));
    a9d0:	4b12      	ldr	r3, [pc, #72]	; (aa1c <tcp_init_isn+0x88>)
    a9d2:	ac05      	add	r4, sp, #20
    a9d4:	f103 0510 	add.w	r5, r3, #16
    a9d8:	4622      	mov	r2, r4
    a9da:	6818      	ldr	r0, [r3, #0]
    a9dc:	6859      	ldr	r1, [r3, #4]
    a9de:	3308      	adds	r3, #8
    a9e0:	c203      	stmia	r2!, {r0, r1}
    a9e2:	42ab      	cmp	r3, r5
    a9e4:	4614      	mov	r4, r2
    a9e6:	d1f7      	bne.n	a9d8 <tcp_init_isn+0x44>
	mbedtls_md5((const unsigned char *)&buf, sizeof(buf), hash);
    a9e8:	211c      	movs	r1, #28
    a9ea:	aa01      	add	r2, sp, #4
    a9ec:	a805      	add	r0, sp, #20
    a9ee:	f009 fa89 	bl	13f04 <mbedtls_md5>
	return seq_scale(UNALIGNED_GET((uint32_t *)&hash[0]));
    a9f2:	9c01      	ldr	r4, [sp, #4]
    a9f4:	f019 fd64 	bl	244c0 <z_impl_k_uptime_ticks>
			return (uint32_t)((t * to_hz + off) / from_hz);
    a9f8:	4b09      	ldr	r3, [pc, #36]	; (aa20 <tcp_init_isn+0x8c>)
    a9fa:	fba0 3203 	umull	r3, r2, r0, r3
    a9fe:	0bdb      	lsrs	r3, r3, #15
    aa00:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	return seq + (k_ticks_to_ns_floor32(k_uptime_ticks()) >> 6);
    aa04:	eb04 1093 	add.w	r0, r4, r3, lsr #6
					      net_sin(daddr)->sin_port);
		}
	}

	return sys_rand32_get();
}
    aa08:	b00c      	add	sp, #48	; 0x30
    aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa0e:	b00c      	add	sp, #48	; 0x30
    aa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_sys_rand32_get();
    aa14:	f7fc bc38 	b.w	7288 <z_impl_sys_rand32_get>
    aa18:	20005521 	.word	0x20005521
    aa1c:	20005522 	.word	0x20005522
    aa20:	3b9aca00 	.word	0x3b9aca00

0000aa24 <th_get>:
{
    aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa28:	b085      	sub	sp, #20
    aa2a:	4604      	mov	r4, r0
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
    aa2c:	f890 8036 	ldrb.w	r8, [r0, #54]	; 0x36
    aa30:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
    aa34:	af02      	add	r7, sp, #8
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
    aa36:	4498      	add	r8, r3
	if (net_pkt_get_len(pkt) < (pos + len)) {
    aa38:	f108 0b14 	add.w	fp, r8, #20
	net_pkt_cursor_init(pkt);
    aa3c:	4620      	mov	r0, r4
    aa3e:	f016 fd4a 	bl	214d6 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
    aa42:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (net_pkt_skip(pkt, ip_len) != 0) {
    aa46:	4641      	mov	r1, r8
    aa48:	f043 0301 	orr.w	r3, r3, #1
    aa4c:	4620      	mov	r0, r4
    aa4e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
    aa52:	f016 fdaa 	bl	215aa <net_pkt_skip>
    aa56:	b9f8      	cbnz	r0, aa98 <th_get+0x74>
	if (!net_pkt_is_contiguous(pkt, sizeof(*th))) {
    aa58:	2114      	movs	r1, #20
    aa5a:	4620      	mov	r0, r4
    aa5c:	f016 ff8f 	bl	2197e <net_pkt_is_contiguous>
    aa60:	2800      	cmp	r0, #0
    aa62:	d162      	bne.n	ab2a <th_get+0x106>
	if (net_pkt_get_len(pkt) < (pos + len)) {
    aa64:	68a0      	ldr	r0, [r4, #8]
    aa66:	f017 fb6c 	bl	22142 <net_pkt_get_len.isra.0>
	struct net_buf *buf, *first = pkt->cursor.buf, *second = first->frags;
    aa6a:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (net_pkt_get_len(pkt) < (pos + len)) {
    aa6e:	4558      	cmp	r0, fp
	struct net_buf *buf, *first = pkt->cursor.buf, *second = first->frags;
    aa70:	f8d9 6004 	ldr.w	r6, [r9, #4]
	if (net_pkt_get_len(pkt) < (pos + len)) {
    aa74:	d215      	bcs.n	aaa2 <th_get+0x7e>
		NET_ERR("Insufficient packet len=%zd (pos+len=%zu)",
    aa76:	466c      	mov	r4, sp
    aa78:	b088      	sub	sp, #32
    aa7a:	aa02      	add	r2, sp, #8
    aa7c:	4b2c      	ldr	r3, [pc, #176]	; (ab30 <th_get+0x10c>)
    aa7e:	f8c2 b01c 	str.w	fp, [r2, #28]
    aa82:	e9c2 3005 	strd	r3, r0, [r2, #20]
    aa86:	2304      	movs	r3, #4
    aa88:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    aa8c:	4829      	ldr	r0, [pc, #164]	; (ab34 <th_get+0x110>)
    aa8e:	f842 3f10 	str.w	r3, [r2, #16]!
    aa92:	f017 fb51 	bl	22138 <z_log_msg_static_create.constprop.0>
    aa96:	46a5      	mov	sp, r4
	struct tcphdr *th = NULL;
    aa98:	2000      	movs	r0, #0
}
    aa9a:	370c      	adds	r7, #12
    aa9c:	46bd      	mov	sp, r7
    aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	buf = net_pkt_get_frag(pkt, len, TCP_PKT_ALLOC_TIMEOUT);
    aaa2:	f640 42cd 	movw	r2, #3277	; 0xccd
    aaa6:	2300      	movs	r3, #0
    aaa8:	2114      	movs	r1, #20
    aaaa:	4620      	mov	r0, r4
    aaac:	f7fe fdec 	bl	9688 <net_pkt_get_frag>
	if (!buf || buf->size < len) {
    aab0:	4605      	mov	r5, r0
    aab2:	2800      	cmp	r0, #0
    aab4:	d0f0      	beq.n	aa98 <th_get+0x74>
    aab6:	8a41      	ldrh	r1, [r0, #18]
    aab8:	2913      	cmp	r1, #19
    aaba:	d802      	bhi.n	aac2 <th_get+0x9e>
			net_buf_unref(buf);
    aabc:	f7fc fcd2 	bl	7464 <net_buf_unref>
	return ret;
    aac0:	e7ea      	b.n	aa98 <th_get+0x74>
	net_buf_linearize(buf->data, buf->size, pkt->frags, pos, len);
    aac2:	2314      	movs	r3, #20
    aac4:	4682      	mov	sl, r0
    aac6:	9300      	str	r3, [sp, #0]
    aac8:	f85a 0f0c 	ldr.w	r0, [sl, #12]!
    aacc:	4643      	mov	r3, r8
    aace:	68a2      	ldr	r2, [r4, #8]
    aad0:	f015 fae1 	bl	20096 <net_buf_linearize>
	return net_buf_simple_add(&buf->b, len);
    aad4:	2114      	movs	r1, #20
    aad6:	4650      	mov	r0, sl
    aad8:	f015 fb08 	bl	200ec <net_buf_simple_add>
	len1 = first->len - (pkt->cursor.pos - pkt->cursor.buf->data);
    aadc:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
    aae0:	68c9      	ldr	r1, [r1, #12]
    aae2:	f8b9 2010 	ldrh.w	r2, [r9, #16]
    aae6:	1a5b      	subs	r3, r3, r1
    aae8:	1ad3      	subs	r3, r2, r3
	first->len -= len1;
    aaea:	1ad2      	subs	r2, r2, r3
	len2 = len - len1;
    aaec:	f1c3 0a14 	rsb	sl, r3, #20
	first->len -= len1;
    aaf0:	f8a9 2010 	strh.w	r2, [r9, #16]
	while (len2) {
    aaf4:	f1ba 0f00 	cmp.w	sl, #0
    aaf8:	d103      	bne.n	ab02 <th_get+0xde>
	buf->frags = second;
    aafa:	606e      	str	r6, [r5, #4]
	first->frags = buf;
    aafc:	f8c9 5004 	str.w	r5, [r9, #4]
	return ret;
    ab00:	e79c      	b.n	aa3c <th_get+0x18>
		size_t pull_len = MIN(second->len, len2);
    ab02:	8a31      	ldrh	r1, [r6, #16]
	return net_buf_simple_pull(&buf->b, len);
    ab04:	f106 000c 	add.w	r0, r6, #12
    ab08:	4551      	cmp	r1, sl
    ab0a:	bf28      	it	cs
    ab0c:	4651      	movcs	r1, sl
		len2 -= pull_len;
    ab0e:	ebaa 0a01 	sub.w	sl, sl, r1
    ab12:	f015 faf1 	bl	200f8 <net_buf_simple_pull>
		if (second->len == 0) {
    ab16:	8a32      	ldrh	r2, [r6, #16]
		next = second->frags;
    ab18:	6873      	ldr	r3, [r6, #4]
		if (second->len == 0) {
    ab1a:	b922      	cbnz	r2, ab26 <th_get+0x102>
			net_buf_unref(second);
    ab1c:	4630      	mov	r0, r6
    ab1e:	607b      	str	r3, [r7, #4]
    ab20:	f7fc fca0 	bl	7464 <net_buf_unref>
    ab24:	687b      	ldr	r3, [r7, #4]
{
    ab26:	461e      	mov	r6, r3
    ab28:	e7e4      	b.n	aaf4 <th_get+0xd0>
	return pkt->cursor.pos;
    ab2a:	6920      	ldr	r0, [r4, #16]
	return th;
    ab2c:	e7b5      	b.n	aa9a <th_get+0x76>
    ab2e:	bf00      	nop
    ab30:	000330f8 	.word	0x000330f8
    ab34:	00024d48 	.word	0x00024d48

0000ab38 <tcp_endpoint_set>:
{
    ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return pkt->family;
    ab3c:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
    ab40:	4604      	mov	r4, r0
    ab42:	095b      	lsrs	r3, r3, #5
	switch (net_pkt_family(pkt)) {
    ab44:	2b01      	cmp	r3, #1
{
    ab46:	4608      	mov	r0, r1
    ab48:	4690      	mov	r8, r2
    ab4a:	af00      	add	r7, sp, #0
	switch (net_pkt_family(pkt)) {
    ab4c:	d013      	beq.n	ab76 <tcp_endpoint_set+0x3e>
    ab4e:	2b02      	cmp	r3, #2
    ab50:	d00e      	beq.n	ab70 <tcp_endpoint_set+0x38>
		NET_ERR("Unknown address family: %hu", net_pkt_family(pkt));
    ab52:	466c      	mov	r4, sp
    ab54:	b088      	sub	sp, #32
    ab56:	466a      	mov	r2, sp
    ab58:	4916      	ldr	r1, [pc, #88]	; (abb4 <tcp_endpoint_set+0x7c>)
    ab5a:	4817      	ldr	r0, [pc, #92]	; (abb8 <tcp_endpoint_set+0x80>)
	switch (net_pkt_family(pkt)) {
    ab5c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		NET_ERR("Unknown address family: %hu", net_pkt_family(pkt));
    ab60:	2303      	movs	r3, #3
    ab62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ab66:	f842 3f10 	str.w	r3, [r2, #16]!
    ab6a:	f017 fae5 	bl	22138 <z_log_msg_static_create.constprop.0>
    ab6e:	46a5      	mov	sp, r4
			ret = -EINVAL;
    ab70:	f06f 0015 	mvn.w	r0, #21
    ab74:	e017      	b.n	aba6 <tcp_endpoint_set+0x6e>
	return pkt->frags->data;
    ab76:	688b      	ldr	r3, [r1, #8]
    ab78:	68dd      	ldr	r5, [r3, #12]
			th = th_get(pkt);
    ab7a:	f7ff ff53 	bl	aa24 <th_get>
			if (!th) {
    ab7e:	4606      	mov	r6, r0
    ab80:	b1a0      	cbz	r0, abac <tcp_endpoint_set+0x74>
__ssp_bos_icheck3(memset, void *, int)
    ab82:	2218      	movs	r2, #24
    ab84:	2100      	movs	r1, #0
    ab86:	4620      	mov	r0, r4
    ab88:	f00c fc26 	bl	173d8 <memset>
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
    ab8c:	f1b8 0f01 	cmp.w	r8, #1
    ab90:	bf0b      	itete	eq
    ab92:	8833      	ldrheq	r3, [r6, #0]
							       th_dport(th);
    ab94:	8873      	ldrhne	r3, [r6, #2]
			net_ipv4_addr_copy_raw((uint8_t *)&ep->sin.sin_addr,
    ab96:	350c      	addeq	r5, #12
    ab98:	3510      	addne	r5, #16
    ab9a:	8063      	strh	r3, [r4, #2]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
    ab9c:	682b      	ldr	r3, [r5, #0]
    ab9e:	6063      	str	r3, [r4, #4]
			ep->sa.sa_family = AF_INET;
    aba0:	2301      	movs	r3, #1
	int ret = 0;
    aba2:	2000      	movs	r0, #0
			ep->sa.sa_family = AF_INET;
    aba4:	8023      	strh	r3, [r4, #0]
}
    aba6:	46bd      	mov	sp, r7
    aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -ENOBUFS;
    abac:	f06f 0068 	mvn.w	r0, #104	; 0x68
    abb0:	e7f9      	b.n	aba6 <tcp_endpoint_set+0x6e>
    abb2:	bf00      	nop
    abb4:	00033122 	.word	0x00033122
    abb8:	00024d48 	.word	0x00024d48

0000abbc <tcp_send_timer_cancel>:
{
    abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->in_retransmission == false) {
    abc0:	f890 3239 	ldrb.w	r3, [r0, #569]	; 0x239
{
    abc4:	4604      	mov	r4, r0
	if (conn->in_retransmission == false) {
    abc6:	07db      	lsls	r3, r3, #31
    abc8:	d51e      	bpl.n	ac08 <tcp_send_timer_cancel+0x4c>
	k_work_cancel_delayable(&conn->send_timer);
    abca:	f100 0790 	add.w	r7, r0, #144	; 0x90
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
    abce:	f104 0628 	add.w	r6, r4, #40	; 0x28
	k_work_cancel_delayable(&conn->send_timer);
    abd2:	4638      	mov	r0, r7
    abd4:	f019 fafa 	bl	241cc <k_work_cancel_delayable>
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
    abd8:	f04f 32ff 	mov.w	r2, #4294967295
    abdc:	f04f 33ff 	mov.w	r3, #4294967295
    abe0:	4630      	mov	r0, r6
    abe2:	f017 faac 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
    abe6:	f104 0018 	add.w	r0, r4, #24
    abea:	f017 fa68 	bl	220be <sys_slist_get>
    abee:	4605      	mov	r5, r0
    abf0:	4630      	mov	r0, r6
    abf2:	b95d      	cbnz	r5, ac0c <tcp_send_timer_cancel+0x50>
    abf4:	f017 fae2 	bl	221bc <k_mutex_unlock.isra.0>
	if (sys_slist_is_empty(&conn->send_queue)) {
    abf8:	69a2      	ldr	r2, [r4, #24]
    abfa:	b972      	cbnz	r2, ac1a <tcp_send_timer_cancel+0x5e>
		conn->in_retransmission = false;
    abfc:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    ac00:	f362 0300 	bfi	r3, r2, #0, #1
    ac04:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
}
    ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
    ac0c:	f017 fad6 	bl	221bc <k_mutex_unlock.isra.0>
			tcp_pkt_unref(pkt);
    ac10:	f1a5 001c 	sub.w	r0, r5, #28
    ac14:	f016 fbce 	bl	213b4 <net_pkt_unref>
    ac18:	e7ee      	b.n	abf8 <tcp_send_timer_cancel+0x3c>
		conn->send_retries = tcp_retries;
    ac1a:	2309      	movs	r3, #9
			return ((t * to_hz + off) / from_hz);
    ac1c:	f240 31e7 	movw	r1, #999	; 0x3e7
    ac20:	f8b4 0234 	ldrh.w	r0, [r4, #564]	; 0x234
    ac24:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    ac28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ac2c:	2300      	movs	r3, #0
    ac2e:	eb01 30c0 	add.w	r0, r1, r0, lsl #15
    ac32:	2100      	movs	r1, #0
    ac34:	f7f5 fece 	bl	9d4 <__aeabi_uldivmod>
    ac38:	4602      	mov	r2, r0
    ac3a:	460b      	mov	r3, r1
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
    ac3c:	4802      	ldr	r0, [pc, #8]	; (ac48 <tcp_send_timer_cancel+0x8c>)
    ac3e:	4639      	mov	r1, r7
}
    ac40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
    ac44:	f00b b84e 	b.w	15ce4 <k_work_reschedule_for_queue>
    ac48:	200024c8 	.word	0x200024c8

0000ac4c <tcp_send_process_no_lock>:
{
    ac4c:	b570      	push	{r4, r5, r6, lr}
    ac4e:	4604      	mov	r4, r0
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
    ac50:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ac54:	f04f 32ff 	mov.w	r2, #4294967295
    ac58:	f04f 33ff 	mov.w	r3, #4294967295
    ac5c:	4630      	mov	r0, r6
{
    ac5e:	b086      	sub	sp, #24
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
    ac60:	f017 fa6d 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
    ac64:	69a5      	ldr	r5, [r4, #24]
    ac66:	b33d      	cbz	r5, acb8 <tcp_send_process_no_lock+0x6c>
    ac68:	4630      	mov	r0, r6
    ac6a:	f017 faa7 	bl	221bc <k_mutex_unlock.isra.0>
	if (conn->in_retransmission) {
    ac6e:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
    ac72:	3d1c      	subs	r5, #28
	if (conn->in_retransmission) {
    ac74:	07d8      	lsls	r0, r3, #31
    ac76:	d425      	bmi.n	acc4 <tcp_send_process_no_lock+0x78>
		uint8_t fl = th_get(pkt)->th_flags;
    ac78:	4628      	mov	r0, r5
    ac7a:	f7ff fed3 	bl	aa24 <th_get>
    ac7e:	7b43      	ldrb	r3, [r0, #13]
		bool forget = ACK == fl || PSH == fl || (ACK | PSH) == fl ||
    ac80:	2b10      	cmp	r3, #16
    ac82:	d049      	beq.n	ad18 <tcp_send_process_no_lock+0xcc>
    ac84:	f003 02ef 	and.w	r2, r3, #239	; 0xef
    ac88:	2a08      	cmp	r2, #8
    ac8a:	d045      	beq.n	ad18 <tcp_send_process_no_lock+0xcc>
    ac8c:	075a      	lsls	r2, r3, #29
    ac8e:	d443      	bmi.n	ad18 <tcp_send_process_no_lock+0xcc>
			tcp_pkt_clone(pkt);
    ac90:	4628      	mov	r0, r5
    ac92:	f640 42cd 	movw	r2, #3277	; 0xccd
    ac96:	2300      	movs	r3, #0
    ac98:	f016 fe55 	bl	21946 <net_pkt_clone>
		if (!pkt) {
    ac9c:	4605      	mov	r5, r0
    ac9e:	2800      	cmp	r0, #0
    aca0:	d162      	bne.n	ad68 <tcp_send_process_no_lock+0x11c>
			NET_ERR("net_pkt alloc failure");
    aca2:	4b3d      	ldr	r3, [pc, #244]	; (ad98 <tcp_send_process_no_lock+0x14c>)
    aca4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aca8:	9305      	str	r3, [sp, #20]
    acaa:	2302      	movs	r3, #2
    acac:	483b      	ldr	r0, [pc, #236]	; (ad9c <tcp_send_process_no_lock+0x150>)
    acae:	aa04      	add	r2, sp, #16
    acb0:	9304      	str	r3, [sp, #16]
    acb2:	f017 fa41 	bl	22138 <z_log_msg_static_create.constprop.0>
			goto out;
    acb6:	e002      	b.n	acbe <tcp_send_process_no_lock+0x72>
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
    acb8:	4630      	mov	r0, r6
    acba:	f017 fa7f 	bl	221bc <k_mutex_unlock.isra.0>
	bool unref = false;
    acbe:	2000      	movs	r0, #0
}
    acc0:	b006      	add	sp, #24
    acc2:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->send_retries > 0) {
    acc4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
    acc8:	2b00      	cmp	r3, #0
    acca:	d063      	beq.n	ad94 <tcp_send_process_no_lock+0x148>
			struct net_pkt *clone = tcp_pkt_clone(pkt);
    accc:	f640 42cd 	movw	r2, #3277	; 0xccd
    acd0:	2300      	movs	r3, #0
    acd2:	4628      	mov	r0, r5
    acd4:	f016 fe37 	bl	21946 <net_pkt_clone>
			if (clone) {
    acd8:	b130      	cbz	r0, ace8 <tcp_send_process_no_lock+0x9c>
				tcp_send(clone);
    acda:	f7ff fe33 	bl	a944 <tcp_send>
				conn->send_retries--;
    acde:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
    ace2:	3b01      	subs	r3, #1
    ace4:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	if (conn->in_retransmission) {
    ace8:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    acec:	07d9      	lsls	r1, r3, #31
    acee:	d5e6      	bpl.n	acbe <tcp_send_process_no_lock+0x72>
    acf0:	f240 31e7 	movw	r1, #999	; 0x3e7
    acf4:	f8b4 0234 	ldrh.w	r0, [r4, #564]	; 0x234
    acf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    acfc:	2300      	movs	r3, #0
    acfe:	eb01 30c0 	add.w	r0, r1, r0, lsl #15
    ad02:	2100      	movs	r1, #0
    ad04:	f7f5 fe66 	bl	9d4 <__aeabi_uldivmod>
    ad08:	4602      	mov	r2, r0
    ad0a:	460b      	mov	r3, r1
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
    ad0c:	f104 0190 	add.w	r1, r4, #144	; 0x90
    ad10:	4823      	ldr	r0, [pc, #140]	; (ada0 <tcp_send_process_no_lock+0x154>)
    ad12:	f00a ffe7 	bl	15ce4 <k_work_reschedule_for_queue>
    ad16:	e7d2      	b.n	acbe <tcp_send_process_no_lock+0x72>
		pkt = forget ? tcp_slist(conn, &conn->send_queue, get,
    ad18:	4630      	mov	r0, r6
    ad1a:	f04f 32ff 	mov.w	r2, #4294967295
    ad1e:	f04f 33ff 	mov.w	r3, #4294967295
    ad22:	f017 fa0c 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
    ad26:	f104 0018 	add.w	r0, r4, #24
    ad2a:	f017 f9c8 	bl	220be <sys_slist_get>
    ad2e:	b918      	cbnz	r0, ad38 <tcp_send_process_no_lock+0xec>
    ad30:	4630      	mov	r0, r6
    ad32:	f017 fa43 	bl	221bc <k_mutex_unlock.isra.0>
		if (!pkt) {
    ad36:	e7b4      	b.n	aca2 <tcp_send_process_no_lock+0x56>
		pkt = forget ? tcp_slist(conn, &conn->send_queue, get,
    ad38:	f1a0 051c 	sub.w	r5, r0, #28
    ad3c:	4630      	mov	r0, r6
    ad3e:	f017 fa3d 	bl	221bc <k_mutex_unlock.isra.0>
		if (is_destination_local(pkt)) {
    ad42:	4628      	mov	r0, r5
    ad44:	f017 f9d4 	bl	220f0 <is_destination_local>
    ad48:	4606      	mov	r6, r0
		tcp_send(pkt);
    ad4a:	4628      	mov	r0, r5
    ad4c:	f7ff fdfa 	bl	a944 <tcp_send>
	if (conn->in_retransmission) {
    ad50:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    ad54:	07db      	lsls	r3, r3, #31
    ad56:	d4cb      	bmi.n	acf0 <tcp_send_process_no_lock+0xa4>
	} else if (local && !sys_slist_is_empty(&conn->send_queue)) {
    ad58:	2e00      	cmp	r6, #0
    ad5a:	d0b0      	beq.n	acbe <tcp_send_process_no_lock+0x72>
    ad5c:	69a3      	ldr	r3, [r4, #24]
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d0ad      	beq.n	acbe <tcp_send_process_no_lock+0x72>
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
    ad62:	2200      	movs	r2, #0
    ad64:	2300      	movs	r3, #0
    ad66:	e7d1      	b.n	ad0c <tcp_send_process_no_lock+0xc0>
		if (is_destination_local(pkt)) {
    ad68:	f017 f9c2 	bl	220f0 <is_destination_local>
    ad6c:	4606      	mov	r6, r0
		tcp_send(pkt);
    ad6e:	4628      	mov	r0, r5
    ad70:	f7ff fde8 	bl	a944 <tcp_send>
    ad74:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    ad78:	f019 fb7e 	bl	24478 <z_timeout_remaining>
		if (forget == false &&
    ad7c:	4308      	orrs	r0, r1
    ad7e:	d1e7      	bne.n	ad50 <tcp_send_process_no_lock+0x104>
			conn->send_retries = tcp_retries;
    ad80:	2309      	movs	r3, #9
    ad82:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
			conn->in_retransmission = true;
    ad86:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    ad8a:	f043 0301 	orr.w	r3, r3, #1
    ad8e:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    ad92:	e7dd      	b.n	ad50 <tcp_send_process_no_lock+0x104>
			unref = true;
    ad94:	2001      	movs	r0, #1
    ad96:	e793      	b.n	acc0 <tcp_send_process_no_lock+0x74>
    ad98:	0003313e 	.word	0x0003313e
    ad9c:	00024d48 	.word	0x00024d48
    ada0:	200024c8 	.word	0x200024c8

0000ada4 <tcp_conn_unref.isra.0>:
static int tcp_conn_unref(struct tcp *conn)
    ada4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ada6:	9003      	str	r0, [sp, #12]
    ada8:	f500 7007 	add.w	r0, r0, #540	; 0x21c
    adac:	e8d0 3faf 	lda	r3, [r0]
	k_mutex_lock(&conn->lock, K_FOREVER);
    adb0:	9803      	ldr	r0, [sp, #12]
    adb2:	f04f 32ff 	mov.w	r2, #4294967295
    adb6:	f04f 33ff 	mov.w	r3, #4294967295
    adba:	3028      	adds	r0, #40	; 0x28
    adbc:	f017 f9bf 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	if (conn->in_connect) {
    adc0:	9803      	ldr	r0, [sp, #12]
    adc2:	f890 3239 	ldrb.w	r3, [r0, #569]	; 0x239
    adc6:	079a      	lsls	r2, r3, #30
    adc8:	d506      	bpl.n	add8 <tcp_conn_unref.isra.0+0x34>
		conn->in_connect = false;
    adca:	f36f 0341 	bfc	r3, #1, #1
    adce:	f880 3239 	strb.w	r3, [r0, #569]	; 0x239
	z_impl_k_sem_reset(sem);
    add2:	303c      	adds	r0, #60	; 0x3c
    add4:	f00a fe06 	bl	159e4 <z_impl_k_sem_reset>
	k_mutex_unlock(&conn->lock);
    add8:	9803      	ldr	r0, [sp, #12]
    adda:	3028      	adds	r0, #40	; 0x28
    addc:	f017 f9ee 	bl	221bc <k_mutex_unlock.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ade0:	9b03      	ldr	r3, [sp, #12]
    ade2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
    ade6:	e8d3 2fef 	ldaex	r2, [r3]
    adea:	3a01      	subs	r2, #1
    adec:	e8c3 2fe1 	stlex	r1, r2, [r3]
    adf0:	2900      	cmp	r1, #0
    adf2:	d1f8      	bne.n	ade6 <tcp_conn_unref.isra.0+0x42>
	if (ref_count != 0) {
    adf4:	2a00      	cmp	r2, #0
    adf6:	d173      	bne.n	aee0 <tcp_conn_unref.isra.0+0x13c>
	k_mutex_lock(&tcp_lock, K_FOREVER);
    adf8:	f04f 32ff 	mov.w	r2, #4294967295
    adfc:	f04f 33ff 	mov.w	r3, #4294967295
    ae00:	4848      	ldr	r0, [pc, #288]	; (af24 <tcp_conn_unref.isra.0+0x180>)
    ae02:	f017 f99c 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	while ((pkt = k_fifo_get(&conn->recv_data, K_NO_WAIT)) != NULL) {
    ae06:	9803      	ldr	r0, [sp, #12]
    ae08:	306c      	adds	r0, #108	; 0x6c
	return z_impl_k_queue_get(queue, timeout);
    ae0a:	2300      	movs	r3, #0
    ae0c:	2200      	movs	r2, #0
    ae0e:	f00a fd67 	bl	158e0 <z_impl_k_queue_get>
    ae12:	9b03      	ldr	r3, [sp, #12]
    ae14:	4604      	mov	r4, r0
    ae16:	2800      	cmp	r0, #0
    ae18:	d164      	bne.n	aee4 <tcp_conn_unref.isra.0+0x140>
	if (conn->context->conn_handler) {
    ae1a:	685b      	ldr	r3, [r3, #4]
    ae1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    ae1e:	b120      	cbz	r0, ae2a <tcp_conn_unref.isra.0+0x86>
		net_conn_unregister(conn->context->conn_handler);
    ae20:	f7fe ff2e 	bl	9c80 <net_conn_unregister>
		conn->context->conn_handler = NULL;
    ae24:	9b03      	ldr	r3, [sp, #12]
    ae26:	685b      	ldr	r3, [r3, #4]
    ae28:	631c      	str	r4, [r3, #48]	; 0x30
	conn->context->tcp = NULL;
    ae2a:	2100      	movs	r1, #0
    ae2c:	9b03      	ldr	r3, [sp, #12]
    ae2e:	685a      	ldr	r2, [r3, #4]
    ae30:	6491      	str	r1, [r2, #72]	; 0x48
	net_context_unref(conn->context);
    ae32:	6858      	ldr	r0, [r3, #4]
    ae34:	f015 ffdc 	bl	20df0 <net_context_unref>
	tcp_send_queue_flush(conn);
    ae38:	9d03      	ldr	r5, [sp, #12]
	k_work_cancel_delayable(&conn->send_timer);
    ae3a:	f105 0090 	add.w	r0, r5, #144	; 0x90
    ae3e:	f019 f9c5 	bl	241cc <k_work_cancel_delayable>
	while ((pkt = tcp_slist(conn, &conn->send_queue, get,
    ae42:	f105 0628 	add.w	r6, r5, #40	; 0x28
    ae46:	3518      	adds	r5, #24
    ae48:	f04f 32ff 	mov.w	r2, #4294967295
    ae4c:	f04f 33ff 	mov.w	r3, #4294967295
    ae50:	4630      	mov	r0, r6
    ae52:	f017 f974 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
    ae56:	4628      	mov	r0, r5
    ae58:	f017 f931 	bl	220be <sys_slist_get>
    ae5c:	4604      	mov	r4, r0
    ae5e:	4630      	mov	r0, r6
    ae60:	2c00      	cmp	r4, #0
    ae62:	d14e      	bne.n	af02 <tcp_conn_unref.isra.0+0x15e>
    ae64:	f017 f9aa 	bl	221bc <k_mutex_unlock.isra.0>
	k_work_cancel_delayable(&conn->send_data_timer);
    ae68:	9803      	ldr	r0, [sp, #12]
    ae6a:	30f0      	adds	r0, #240	; 0xf0
    ae6c:	f019 f9ae 	bl	241cc <k_work_cancel_delayable>
	tcp_pkt_unref(conn->send_data);
    ae70:	9b03      	ldr	r3, [sp, #12]
    ae72:	6898      	ldr	r0, [r3, #8]
    ae74:	f016 fa9e 	bl	213b4 <net_pkt_unref>
		tcp_pkt_unref(conn->queue_recv_data);
    ae78:	9b03      	ldr	r3, [sp, #12]
    ae7a:	68d8      	ldr	r0, [r3, #12]
    ae7c:	f016 fa9a 	bl	213b4 <net_pkt_unref>
	(void)k_work_cancel_delayable(&conn->timewait_timer);
    ae80:	9803      	ldr	r0, [sp, #12]
    ae82:	f500 7090 	add.w	r0, r0, #288	; 0x120
    ae86:	f019 f9a1 	bl	241cc <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->fin_timer);
    ae8a:	9803      	ldr	r0, [sp, #12]
    ae8c:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    ae90:	f019 f99c 	bl	241cc <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->persist_timer);
    ae94:	9803      	ldr	r0, [sp, #12]
    ae96:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    ae9a:	f019 f997 	bl	241cc <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->ack_timer);
    ae9e:	9803      	ldr	r0, [sp, #12]
    aea0:	f500 70c0 	add.w	r0, r0, #384	; 0x180
    aea4:	f019 f992 	bl	241cc <k_work_cancel_delayable>
    aea8:	4b1f      	ldr	r3, [pc, #124]	; (af28 <tcp_conn_unref.isra.0+0x184>)
	sys_slist_find_and_remove(&tcp_conns, &conn->next);
    aeaa:	9903      	ldr	r1, [sp, #12]
    aeac:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aeae:	b152      	cbz	r2, aec6 <tcp_conn_unref.isra.0+0x122>
    aeb0:	4291      	cmp	r1, r2
    aeb2:	d133      	bne.n	af1c <tcp_conn_unref.isra.0+0x178>
	return node->next;
    aeb4:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    aeb6:	bb5c      	cbnz	r4, af10 <tcp_conn_unref.isra.0+0x16c>
    aeb8:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    aeba:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    aebc:	4281      	cmp	r1, r0
    aebe:	d100      	bne.n	aec2 <tcp_conn_unref.isra.0+0x11e>
	list->tail = node;
    aec0:	605a      	str	r2, [r3, #4]
	parent->next = child;
    aec2:	2300      	movs	r3, #0
    aec4:	600b      	str	r3, [r1, #0]
    aec6:	f44f 7210 	mov.w	r2, #576	; 0x240
    aeca:	2100      	movs	r1, #0
    aecc:	9803      	ldr	r0, [sp, #12]
    aece:	f00c fa83 	bl	173d8 <memset>
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
    aed2:	4816      	ldr	r0, [pc, #88]	; (af2c <tcp_conn_unref.isra.0+0x188>)
    aed4:	a903      	add	r1, sp, #12
    aed6:	f018 ff7e 	bl	23dd6 <k_mem_slab_free>
	k_mutex_unlock(&tcp_lock);
    aeda:	4812      	ldr	r0, [pc, #72]	; (af24 <tcp_conn_unref.isra.0+0x180>)
    aedc:	f017 f96e 	bl	221bc <k_mutex_unlock.isra.0>
}
    aee0:	b004      	add	sp, #16
    aee2:	bd70      	pop	{r4, r5, r6, pc}
			    (struct net_conn *)conn->context->conn_handler,
    aee4:	6858      	ldr	r0, [r3, #4]
		if (net_context_packet_received(
    aee6:	695b      	ldr	r3, [r3, #20]
    aee8:	4621      	mov	r1, r4
    aeea:	9300      	str	r3, [sp, #0]
    aeec:	2300      	movs	r3, #0
    aeee:	6b00      	ldr	r0, [r0, #48]	; 0x30
    aef0:	461a      	mov	r2, r3
    aef2:	f7fd ff55 	bl	8da0 <net_context_packet_received>
    aef6:	2802      	cmp	r0, #2
    aef8:	d185      	bne.n	ae06 <tcp_conn_unref.isra.0+0x62>
			tcp_pkt_unref(pkt);
    aefa:	4620      	mov	r0, r4
    aefc:	f016 fa5a 	bl	213b4 <net_pkt_unref>
    af00:	e781      	b.n	ae06 <tcp_conn_unref.isra.0+0x62>
	while ((pkt = tcp_slist(conn, &conn->send_queue, get,
    af02:	f017 f95b 	bl	221bc <k_mutex_unlock.isra.0>
		tcp_pkt_unref(pkt);
    af06:	f1a4 001c 	sub.w	r0, r4, #28
    af0a:	f016 fa53 	bl	213b4 <net_pkt_unref>
    af0e:	e79b      	b.n	ae48 <tcp_conn_unref.isra.0+0xa4>
    af10:	6022      	str	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    af12:	685a      	ldr	r2, [r3, #4]
    af14:	4291      	cmp	r1, r2
	list->tail = node;
    af16:	bf08      	it	eq
    af18:	605c      	streq	r4, [r3, #4]
}
    af1a:	e7d2      	b.n	aec2 <tcp_conn_unref.isra.0+0x11e>
	return node->next;
    af1c:	4614      	mov	r4, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af1e:	6812      	ldr	r2, [r2, #0]
    af20:	e7c5      	b.n	aeae <tcp_conn_unref.isra.0+0x10a>
    af22:	bf00      	nop
    af24:	200012d8 	.word	0x200012d8
    af28:	20003898 	.word	0x20003898
    af2c:	2000119c 	.word	0x2000119c

0000af30 <net_tcp_get>:
{
    af30:	b5b0      	push	{r4, r5, r7, lr}
    af32:	b088      	sub	sp, #32
	k_mutex_lock(&tcp_lock, K_FOREVER);
    af34:	f04f 32ff 	mov.w	r2, #4294967295
{
    af38:	af00      	add	r7, sp, #0
	k_mutex_lock(&tcp_lock, K_FOREVER);
    af3a:	f04f 33ff 	mov.w	r3, #4294967295
{
    af3e:	4605      	mov	r5, r0
	k_mutex_lock(&tcp_lock, K_FOREVER);
    af40:	4862      	ldr	r0, [pc, #392]	; (b0cc <net_tcp_get+0x19c>)
    af42:	f017 f8fc 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	struct tcp *conn = NULL;
    af46:	2300      	movs	r3, #0
	ret = k_mem_slab_alloc(&tcp_conns_slab, (void **)&conn, K_NO_WAIT);
    af48:	2200      	movs	r2, #0
	struct tcp *conn = NULL;
    af4a:	607b      	str	r3, [r7, #4]
	ret = k_mem_slab_alloc(&tcp_conns_slab, (void **)&conn, K_NO_WAIT);
    af4c:	4860      	ldr	r0, [pc, #384]	; (b0d0 <net_tcp_get+0x1a0>)
    af4e:	2300      	movs	r3, #0
    af50:	1d39      	adds	r1, r7, #4
    af52:	f00a fa37 	bl	153c4 <k_mem_slab_alloc>
	if (ret) {
    af56:	4604      	mov	r4, r0
    af58:	b1b8      	cbz	r0, af8a <net_tcp_get+0x5a>
		NET_ERR("Cannot allocate slab");
    af5a:	4b5e      	ldr	r3, [pc, #376]	; (b0d4 <net_tcp_get+0x1a4>)
    af5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    af60:	61fb      	str	r3, [r7, #28]
    af62:	2302      	movs	r3, #2
    af64:	485c      	ldr	r0, [pc, #368]	; (b0d8 <net_tcp_get+0x1a8>)
    af66:	f107 0218 	add.w	r2, r7, #24
    af6a:	61bb      	str	r3, [r7, #24]
    af6c:	f017 f8e4 	bl	22138 <z_log_msg_static_create.constprop.0>
	return conn;
    af70:	687b      	ldr	r3, [r7, #4]
	if (conn == NULL) {
    af72:	2b00      	cmp	r3, #0
    af74:	f040 80a5 	bne.w	b0c2 <net_tcp_get+0x192>
		ret = -ENOMEM;
    af78:	f06f 040b 	mvn.w	r4, #11
	k_mutex_unlock(&tcp_lock);
    af7c:	4853      	ldr	r0, [pc, #332]	; (b0cc <net_tcp_get+0x19c>)
    af7e:	f017 f91d 	bl	221bc <k_mutex_unlock.isra.0>
}
    af82:	4620      	mov	r0, r4
    af84:	3720      	adds	r7, #32
    af86:	46bd      	mov	sp, r7
    af88:	bdb0      	pop	{r4, r5, r7, pc}
    af8a:	4601      	mov	r1, r0
    af8c:	f44f 7210 	mov.w	r2, #576	; 0x240
    af90:	6878      	ldr	r0, [r7, #4]
    af92:	f00c fa21 	bl	173d8 <memset>
		conn->queue_recv_data = tcp_rx_pkt_alloc(conn, 0);
    af96:	f640 40cd 	movw	r0, #3277	; 0xccd
    af9a:	2100      	movs	r1, #0
    af9c:	f7fe fbc6 	bl	972c <net_pkt_rx_alloc>
    afa0:	687b      	ldr	r3, [r7, #4]
    afa2:	60d8      	str	r0, [r3, #12]
		if (conn->queue_recv_data == NULL) {
    afa4:	bb00      	cbnz	r0, afe8 <net_tcp_get+0xb8>
			NET_ERR("Cannot allocate %s queue for conn %p", "recv",
    afa6:	466c      	mov	r4, sp
    afa8:	b08a      	sub	sp, #40	; 0x28
    afaa:	466a      	mov	r2, sp
    afac:	494b      	ldr	r1, [pc, #300]	; (b0dc <net_tcp_get+0x1ac>)
    afae:	6151      	str	r1, [r2, #20]
    afb0:	494b      	ldr	r1, [pc, #300]	; (b0e0 <net_tcp_get+0x1b0>)
		NET_ERR("Cannot allocate %s queue for conn %p", "send", conn);
    afb2:	e9c2 1306 	strd	r1, r3, [r2, #24]
    afb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    afba:	8413      	strh	r3, [r2, #32]
    afbc:	4b49      	ldr	r3, [pc, #292]	; (b0e4 <net_tcp_get+0x1b4>)
    afbe:	4846      	ldr	r0, [pc, #280]	; (b0d8 <net_tcp_get+0x1a8>)
    afc0:	f842 3f10 	str.w	r3, [r2, #16]!
    afc4:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    afc8:	f017 f8b6 	bl	22138 <z_log_msg_static_create.constprop.0>
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT && conn->queue_recv_data) {
    afcc:	687b      	ldr	r3, [r7, #4]
    afce:	46a5      	mov	sp, r4
    afd0:	68d8      	ldr	r0, [r3, #12]
    afd2:	b120      	cbz	r0, afde <net_tcp_get+0xae>
		tcp_pkt_unref(conn->queue_recv_data);
    afd4:	f016 f9ee 	bl	213b4 <net_pkt_unref>
		conn->queue_recv_data = NULL;
    afd8:	2200      	movs	r2, #0
    afda:	687b      	ldr	r3, [r7, #4]
    afdc:	60da      	str	r2, [r3, #12]
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
    afde:	483c      	ldr	r0, [pc, #240]	; (b0d0 <net_tcp_get+0x1a0>)
    afe0:	1d39      	adds	r1, r7, #4
    afe2:	f018 fef8 	bl	23dd6 <k_mem_slab_free>
	if (conn == NULL) {
    afe6:	e7c7      	b.n	af78 <net_tcp_get+0x48>
	conn->send_data = tcp_pkt_alloc(conn, 0);
    afe8:	f640 40cd 	movw	r0, #3277	; 0xccd
    afec:	2100      	movs	r1, #0
    afee:	f7fe fb95 	bl	971c <net_pkt_alloc>
    aff2:	687b      	ldr	r3, [r7, #4]
    aff4:	6098      	str	r0, [r3, #8]
	if (conn->send_data == NULL) {
    aff6:	b930      	cbnz	r0, b006 <net_tcp_get+0xd6>
		NET_ERR("Cannot allocate %s queue for conn %p", "send", conn);
    aff8:	466c      	mov	r4, sp
    affa:	b08a      	sub	sp, #40	; 0x28
    affc:	466a      	mov	r2, sp
    affe:	4937      	ldr	r1, [pc, #220]	; (b0dc <net_tcp_get+0x1ac>)
    b000:	6151      	str	r1, [r2, #20]
    b002:	4939      	ldr	r1, [pc, #228]	; (b0e8 <net_tcp_get+0x1b8>)
    b004:	e7d5      	b.n	afb2 <net_tcp_get+0x82>
	return z_impl_k_mutex_init(mutex);
    b006:	f103 0028 	add.w	r0, r3, #40	; 0x28
    b00a:	f018 ff29 	bl	23e60 <z_impl_k_mutex_init>
	k_fifo_init(&conn->recv_data);
    b00e:	6878      	ldr	r0, [r7, #4]
    b010:	306c      	adds	r0, #108	; 0x6c
	z_impl_k_queue_init(queue);
    b012:	f018 ff9e 	bl	23f52 <z_impl_k_queue_init>
	k_sem_init(&conn->connect_sem, 0, K_SEM_MAX_LIMIT);
    b016:	6878      	ldr	r0, [r7, #4]
    b018:	303c      	adds	r0, #60	; 0x3c
	return z_impl_k_sem_init(sem, initial_count, limit);
    b01a:	f04f 32ff 	mov.w	r2, #4294967295
    b01e:	4621      	mov	r1, r4
    b020:	f018 ffef 	bl	24002 <z_impl_k_sem_init>
	k_sem_init(&conn->tx_sem, 1, 1);
    b024:	6878      	ldr	r0, [r7, #4]
    b026:	3054      	adds	r0, #84	; 0x54
    b028:	2201      	movs	r2, #1
    b02a:	4611      	mov	r1, r2
    b02c:	f018 ffe9 	bl	24002 <z_impl_k_sem_init>
	conn->state = TCP_LISTEN;
    b030:	2201      	movs	r2, #1
	conn->in_connect = false;
    b032:	6878      	ldr	r0, [r7, #4]
	k_work_init_delayable(&conn->send_timer, tcp_send_process);
    b034:	492d      	ldr	r1, [pc, #180]	; (b0ec <net_tcp_get+0x1bc>)
	conn->state = TCP_LISTEN;
    b036:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
	conn->recv_win_max = tcp_rx_window;
    b03a:	4a2d      	ldr	r2, [pc, #180]	; (b0f0 <net_tcp_get+0x1c0>)
	conn->dup_ack_cnt = 0;
    b03c:	f880 4237 	strb.w	r4, [r0, #567]	; 0x237
	conn->send_win_max = MAX(tcp_tx_window, NET_IPV6_MTU);
    b040:	e9c0 228b 	strd	r2, r2, [r0, #556]	; 0x22c
	conn->in_connect = false;
    b044:	f890 2239 	ldrb.w	r2, [r0, #569]	; 0x239
	conn->seq = 0U;
    b048:	f8c0 4224 	str.w	r4, [r0, #548]	; 0x224
	conn->in_connect = false;
    b04c:	f022 020a 	bic.w	r2, r2, #10
    b050:	f880 2239 	strb.w	r2, [r0, #569]	; 0x239
	list->tail = NULL;
    b054:	e9c0 4406 	strd	r4, r4, [r0, #24]
	k_work_init_delayable(&conn->send_timer, tcp_send_process);
    b058:	3090      	adds	r0, #144	; 0x90
    b05a:	f019 f8a9 	bl	241b0 <k_work_init_delayable>
	k_work_init_delayable(&conn->timewait_timer, tcp_timewait_timeout);
    b05e:	6878      	ldr	r0, [r7, #4]
    b060:	4924      	ldr	r1, [pc, #144]	; (b0f4 <net_tcp_get+0x1c4>)
    b062:	f500 7090 	add.w	r0, r0, #288	; 0x120
    b066:	f019 f8a3 	bl	241b0 <k_work_init_delayable>
	k_work_init_delayable(&conn->fin_timer, tcp_fin_timeout);
    b06a:	6878      	ldr	r0, [r7, #4]
    b06c:	4922      	ldr	r1, [pc, #136]	; (b0f8 <net_tcp_get+0x1c8>)
    b06e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    b072:	f019 f89d 	bl	241b0 <k_work_init_delayable>
	k_work_init_delayable(&conn->send_data_timer, tcp_resend_data);
    b076:	6878      	ldr	r0, [r7, #4]
    b078:	4920      	ldr	r1, [pc, #128]	; (b0fc <net_tcp_get+0x1cc>)
    b07a:	30f0      	adds	r0, #240	; 0xf0
    b07c:	f019 f898 	bl	241b0 <k_work_init_delayable>
	k_work_init_delayable(&conn->recv_queue_timer, tcp_cleanup_recv_queue);
    b080:	6878      	ldr	r0, [r7, #4]
    b082:	491f      	ldr	r1, [pc, #124]	; (b100 <net_tcp_get+0x1d0>)
    b084:	30c0      	adds	r0, #192	; 0xc0
    b086:	f019 f893 	bl	241b0 <k_work_init_delayable>
	k_work_init_delayable(&conn->persist_timer, tcp_send_zwp);
    b08a:	6878      	ldr	r0, [r7, #4]
    b08c:	491d      	ldr	r1, [pc, #116]	; (b104 <net_tcp_get+0x1d4>)
    b08e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    b092:	f019 f88d 	bl	241b0 <k_work_init_delayable>
	k_work_init_delayable(&conn->ack_timer, tcp_send_ack);
    b096:	6878      	ldr	r0, [r7, #4]
    b098:	491b      	ldr	r1, [pc, #108]	; (b108 <net_tcp_get+0x1d8>)
    b09a:	f500 70c0 	add.w	r0, r0, #384	; 0x180
    b09e:	f019 f887 	bl	241b0 <k_work_init_delayable>
	int ref_count = atomic_inc(&conn->ref_count) + 1;
    b0a2:	6878      	ldr	r0, [r7, #4]
    b0a4:	f500 7007 	add.w	r0, r0, #540	; 0x21c
    b0a8:	f017 f8a3 	bl	221f2 <atomic_inc.isra.0>
	sys_slist_append(&tcp_conns, &conn->next);
    b0ac:	687b      	ldr	r3, [r7, #4]
	return list->tail;
    b0ae:	4a17      	ldr	r2, [pc, #92]	; (b10c <net_tcp_get+0x1dc>)
	parent->next = child;
    b0b0:	601c      	str	r4, [r3, #0]
	return list->tail;
    b0b2:	6851      	ldr	r1, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
    b0b4:	b911      	cbnz	r1, b0bc <net_tcp_get+0x18c>
	list->head = node;
    b0b6:	e9c2 3300 	strd	r3, r3, [r2]
}
    b0ba:	e759      	b.n	af70 <net_tcp_get+0x40>
	parent->next = child;
    b0bc:	600b      	str	r3, [r1, #0]
	list->tail = node;
    b0be:	6053      	str	r3, [r2, #4]
}
    b0c0:	e756      	b.n	af70 <net_tcp_get+0x40>
	conn->context = context;
    b0c2:	605d      	str	r5, [r3, #4]
	int ret = 0;
    b0c4:	2400      	movs	r4, #0
	context->tcp = conn;
    b0c6:	64ab      	str	r3, [r5, #72]	; 0x48
    b0c8:	e758      	b.n	af7c <net_tcp_get+0x4c>
    b0ca:	bf00      	nop
    b0cc:	200012d8 	.word	0x200012d8
    b0d0:	2000119c 	.word	0x2000119c
    b0d4:	00033154 	.word	0x00033154
    b0d8:	00024d48 	.word	0x00024d48
    b0dc:	00033169 	.word	0x00033169
    b0e0:	0003318e 	.word	0x0003318e
    b0e4:	01000004 	.word	0x01000004
    b0e8:	00033193 	.word	0x00033193
    b0ec:	00022263 	.word	0x00022263
    b0f0:	0d550d55 	.word	0x0d550d55
    b0f4:	0002229b 	.word	0x0002229b
    b0f8:	000222a7 	.word	0x000222a7
    b0fc:	0000b6f5 	.word	0x0000b6f5
    b100:	000221c1 	.word	0x000221c1
    b104:	0000b359 	.word	0x0000b359
    b108:	0002239d 	.word	0x0002239d
    b10c:	20003898 	.word	0x20003898

0000b110 <net_tcp_accept>:
	return ret;
}

int net_tcp_accept(struct net_context *context, net_tcp_accept_cb_t cb,
		   void *user_data)
{
    b110:	b570      	push	{r4, r5, r6, lr}
    b112:	4604      	mov	r4, r0
	struct tcp *conn = context->tcp;
    b114:	6c83      	ldr	r3, [r0, #72]	; 0x48
	struct sockaddr local_addr = { };
    b116:	2000      	movs	r0, #0
{
    b118:	b088      	sub	sp, #32
	struct sockaddr local_addr = { };
    b11a:	e9cd 0006 	strd	r0, r0, [sp, #24]
	uint16_t local_port, remote_port;

	if (!conn) {
    b11e:	b91b      	cbnz	r3, b128 <net_tcp_accept+0x18>
		return -EINVAL;
    b120:	f06f 0015 	mvn.w	r0, #21
				 &context->remote : NULL,
				 &local_addr,
				 remote_port, local_port,
				 context, tcp_recv, context,
				 &context->conn_handler);
}
    b124:	b008      	add	sp, #32
    b126:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state != TCP_LISTEN) {
    b128:	f893 0220 	ldrb.w	r0, [r3, #544]	; 0x220
    b12c:	2801      	cmp	r0, #1
    b12e:	d1f7      	bne.n	b120 <net_tcp_accept+0x10>
	conn->accept_cb = cb;
    b130:	6219      	str	r1, [r3, #32]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    b132:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    b136:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	switch (local_addr.sa_family) {
    b13a:	2b01      	cmp	r3, #1
	local_addr.sa_family = net_context_get_family(context);
    b13c:	f8ad 3018 	strh.w	r3, [sp, #24]
	switch (local_addr.sa_family) {
    b140:	d1ee      	bne.n	b120 <net_tcp_accept+0x10>
		if (net_sin_ptr(&context->local)->sin_addr) {
    b142:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b144:	b10b      	cbz	r3, b14a <net_tcp_accept+0x3a>
			net_ipaddr_copy(&in->sin_addr,
    b146:	681b      	ldr	r3, [r3, #0]
    b148:	9307      	str	r3, [sp, #28]
		in->sin_port =
    b14a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b14c:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
	context->user_data = user_data;
    b14e:	6062      	str	r2, [r4, #4]
	net_conn_unregister(context->conn_handler);
    b150:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b152:	ba5e      	rev16	r6, r3
		in->sin_port =
    b154:	f8ad 301a 	strh.w	r3, [sp, #26]
	net_conn_unregister(context->conn_handler);
    b158:	f7fe fd92 	bl	9c80 <net_conn_unregister>
	return net_conn_register(net_context_get_proto(context),
    b15c:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
    b160:	f104 0330 	add.w	r3, r4, #48	; 0x30
	return context->proto;
    b164:	f8b4 008e 	ldrh.w	r0, [r4, #142]	; 0x8e
    b168:	ba6d      	rev16	r5, r5
    b16a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    b16e:	4b09      	ldr	r3, [pc, #36]	; (b194 <net_tcp_accept+0x84>)
    b170:	b2b6      	uxth	r6, r6
    b172:	b2ad      	uxth	r5, r5
    b174:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    b178:	e9cd 4302 	strd	r4, r3, [sp, #8]
    b17c:	e9cd 5600 	strd	r5, r6, [sp]
    b180:	f89d 1018 	ldrb.w	r1, [sp, #24]
    b184:	bf18      	it	ne
    b186:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    b18a:	ab06      	add	r3, sp, #24
    b18c:	f7fe fc5a 	bl	9a44 <net_conn_register>
    b190:	e7c8      	b.n	b124 <net_tcp_accept+0x14>
    b192:	bf00      	nop
    b194:	0000c899 	.word	0x0000c899

0000b198 <tcp_out_ext>:
{
    b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b19c:	4698      	mov	r8, r3
	if (conn->send_options.mss_found) {
    b19e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
{
    b1a2:	4604      	mov	r4, r0
	size_t alloc_len = sizeof(struct tcphdr);
    b1a4:	f013 0f01 	tst.w	r3, #1
{
    b1a8:	4689      	mov	r9, r1
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    b1aa:	6843      	ldr	r3, [r0, #4]
	pkt = tcp_pkt_alloc(conn, alloc_len);
    b1ac:	f04f 0100 	mov.w	r1, #0
    b1b0:	f640 40cd 	movw	r0, #3277	; 0xccd
{
    b1b4:	b08b      	sub	sp, #44	; 0x2c
    b1b6:	4615      	mov	r5, r2
    b1b8:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
	pkt = tcp_pkt_alloc(conn, alloc_len);
    b1bc:	e9cd 0100 	strd	r0, r1, [sp]
    b1c0:	f04f 0306 	mov.w	r3, #6
    b1c4:	bf14      	ite	ne
    b1c6:	2118      	movne	r1, #24
    b1c8:	2114      	moveq	r1, #20
    b1ca:	6920      	ldr	r0, [r4, #16]
    b1cc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    b1d0:	f7fe fb92 	bl	98f8 <net_pkt_alloc_with_buffer>
	if (!pkt) {
    b1d4:	4606      	mov	r6, r0
    b1d6:	2800      	cmp	r0, #0
    b1d8:	f000 80b7 	beq.w	b34a <tcp_out_ext+0x1b2>
	if (data) {
    b1dc:	b125      	cbz	r5, b1e8 <tcp_out_ext+0x50>
		net_pkt_append_buffer(pkt, data->buffer);
    b1de:	68a9      	ldr	r1, [r5, #8]
    b1e0:	f016 f993 	bl	2150a <net_pkt_append_buffer>
		data->buffer = NULL;
    b1e4:	2300      	movs	r3, #0
    b1e6:	60ab      	str	r3, [r5, #8]
	return pkt->family;
    b1e8:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
    b1ec:	095b      	lsrs	r3, r3, #5
    b1ee:	2b01      	cmp	r3, #1
    b1f0:	f040 8086 	bne.w	b300 <tcp_out_ext+0x168>
		return net_context_create_ipv4_new(conn->context, pkt,
    b1f4:	4631      	mov	r1, r6
    b1f6:	6860      	ldr	r0, [r4, #4]
    b1f8:	f504 73fe 	add.w	r3, r4, #508	; 0x1fc
    b1fc:	f504 72f2 	add.w	r2, r4, #484	; 0x1e4
    b200:	f015 fe5e 	bl	20ec0 <net_context_create_ipv4_new>
	if (ret < 0) {
    b204:	1e05      	subs	r5, r0, #0
    b206:	da06      	bge.n	b216 <tcp_out_ext+0x7e>
		tcp_pkt_unref(pkt);
    b208:	4630      	mov	r0, r6
    b20a:	f016 f8d3 	bl	213b4 <net_pkt_unref>
}
    b20e:	4628      	mov	r0, r5
    b210:	b00b      	add	sp, #44	; 0x2c
    b212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct tcphdr);
    b216:	f04f 0b14 	mov.w	fp, #20
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
    b21a:	f10d 0a0c 	add.w	sl, sp, #12
    b21e:	4651      	mov	r1, sl
    b220:	4630      	mov	r0, r6
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct tcphdr);
    b222:	af05      	add	r7, sp, #20
    b224:	9703      	str	r7, [sp, #12]
    b226:	f8cd b010 	str.w	fp, [sp, #16]
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
    b22a:	f7fe fb77 	bl	991c <net_pkt_get_data>
	if (!th) {
    b22e:	4605      	mov	r5, r0
    b230:	b910      	cbnz	r0, b238 <tcp_out_ext+0xa0>
		return -ENOBUFS;
    b232:	f06f 0568 	mvn.w	r5, #104	; 0x68
    b236:	e7e7      	b.n	b208 <tcp_out_ext+0x70>
    b238:	465a      	mov	r2, fp
    b23a:	2100      	movs	r1, #0
    b23c:	f00c f8cc 	bl	173d8 <memset>
	UNALIGNED_PUT(conn->src.sin.sin_port, &th->th_sport);
    b240:	f8b4 31e2 	ldrh.w	r3, [r4, #482]	; 0x1e2
    b244:	802b      	strh	r3, [r5, #0]
	UNALIGNED_PUT(conn->dst.sin.sin_port, &th->th_dport);
    b246:	f8b4 31fa 	ldrh.w	r3, [r4, #506]	; 0x1fa
    b24a:	806b      	strh	r3, [r5, #2]
	th->th_off = 5;
    b24c:	2205      	movs	r2, #5
    b24e:	7b2b      	ldrb	r3, [r5, #12]
    b250:	f362 1307 	bfi	r3, r2, #4, #4
    b254:	732b      	strb	r3, [r5, #12]
	if (conn->send_options.mss_found) {
    b256:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	UNALIGNED_PUT(flags, &th->th_flags);
    b25a:	f885 900d 	strb.w	r9, [r5, #13]
	if (conn->send_options.mss_found) {
    b25e:	f003 0301 	and.w	r3, r3, #1
    b262:	4413      	add	r3, r2
    b264:	7b2a      	ldrb	r2, [r5, #12]
    b266:	f363 1207 	bfi	r2, r3, #4, #4
    b26a:	732a      	strb	r2, [r5, #12]
	UNALIGNED_PUT(htons(conn->recv_win), &th->th_win);
    b26c:	f8b4 322e 	ldrh.w	r3, [r4, #558]	; 0x22e
    b270:	ba5b      	rev16	r3, r3
    b272:	81eb      	strh	r3, [r5, #14]
	UNALIGNED_PUT(htonl(seq), &th->th_seq);
    b274:	fa98 f888 	rev.w	r8, r8
    b278:	f8c5 8004 	str.w	r8, [r5, #4]
	if (ACK & flags) {
    b27c:	f019 0f10 	tst.w	r9, #16
    b280:	d003      	beq.n	b28a <tcp_out_ext+0xf2>
		UNALIGNED_PUT(htonl(conn->ack), &th->th_ack);
    b282:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    b286:	ba1b      	rev	r3, r3
    b288:	60ab      	str	r3, [r5, #8]
	return net_pkt_set_data(pkt, &tcp_access);
    b28a:	4651      	mov	r1, sl
    b28c:	4630      	mov	r0, r6
    b28e:	f016 fb9a 	bl	219c6 <net_pkt_set_data>
	if (ret < 0) {
    b292:	1e05      	subs	r5, r0, #0
    b294:	dbb8      	blt.n	b208 <tcp_out_ext+0x70>
	if (conn->send_options.mss_found) {
    b296:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    b29a:	07db      	lsls	r3, r3, #31
    b29c:	d51a      	bpl.n	b2d4 <tcp_out_ext+0x13c>
	NET_PKT_DATA_ACCESS_DEFINE(mss_opt_access, struct tcp_mss_option);
    b29e:	2304      	movs	r3, #4
	mss = net_pkt_get_data(pkt, &mss_opt_access);
    b2a0:	4639      	mov	r1, r7
    b2a2:	4630      	mov	r0, r6
	NET_PKT_DATA_ACCESS_DEFINE(mss_opt_access, struct tcp_mss_option);
    b2a4:	f8cd a014 	str.w	sl, [sp, #20]
    b2a8:	9306      	str	r3, [sp, #24]
	mss = net_pkt_get_data(pkt, &mss_opt_access);
    b2aa:	f7fe fb37 	bl	991c <net_pkt_get_data>
	if (!mss) {
    b2ae:	4605      	mov	r5, r0
    b2b0:	2800      	cmp	r0, #0
    b2b2:	d0be      	beq.n	b232 <tcp_out_ext+0x9a>
	recv_mss = net_tcp_get_supported_mss(conn);
    b2b4:	4620      	mov	r0, r4
    b2b6:	f017 f850 	bl	2235a <net_tcp_get_supported_mss>
	UNALIGNED_PUT(htonl(recv_mss), (uint32_t *)mss);
    b2ba:	b283      	uxth	r3, r0
    b2bc:	ba1b      	rev	r3, r3
    b2be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b2c2:	f043 0302 	orr.w	r3, r3, #2
    b2c6:	602b      	str	r3, [r5, #0]
	return net_pkt_set_data(pkt, &mss_opt_access);
    b2c8:	4639      	mov	r1, r7
    b2ca:	4630      	mov	r0, r6
    b2cc:	f016 fb7b 	bl	219c6 <net_pkt_set_data>
		if (ret < 0) {
    b2d0:	1e05      	subs	r5, r0, #0
    b2d2:	db99      	blt.n	b208 <tcp_out_ext+0x70>
	net_pkt_cursor_init(pkt);
    b2d4:	4630      	mov	r0, r6
    b2d6:	f016 f8fe 	bl	214d6 <net_pkt_cursor_init>
    b2da:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
    b2de:	095b      	lsrs	r3, r3, #5
    b2e0:	2b01      	cmp	r3, #1
    b2e2:	d10d      	bne.n	b300 <tcp_out_ext+0x168>
		return net_ipv4_finalize(pkt, IPPROTO_TCP);
    b2e4:	2106      	movs	r1, #6
    b2e6:	4630      	mov	r0, r6
    b2e8:	f016 fdeb 	bl	21ec2 <net_ipv4_finalize>
	if (ret < 0) {
    b2ec:	1e05      	subs	r5, r0, #0
    b2ee:	db8b      	blt.n	b208 <tcp_out_ext+0x70>
	if (tcp_send_cb) {
    b2f0:	4b17      	ldr	r3, [pc, #92]	; (b350 <tcp_out_ext+0x1b8>)
    b2f2:	681a      	ldr	r2, [r3, #0]
    b2f4:	b13a      	cbz	r2, b306 <tcp_out_ext+0x16e>
		ret = tcp_send_cb(pkt);
    b2f6:	4630      	mov	r0, r6
}
    b2f8:	b00b      	add	sp, #44	; 0x2c
    b2fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ret = tcp_send_cb(pkt);
    b2fe:	4710      	bx	r2
	return -EINVAL;
    b300:	f06f 0515 	mvn.w	r5, #21
    b304:	e780      	b.n	b208 <tcp_out_ext+0x70>
	parent->next = child;
    b306:	61f2      	str	r2, [r6, #28]
	return list->tail;
    b308:	69e2      	ldr	r2, [r4, #28]
	sys_slist_append(&conn->send_queue, &pkt->next);
    b30a:	f106 031c 	add.w	r3, r6, #28
Z_GENLIST_APPEND(slist, snode)
    b30e:	b96a      	cbnz	r2, b32c <tcp_out_ext+0x194>
	list->head = node;
    b310:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (is_destination_local(pkt)) {
    b314:	4630      	mov	r0, r6
    b316:	f016 feeb 	bl	220f0 <is_destination_local>
    b31a:	b150      	cbz	r0, b332 <tcp_out_ext+0x19a>
		k_work_schedule_for_queue(&tcp_work_q,
    b31c:	2200      	movs	r2, #0
    b31e:	2300      	movs	r3, #0
    b320:	f104 0190 	add.w	r1, r4, #144	; 0x90
    b324:	480b      	ldr	r0, [pc, #44]	; (b354 <tcp_out_ext+0x1bc>)
    b326:	f00a fcad 	bl	15c84 <k_work_schedule_for_queue>
    b32a:	e770      	b.n	b20e <tcp_out_ext+0x76>
	parent->next = child;
    b32c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b32e:	61e3      	str	r3, [r4, #28]
}
    b330:	e7f0      	b.n	b314 <tcp_out_ext+0x17c>
	} else if (tcp_send_process_no_lock(conn)) {
    b332:	4620      	mov	r0, r4
    b334:	f7ff fc8a 	bl	ac4c <tcp_send_process_no_lock>
    b338:	2800      	cmp	r0, #0
    b33a:	f43f af68 	beq.w	b20e <tcp_out_ext+0x76>
		tcp_conn_close(conn, -ETIMEDOUT);
    b33e:	f06f 0173 	mvn.w	r1, #115	; 0x73
    b342:	4620      	mov	r0, r4
    b344:	f016 ff6f 	bl	22226 <tcp_conn_close.isra.0>
    b348:	e761      	b.n	b20e <tcp_out_ext+0x76>
		ret = -ENOBUFS;
    b34a:	f06f 0568 	mvn.w	r5, #104	; 0x68
	return ret;
    b34e:	e75e      	b.n	b20e <tcp_out_ext+0x76>
    b350:	20003894 	.word	0x20003894
    b354:	200024c8 	.word	0x200024c8

0000b358 <tcp_send_zwp>:
{
    b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
    b35a:	f5a0 7694 	sub.w	r6, r0, #296	; 0x128
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, persist_timer);
    b35e:	f5a0 74a8 	sub.w	r4, r0, #336	; 0x150
	k_mutex_lock(&conn->lock, K_FOREVER);
    b362:	f04f 32ff 	mov.w	r2, #4294967295
    b366:	f04f 33ff 	mov.w	r3, #4294967295
{
    b36a:	4605      	mov	r5, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
    b36c:	4630      	mov	r0, r6
    b36e:	f016 fee6 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	(void)tcp_out_ext(conn, ACK, NULL, conn->seq - 1);
    b372:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    b376:	2200      	movs	r2, #0
    b378:	3b01      	subs	r3, #1
    b37a:	2110      	movs	r1, #16
    b37c:	4620      	mov	r0, r4
    b37e:	f7ff ff0b 	bl	b198 <tcp_out_ext>
	tcp_derive_rto(conn);
    b382:	4620      	mov	r0, r4
    b384:	f016 ff3d 	bl	22202 <tcp_derive_rto>
	if (conn->send_win == 0) {
    b388:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
    b38c:	bb63      	cbnz	r3, b3e8 <tcp_send_zwp+0x90>
		if (conn->zwp_retries < UINT8_MAX) {
    b38e:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
    b392:	4f18      	ldr	r7, [pc, #96]	; (b3f4 <tcp_send_zwp+0x9c>)
		if (conn->zwp_retries < UINT8_MAX) {
    b394:	2bff      	cmp	r3, #255	; 0xff
			conn->zwp_retries++;
    b396:	bf1c      	itt	ne
    b398:	3301      	addne	r3, #1
    b39a:	f884 3238 	strbne.w	r3, [r4, #568]	; 0x238
		timeout = TCP_RTO_MS << conn->zwp_retries;
    b39e:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    b3a2:	f8b4 3234 	ldrh.w	r3, [r4, #564]	; 0x234
    b3a6:	4093      	lsls	r3, r2
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
    b3a8:	2200      	movs	r2, #0
		timeout = TCP_RTO_MS << conn->zwp_retries;
    b3aa:	17d9      	asrs	r1, r3, #31
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
    b3ac:	1e5c      	subs	r4, r3, #1
    b3ae:	f161 0000 	sbc.w	r0, r1, #0
    b3b2:	42a7      	cmp	r7, r4
    b3b4:	eb72 0000 	sbcs.w	r0, r2, r0
			timeout = ZWP_MAX_DELAY_MS;
    b3b8:	bf38      	it	cc
    b3ba:	4611      	movcc	r1, r2
    b3bc:	f240 32e7 	movw	r2, #999	; 0x3e7
    b3c0:	bf38      	it	cc
    b3c2:	4b0d      	ldrcc	r3, [pc, #52]	; (b3f8 <tcp_send_zwp+0xa0>)
    b3c4:	03c9      	lsls	r1, r1, #15
    b3c6:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    b3ca:	03db      	lsls	r3, r3, #15
    b3cc:	1898      	adds	r0, r3, r2
    b3ce:	f141 0100 	adc.w	r1, r1, #0
    b3d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b3d6:	2300      	movs	r3, #0
    b3d8:	f7f5 fafc 	bl	9d4 <__aeabi_uldivmod>
    b3dc:	4602      	mov	r2, r0
    b3de:	460b      	mov	r3, r1
		(void)k_work_reschedule_for_queue(
    b3e0:	4806      	ldr	r0, [pc, #24]	; (b3fc <tcp_send_zwp+0xa4>)
    b3e2:	4629      	mov	r1, r5
    b3e4:	f00a fc7e 	bl	15ce4 <k_work_reschedule_for_queue>
	k_mutex_unlock(&conn->lock);
    b3e8:	4630      	mov	r0, r6
}
    b3ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&conn->lock);
    b3ee:	f016 bee5 	b.w	221bc <k_mutex_unlock.isra.0>
    b3f2:	bf00      	nop
    b3f4:	0001d4bf 	.word	0x0001d4bf
    b3f8:	0001d4c0 	.word	0x0001d4c0
    b3fc:	200024c8 	.word	0x200024c8

0000b400 <net_tcp_put>:
{
    b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct tcp *conn = context->tcp;
    b402:	6c84      	ldr	r4, [r0, #72]	; 0x48
	if (!conn) {
    b404:	2c00      	cmp	r4, #0
    b406:	d064      	beq.n	b4d2 <net_tcp_put+0xd2>
	k_mutex_lock(&conn->lock, K_FOREVER);
    b408:	f104 0628 	add.w	r6, r4, #40	; 0x28
    b40c:	f04f 33ff 	mov.w	r3, #4294967295
    b410:	f04f 32ff 	mov.w	r2, #4294967295
    b414:	4630      	mov	r0, r6
    b416:	f016 fe92 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	if (conn && conn->state == TCP_ESTABLISHED) {
    b41a:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    b41e:	2b04      	cmp	r3, #4
    b420:	d14e      	bne.n	b4c0 <net_tcp_put+0xc0>
		if (conn->send_data_total > 0) {
    b422:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
    b426:	b307      	cbz	r7, b46a <net_tcp_put+0x6a>
    b428:	f240 31e7 	movw	r1, #999	; 0x3e7
			conn->in_close = true;
    b42c:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    b430:	f8b4 0234 	ldrh.w	r0, [r4, #564]	; 0x234
    b434:	f043 0304 	orr.w	r3, r3, #4
    b438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b43c:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    b440:	eb01 30c0 	add.w	r0, r1, r0, lsl #15
    b444:	2300      	movs	r3, #0
    b446:	2100      	movs	r1, #0
    b448:	f7f5 fac4 	bl	9d4 <__aeabi_uldivmod>
    b44c:	4602      	mov	r2, r0
    b44e:	460b      	mov	r3, r1
			k_work_reschedule_for_queue(&tcp_work_q,
    b450:	4821      	ldr	r0, [pc, #132]	; (b4d8 <net_tcp_put+0xd8>)
    b452:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    b456:	f00a fc45 	bl	15ce4 <k_work_reschedule_for_queue>
	k_mutex_unlock(&conn->lock);
    b45a:	4630      	mov	r0, r6
    b45c:	f016 feae 	bl	221bc <k_mutex_unlock.isra.0>
	tcp_conn_unref(conn);
    b460:	4620      	mov	r0, r4
    b462:	f7ff fc9f 	bl	ada4 <tcp_conn_unref.isra.0>
	return 0;
    b466:	2000      	movs	r0, #0
}
    b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b46a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    b46e:	f240 30e7 	movw	r0, #999	; 0x3e7
    b472:	4639      	mov	r1, r7
						    FIN_TIMEOUT);
    b474:	4b19      	ldr	r3, [pc, #100]	; (b4dc <net_tcp_put+0xdc>)
    b476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b47a:	681d      	ldr	r5, [r3, #0]
    b47c:	2300      	movs	r3, #0
    b47e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    b482:	fbc5 010c 	smlal	r0, r1, r5, ip
    b486:	f7f5 faa5 	bl	9d4 <__aeabi_uldivmod>
    b48a:	4602      	mov	r2, r0
    b48c:	460b      	mov	r3, r1
			k_work_reschedule_for_queue(&tcp_work_q,
    b48e:	4812      	ldr	r0, [pc, #72]	; (b4d8 <net_tcp_put+0xd8>)
    b490:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
    b494:	f00a fc26 	bl	15ce4 <k_work_reschedule_for_queue>
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
    b498:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    b49c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    b4a0:	2111      	movs	r1, #17
    b4a2:	4413      	add	r3, r2
    b4a4:	4620      	mov	r0, r4
    b4a6:	463a      	mov	r2, r7
    b4a8:	f7ff fe76 	bl	b198 <tcp_out_ext>
			if (ret == 0) {
    b4ac:	b920      	cbnz	r0, b4b8 <net_tcp_put+0xb8>
				conn_seq(conn, + 1);
    b4ae:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    b4b2:	3301      	adds	r3, #1
    b4b4:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			conn_state(conn, TCP_FIN_WAIT_1);
    b4b8:	2305      	movs	r3, #5
    b4ba:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    b4be:	e7cc      	b.n	b45a <net_tcp_put+0x5a>
	} else if (conn && conn->in_connect) {
    b4c0:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    b4c4:	079a      	lsls	r2, r3, #30
		conn->in_connect = false;
    b4c6:	bf44      	itt	mi
    b4c8:	f36f 0341 	bfcmi	r3, #1, #1
    b4cc:	f884 3239 	strbmi.w	r3, [r4, #569]	; 0x239
    b4d0:	e7c3      	b.n	b45a <net_tcp_put+0x5a>
		return -ENOENT;
    b4d2:	f06f 0001 	mvn.w	r0, #1
    b4d6:	e7c7      	b.n	b468 <net_tcp_put+0x68>
    b4d8:	200024c8 	.word	0x200024c8
    b4dc:	200038a0 	.word	0x200038a0

0000b4e0 <tcp_send_data>:
{
    b4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b4e4:	b083      	sub	sp, #12
	len = MIN3(conn->send_data_total - conn->unacked_len,
    b4e6:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    b4ea:	f8d0 6210 	ldr.w	r6, [r0, #528]	; 0x210
    b4ee:	f8b0 5232 	ldrh.w	r5, [r0, #562]	; 0x232
    b4f2:	1af6      	subs	r6, r6, r3
    b4f4:	1aed      	subs	r5, r5, r3
    b4f6:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
{
    b4fa:	af02      	add	r7, sp, #8
	len = MIN3(conn->send_data_total - conn->unacked_len,
    b4fc:	07d9      	lsls	r1, r3, #31
    b4fe:	bf54      	ite	pl
    b500:	f44f 7806 	movpl.w	r8, #536	; 0x218
    b504:	f8b0 8084 	ldrhmi.w	r8, [r0, #132]	; 0x84
{
    b508:	4604      	mov	r4, r0
	len = MIN3(conn->send_data_total - conn->unacked_len,
    b50a:	f016 ff26 	bl	2235a <net_tcp_get_supported_mss>
    b50e:	4540      	cmp	r0, r8
    b510:	dd17      	ble.n	b542 <tcp_send_data+0x62>
    b512:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b516:	07da      	lsls	r2, r3, #31
    b518:	f140 80ad 	bpl.w	b676 <tcp_send_data+0x196>
    b51c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    b520:	429d      	cmp	r5, r3
    b522:	f2c0 80ac 	blt.w	b67e <tcp_send_data+0x19e>
    b526:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
    b52a:	4620      	mov	r0, r4
    b52c:	f016 ff15 	bl	2235a <net_tcp_get_supported_mss>
    b530:	42a8      	cmp	r0, r5
    b532:	dd13      	ble.n	b55c <tcp_send_data+0x7c>
    b534:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b538:	07dd      	lsls	r5, r3, #31
    b53a:	d513      	bpl.n	b564 <tcp_send_data+0x84>
    b53c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    b540:	e0a2      	b.n	b688 <tcp_send_data+0x1a8>
    b542:	4620      	mov	r0, r4
    b544:	f016 ff09 	bl	2235a <net_tcp_get_supported_mss>
    b548:	4285      	cmp	r5, r0
    b54a:	f2c0 8098 	blt.w	b67e <tcp_send_data+0x19e>
    b54e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b552:	07db      	lsls	r3, r3, #31
    b554:	d4e7      	bmi.n	b526 <tcp_send_data+0x46>
    b556:	f44f 7506 	mov.w	r5, #536	; 0x218
    b55a:	e7e6      	b.n	b52a <tcp_send_data+0x4a>
    b55c:	4620      	mov	r0, r4
    b55e:	f016 fefc 	bl	2235a <net_tcp_get_supported_mss>
    b562:	e091      	b.n	b688 <tcp_send_data+0x1a8>
    b564:	f44f 7006 	mov.w	r0, #536	; 0x218
    b568:	e08e      	b.n	b688 <tcp_send_data+0x1a8>
    b56a:	f8b4 5232 	ldrh.w	r5, [r4, #562]	; 0x232
    b56e:	1aed      	subs	r5, r5, r3
    b570:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b574:	07d8      	lsls	r0, r3, #31
    b576:	4620      	mov	r0, r4
    b578:	bf54      	ite	pl
    b57a:	f44f 7606 	movpl.w	r6, #536	; 0x218
    b57e:	f8b4 6084 	ldrhmi.w	r6, [r4, #132]	; 0x84
    b582:	f016 feea 	bl	2235a <net_tcp_get_supported_mss>
    b586:	42b0      	cmp	r0, r6
    b588:	dd1d      	ble.n	b5c6 <tcp_send_data+0xe6>
    b58a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b58e:	07d9      	lsls	r1, r3, #31
    b590:	d569      	bpl.n	b666 <tcp_send_data+0x186>
    b592:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    b596:	429d      	cmp	r5, r3
    b598:	db68      	blt.n	b66c <tcp_send_data+0x18c>
    b59a:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
    b59e:	4620      	mov	r0, r4
    b5a0:	f016 fedb 	bl	2235a <net_tcp_get_supported_mss>
    b5a4:	42a8      	cmp	r0, r5
    b5a6:	dd1a      	ble.n	b5de <tcp_send_data+0xfe>
    b5a8:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b5ac:	07db      	lsls	r3, r3, #31
    b5ae:	d51b      	bpl.n	b5e8 <tcp_send_data+0x108>
    b5b0:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
	if (len == 0) {
    b5b4:	2d00      	cmp	r5, #0
    b5b6:	d172      	bne.n	b69e <tcp_send_data+0x1be>
		ret = -ENODATA;
    b5b8:	f06f 083c 	mvn.w	r8, #60	; 0x3c
}
    b5bc:	4640      	mov	r0, r8
    b5be:	3704      	adds	r7, #4
    b5c0:	46bd      	mov	sp, r7
    b5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	len = MIN3(conn->send_data_total - conn->unacked_len,
    b5c6:	4620      	mov	r0, r4
    b5c8:	f016 fec7 	bl	2235a <net_tcp_get_supported_mss>
    b5cc:	4285      	cmp	r5, r0
    b5ce:	db4d      	blt.n	b66c <tcp_send_data+0x18c>
    b5d0:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b5d4:	07da      	lsls	r2, r3, #31
    b5d6:	d4e0      	bmi.n	b59a <tcp_send_data+0xba>
    b5d8:	f44f 7506 	mov.w	r5, #536	; 0x218
    b5dc:	e7df      	b.n	b59e <tcp_send_data+0xbe>
    b5de:	4620      	mov	r0, r4
    b5e0:	f016 febb 	bl	2235a <net_tcp_get_supported_mss>
	if (len == 0) {
    b5e4:	4605      	mov	r5, r0
    b5e6:	e7e5      	b.n	b5b4 <tcp_send_data+0xd4>
	len = MIN3(conn->send_data_total - conn->unacked_len,
    b5e8:	f44f 7506 	mov.w	r5, #536	; 0x218
    b5ec:	e057      	b.n	b69e <tcp_send_data+0x1be>
	pkt = tcp_pkt_alloc(conn, len);
    b5ee:	2100      	movs	r1, #0
    b5f0:	f640 40cd 	movw	r0, #3277	; 0xccd
    b5f4:	f7fe f892 	bl	971c <net_pkt_alloc>
    b5f8:	e061      	b.n	b6be <tcp_send_data+0x1de>
	ret = tcp_pkt_peek(pkt, conn->send_data, conn->unacked_len, len);
    b5fa:	f8d4 8008 	ldr.w	r8, [r4, #8]
    b5fe:	f8d4 9218 	ldr.w	r9, [r4, #536]	; 0x218
	net_pkt_cursor_init(to);
    b602:	f015 ff68 	bl	214d6 <net_pkt_cursor_init>
	net_pkt_cursor_init(from);
    b606:	4640      	mov	r0, r8
    b608:	f015 ff65 	bl	214d6 <net_pkt_cursor_init>
	if (pos) {
    b60c:	f1b9 0f00 	cmp.w	r9, #0
    b610:	d009      	beq.n	b626 <tcp_send_data+0x146>
	pkt->overwrite = overwrite;
    b612:	f898 3037 	ldrb.w	r3, [r8, #55]	; 0x37
		net_pkt_skip(from, pos);
    b616:	4649      	mov	r1, r9
    b618:	f043 0301 	orr.w	r3, r3, #1
    b61c:	4640      	mov	r0, r8
    b61e:	f888 3037 	strb.w	r3, [r8, #55]	; 0x37
    b622:	f015 ffc2 	bl	215aa <net_pkt_skip>
	return net_pkt_copy(to, from, len);
    b626:	462a      	mov	r2, r5
    b628:	4641      	mov	r1, r8
    b62a:	4630      	mov	r0, r6
    b62c:	f016 f86c 	bl	21708 <net_pkt_copy>
	if (ret < 0) {
    b630:	2800      	cmp	r0, #0
    b632:	da03      	bge.n	b63c <tcp_send_data+0x15c>
		tcp_pkt_unref(pkt);
    b634:	4630      	mov	r0, r6
    b636:	f015 febd 	bl	213b4 <net_pkt_unref>
		goto out;
    b63a:	e053      	b.n	b6e4 <tcp_send_data+0x204>
	ret = tcp_out_ext(conn, PSH | ACK, pkt, conn->seq + conn->unacked_len);
    b63c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    b640:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    b644:	2118      	movs	r1, #24
    b646:	4413      	add	r3, r2
    b648:	4620      	mov	r0, r4
    b64a:	4632      	mov	r2, r6
    b64c:	f7ff fda4 	bl	b198 <tcp_out_ext>
	if (ret == 0) {
    b650:	4680      	mov	r8, r0
    b652:	b920      	cbnz	r0, b65e <tcp_send_data+0x17e>
		conn->unacked_len += len;
    b654:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    b658:	442b      	add	r3, r5
    b65a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
	tcp_pkt_unref(pkt);
    b65e:	4630      	mov	r0, r6
    b660:	f015 fea8 	bl	213b4 <net_pkt_unref>
	return ret;
    b664:	e7aa      	b.n	b5bc <tcp_send_data+0xdc>
	len = MIN3(conn->send_data_total - conn->unacked_len,
    b666:	f5b5 7f06 	cmp.w	r5, #536	; 0x218
    b66a:	dab5      	bge.n	b5d8 <tcp_send_data+0xf8>
    b66c:	f8b4 5232 	ldrh.w	r5, [r4, #562]	; 0x232
    b670:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    b674:	e00f      	b.n	b696 <tcp_send_data+0x1b6>
    b676:	f5b5 7f06 	cmp.w	r5, #536	; 0x218
    b67a:	f6bf af6c 	bge.w	b556 <tcp_send_data+0x76>
    b67e:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
    b682:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    b686:	1ac0      	subs	r0, r0, r3
    b688:	4286      	cmp	r6, r0
    b68a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    b68e:	f4bf af6c 	bcs.w	b56a <tcp_send_data+0x8a>
    b692:	f8d4 5210 	ldr.w	r5, [r4, #528]	; 0x210
    b696:	1aed      	subs	r5, r5, r3
	if (len == 0) {
    b698:	2d00      	cmp	r5, #0
    b69a:	d08d      	beq.n	b5b8 <tcp_send_data+0xd8>
	pkt = tcp_pkt_alloc(conn, len);
    b69c:	dda7      	ble.n	b5ee <tcp_send_data+0x10e>
    b69e:	f640 48cd 	movw	r8, #3277	; 0xccd
    b6a2:	f04f 0900 	mov.w	r9, #0
    b6a6:	6863      	ldr	r3, [r4, #4]
    b6a8:	6920      	ldr	r0, [r4, #16]
    b6aa:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
    b6ae:	4629      	mov	r1, r5
    b6b0:	2306      	movs	r3, #6
    b6b2:	e9cd 8900 	strd	r8, r9, [sp]
    b6b6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    b6ba:	f7fe f91d 	bl	98f8 <net_pkt_alloc_with_buffer>
    b6be:	4606      	mov	r6, r0
	if (!pkt) {
    b6c0:	2800      	cmp	r0, #0
    b6c2:	d19a      	bne.n	b5fa <tcp_send_data+0x11a>
		NET_ERR("conn: %p packet allocation failed, len=%d", conn, len);
    b6c4:	466e      	mov	r6, sp
    b6c6:	b088      	sub	sp, #32
    b6c8:	aa02      	add	r2, sp, #8
    b6ca:	4b08      	ldr	r3, [pc, #32]	; (b6ec <tcp_send_data+0x20c>)
    b6cc:	61d5      	str	r5, [r2, #28]
    b6ce:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b6d2:	2304      	movs	r3, #4
    b6d4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b6d8:	4805      	ldr	r0, [pc, #20]	; (b6f0 <tcp_send_data+0x210>)
    b6da:	f842 3f10 	str.w	r3, [r2, #16]!
    b6de:	f016 fd2b 	bl	22138 <z_log_msg_static_create.constprop.0>
    b6e2:	46b5      	mov	sp, r6
		ret = -ENOBUFS;
    b6e4:	f06f 0868 	mvn.w	r8, #104	; 0x68
    b6e8:	e768      	b.n	b5bc <tcp_send_data+0xdc>
    b6ea:	bf00      	nop
    b6ec:	00033198 	.word	0x00033198
    b6f0:	00024d48 	.word	0x00024d48

0000b6f4 <tcp_resend_data>:
{
    b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6f8:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
    b6fa:	f1a0 05c8 	sub.w	r5, r0, #200	; 0xc8
    b6fe:	f04f 33ff 	mov.w	r3, #4294967295
    b702:	f04f 32ff 	mov.w	r2, #4294967295
{
    b706:	b086      	sub	sp, #24
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_data_timer);
    b708:	f1a0 07f0 	sub.w	r7, r0, #240	; 0xf0
	k_mutex_lock(&conn->lock, K_FOREVER);
    b70c:	4628      	mov	r0, r5
    b70e:	f016 fd16 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	if (conn->send_data_retries >= tcp_retries) {
    b712:	f894 3146 	ldrb.w	r3, [r4, #326]	; 0x146
    b716:	2b08      	cmp	r3, #8
    b718:	d90a      	bls.n	b730 <tcp_resend_data+0x3c>
	k_mutex_unlock(&conn->lock);
    b71a:	4628      	mov	r0, r5
    b71c:	f016 fd4e 	bl	221bc <k_mutex_unlock.isra.0>
		tcp_conn_close(conn, -ETIMEDOUT);
    b720:	f06f 0173 	mvn.w	r1, #115	; 0x73
    b724:	4638      	mov	r0, r7
}
    b726:	b006      	add	sp, #24
    b728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		tcp_conn_close(conn, -ETIMEDOUT);
    b72c:	f016 bd7b 	b.w	22226 <tcp_conn_close.isra.0>
	conn->data_mode = TCP_DATA_MODE_RESEND;
    b730:	2301      	movs	r3, #1
	conn->unacked_len = 0;
    b732:	2600      	movs	r6, #0
	conn->data_mode = TCP_DATA_MODE_RESEND;
    b734:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	ret = tcp_send_data(conn);
    b738:	4638      	mov	r0, r7
	conn->unacked_len = 0;
    b73a:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
	ret = tcp_send_data(conn);
    b73e:	f7ff fecf 	bl	b4e0 <tcp_send_data>
	conn->send_data_retries++;
    b742:	f894 3146 	ldrb.w	r3, [r4, #326]	; 0x146
    b746:	3301      	adds	r3, #1
    b748:	f884 3146 	strb.w	r3, [r4, #326]	; 0x146
	if (ret == 0) {
    b74c:	bbc0      	cbnz	r0, b7c0 <tcp_resend_data+0xcc>
		if (conn->in_close && conn->send_data_total == 0) {
    b74e:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
    b752:	075b      	lsls	r3, r3, #29
    b754:	d546      	bpl.n	b7e4 <tcp_resend_data+0xf0>
    b756:	f8d4 8120 	ldr.w	r8, [r4, #288]	; 0x120
    b75a:	f1b8 0f00 	cmp.w	r8, #0
    b75e:	d141      	bne.n	b7e4 <tcp_resend_data+0xf0>
    b760:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    b764:	f240 30e7 	movw	r0, #999	; 0x3e7
    b768:	4641      	mov	r1, r8
						    FIN_TIMEOUT);
    b76a:	4b2f      	ldr	r3, [pc, #188]	; (b828 <tcp_resend_data+0x134>)
    b76c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b770:	681e      	ldr	r6, [r3, #0]
    b772:	2300      	movs	r3, #0
    b774:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    b778:	fbc6 010c 	smlal	r0, r1, r6, ip
    b77c:	f7f5 f92a 	bl	9d4 <__aeabi_uldivmod>
    b780:	4602      	mov	r2, r0
    b782:	460b      	mov	r3, r1
			k_work_reschedule_for_queue(&tcp_work_q,
    b784:	4829      	ldr	r0, [pc, #164]	; (b82c <tcp_resend_data+0x138>)
    b786:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    b78a:	f00a faab 	bl	15ce4 <k_work_reschedule_for_queue>
			conn_state(conn, TCP_FIN_WAIT_1);
    b78e:	2305      	movs	r3, #5
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
    b790:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
			conn_state(conn, TCP_FIN_WAIT_1);
    b794:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
    b798:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    b79c:	2111      	movs	r1, #17
    b79e:	4413      	add	r3, r2
    b7a0:	4638      	mov	r0, r7
    b7a2:	4642      	mov	r2, r8
    b7a4:	f7ff fcf8 	bl	b198 <tcp_out_ext>
			if (ret == 0) {
    b7a8:	b920      	cbnz	r0, b7b4 <tcp_resend_data+0xc0>
				conn_seq(conn, + 1);
    b7aa:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    b7ae:	3301      	adds	r3, #1
    b7b0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	k_mutex_unlock(&conn->lock);
    b7b4:	4628      	mov	r0, r5
}
    b7b6:	b006      	add	sp, #24
    b7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&conn->lock);
    b7bc:	f016 bcfe 	b.w	221bc <k_mutex_unlock.isra.0>
	} else if (ret == -ENODATA) {
    b7c0:	f110 0f3d 	cmn.w	r0, #61	; 0x3d
    b7c4:	d102      	bne.n	b7cc <tcp_resend_data+0xd8>
		conn->data_mode = TCP_DATA_MODE_SEND;
    b7c6:	f884 6131 	strb.w	r6, [r4, #305]	; 0x131
	k_mutex_unlock(&conn->lock);
    b7ca:	e7f3      	b.n	b7b4 <tcp_resend_data+0xc0>
	} else if (ret == -ENOBUFS) {
    b7cc:	3069      	adds	r0, #105	; 0x69
    b7ce:	d109      	bne.n	b7e4 <tcp_resend_data+0xf0>
		NET_ERR("TCP failed to allocate buffer in retransmission");
    b7d0:	4b17      	ldr	r3, [pc, #92]	; (b830 <tcp_resend_data+0x13c>)
    b7d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7d6:	9305      	str	r3, [sp, #20]
    b7d8:	2302      	movs	r3, #2
    b7da:	4816      	ldr	r0, [pc, #88]	; (b834 <tcp_resend_data+0x140>)
    b7dc:	aa04      	add	r2, sp, #16
    b7de:	9304      	str	r3, [sp, #16]
    b7e0:	f016 fcaa 	bl	22138 <z_log_msg_static_create.constprop.0>
	if (conn->send_data_retries < tcp_retries) {
    b7e4:	f894 2146 	ldrb.w	r2, [r4, #326]	; 0x146
	exp_tcp_rto = TCP_RTO_MS;
    b7e8:	f8b4 6144 	ldrh.w	r6, [r4, #324]	; 0x144
	if (conn->send_data_retries < tcp_retries) {
    b7ec:	2a08      	cmp	r2, #8
    b7ee:	dd18      	ble.n	b822 <tcp_resend_data+0x12e>
    b7f0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b7f4:	f240 30e7 	movw	r0, #999	; 0x3e7
    b7f8:	2100      	movs	r1, #0
    b7fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b7fe:	2300      	movs	r3, #0
    b800:	fbc6 0107 	smlal	r0, r1, r6, r7
    b804:	f7f5 f8e6 	bl	9d4 <__aeabi_uldivmod>
    b808:	4602      	mov	r2, r0
    b80a:	460b      	mov	r3, r1
	k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
    b80c:	4807      	ldr	r0, [pc, #28]	; (b82c <tcp_resend_data+0x138>)
    b80e:	4621      	mov	r1, r4
    b810:	f00a fa68 	bl	15ce4 <k_work_reschedule_for_queue>
    b814:	e7ce      	b.n	b7b4 <tcp_resend_data+0xc0>
			exp_tcp_rto += exp_tcp_rto >> 1;
    b816:	eb06 0666 	add.w	r6, r6, r6, asr #1
		for (int i = 0; i < conn->send_data_retries; i++) {
    b81a:	3301      	adds	r3, #1
    b81c:	4293      	cmp	r3, r2
    b81e:	dbfa      	blt.n	b816 <tcp_resend_data+0x122>
    b820:	e7e6      	b.n	b7f0 <tcp_resend_data+0xfc>
    b822:	2300      	movs	r3, #0
    b824:	e7fa      	b.n	b81c <tcp_resend_data+0x128>
    b826:	bf00      	nop
    b828:	200038a0 	.word	0x200038a0
    b82c:	200024c8 	.word	0x200024c8
    b830:	000331c2 	.word	0x000331c2
    b834:	00024d48 	.word	0x00024d48

0000b838 <net_tcp_update_recv_wnd>:
{
    b838:	b570      	push	{r4, r5, r6, lr}
	struct tcp *conn = context->tcp;
    b83a:	6c84      	ldr	r4, [r0, #72]	; 0x48
{
    b83c:	4605      	mov	r5, r0
    b83e:	460e      	mov	r6, r1
    b840:	b086      	sub	sp, #24
	if (!conn) {
    b842:	b974      	cbnz	r4, b862 <net_tcp_update_recv_wnd+0x2a>
		NET_ERR("context->tcp == NULL");
    b844:	4b0f      	ldr	r3, [pc, #60]	; (b884 <net_tcp_update_recv_wnd+0x4c>)
		return -EPROTOTYPE;
    b846:	f06f 056a 	mvn.w	r5, #106	; 0x6a
		NET_ERR("context->tcp == NULL");
    b84a:	9305      	str	r3, [sp, #20]
    b84c:	2302      	movs	r3, #2
    b84e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b852:	480d      	ldr	r0, [pc, #52]	; (b888 <net_tcp_update_recv_wnd+0x50>)
    b854:	aa04      	add	r2, sp, #16
    b856:	9304      	str	r3, [sp, #16]
    b858:	f016 fc6e 	bl	22138 <z_log_msg_static_create.constprop.0>
}
    b85c:	4628      	mov	r0, r5
    b85e:	b006      	add	sp, #24
    b860:	bd70      	pop	{r4, r5, r6, pc}
	k_mutex_lock(&conn->lock, K_FOREVER);
    b862:	3428      	adds	r4, #40	; 0x28
    b864:	f04f 32ff 	mov.w	r2, #4294967295
    b868:	f04f 33ff 	mov.w	r3, #4294967295
    b86c:	4620      	mov	r0, r4
    b86e:	f016 fc66 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	ret = tcp_update_recv_wnd((struct tcp *)context->tcp, delta);
    b872:	4631      	mov	r1, r6
    b874:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    b876:	f016 fdeb 	bl	22450 <tcp_update_recv_wnd>
    b87a:	4605      	mov	r5, r0
	k_mutex_unlock(&conn->lock);
    b87c:	4620      	mov	r0, r4
    b87e:	f016 fc9d 	bl	221bc <k_mutex_unlock.isra.0>
	return ret;
    b882:	e7eb      	b.n	b85c <net_tcp_update_recv_wnd+0x24>
    b884:	000331f2 	.word	0x000331f2
    b888:	00024d48 	.word	0x00024d48

0000b88c <tcp_data_get>:
{
    b88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (tcp_recv_cb) {
    b890:	4b3c      	ldr	r3, [pc, #240]	; (b984 <tcp_data_get+0xf8>)
{
    b892:	4604      	mov	r4, r0
	if (tcp_recv_cb) {
    b894:	f8d3 9000 	ldr.w	r9, [r3]
{
    b898:	460d      	mov	r5, r1
    b89a:	4617      	mov	r7, r2
	if (tcp_recv_cb) {
    b89c:	f1b9 0f00 	cmp.w	r9, #0
    b8a0:	d004      	beq.n	b8ac <tcp_data_get+0x20>
		tcp_recv_cb(conn, pkt);
    b8a2:	47c8      	blx	r9
	enum net_verdict ret = NET_DROP;
    b8a4:	2002      	movs	r0, #2
}
    b8a6:	b003      	add	sp, #12
    b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (conn->context->recv_cb) {
    b8ac:	6843      	ldr	r3, [r0, #4]
    b8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d0f7      	beq.n	b8a4 <tcp_data_get+0x18>
		*len += tcp_check_pending_data(conn, pkt, *len);
    b8b4:	68c3      	ldr	r3, [r0, #12]
    b8b6:	f8d2 a000 	ldr.w	sl, [r2]
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT &&
    b8ba:	689b      	ldr	r3, [r3, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
    b8bc:	2b00      	cmp	r3, #0
    b8be:	d05e      	beq.n	b97e <tcp_data_get+0xf2>
    b8c0:	68da      	ldr	r2, [r3, #12]
    b8c2:	2a00      	cmp	r2, #0
    b8c4:	d05b      	beq.n	b97e <tcp_data_get+0xf2>
    b8c6:	8a1b      	ldrh	r3, [r3, #16]
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d058      	beq.n	b97e <tcp_data_get+0xf2>
		struct tcphdr *th = th_get(pkt);
    b8cc:	4608      	mov	r0, r1
    b8ce:	f7ff f8a9 	bl	aa24 <th_get>
		pending_seq = tcp_get_seq(conn->queue_recv_data->buffer);
    b8d2:	68e2      	ldr	r2, [r4, #12]
    b8d4:	6843      	ldr	r3, [r0, #4]
    b8d6:	6891      	ldr	r1, [r2, #8]
    b8d8:	ba1b      	rev	r3, r3
	return *(uint32_t *)net_buf_user_data(buf);
    b8da:	698e      	ldr	r6, [r1, #24]
		uint32_t expected_seq = th_seq(th) + len;
    b8dc:	eb0a 0b03 	add.w	fp, sl, r3
		end_offset = expected_seq - pending_seq;
    b8e0:	ebab 0206 	sub.w	r2, fp, r6
		pending_len = net_pkt_get_len(conn->queue_recv_data);
    b8e4:	4608      	mov	r0, r1
		uint32_t expected_seq = th_seq(th) + len;
    b8e6:	9301      	str	r3, [sp, #4]
		end_offset = expected_seq - pending_seq;
    b8e8:	9200      	str	r2, [sp, #0]
		pending_len = net_pkt_get_len(conn->queue_recv_data);
    b8ea:	f016 fc2a 	bl	22142 <net_pkt_get_len.isra.0>
		if (end_offset < pending_len) {
    b8ee:	9a00      	ldr	r2, [sp, #0]
		pending_len = net_pkt_get_len(conn->queue_recv_data);
    b8f0:	4680      	mov	r8, r0
		if (end_offset < pending_len) {
    b8f2:	4282      	cmp	r2, r0
    b8f4:	9b01      	ldr	r3, [sp, #4]
    b8f6:	d233      	bcs.n	b960 <tcp_data_get+0xd4>
			if (end_offset) {
    b8f8:	b132      	cbz	r2, b908 <tcp_data_get+0x7c>
				net_pkt_remove_tail(pkt, end_offset);
    b8fa:	4611      	mov	r1, r2
    b8fc:	4628      	mov	r0, r5
    b8fe:	f015 fdcf 	bl	214a0 <net_pkt_remove_tail>
				pending_len -= end_offset;
    b902:	4446      	add	r6, r8
    b904:	eba6 080b 	sub.w	r8, r6, fp
			net_buf_frag_add(pkt->buffer,
    b908:	68e3      	ldr	r3, [r4, #12]
    b90a:	68a8      	ldr	r0, [r5, #8]
    b90c:	6899      	ldr	r1, [r3, #8]
    b90e:	f014 fbb1 	bl	20074 <net_buf_frag_add>
			conn->queue_recv_data->buffer = NULL;
    b912:	2200      	movs	r2, #0
    b914:	68e3      	ldr	r3, [r4, #12]
			k_work_cancel_delayable(&conn->recv_queue_timer);
    b916:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
			conn->queue_recv_data->buffer = NULL;
    b91a:	609a      	str	r2, [r3, #8]
			k_work_cancel_delayable(&conn->recv_queue_timer);
    b91c:	f018 fc56 	bl	241cc <k_work_cancel_delayable>
		*len += tcp_check_pending_data(conn, pkt, *len);
    b920:	683b      	ldr	r3, [r7, #0]
		net_pkt_cursor_init(pkt);
    b922:	4628      	mov	r0, r5
		*len += tcp_check_pending_data(conn, pkt, *len);
    b924:	4443      	add	r3, r8
    b926:	603b      	str	r3, [r7, #0]
		net_pkt_cursor_init(pkt);
    b928:	f015 fdd5 	bl	214d6 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
    b92c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
		net_pkt_skip(pkt, net_pkt_get_len(pkt) - *len);
    b930:	68a8      	ldr	r0, [r5, #8]
    b932:	f043 0301 	orr.w	r3, r3, #1
    b936:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    b93a:	f016 fc02 	bl	22142 <net_pkt_get_len.isra.0>
    b93e:	6839      	ldr	r1, [r7, #0]
    b940:	1a41      	subs	r1, r0, r1
    b942:	4628      	mov	r0, r5
    b944:	f015 fe31 	bl	215aa <net_pkt_skip>
		tcp_update_recv_wnd(conn, -*len);
    b948:	6839      	ldr	r1, [r7, #0]
    b94a:	4620      	mov	r0, r4
    b94c:	4249      	negs	r1, r1
    b94e:	f016 fd7f 	bl	22450 <tcp_update_recv_wnd>
		k_fifo_put(&conn->recv_data, pkt);
    b952:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    b956:	4629      	mov	r1, r5
    b958:	f018 fb27 	bl	23faa <k_queue_append>
    b95c:	2000      	movs	r0, #0
    b95e:	e7a2      	b.n	b8a6 <tcp_data_get+0x1a>
		gap_size = (int32_t)(pending_seq - th_seq(th) - ((uint32_t)len));
    b960:	eba6 060a 	sub.w	r6, r6, sl
    b964:	1af6      	subs	r6, r6, r3
			if (gap_size <= 0) {
    b966:	2e00      	cmp	r6, #0
    b968:	dc09      	bgt.n	b97e <tcp_data_get+0xf2>
				net_buf_unref(conn->queue_recv_data->buffer);
    b96a:	4608      	mov	r0, r1
    b96c:	f7fb fd7a 	bl	7464 <net_buf_unref>
				conn->queue_recv_data->buffer = NULL;
    b970:	68e3      	ldr	r3, [r4, #12]
				k_work_cancel_delayable(&conn->recv_queue_timer);
    b972:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
				conn->queue_recv_data->buffer = NULL;
    b976:	f8c3 9008 	str.w	r9, [r3, #8]
				k_work_cancel_delayable(&conn->recv_queue_timer);
    b97a:	f018 fc27 	bl	241cc <k_work_cancel_delayable>
	size_t pending_len = 0;
    b97e:	f04f 0800 	mov.w	r8, #0
    b982:	e7cd      	b.n	b920 <tcp_data_get+0x94>
    b984:	20003890 	.word	0x20003890

0000b988 <tcp_send_queued_data.part.0>:
static int tcp_send_queued_data(struct tcp *conn)
    b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b98a:	4604      	mov	r4, r0
	int ret = 0;
    b98c:	2500      	movs	r5, #0
	while (tcp_unsent_len(conn) > 0) {
    b98e:	4620      	mov	r0, r4
    b990:	f7fe ffac 	bl	a8ec <tcp_unsent_len>
    b994:	2800      	cmp	r0, #0
    b996:	dd08      	ble.n	b9aa <tcp_send_queued_data.part.0+0x22>
		if ((conn->tcp_nodelay == false) && (conn->unacked_len > 0)) {
    b998:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    b99c:	0719      	lsls	r1, r3, #28
    b99e:	d50f      	bpl.n	b9c0 <tcp_send_queued_data.part.0+0x38>
		ret = tcp_send_data(conn);
    b9a0:	4620      	mov	r0, r4
    b9a2:	f7ff fd9d 	bl	b4e0 <tcp_send_data>
		if (ret < 0) {
    b9a6:	1e05      	subs	r5, r0, #0
    b9a8:	daf1      	bge.n	b98e <tcp_send_queued_data.part.0+0x6>
	if (conn->send_data_total) {
    b9aa:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    b9ae:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    b9b2:	f504 7080 	add.w	r0, r4, #256	; 0x100
    b9b6:	bb43      	cbnz	r3, ba0a <tcp_send_queued_data.part.0+0x82>
    b9b8:	f018 fd5e 	bl	24478 <z_timeout_remaining>
}
    b9bc:	4628      	mov	r0, r5
    b9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((conn->tcp_nodelay == false) && (conn->unacked_len > 0)) {
    b9c0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
    b9c4:	2b00      	cmp	r3, #0
    b9c6:	ddeb      	ble.n	b9a0 <tcp_send_queued_data.part.0+0x18>
			if (tcp_unsent_len(conn) < conn_mss(conn)) {
    b9c8:	4620      	mov	r0, r4
    b9ca:	f7fe ff8f 	bl	a8ec <tcp_unsent_len>
    b9ce:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b9d2:	4606      	mov	r6, r0
    b9d4:	07da      	lsls	r2, r3, #31
    b9d6:	4620      	mov	r0, r4
    b9d8:	bf54      	ite	pl
    b9da:	f44f 7706 	movpl.w	r7, #536	; 0x218
    b9de:	f8b4 7084 	ldrhmi.w	r7, [r4, #132]	; 0x84
    b9e2:	f016 fcba 	bl	2235a <net_tcp_get_supported_mss>
    b9e6:	42b8      	cmp	r0, r7
    b9e8:	dd08      	ble.n	b9fc <tcp_send_queued_data.part.0+0x74>
    b9ea:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    b9ee:	07db      	lsls	r3, r3, #31
    b9f0:	d508      	bpl.n	ba04 <tcp_send_queued_data.part.0+0x7c>
    b9f2:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    b9f6:	4286      	cmp	r6, r0
    b9f8:	dad2      	bge.n	b9a0 <tcp_send_queued_data.part.0+0x18>
    b9fa:	e7d6      	b.n	b9aa <tcp_send_queued_data.part.0+0x22>
    b9fc:	4620      	mov	r0, r4
    b9fe:	f016 fcac 	bl	2235a <net_tcp_get_supported_mss>
    ba02:	e7f8      	b.n	b9f6 <tcp_send_queued_data.part.0+0x6e>
    ba04:	f44f 7006 	mov.w	r0, #536	; 0x218
    ba08:	e7f5      	b.n	b9f6 <tcp_send_queued_data.part.0+0x6e>
    ba0a:	f018 fd35 	bl	24478 <z_timeout_remaining>
	if (k_work_delayable_remaining_get(&conn->send_data_timer)) {
    ba0e:	4308      	orrs	r0, r1
    ba10:	d1d4      	bne.n	b9bc <tcp_send_queued_data.part.0+0x34>
		conn->send_data_retries = 0;
    ba12:	2100      	movs	r1, #0
    ba14:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ba18:	f240 30e7 	movw	r0, #999	; 0x3e7
    ba1c:	f884 1236 	strb.w	r1, [r4, #566]	; 0x236
    ba20:	f8b4 4234 	ldrh.w	r4, [r4, #564]	; 0x234
    ba24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba28:	2300      	movs	r3, #0
    ba2a:	fbe6 0104 	umlal	r0, r1, r6, r4
    ba2e:	f7f4 ffd1 	bl	9d4 <__aeabi_uldivmod>
    ba32:	4602      	mov	r2, r0
    ba34:	460b      	mov	r3, r1
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
    ba36:	4802      	ldr	r0, [pc, #8]	; (ba40 <tcp_send_queued_data.part.0+0xb8>)
    ba38:	4639      	mov	r1, r7
    ba3a:	f00a f953 	bl	15ce4 <k_work_reschedule_for_queue>
    ba3e:	e7bd      	b.n	b9bc <tcp_send_queued_data.part.0+0x34>
    ba40:	200024c8 	.word	0x200024c8

0000ba44 <net_tcp_queue_data>:
{
    ba44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct tcp *conn = context->tcp;
    ba48:	6c84      	ldr	r4, [r0, #72]	; 0x48
{
    ba4a:	460f      	mov	r7, r1
	if (!conn || conn->state != TCP_ESTABLISHED) {
    ba4c:	2c00      	cmp	r4, #0
    ba4e:	d07b      	beq.n	bb48 <net_tcp_queue_data+0x104>
    ba50:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    ba54:	2b04      	cmp	r3, #4
    ba56:	d177      	bne.n	bb48 <net_tcp_queue_data+0x104>
	k_mutex_lock(&conn->lock, K_FOREVER);
    ba58:	f104 0928 	add.w	r9, r4, #40	; 0x28
    ba5c:	f04f 32ff 	mov.w	r2, #4294967295
    ba60:	f04f 33ff 	mov.w	r3, #4294967295
    ba64:	4648      	mov	r0, r9
    ba66:	f016 fb6a 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	bool window_full = (conn->send_data_total >= conn->send_win);
    ba6a:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
	if (tcp_window_full(conn)) {
    ba6e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
    ba72:	429a      	cmp	r2, r3
    ba74:	d30f      	bcc.n	ba96 <net_tcp_queue_data+0x52>
		if (conn->send_win == 0) {
    ba76:	b133      	cbz	r3, ba86 <net_tcp_queue_data+0x42>
		(void)k_work_schedule_for_queue(&tcp_work_q,
    ba78:	2200      	movs	r2, #0
    ba7a:	2300      	movs	r3, #0
    ba7c:	4834      	ldr	r0, [pc, #208]	; (bb50 <net_tcp_queue_data+0x10c>)
    ba7e:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    ba82:	f00a f8ff 	bl	15c84 <k_work_schedule_for_queue>
		goto out;
    ba86:	f06f 050a 	mvn.w	r5, #10
	k_mutex_unlock(&conn->lock);
    ba8a:	4648      	mov	r0, r9
    ba8c:	f016 fb96 	bl	221bc <k_mutex_unlock.isra.0>
}
    ba90:	4628      	mov	r0, r5
    ba92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = net_pkt_get_len(pkt);
    ba96:	68b8      	ldr	r0, [r7, #8]
    ba98:	f016 fb53 	bl	22142 <net_pkt_get_len.isra.0>
	if (conn->send_data->buffer) {
    ba9c:	68a3      	ldr	r3, [r4, #8]
	len = net_pkt_get_len(pkt);
    ba9e:	4680      	mov	r8, r0
	if (conn->send_data->buffer) {
    baa0:	689e      	ldr	r6, [r3, #8]
    baa2:	b11e      	cbz	r6, baac <net_tcp_queue_data+0x68>
		orig_buf = net_buf_frag_last(conn->send_data->buffer);
    baa4:	4630      	mov	r0, r6
    baa6:	f014 fad4 	bl	20052 <net_buf_frag_last>
    baaa:	4606      	mov	r6, r0
	pkt->buffer = NULL;
    baac:	f04f 0a00 	mov.w	sl, #0
	net_pkt_append_buffer(conn->send_data, pkt->buffer);
    bab0:	68b9      	ldr	r1, [r7, #8]
    bab2:	68a0      	ldr	r0, [r4, #8]
    bab4:	f015 fd29 	bl	2150a <net_pkt_append_buffer>
	conn->send_data_total += len;
    bab8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    babc:	4443      	add	r3, r8
    babe:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
	pkt->buffer = NULL;
    bac2:	f8c7 a008 	str.w	sl, [r7, #8]
	if (conn->data_mode == TCP_DATA_MODE_RESEND) {
    bac6:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
    baca:	2b01      	cmp	r3, #1
    bacc:	d02b      	beq.n	bb26 <net_tcp_queue_data+0xe2>
    bace:	4620      	mov	r0, r4
    bad0:	f7ff ff5a 	bl	b988 <tcp_send_queued_data.part.0>
	if (ret < 0 && ret != -ENOBUFS) {
    bad4:	1e05      	subs	r5, r0, #0
    bad6:	da27      	bge.n	bb28 <net_tcp_queue_data+0xe4>
    bad8:	f115 0f69 	cmn.w	r5, #105	; 0x69
    badc:	d004      	beq.n	bae8 <net_tcp_queue_data+0xa4>
		tcp_conn_close(conn, ret);
    bade:	4629      	mov	r1, r5
    bae0:	4620      	mov	r0, r4
    bae2:	f016 fba0 	bl	22226 <tcp_conn_close.isra.0>
		goto out;
    bae6:	e7d0      	b.n	ba8a <net_tcp_queue_data+0x46>
		(conn->send_data_total < (conn->unacked_len + len))) {
    bae8:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
    baec:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    baf0:	4442      	add	r2, r8
	if ((ret == -ENOBUFS) &&
    baf2:	4293      	cmp	r3, r2
    baf4:	d317      	bcc.n	bb26 <net_tcp_queue_data+0xe2>
		conn->send_data_total -= len;
    baf6:	eba3 0308 	sub.w	r3, r3, r8
    bafa:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		if (orig_buf) {
    bafe:	b166      	cbz	r6, bb1a <net_tcp_queue_data+0xd6>
			pkt->buffer = orig_buf->frags;
    bb00:	6873      	ldr	r3, [r6, #4]
    bb02:	60bb      	str	r3, [r7, #8]
			orig_buf->frags = NULL;
    bb04:	f8c6 a004 	str.w	sl, [r6, #4]
		if (conn->send_data_total == 0) {
    bb08:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    bb0c:	2b00      	cmp	r3, #0
    bb0e:	d1bc      	bne.n	ba8a <net_tcp_queue_data+0x46>
			k_work_cancel_delayable(&conn->send_data_timer);
    bb10:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    bb14:	f018 fb5a 	bl	241cc <k_work_cancel_delayable>
    bb18:	e7b7      	b.n	ba8a <net_tcp_queue_data+0x46>
			pkt->buffer = conn->send_data->buffer;
    bb1a:	68a3      	ldr	r3, [r4, #8]
    bb1c:	689b      	ldr	r3, [r3, #8]
    bb1e:	60bb      	str	r3, [r7, #8]
			conn->send_data->buffer = NULL;
    bb20:	68a3      	ldr	r3, [r4, #8]
    bb22:	609e      	str	r6, [r3, #8]
    bb24:	e7f0      	b.n	bb08 <net_tcp_queue_data+0xc4>
{
    bb26:	2500      	movs	r5, #0
	bool window_full = (conn->send_data_total >= conn->send_win);
    bb28:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
		if (tcp_window_full(conn)) {
    bb2c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    bb30:	429a      	cmp	r2, r3
    bb32:	d805      	bhi.n	bb40 <net_tcp_queue_data+0xfc>
	return z_impl_k_sem_take(sem, timeout);
    bb34:	2200      	movs	r2, #0
    bb36:	2300      	movs	r3, #0
    bb38:	f104 0054 	add.w	r0, r4, #84	; 0x54
    bb3c:	f009 ff2a 	bl	15994 <z_impl_k_sem_take>
		tcp_pkt_unref(pkt);
    bb40:	4638      	mov	r0, r7
    bb42:	f015 fc37 	bl	213b4 <net_pkt_unref>
    bb46:	e7a0      	b.n	ba8a <net_tcp_queue_data+0x46>
		return -ENOTCONN;
    bb48:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    bb4c:	e7a0      	b.n	ba90 <net_tcp_queue_data+0x4c>
    bb4e:	bf00      	nop
    bb50:	200024c8 	.word	0x200024c8

0000bb54 <tcp_in>:
{
    bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb58:	b099      	sub	sp, #100	; 0x64
	k_mutex_lock(&conn->lock, K_FOREVER);
    bb5a:	f100 0328 	add.w	r3, r0, #40	; 0x28
{
    bb5e:	af02      	add	r7, sp, #8
    bb60:	4604      	mov	r4, r0
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
    bb62:	460d      	mov	r5, r1
	k_mutex_lock(&conn->lock, K_FOREVER);
    bb64:	60bb      	str	r3, [r7, #8]
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
    bb66:	b971      	cbnz	r1, bb86 <tcp_in+0x32>
    bb68:	46a9      	mov	r9, r5
	enum net_verdict verdict = NET_DROP;
    bb6a:	2602      	movs	r6, #2
	len = pkt ? tcp_data_len(pkt) : 0;
    bb6c:	46aa      	mov	sl, r5
	k_mutex_lock(&conn->lock, K_FOREVER);
    bb6e:	f04f 32ff 	mov.w	r2, #4294967295
    bb72:	f04f 33ff 	mov.w	r3, #4294967295
    bb76:	3028      	adds	r0, #40	; 0x28
	uint8_t next = 0, fl = 0;
    bb78:	4688      	mov	r8, r1
	k_mutex_lock(&conn->lock, K_FOREVER);
    bb7a:	f016 fae0 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	int close_status = 0;
    bb7e:	617d      	str	r5, [r7, #20]
	len = pkt ? tcp_data_len(pkt) : 0;
    bb80:	2300      	movs	r3, #0
    bb82:	60fb      	str	r3, [r7, #12]
    bb84:	e37f      	b.n	c286 <tcp_in+0x732>
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
    bb86:	4608      	mov	r0, r1
    bb88:	f7fe ff4c 	bl	aa24 <th_get>
	uint8_t next = 0, fl = 0;
    bb8c:	f04f 0800 	mov.w	r8, #0
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
    bb90:	4681      	mov	r9, r0
    bb92:	b9f8      	cbnz	r0, bbd4 <tcp_in+0x80>
	enum net_verdict verdict = NET_DROP;
    bb94:	2602      	movs	r6, #2
	k_mutex_lock(&conn->lock, K_FOREVER);
    bb96:	f04f 32ff 	mov.w	r2, #4294967295
    bb9a:	f04f 33ff 	mov.w	r3, #4294967295
    bb9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    bba2:	f016 facc 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	int close_status = 0;
    bba6:	f8c7 9014 	str.w	r9, [r7, #20]
	struct tcphdr *th = th_get(pkt);
    bbaa:	4628      	mov	r0, r5
    bbac:	f7fe ff3a 	bl	aa24 <th_get>
    bbb0:	4601      	mov	r1, r0
	int len = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
    bbb2:	68a8      	ldr	r0, [r5, #8]
    bbb4:	f016 fac5 	bl	22142 <net_pkt_get_len.isra.0>
    bbb8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
    bbbc:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
    bbc0:	4413      	add	r3, r2
    bbc2:	eba0 0a03 	sub.w	sl, r0, r3
	size_t tcp_options_len = (th_off(th) - 5) * 4;
    bbc6:	7b0b      	ldrb	r3, [r1, #12]
    bbc8:	091b      	lsrs	r3, r3, #4
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
    bbca:	ebaa 0a83 	sub.w	sl, sl, r3, lsl #2
	return len > 0 ? (size_t)len : 0;
    bbce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    bbd2:	e7d5      	b.n	bb80 <tcp_in+0x2c>
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
    bbd4:	7b06      	ldrb	r6, [r0, #12]
		fl = th_flags(th) & ~(ECN | CWR);
    bbd6:	f890 a00d 	ldrb.w	sl, [r0, #13]
	k_mutex_lock(&conn->lock, K_FOREVER);
    bbda:	f04f 33ff 	mov.w	r3, #4294967295
    bbde:	f04f 32ff 	mov.w	r2, #4294967295
    bbe2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    bbe6:	f016 faaa 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	if (th && th_off(th) < 5) {
    bbea:	f899 300c 	ldrb.w	r3, [r9, #12]
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
    bbee:	0936      	lsrs	r6, r6, #4
    bbf0:	3e05      	subs	r6, #5
	if (th && th_off(th) < 5) {
    bbf2:	2b4f      	cmp	r3, #79	; 0x4f
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
    bbf4:	ea4f 0686 	mov.w	r6, r6, lsl #2
		fl = th_flags(th) & ~(ECN | CWR);
    bbf8:	f00a 083f 	and.w	r8, sl, #63	; 0x3f
	if (th && th_off(th) < 5) {
    bbfc:	d808      	bhi.n	bc10 <tcp_in+0xbc>
		tcp_out(conn, RST);
    bbfe:	2104      	movs	r1, #4
    bc00:	4620      	mov	r0, r4
    bc02:	f016 fbc6 	bl	22392 <tcp_out>
		conn_state(conn, TCP_CLOSED);
    bc06:	230b      	movs	r3, #11
	enum net_verdict verdict = NET_DROP;
    bc08:	2602      	movs	r6, #2
		conn_state(conn, TCP_CLOSED);
    bc0a:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    bc0e:	e056      	b.n	bcbe <tcp_in+0x16a>
	if (FL(&fl, &, RST)) {
    bc10:	f1b8 0f00 	cmp.w	r8, #0
    bc14:	d13c      	bne.n	bc90 <tcp_in+0x13c>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
    bc16:	b33e      	cbz	r6, bc68 <tcp_in+0x114>
	backup->pos = pkt->cursor.pos;
    bc18:	e9d5 ba03 	ldrd	fp, sl, [r5, #12]
	net_pkt_cursor_init(pkt);
    bc1c:	4628      	mov	r0, r5
    bc1e:	f015 fc5a 	bl	214d6 <net_pkt_cursor_init>
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt) +
    bc22:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    bc26:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
    bc2a:	4628      	mov	r0, r5
    bc2c:	4419      	add	r1, r3
    bc2e:	3114      	adds	r1, #20
    bc30:	f015 fcbb 	bl	215aa <net_pkt_skip>
	ret = net_pkt_read(pkt, buf, MIN(tcp_options_len, buf_len));
    bc34:	2e28      	cmp	r6, #40	; 0x28
    bc36:	4632      	mov	r2, r6
    bc38:	4628      	mov	r0, r5
    bc3a:	bf28      	it	cs
    bc3c:	2228      	movcs	r2, #40	; 0x28
    bc3e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    bc42:	f015 fd4c 	bl	216de <net_pkt_read>
	pkt->cursor.pos = backup->pos;
    bc46:	e9c5 ba03 	strd	fp, sl, [r5, #12]
	recv_options->mss_found = false;
    bc4a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
	if (ret < 0) {
    bc4e:	2800      	cmp	r0, #0
	recv_options->mss_found = false;
    bc50:	f023 0303 	bic.w	r3, r3, #3
    bc54:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	if (ret < 0) {
    bc58:	db04      	blt.n	bc64 <tcp_in+0x110>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
    bc5a:	4631      	mov	r1, r6
	recv_options->mss_found = false;
    bc5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
    bc60:	2900      	cmp	r1, #0
    bc62:	dc2f      	bgt.n	bcc4 <tcp_in+0x170>
	if (false == result) {
    bc64:	2e00      	cmp	r6, #0
    bc66:	dd44      	ble.n	bcf2 <tcp_in+0x19e>
	if (th && (conn->state != TCP_LISTEN) && (conn->state != TCP_SYN_SENT) &&
    bc68:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    bc6c:	3b01      	subs	r3, #1
    bc6e:	2b01      	cmp	r3, #1
    bc70:	d96f      	bls.n	bd52 <tcp_in+0x1fe>
	    tcp_validate_seq(conn, th) && FL(&fl, &, SYN)) {
    bc72:	4649      	mov	r1, r9
    bc74:	4620      	mov	r0, r4
    bc76:	f016 fa2c 	bl	220d2 <tcp_validate_seq>
	if (th && (conn->state != TCP_LISTEN) && (conn->state != TCP_SYN_SENT) &&
    bc7a:	2800      	cmp	r0, #0
    bc7c:	d069      	beq.n	bd52 <tcp_in+0x1fe>
	    tcp_validate_seq(conn, th) && FL(&fl, &, SYN)) {
    bc7e:	f1b8 0f00 	cmp.w	r8, #0
    bc82:	d066      	beq.n	bd52 <tcp_in+0x1fe>
    bc84:	f018 0f02 	tst.w	r8, #2
    bc88:	d063      	beq.n	bd52 <tcp_in+0x1fe>
    bc8a:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    bc8e:	e7b6      	b.n	bbfe <tcp_in+0xaa>
	if (FL(&fl, &, RST)) {
    bc90:	f01a 0f04 	tst.w	sl, #4
    bc94:	d0bf      	beq.n	bc16 <tcp_in+0xc2>
    bc96:	f00a 083b 	and.w	r8, sl, #59	; 0x3b
		if (!tcp_validate_seq(conn, th)) {
    bc9a:	4649      	mov	r1, r9
    bc9c:	4620      	mov	r0, r4
    bc9e:	f016 fa18 	bl	220d2 <tcp_validate_seq>
    bca2:	b940      	cbnz	r0, bcb6 <tcp_in+0x162>
			k_mutex_unlock(&conn->lock);
    bca4:	68b8      	ldr	r0, [r7, #8]
    bca6:	f016 fa89 	bl	221bc <k_mutex_unlock.isra.0>
			return NET_DROP;
    bcaa:	2602      	movs	r6, #2
}
    bcac:	4630      	mov	r0, r6
    bcae:	375c      	adds	r7, #92	; 0x5c
    bcb0:	46bd      	mov	sp, r7
    bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn_state(conn, TCP_CLOSED);
    bcb6:	230b      	movs	r3, #11
		verdict = NET_OK;
    bcb8:	2600      	movs	r6, #0
		conn_state(conn, TCP_CLOSED);
    bcba:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
		close_status = -ECONNRESET;
    bcbe:	f06f 0367 	mvn.w	r3, #103	; 0x67
    bcc2:	e07c      	b.n	bdbe <tcp_in+0x26a>
		opt = options[0];
    bcc4:	7818      	ldrb	r0, [r3, #0]
		if (opt == NET_TCP_END_OPT) {
    bcc6:	2800      	cmp	r0, #0
    bcc8:	d0cc      	beq.n	bc64 <tcp_in+0x110>
		} else if (opt == NET_TCP_NOP_OPT) {
    bcca:	2801      	cmp	r0, #1
    bccc:	d03f      	beq.n	bd4e <tcp_in+0x1fa>
			if (len < 2) { /* Only END and NOP can have length 1 */
    bcce:	2901      	cmp	r1, #1
    bcd0:	d11b      	bne.n	bd0a <tcp_in+0x1b6>
				NET_ERR("Illegal option %d with length %zd",
    bcd2:	466e      	mov	r6, sp
    bcd4:	b088      	sub	sp, #32
    bcd6:	aa02      	add	r2, sp, #8
    bcd8:	4bc2      	ldr	r3, [pc, #776]	; (bfe4 <tcp_in+0x490>)
    bcda:	61d1      	str	r1, [r2, #28]
    bcdc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bce0:	2304      	movs	r3, #4
    bce2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bce6:	48c0      	ldr	r0, [pc, #768]	; (bfe8 <tcp_in+0x494>)
    bce8:	f842 3f10 	str.w	r3, [r2, #16]!
    bcec:	f016 fa24 	bl	22138 <z_log_msg_static_create.constprop.0>
    bcf0:	46b5      	mov	sp, r6
		NET_WARN("Invalid TCP options");
    bcf2:	4bbe      	ldr	r3, [pc, #760]	; (bfec <tcp_in+0x498>)
    bcf4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    bcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    bcfa:	2302      	movs	r3, #2
    bcfc:	48ba      	ldr	r0, [pc, #744]	; (bfe8 <tcp_in+0x494>)
    bcfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
    bd02:	62bb      	str	r3, [r7, #40]	; 0x28
    bd04:	f016 fa18 	bl	22138 <z_log_msg_static_create.constprop.0>
		tcp_out(conn, RST);
    bd08:	e779      	b.n	bbfe <tcp_in+0xaa>
			opt_len = options[1];
    bd0a:	785a      	ldrb	r2, [r3, #1]
		if (opt_len < 2 || opt_len > len) {
    bd0c:	2a01      	cmp	r2, #1
    bd0e:	d9f0      	bls.n	bcf2 <tcp_in+0x19e>
    bd10:	428a      	cmp	r2, r1
    bd12:	dcee      	bgt.n	bcf2 <tcp_in+0x19e>
		switch (opt) {
    bd14:	2802      	cmp	r0, #2
    bd16:	d004      	beq.n	bd22 <tcp_in+0x1ce>
    bd18:	2803      	cmp	r0, #3
    bd1a:	d00f      	beq.n	bd3c <tcp_in+0x1e8>
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
    bd1c:	4413      	add	r3, r2
    bd1e:	1a89      	subs	r1, r1, r2
    bd20:	e79e      	b.n	bc60 <tcp_in+0x10c>
			if (opt_len != 4) {
    bd22:	2a04      	cmp	r2, #4
    bd24:	d1e5      	bne.n	bcf2 <tcp_in+0x19e>
			recv_options->mss =
    bd26:	8858      	ldrh	r0, [r3, #2]
    bd28:	ba40      	rev16	r0, r0
    bd2a:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
			recv_options->mss_found = true;
    bd2e:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    bd32:	f040 0001 	orr.w	r0, r0, #1
			recv_options->wnd_found = true;
    bd36:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
			break;
    bd3a:	e7ef      	b.n	bd1c <tcp_in+0x1c8>
			if (opt_len != 3) {
    bd3c:	2a03      	cmp	r2, #3
    bd3e:	d1d8      	bne.n	bcf2 <tcp_in+0x19e>
			recv_options->wnd_found = true;
    bd40:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
			recv_options->window = opt;
    bd44:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
			recv_options->wnd_found = true;
    bd48:	f040 0002 	orr.w	r0, r0, #2
    bd4c:	e7f3      	b.n	bd36 <tcp_in+0x1e2>
			opt_len = 1;
    bd4e:	4602      	mov	r2, r0
    bd50:	e7e4      	b.n	bd1c <tcp_in+0x1c8>
		if (conn->send_win > conn->send_win_max) {
    bd52:	f8b9 300e 	ldrh.w	r3, [r9, #14]
    bd56:	f8b4 2230 	ldrh.w	r2, [r4, #560]	; 0x230
    bd5a:	ba5b      	rev16	r3, r3
    bd5c:	b29b      	uxth	r3, r3
    bd5e:	4293      	cmp	r3, r2
    bd60:	bf28      	it	cs
    bd62:	4613      	movcs	r3, r2
			if (!k_work_delayable_is_pending(&conn->persist_timer)) {
    bd64:	f504 76a8 	add.w	r6, r4, #336	; 0x150
	return k_work_delayable_busy_get(dwork) != 0;
    bd68:	4630      	mov	r0, r6
    bd6a:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
		if (conn->send_win == 0) {
    bd6e:	bb43      	cbnz	r3, bdc2 <tcp_in+0x26e>
    bd70:	f018 fa2a 	bl	241c8 <k_work_delayable_busy_get>
			if (!k_work_delayable_is_pending(&conn->persist_timer)) {
    bd74:	4601      	mov	r1, r0
    bd76:	b9a0      	cbnz	r0, bda2 <tcp_in+0x24e>
    bd78:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
				conn->zwp_retries = 0;
    bd7c:	f884 0238 	strb.w	r0, [r4, #568]	; 0x238
    bd80:	f240 30e7 	movw	r0, #999	; 0x3e7
    bd84:	f8b4 c234 	ldrh.w	ip, [r4, #564]	; 0x234
    bd88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bd8c:	2300      	movs	r3, #0
    bd8e:	fbee 010c 	umlal	r0, r1, lr, ip
    bd92:	f7f4 fe1f 	bl	9d4 <__aeabi_uldivmod>
    bd96:	4602      	mov	r2, r0
    bd98:	460b      	mov	r3, r1
				(void)k_work_reschedule_for_queue(
    bd9a:	4895      	ldr	r0, [pc, #596]	; (bff0 <tcp_in+0x49c>)
    bd9c:	4631      	mov	r1, r6
    bd9e:	f009 ffa1 	bl	15ce4 <k_work_reschedule_for_queue>
	bool window_full = (conn->send_data_total >= conn->send_win);
    bda2:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
		if (tcp_window_full(conn)) {
    bda6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
				k_sem_give(&conn->tx_sem);
    bdaa:	f104 0054 	add.w	r0, r4, #84	; 0x54
		if (tcp_window_full(conn)) {
    bdae:	429a      	cmp	r2, r3
    bdb0:	d30a      	bcc.n	bdc8 <tcp_in+0x274>
    bdb2:	2200      	movs	r2, #0
    bdb4:	2300      	movs	r3, #0
    bdb6:	f009 fded 	bl	15994 <z_impl_k_sem_take>
	enum net_verdict verdict = NET_DROP;
    bdba:	2602      	movs	r6, #2
	int close_status = 0;
    bdbc:	2300      	movs	r3, #0
		close_status = -ECONNRESET;
    bdbe:	617b      	str	r3, [r7, #20]
    bdc0:	e6f3      	b.n	bbaa <tcp_in+0x56>
			(void)k_work_cancel_delayable(&conn->persist_timer);
    bdc2:	f018 fa03 	bl	241cc <k_work_cancel_delayable>
    bdc6:	e7ec      	b.n	bda2 <tcp_in+0x24e>
	z_impl_k_sem_give(sem);
    bdc8:	f009 fdbe 	bl	15948 <z_impl_k_sem_give>
}
    bdcc:	e7f5      	b.n	bdba <tcp_in+0x266>
		if (FL(&fl, ==, SYN)) {
    bdce:	fa5f f388 	uxtb.w	r3, r8
    bdd2:	2b02      	cmp	r3, #2
    bdd4:	d131      	bne.n	be3a <tcp_in+0x2e6>
    bdd6:	f04f 0800 	mov.w	r8, #0
			conn->send_options.mss_found = true;
    bdda:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
			tcp_out(conn, SYN | ACK);
    bdde:	2112      	movs	r1, #18
			conn->send_options.mss_found = true;
    bde0:	f043 0301 	orr.w	r3, r3, #1
    bde4:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			conn_ack(conn, th_seq(th) + 1); /* capture peer's isn */
    bde8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    bdec:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    bdf0:	ba12      	rev	r2, r2
    bdf2:	3301      	adds	r3, #1
    bdf4:	4413      	add	r3, r2
			tcp_out(conn, SYN | ACK);
    bdf6:	4620      	mov	r0, r4
			conn_ack(conn, th_seq(th) + 1); /* capture peer's isn */
    bdf8:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, SYN | ACK);
    bdfc:	f016 fac9 	bl	22392 <tcp_out>
			conn->send_options.mss_found = false;
    be00:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
			k_work_reschedule_for_queue(&tcp_work_q,
    be04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
			conn->send_options.mss_found = false;
    be08:	f36f 0300 	bfc	r3, #0, #1
    be0c:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			conn_seq(conn, + 1);
    be10:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			k_work_reschedule_for_queue(&tcp_work_q,
    be14:	4876      	ldr	r0, [pc, #472]	; (bff0 <tcp_in+0x49c>)
			conn_seq(conn, + 1);
    be16:	3301      	adds	r3, #1
    be18:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			k_work_reschedule_for_queue(&tcp_work_q,
    be1c:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
    be20:	2300      	movs	r3, #0
    be22:	f009 ff5f 	bl	15ce4 <k_work_reschedule_for_queue>
	if (pkt) {
    be26:	2d00      	cmp	r5, #0
    be28:	f000 8459 	beq.w	c6de <tcp_in+0xb8a>
			net_pkt_unref(pkt);
    be2c:	4628      	mov	r0, r5
    be2e:	f015 fac1 	bl	213b4 <net_pkt_unref>
			next = TCP_SYN_RECEIVED;
    be32:	f04f 0903 	mov.w	r9, #3
			net_pkt_unref(pkt);
    be36:	4646      	mov	r6, r8
    be38:	e21c      	b.n	c274 <tcp_in+0x720>
			next = TCP_SYN_SENT;
    be3a:	f04f 0902 	mov.w	r9, #2
			conn->send_options.mss_found = true;
    be3e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
			tcp_out(conn, SYN);
    be42:	2102      	movs	r1, #2
			conn->send_options.mss_found = true;
    be44:	f043 0301 	orr.w	r3, r3, #1
    be48:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			tcp_out(conn, SYN);
    be4c:	4620      	mov	r0, r4
    be4e:	f016 faa0 	bl	22392 <tcp_out>
			conn->send_options.mss_found = false;
    be52:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    be56:	f36f 0300 	bfc	r3, #0, #1
    be5a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			conn_seq(conn, + 1);
    be5e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    be62:	3301      	adds	r3, #1
    be64:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
	if (pkt) {
    be68:	2d00      	cmp	r5, #0
    be6a:	f000 8203 	beq.w	c274 <tcp_in+0x720>
		if (verdict == NET_OK) {
    be6e:	2e00      	cmp	r6, #0
    be70:	f040 8200 	bne.w	c274 <tcp_in+0x720>
			net_pkt_unref(pkt);
    be74:	4628      	mov	r0, r5
    be76:	f015 fa9d 	bl	213b4 <net_pkt_unref>
	if (next) {
    be7a:	e1fb      	b.n	c274 <tcp_in+0x720>
		if (FL(&fl, &, ACK, th_ack(th) == conn->seq &&
    be7c:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    be80:	f000 83d9 	beq.w	c636 <tcp_in+0xae2>
    be84:	f8d9 3008 	ldr.w	r3, [r9, #8]
    be88:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    be8c:	ba1b      	rev	r3, r3
    be8e:	4293      	cmp	r3, r2
    be90:	f040 83d1 	bne.w	c636 <tcp_in+0xae2>
    be94:	f8d9 3004 	ldr.w	r3, [r9, #4]
    be98:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    be9c:	ba1b      	rev	r3, r3
    be9e:	4293      	cmp	r3, r2
    bea0:	f040 83c9 	bne.w	c636 <tcp_in+0xae2>
    bea4:	f018 0f10 	tst.w	r8, #16
    bea8:	f000 83c5 	beq.w	c636 <tcp_in+0xae2>
    beac:	f008 08ef 	and.w	r8, r8, #239	; 0xef
			k_work_cancel_delayable(&conn->establish_timer);
    beb0:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    beb4:	f018 f98a 	bl	241cc <k_work_cancel_delayable>
			tcp_send_timer_cancel(conn);
    beb8:	4620      	mov	r0, r4
    beba:	f7fe fe7f 	bl	abbc <tcp_send_timer_cancel>
	int ref_count = atomic_inc(&conn->ref_count) + 1;
    bebe:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    bec2:	f016 f996 	bl	221f2 <atomic_inc.isra.0>
			net_context_set_state(conn->context,
    bec6:	6862      	ldr	r2, [r4, #4]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    bec8:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
    becc:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    bed0:	f043 0304 	orr.w	r3, r3, #4
    bed4:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
			if (conn->accepted_conn) {
    bed8:	6a23      	ldr	r3, [r4, #32]
    beda:	b153      	cbz	r3, bef2 <tcp_in+0x39e>
				if (conn->accepted_conn->accept_cb) {
    bedc:	6a1e      	ldr	r6, [r3, #32]
    bede:	b136      	cbz	r6, beee <tcp_in+0x39a>
						&conn->accepted_conn->context->remote,
    bee0:	6859      	ldr	r1, [r3, #4]
					conn->accepted_conn->accept_cb(
    bee2:	2208      	movs	r2, #8
    bee4:	9100      	str	r1, [sp, #0]
    bee6:	2300      	movs	r3, #0
    bee8:	6860      	ldr	r0, [r4, #4]
    beea:	3128      	adds	r1, #40	; 0x28
    beec:	47b0      	blx	r6
				conn->accepted_conn = NULL;
    beee:	2300      	movs	r3, #0
    bef0:	6223      	str	r3, [r4, #32]
			if (len) {
    bef2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    bef4:	2e00      	cmp	r6, #0
    bef6:	f000 83df 	beq.w	c6b8 <tcp_in+0xb64>
				verdict = tcp_data_get(conn, pkt, &len);
    befa:	4629      	mov	r1, r5
    befc:	f107 0230 	add.w	r2, r7, #48	; 0x30
    bf00:	4620      	mov	r0, r4
    bf02:	f7ff fcc3 	bl	b88c <tcp_data_get>
				if (verdict == NET_OK) {
    bf06:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    bf0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    bf0c:	4606      	mov	r6, r0
				conn_ack(conn, + len);
    bf0e:	4413      	add	r3, r2
				tcp_out(conn, ACK);
    bf10:	2110      	movs	r1, #16
    bf12:	4620      	mov	r0, r4
				conn_ack(conn, + len);
    bf14:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
				tcp_out(conn, ACK);
    bf18:	f016 fa3b 	bl	22392 <tcp_out>
			next = TCP_ESTABLISHED;
    bf1c:	f04f 0904 	mov.w	r9, #4
    bf20:	e1a8      	b.n	c274 <tcp_in+0x720>
		if (FL(&fl, &, SYN | ACK, th && th_ack(th) == conn->seq)) {
    bf22:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    bf26:	f000 8386 	beq.w	c636 <tcp_in+0xae2>
    bf2a:	f1b9 0f00 	cmp.w	r9, #0
    bf2e:	f000 8382 	beq.w	c636 <tcp_in+0xae2>
    bf32:	f8d9 3008 	ldr.w	r3, [r9, #8]
    bf36:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    bf3a:	ba1b      	rev	r3, r3
    bf3c:	4293      	cmp	r3, r2
    bf3e:	f040 837a 	bne.w	c636 <tcp_in+0xae2>
    bf42:	f018 0f12 	tst.w	r8, #18
    bf46:	f000 8376 	beq.w	c636 <tcp_in+0xae2>
    bf4a:	f008 08ed 	and.w	r8, r8, #237	; 0xed
			tcp_send_timer_cancel(conn);
    bf4e:	4620      	mov	r0, r4
    bf50:	f7fe fe34 	bl	abbc <tcp_send_timer_cancel>
			conn_ack(conn, th_seq(th) + 1);
    bf54:	f8d9 2004 	ldr.w	r2, [r9, #4]
    bf58:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    bf5c:	ba12      	rev	r2, r2
    bf5e:	3301      	adds	r3, #1
			if (len) {
    bf60:	6b3e      	ldr	r6, [r7, #48]	; 0x30
			conn_ack(conn, th_seq(th) + 1);
    bf62:	4413      	add	r3, r2
    bf64:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			if (len) {
    bf68:	b176      	cbz	r6, bf88 <tcp_in+0x434>
				verdict = tcp_data_get(conn, pkt, &len);
    bf6a:	4629      	mov	r1, r5
    bf6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
    bf70:	4620      	mov	r0, r4
    bf72:	f7ff fc8b 	bl	b88c <tcp_data_get>
					pkt = NULL;
    bf76:	1e06      	subs	r6, r0, #0
    bf78:	bf08      	it	eq
    bf7a:	2500      	moveq	r5, #0
				conn_ack(conn, + len);
    bf7c:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    bf80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    bf82:	4413      	add	r3, r2
    bf84:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
	int ref_count = atomic_inc(&conn->ref_count) + 1;
    bf88:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    bf8c:	f016 f931 	bl	221f2 <atomic_inc.isra.0>
			net_context_set_state(conn->context,
    bf90:	6862      	ldr	r2, [r4, #4]
			tcp_out(conn, ACK);
    bf92:	2110      	movs	r1, #16
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    bf94:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
    bf98:	4620      	mov	r0, r4
    bf9a:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    bf9e:	f043 0304 	orr.w	r3, r3, #4
    bfa2:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
    bfa6:	f016 f9f4 	bl	22392 <tcp_out>
	if (pkt) {
    bfaa:	f04f 0904 	mov.w	r9, #4
    bfae:	2d00      	cmp	r5, #0
    bfb0:	f040 83c4 	bne.w	c73c <tcp_in+0xbe8>
		conn_state(conn, next);
    bfb4:	f884 9220 	strb.w	r9, [r4, #544]	; 0x220
			conn->in_connect = false;
    bfb8:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    bfbc:	f36f 0341 	bfc	r3, #1, #1
    bfc0:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
			if (conn->connect_cb) {
    bfc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bfc6:	b12b      	cbz	r3, bfd4 <tcp_in+0x480>
				conn->connect_cb(conn->context, 0, conn->context->user_data);
    bfc8:	6860      	ldr	r0, [r4, #4]
    bfca:	2100      	movs	r1, #0
    bfcc:	6842      	ldr	r2, [r0, #4]
    bfce:	4798      	blx	r3
				conn->connect_cb = NULL;
    bfd0:	2300      	movs	r3, #0
    bfd2:	6263      	str	r3, [r4, #36]	; 0x24
	z_impl_k_sem_give(sem);
    bfd4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    bfd8:	f009 fcb6 	bl	15948 <z_impl_k_sem_give>
}
    bfdc:	2301      	movs	r3, #1
    bfde:	60fb      	str	r3, [r7, #12]
    bfe0:	e14e      	b.n	c280 <tcp_in+0x72c>
    bfe2:	bf00      	nop
    bfe4:	00033207 	.word	0x00033207
    bfe8:	00024d48 	.word	0x00024d48
    bfec:	00033229 	.word	0x00033229
    bff0:	200024c8 	.word	0x200024c8
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
    bff4:	f1b9 0f00 	cmp.w	r9, #0
    bff8:	f000 831d 	beq.w	c636 <tcp_in+0xae2>
    bffc:	f018 03ff 	ands.w	r3, r8, #255	; 0xff
    c000:	613b      	str	r3, [r7, #16]
    c002:	d05d      	beq.n	c0c0 <tcp_in+0x56c>
    c004:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c008:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    c00c:	ba1b      	rev	r3, r3
    c00e:	4293      	cmp	r3, r2
    c010:	d156      	bne.n	c0c0 <tcp_in+0x56c>
    c012:	693b      	ldr	r3, [r7, #16]
    c014:	2b11      	cmp	r3, #17
    c016:	d11e      	bne.n	c056 <tcp_in+0x502>
    c018:	f04f 0800 	mov.w	r8, #0
			if (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0) {
    c01c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline int32_t net_tcp_seq_cmp(uint32_t seq1, uint32_t seq2)
{
	return (int32_t)(seq1 - seq2);
    c020:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    c024:	ba1b      	rev	r3, r3
    c026:	1a9a      	subs	r2, r3, r2
    c028:	4542      	cmp	r2, r8
				conn_seq(conn, + len_acked);
    c02a:	bfc8      	it	gt
    c02c:	f8c4 3224 	strgt.w	r3, [r4, #548]	; 0x224
			conn_ack(conn, + 1);
    c030:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, FIN | ACK);
    c034:	2111      	movs	r1, #17
			conn_ack(conn, + 1);
    c036:	3301      	adds	r3, #1
			tcp_out(conn, FIN | ACK);
    c038:	4620      	mov	r0, r4
			conn_ack(conn, + 1);
    c03a:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, FIN | ACK);
    c03e:	f016 f9a8 	bl	22392 <tcp_out>
	if (pkt) {
    c042:	2d00      	cmp	r5, #0
    c044:	f000 834f 	beq.w	c6e6 <tcp_in+0xb92>
			net_pkt_unref(pkt);
    c048:	4628      	mov	r0, r5
    c04a:	f015 f9b3 	bl	213b4 <net_pkt_unref>
			next = TCP_LAST_ACK;
    c04e:	f04f 0909 	mov.w	r9, #9
			net_pkt_unref(pkt);
    c052:	2600      	movs	r6, #0
    c054:	e10e      	b.n	c274 <tcp_in+0x720>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
    c056:	693b      	ldr	r3, [r7, #16]
    c058:	2b01      	cmp	r3, #1
    c05a:	d113      	bne.n	c084 <tcp_in+0x530>
    c05c:	f04f 0800 	mov.w	r8, #0
			conn_ack(conn, + 1);
    c060:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c064:	2110      	movs	r1, #16
			conn_ack(conn, + 1);
    c066:	3301      	adds	r3, #1
			tcp_out(conn, ACK);
    c068:	4620      	mov	r0, r4
			conn_ack(conn, + 1);
    c06a:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c06e:	f016 f990 	bl	22392 <tcp_out>
	if (pkt) {
    c072:	2d00      	cmp	r5, #0
    c074:	f000 833a 	beq.w	c6ec <tcp_in+0xb98>
			net_pkt_unref(pkt);
    c078:	4628      	mov	r0, r5
    c07a:	f015 f99b 	bl	213b4 <net_pkt_unref>
			next = TCP_CLOSE_WAIT;
    c07e:	f04f 0907 	mov.w	r9, #7
    c082:	e6d8      	b.n	be36 <tcp_in+0x2e2>
		} else if (th && FL(&fl, ==, (FIN | ACK | PSH),
    c084:	693b      	ldr	r3, [r7, #16]
    c086:	2b19      	cmp	r3, #25
    c088:	d11a      	bne.n	c0c0 <tcp_in+0x56c>
    c08a:	f04f 0800 	mov.w	r8, #0
			if (len) {
    c08e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    c090:	b146      	cbz	r6, c0a4 <tcp_in+0x550>
				verdict = tcp_data_get(conn, pkt, &len);
    c092:	4629      	mov	r1, r5
    c094:	4620      	mov	r0, r4
    c096:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c09a:	f7ff fbf7 	bl	b88c <tcp_data_get>
					pkt = NULL;
    c09e:	1e06      	subs	r6, r0, #0
    c0a0:	bf08      	it	eq
    c0a2:	4645      	moveq	r5, r8
			tcp_out(conn, FIN | ACK);
    c0a4:	2111      	movs	r1, #17
			conn_ack(conn, + len + 1);
    c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c0a8:	1c5a      	adds	r2, r3, #1
    c0aa:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    c0ae:	4413      	add	r3, r2
    c0b0:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
		tcp_out(conn, FIN);
    c0b4:	4620      	mov	r0, r4
    c0b6:	f016 f96c 	bl	22392 <tcp_out>
		next = TCP_LAST_ACK;
    c0ba:	f04f 0909 	mov.w	r9, #9
    c0be:	e6d3      	b.n	be68 <tcp_in+0x314>
		if (th && (net_tcp_seq_cmp(th_ack(th), conn->seq) == 0)) {
    c0c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c0c4:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    c0c8:	ba1b      	rev	r3, r3
    c0ca:	4293      	cmp	r3, r2
    c0cc:	d11d      	bne.n	c10a <tcp_in+0x5b6>
			if (conn->send_data_total > 0) {
    c0ce:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    c0d2:	b143      	cbz	r3, c0e6 <tcp_in+0x592>
				if (len == 0) {
    c0d4:	f1ba 0f00 	cmp.w	sl, #0
    c0d8:	d107      	bne.n	c0ea <tcp_in+0x596>
					conn->dup_ack_cnt = MIN(conn->dup_ack_cnt + 1,
    c0da:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    c0de:	2b03      	cmp	r3, #3
    c0e0:	bf28      	it	cs
    c0e2:	2303      	movcs	r3, #3
    c0e4:	3301      	adds	r3, #1
				conn->dup_ack_cnt = 0;
    c0e6:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
			if ((conn->data_mode == TCP_DATA_MODE_SEND) &&
    c0ea:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
    c0ee:	b963      	cbnz	r3, c10a <tcp_in+0x5b6>
    c0f0:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
    c0f4:	2a03      	cmp	r2, #3
    c0f6:	d108      	bne.n	c10a <tcp_in+0x5b6>
				int temp_unacked_len = conn->unacked_len;
    c0f8:	f8d4 b218 	ldr.w	fp, [r4, #536]	; 0x218
				(void)tcp_send_data(conn);
    c0fc:	4620      	mov	r0, r4
				conn->unacked_len = 0;
    c0fe:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				(void)tcp_send_data(conn);
    c102:	f7ff f9ed 	bl	b4e0 <tcp_send_data>
				conn->unacked_len = temp_unacked_len;
    c106:	f8c4 b218 	str.w	fp, [r4, #536]	; 0x218
		if (th && (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0)) {
    c10a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c10e:	f8d4 b224 	ldr.w	fp, [r4, #548]	; 0x224
    c112:	ba1b      	rev	r3, r3
    c114:	eba3 010b 	sub.w	r1, r3, fp
    c118:	2900      	cmp	r1, #0
    c11a:	f340 80f9 	ble.w	c310 <tcp_in+0x7bc>
			if ((conn->send_data_total < len_acked) ||
    c11e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
    c122:	428a      	cmp	r2, r1
    c124:	d243      	bcs.n	c1ae <tcp_in+0x65a>
				NET_ERR("conn: %p, Invalid len_acked=%u "
    c126:	46e8      	mov	r8, sp
    c128:	b08a      	sub	sp, #40	; 0x28
    c12a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    c12e:	aa02      	add	r2, sp, #8
    c130:	e9c2 1307 	strd	r1, r3, [r2, #28]
    c134:	2305      	movs	r3, #5
    c136:	48c3      	ldr	r0, [pc, #780]	; (c444 <tcp_in+0x8f0>)
    c138:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    c13c:	e9c2 0405 	strd	r0, r4, [r2, #20]
    c140:	f842 3f10 	str.w	r3, [r2, #16]!
    c144:	48c0      	ldr	r0, [pc, #768]	; (c448 <tcp_in+0x8f4>)
    c146:	f015 fff7 	bl	22138 <z_log_msg_static_create.constprop.0>
				tcp_out(conn, RST);
    c14a:	2104      	movs	r1, #4
    c14c:	46c5      	mov	sp, r8
    c14e:	4620      	mov	r0, r4
    c150:	f016 f91f 	bl	22392 <tcp_out>
				conn_state(conn, TCP_CLOSED);
    c154:	230b      	movs	r3, #11
    c156:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
	if (pkt) {
    c15a:	2d00      	cmp	r5, #0
    c15c:	f040 82e5 	bne.w	c72a <tcp_in+0xbd6>
				close_status = -ECONNRESET;
    c160:	f06f 0367 	mvn.w	r3, #103	; 0x67
	if (pkt) {
    c164:	46a8      	mov	r8, r5
				close_status = -ECONNRESET;
    c166:	617b      	str	r3, [r7, #20]
	if (conn->context) {
    c168:	6865      	ldr	r5, [r4, #4]
    c16a:	b105      	cbz	r5, c16e <tcp_in+0x61a>
		conn_handler = (struct net_conn *)conn->context->conn_handler;
    c16c:	6b2d      	ldr	r5, [r5, #48]	; 0x30
	k_mutex_unlock(&conn->lock);
    c16e:	68b8      	ldr	r0, [r7, #8]
	recv_user_data = conn->recv_user_data;
    c170:	f8d4 9014 	ldr.w	r9, [r4, #20]
	k_mutex_unlock(&conn->lock);
    c174:	f016 f822 	bl	221bc <k_mutex_unlock.isra.0>
	       (recv_pkt = k_fifo_get(recv_data_fifo, K_NO_WAIT)) != NULL) {
    c178:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
	while (conn_handler && atomic_get(&conn->ref_count) > 0 &&
    c17c:	b175      	cbz	r5, c19c <tcp_in+0x648>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c17e:	f504 7a07 	add.w	sl, r4, #540	; 0x21c
    c182:	e8da 3faf 	lda	r3, [sl]
    c186:	2b00      	cmp	r3, #0
    c188:	dd08      	ble.n	c19c <tcp_in+0x648>
	return z_impl_k_queue_get(queue, timeout);
    c18a:	2200      	movs	r2, #0
    c18c:	2300      	movs	r3, #0
    c18e:	4658      	mov	r0, fp
    c190:	f009 fba6 	bl	158e0 <z_impl_k_queue_get>
    c194:	4601      	mov	r1, r0
    c196:	2800      	cmp	r0, #0
    c198:	f040 82b7 	bne.w	c70a <tcp_in+0xbb6>
	if (do_close) {
    c19c:	f1b8 0f00 	cmp.w	r8, #0
    c1a0:	f43f ad84 	beq.w	bcac <tcp_in+0x158>
		tcp_conn_close(conn, close_status);
    c1a4:	4620      	mov	r0, r4
    c1a6:	6979      	ldr	r1, [r7, #20]
    c1a8:	f016 f83d 	bl	22226 <tcp_conn_close.isra.0>
    c1ac:	e57e      	b.n	bcac <tcp_in+0x158>
					(tcp_pkt_pull(conn->send_data,
    c1ae:	68a0      	ldr	r0, [r4, #8]
    c1b0:	e9c7 3100 	strd	r3, r1, [r7]
    c1b4:	f015 ffcd 	bl	22152 <tcp_pkt_pull>
			if ((conn->send_data_total < len_acked) ||
    c1b8:	2800      	cmp	r0, #0
    c1ba:	6879      	ldr	r1, [r7, #4]
    c1bc:	dbb3      	blt.n	c126 <tcp_in+0x5d2>
			conn->dup_ack_cnt = 0;
    c1be:	2200      	movs	r2, #0
    c1c0:	683b      	ldr	r3, [r7, #0]
			conn->send_data_total -= len_acked;
    c1c2:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    c1c6:	ebab 0b03 	sub.w	fp, fp, r3
			if (conn->unacked_len < len_acked) {
    c1ca:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
			conn->dup_ack_cnt = 0;
    c1ce:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
			if (conn->unacked_len < len_acked) {
    c1d2:	428b      	cmp	r3, r1
				conn->unacked_len -= len_acked;
    c1d4:	bf28      	it	cs
    c1d6:	eb03 020b 	addcs.w	r2, r3, fp
	bool window_full = (conn->send_data_total >= conn->send_win);
    c1da:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
			conn->send_data_total -= len_acked;
    c1de:	4458      	add	r0, fp
			if (!tcp_window_full(conn)) {
    c1e0:	4298      	cmp	r0, r3
			conn->send_data_total -= len_acked;
    c1e2:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				conn->unacked_len -= len_acked;
    c1e6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
			if (!tcp_window_full(conn)) {
    c1ea:	d205      	bcs.n	c1f8 <tcp_in+0x6a4>
    c1ec:	6079      	str	r1, [r7, #4]
	z_impl_k_sem_give(sem);
    c1ee:	f104 0054 	add.w	r0, r4, #84	; 0x54
    c1f2:	f009 fba9 	bl	15948 <z_impl_k_sem_give>
    c1f6:	6879      	ldr	r1, [r7, #4]
			conn_seq(conn, + len_acked);
    c1f8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
	return z_timeout_remaining(&dwork->timeout);
    c1fc:	f504 7080 	add.w	r0, r4, #256	; 0x100
    c200:	440b      	add	r3, r1
    c202:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    c206:	f018 f937 	bl	24478 <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(
    c20a:	4308      	orrs	r0, r1
    c20c:	f04f 0300 	mov.w	r3, #0
    c210:	f104 0bf0 	add.w	fp, r4, #240	; 0xf0
    c214:	f000 820f 	beq.w	c636 <tcp_in+0xae2>
			conn->send_data_retries = 0;
    c218:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
			k_work_cancel_delayable(&conn->send_data_timer);
    c21c:	4658      	mov	r0, fp
    c21e:	f017 ffd5 	bl	241cc <k_work_cancel_delayable>
			if (conn->data_mode == TCP_DATA_MODE_RESEND) {
    c222:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
    c226:	2300      	movs	r3, #0
    c228:	2a01      	cmp	r2, #1
    c22a:	d104      	bne.n	c236 <tcp_in+0x6e2>
				tcp_derive_rto(conn);
    c22c:	4620      	mov	r0, r4
				conn->unacked_len = 0;
    c22e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				tcp_derive_rto(conn);
    c232:	f015 ffe6 	bl	22202 <tcp_derive_rto>
			conn->data_mode = TCP_DATA_MODE_SEND;
    c236:	2300      	movs	r3, #0
    c238:	f884 3221 	strb.w	r3, [r4, #545]	; 0x221
			if (conn->in_close && conn->send_data_total == 0) {
    c23c:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
				tcp_send_timer_cancel(conn);
    c240:	4620      	mov	r0, r4
			if (conn->in_close && conn->send_data_total == 0) {
    c242:	075a      	lsls	r2, r3, #29
    c244:	d540      	bpl.n	c2c8 <tcp_in+0x774>
    c246:	f8d4 6210 	ldr.w	r6, [r4, #528]	; 0x210
    c24a:	2e00      	cmp	r6, #0
    c24c:	d13c      	bne.n	c2c8 <tcp_in+0x774>
				tcp_send_timer_cancel(conn);
    c24e:	f7fe fcb5 	bl	abbc <tcp_send_timer_cancel>
				tcp_out(conn, FIN | ACK);
    c252:	2111      	movs	r1, #17
    c254:	4620      	mov	r0, r4
    c256:	f016 f89c 	bl	22392 <tcp_out>
				conn_seq(conn, + 1);
    c25a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    c25e:	3301      	adds	r3, #1
    c260:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
	if (pkt) {
    c264:	2d00      	cmp	r5, #0
    c266:	f000 8244 	beq.w	c6f2 <tcp_in+0xb9e>
			net_pkt_unref(pkt);
    c26a:	4628      	mov	r0, r5
    c26c:	f015 f8a2 	bl	213b4 <net_pkt_unref>
				next = TCP_FIN_WAIT_1;
    c270:	f04f 0905 	mov.w	r9, #5
		if (connection_ok) {
    c274:	68fb      	ldr	r3, [r7, #12]
		conn_state(conn, next);
    c276:	f884 9220 	strb.w	r9, [r4, #544]	; 0x220
		if (connection_ok) {
    c27a:	2b00      	cmp	r3, #0
    c27c:	f47f ae9c 	bne.w	bfb8 <tcp_in+0x464>
	len = pkt ? tcp_data_len(pkt) : 0;
    c280:	2500      	movs	r5, #0
    c282:	46a9      	mov	r9, r5
    c284:	46aa      	mov	sl, r5
	switch (conn->state) {
    c286:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	len = pkt ? tcp_data_len(pkt) : 0;
    c28a:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
	switch (conn->state) {
    c28e:	3b01      	subs	r3, #1
    c290:	2b0a      	cmp	r3, #10
    c292:	f200 81d0 	bhi.w	c636 <tcp_in+0xae2>
    c296:	a201      	add	r2, pc, #4	; (adr r2, c29c <tcp_in+0x748>)
    c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c29c:	0000bdcf 	.word	0x0000bdcf
    c2a0:	0000bf23 	.word	0x0000bf23
    c2a4:	0000be7d 	.word	0x0000be7d
    c2a8:	0000bff5 	.word	0x0000bff5
    c2ac:	0000c537 	.word	0x0000c537
    c2b0:	0000c5df 	.word	0x0000c5df
    c2b4:	0000c4ed 	.word	0x0000c4ed
    c2b8:	0000c63f 	.word	0x0000c63f
    c2bc:	0000c4f1 	.word	0x0000c4f1
    c2c0:	0000c673 	.word	0x0000c673
    c2c4:	0000c6c3 	.word	0x0000c6c3
	if (conn->data_mode == TCP_DATA_MODE_RESEND) {
    c2c8:	f7ff fb5e 	bl	b988 <tcp_send_queued_data.part.0>
			if (ret < 0 && ret != -ENOBUFS) {
    c2cc:	1e06      	subs	r6, r0, #0
    c2ce:	da13      	bge.n	c2f8 <tcp_in+0x7a4>
    c2d0:	f116 0f69 	cmn.w	r6, #105	; 0x69
    c2d4:	d010      	beq.n	c2f8 <tcp_in+0x7a4>
				tcp_out(conn, RST);
    c2d6:	2104      	movs	r1, #4
    c2d8:	4620      	mov	r0, r4
    c2da:	f016 f85a 	bl	22392 <tcp_out>
				conn_state(conn, TCP_CLOSED);
    c2de:	230b      	movs	r3, #11
    c2e0:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
	if (pkt) {
    c2e4:	b925      	cbnz	r5, c2f0 <tcp_in+0x79c>
    c2e6:	617e      	str	r6, [r7, #20]
			next = TCP_ESTABLISHED;
    c2e8:	f04f 0800 	mov.w	r8, #0
				verdict = NET_OK;
    c2ec:	4646      	mov	r6, r8
    c2ee:	e73b      	b.n	c168 <tcp_in+0x614>
			net_pkt_unref(pkt);
    c2f0:	4628      	mov	r0, r5
    c2f2:	f015 f85f 	bl	213b4 <net_pkt_unref>
	if (next) {
    c2f6:	e7f6      	b.n	c2e6 <tcp_in+0x792>
	bool window_full = (conn->send_data_total >= conn->send_win);
    c2f8:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
			if (tcp_window_full(conn)) {
    c2fc:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    c300:	429a      	cmp	r2, r3
    c302:	d805      	bhi.n	c310 <tcp_in+0x7bc>
	return z_impl_k_sem_take(sem, timeout);
    c304:	2200      	movs	r2, #0
    c306:	2300      	movs	r3, #0
    c308:	f104 0054 	add.w	r0, r4, #84	; 0x54
    c30c:	f009 fb42 	bl	15994 <z_impl_k_sem_take>
			if (th_seq(th) == conn->ack) {
    c310:	f8d9 8004 	ldr.w	r8, [r9, #4]
    c314:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    c318:	fa98 f888 	rev.w	r8, r8
    c31c:	4598      	cmp	r8, r3
    c31e:	d12c      	bne.n	c37a <tcp_in+0x826>
				if (len > 0) {
    c320:	f1ba 0f00 	cmp.w	sl, #0
    c324:	d031      	beq.n	c38a <tcp_in+0x836>
	if (*len == 0) {
    c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c328:	2b00      	cmp	r3, #0
    c32a:	f000 81d6 	beq.w	c6da <tcp_in+0xb86>
	ret = tcp_data_get(conn, pkt, len);
    c32e:	4629      	mov	r1, r5
    c330:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c334:	4620      	mov	r0, r4
    c336:	f7ff faa9 	bl	b88c <tcp_data_get>
	conn_ack(conn, *len);
    c33a:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    c33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	ret = tcp_data_get(conn, pkt, len);
    c340:	4606      	mov	r6, r0
	conn_ack(conn, *len);
    c342:	4413      	add	r3, r2
	if (tcp_short_window(conn)) {
    c344:	4620      	mov	r0, r4
	conn_ack(conn, *len);
    c346:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
	if (tcp_short_window(conn)) {
    c34a:	f016 f83c 	bl	223c6 <tcp_short_window>
		k_work_schedule_for_queue(&tcp_work_q, &conn->ack_timer,
    c34e:	f504 71c0 	add.w	r1, r4, #384	; 0x180
	if (tcp_short_window(conn)) {
    c352:	b150      	cbz	r0, c36a <tcp_in+0x816>
		k_work_schedule_for_queue(&tcp_work_q, &conn->ack_timer,
    c354:	f640 42cd 	movw	r2, #3277	; 0xccd
    c358:	2300      	movs	r3, #0
    c35a:	483c      	ldr	r0, [pc, #240]	; (c44c <tcp_in+0x8f8>)
    c35c:	f009 fc92 	bl	15c84 <k_work_schedule_for_queue>
					if (verdict == NET_OK) {
    c360:	2e00      	cmp	r6, #0
    c362:	d0c1      	beq.n	c2e8 <tcp_in+0x794>
		break;
    c364:	f04f 0800 	mov.w	r8, #0
    c368:	e6fe      	b.n	c168 <tcp_in+0x614>
		k_work_cancel_delayable(&conn->ack_timer);
    c36a:	4608      	mov	r0, r1
    c36c:	f017 ff2e 	bl	241cc <k_work_cancel_delayable>
		tcp_out(conn, ACK);
    c370:	2110      	movs	r1, #16
    c372:	4620      	mov	r0, r4
    c374:	f016 f80d 	bl	22392 <tcp_out>
    c378:	e7f2      	b.n	c360 <tcp_in+0x80c>
    c37a:	eba3 0308 	sub.w	r3, r3, r8
			} else if (net_tcp_seq_greater(conn->ack, th_seq(th))) {
    c37e:	2b00      	cmp	r3, #0
    c380:	dd05      	ble.n	c38e <tcp_in+0x83a>
					tcp_out(conn, ACK);
    c382:	2110      	movs	r1, #16
    c384:	4620      	mov	r0, r4
    c386:	f016 f804 	bl	22392 <tcp_out>
	if (pkt) {
    c38a:	b995      	cbnz	r5, c3b2 <tcp_in+0x85e>
    c38c:	e7ac      	b.n	c2e8 <tcp_in+0x794>
	if (data_len == 0) {
    c38e:	f1ba 0f00 	cmp.w	sl, #0
    c392:	f000 80a3 	beq.w	c4dc <tcp_in+0x988>
	headers_len = net_pkt_get_len(pkt) - data_len;
    c396:	68a8      	ldr	r0, [r5, #8]
    c398:	f015 fed3 	bl	22142 <net_pkt_get_len.isra.0>
	if (tcp_pkt_pull(pkt, headers_len) < 0) {
    c39c:	eba0 010a 	sub.w	r1, r0, sl
    c3a0:	4628      	mov	r0, r5
    c3a2:	f015 fed6 	bl	22152 <tcp_pkt_pull>
    c3a6:	2800      	cmp	r0, #0
    c3a8:	da07      	bge.n	c3ba <tcp_in+0x866>
					tcp_out(conn, ACK);
    c3aa:	2110      	movs	r1, #16
    c3ac:	4620      	mov	r0, r4
    c3ae:	f015 fff0 	bl	22392 <tcp_out>
			net_pkt_unref(pkt);
    c3b2:	4628      	mov	r0, r5
    c3b4:	f014 fffe 	bl	213b4 <net_pkt_unref>
	if (next) {
    c3b8:	e796      	b.n	c2e8 <tcp_in+0x794>
	tmp = pkt->buffer;
    c3ba:	68ab      	ldr	r3, [r5, #8]
	seq += tmp->len;
    c3bc:	8a19      	ldrh	r1, [r3, #16]
	tmp = tmp->frags;
    c3be:	685e      	ldr	r6, [r3, #4]
	*(uint32_t *)net_buf_user_data(buf) = seq;
    c3c0:	f8c3 8018 	str.w	r8, [r3, #24]
	seq += tmp->len;
    c3c4:	4441      	add	r1, r8
	while (tmp) {
    c3c6:	bb26      	cbnz	r6, c412 <tcp_in+0x8be>
	if (!net_pkt_is_empty(conn->queue_recv_data)) {
    c3c8:	68e0      	ldr	r0, [r4, #12]
    c3ca:	f8d0 9008 	ldr.w	r9, [r0, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
    c3ce:	f1b9 0f00 	cmp.w	r9, #0
    c3d2:	d023      	beq.n	c41c <tcp_in+0x8c8>
    c3d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
    c3d8:	b303      	cbz	r3, c41c <tcp_in+0x8c8>
    c3da:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    c3de:	b1eb      	cbz	r3, c41c <tcp_in+0x8c8>
		end_offset = seq - pending_seq;
    c3e0:	f8d9 3018 	ldr.w	r3, [r9, #24]
		pending_len = net_pkt_get_len(conn->queue_recv_data);
    c3e4:	4648      	mov	r0, r9
		end_offset = seq - pending_seq;
    c3e6:	1ac9      	subs	r1, r1, r3
		pending_len = net_pkt_get_len(conn->queue_recv_data);
    c3e8:	f015 feab 	bl	22142 <net_pkt_get_len.isra.0>
		if (end_offset < pending_len) {
    c3ec:	4281      	cmp	r1, r0
    c3ee:	d32f      	bcc.n	c450 <tcp_in+0x8fc>
			last = net_buf_frag_last(conn->queue_recv_data->buffer);
    c3f0:	4648      	mov	r0, r9
    c3f2:	f013 fe2e 	bl	20052 <net_buf_frag_last>
			start_offset = pending_seq - seq_start;
    c3f6:	6983      	ldr	r3, [r0, #24]
			end_offset = (pending_seq + last->len) - seq_start;
    c3f8:	8a01      	ldrh	r1, [r0, #16]
			start_offset = pending_seq - seq_start;
    c3fa:	eba3 0308 	sub.w	r3, r3, r8
			if ((start_offset < len) && (end_offset <= len)) {
    c3fe:	459a      	cmp	sl, r3
			end_offset = (pending_seq + last->len) - seq_start;
    c400:	4419      	add	r1, r3
			if ((start_offset < len) && (end_offset <= len)) {
    c402:	d953      	bls.n	c4ac <tcp_in+0x958>
    c404:	458a      	cmp	sl, r1
    c406:	d3d0      	bcc.n	c3aa <tcp_in+0x856>
				net_buf_unref(conn->queue_recv_data->buffer);
    c408:	68e3      	ldr	r3, [r4, #12]
    c40a:	6898      	ldr	r0, [r3, #8]
    c40c:	f7fb f82a 	bl	7464 <net_buf_unref>
    c410:	e029      	b.n	c466 <tcp_in+0x912>
		seq += tmp->len;
    c412:	8a33      	ldrh	r3, [r6, #16]
	*(uint32_t *)net_buf_user_data(buf) = seq;
    c414:	61b1      	str	r1, [r6, #24]
		tmp = tmp->frags;
    c416:	6876      	ldr	r6, [r6, #4]
		seq += tmp->len;
    c418:	4419      	add	r1, r3
		tmp = tmp->frags;
    c41a:	e7d4      	b.n	c3c6 <tcp_in+0x872>
		net_pkt_append_buffer(conn->queue_recv_data, pkt->buffer);
    c41c:	68a9      	ldr	r1, [r5, #8]
    c41e:	f015 f874 	bl	2150a <net_pkt_append_buffer>
		pkt->buffer = NULL;
    c422:	2300      	movs	r3, #0
		if (!k_work_delayable_is_pending(&conn->recv_queue_timer)) {
    c424:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
	return k_work_delayable_busy_get(dwork) != 0;
    c428:	4630      	mov	r0, r6
		pkt->buffer = NULL;
    c42a:	60ab      	str	r3, [r5, #8]
    c42c:	f017 fecc 	bl	241c8 <k_work_delayable_busy_get>
		if (!k_work_delayable_is_pending(&conn->recv_queue_timer)) {
    c430:	2800      	cmp	r0, #0
    c432:	d1ba      	bne.n	c3aa <tcp_in+0x856>
			k_work_reschedule_for_queue(
    c434:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c438:	2300      	movs	r3, #0
    c43a:	4631      	mov	r1, r6
    c43c:	4803      	ldr	r0, [pc, #12]	; (c44c <tcp_in+0x8f8>)
    c43e:	f009 fc51 	bl	15ce4 <k_work_reschedule_for_queue>
    c442:	e7b2      	b.n	c3aa <tcp_in+0x856>
    c444:	0003323d 	.word	0x0003323d
    c448:	00024d48 	.word	0x00024d48
    c44c:	200024c8 	.word	0x200024c8
			if (end_offset < len) {
    c450:	458a      	cmp	sl, r1
    c452:	d9aa      	bls.n	c3aa <tcp_in+0x856>
				if (end_offset) {
    c454:	b111      	cbz	r1, c45c <tcp_in+0x908>
					net_pkt_remove_tail(pkt, end_offset);
    c456:	4628      	mov	r0, r5
    c458:	f015 f822 	bl	214a0 <net_pkt_remove_tail>
				net_buf_frag_add(pkt->buffer,
    c45c:	68e3      	ldr	r3, [r4, #12]
    c45e:	68a8      	ldr	r0, [r5, #8]
    c460:	6899      	ldr	r1, [r3, #8]
    c462:	f013 fe07 	bl	20074 <net_buf_frag_add>
				conn->queue_recv_data->buffer = pkt->buffer;
    c466:	68e3      	ldr	r3, [r4, #12]
    c468:	68aa      	ldr	r2, [r5, #8]
    c46a:	609a      	str	r2, [r3, #8]
	bool result = true;
    c46c:	f04f 0801 	mov.w	r8, #1
	uint32_t next_seq = 0;
    c470:	2200      	movs	r2, #0
			if (check_seq_list(conn->queue_recv_data->buffer) == false) {
    c472:	68e3      	ldr	r3, [r4, #12]
    c474:	689b      	ldr	r3, [r3, #8]
	while (tmp) {
    c476:	bb33      	cbnz	r3, c4c6 <tcp_in+0x972>
			if (check_seq_list(conn->queue_recv_data->buffer) == false) {
    c478:	f1b8 0f00 	cmp.w	r8, #0
    c47c:	d1d1      	bne.n	c422 <tcp_in+0x8ce>
				NET_ERR("Incorrect order in out of order sequence for conn %p",
    c47e:	466e      	mov	r6, sp
    c480:	b088      	sub	sp, #32
    c482:	aa02      	add	r2, sp, #8
    c484:	4baf      	ldr	r3, [pc, #700]	; (c744 <tcp_in+0xbf0>)
    c486:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c48a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c48e:	2303      	movs	r3, #3
    c490:	48ad      	ldr	r0, [pc, #692]	; (c748 <tcp_in+0xbf4>)
    c492:	f842 3f10 	str.w	r3, [r2, #16]!
    c496:	f015 fe4f 	bl	22138 <z_log_msg_static_create.constprop.0>
				net_buf_unref(conn->queue_recv_data->buffer);
    c49a:	68e3      	ldr	r3, [r4, #12]
    c49c:	46b5      	mov	sp, r6
    c49e:	6898      	ldr	r0, [r3, #8]
    c4a0:	f7fa ffe0 	bl	7464 <net_buf_unref>
				conn->queue_recv_data->buffer = NULL;
    c4a4:	68e3      	ldr	r3, [r4, #12]
    c4a6:	f8c3 8008 	str.w	r8, [r3, #8]
    c4aa:	e7ba      	b.n	c422 <tcp_in+0x8ce>
				if (end_offset < len) {
    c4ac:	458a      	cmp	sl, r1
    c4ae:	f67f af7c 	bls.w	c3aa <tcp_in+0x856>
					if (end_offset) {
    c4b2:	b111      	cbz	r1, c4ba <tcp_in+0x966>
						net_pkt_remove_tail(conn->queue_recv_data,
    c4b4:	68e0      	ldr	r0, [r4, #12]
    c4b6:	f014 fff3 	bl	214a0 <net_pkt_remove_tail>
					net_buf_frag_add(conn->queue_recv_data->buffer,
    c4ba:	68e3      	ldr	r3, [r4, #12]
    c4bc:	68a9      	ldr	r1, [r5, #8]
    c4be:	6898      	ldr	r0, [r3, #8]
    c4c0:	f013 fdd8 	bl	20074 <net_buf_frag_add>
		if (inserted) {
    c4c4:	e7d2      	b.n	c46c <tcp_in+0x918>
	return *(uint32_t *)net_buf_user_data(buf);
    c4c6:	6999      	ldr	r1, [r3, #24]
		if (last != NULL) {
    c4c8:	b11e      	cbz	r6, c4d2 <tcp_in+0x97e>
				result = false;
    c4ca:	4291      	cmp	r1, r2
    c4cc:	bf18      	it	ne
    c4ce:	f04f 0800 	movne.w	r8, #0
		next_seq = seq + tmp->len;
    c4d2:	8a1a      	ldrh	r2, [r3, #16]
		tmp = tmp->frags;
    c4d4:	461e      	mov	r6, r3
		next_seq = seq + tmp->len;
    c4d6:	440a      	add	r2, r1
		tmp = tmp->frags;
    c4d8:	685b      	ldr	r3, [r3, #4]
    c4da:	e7cc      	b.n	c476 <tcp_in+0x922>
				if ((len > 0) || FL(&fl, &, FIN)) {
    c4dc:	693b      	ldr	r3, [r7, #16]
    c4de:	2b00      	cmp	r3, #0
    c4e0:	f43f af53 	beq.w	c38a <tcp_in+0x836>
    c4e4:	07db      	lsls	r3, r3, #31
    c4e6:	f57f af50 	bpl.w	c38a <tcp_in+0x836>
    c4ea:	e74a      	b.n	c382 <tcp_in+0x82e>
		tcp_out(conn, FIN);
    c4ec:	2101      	movs	r1, #1
    c4ee:	e5e1      	b.n	c0b4 <tcp_in+0x560>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
    c4f0:	f1b9 0f00 	cmp.w	r9, #0
    c4f4:	f000 809f 	beq.w	c636 <tcp_in+0xae2>
    c4f8:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    c4fc:	f000 809b 	beq.w	c636 <tcp_in+0xae2>
    c500:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c504:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    c508:	ba1b      	rev	r3, r3
    c50a:	4293      	cmp	r3, r2
    c50c:	f040 8093 	bne.w	c636 <tcp_in+0xae2>
    c510:	f1b8 0f10 	cmp.w	r8, #16
    c514:	f040 808f 	bne.w	c636 <tcp_in+0xae2>
    c518:	f04f 0800 	mov.w	r8, #0
			tcp_send_timer_cancel(conn);
    c51c:	4620      	mov	r0, r4
    c51e:	f7fe fb4d 	bl	abbc <tcp_send_timer_cancel>
	if (pkt) {
    c522:	b925      	cbnz	r5, c52e <tcp_in+0x9da>
			verdict = NET_OK;
    c524:	2600      	movs	r6, #0
			next = TCP_CLOSED;
    c526:	f04f 090b 	mov.w	r9, #11
			close_status = 0;
    c52a:	617e      	str	r6, [r7, #20]
    c52c:	e6a2      	b.n	c274 <tcp_in+0x720>
			net_pkt_unref(pkt);
    c52e:	4628      	mov	r0, r5
    c530:	f014 ff40 	bl	213b4 <net_pkt_unref>
	if (next) {
    c534:	e7f6      	b.n	c524 <tcp_in+0x9d0>
		conn_ack(conn, + len);
    c536:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    c53a:	4453      	add	r3, sl
    c53c:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
    c540:	f1b9 0f00 	cmp.w	r9, #0
    c544:	d077      	beq.n	c636 <tcp_in+0xae2>
    c546:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    c54a:	d074      	beq.n	c636 <tcp_in+0xae2>
    c54c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c550:	ba12      	rev	r2, r2
    c552:	4293      	cmp	r3, r2
    c554:	d16f      	bne.n	c636 <tcp_in+0xae2>
    c556:	f1b8 0f11 	cmp.w	r8, #17
    c55a:	d115      	bne.n	c588 <tcp_in+0xa34>
    c55c:	f04f 0800 	mov.w	r8, #0
			tcp_send_timer_cancel(conn);
    c560:	4620      	mov	r0, r4
    c562:	f7fe fb2b 	bl	abbc <tcp_send_timer_cancel>
			conn_ack(conn, + 1);
    c566:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c56a:	2110      	movs	r1, #16
			conn_ack(conn, + 1);
    c56c:	3301      	adds	r3, #1
			tcp_out(conn, ACK);
    c56e:	4620      	mov	r0, r4
			conn_ack(conn, + 1);
    c570:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c574:	f015 ff0d 	bl	22392 <tcp_out>
	if (pkt) {
    c578:	2d00      	cmp	r5, #0
    c57a:	d053      	beq.n	c624 <tcp_in+0xad0>
			net_pkt_unref(pkt);
    c57c:	4628      	mov	r0, r5
    c57e:	f014 ff19 	bl	213b4 <net_pkt_unref>
			next = TCP_TIME_WAIT;
    c582:	f04f 090a 	mov.w	r9, #10
    c586:	e456      	b.n	be36 <tcp_in+0x2e2>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
    c588:	f1b8 0f01 	cmp.w	r8, #1
    c58c:	d116      	bne.n	c5bc <tcp_in+0xa68>
    c58e:	f04f 0800 	mov.w	r8, #0
			tcp_send_timer_cancel(conn);
    c592:	4620      	mov	r0, r4
    c594:	f7fe fb12 	bl	abbc <tcp_send_timer_cancel>
			conn_ack(conn, + 1);
    c598:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c59c:	2110      	movs	r1, #16
			conn_ack(conn, + 1);
    c59e:	3301      	adds	r3, #1
			tcp_out(conn, ACK);
    c5a0:	4620      	mov	r0, r4
			conn_ack(conn, + 1);
    c5a2:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c5a6:	f015 fef4 	bl	22392 <tcp_out>
	if (pkt) {
    c5aa:	2d00      	cmp	r5, #0
    c5ac:	f000 80a4 	beq.w	c6f8 <tcp_in+0xba4>
			net_pkt_unref(pkt);
    c5b0:	4628      	mov	r0, r5
    c5b2:	f014 feff 	bl	213b4 <net_pkt_unref>
			next = TCP_CLOSING;
    c5b6:	f04f 0908 	mov.w	r9, #8
    c5ba:	e43c      	b.n	be36 <tcp_in+0x2e2>
		} else if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
    c5bc:	f1b8 0f10 	cmp.w	r8, #16
    c5c0:	d139      	bne.n	c636 <tcp_in+0xae2>
    c5c2:	f04f 0800 	mov.w	r8, #0
			tcp_send_timer_cancel(conn);
    c5c6:	4620      	mov	r0, r4
    c5c8:	f7fe faf8 	bl	abbc <tcp_send_timer_cancel>
	if (pkt) {
    c5cc:	2d00      	cmp	r5, #0
    c5ce:	f000 8096 	beq.w	c6fe <tcp_in+0xbaa>
			net_pkt_unref(pkt);
    c5d2:	4628      	mov	r0, r5
    c5d4:	f014 feee 	bl	213b4 <net_pkt_unref>
			next = TCP_FIN_WAIT_2;
    c5d8:	f04f 0906 	mov.w	r9, #6
    c5dc:	e42b      	b.n	be36 <tcp_in+0x2e2>
		if (th && (FL(&fl, ==, FIN, th_seq(th) == conn->ack) ||
    c5de:	f1b9 0f00 	cmp.w	r9, #0
    c5e2:	d028      	beq.n	c636 <tcp_in+0xae2>
    c5e4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    c5e8:	d025      	beq.n	c636 <tcp_in+0xae2>
    c5ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c5ee:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    c5f2:	ba1b      	rev	r3, r3
    c5f4:	4293      	cmp	r3, r2
    c5f6:	d11e      	bne.n	c636 <tcp_in+0xae2>
    c5f8:	f1b8 0f01 	cmp.w	r8, #1
    c5fc:	d115      	bne.n	c62a <tcp_in+0xad6>
			   FL(&fl, ==, FIN | PSH | ACK,
    c5fe:	f04f 0800 	mov.w	r8, #0
			k_work_cancel_delayable(&conn->fin_timer);
    c602:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    c606:	f017 fde1 	bl	241cc <k_work_cancel_delayable>
			conn_ack(conn, + 1);
    c60a:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c60e:	2110      	movs	r1, #16
			conn_ack(conn, + 1);
    c610:	3301      	adds	r3, #1
			tcp_out(conn, ACK);
    c612:	4620      	mov	r0, r4
			conn_ack(conn, + 1);
    c614:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
    c618:	f015 febb 	bl	22392 <tcp_out>
	if (pkt) {
    c61c:	b335      	cbz	r5, c66c <tcp_in+0xb18>
			net_pkt_unref(pkt);
    c61e:	4628      	mov	r0, r5
    c620:	f014 fec8 	bl	213b4 <net_pkt_unref>
			next = TCP_TIME_WAIT;
    c624:	f04f 090a 	mov.w	r9, #10
    c628:	e513      	b.n	c052 <tcp_in+0x4fe>
			   FL(&fl, ==, FIN | ACK, th_seq(th) == conn->ack) ||
    c62a:	f1b8 0f11 	cmp.w	r8, #17
    c62e:	d0e6      	beq.n	c5fe <tcp_in+0xaaa>
			   FL(&fl, ==, FIN | PSH | ACK,
    c630:	f1b8 0f19 	cmp.w	r8, #25
    c634:	d0e3      	beq.n	c5fe <tcp_in+0xaaa>
	if (pkt) {
    c636:	2d00      	cmp	r5, #0
    c638:	d17d      	bne.n	c736 <tcp_in+0xbe2>
    c63a:	46a8      	mov	r8, r5
    c63c:	e594      	b.n	c168 <tcp_in+0x614>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
    c63e:	f1b9 0f00 	cmp.w	r9, #0
    c642:	d0f8      	beq.n	c636 <tcp_in+0xae2>
    c644:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    c648:	d0f5      	beq.n	c636 <tcp_in+0xae2>
    c64a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c64e:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    c652:	ba1b      	rev	r3, r3
    c654:	4293      	cmp	r3, r2
    c656:	d1ee      	bne.n	c636 <tcp_in+0xae2>
    c658:	f1b8 0f10 	cmp.w	r8, #16
    c65c:	d1eb      	bne.n	c636 <tcp_in+0xae2>
    c65e:	f04f 0800 	mov.w	r8, #0
			tcp_send_timer_cancel(conn);
    c662:	4620      	mov	r0, r4
    c664:	f7fe faaa 	bl	abbc <tcp_send_timer_cancel>
	if (pkt) {
    c668:	2d00      	cmp	r5, #0
    c66a:	d187      	bne.n	c57c <tcp_in+0xa28>
			next = TCP_TIME_WAIT;
    c66c:	f04f 090a 	mov.w	r9, #10
    c670:	e037      	b.n	c6e2 <tcp_in+0xb8e>
		if (th && (FL(&fl, ==, (FIN | ACK), th_seq(th) + 1 == conn->ack) ||
    c672:	f1b9 0f00 	cmp.w	r9, #0
    c676:	d016      	beq.n	c6a6 <tcp_in+0xb52>
    c678:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    c67c:	d013      	beq.n	c6a6 <tcp_in+0xb52>
    c67e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c682:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
    c686:	ba1b      	rev	r3, r3
    c688:	3301      	adds	r3, #1
    c68a:	4293      	cmp	r3, r2
    c68c:	d10b      	bne.n	c6a6 <tcp_in+0xb52>
    c68e:	f1b8 0f11 	cmp.w	r8, #17
    c692:	d105      	bne.n	c6a0 <tcp_in+0xb4c>
			tcp_out(conn, ACK);
    c694:	2110      	movs	r1, #16
    c696:	4620      	mov	r0, r4
    c698:	f015 fe7b 	bl	22392 <tcp_out>
			verdict = NET_OK;
    c69c:	2600      	movs	r6, #0
    c69e:	e002      	b.n	c6a6 <tcp_in+0xb52>
			   FL(&fl, ==, FIN, th_seq(th) + 1 == conn->ack))) {
    c6a0:	f1b8 0f01 	cmp.w	r8, #1
    c6a4:	d0f6      	beq.n	c694 <tcp_in+0xb40>
		k_work_reschedule_for_queue(
    c6a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    c6aa:	2300      	movs	r3, #0
    c6ac:	f504 7190 	add.w	r1, r4, #288	; 0x120
    c6b0:	4826      	ldr	r0, [pc, #152]	; (c74c <tcp_in+0xbf8>)
    c6b2:	f009 fb17 	bl	15ce4 <k_work_reschedule_for_queue>
	if (pkt) {
    c6b6:	e7be      	b.n	c636 <tcp_in+0xae2>
    c6b8:	b325      	cbz	r5, c704 <tcp_in+0xbb0>
			net_pkt_unref(pkt);
    c6ba:	4628      	mov	r0, r5
    c6bc:	f014 fe7a 	bl	213b4 <net_pkt_unref>
    c6c0:	e42c      	b.n	bf1c <tcp_in+0x3c8>
		do_close = true;
    c6c2:	f04f 0801 	mov.w	r8, #1
	if (pkt) {
    c6c6:	2d00      	cmp	r5, #0
    c6c8:	f43f ad4e 	beq.w	c168 <tcp_in+0x614>
		if (verdict == NET_OK) {
    c6cc:	2e00      	cmp	r6, #0
    c6ce:	f47f ad4b 	bne.w	c168 <tcp_in+0x614>
			net_pkt_unref(pkt);
    c6d2:	4628      	mov	r0, r5
    c6d4:	f014 fe6e 	bl	213b4 <net_pkt_unref>
	if (next) {
    c6d8:	e546      	b.n	c168 <tcp_in+0x614>
		return NET_DROP;
    c6da:	2602      	movs	r6, #2
    c6dc:	e642      	b.n	c364 <tcp_in+0x810>
			next = TCP_SYN_RECEIVED;
    c6de:	f04f 0903 	mov.w	r9, #3
				verdict = NET_OK;
    c6e2:	462e      	mov	r6, r5
    c6e4:	e5c6      	b.n	c274 <tcp_in+0x720>
			next = TCP_LAST_ACK;
    c6e6:	f04f 0909 	mov.w	r9, #9
    c6ea:	e7fa      	b.n	c6e2 <tcp_in+0xb8e>
			next = TCP_CLOSE_WAIT;
    c6ec:	f04f 0907 	mov.w	r9, #7
    c6f0:	e7f7      	b.n	c6e2 <tcp_in+0xb8e>
				next = TCP_FIN_WAIT_1;
    c6f2:	f04f 0905 	mov.w	r9, #5
    c6f6:	e7f4      	b.n	c6e2 <tcp_in+0xb8e>
			next = TCP_CLOSING;
    c6f8:	f04f 0908 	mov.w	r9, #8
    c6fc:	e7f1      	b.n	c6e2 <tcp_in+0xb8e>
			next = TCP_FIN_WAIT_2;
    c6fe:	f04f 0906 	mov.w	r9, #6
    c702:	e7ee      	b.n	c6e2 <tcp_in+0xb8e>
			next = TCP_ESTABLISHED;
    c704:	f04f 0904 	mov.w	r9, #4
    c708:	e7eb      	b.n	c6e2 <tcp_in+0xb8e>
		if (net_context_packet_received(conn_handler, recv_pkt, NULL,
    c70a:	2300      	movs	r3, #0
    c70c:	f8cd 9000 	str.w	r9, [sp]
    c710:	461a      	mov	r2, r3
    c712:	6139      	str	r1, [r7, #16]
    c714:	4628      	mov	r0, r5
    c716:	f7fc fb43 	bl	8da0 <net_context_packet_received>
    c71a:	2802      	cmp	r0, #2
    c71c:	6939      	ldr	r1, [r7, #16]
    c71e:	f47f ad30 	bne.w	c182 <tcp_in+0x62e>
			tcp_pkt_unref(recv_pkt);
    c722:	4608      	mov	r0, r1
    c724:	f014 fe46 	bl	213b4 <net_pkt_unref>
    c728:	e528      	b.n	c17c <tcp_in+0x628>
				close_status = -ECONNRESET;
    c72a:	f06f 0367 	mvn.w	r3, #103	; 0x67
	if (pkt) {
    c72e:	f04f 0800 	mov.w	r8, #0
				close_status = -ECONNRESET;
    c732:	617b      	str	r3, [r7, #20]
    c734:	e7ca      	b.n	c6cc <tcp_in+0xb78>
	if (pkt) {
    c736:	f04f 0800 	mov.w	r8, #0
    c73a:	e7c7      	b.n	c6cc <tcp_in+0xb78>
			connection_ok = true;
    c73c:	2301      	movs	r3, #1
    c73e:	60fb      	str	r3, [r7, #12]
    c740:	f7ff bb95 	b.w	be6e <tcp_in+0x31a>
    c744:	00033268 	.word	0x00033268
    c748:	00024d48 	.word	0x00024d48
    c74c:	200024c8 	.word	0x200024c8

0000c750 <net_tcp_connect>:
{
    c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c754:	b087      	sub	sp, #28
    c756:	4605      	mov	r5, r0
    c758:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
	conn = context->tcp;
    c75c:	6c84      	ldr	r4, [r0, #72]	; 0x48
{
    c75e:	4688      	mov	r8, r1
    c760:	4691      	mov	r9, r2
    c762:	461e      	mov	r6, r3
    c764:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
	return net_if_get_by_index(context->iface);
    c768:	f990 0092 	ldrsb.w	r0, [r0, #146]	; 0x92
    c76c:	f7fb fbd2 	bl	7f14 <z_impl_net_if_get_by_index>
	conn->iface = net_context_get_iface(context);
    c770:	6120      	str	r0, [r4, #16]
	tcp_derive_rto(conn);
    c772:	4620      	mov	r0, r4
    c774:	f015 fd45 	bl	22202 <tcp_derive_rto>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    c778:	f8b5 3090 	ldrh.w	r3, [r5, #144]	; 0x90
    c77c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	switch (net_context_get_family(context)) {
    c780:	2b01      	cmp	r3, #1
    c782:	d05c      	beq.n	c83e <net_tcp_connect+0xee>
    c784:	2b02      	cmp	r3, #2
    c786:	d07e      	beq.n	c886 <net_tcp_connect+0x136>
		conn->seq = tcp_init_isn(&conn->src.sa, &conn->dst.sa);
    c788:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
    c78c:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
    c790:	f7fe f900 	bl	a994 <tcp_init_isn>
    c794:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
    c798:	f8b5 1090 	ldrh.w	r1, [r5, #144]	; 0x90
	ret = net_conn_register(net_context_get_proto(context),
    c79c:	f105 0330 	add.w	r3, r5, #48	; 0x30
    c7a0:	f021 0106 	bic.w	r1, r1, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
    c7a4:	f041 0102 	orr.w	r1, r1, #2
    c7a8:	b289      	uxth	r1, r1
    c7aa:	f8a5 1090 	strh.w	r1, [r5, #144]	; 0x90
    c7ae:	e9cd 5304 	strd	r5, r3, [sp, #16]
    c7b2:	4b38      	ldr	r3, [pc, #224]	; (c894 <net_tcp_connect+0x144>)
    c7b4:	ba7f      	rev16	r7, r7
    c7b6:	e9cd 5302 	strd	r5, r3, [sp, #8]
    c7ba:	ba76      	rev16	r6, r6
    c7bc:	b2b6      	uxth	r6, r6
    c7be:	b2bf      	uxth	r7, r7
    c7c0:	9600      	str	r6, [sp, #0]
    c7c2:	9701      	str	r7, [sp, #4]
    c7c4:	464b      	mov	r3, r9
    c7c6:	4642      	mov	r2, r8
    c7c8:	f8b5 008e 	ldrh.w	r0, [r5, #142]	; 0x8e
    c7cc:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    c7d0:	f7fd f938 	bl	9a44 <net_conn_register>
	if (ret < 0) {
    c7d4:	1e06      	subs	r6, r0, #0
    c7d6:	db2e      	blt.n	c836 <net_tcp_connect+0xe6>
	conn->connect_cb = cb;
    c7d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
	(void)tcp_in(conn, NULL);
    c7da:	2100      	movs	r1, #0
	conn->connect_cb = cb;
    c7dc:	6263      	str	r3, [r4, #36]	; 0x24
	context->user_data = user_data;
    c7de:	9b15      	ldr	r3, [sp, #84]	; 0x54
	(void)tcp_in(conn, NULL);
    c7e0:	4620      	mov	r0, r4
	context->user_data = user_data;
    c7e2:	606b      	str	r3, [r5, #4]
	conn->in_connect = !IS_ENABLED(CONFIG_NET_TEST_PROTOCOL);
    c7e4:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    c7e8:	f043 0302 	orr.w	r3, r3, #2
    c7ec:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
	(void)tcp_in(conn, NULL);
    c7f0:	f7ff f9b0 	bl	bb54 <tcp_in>
		if ((K_TIMEOUT_EQ(timeout, K_NO_WAIT)) &&
    c7f4:	ea5b 030a 	orrs.w	r3, fp, sl
    c7f8:	d103      	bne.n	c802 <net_tcp_connect+0xb2>
    c7fa:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    c7fe:	2b04      	cmp	r3, #4
    c800:	d144      	bne.n	c88c <net_tcp_connect+0x13c>
    c802:	465a      	mov	r2, fp
    c804:	4653      	mov	r3, sl
    c806:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    c80a:	f009 f8c3 	bl	15994 <z_impl_k_sem_take>
		} else if (k_sem_take(&conn->connect_sem, timeout) != 0 &&
    c80e:	b398      	cbz	r0, c878 <net_tcp_connect+0x128>
    c810:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
    c814:	2b04      	cmp	r3, #4
    c816:	d02f      	beq.n	c878 <net_tcp_connect+0x128>
			if (conn->in_connect) {
    c818:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    c81c:	079a      	lsls	r2, r3, #30
    c81e:	d508      	bpl.n	c832 <net_tcp_connect+0xe2>
				conn->in_connect = false;
    c820:	f36f 0341 	bfc	r3, #1, #1
				tcp_conn_close(conn, -ETIMEDOUT);
    c824:	f06f 0173 	mvn.w	r1, #115	; 0x73
    c828:	4620      	mov	r0, r4
				conn->in_connect = false;
    c82a:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
				tcp_conn_close(conn, -ETIMEDOUT);
    c82e:	f015 fcfa 	bl	22226 <tcp_conn_close.isra.0>
			ret = -ETIMEDOUT;
    c832:	f06f 0673 	mvn.w	r6, #115	; 0x73
}
    c836:	4630      	mov	r0, r6
    c838:	b007      	add	sp, #28
    c83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c83e:	2200      	movs	r2, #0
		conn->src.sa.sa_family = AF_INET;
    c840:	f8a4 31e0 	strh.w	r3, [r4, #480]	; 0x1e0
    c844:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
    c848:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
		conn->dst.sa.sa_family = AF_INET;
    c84c:	f8a4 31f8 	strh.w	r3, [r4, #504]	; 0x1f8
		conn->dst.sin.sin_port = remote_port;
    c850:	f8a4 61fa 	strh.w	r6, [r4, #506]	; 0x1fa
		conn->src.sin.sin_port = local_port;
    c854:	f8a4 71e2 	strh.w	r7, [r4, #482]	; 0x1e2
	return net_if_get_by_index(context->iface);
    c858:	f995 0092 	ldrsb.w	r0, [r5, #146]	; 0x92
    c85c:	f7fb fb5a 	bl	7f14 <z_impl_net_if_get_by_index>
		ip4 = net_if_ipv4_select_src_addr(
    c860:	f108 0104 	add.w	r1, r8, #4
    c864:	f7fb fbf8 	bl	8058 <net_if_ipv4_select_src_addr>
		conn->src.sin.sin_addr = *ip4;
    c868:	6803      	ldr	r3, [r0, #0]
    c86a:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
		net_ipaddr_copy(&conn->dst.sin.sin_addr,
    c86e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    c872:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
		break;
    c876:	e787      	b.n	c788 <net_tcp_connect+0x38>
		conn->in_connect = false;
    c878:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    c87c:	f36f 0341 	bfc	r3, #1, #1
    c880:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    c884:	e7d7      	b.n	c836 <net_tcp_connect+0xe6>
	switch (net_context_get_family(context)) {
    c886:	f06f 0615 	mvn.w	r6, #21
    c88a:	e7d4      	b.n	c836 <net_tcp_connect+0xe6>
			ret = -EINPROGRESS;
    c88c:	f06f 0676 	mvn.w	r6, #118	; 0x76
	return ret;
    c890:	e7d1      	b.n	c836 <net_tcp_connect+0xe6>
    c892:	bf00      	nop
    c894:	0000c899 	.word	0x0000c899

0000c898 <tcp_recv>:
{
    c898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c89c:	b08f      	sub	sp, #60	; 0x3c
	return list->head;
    c89e:	4b74      	ldr	r3, [pc, #464]	; (ca70 <tcp_recv+0x1d8>)
    c8a0:	460d      	mov	r5, r1
    c8a2:	681c      	ldr	r4, [r3, #0]
    c8a4:	af06      	add	r7, sp, #24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
    c8a6:	2c00      	cmp	r4, #0
    c8a8:	d03c      	beq.n	c924 <tcp_recv+0x8c>
	return node->next;
    c8aa:	6826      	ldr	r6, [r4, #0]
    c8ac:	2c00      	cmp	r4, #0
    c8ae:	d13b      	bne.n	c928 <tcp_recv+0x90>
	th = th_get(pkt);
    c8b0:	4628      	mov	r0, r5
    c8b2:	f7fe f8b7 	bl	aa24 <th_get>
	if (th_flags(th) & SYN && !(th_flags(th) & ACK)) {
    c8b6:	7b43      	ldrb	r3, [r0, #13]
    c8b8:	079a      	lsls	r2, r3, #30
    c8ba:	d52e      	bpl.n	c91a <tcp_recv+0x82>
    c8bc:	f013 0610 	ands.w	r6, r3, #16
    c8c0:	d12b      	bne.n	c91a <tcp_recv+0x82>
	return pkt->family;
    c8c2:	f895 9037 	ldrb.w	r9, [r5, #55]	; 0x37
		struct tcp *conn_old = ((struct net_context *)user_data)->tcp;
    c8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c8c8:	ea4f 1959 	mov.w	r9, r9, lsr #5
    c8cc:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
	ret = net_context_get(af, SOCK_STREAM, IPPROTO_TCP, &context);
    c8d0:	2206      	movs	r2, #6
    c8d2:	2101      	movs	r1, #1
    c8d4:	4648      	mov	r0, r9
	struct sockaddr local_addr = { 0 };
    c8d6:	e9c7 4402 	strd	r4, r4, [r7, #8]
	ret = net_context_get(af, SOCK_STREAM, IPPROTO_TCP, &context);
    c8da:	1d3b      	adds	r3, r7, #4
	struct net_context *context = NULL;
    c8dc:	607c      	str	r4, [r7, #4]
	ret = net_context_get(af, SOCK_STREAM, IPPROTO_TCP, &context);
    c8de:	f7fc fab7 	bl	8e50 <net_context_get>
	if (ret < 0) {
    c8e2:	2800      	cmp	r0, #0
    c8e4:	da3b      	bge.n	c95e <tcp_recv+0xc6>
		NET_ERR("net_context_get(): %d", ret);
    c8e6:	466c      	mov	r4, sp
    c8e8:	b088      	sub	sp, #32
    c8ea:	aa06      	add	r2, sp, #24
    c8ec:	4b61      	ldr	r3, [pc, #388]	; (ca74 <tcp_recv+0x1dc>)
    c8ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c8f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c8f6:	2303      	movs	r3, #3
    c8f8:	485f      	ldr	r0, [pc, #380]	; (ca78 <tcp_recv+0x1e0>)
    c8fa:	f842 3f10 	str.w	r3, [r2, #16]!
    c8fe:	f015 fc1b 	bl	22138 <z_log_msg_static_create.constprop.0>
    c902:	46a5      	mov	sp, r4
			NET_ERR("Cannot allocate a new TCP connection");
    c904:	4b5d      	ldr	r3, [pc, #372]	; (ca7c <tcp_recv+0x1e4>)
    c906:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c90a:	61fb      	str	r3, [r7, #28]
    c90c:	2302      	movs	r3, #2
    c90e:	485a      	ldr	r0, [pc, #360]	; (ca78 <tcp_recv+0x1e0>)
    c910:	61bb      	str	r3, [r7, #24]
    c912:	f107 0218 	add.w	r2, r7, #24
    c916:	f015 fc0f 	bl	22138 <z_log_msg_static_create.constprop.0>
	enum net_verdict verdict = NET_DROP;
    c91a:	2002      	movs	r0, #2
}
    c91c:	3724      	adds	r7, #36	; 0x24
    c91e:	46bd      	mov	sp, r7
    c920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
    c924:	4626      	mov	r6, r4
    c926:	e7c1      	b.n	c8ac <tcp_recv+0x14>
	return tcp_endpoint_cmp(&conn->src, pkt, TCP_EP_DST) &&
    c928:	2200      	movs	r2, #0
    c92a:	4629      	mov	r1, r5
    c92c:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
    c930:	f015 fc2c 	bl	2218c <tcp_endpoint_cmp>
    c934:	b920      	cbnz	r0, c940 <tcp_recv+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
    c936:	b986      	cbnz	r6, c95a <tcp_recv+0xc2>
    c938:	4633      	mov	r3, r6
    c93a:	4634      	mov	r4, r6
    c93c:	461e      	mov	r6, r3
    c93e:	e7b5      	b.n	c8ac <tcp_recv+0x14>
		tcp_endpoint_cmp(&conn->dst, pkt, TCP_EP_SRC);
    c940:	2201      	movs	r2, #1
    c942:	4629      	mov	r1, r5
    c944:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    c948:	f015 fc20 	bl	2218c <tcp_endpoint_cmp>
	return tcp_endpoint_cmp(&conn->src, pkt, TCP_EP_DST) &&
    c94c:	2800      	cmp	r0, #0
    c94e:	d0f2      	beq.n	c936 <tcp_recv+0x9e>
		verdict = tcp_in(conn, pkt);
    c950:	4629      	mov	r1, r5
    c952:	4620      	mov	r0, r4
    c954:	f7ff f8fe 	bl	bb54 <tcp_in>
	return verdict;
    c958:	e7e0      	b.n	c91c <tcp_recv+0x84>
    c95a:	6833      	ldr	r3, [r6, #0]
    c95c:	e7ed      	b.n	c93a <tcp_recv+0xa2>
	conn = context->tcp;
    c95e:	687b      	ldr	r3, [r7, #4]
    c960:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	conn->iface = pkt->iface;
    c962:	69ab      	ldr	r3, [r5, #24]
	tcp_derive_rto(conn);
    c964:	4620      	mov	r0, r4
	conn->iface = pkt->iface;
    c966:	6123      	str	r3, [r4, #16]
	tcp_derive_rto(conn);
    c968:	f015 fc4b 	bl	22202 <tcp_derive_rto>
    c96c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	net_context_set_family(conn->context, net_pkt_family(pkt));
    c970:	6862      	ldr	r2, [r4, #4]
	if (family == AF_UNSPEC || family == AF_INET || family == AF_INET6 ||
    c972:	2b9f      	cmp	r3, #159	; 0x9f
    c974:	ea4f 1153 	mov.w	r1, r3, lsr #5
	context->flags |= flag;
    c978:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
		flag = family << 3;
    c97c:	bf98      	it	ls
    c97e:	00ce      	lslls	r6, r1, #3
	context->flags |= flag;
    c980:	4333      	orrs	r3, r6
	if (tcp_endpoint_set(&conn->dst, pkt, TCP_EP_SRC) < 0) {
    c982:	f504 76fc 	add.w	r6, r4, #504	; 0x1f8
    c986:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
    c98a:	4629      	mov	r1, r5
    c98c:	2201      	movs	r2, #1
    c98e:	4630      	mov	r0, r6
    c990:	f7fe f8d2 	bl	ab38 <tcp_endpoint_set>
    c994:	2800      	cmp	r0, #0
    c996:	da03      	bge.n	c9a0 <tcp_recv+0x108>
		net_context_put(context);
    c998:	6878      	ldr	r0, [r7, #4]
    c99a:	f7fc fb11 	bl	8fc0 <net_context_put>
		if (!conn) {
    c99e:	e7b1      	b.n	c904 <tcp_recv+0x6c>
	if (tcp_endpoint_set(&conn->src, pkt, TCP_EP_DST) < 0) {
    c9a0:	2200      	movs	r2, #0
    c9a2:	4629      	mov	r1, r5
    c9a4:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
    c9a8:	f7fe f8c6 	bl	ab38 <tcp_endpoint_set>
    c9ac:	2800      	cmp	r0, #0
    c9ae:	dbf3      	blt.n	c998 <tcp_recv+0x100>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c9b0:	6833      	ldr	r3, [r6, #0]
	memcpy(&context->remote, &conn->dst, sizeof(context->remote));
    c9b2:	687a      	ldr	r2, [r7, #4]
    c9b4:	6293      	str	r3, [r2, #40]	; 0x28
    c9b6:	6873      	ldr	r3, [r6, #4]
	net_sin_ptr(&context->local)->sin_family = af;
    c9b8:	f8a2 9020 	strh.w	r9, [r2, #32]
    c9bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
    c9be:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
    c9c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c9c6:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
    c9ca:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    c9ce:	2b01      	cmp	r3, #1
	local_addr.sa_family = net_context_get_family(context);
    c9d0:	813b      	strh	r3, [r7, #8]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
    c9d2:	d103      	bne.n	c9dc <tcp_recv+0x144>
		if (net_sin_ptr(&context->local)->sin_addr) {
    c9d4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    c9d6:	b10b      	cbz	r3, c9dc <tcp_recv+0x144>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
    c9d8:	681b      	ldr	r3, [r3, #0]
    c9da:	60fb      	str	r3, [r7, #12]
	ret = net_context_bind(context, &local_addr, sizeof(local_addr));
    c9dc:	2208      	movs	r2, #8
    c9de:	6878      	ldr	r0, [r7, #4]
    c9e0:	18b9      	adds	r1, r7, r2
    c9e2:	f7fc fb15 	bl	9010 <net_context_bind>
	if (ret < 0) {
    c9e6:	2800      	cmp	r0, #0
    c9e8:	dbd6      	blt.n	c998 <tcp_recv+0x100>
		conn->seq = tcp_init_isn(&local_addr, &context->remote);
    c9ea:	6879      	ldr	r1, [r7, #4]
    c9ec:	f107 0008 	add.w	r0, r7, #8
    c9f0:	3128      	adds	r1, #40	; 0x28
    c9f2:	f7fd ffcf 	bl	a994 <tcp_init_isn>
				&context->remote, &local_addr,
    c9f6:	687a      	ldr	r2, [r7, #4]
		conn->seq = tcp_init_isn(&local_addr, &context->remote);
    c9f8:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
	ret = net_conn_register(IPPROTO_TCP, af,
    c9fc:	f102 0330 	add.w	r3, r2, #48	; 0x30
    ca00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    ca04:	4b1e      	ldr	r3, [pc, #120]	; (ca80 <tcp_recv+0x1e8>)
    ca06:	4649      	mov	r1, r9
    ca08:	e9cd 2302 	strd	r2, r3, [sp, #8]
    ca0c:	f8b4 31e2 	ldrh.w	r3, [r4, #482]	; 0x1e2
    ca10:	2006      	movs	r0, #6
    ca12:	ba5b      	rev16	r3, r3
    ca14:	b29b      	uxth	r3, r3
    ca16:	9301      	str	r3, [sp, #4]
    ca18:	f8b4 31fa 	ldrh.w	r3, [r4, #506]	; 0x1fa
    ca1c:	3228      	adds	r2, #40	; 0x28
    ca1e:	ba5b      	rev16	r3, r3
    ca20:	b29b      	uxth	r3, r3
    ca22:	9300      	str	r3, [sp, #0]
    ca24:	f107 0308 	add.w	r3, r7, #8
    ca28:	f7fd f80c 	bl	9a44 <net_conn_register>
	if (ret < 0) {
    ca2c:	2800      	cmp	r0, #0
    ca2e:	da0f      	bge.n	ca50 <tcp_recv+0x1b8>
		NET_ERR("net_conn_register(): %d", ret);
    ca30:	466c      	mov	r4, sp
    ca32:	b088      	sub	sp, #32
    ca34:	aa06      	add	r2, sp, #24
    ca36:	4b13      	ldr	r3, [pc, #76]	; (ca84 <tcp_recv+0x1ec>)
    ca38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ca3c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ca40:	2303      	movs	r3, #3
    ca42:	480d      	ldr	r0, [pc, #52]	; (ca78 <tcp_recv+0x1e0>)
    ca44:	f842 3f10 	str.w	r3, [r2, #16]!
    ca48:	f015 fb76 	bl	22138 <z_log_msg_static_create.constprop.0>
    ca4c:	46a5      	mov	sp, r4
    ca4e:	e7a3      	b.n	c998 <tcp_recv+0x100>
		net_ipaddr_copy(&conn_old->context->remote, &conn->dst.sa);
    ca50:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    ca54:	6871      	ldr	r1, [r6, #4]
    ca56:	f107 0308 	add.w	r3, r7, #8
    ca5a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    ca5e:	c303      	stmia	r3!, {r0, r1}
    ca60:	f107 0308 	add.w	r3, r7, #8
    ca64:	cb03      	ldmia	r3!, {r0, r1}
    ca66:	6290      	str	r0, [r2, #40]	; 0x28
    ca68:	62d1      	str	r1, [r2, #44]	; 0x2c
		conn->accepted_conn = conn_old;
    ca6a:	f8c4 8020 	str.w	r8, [r4, #32]
	if (conn) {
    ca6e:	e76f      	b.n	c950 <tcp_recv+0xb8>
    ca70:	20003898 	.word	0x20003898
    ca74:	0003329d 	.word	0x0003329d
    ca78:	00024d48 	.word	0x00024d48
    ca7c:	000332cb 	.word	0x000332cb
    ca80:	0000c899 	.word	0x0000c899
    ca84:	000332b3 	.word	0x000332b3

0000ca88 <net_tcp_init>:

	return &conn->connect_sem;
}

void net_tcp_init(void)
{
    ca88:	b513      	push	{r0, r1, r4, lr}
#define THREAD_PRIORITY K_PRIO_PREEMPT(0)
#endif

	/* Use private workqueue in order not to block the system work queue.
	 */
	k_work_queue_start(&tcp_work_q, work_q_stack,
    ca8a:	2400      	movs	r4, #0
    ca8c:	f06f 030f 	mvn.w	r3, #15
    ca90:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ca94:	490c      	ldr	r1, [pc, #48]	; (cac8 <net_tcp_init+0x40>)
    ca96:	480d      	ldr	r0, [pc, #52]	; (cacc <net_tcp_init+0x44>)
    ca98:	9400      	str	r4, [sp, #0]
    ca9a:	f009 f8bb 	bl	15c14 <k_work_queue_start>
    ca9e:	2109      	movs	r1, #9
    caa0:	4623      	mov	r3, r4
			   K_KERNEL_STACK_SIZEOF(work_q_stack), THREAD_PRIORITY,
			   NULL);

	/* Compute the largest possible retransmission timeout */
	tcp_fin_timeout_ms = 0;
	rto = tcp_rto;
    caa2:	22c8      	movs	r2, #200	; 0xc8
	for (i = 0; i < tcp_retries; i++) {
    caa4:	3901      	subs	r1, #1
		tcp_fin_timeout_ms += rto;
    caa6:	4413      	add	r3, r2
		rto += rto >> 1;
    caa8:	eb02 0262 	add.w	r2, r2, r2, asr #1
	for (i = 0; i < tcp_retries; i++) {
    caac:	d1fa      	bne.n	caa4 <net_tcp_init+0x1c>
	/* At the last timeout cicle */
	tcp_fin_timeout_ms += tcp_rto;

	/* When CONFIG_NET_TCP_RANDOMIZED_RTO is active in can be worse case 1.5 times larger */
	if (IS_ENABLED(CONFIG_NET_TCP_RANDOMIZED_RTO)) {
		tcp_fin_timeout_ms += tcp_fin_timeout_ms >> 1;
    caae:	4a08      	ldr	r2, [pc, #32]	; (cad0 <net_tcp_init+0x48>)
	tcp_fin_timeout_ms += tcp_rto;
    cab0:	33c8      	adds	r3, #200	; 0xc8
		tcp_fin_timeout_ms += tcp_fin_timeout_ms >> 1;
    cab2:	eb03 0363 	add.w	r3, r3, r3, asr #1
    cab6:	6013      	str	r3, [r2, #0]
	return z_impl_k_thread_name_set(thread, str);
    cab8:	4906      	ldr	r1, [pc, #24]	; (cad4 <net_tcp_init+0x4c>)
    caba:	4804      	ldr	r0, [pc, #16]	; (cacc <net_tcp_init+0x44>)
	}

	k_thread_name_set(&tcp_work_q.thread, "tcp_work");
	NET_DBG("Workq started. Thread ID: %p", &tcp_work_q.thread);
}
    cabc:	b002      	add	sp, #8
    cabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cac2:	f017 b9b7 	b.w	23e34 <z_impl_k_thread_name_set>
    cac6:	bf00      	nop
    cac8:	2000a250 	.word	0x2000a250
    cacc:	200024c8 	.word	0x200024c8
    cad0:	200038a0 	.word	0x200038a0
    cad4:	000332f0 	.word	0x000332f0

0000cad8 <iface_up_handler.part.0>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

#if defined(CONFIG_NET_NATIVE)
static void iface_up_handler(struct net_mgmt_event_callback *cb,
    cad8:	b5b0      	push	{r4, r5, r7, lr}
    cada:	af00      	add	r7, sp, #0
    cadc:	4604      	mov	r4, r0
			     uint32_t mgmt_event, struct net_if *iface)
{
	if (mgmt_event == NET_EVENT_IF_UP) {
		NET_INFO("Interface %d (%p) coming up",
    cade:	466d      	mov	r5, sp
    cae0:	f7fb fcba 	bl	8458 <net_if_get_by_iface>
    cae4:	b088      	sub	sp, #32
    cae6:	466a      	mov	r2, sp
    cae8:	4b0a      	ldr	r3, [pc, #40]	; (cb14 <iface_up_handler.part.0+0x3c>)
    caea:	61d4      	str	r4, [r2, #28]
    caec:	e9c2 3005 	strd	r3, r0, [r2, #20]
    caf0:	2304      	movs	r3, #4
    caf2:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    caf6:	4808      	ldr	r0, [pc, #32]	; (cb18 <iface_up_handler.part.0+0x40>)
    caf8:	f842 3f10 	str.w	r3, [r2, #16]!
    cafc:	f015 fdb1 	bl	22662 <z_log_msg_static_create.constprop.0>
    cb00:	46ad      	mov	sp, r5
	z_impl_k_sem_reset(sem);
    cb02:	4806      	ldr	r0, [pc, #24]	; (cb1c <iface_up_handler.part.0+0x44>)
    cb04:	f008 ff6e 	bl	159e4 <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
    cb08:	4805      	ldr	r0, [pc, #20]	; (cb20 <iface_up_handler.part.0+0x48>)
    cb0a:	f008 ff1d 	bl	15948 <z_impl_k_sem_give>
			 net_if_get_by_iface(iface), iface);

		k_sem_reset(&counter);
		k_sem_give(&waiter);
	}
}
    cb0e:	46bd      	mov	sp, r7
    cb10:	bdb0      	pop	{r4, r5, r7, pc}
    cb12:	bf00      	nop
    cb14:	000333a1 	.word	0x000333a1
    cb18:	00024cd0 	.word	0x00024cd0
    cb1c:	2000131c 	.word	0x2000131c
    cb20:	2000134c 	.word	0x2000134c

0000cb24 <iface_up_handler>:
	if (mgmt_event == NET_EVENT_IF_UP) {
    cb24:	4b03      	ldr	r3, [pc, #12]	; (cb34 <iface_up_handler+0x10>)
{
    cb26:	4610      	mov	r0, r2
	if (mgmt_event == NET_EVENT_IF_UP) {
    cb28:	4299      	cmp	r1, r3
    cb2a:	d101      	bne.n	cb30 <iface_up_handler+0xc>
    cb2c:	f7ff bfd4 	b.w	cad8 <iface_up_handler.part.0>
}
    cb30:	4770      	bx	lr
    cb32:	bf00      	nop
    cb34:	d0010002 	.word	0xd0010002

0000cb38 <ipv4_addr_add_handler.part.0>:
static void ipv4_addr_add_handler(struct net_mgmt_event_callback *cb,
    cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb3c:	b084      	sub	sp, #16
					&iface->config.ip.ipv4->unicast[i];
    cb3e:	6881      	ldr	r1, [r0, #8]
static void ipv4_addr_add_handler(struct net_mgmt_event_callback *cb,
    cb40:	4606      	mov	r6, r0
		if (if_addr->addr_type != NET_ADDR_DHCP || !if_addr->is_used) {
    cb42:	694b      	ldr	r3, [r1, #20]
static void ipv4_addr_add_handler(struct net_mgmt_event_callback *cb,
    cb44:	af00      	add	r7, sp, #0
		if (if_addr->addr_type != NET_ADDR_DHCP || !if_addr->is_used) {
    cb46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    cb4a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
    cb4e:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
    cb52:	d155      	bne.n	cc00 <ipv4_addr_add_handler.part.0+0xc8>
    cb54:	2310      	movs	r3, #16
    cb56:	463a      	mov	r2, r7
    cb58:	3104      	adds	r1, #4
    cb5a:	2001      	movs	r0, #1
    cb5c:	f7fb fda8 	bl	86b0 <z_impl_net_addr_ntop>
		NET_INFO("IPv4 address: %s",
    cb60:	46e8      	mov	r8, sp
    cb62:	b088      	sub	sp, #32
    cb64:	466c      	mov	r4, sp
    cb66:	f44f 7a00 	mov.w	sl, #512	; 0x200
    cb6a:	4625      	mov	r5, r4
    cb6c:	4b2c      	ldr	r3, [pc, #176]	; (cc20 <ipv4_addr_add_handler.part.0+0xe8>)
    cb6e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; cc24 <ipv4_addr_add_handler.part.0+0xec>
    cb72:	e9c4 3005 	strd	r3, r0, [r4, #20]
    cb76:	f8a4 a01c 	strh.w	sl, [r4, #28]
    cb7a:	f845 9f10 	str.w	r9, [r5, #16]!
    cb7e:	462a      	mov	r2, r5
    cb80:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    cb84:	4828      	ldr	r0, [pc, #160]	; (cc28 <ipv4_addr_add_handler.part.0+0xf0>)
    cb86:	f015 fd6c 	bl	22662 <z_log_msg_static_create.constprop.0>
    cb8a:	46c5      	mov	sp, r8
		NET_INFO("Lease time: %u seconds",
    cb8c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    cb8e:	46a5      	mov	sp, r4
    cb90:	4a26      	ldr	r2, [pc, #152]	; (cc2c <ipv4_addr_add_handler.part.0+0xf4>)
    cb92:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    cb96:	e9c4 2305 	strd	r2, r3, [r4, #20]
    cb9a:	2303      	movs	r3, #3
    cb9c:	462a      	mov	r2, r5
    cb9e:	4822      	ldr	r0, [pc, #136]	; (cc28 <ipv4_addr_add_handler.part.0+0xf0>)
    cba0:	6123      	str	r3, [r4, #16]
    cba2:	f015 fd5e 	bl	22662 <z_log_msg_static_create.constprop.0>
		NET_INFO("Subnet: %s",
    cba6:	68b1      	ldr	r1, [r6, #8]
    cba8:	46c5      	mov	sp, r8
    cbaa:	3134      	adds	r1, #52	; 0x34
    cbac:	2310      	movs	r3, #16
    cbae:	463a      	mov	r2, r7
    cbb0:	2001      	movs	r0, #1
    cbb2:	f7fb fd7d 	bl	86b0 <z_impl_net_addr_ntop>
    cbb6:	46a5      	mov	sp, r4
    cbb8:	4b1d      	ldr	r3, [pc, #116]	; (cc30 <ipv4_addr_add_handler.part.0+0xf8>)
    cbba:	462a      	mov	r2, r5
    cbbc:	e9c4 3005 	strd	r3, r0, [r4, #20]
    cbc0:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    cbc4:	4818      	ldr	r0, [pc, #96]	; (cc28 <ipv4_addr_add_handler.part.0+0xf0>)
    cbc6:	f8a4 a01c 	strh.w	sl, [r4, #28]
    cbca:	f8c4 9010 	str.w	r9, [r4, #16]
    cbce:	f015 fd48 	bl	22662 <z_log_msg_static_create.constprop.0>
		NET_INFO("Router: %s",
    cbd2:	68b1      	ldr	r1, [r6, #8]
    cbd4:	46c5      	mov	sp, r8
    cbd6:	3130      	adds	r1, #48	; 0x30
    cbd8:	2310      	movs	r3, #16
    cbda:	463a      	mov	r2, r7
    cbdc:	2001      	movs	r0, #1
    cbde:	f7fb fd67 	bl	86b0 <z_impl_net_addr_ntop>
    cbe2:	46a5      	mov	sp, r4
    cbe4:	4b13      	ldr	r3, [pc, #76]	; (cc34 <ipv4_addr_add_handler.part.0+0xfc>)
    cbe6:	462a      	mov	r2, r5
    cbe8:	e9c4 3005 	strd	r3, r0, [r4, #20]
    cbec:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    cbf0:	480d      	ldr	r0, [pc, #52]	; (cc28 <ipv4_addr_add_handler.part.0+0xf0>)
    cbf2:	f8a4 a01c 	strh.w	sl, [r4, #28]
    cbf6:	f8c4 9010 	str.w	r9, [r4, #16]
    cbfa:	f015 fd32 	bl	22662 <z_log_msg_static_create.constprop.0>
    cbfe:	46c5      	mov	sp, r8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc00:	4b0d      	ldr	r3, [pc, #52]	; (cc38 <ipv4_addr_add_handler.part.0+0x100>)
    cc02:	e8d3 1fef 	ldaex	r1, [r3]
    cc06:	f041 0104 	orr.w	r1, r1, #4
    cc0a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    cc0e:	2a00      	cmp	r2, #0
    cc10:	d1f7      	bne.n	cc02 <ipv4_addr_add_handler.part.0+0xca>
    cc12:	480a      	ldr	r0, [pc, #40]	; (cc3c <ipv4_addr_add_handler.part.0+0x104>)
    cc14:	f008 fe98 	bl	15948 <z_impl_k_sem_give>
}
    cc18:	3710      	adds	r7, #16
    cc1a:	46bd      	mov	sp, r7
    cc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc20:	000333bd 	.word	0x000333bd
    cc24:	01000003 	.word	0x01000003
    cc28:	00024cd0 	.word	0x00024cd0
    cc2c:	000333ce 	.word	0x000333ce
    cc30:	000333e5 	.word	0x000333e5
    cc34:	000333f0 	.word	0x000333f0
    cc38:	200038cc 	.word	0x200038cc
    cc3c:	2000134c 	.word	0x2000134c

0000cc40 <ipv4_addr_add_handler>:
	if (mgmt_event != NET_EVENT_IPV4_ADDR_ADD) {
    cc40:	4b03      	ldr	r3, [pc, #12]	; (cc50 <ipv4_addr_add_handler+0x10>)
{
    cc42:	4610      	mov	r0, r2
	if (mgmt_event != NET_EVENT_IPV4_ADDR_ADD) {
    cc44:	4299      	cmp	r1, r3
    cc46:	d101      	bne.n	cc4c <ipv4_addr_add_handler+0xc>
    cc48:	f7ff bf76 	b.w	cb38 <ipv4_addr_add_handler.part.0>
}
    cc4c:	4770      	bx	lr
    cc4e:	bf00      	nop
    cc50:	e0040001 	.word	0xe0040001

0000cc54 <net_config_init_by_iface>:
}
#endif

int net_config_init_by_iface(struct net_if *iface, const char *app_info,
			     uint32_t flags, int32_t timeout)
{
    cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#define LOOP_DIVIDER 10
	int loop = timeout / LOOP_DIVIDER;
    cc58:	f04f 080a 	mov.w	r8, #10
{
    cc5c:	b089      	sub	sp, #36	; 0x24
    cc5e:	4605      	mov	r5, r0
    cc60:	4691      	mov	r9, r2
    cc62:	461e      	mov	r6, r3
	int loop = timeout / LOOP_DIVIDER;
    cc64:	fb93 f8f8 	sdiv	r8, r3, r8
{
    cc68:	af00      	add	r7, sp, #0
	int count;

	if (app_info) {
    cc6a:	b189      	cbz	r1, cc90 <net_config_init_by_iface+0x3c>
		NET_INFO("%s", app_info);
    cc6c:	466c      	mov	r4, sp
    cc6e:	b088      	sub	sp, #32
    cc70:	466a      	mov	r2, sp
    cc72:	4b76      	ldr	r3, [pc, #472]	; (ce4c <net_config_init_by_iface+0x1f8>)
    cc74:	4876      	ldr	r0, [pc, #472]	; (ce50 <net_config_init_by_iface+0x1fc>)
    cc76:	e9c2 3105 	strd	r3, r1, [r2, #20]
    cc7a:	f44f 7300 	mov.w	r3, #512	; 0x200
    cc7e:	8393      	strh	r3, [r2, #28]
    cc80:	4b74      	ldr	r3, [pc, #464]	; (ce54 <net_config_init_by_iface+0x200>)
    cc82:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    cc86:	f842 3f10 	str.w	r3, [r2, #16]!
    cc8a:	f015 fcea 	bl	22662 <z_log_msg_static_create.constprop.0>
    cc8e:	46a5      	mov	sp, r4
	}

	if (!iface) {
    cc90:	b915      	cbnz	r5, cc98 <net_config_init_by_iface+0x44>
		iface = net_if_get_default();
    cc92:	f7fb f963 	bl	7f5c <net_if_get_default>
    cc96:	4605      	mov	r5, r0
	}

	if (timeout < 0) {
    cc98:	2e00      	cmp	r6, #0
    cc9a:	db66      	blt.n	cd6a <net_config_init_by_iface+0x116>
		count = -1;
	} else if (timeout == 0) {
    cc9c:	d068      	beq.n	cd70 <net_config_init_by_iface+0x11c>
		count = 0;
	} else {
		count = LOOP_DIVIDER;
    cc9e:	240a      	movs	r4, #10
    cca0:	2100      	movs	r1, #0
    cca2:	4628      	mov	r0, r5
    cca4:	f015 fce0 	bl	22668 <net_if_flag_is_set>
    cca8:	2800      	cmp	r0, #0
    ccaa:	d063      	beq.n	cd74 <net_config_init_by_iface+0x120>
	       net_if_flag_is_set(iface, NET_IF_RUNNING);
    ccac:	2108      	movs	r1, #8
    ccae:	4628      	mov	r0, r5
    ccb0:	f015 fcda 	bl	22668 <net_if_flag_is_set>
	return net_if_flag_is_set(iface, NET_IF_UP) &&
    ccb4:	2800      	cmp	r0, #0
    ccb6:	d05d      	beq.n	cd74 <net_config_init_by_iface+0x120>
	z_impl_k_sem_reset(sem);
    ccb8:	4867      	ldr	r0, [pc, #412]	; (ce58 <net_config_init_by_iface+0x204>)
    ccba:	f008 fe93 	bl	159e4 <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
    ccbe:	4867      	ldr	r0, [pc, #412]	; (ce5c <net_config_init_by_iface+0x208>)
    ccc0:	f008 fe42 	bl	15948 <z_impl_k_sem_give>
	NET_INFO("Running dhcpv4 client...");
    ccc4:	46ea      	mov	sl, sp
    ccc6:	4b66      	ldr	r3, [pc, #408]	; (ce60 <net_config_init_by_iface+0x20c>)
    ccc8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    cccc:	61fb      	str	r3, [r7, #28]
    ccce:	2302      	movs	r3, #2
    ccd0:	f107 0218 	add.w	r2, r7, #24
    ccd4:	485e      	ldr	r0, [pc, #376]	; (ce50 <net_config_init_by_iface+0x1fc>)
    ccd6:	61bb      	str	r3, [r7, #24]
    ccd8:	f015 fcc3 	bl	22662 <z_log_msg_static_create.constprop.0>
	cb->handler = handler;
    ccdc:	4861      	ldr	r0, [pc, #388]	; (ce64 <net_config_init_by_iface+0x210>)
    ccde:	4b62      	ldr	r3, [pc, #392]	; (ce68 <net_config_init_by_iface+0x214>)
    cce0:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    cce2:	4b62      	ldr	r3, [pc, #392]	; (ce6c <net_config_init_by_iface+0x218>)
    cce4:	6103      	str	r3, [r0, #16]
	net_mgmt_add_event_callback(&mgmt4_cb);
    cce6:	f7fb ff21 	bl	8b2c <net_mgmt_add_event_callback>
	net_dhcpv4_start(iface);
    ccea:	4628      	mov	r0, r5
    ccec:	f014 ff2f 	bl	21b4e <net_dhcpv4_start>
	setup_ipv4(iface);
	setup_dhcpv4(iface);
	setup_ipv6(iface, flags);

	/* Network interface did not come up. */
	if (timeout > 0 && count < 0) {
    ccf0:	2e00      	cmp	r6, #0
    ccf2:	dd02      	ble.n	ccfa <net_config_init_by_iface+0xa6>
    ccf4:	2c00      	cmp	r4, #0
    ccf6:	f2c0 8087 	blt.w	ce08 <net_config_init_by_iface+0x1b4>
    ccfa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    ccfe:	f240 30e7 	movw	r0, #999	; 0x3e7
    cd02:	2100      	movs	r1, #0

	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (!services_are_ready(flags) && count-- > 0) {
		k_sem_take(&waiter, K_MSEC(loop));
    cd04:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    cd08:	fbc8 0105 	smlal	r0, r1, r8, r5
    cd0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cd10:	2300      	movs	r3, #0
    cd12:	f7f3 fe5f 	bl	9d4 <__aeabi_uldivmod>
    cd16:	4683      	mov	fp, r0
    cd18:	4688      	mov	r8, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd1a:	4d55      	ldr	r5, [pc, #340]	; (ce70 <net_config_init_by_iface+0x21c>)
    cd1c:	e8d5 3faf 	lda	r3, [r5]
	while (!services_are_ready(flags) && count-- > 0) {
    cd20:	ea39 0303 	bics.w	r3, r9, r3
    cd24:	d005      	beq.n	cd32 <net_config_init_by_iface+0xde>
    cd26:	2c00      	cmp	r4, #0
    cd28:	f104 3aff 	add.w	sl, r4, #4294967295
    cd2c:	f300 8084 	bgt.w	ce38 <net_config_init_by_iface+0x1e4>
    cd30:	4654      	mov	r4, sl
	}

	if (count == -1 && timeout > 0) {
    cd32:	3401      	adds	r4, #1
    cd34:	f040 8087 	bne.w	ce46 <net_config_init_by_iface+0x1f2>
    cd38:	2e00      	cmp	r6, #0
    cd3a:	f340 8084 	ble.w	ce46 <net_config_init_by_iface+0x1f2>
		NET_ERR("Timeout while waiting network %s", "setup");
    cd3e:	466c      	mov	r4, sp
    cd40:	b088      	sub	sp, #32
    cd42:	466a      	mov	r2, sp
    cd44:	4b4b      	ldr	r3, [pc, #300]	; (ce74 <net_config_init_by_iface+0x220>)
    cd46:	4842      	ldr	r0, [pc, #264]	; (ce50 <net_config_init_by_iface+0x1fc>)
    cd48:	6153      	str	r3, [r2, #20]
    cd4a:	4b4b      	ldr	r3, [pc, #300]	; (ce78 <net_config_init_by_iface+0x224>)
    cd4c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    cd50:	6193      	str	r3, [r2, #24]
    cd52:	f44f 7300 	mov.w	r3, #512	; 0x200
    cd56:	8393      	strh	r3, [r2, #28]
    cd58:	4b3e      	ldr	r3, [pc, #248]	; (ce54 <net_config_init_by_iface+0x200>)
    cd5a:	f842 3f10 	str.w	r3, [r2, #16]!
    cd5e:	f015 fc80 	bl	22662 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
    cd62:	f06f 0073 	mvn.w	r0, #115	; 0x73
    cd66:	46a5      	mov	sp, r4
    cd68:	e062      	b.n	ce30 <net_config_init_by_iface+0x1dc>
		count = -1;
    cd6a:	f04f 34ff 	mov.w	r4, #4294967295
    cd6e:	e797      	b.n	cca0 <net_config_init_by_iface+0x4c>
		count = 0;
    cd70:	4634      	mov	r4, r6
    cd72:	e795      	b.n	cca0 <net_config_init_by_iface+0x4c>
	NET_INFO("Waiting interface %d (%p) to be up...",
    cd74:	4628      	mov	r0, r5
    cd76:	f7fb fb6f 	bl	8458 <net_if_get_by_iface>
    cd7a:	46ea      	mov	sl, sp
    cd7c:	b088      	sub	sp, #32
    cd7e:	466a      	mov	r2, sp
    cd80:	4b3e      	ldr	r3, [pc, #248]	; (ce7c <net_config_init_by_iface+0x228>)
    cd82:	61d5      	str	r5, [r2, #28]
    cd84:	e9c2 3005 	strd	r3, r0, [r2, #20]
    cd88:	2304      	movs	r3, #4
    cd8a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    cd8e:	f842 3f10 	str.w	r3, [r2, #16]!
    cd92:	482f      	ldr	r0, [pc, #188]	; (ce50 <net_config_init_by_iface+0x1fc>)
    cd94:	f015 fc65 	bl	22662 <z_log_msg_static_create.constprop.0>
	cb->handler = handler;
    cd98:	4839      	ldr	r0, [pc, #228]	; (ce80 <net_config_init_by_iface+0x22c>)
    cd9a:	4b3a      	ldr	r3, [pc, #232]	; (ce84 <net_config_init_by_iface+0x230>)
    cd9c:	46d5      	mov	sp, sl
    cd9e:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    cda0:	4b39      	ldr	r3, [pc, #228]	; (ce88 <net_config_init_by_iface+0x234>)
    cda2:	6103      	str	r3, [r0, #16]
	net_mgmt_add_event_callback(&mgmt_iface_cb);
    cda4:	f7fb fec2 	bl	8b2c <net_mgmt_add_event_callback>
	return z_impl_k_sem_init(sem, initial_count, limit);
    cda8:	f04f 32ff 	mov.w	r2, #4294967295
    cdac:	2101      	movs	r1, #1
    cdae:	482a      	ldr	r0, [pc, #168]	; (ce58 <net_config_init_by_iface+0x204>)
    cdb0:	f017 f927 	bl	24002 <z_impl_k_sem_init>
    cdb4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    cdb8:	f240 30e7 	movw	r0, #999	; 0x3e7
    cdbc:	2100      	movs	r1, #0
			if (k_sem_take(&waiter, K_MSEC(loop))) {
    cdbe:	ea28 7ce8 	bic.w	ip, r8, r8, asr #31
    cdc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cdc6:	2300      	movs	r3, #0
    cdc8:	fbcc 010e 	smlal	r0, r1, ip, lr
    cdcc:	f7f3 fe02 	bl	9d4 <__aeabi_uldivmod>
    cdd0:	4602      	mov	r2, r0
    cdd2:	468a      	mov	sl, r1
	return sem->count;
    cdd4:	4920      	ldr	r1, [pc, #128]	; (ce58 <net_config_init_by_iface+0x204>)
		while (count-- > 0) {
    cdd6:	2c00      	cmp	r4, #0
    cdd8:	f104 3bff 	add.w	fp, r4, #4294967295
    cddc:	dd01      	ble.n	cde2 <net_config_init_by_iface+0x18e>
			if (!k_sem_count_get(&counter)) {
    cdde:	688b      	ldr	r3, [r1, #8]
    cde0:	b923      	cbnz	r3, cdec <net_config_init_by_iface+0x198>
		net_mgmt_del_event_callback(&mgmt_iface_cb);
    cde2:	4827      	ldr	r0, [pc, #156]	; (ce80 <net_config_init_by_iface+0x22c>)
    cde4:	f7fb fec2 	bl	8b6c <net_mgmt_del_event_callback>
    cde8:	465c      	mov	r4, fp
    cdea:	e76b      	b.n	ccc4 <net_config_init_by_iface+0x70>
	return z_impl_k_sem_take(sem, timeout);
    cdec:	481b      	ldr	r0, [pc, #108]	; (ce5c <net_config_init_by_iface+0x208>)
    cdee:	4653      	mov	r3, sl
    cdf0:	607a      	str	r2, [r7, #4]
    cdf2:	f008 fdcf 	bl	15994 <z_impl_k_sem_take>
			if (k_sem_take(&waiter, K_MSEC(loop))) {
    cdf6:	687a      	ldr	r2, [r7, #4]
    cdf8:	4917      	ldr	r1, [pc, #92]	; (ce58 <net_config_init_by_iface+0x204>)
    cdfa:	b908      	cbnz	r0, ce00 <net_config_init_by_iface+0x1ac>
		while (count-- > 0) {
    cdfc:	465c      	mov	r4, fp
    cdfe:	e7ea      	b.n	cdd6 <net_config_init_by_iface+0x182>
				if (!k_sem_count_get(&counter)) {
    ce00:	688b      	ldr	r3, [r1, #8]
    ce02:	2b00      	cmp	r3, #0
    ce04:	d1fa      	bne.n	cdfc <net_config_init_by_iface+0x1a8>
    ce06:	e7ec      	b.n	cde2 <net_config_init_by_iface+0x18e>
		NET_ERR("Timeout while waiting network %s", "interface");
    ce08:	b088      	sub	sp, #32
    ce0a:	466a      	mov	r2, sp
    ce0c:	4b19      	ldr	r3, [pc, #100]	; (ce74 <net_config_init_by_iface+0x220>)
    ce0e:	4810      	ldr	r0, [pc, #64]	; (ce50 <net_config_init_by_iface+0x1fc>)
    ce10:	6153      	str	r3, [r2, #20]
    ce12:	4b1e      	ldr	r3, [pc, #120]	; (ce8c <net_config_init_by_iface+0x238>)
    ce14:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    ce18:	6193      	str	r3, [r2, #24]
    ce1a:	f44f 7300 	mov.w	r3, #512	; 0x200
    ce1e:	8393      	strh	r3, [r2, #28]
    ce20:	4b0c      	ldr	r3, [pc, #48]	; (ce54 <net_config_init_by_iface+0x200>)
    ce22:	f842 3f10 	str.w	r3, [r2, #16]!
    ce26:	f015 fc1c 	bl	22662 <z_log_msg_static_create.constprop.0>
		return -ENETDOWN;
    ce2a:	f06f 0072 	mvn.w	r0, #114	; 0x72
    ce2e:	46d5      	mov	sp, sl
	}

	return 0;
}
    ce30:	3724      	adds	r7, #36	; 0x24
    ce32:	46bd      	mov	sp, r7
    ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce38:	4808      	ldr	r0, [pc, #32]	; (ce5c <net_config_init_by_iface+0x208>)
    ce3a:	465a      	mov	r2, fp
    ce3c:	4643      	mov	r3, r8
    ce3e:	f008 fda9 	bl	15994 <z_impl_k_sem_take>
	while (!services_are_ready(flags) && count-- > 0) {
    ce42:	4654      	mov	r4, sl
    ce44:	e76a      	b.n	cd1c <net_config_init_by_iface+0xc8>
	return 0;
    ce46:	2000      	movs	r0, #0
    ce48:	e7f2      	b.n	ce30 <net_config_init_by_iface+0x1dc>
    ce4a:	bf00      	nop
    ce4c:	00032001 	.word	0x00032001
    ce50:	00024cd0 	.word	0x00024cd0
    ce54:	01000003 	.word	0x01000003
    ce58:	2000131c 	.word	0x2000131c
    ce5c:	2000134c 	.word	0x2000134c
    ce60:	00033421 	.word	0x00033421
    ce64:	200038a4 	.word	0x200038a4
    ce68:	0000cc41 	.word	0x0000cc41
    ce6c:	e0040001 	.word	0xe0040001
    ce70:	200038cc 	.word	0x200038cc
    ce74:	0003343a 	.word	0x0003343a
    ce78:	00033465 	.word	0x00033465
    ce7c:	000333fb 	.word	0x000333fb
    ce80:	200038b8 	.word	0x200038b8
    ce84:	0000cb25 	.word	0x0000cb25
    ce88:	d0010002 	.word	0xd0010002
    ce8c:	0003345b 	.word	0x0003345b

0000ce90 <net_config_init_app>:
	}
}

int net_config_init_app(const struct device *dev, const char *app_info)
{
	struct net_if *iface = NULL;
    ce90:	2300      	movs	r3, #0
{
    ce92:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce94:	b083      	sub	sp, #12
    ce96:	af00      	add	r7, sp, #0
    ce98:	460d      	mov	r5, r1
	uint32_t flags = 0U;
	int ret;

	if (dev) {
    ce9a:	4604      	mov	r4, r0
	struct net_if *iface = NULL;
    ce9c:	607b      	str	r3, [r7, #4]
	if (dev) {
    ce9e:	b9f0      	cbnz	r0, cede <net_config_init_app+0x4e>
		flags |= NET_CONFIG_NEED_IPV4;
	}

	/* Only try to use a network interface that is auto started */
	if (iface == NULL) {
		net_if_foreach(iface_find_cb, &iface);
    cea0:	481b      	ldr	r0, [pc, #108]	; (cf10 <net_config_init_app+0x80>)
    cea2:	1d39      	adds	r1, r7, #4
    cea4:	f7fb faee 	bl	8484 <net_if_foreach>
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init_by_iface(iface, app_info, flags,
    cea8:	2300      	movs	r3, #0
    ceaa:	4629      	mov	r1, r5
    ceac:	461a      	mov	r2, r3
    ceae:	6878      	ldr	r0, [r7, #4]
    ceb0:	f7ff fed0 	bl	cc54 <net_config_init_by_iface>
				CONFIG_NET_CONFIG_INIT_TIMEOUT * MSEC_PER_SEC);
	if (ret < 0) {
    ceb4:	1e04      	subs	r4, r0, #0
    ceb6:	da0e      	bge.n	ced6 <net_config_init_app+0x46>
		NET_ERR("Network initialization failed (%d)", ret);
    ceb8:	466d      	mov	r5, sp
    ceba:	b088      	sub	sp, #32
    cebc:	466a      	mov	r2, sp
    cebe:	4b15      	ldr	r3, [pc, #84]	; (cf14 <net_config_init_app+0x84>)
    cec0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cec4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cec8:	2303      	movs	r3, #3
    ceca:	4813      	ldr	r0, [pc, #76]	; (cf18 <net_config_init_app+0x88>)
    cecc:	f842 3f10 	str.w	r3, [r2, #16]!
    ced0:	f015 fbc7 	bl	22662 <z_log_msg_static_create.constprop.0>
    ced4:	46ad      	mov	sp, r5
			log_backend_activate(backend, NULL);
		}
	}

	return ret;
}
    ced6:	4620      	mov	r0, r4
    ced8:	370c      	adds	r7, #12
    ceda:	46bd      	mov	sp, r7
    cedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		iface = net_if_lookup_by_dev(dev);
    cede:	f7fb f82b 	bl	7f38 <net_if_lookup_by_dev>
    cee2:	6078      	str	r0, [r7, #4]
		if (iface == NULL) {
    cee4:	2800      	cmp	r0, #0
    cee6:	d1df      	bne.n	cea8 <net_config_init_app+0x18>
			NET_WARN("No interface for device %p, using default",
    cee8:	466e      	mov	r6, sp
    ceea:	b088      	sub	sp, #32
    ceec:	466a      	mov	r2, sp
    ceee:	4b0b      	ldr	r3, [pc, #44]	; (cf1c <net_config_init_app+0x8c>)
    cef0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    cef4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    cef8:	2303      	movs	r3, #3
    cefa:	4807      	ldr	r0, [pc, #28]	; (cf18 <net_config_init_app+0x88>)
    cefc:	f842 3f10 	str.w	r3, [r2, #16]!
    cf00:	f015 fbaf 	bl	22662 <z_log_msg_static_create.constprop.0>
	if (iface == NULL) {
    cf04:	687b      	ldr	r3, [r7, #4]
    cf06:	46b5      	mov	sp, r6
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d1cd      	bne.n	cea8 <net_config_init_app+0x18>
    cf0c:	e7c8      	b.n	cea0 <net_config_init_app+0x10>
    cf0e:	bf00      	nop
    cf10:	0002267b 	.word	0x0002267b
    cf14:	00033495 	.word	0x00033495
    cf18:	00024cd0 	.word	0x00024cd0
    cf1c:	0003346b 	.word	0x0003346b

0000cf20 <init_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_app(void)
{
    cf20:	b508      	push	{r3, lr}

	(void)net_config_init_app(NULL, "Initializing network");
    cf22:	4903      	ldr	r1, [pc, #12]	; (cf30 <init_app+0x10>)
    cf24:	2000      	movs	r0, #0
    cf26:	f7ff ffb3 	bl	ce90 <net_config_init_app>

	return 0;
}
    cf2a:	2000      	movs	r0, #0
    cf2c:	bd08      	pop	{r3, pc}
    cf2e:	bf00      	nop
    cf30:	000334b8 	.word	0x000334b8

0000cf34 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    cf34:	4b08      	ldr	r3, [pc, #32]	; (cf58 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    cf36:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    cf38:	1ac3      	subs	r3, r0, r3
{
    cf3a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    cf3c:	4907      	ldr	r1, [pc, #28]	; (cf5c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    cf3e:	109b      	asrs	r3, r3, #2
{
    cf40:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    cf42:	4359      	muls	r1, r3
    cf44:	2240      	movs	r2, #64	; 0x40
    cf46:	4806      	ldr	r0, [pc, #24]	; (cf60 <onoff_stop+0x2c>)
    cf48:	f015 fbbe 	bl	226c8 <stop>
	notify(mgr, res);
    cf4c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    cf4e:	4601      	mov	r1, r0
	notify(mgr, res);
    cf50:	4620      	mov	r0, r4
}
    cf52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    cf56:	4718      	bx	r3
    cf58:	200038e4 	.word	0x200038e4
    cf5c:	b6db6db7 	.word	0xb6db6db7
    cf60:	00024928 	.word	0x00024928

0000cf64 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf64:	2340      	movs	r3, #64	; 0x40
{
    cf66:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    cf68:	4c0b      	ldr	r4, [pc, #44]	; (cf98 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf6a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    cf6c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf6e:	460b      	mov	r3, r1
{
    cf70:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf72:	490a      	ldr	r1, [pc, #40]	; (cf9c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    cf74:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf76:	4361      	muls	r1, r4
{
    cf78:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf7a:	4a09      	ldr	r2, [pc, #36]	; (cfa0 <onoff_start+0x3c>)
    cf7c:	4809      	ldr	r0, [pc, #36]	; (cfa4 <onoff_start+0x40>)
    cf7e:	f015 fbcf 	bl	22720 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    cf82:	1e01      	subs	r1, r0, #0
    cf84:	da05      	bge.n	cf92 <onoff_start+0x2e>
		notify(mgr, err);
    cf86:	4630      	mov	r0, r6
    cf88:	462b      	mov	r3, r5
	}
}
    cf8a:	b002      	add	sp, #8
    cf8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    cf90:	4718      	bx	r3
}
    cf92:	b002      	add	sp, #8
    cf94:	bd70      	pop	{r4, r5, r6, pc}
    cf96:	bf00      	nop
    cf98:	200038e4 	.word	0x200038e4
    cf9c:	b6db6db7 	.word	0xb6db6db7
    cfa0:	0002278b 	.word	0x0002278b
    cfa4:	00024928 	.word	0x00024928

0000cfa8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    cfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cfac:	2200      	movs	r2, #0
    cfae:	2101      	movs	r1, #1
{
    cfb0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cfb2:	2005      	movs	r0, #5
    cfb4:	f7f9 f96a 	bl	628c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    cfb8:	4811      	ldr	r0, [pc, #68]	; (d000 <clk_init+0x58>)
    cfba:	f007 f8ff 	bl	141bc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    cfbe:	4b11      	ldr	r3, [pc, #68]	; (d004 <clk_init+0x5c>)
    cfc0:	4298      	cmp	r0, r3
    cfc2:	d119      	bne.n	cff8 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    cfc4:	f016 fd8d 	bl	23ae2 <nrfx_clock_enable>
    cfc8:	2400      	movs	r4, #0
	return &data->mgr[type];
    cfca:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    cfce:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    cfd0:	f8df 8034 	ldr.w	r8, [pc, #52]	; d008 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    cfd4:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    cfd6:	4641      	mov	r1, r8
    cfd8:	fb09 5004 	mla	r0, r9, r4, r5
    cfdc:	f011 ff11 	bl	1ee02 <onoff_manager_init>
		if (err < 0) {
    cfe0:	2800      	cmp	r0, #0
    cfe2:	db07      	blt.n	cff4 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    cfe4:	2301      	movs	r3, #1
    cfe6:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    cfea:	441c      	add	r4, r3
    cfec:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    cfee:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    cff0:	d1f0      	bne.n	cfd4 <clk_init+0x2c>
	}

	return 0;
    cff2:	2000      	movs	r0, #0
}
    cff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    cff8:	f06f 0004 	mvn.w	r0, #4
    cffc:	e7fa      	b.n	cff4 <clk_init+0x4c>
    cffe:	bf00      	nop
    d000:	0000d041 	.word	0x0000d041
    d004:	0bad0000 	.word	0x0bad0000
    d008:	000250b0 	.word	0x000250b0

0000d00c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    d00c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d00e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    d010:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    d012:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    d014:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    d016:	4808      	ldr	r0, [pc, #32]	; (d038 <clkstarted_handle.constprop.0+0x2c>)
    d018:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    d01a:	3378      	adds	r3, #120	; 0x78
    d01c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    d01e:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    d022:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    d024:	f015 fb3d 	bl	226a2 <set_on_state>
	if (callback) {
    d028:	b12d      	cbz	r5, d036 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d02a:	4632      	mov	r2, r6
    d02c:	462b      	mov	r3, r5
}
    d02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d032:	4802      	ldr	r0, [pc, #8]	; (d03c <clkstarted_handle.constprop.0+0x30>)
    d034:	4718      	bx	r3
}
    d036:	bd70      	pop	{r4, r5, r6, pc}
    d038:	200038e4 	.word	0x200038e4
    d03c:	00024928 	.word	0x00024928

0000d040 <clock_event_handler>:
	switch (event) {
    d040:	2805      	cmp	r0, #5
    d042:	d811      	bhi.n	d068 <clock_event_handler+0x28>
    d044:	e8df f000 	tbb	[pc, r0]
    d048:	10100e03 	.word	0x10100e03
    d04c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d04e:	4b07      	ldr	r3, [pc, #28]	; (d06c <clock_event_handler+0x2c>)
    d050:	6f98      	ldr	r0, [r3, #120]	; 0x78
    d052:	f010 0007 	ands.w	r0, r0, #7
    d056:	d107      	bne.n	d068 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d058:	f7ff bfd8 	b.w	d00c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    d05c:	2002      	movs	r0, #2
    d05e:	e7fb      	b.n	d058 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    d060:	2003      	movs	r0, #3
    d062:	e7f9      	b.n	d058 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d064:	2001      	movs	r0, #1
    d066:	e7f7      	b.n	d058 <clock_event_handler+0x18>
}
    d068:	4770      	bx	lr
    d06a:	bf00      	nop
    d06c:	200038e4 	.word	0x200038e4

0000d070 <generic_hfclk_start>:
{
    d070:	b508      	push	{r3, lr}
	__asm__ volatile(
    d072:	f04f 0320 	mov.w	r3, #32
    d076:	f3ef 8111 	mrs	r1, BASEPRI
    d07a:	f383 8812 	msr	BASEPRI_MAX, r3
    d07e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d082:	4a12      	ldr	r2, [pc, #72]	; (d0cc <generic_hfclk_start+0x5c>)
    d084:	6813      	ldr	r3, [r2, #0]
    d086:	f043 0002 	orr.w	r0, r3, #2
    d08a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d08c:	07da      	lsls	r2, r3, #31
    d08e:	d408      	bmi.n	d0a2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    d090:	f381 8811 	msr	BASEPRI, r1
    d094:	f3bf 8f6f 	isb	sy
}
    d098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d09c:	2001      	movs	r0, #1
    d09e:	f016 bd32 	b.w	23b06 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d0a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d0a6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d0aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d0ae:	07d3      	lsls	r3, r2, #31
    d0b0:	d5ee      	bpl.n	d090 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    d0b2:	4807      	ldr	r0, [pc, #28]	; (d0d0 <generic_hfclk_start+0x60>)
    d0b4:	f015 faf5 	bl	226a2 <set_on_state>
    d0b8:	f381 8811 	msr	BASEPRI, r1
    d0bc:	f3bf 8f6f 	isb	sy
}
    d0c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    d0c4:	2000      	movs	r0, #0
    d0c6:	f7ff bfa1 	b.w	d00c <clkstarted_handle.constprop.0>
    d0ca:	bf00      	nop
    d0cc:	20003984 	.word	0x20003984
    d0d0:	2000395c 	.word	0x2000395c

0000d0d4 <api_blocking_start>:
{
    d0d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d0d6:	2200      	movs	r2, #0
    d0d8:	2301      	movs	r3, #1
    d0da:	e9cd 2302 	strd	r2, r3, [sp, #8]
    d0de:	ab04      	add	r3, sp, #16
    d0e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d0e4:	4a09      	ldr	r2, [pc, #36]	; (d10c <api_blocking_start+0x38>)
    d0e6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d0e8:	f8cd d000 	str.w	sp, [sp]
    d0ec:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d0f0:	f015 fb44 	bl	2277c <api_start>
	if (err < 0) {
    d0f4:	2800      	cmp	r0, #0
    d0f6:	db05      	blt.n	d104 <api_blocking_start+0x30>
    d0f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d0fc:	2300      	movs	r3, #0
    d0fe:	4668      	mov	r0, sp
    d100:	f008 fc48 	bl	15994 <z_impl_k_sem_take>
}
    d104:	b007      	add	sp, #28
    d106:	f85d fb04 	ldr.w	pc, [sp], #4
    d10a:	bf00      	nop
    d10c:	000227c1 	.word	0x000227c1

0000d110 <generic_hfclk_stop>:
{
    d110:	b510      	push	{r4, lr}
	__asm__ volatile(
    d112:	f04f 0320 	mov.w	r3, #32
    d116:	f3ef 8411 	mrs	r4, BASEPRI
    d11a:	f383 8812 	msr	BASEPRI_MAX, r3
    d11e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    d122:	4a07      	ldr	r2, [pc, #28]	; (d140 <generic_hfclk_stop+0x30>)
    d124:	6813      	ldr	r3, [r2, #0]
    d126:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    d12a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    d12c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    d12e:	d402      	bmi.n	d136 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d130:	2001      	movs	r0, #1
    d132:	f016 fd47 	bl	23bc4 <nrfx_clock_stop>
	__asm__ volatile(
    d136:	f384 8811 	msr	BASEPRI, r4
    d13a:	f3bf 8f6f 	isb	sy
}
    d13e:	bd10      	pop	{r4, pc}
    d140:	20003984 	.word	0x20003984

0000d144 <z_nrf_clock_control_lf_on>:
{
    d144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d148:	2201      	movs	r2, #1
    d14a:	4607      	mov	r7, r0
    d14c:	4937      	ldr	r1, [pc, #220]	; (d22c <z_nrf_clock_control_lf_on+0xe8>)
    d14e:	e8d1 3fef 	ldaex	r3, [r1]
    d152:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d156:	2800      	cmp	r0, #0
    d158:	d1f9      	bne.n	d14e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    d15a:	b933      	cbnz	r3, d16a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d15c:	4934      	ldr	r1, [pc, #208]	; (d230 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    d15e:	4835      	ldr	r0, [pc, #212]	; (d234 <z_nrf_clock_control_lf_on+0xf0>)
    d160:	604b      	str	r3, [r1, #4]
    d162:	60cb      	str	r3, [r1, #12]
    d164:	608a      	str	r2, [r1, #8]
    d166:	f011 fe5f 	bl	1ee28 <onoff_request>
	switch (start_mode) {
    d16a:	1e7b      	subs	r3, r7, #1
    d16c:	2b01      	cmp	r3, #1
    d16e:	d82b      	bhi.n	d1c8 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d170:	2f01      	cmp	r7, #1
    d172:	d107      	bne.n	d184 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d174:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d178:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d17c:	f003 0303 	and.w	r3, r3, #3
    d180:	2b02      	cmp	r3, #2
    d182:	d021      	beq.n	d1c8 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d184:	f016 fe50 	bl	23e28 <k_is_in_isr>
    d188:	4605      	mov	r5, r0
    d18a:	b9f8      	cbnz	r0, d1cc <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    d18c:	4b2a      	ldr	r3, [pc, #168]	; (d238 <z_nrf_clock_control_lf_on+0xf4>)
    d18e:	781b      	ldrb	r3, [r3, #0]
    d190:	b1e3      	cbz	r3, d1cc <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    d192:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d196:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    d198:	4606      	mov	r6, r0
    d19a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d19e:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d1a2:	f8df 8098 	ldr.w	r8, [pc, #152]	; d23c <z_nrf_clock_control_lf_on+0xf8>
    d1a6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d1aa:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    d1ae:	03d2      	lsls	r2, r2, #15
    d1b0:	d516      	bpl.n	d1e0 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d1b2:	f003 0303 	and.w	r3, r3, #3
    d1b6:	2b02      	cmp	r3, #2
    d1b8:	d001      	beq.n	d1be <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d1ba:	2f01      	cmp	r7, #1
    d1bc:	d110      	bne.n	d1e0 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    d1be:	b375      	cbz	r5, d21e <z_nrf_clock_control_lf_on+0xda>
    d1c0:	f386 8811 	msr	BASEPRI, r6
    d1c4:	f3bf 8f6f 	isb	sy
}
    d1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    d1cc:	f04f 0320 	mov.w	r3, #32
    d1d0:	f3ef 8611 	mrs	r6, BASEPRI
    d1d4:	f383 8812 	msr	BASEPRI_MAX, r3
    d1d8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d1dc:	2501      	movs	r5, #1
    d1de:	e7de      	b.n	d19e <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    d1e0:	b1c5      	cbz	r5, d214 <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d1e2:	4630      	mov	r0, r6
    d1e4:	f7f8 ffaa 	bl	613c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d1e8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d1ec:	b2db      	uxtb	r3, r3
    d1ee:	2b01      	cmp	r3, #1
    d1f0:	d1d9      	bne.n	d1a6 <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d1f2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    d1f6:	2a00      	cmp	r2, #0
    d1f8:	d0d5      	beq.n	d1a6 <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d1fa:	2200      	movs	r2, #0
    d1fc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    d200:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    d204:	2202      	movs	r2, #2
    d206:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    d20a:	2220      	movs	r2, #32
    d20c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d210:	60a3      	str	r3, [r4, #8]
}
    d212:	e7c8      	b.n	d1a6 <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    d214:	2100      	movs	r1, #0
    d216:	2021      	movs	r0, #33	; 0x21
    d218:	f009 f888 	bl	1632c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d21c:	e7e4      	b.n	d1e8 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    d21e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d222:	2202      	movs	r2, #2
    d224:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d228:	e7ce      	b.n	d1c8 <z_nrf_clock_control_lf_on+0x84>
    d22a:	bf00      	nop
    d22c:	200038e0 	.word	0x200038e0
    d230:	200038d0 	.word	0x200038d0
    d234:	20003900 	.word	0x20003900
    d238:	2000554d 	.word	0x2000554d
    d23c:	e000e100 	.word	0xe000e100

0000d240 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    d240:	b508      	push	{r3, lr}
    d242:	4807      	ldr	r0, [pc, #28]	; (d260 <uart_console_init+0x20>)
    d244:	f016 fd22 	bl	23c8c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    d248:	b138      	cbz	r0, d25a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    d24a:	4806      	ldr	r0, [pc, #24]	; (d264 <uart_console_init+0x24>)
    d24c:	f7f9 feac 	bl	6fa8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d250:	4804      	ldr	r0, [pc, #16]	; (d264 <uart_console_init+0x24>)
    d252:	f7f6 fcf7 	bl	3c44 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    d256:	2000      	movs	r0, #0
}
    d258:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d25a:	f06f 0012 	mvn.w	r0, #18
    d25e:	e7fb      	b.n	d258 <uart_console_init+0x18>
    d260:	00024988 	.word	0x00024988
    d264:	0000d269 	.word	0x0000d269

0000d268 <console_out>:
	if ('\n' == c) {
    d268:	280a      	cmp	r0, #10
{
    d26a:	b538      	push	{r3, r4, r5, lr}
    d26c:	4604      	mov	r4, r0
    d26e:	4d07      	ldr	r5, [pc, #28]	; (d28c <console_out+0x24>)
	if ('\n' == c) {
    d270:	d104      	bne.n	d27c <console_out+0x14>
    d272:	68ab      	ldr	r3, [r5, #8]
    d274:	210d      	movs	r1, #13
    d276:	4628      	mov	r0, r5
    d278:	685b      	ldr	r3, [r3, #4]
    d27a:	4798      	blx	r3
    d27c:	68ab      	ldr	r3, [r5, #8]
    d27e:	4803      	ldr	r0, [pc, #12]	; (d28c <console_out+0x24>)
    d280:	685b      	ldr	r3, [r3, #4]
    d282:	b2e1      	uxtb	r1, r4
    d284:	4798      	blx	r3
}
    d286:	4620      	mov	r0, r4
    d288:	bd38      	pop	{r3, r4, r5, pc}
    d28a:	bf00      	nop
    d28c:	00024988 	.word	0x00024988

0000d290 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    d290:	b530      	push	{r4, r5, lr}
	return port->config;
    d292:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d294:	f001 041f 	and.w	r4, r1, #31
    d298:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    d29a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    d29e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d2a0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    d2a4:	d105      	bne.n	d2b2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    d2a6:	4620      	mov	r0, r4
    d2a8:	f007 fa46 	bl	14738 <nrfx_gpiote_trigger_disable>

		return 0;
    d2ac:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    d2ae:	b005      	add	sp, #20
    d2b0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    d2b2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    d2b4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d2b8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    d2bc:	d114      	bne.n	d2e8 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d2be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d2c2:	bf0c      	ite	eq
    d2c4:	2304      	moveq	r3, #4
    d2c6:	2305      	movne	r3, #5
    d2c8:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d2cc:	2300      	movs	r3, #0
    d2ce:	4620      	mov	r0, r4
    d2d0:	4619      	mov	r1, r3
    d2d2:	aa02      	add	r2, sp, #8
    d2d4:	f007 f86e 	bl	143b4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d2d8:	4b1f      	ldr	r3, [pc, #124]	; (d358 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    d2da:	4298      	cmp	r0, r3
    d2dc:	d138      	bne.n	d350 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    d2de:	2101      	movs	r1, #1
    d2e0:	4620      	mov	r0, r4
    d2e2:	f007 f9e3 	bl	146ac <nrfx_gpiote_trigger_enable>
	return 0;
    d2e6:	e7e1      	b.n	d2ac <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d2e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    d2ec:	d025      	beq.n	d33a <gpio_nrfx_pin_interrupt_configure+0xaa>
    d2ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d2f2:	bf14      	ite	ne
    d2f4:	2301      	movne	r3, #1
    d2f6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    d2f8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    d2fc:	6883      	ldr	r3, [r0, #8]
    d2fe:	40cb      	lsrs	r3, r1
    d300:	07d9      	lsls	r1, r3, #31
    d302:	d4e3      	bmi.n	d2cc <gpio_nrfx_pin_interrupt_configure+0x3c>
    d304:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    d308:	d1e0      	bne.n	d2cc <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    d30a:	4a14      	ldr	r2, [pc, #80]	; (d35c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    d30c:	4814      	ldr	r0, [pc, #80]	; (d360 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    d30e:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    d310:	2901      	cmp	r1, #1
    d312:	bf08      	it	eq
    d314:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    d316:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d31a:	3380      	adds	r3, #128	; 0x80
    d31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    d320:	07db      	lsls	r3, r3, #31
    d322:	d4d3      	bmi.n	d2cc <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d324:	f10d 0507 	add.w	r5, sp, #7
    d328:	4629      	mov	r1, r5
    d32a:	4620      	mov	r0, r4
    d32c:	f007 f96a 	bl	14604 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    d330:	4b0c      	ldr	r3, [pc, #48]	; (d364 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    d332:	4298      	cmp	r0, r3
    d334:	d003      	beq.n	d33e <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    d336:	9503      	str	r5, [sp, #12]
    d338:	e7c8      	b.n	d2cc <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d33a:	2303      	movs	r3, #3
    d33c:	e7dc      	b.n	d2f8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    d33e:	4628      	mov	r0, r5
    d340:	f007 f9ae 	bl	146a0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    d344:	4b04      	ldr	r3, [pc, #16]	; (d358 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    d346:	4298      	cmp	r0, r3
    d348:	d0f5      	beq.n	d336 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    d34a:	f06f 000b 	mvn.w	r0, #11
    d34e:	e7ae      	b.n	d2ae <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    d350:	f06f 0015 	mvn.w	r0, #21
    d354:	e7ab      	b.n	d2ae <gpio_nrfx_pin_interrupt_configure+0x1e>
    d356:	bf00      	nop
    d358:	0bad0000 	.word	0x0bad0000
    d35c:	50842500 	.word	0x50842500
    d360:	50842800 	.word	0x50842800
    d364:	0bad0004 	.word	0x0bad0004

0000d368 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d368:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    d36a:	f007 f989 	bl	14680 <nrfx_gpiote_is_init>
    d36e:	4604      	mov	r4, r0
    d370:	b968      	cbnz	r0, d38e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    d372:	f007 f95d 	bl	14630 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    d376:	4b08      	ldr	r3, [pc, #32]	; (d398 <gpio_nrfx_init+0x30>)
    d378:	4298      	cmp	r0, r3
    d37a:	d10a      	bne.n	d392 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    d37c:	4621      	mov	r1, r4
    d37e:	4807      	ldr	r0, [pc, #28]	; (d39c <gpio_nrfx_init+0x34>)
    d380:	f007 f93a 	bl	145f8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d384:	4622      	mov	r2, r4
    d386:	2105      	movs	r1, #5
    d388:	200d      	movs	r0, #13
    d38a:	f7f8 ff7f 	bl	628c <z_arm_irq_priority_set>
		return 0;
    d38e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    d390:	bd10      	pop	{r4, pc}
		return -EIO;
    d392:	f06f 0004 	mvn.w	r0, #4
    d396:	e7fb      	b.n	d390 <gpio_nrfx_init+0x28>
    d398:	0bad0000 	.word	0x0bad0000
    d39c:	0000d3a1 	.word	0x0000d3a1

0000d3a0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d3a0:	0942      	lsrs	r2, r0, #5
{
    d3a2:	4603      	mov	r3, r0
    d3a4:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d3a6:	d002      	beq.n	d3ae <nrfx_gpio_handler+0xe>
    d3a8:	2a01      	cmp	r2, #1
    d3aa:	d017      	beq.n	d3dc <nrfx_gpio_handler+0x3c>
}
    d3ac:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d3ae:	4e0d      	ldr	r6, [pc, #52]	; (d3e4 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    d3b0:	6932      	ldr	r2, [r6, #16]
    d3b2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d3b4:	2900      	cmp	r1, #0
    d3b6:	d0f9      	beq.n	d3ac <nrfx_gpio_handler+0xc>
    d3b8:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    d3ba:	f003 031f 	and.w	r3, r3, #31
    d3be:	680c      	ldr	r4, [r1, #0]
    d3c0:	409d      	lsls	r5, r3
    d3c2:	2900      	cmp	r1, #0
    d3c4:	d0f2      	beq.n	d3ac <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    d3c6:	688a      	ldr	r2, [r1, #8]
    d3c8:	402a      	ands	r2, r5
    d3ca:	d002      	beq.n	d3d2 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d3cc:	4630      	mov	r0, r6
    d3ce:	684b      	ldr	r3, [r1, #4]
    d3d0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d3d2:	b12c      	cbz	r4, d3e0 <nrfx_gpio_handler+0x40>
    d3d4:	6823      	ldr	r3, [r4, #0]
    d3d6:	4621      	mov	r1, r4
    d3d8:	461c      	mov	r4, r3
    d3da:	e7f2      	b.n	d3c2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d3dc:	4e02      	ldr	r6, [pc, #8]	; (d3e8 <nrfx_gpio_handler+0x48>)
    d3de:	e7e7      	b.n	d3b0 <nrfx_gpio_handler+0x10>
    d3e0:	4623      	mov	r3, r4
    d3e2:	e7f8      	b.n	d3d6 <nrfx_gpio_handler+0x36>
    d3e4:	00024958 	.word	0x00024958
    d3e8:	00024940 	.word	0x00024940

0000d3ec <gpio_nrfx_pin_configure>:
{
    d3ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    d3f0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d3f2:	f001 051f 	and.w	r5, r1, #31
    d3f6:	7b3b      	ldrb	r3, [r7, #12]
{
    d3f8:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d3fa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    d3fe:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d400:	4628      	mov	r0, r5
    d402:	f10d 0103 	add.w	r1, sp, #3
    d406:	f007 f8fd 	bl	14604 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d40a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d40e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d410:	d10b      	bne.n	d42a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    d412:	4628      	mov	r0, r5
    d414:	f007 f9b8 	bl	14788 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    d418:	4b3c      	ldr	r3, [pc, #240]	; (d50c <gpio_nrfx_pin_configure+0x120>)
    d41a:	4598      	cmp	r8, r3
    d41c:	d103      	bne.n	d426 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    d41e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d422:	f007 f937 	bl	14694 <nrfx_gpiote_channel_free>
		return 0;
    d426:	2000      	movs	r0, #0
    d428:	e00c      	b.n	d444 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    d42a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d42c:	4628      	mov	r0, r5
    d42e:	4619      	mov	r1, r3
    d430:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    d432:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d436:	f006 ffbd 	bl	143b4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d43a:	4b34      	ldr	r3, [pc, #208]	; (d50c <gpio_nrfx_pin_configure+0x120>)
    d43c:	4298      	cmp	r0, r3
    d43e:	d004      	beq.n	d44a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    d440:	f06f 0015 	mvn.w	r0, #21
}
    d444:	b004      	add	sp, #16
    d446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    d44a:	4580      	cmp	r8, r0
    d44c:	d103      	bne.n	d456 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    d44e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d452:	f007 f91f 	bl	14694 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    d456:	03a3      	lsls	r3, r4, #14
    d458:	d549      	bpl.n	d4ee <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d45a:	f240 3306 	movw	r3, #774	; 0x306
    d45e:	4023      	ands	r3, r4
    d460:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    d464:	d019      	beq.n	d49a <gpio_nrfx_pin_configure+0xae>
    d466:	d80c      	bhi.n	d482 <gpio_nrfx_pin_configure+0x96>
    d468:	2b06      	cmp	r3, #6
    d46a:	d017      	beq.n	d49c <gpio_nrfx_pin_configure+0xb0>
    d46c:	d804      	bhi.n	d478 <gpio_nrfx_pin_configure+0x8c>
    d46e:	b1ab      	cbz	r3, d49c <gpio_nrfx_pin_configure+0xb0>
    d470:	2b02      	cmp	r3, #2
    d472:	d1e5      	bne.n	d440 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    d474:	2304      	movs	r3, #4
    d476:	e011      	b.n	d49c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d47c:	d1e0      	bne.n	d440 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    d47e:	2301      	movs	r3, #1
    d480:	e00c      	b.n	d49c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d482:	f240 2202 	movw	r2, #514	; 0x202
    d486:	4293      	cmp	r3, r2
    d488:	d026      	beq.n	d4d8 <gpio_nrfx_pin_configure+0xec>
    d48a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    d48e:	d025      	beq.n	d4dc <gpio_nrfx_pin_configure+0xf0>
    d490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d494:	d1d4      	bne.n	d440 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    d496:	2302      	movs	r3, #2
    d498:	e000      	b.n	d49c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    d49a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    d49c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    d4a0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    d4a4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    d4a8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    d4aa:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    d4ae:	bf4c      	ite	mi
    d4b0:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    d4b2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d4b6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    d4b8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d4bc:	d510      	bpl.n	d4e0 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    d4be:	2301      	movs	r3, #1
    d4c0:	687a      	ldr	r2, [r7, #4]
    d4c2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    d4c4:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    d4c6:	2200      	movs	r2, #0
    d4c8:	4628      	mov	r0, r5
    d4ca:	a901      	add	r1, sp, #4
    d4cc:	f007 f820 	bl	14510 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d4d0:	4b0e      	ldr	r3, [pc, #56]	; (d50c <gpio_nrfx_pin_configure+0x120>)
    d4d2:	4298      	cmp	r0, r3
    d4d4:	d0a7      	beq.n	d426 <gpio_nrfx_pin_configure+0x3a>
    d4d6:	e7b3      	b.n	d440 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    d4d8:	2305      	movs	r3, #5
    d4da:	e7df      	b.n	d49c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d4dc:	2303      	movs	r3, #3
    d4de:	e7dd      	b.n	d49c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    d4e0:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    d4e2:	bf41      	itttt	mi
    d4e4:	2301      	movmi	r3, #1
    d4e6:	687a      	ldrmi	r2, [r7, #4]
    d4e8:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    d4ea:	60d3      	strmi	r3, [r2, #12]
}
    d4ec:	e7eb      	b.n	d4c6 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    d4ee:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d4f0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    d4f4:	bf4c      	ite	mi
    d4f6:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    d4f8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d4fc:	461a      	mov	r2, r3
    d4fe:	4628      	mov	r0, r5
    d500:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    d502:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d506:	f006 ff55 	bl	143b4 <nrfx_gpiote_input_configure>
    d50a:	e7e1      	b.n	d4d0 <gpio_nrfx_pin_configure+0xe4>
    d50c:	0bad0000 	.word	0x0bad0000

0000d510 <led_gpio_init>:
{
	return led_gpio_set_brightness(dev, led, 0);
}

static int led_gpio_init(const struct device *dev)
{
    d510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct led_gpio_config *config = dev->config;
    d514:	6846      	ldr	r6, [r0, #4]
{
    d516:	4605      	mov	r5, r0
	int err = 0;

	if (!config->num_leds) {
    d518:	6833      	ldr	r3, [r6, #0]
{
    d51a:	af00      	add	r7, sp, #0
	if (!config->num_leds) {
    d51c:	b9d3      	cbnz	r3, d554 <led_gpio_init+0x44>
		LOG_ERR("%s: no LEDs found (DT child nodes missing)", dev->name);
    d51e:	466c      	mov	r4, sp
    d520:	b088      	sub	sp, #32
    d522:	6801      	ldr	r1, [r0, #0]
    d524:	466a      	mov	r2, sp
    d526:	483c      	ldr	r0, [pc, #240]	; (d618 <led_gpio_init+0x108>)
    d528:	e9c2 0105 	strd	r0, r1, [r2, #20]
    d52c:	f44f 7100 	mov.w	r1, #512	; 0x200
    d530:	8391      	strh	r1, [r2, #28]
    d532:	493a      	ldr	r1, [pc, #232]	; (d61c <led_gpio_init+0x10c>)
    d534:	f842 1f10 	str.w	r1, [r2, #16]!
    d538:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    d53c:	4838      	ldr	r0, [pc, #224]	; (d620 <led_gpio_init+0x110>)
    d53e:	f7f7 fca1 	bl	4e84 <z_impl_z_log_msg_static_create>
    d542:	46a5      	mov	sp, r4
		err = -ENODEV;
    d544:	f06f 0412 	mvn.w	r4, #18
	}

	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
    d548:	6833      	ldr	r3, [r6, #0]
    d54a:	bb63      	cbnz	r3, d5a6 <led_gpio_init+0x96>
			err = -ENODEV;
		}
	}

	return err;
}
    d54c:	4620      	mov	r0, r4
    d54e:	46bd      	mov	sp, r7
    d550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int err = 0;
    d554:	2400      	movs	r4, #0
    d556:	e7f7      	b.n	d548 <led_gpio_init+0x38>
				LOG_ERR("Cannot configure GPIO (err %d)", err);
    d558:	466d      	mov	r5, sp
    d55a:	b088      	sub	sp, #32
    d55c:	466a      	mov	r2, sp
    d55e:	4b31      	ldr	r3, [pc, #196]	; (d624 <led_gpio_init+0x114>)
    d560:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d564:	2303      	movs	r3, #3
    d566:	f842 3f10 	str.w	r3, [r2, #16]!
    d56a:	2300      	movs	r3, #0
    d56c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d570:	482b      	ldr	r0, [pc, #172]	; (d620 <led_gpio_init+0x110>)
    d572:	f7f7 fc87 	bl	4e84 <z_impl_z_log_msg_static_create>
    d576:	46ad      	mov	sp, r5
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
    d578:	e7e8      	b.n	d54c <led_gpio_init+0x3c>
			LOG_ERR("%s: GPIO device not ready", dev->name);
    d57a:	466c      	mov	r4, sp
    d57c:	b088      	sub	sp, #32
    d57e:	6829      	ldr	r1, [r5, #0]
    d580:	466a      	mov	r2, sp
    d582:	4829      	ldr	r0, [pc, #164]	; (d628 <led_gpio_init+0x118>)
    d584:	e9c2 0105 	strd	r0, r1, [r2, #20]
    d588:	f44f 7100 	mov.w	r1, #512	; 0x200
    d58c:	8391      	strh	r1, [r2, #28]
    d58e:	4923      	ldr	r1, [pc, #140]	; (d61c <led_gpio_init+0x10c>)
    d590:	f842 1f10 	str.w	r1, [r2, #16]!
    d594:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    d598:	4821      	ldr	r0, [pc, #132]	; (d620 <led_gpio_init+0x110>)
    d59a:	f7f7 fc73 	bl	4e84 <z_impl_z_log_msg_static_create>
    d59e:	46a5      	mov	sp, r4
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
    d5a0:	f06f 0412 	mvn.w	r4, #18
	return err;
    d5a4:	e7d2      	b.n	d54c <led_gpio_init+0x3c>
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
    d5a6:	2c00      	cmp	r4, #0
    d5a8:	d1fa      	bne.n	d5a0 <led_gpio_init+0x90>
    d5aa:	46a0      	mov	r8, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d5ac:	f04f 0901 	mov.w	r9, #1
		const struct gpio_dt_spec *led = &config->led[i];
    d5b0:	6874      	ldr	r4, [r6, #4]
		if (device_is_ready(led->port)) {
    d5b2:	f854 0038 	ldr.w	r0, [r4, r8, lsl #3]
		const struct gpio_dt_spec *led = &config->led[i];
    d5b6:	eb04 0ac8 	add.w	sl, r4, r8, lsl #3
    d5ba:	f016 fb67 	bl	23c8c <z_device_is_ready>
		if (device_is_ready(led->port)) {
    d5be:	4603      	mov	r3, r0
    d5c0:	2800      	cmp	r0, #0
    d5c2:	d0da      	beq.n	d57a <led_gpio_init+0x6a>
	return gpio_pin_configure(spec->port,
    d5c4:	f854 0038 	ldr.w	r0, [r4, r8, lsl #3]
				  spec->pin,
    d5c8:	f89a 1004 	ldrb.w	r1, [sl, #4]
				  spec->dt_flags | extra_flags);
    d5cc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
	struct gpio_driver_data *data =
    d5d0:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    d5d4:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d5d6:	f8dc 4000 	ldr.w	r4, [ip]
	return gpio_pin_configure(spec->port,
    d5da:	bf54      	ite	pl
    d5dc:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    d5e0:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    d5e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d5e8:	fa09 fe01 	lsl.w	lr, r9, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    d5ec:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
    d5ee:	f8d0 a008 	ldr.w	sl, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d5f2:	bf4c      	ite	mi
    d5f4:	ea44 040e 	orrmi.w	r4, r4, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    d5f8:	ea24 040e 	bicpl.w	r4, r4, lr
    d5fc:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
    d600:	f8da 3000 	ldr.w	r3, [sl]
    d604:	4798      	blx	r3
			if (err) {
    d606:	4604      	mov	r4, r0
    d608:	2800      	cmp	r0, #0
    d60a:	d1a5      	bne.n	d558 <led_gpio_init+0x48>
	for (size_t i = 0; (i < config->num_leds) && !err; i++) {
    d60c:	6833      	ldr	r3, [r6, #0]
    d60e:	f108 0801 	add.w	r8, r8, #1
    d612:	4543      	cmp	r3, r8
    d614:	d8cc      	bhi.n	d5b0 <led_gpio_init+0xa0>
    d616:	e799      	b.n	d54c <led_gpio_init+0x3c>
    d618:	0003353a 	.word	0x0003353a
    d61c:	01000003 	.word	0x01000003
    d620:	00024c88 	.word	0x00024c88
    d624:	00033565 	.word	0x00033565
    d628:	00033584 	.word	0x00033584

0000d62c <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
    d62c:	b510      	push	{r4, lr}
    d62e:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    d630:	6902      	ldr	r2, [r0, #16]
{
    d632:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
    d634:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    d638:	4925      	ldr	r1, [pc, #148]	; (d6d0 <mbox_nrf_init+0xa4>)
    d63a:	2000      	movs	r0, #0
    d63c:	f007 f9a4 	bl	14988 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d640:	2200      	movs	r2, #0
    d642:	2101      	movs	r1, #1
    d644:	202a      	movs	r0, #42	; 0x2a
    d646:	f7f8 fe21 	bl	628c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    d64a:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    d64c:	2284      	movs	r2, #132	; 0x84
    d64e:	2100      	movs	r1, #0
    d650:	a807      	add	r0, sp, #28
    d652:	f009 fec1 	bl	173d8 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    d656:	6863      	ldr	r3, [r4, #4]
    d658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d65c:	d30a      	bcc.n	d674 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    d65e:	4b1d      	ldr	r3, [pc, #116]	; (d6d4 <mbox_nrf_init+0xa8>)
    d660:	9305      	str	r3, [sp, #20]
    d662:	2302      	movs	r3, #2
    d664:	9304      	str	r3, [sp, #16]
    d666:	2300      	movs	r3, #0
    d668:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d66c:	481a      	ldr	r0, [pc, #104]	; (d6d8 <mbox_nrf_init+0xac>)
    d66e:	aa04      	add	r2, sp, #16
    d670:	f7f7 fc08 	bl	4e84 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    d674:	6823      	ldr	r3, [r4, #0]
    d676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d67a:	d30a      	bcc.n	d692 <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    d67c:	4b17      	ldr	r3, [pc, #92]	; (d6dc <mbox_nrf_init+0xb0>)
    d67e:	9305      	str	r3, [sp, #20]
    d680:	2302      	movs	r3, #2
    d682:	9304      	str	r3, [sp, #16]
    d684:	2300      	movs	r3, #0
    d686:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d68a:	4813      	ldr	r0, [pc, #76]	; (d6d8 <mbox_nrf_init+0xac>)
    d68c:	aa04      	add	r2, sp, #16
    d68e:	f7f7 fbf9 	bl	4e84 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
    d692:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
    d694:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
    d696:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    d698:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
    d69a:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    d69c:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
    d69e:	40d9      	lsrs	r1, r3
    d6a0:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
    d6a2:	bf44      	itt	mi
    d6a4:	fa00 f103 	lslmi.w	r1, r0, r3
    d6a8:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
    d6ac:	6821      	ldr	r1, [r4, #0]
    d6ae:	40d9      	lsrs	r1, r3
    d6b0:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
    d6b2:	bf48      	it	mi
    d6b4:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    d6b8:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
    d6bc:	bf48      	it	mi
    d6be:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    d6c0:	2b10      	cmp	r3, #16
    d6c2:	d1ea      	bne.n	d69a <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
    d6c4:	a807      	add	r0, sp, #28
    d6c6:	f007 f977 	bl	149b8 <nrfx_ipc_config_load>

	return 0;
}
    d6ca:	2000      	movs	r0, #0
    d6cc:	b028      	add	sp, #160	; 0xa0
    d6ce:	bd10      	pop	{r4, pc}
    d6d0:	0000d7d5 	.word	0x0000d7d5
    d6d4:	000335ac 	.word	0x000335ac
    d6d8:	00024ca8 	.word	0x00024ca8
    d6dc:	000335d8 	.word	0x000335d8

0000d6e0 <mbox_nrf_set_enabled>:
{
    d6e0:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    d6e2:	290f      	cmp	r1, #15
{
    d6e4:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    d6e6:	6905      	ldr	r5, [r0, #16]
{
    d6e8:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    d6ea:	d842      	bhi.n	d772 <mbox_nrf_set_enabled+0x92>
    d6ec:	6843      	ldr	r3, [r0, #4]
    d6ee:	681b      	ldr	r3, [r3, #0]
    d6f0:	40cb      	lsrs	r3, r1
    d6f2:	07db      	lsls	r3, r3, #31
    d6f4:	d53d      	bpl.n	d772 <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    d6f6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    d6fa:	40cb      	lsrs	r3, r1
    d6fc:	f003 0301 	and.w	r3, r3, #1
    d700:	b91a      	cbnz	r2, d70a <mbox_nrf_set_enabled+0x2a>
    d702:	bb13      	cbnz	r3, d74a <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
    d704:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d708:	e031      	b.n	d76e <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    d70a:	2b00      	cmp	r3, #0
    d70c:	d1fa      	bne.n	d704 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
    d70e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    d712:	b94b      	cbnz	r3, d728 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
    d714:	4a18      	ldr	r2, [pc, #96]	; (d778 <mbox_nrf_set_enabled+0x98>)
    d716:	9205      	str	r2, [sp, #20]
    d718:	2202      	movs	r2, #2
    d71a:	9204      	str	r2, [sp, #16]
    d71c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d720:	4816      	ldr	r0, [pc, #88]	; (d77c <mbox_nrf_set_enabled+0x9c>)
    d722:	aa04      	add	r2, sp, #16
    d724:	f7f7 fbae 	bl	4e84 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
    d728:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    d72c:	b913      	cbnz	r3, d734 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
    d72e:	202a      	movs	r0, #42	; 0x2a
    d730:	f7f8 fd7c 	bl	622c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
    d734:	2201      	movs	r2, #1
    d736:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    d73a:	40a2      	lsls	r2, r4
    d73c:	4313      	orrs	r3, r2
    d73e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    d742:	b2e0      	uxtb	r0, r4
    d744:	f007 f958 	bl	149f8 <nrfx_ipc_receive_event_enable>
    d748:	e00a      	b.n	d760 <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
    d74a:	b2c8      	uxtb	r0, r1
    d74c:	f007 f95c 	bl	14a08 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
    d750:	2201      	movs	r2, #1
    d752:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    d756:	40a2      	lsls	r2, r4
    d758:	ea23 0302 	bic.w	r3, r3, r2
    d75c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
    d760:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    d764:	b913      	cbnz	r3, d76c <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
    d766:	202a      	movs	r0, #42	; 0x2a
    d768:	f7f8 fd6e 	bl	6248 <arch_irq_disable>
	return 0;
    d76c:	2000      	movs	r0, #0
}
    d76e:	b007      	add	sp, #28
    d770:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    d772:	f06f 0015 	mvn.w	r0, #21
    d776:	e7fa      	b.n	d76e <mbox_nrf_set_enabled+0x8e>
    d778:	00033604 	.word	0x00033604
    d77c:	00024ca8 	.word	0x00024ca8

0000d780 <mbox_nrf_send>:
{
    d780:	b530      	push	{r4, r5, lr}
    d782:	4605      	mov	r5, r0
    d784:	460c      	mov	r4, r1
    d786:	b087      	sub	sp, #28
	if (msg) {
    d788:	b152      	cbz	r2, d7a0 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
    d78a:	4b10      	ldr	r3, [pc, #64]	; (d7cc <mbox_nrf_send+0x4c>)
    d78c:	9305      	str	r3, [sp, #20]
    d78e:	2302      	movs	r3, #2
    d790:	9304      	str	r3, [sp, #16]
    d792:	2300      	movs	r3, #0
    d794:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d798:	480d      	ldr	r0, [pc, #52]	; (d7d0 <mbox_nrf_send+0x50>)
    d79a:	aa04      	add	r2, sp, #16
    d79c:	f7f7 fb72 	bl	4e84 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    d7a0:	2c0f      	cmp	r4, #15
    d7a2:	d80f      	bhi.n	d7c4 <mbox_nrf_send+0x44>
    d7a4:	686b      	ldr	r3, [r5, #4]
    d7a6:	685b      	ldr	r3, [r3, #4]
    d7a8:	40e3      	lsrs	r3, r4
    d7aa:	07db      	lsls	r3, r3, #31
    d7ac:	d50a      	bpl.n	d7c4 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d7ae:	2301      	movs	r3, #1
	return 0;
    d7b0:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    d7b2:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d7b4:	b2e4      	uxtb	r4, r4
    d7b6:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    d7ba:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
    d7be:	6023      	str	r3, [r4, #0]
}
    d7c0:	b007      	add	sp, #28
    d7c2:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    d7c4:	f06f 0015 	mvn.w	r0, #21
    d7c8:	e7fa      	b.n	d7c0 <mbox_nrf_send+0x40>
    d7ca:	bf00      	nop
    d7cc:	00033634 	.word	0x00033634
    d7d0:	00024ca8 	.word	0x00024ca8

0000d7d4 <mbox_dispatcher>:
{
    d7d4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
    d7d6:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    d7da:	280f      	cmp	r0, #15
{
    d7dc:	4604      	mov	r4, r0
    d7de:	460d      	mov	r5, r1
    d7e0:	6873      	ldr	r3, [r6, #4]
    d7e2:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    d7e4:	d803      	bhi.n	d7ee <mbox_dispatcher+0x1a>
    d7e6:	681b      	ldr	r3, [r3, #0]
    d7e8:	40c3      	lsrs	r3, r0
    d7ea:	07db      	lsls	r3, r3, #31
    d7ec:	d40a      	bmi.n	d804 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
    d7ee:	4b15      	ldr	r3, [pc, #84]	; (d844 <mbox_dispatcher+0x70>)
    d7f0:	9305      	str	r3, [sp, #20]
    d7f2:	2302      	movs	r3, #2
    d7f4:	9304      	str	r3, [sp, #16]
    d7f6:	2300      	movs	r3, #0
    d7f8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d7fc:	4812      	ldr	r0, [pc, #72]	; (d848 <mbox_dispatcher+0x74>)
    d7fe:	aa04      	add	r2, sp, #16
    d800:	f7f7 fb40 	bl	4e84 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
    d804:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    d808:	40e3      	lsrs	r3, r4
    d80a:	f013 0301 	ands.w	r3, r3, #1
    d80e:	d109      	bne.n	d824 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
    d810:	4a0e      	ldr	r2, [pc, #56]	; (d84c <mbox_dispatcher+0x78>)
    d812:	9205      	str	r2, [sp, #20]
    d814:	2202      	movs	r2, #2
    d816:	9204      	str	r2, [sp, #16]
    d818:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d81c:	480a      	ldr	r0, [pc, #40]	; (d848 <mbox_dispatcher+0x74>)
    d81e:	aa04      	add	r2, sp, #16
    d820:	f7f7 fb30 	bl	4e84 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
    d824:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    d828:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    d82c:	b145      	cbz	r5, d840 <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
    d82e:	2300      	movs	r3, #0
    d830:	4621      	mov	r1, r4
    d832:	4630      	mov	r0, r6
    d834:	46ac      	mov	ip, r5
    d836:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
    d838:	b006      	add	sp, #24
    d83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
    d83e:	4760      	bx	ip
}
    d840:	b006      	add	sp, #24
    d842:	bd70      	pop	{r4, r5, r6, pc}
    d844:	0003364f 	.word	0x0003364f
    d848:	00024ca8 	.word	0x00024ca8
    d84c:	0003366b 	.word	0x0003366b

0000d850 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d850:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    d854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    d858:	4e5b      	ldr	r6, [pc, #364]	; (d9c8 <pinctrl_configure_pins+0x178>)
    d85a:	4f5c      	ldr	r7, [pc, #368]	; (d9cc <pinctrl_configure_pins+0x17c>)
    d85c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d860:	4281      	cmp	r1, r0
    d862:	d102      	bne.n	d86a <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    d864:	2000      	movs	r0, #0
}
    d866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    d86a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    d86c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    d870:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    d874:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    d876:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    d87a:	bf08      	it	eq
    d87c:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    d880:	2c22      	cmp	r4, #34	; 0x22
    d882:	f200 809d 	bhi.w	d9c0 <pinctrl_configure_pins+0x170>
    d886:	e8df f004 	tbb	[pc, r4]
    d88a:	2312      	.short	0x2312
    d88c:	3e2b4228 	.word	0x3e2b4228
    d890:	9b9b9b42 	.word	0x9b9b9b42
    d894:	9b72459b 	.word	0x9b72459b
    d898:	9b9b9b9b 	.word	0x9b9b9b9b
    d89c:	9b9b9b9b 	.word	0x9b9b9b9b
    d8a0:	83807d75 	.word	0x83807d75
    d8a4:	869b9b9b 	.word	0x869b9b9b
    d8a8:	95928f8c 	.word	0x95928f8c
    d8ac:	98          	.byte	0x98
    d8ad:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    d8ae:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    d8b2:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    d8b6:	f1b8 0f01 	cmp.w	r8, #1
    d8ba:	bf14      	ite	ne
    d8bc:	46b6      	movne	lr, r6
    d8be:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    d8c0:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d8c4:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    d8c8:	f8ce 4008 	str.w	r4, [lr, #8]
    d8cc:	2401      	movs	r4, #1
    d8ce:	e002      	b.n	d8d6 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    d8d0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d8d4:	2400      	movs	r4, #0
    d8d6:	46a6      	mov	lr, r4
    d8d8:	e023      	b.n	d922 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    d8da:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    d8de:	e7e8      	b.n	d8b2 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d8e0:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    d8e2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    d8e6:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    d8ea:	f1b9 0f01 	cmp.w	r9, #1
    d8ee:	bf14      	ite	ne
    d8f0:	46b0      	movne	r8, r6
    d8f2:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    d8f4:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d8f8:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    d8fc:	f8c8 e00c 	str.w	lr, [r8, #12]
    d900:	f04f 0e01 	mov.w	lr, #1
    d904:	e00d      	b.n	d922 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    d906:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    d90a:	2401      	movs	r4, #1
    d90c:	e7eb      	b.n	d8e6 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    d90e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    d912:	e7df      	b.n	d8d4 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    d914:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    d918:	2d00      	cmp	r5, #0
    d91a:	d1db      	bne.n	d8d4 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d91c:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    d91e:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d920:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    d922:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    d926:	f003 091f 	and.w	r9, r3, #31
    d92a:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d92e:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    d932:	ea4f 1353 	mov.w	r3, r3, lsr #5
    d936:	bf1c      	itt	ne
    d938:	2401      	movne	r4, #1
    d93a:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    d93e:	2b01      	cmp	r3, #1
    d940:	bf0c      	ite	eq
    d942:	46b8      	moveq	r8, r7
    d944:	46b0      	movne	r8, r6
    d946:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    d94a:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    d94e:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    d952:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    d956:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d958:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    d95c:	ea43 030e 	orr.w	r3, r3, lr
    d960:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    d964:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    d968:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d96c:	e778      	b.n	d860 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    d96e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    d972:	e7d1      	b.n	d918 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    d974:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    d978:	6804      	ldr	r4, [r0, #0]
    d97a:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    d97e:	2c00      	cmp	r4, #0
    d980:	d0c3      	beq.n	d90a <pinctrl_configure_pins+0xba>
    d982:	e796      	b.n	d8b2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    d984:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    d988:	e7f6      	b.n	d978 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    d98a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    d98e:	e7f3      	b.n	d978 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    d990:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    d994:	e7f0      	b.n	d978 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    d996:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d99a:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d99c:	f04f 0e00 	mov.w	lr, #0
    d9a0:	e7bf      	b.n	d922 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    d9a2:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    d9a6:	e784      	b.n	d8b2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    d9a8:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    d9ac:	e7f5      	b.n	d99a <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    d9ae:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    d9b2:	e7f2      	b.n	d99a <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    d9b4:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    d9b8:	e7ef      	b.n	d99a <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    d9ba:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    d9be:	e7ec      	b.n	d99a <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    d9c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d9c4:	e74f      	b.n	d866 <pinctrl_configure_pins+0x16>
    d9c6:	bf00      	nop
    d9c8:	50842500 	.word	0x50842500
    d9cc:	50842800 	.word	0x50842800

0000d9d0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    d9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    d9d2:	794b      	ldrb	r3, [r1, #5]
    d9d4:	2b01      	cmp	r3, #1
    d9d6:	d029      	beq.n	da2c <uarte_nrfx_configure+0x5c>
    d9d8:	2b03      	cmp	r3, #3
    d9da:	d124      	bne.n	da26 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d9dc:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d9de:	798b      	ldrb	r3, [r1, #6]
    d9e0:	2b03      	cmp	r3, #3
    d9e2:	d120      	bne.n	da26 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    d9e4:	79ce      	ldrb	r6, [r1, #7]
    d9e6:	b10e      	cbz	r6, d9ec <uarte_nrfx_configure+0x1c>
    d9e8:	2e01      	cmp	r6, #1
    d9ea:	d11c      	bne.n	da26 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    d9ec:	790a      	ldrb	r2, [r1, #4]
    d9ee:	2a01      	cmp	r2, #1
    d9f0:	d01e      	beq.n	da30 <uarte_nrfx_configure+0x60>
    d9f2:	2a02      	cmp	r2, #2
    d9f4:	d020      	beq.n	da38 <uarte_nrfx_configure+0x68>
    d9f6:	b9b2      	cbnz	r2, da26 <uarte_nrfx_configure+0x56>
    d9f8:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d9fa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    d9fc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    d9fe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    da02:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    da06:	d06e      	beq.n	dae6 <uarte_nrfx_configure+0x116>
    da08:	d833      	bhi.n	da72 <uarte_nrfx_configure+0xa2>
    da0a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    da0e:	d06d      	beq.n	daec <uarte_nrfx_configure+0x11c>
    da10:	d81c      	bhi.n	da4c <uarte_nrfx_configure+0x7c>
    da12:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    da16:	d06b      	beq.n	daf0 <uarte_nrfx_configure+0x120>
    da18:	d810      	bhi.n	da3c <uarte_nrfx_configure+0x6c>
    da1a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    da1e:	d06a      	beq.n	daf6 <uarte_nrfx_configure+0x126>
    da20:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    da24:	d06a      	beq.n	dafc <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    da26:	f06f 0085 	mvn.w	r0, #133	; 0x85
    da2a:	e05b      	b.n	dae4 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    da2c:	2700      	movs	r7, #0
    da2e:	e7d6      	b.n	d9de <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    da30:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    da34:	220e      	movs	r2, #14
    da36:	e7e0      	b.n	d9fa <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    da38:	2400      	movs	r4, #0
    da3a:	e7fb      	b.n	da34 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    da3c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    da40:	d05f      	beq.n	db02 <uarte_nrfx_configure+0x132>
    da42:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    da46:	d1ee      	bne.n	da26 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    da48:	4b38      	ldr	r3, [pc, #224]	; (db2c <uarte_nrfx_configure+0x15c>)
    da4a:	e03c      	b.n	dac6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    da4c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    da50:	d05a      	beq.n	db08 <uarte_nrfx_configure+0x138>
    da52:	d807      	bhi.n	da64 <uarte_nrfx_configure+0x94>
    da54:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    da58:	d058      	beq.n	db0c <uarte_nrfx_configure+0x13c>
    da5a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    da5e:	d1e2      	bne.n	da26 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    da60:	4b33      	ldr	r3, [pc, #204]	; (db30 <uarte_nrfx_configure+0x160>)
    da62:	e030      	b.n	dac6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    da64:	f647 2512 	movw	r5, #31250	; 0x7a12
    da68:	42ab      	cmp	r3, r5
    da6a:	d1dc      	bne.n	da26 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    da6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    da70:	e029      	b.n	dac6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    da72:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    da76:	d04b      	beq.n	db10 <uarte_nrfx_configure+0x140>
    da78:	d813      	bhi.n	daa2 <uarte_nrfx_configure+0xd2>
    da7a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    da7e:	d04a      	beq.n	db16 <uarte_nrfx_configure+0x146>
    da80:	d809      	bhi.n	da96 <uarte_nrfx_configure+0xc6>
    da82:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    da86:	42ab      	cmp	r3, r5
    da88:	d047      	beq.n	db1a <uarte_nrfx_configure+0x14a>
    da8a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    da8e:	d1ca      	bne.n	da26 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    da90:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    da94:	e017      	b.n	dac6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    da96:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    da9a:	d1c4      	bne.n	da26 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    da9c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    daa0:	e011      	b.n	dac6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    daa2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    daa6:	d03b      	beq.n	db20 <uarte_nrfx_configure+0x150>
    daa8:	d808      	bhi.n	dabc <uarte_nrfx_configure+0xec>
    daaa:	4d22      	ldr	r5, [pc, #136]	; (db34 <uarte_nrfx_configure+0x164>)
    daac:	42ab      	cmp	r3, r5
    daae:	d03a      	beq.n	db26 <uarte_nrfx_configure+0x156>
    dab0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    dab4:	d1b7      	bne.n	da26 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    dab6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    daba:	e004      	b.n	dac6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    dabc:	4d1e      	ldr	r5, [pc, #120]	; (db38 <uarte_nrfx_configure+0x168>)
    dabe:	42ab      	cmp	r3, r5
    dac0:	d1b1      	bne.n	da26 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    dac2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    dac6:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    dac8:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    dacc:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    dace:	433a      	orrs	r2, r7
    dad0:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    dad2:	4334      	orrs	r4, r6
    dad4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    dad6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    dada:	1d2b      	adds	r3, r5, #4
    dadc:	c903      	ldmia	r1, {r0, r1}
    dade:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    dae2:	2000      	movs	r0, #0
}
    dae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    dae6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    daea:	e7ec      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    daec:	4b13      	ldr	r3, [pc, #76]	; (db3c <uarte_nrfx_configure+0x16c>)
    daee:	e7ea      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    daf0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    daf4:	e7e7      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    daf6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    dafa:	e7e4      	b.n	dac6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    dafc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    db00:	e7e1      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    db02:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    db06:	e7de      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    db08:	4b0d      	ldr	r3, [pc, #52]	; (db40 <uarte_nrfx_configure+0x170>)
    db0a:	e7dc      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    db0c:	4b0d      	ldr	r3, [pc, #52]	; (db44 <uarte_nrfx_configure+0x174>)
    db0e:	e7da      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    db10:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    db14:	e7d7      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    db16:	4b0c      	ldr	r3, [pc, #48]	; (db48 <uarte_nrfx_configure+0x178>)
    db18:	e7d5      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    db1a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    db1e:	e7d2      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    db20:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    db24:	e7cf      	b.n	dac6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    db26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    db2a:	e7cc      	b.n	dac6 <uarte_nrfx_configure+0xf6>
    db2c:	0013b000 	.word	0x0013b000
    db30:	004ea000 	.word	0x004ea000
    db34:	0003d090 	.word	0x0003d090
    db38:	000f4240 	.word	0x000f4240
    db3c:	00275000 	.word	0x00275000
    db40:	0075c000 	.word	0x0075c000
    db44:	003af000 	.word	0x003af000
    db48:	013a9000 	.word	0x013a9000

0000db4c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    db4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    db50:	4680      	mov	r8, r0
    db52:	b087      	sub	sp, #28
    db54:	2200      	movs	r2, #0
    db56:	2101      	movs	r1, #1
    db58:	2008      	movs	r0, #8
    db5a:	f7f8 fb97 	bl	628c <z_arm_irq_priority_set>
    db5e:	2008      	movs	r0, #8
    db60:	f7f8 fb64 	bl	622c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    db64:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    db66:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    db6a:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    db6e:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    db70:	466a      	mov	r2, sp
    db72:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    db76:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    db7a:	f8d7 900c 	ldr.w	r9, [r7, #12]
    db7e:	4648      	mov	r0, r9
    db80:	f014 fed4 	bl	2292c <pinctrl_lookup_state>
	if (ret < 0) {
    db84:	1e05      	subs	r5, r0, #0
    db86:	db25      	blt.n	dbd4 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    db88:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    db8a:	f8d9 2000 	ldr.w	r2, [r9]
    db8e:	7919      	ldrb	r1, [r3, #4]
    db90:	6818      	ldr	r0, [r3, #0]
    db92:	f7ff fe5d 	bl	d850 <pinctrl_configure_pins>
	if (err < 0) {
    db96:	1e05      	subs	r5, r0, #0
    db98:	db1c      	blt.n	dbd4 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    db9a:	4640      	mov	r0, r8
    db9c:	1d31      	adds	r1, r6, #4
    db9e:	f7ff ff17 	bl	d9d0 <uarte_nrfx_configure>
	if (err) {
    dba2:	4605      	mov	r5, r0
    dba4:	b9b0      	cbnz	r0, dbd4 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    dba6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    dba8:	0799      	lsls	r1, r3, #30
    dbaa:	d524      	bpl.n	dbf6 <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    dbac:	f106 0018 	add.w	r0, r6, #24
    dbb0:	f006 fb6c 	bl	1428c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    dbb4:	4b24      	ldr	r3, [pc, #144]	; (dc48 <uarte_0_init+0xfc>)
    dbb6:	4298      	cmp	r0, r3
    dbb8:	d010      	beq.n	dbdc <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    dbba:	4b24      	ldr	r3, [pc, #144]	; (dc4c <uarte_0_init+0x100>)
    dbbc:	9305      	str	r3, [sp, #20]
    dbbe:	2302      	movs	r3, #2
    dbc0:	9304      	str	r3, [sp, #16]
    dbc2:	462b      	mov	r3, r5
		return -EIO;
    dbc4:	f06f 0504 	mvn.w	r5, #4
    dbc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dbcc:	4820      	ldr	r0, [pc, #128]	; (dc50 <uarte_0_init+0x104>)
    dbce:	aa04      	add	r2, sp, #16
    dbd0:	f7f7 f958 	bl	4e84 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    dbd4:	4628      	mov	r0, r5
    dbd6:	b007      	add	sp, #28
    dbd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dbdc:	7e33      	ldrb	r3, [r6, #24]
    dbde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dbe2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dbe6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    dbea:	2301      	movs	r3, #1
    dbec:	7e32      	ldrb	r2, [r6, #24]
    dbee:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    dbf0:	4a18      	ldr	r2, [pc, #96]	; (dc54 <uarte_0_init+0x108>)
    dbf2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dbf6:	2308      	movs	r3, #8
    dbf8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    dbfc:	7a3b      	ldrb	r3, [r7, #8]
    dbfe:	b953      	cbnz	r3, dc16 <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc00:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    dc04:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    dc08:	6973      	ldr	r3, [r6, #20]
    dc0a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    dc0e:	2301      	movs	r3, #1
    dc10:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc14:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    dc1a:	bf5c      	itt	pl
    dc1c:	f44f 7380 	movpl.w	r3, #256	; 0x100
    dc20:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    dc24:	687b      	ldr	r3, [r7, #4]
    dc26:	06db      	lsls	r3, r3, #27
    dc28:	bf44      	itt	mi
    dc2a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    dc2e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dc32:	6933      	ldr	r3, [r6, #16]
    dc34:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dc38:	2300      	movs	r3, #0
    dc3a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc3e:	2301      	movs	r3, #1
    dc40:	60a3      	str	r3, [r4, #8]
    dc42:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    dc44:	e7c6      	b.n	dbd4 <uarte_0_init+0x88>
    dc46:	bf00      	nop
    dc48:	0bad0000 	.word	0x0bad0000
    dc4c:	000336a1 	.word	0x000336a1
    dc50:	00024d90 	.word	0x00024d90
    dc54:	50017000 	.word	0x50017000

0000dc58 <uarte_nrfx_poll_out>:
{
    dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc5a:	4604      	mov	r4, r0
    dc5c:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    dc5e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    dc60:	f016 f8e2 	bl	23e28 <k_is_in_isr>
    dc64:	b9b0      	cbnz	r0, dc94 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    dc66:	4b2e      	ldr	r3, [pc, #184]	; (dd20 <uarte_nrfx_poll_out+0xc8>)
    dc68:	781b      	ldrb	r3, [r3, #0]
    dc6a:	b19b      	cbz	r3, dc94 <uarte_nrfx_poll_out+0x3c>
{
    dc6c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    dc6e:	6860      	ldr	r0, [r4, #4]
    dc70:	f014 fe92 	bl	22998 <is_tx_ready.isra.0>
    dc74:	bb00      	cbnz	r0, dcb8 <uarte_nrfx_poll_out+0x60>
    dc76:	2001      	movs	r0, #1
    dc78:	f015 fe6e 	bl	23958 <nrfx_busy_wait>
    dc7c:	3e01      	subs	r6, #1
    dc7e:	d1f6      	bne.n	dc6e <uarte_nrfx_poll_out+0x16>
    dc80:	2100      	movs	r1, #0
    dc82:	2021      	movs	r0, #33	; 0x21
    dc84:	f008 fb52 	bl	1632c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    dc88:	e7f0      	b.n	dc6c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    dc8a:	f386 8811 	msr	BASEPRI, r6
    dc8e:	f3bf 8f6f 	isb	sy
}
    dc92:	e7f5      	b.n	dc80 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    dc94:	f04f 0320 	mov.w	r3, #32
    dc98:	f3ef 8611 	mrs	r6, BASEPRI
    dc9c:	f383 8812 	msr	BASEPRI_MAX, r3
    dca0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    dca4:	6860      	ldr	r0, [r4, #4]
    dca6:	4631      	mov	r1, r6
    dca8:	f014 fe76 	bl	22998 <is_tx_ready.isra.0>
    dcac:	b990      	cbnz	r0, dcd4 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    dcae:	f386 8811 	msr	BASEPRI, r6
    dcb2:	f3bf 8f6f 	isb	sy
}
    dcb6:	e7ed      	b.n	dc94 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    dcb8:	f04f 0320 	mov.w	r3, #32
    dcbc:	f3ef 8611 	mrs	r6, BASEPRI
    dcc0:	f383 8812 	msr	BASEPRI_MAX, r3
    dcc4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    dcc8:	6860      	ldr	r0, [r4, #4]
    dcca:	4631      	mov	r1, r6
    dccc:	f014 fe64 	bl	22998 <is_tx_ready.isra.0>
    dcd0:	2800      	cmp	r0, #0
    dcd2:	d0da      	beq.n	dc8a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    dcd4:	693b      	ldr	r3, [r7, #16]
    dcd6:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    dcd8:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dcda:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    dcdc:	6813      	ldr	r3, [r2, #0]
    dcde:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dce2:	2001      	movs	r0, #1
    dce4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dce8:	2000      	movs	r0, #0
    dcea:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    dcee:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    dcf2:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    dcf6:	6852      	ldr	r2, [r2, #4]
    dcf8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    dcfc:	06d2      	lsls	r2, r2, #27
    dcfe:	d508      	bpl.n	dd12 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dd00:	2008      	movs	r0, #8
	return config->uarte_regs;
    dd02:	6862      	ldr	r2, [r4, #4]
    dd04:	6812      	ldr	r2, [r2, #0]
    dd06:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    dd0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    dd0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd12:	2201      	movs	r2, #1
    dd14:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    dd16:	f381 8811 	msr	BASEPRI, r1
    dd1a:	f3bf 8f6f 	isb	sy
}
    dd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd20:	2000554d 	.word	0x2000554d

0000dd24 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    dd24:	2301      	movs	r3, #1
    dd26:	4083      	lsls	r3, r0
{
    dd28:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    dd2a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dd2c:	4a0b      	ldr	r2, [pc, #44]	; (dd5c <compare_int_lock+0x38>)
    dd2e:	e8d2 1fef 	ldaex	r1, [r2]
    dd32:	ea01 0504 	and.w	r5, r1, r4
    dd36:	e8c2 5fe6 	stlex	r6, r5, [r2]
    dd3a:	2e00      	cmp	r6, #0
    dd3c:	d1f7      	bne.n	dd2e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dd3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    dd42:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    dd44:	4806      	ldr	r0, [pc, #24]	; (dd60 <compare_int_lock+0x3c>)
    dd46:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    dd4a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dd4e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    dd52:	420b      	tst	r3, r1
}
    dd54:	bf14      	ite	ne
    dd56:	2001      	movne	r0, #1
    dd58:	2000      	moveq	r0, #0
    dd5a:	bd70      	pop	{r4, r5, r6, pc}
    dd5c:	20003a30 	.word	0x20003a30
    dd60:	50015000 	.word	0x50015000

0000dd64 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    dd64:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    dd66:	490e      	ldr	r1, [pc, #56]	; (dda0 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    dd68:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    dd6c:	e9d1 3400 	ldrd	r3, r4, [r1]
    dd70:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    dd72:	18c3      	adds	r3, r0, r3
    dd74:	f144 0400 	adc.w	r4, r4, #0
    dd78:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    dd7c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    dd80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    dd84:	d209      	bcs.n	dd9a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    dd86:	4b07      	ldr	r3, [pc, #28]	; (dda4 <sys_clock_timeout_handler+0x40>)
    dd88:	681b      	ldr	r3, [r3, #0]
    dd8a:	0a1a      	lsrs	r2, r3, #8
    dd8c:	061b      	lsls	r3, r3, #24
    dd8e:	199c      	adds	r4, r3, r6
    dd90:	4b05      	ldr	r3, [pc, #20]	; (dda8 <sys_clock_timeout_handler+0x44>)
    dd92:	f142 0500 	adc.w	r5, r2, #0
    dd96:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    dd9a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    dd9c:	f008 bcb0 	b.w	16700 <sys_clock_announce>
    dda0:	20002588 	.word	0x20002588
    dda4:	20003a34 	.word	0x20003a34
    dda8:	20002590 	.word	0x20002590

0000ddac <compare_int_unlock>:
	if (key) {
    ddac:	b1d9      	cbz	r1, dde6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    ddae:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ddb0:	4a0d      	ldr	r2, [pc, #52]	; (dde8 <compare_int_unlock+0x3c>)
    ddb2:	4083      	lsls	r3, r0
    ddb4:	e8d2 cfef 	ldaex	ip, [r2]
    ddb8:	ea4c 0c03 	orr.w	ip, ip, r3
    ddbc:	e8c2 cfe1 	stlex	r1, ip, [r2]
    ddc0:	2900      	cmp	r1, #0
    ddc2:	d1f7      	bne.n	ddb4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ddc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    ddc8:	4a08      	ldr	r2, [pc, #32]	; (ddec <compare_int_unlock+0x40>)
    ddca:	4083      	lsls	r3, r0
    ddcc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ddd0:	4b07      	ldr	r3, [pc, #28]	; (ddf0 <compare_int_unlock+0x44>)
    ddd2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    ddd6:	40c3      	lsrs	r3, r0
    ddd8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ddda:	bf42      	ittt	mi
    dddc:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    dde0:	4b04      	ldrmi	r3, [pc, #16]	; (ddf4 <compare_int_unlock+0x48>)
    dde2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    dde6:	4770      	bx	lr
    dde8:	20003a30 	.word	0x20003a30
    ddec:	50015000 	.word	0x50015000
    ddf0:	20003a28 	.word	0x20003a28
    ddf4:	e000e100 	.word	0xe000e100

0000ddf8 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    ddf8:	b2c3      	uxtb	r3, r0
}
    ddfa:	4802      	ldr	r0, [pc, #8]	; (de04 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    ddfc:	009b      	lsls	r3, r3, #2
    ddfe:	4418      	add	r0, r3
    de00:	4770      	bx	lr
    de02:	bf00      	nop
    de04:	50015140 	.word	0x50015140

0000de08 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
    de08:	4b02      	ldr	r3, [pc, #8]	; (de14 <z_nrf_rtc_timer_compare_read+0xc>)
    de0a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    de0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    de12:	4770      	bx	lr
    de14:	50015000 	.word	0x50015000

0000de18 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    de18:	4b0d      	ldr	r3, [pc, #52]	; (de50 <z_nrf_rtc_timer_read+0x38>)
    de1a:	6818      	ldr	r0, [r3, #0]
    de1c:	0a01      	lsrs	r1, r0, #8
    de1e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    de20:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    de24:	4b0b      	ldr	r3, [pc, #44]	; (de54 <z_nrf_rtc_timer_read+0x3c>)
    de26:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    de2a:	1818      	adds	r0, r3, r0
    de2c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    de30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    de34:	d20a      	bcs.n	de4c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    de36:	4b08      	ldr	r3, [pc, #32]	; (de58 <z_nrf_rtc_timer_read+0x40>)
    de38:	e9d3 2300 	ldrd	r2, r3, [r3]
    de3c:	4290      	cmp	r0, r2
    de3e:	eb71 0303 	sbcs.w	r3, r1, r3
    de42:	d203      	bcs.n	de4c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    de44:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    de48:	f141 0100 	adc.w	r1, r1, #0
}
    de4c:	4770      	bx	lr
    de4e:	bf00      	nop
    de50:	20003a34 	.word	0x20003a34
    de54:	50015000 	.word	0x50015000
    de58:	20002590 	.word	0x20002590

0000de5c <compare_set>:
{
    de5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de60:	4616      	mov	r6, r2
    de62:	461f      	mov	r7, r3
    de64:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    de66:	f7ff ff5d 	bl	dd24 <compare_int_lock>
    de6a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    de6c:	f7ff ffd4 	bl	de18 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    de70:	42b0      	cmp	r0, r6
    de72:	eb71 0307 	sbcs.w	r3, r1, r7
    de76:	d250      	bcs.n	df1a <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    de78:	4b38      	ldr	r3, [pc, #224]	; (df5c <compare_set+0x100>)
    de7a:	1a30      	subs	r0, r6, r0
    de7c:	eb67 0101 	sbc.w	r1, r7, r1
    de80:	4298      	cmp	r0, r3
    de82:	f171 0100 	sbcs.w	r1, r1, #0
    de86:	d265      	bcs.n	df54 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    de88:	4b35      	ldr	r3, [pc, #212]	; (df60 <compare_set+0x104>)
    de8a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    de8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    de92:	429f      	cmp	r7, r3
    de94:	bf08      	it	eq
    de96:	4296      	cmpeq	r6, r2
    de98:	d049      	beq.n	df2e <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    de9a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    de9e:	4931      	ldr	r1, [pc, #196]	; (df64 <compare_set+0x108>)
    dea0:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    dea4:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    dea6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    deaa:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    deae:	f014 fdbd 	bl	22a2c <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    deb2:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    deb6:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    deb8:	f104 0550 	add.w	r5, r4, #80	; 0x50
    debc:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    debe:	b2ad      	uxth	r5, r5
    dec0:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    dec4:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    dec8:	4a27      	ldr	r2, [pc, #156]	; (df68 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    deca:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    dece:	9301      	str	r3, [sp, #4]
    ded0:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ded4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    ded8:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    dedc:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    dee0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    dee4:	eba0 0008 	sub.w	r0, r0, r8
    dee8:	3803      	subs	r0, #3
    deea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    deee:	4290      	cmp	r0, r2
    def0:	d91d      	bls.n	df2e <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    def2:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    def4:	b160      	cbz	r0, df10 <compare_set+0xb4>
     return p_reg->COUNTER;
    def6:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    defa:	eba8 000b 	sub.w	r0, r8, fp
    defe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    df02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    df06:	d912      	bls.n	df2e <compare_set+0xd2>
					event_clear(chan);
    df08:	4620      	mov	r0, r4
    df0a:	f014 fd8f 	bl	22a2c <event_clear>
    df0e:	4a16      	ldr	r2, [pc, #88]	; (df68 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    df10:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    df14:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    df18:	e7da      	b.n	ded0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    df1a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    df1c:	4a13      	ldr	r2, [pc, #76]	; (df6c <compare_set+0x110>)
    df1e:	40a3      	lsls	r3, r4
    df20:	e8d2 0fef 	ldaex	r0, [r2]
    df24:	4318      	orrs	r0, r3
    df26:	e8c2 0fe1 	stlex	r1, r0, [r2]
    df2a:	2900      	cmp	r1, #0
    df2c:	d1f8      	bne.n	df20 <compare_set+0xc4>
	return ret;
    df2e:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    df30:	490b      	ldr	r1, [pc, #44]	; (df60 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    df32:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    df34:	0123      	lsls	r3, r4, #4
    df36:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    df3a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    df3c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    df40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    df42:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    df44:	4620      	mov	r0, r4
    df46:	9900      	ldr	r1, [sp, #0]
    df48:	f7ff ff30 	bl	ddac <compare_int_unlock>
}
    df4c:	4628      	mov	r0, r5
    df4e:	b003      	add	sp, #12
    df50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    df54:	f06f 0515 	mvn.w	r5, #21
    df58:	e7f4      	b.n	df44 <compare_set+0xe8>
    df5a:	bf00      	nop
    df5c:	00800001 	.word	0x00800001
    df60:	20002568 	.word	0x20002568
    df64:	50015000 	.word	0x50015000
    df68:	007ffffd 	.word	0x007ffffd
    df6c:	20003a28 	.word	0x20003a28

0000df70 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    df70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
    df72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
    df76:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    df78:	f04f 30ff 	mov.w	r0, #4294967295
    df7c:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    df80:	4c1c      	ldr	r4, [pc, #112]	; (dff4 <sys_clock_driver_init+0x84>)
    df82:	4b1d      	ldr	r3, [pc, #116]	; (dff8 <sys_clock_driver_init+0x88>)
    p_reg->INTENSET = mask;
    df84:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    df86:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    df8a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    df8e:	4b1b      	ldr	r3, [pc, #108]	; (dffc <sys_clock_driver_init+0x8c>)
    p_reg->PRESCALER = val;
    df90:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    df94:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    df98:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    df9c:	e9c3 0106 	strd	r0, r1, [r3, #24]
    dfa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dfa4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    dfa8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    dfac:	4b14      	ldr	r3, [pc, #80]	; (e000 <sys_clock_driver_init+0x90>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    dfae:	2101      	movs	r1, #1
    dfb0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    dfb4:	2015      	movs	r0, #21
    dfb6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    dfba:	462a      	mov	r2, r5
    dfbc:	f7f8 f966 	bl	628c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    dfc0:	2015      	movs	r0, #21
    dfc2:	f7f8 f933 	bl	622c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    dfc6:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    dfc8:	2203      	movs	r2, #3
    dfca:	60a3      	str	r3, [r4, #8]
    dfcc:	6023      	str	r3, [r4, #0]
    dfce:	4b0d      	ldr	r3, [pc, #52]	; (e004 <sys_clock_driver_init+0x94>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    dfd0:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
    dfd2:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    dfd4:	4b0c      	ldr	r3, [pc, #48]	; (e008 <sys_clock_driver_init+0x98>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    dfd6:	4a0d      	ldr	r2, [pc, #52]	; (e00c <sys_clock_driver_init+0x9c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    dfd8:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    dfda:	4b0d      	ldr	r3, [pc, #52]	; (e010 <sys_clock_driver_init+0xa0>)
    dfdc:	9501      	str	r5, [sp, #4]
    dfde:	9300      	str	r3, [sp, #0]
    dfe0:	2300      	movs	r3, #0
    dfe2:	f7ff ff3b 	bl	de5c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    dfe6:	4630      	mov	r0, r6
    dfe8:	f7ff f8ac 	bl	d144 <z_nrf_clock_control_lf_on>

	return 0;
}
    dfec:	4628      	mov	r0, r5
    dfee:	b002      	add	sp, #8
    dff0:	bd70      	pop	{r4, r5, r6, pc}
    dff2:	bf00      	nop
    dff4:	50015000 	.word	0x50015000
    dff8:	000f0003 	.word	0x000f0003
    dffc:	20002568 	.word	0x20002568
    e000:	e000e100 	.word	0xe000e100
    e004:	20003a30 	.word	0x20003a30
    e008:	20003a2c 	.word	0x20003a2c
    e00c:	007fffff 	.word	0x007fffff
    e010:	0000dd65 	.word	0x0000dd65

0000e014 <rtc_nrf_isr>:
{
    e014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
    e018:	4b39      	ldr	r3, [pc, #228]	; (e100 <rtc_nrf_isr+0xec>)
    e01a:	b085      	sub	sp, #20
    e01c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    e020:	0792      	lsls	r2, r2, #30
    e022:	d50b      	bpl.n	e03c <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e024:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    e028:	b142      	cbz	r2, e03c <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e02a:	2200      	movs	r2, #0
    e02c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    e030:	4a34      	ldr	r2, [pc, #208]	; (e104 <rtc_nrf_isr+0xf0>)
    e032:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    e036:	6813      	ldr	r3, [r2, #0]
    e038:	3301      	adds	r3, #1
    e03a:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e03c:	4d32      	ldr	r5, [pc, #200]	; (e108 <rtc_nrf_isr+0xf4>)
    e03e:	2400      	movs	r4, #0
    e040:	46a8      	mov	r8, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    e042:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    return p_reg->INTENSET & mask;
    e046:	4f2e      	ldr	r7, [pc, #184]	; (e100 <rtc_nrf_isr+0xec>)
    e048:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
    e04c:	fa06 f904 	lsl.w	r9, r6, r4
    e050:	ea19 0f03 	tst.w	r9, r3
    e054:	d02e      	beq.n	e0b4 <rtc_nrf_isr+0xa0>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    e056:	2301      	movs	r3, #1
    e058:	40a3      	lsls	r3, r4
    e05a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e05c:	492b      	ldr	r1, [pc, #172]	; (e10c <rtc_nrf_isr+0xf8>)
    e05e:	e8d1 2fef 	ldaex	r2, [r1]
    e062:	ea02 0003 	and.w	r0, r2, r3
    e066:	e8c1 0fec 	stlex	ip, r0, [r1]
    e06a:	f1bc 0f00 	cmp.w	ip, #0
    e06e:	d1f6      	bne.n	e05e <rtc_nrf_isr+0x4a>
    e070:	fa22 f304 	lsr.w	r3, r2, r4
    e074:	07db      	lsls	r3, r3, #31
    e076:	d403      	bmi.n	e080 <rtc_nrf_isr+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e078:	4b25      	ldr	r3, [pc, #148]	; (e110 <rtc_nrf_isr+0xfc>)
    e07a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    e07e:	b1cb      	cbz	r3, e0b4 <rtc_nrf_isr+0xa0>
			event_clear(chan);
    e080:	4620      	mov	r0, r4
    e082:	f014 fcd3 	bl	22a2c <event_clear>
		curr_time = z_nrf_rtc_timer_read();
    e086:	f7ff fec7 	bl	de18 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    e08a:	f04f 0220 	mov.w	r2, #32
    e08e:	f3ef 8311 	mrs	r3, BASEPRI
    e092:	f382 8812 	msr	BASEPRI_MAX, r2
    e096:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    e09a:	eb08 1c04 	add.w	ip, r8, r4, lsl #4
    e09e:	e9dc ab02 	ldrd	sl, fp, [ip, #8]
		if (curr_time >= expire_time) {
    e0a2:	4550      	cmp	r0, sl
    e0a4:	eb71 010b 	sbcs.w	r1, r1, fp
    e0a8:	9302      	str	r3, [sp, #8]
    e0aa:	d20a      	bcs.n	e0c2 <rtc_nrf_isr+0xae>
	__asm__ volatile(
    e0ac:	f383 8811 	msr	BASEPRI, r3
    e0b0:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e0b4:	3510      	adds	r5, #16
    e0b6:	b114      	cbz	r4, e0be <rtc_nrf_isr+0xaa>
}
    e0b8:	b005      	add	sp, #20
    e0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e0be:	2401      	movs	r4, #1
    e0c0:	e7c2      	b.n	e048 <rtc_nrf_isr+0x34>
			cc_data[chan].callback = NULL;
    e0c2:	2000      	movs	r0, #0
			user_context = cc_data[chan].user_context;
    e0c4:	e9d5 1300 	ldrd	r1, r3, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    e0c8:	f04f 32ff 	mov.w	r2, #4294967295
			user_context = cc_data[chan].user_context;
    e0cc:	9303      	str	r3, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    e0ce:	f04f 33ff 	mov.w	r3, #4294967295
			cc_data[chan].callback = NULL;
    e0d2:	6028      	str	r0, [r5, #0]
    p_reg->EVTENCLR = mask;
    e0d4:	480a      	ldr	r0, [pc, #40]	; (e100 <rtc_nrf_isr+0xec>)
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    e0d6:	e9cc 2302 	strd	r2, r3, [ip, #8]
    e0da:	f8c0 9348 	str.w	r9, [r0, #840]	; 0x348
			event_clear(chan);
    e0de:	4620      	mov	r0, r4
    e0e0:	f014 fca4 	bl	22a2c <event_clear>
    e0e4:	9b02      	ldr	r3, [sp, #8]
    e0e6:	f383 8811 	msr	BASEPRI, r3
    e0ea:	f3bf 8f6f 	isb	sy
		if (handler) {
    e0ee:	2900      	cmp	r1, #0
    e0f0:	d0e0      	beq.n	e0b4 <rtc_nrf_isr+0xa0>
			handler(chan, expire_time, user_context);
    e0f2:	9b03      	ldr	r3, [sp, #12]
    e0f4:	4652      	mov	r2, sl
    e0f6:	9300      	str	r3, [sp, #0]
    e0f8:	465b      	mov	r3, fp
    e0fa:	4788      	blx	r1
    e0fc:	e7da      	b.n	e0b4 <rtc_nrf_isr+0xa0>
    e0fe:	bf00      	nop
    e100:	50015000 	.word	0x50015000
    e104:	20003a34 	.word	0x20003a34
    e108:	20002568 	.word	0x20002568
    e10c:	20003a28 	.word	0x20003a28
    e110:	50015140 	.word	0x50015140

0000e114 <z_nrf_rtc_timer_chan_alloc>:
{
    e114:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    e116:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    e118:	4b0c      	ldr	r3, [pc, #48]	; (e14c <z_nrf_rtc_timer_chan_alloc+0x38>)
    e11a:	6818      	ldr	r0, [r3, #0]
    e11c:	b190      	cbz	r0, e144 <z_nrf_rtc_timer_chan_alloc+0x30>
    e11e:	fab0 f080 	clz	r0, r0
    e122:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    e126:	fa04 f100 	lsl.w	r1, r4, r0
    e12a:	43c9      	mvns	r1, r1
    e12c:	e8d3 2fef 	ldaex	r2, [r3]
    e130:	ea02 0501 	and.w	r5, r2, r1
    e134:	e8c3 5fe6 	stlex	r6, r5, [r3]
    e138:	2e00      	cmp	r6, #0
    e13a:	d1f7      	bne.n	e12c <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    e13c:	40c2      	lsrs	r2, r0
    e13e:	07d2      	lsls	r2, r2, #31
    e140:	d5eb      	bpl.n	e11a <z_nrf_rtc_timer_chan_alloc+0x6>
}
    e142:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
    e144:	f06f 000b 	mvn.w	r0, #11
    e148:	e7fb      	b.n	e142 <z_nrf_rtc_timer_chan_alloc+0x2e>
    e14a:	bf00      	nop
    e14c:	20003a2c 	.word	0x20003a2c

0000e150 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
    e150:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e152:	4a05      	ldr	r2, [pc, #20]	; (e168 <z_nrf_rtc_timer_chan_free+0x18>)
    e154:	4083      	lsls	r3, r0
    e156:	e8d2 0fef 	ldaex	r0, [r2]
    e15a:	4318      	orrs	r0, r3
    e15c:	e8c2 0fe1 	stlex	r1, r0, [r2]
    e160:	2900      	cmp	r1, #0
    e162:	d1f8      	bne.n	e156 <z_nrf_rtc_timer_chan_free+0x6>
}
    e164:	4770      	bx	lr
    e166:	bf00      	nop
    e168:	20003a2c 	.word	0x20003a2c

0000e16c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    e16c:	1c43      	adds	r3, r0, #1
{
    e16e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    e170:	d021      	beq.n	e1b6 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    e172:	2801      	cmp	r0, #1
    e174:	dd21      	ble.n	e1ba <sys_clock_set_timeout+0x4e>
    e176:	4a12      	ldr	r2, [pc, #72]	; (e1c0 <sys_clock_set_timeout+0x54>)
    e178:	4b12      	ldr	r3, [pc, #72]	; (e1c4 <sys_clock_set_timeout+0x58>)
    e17a:	4290      	cmp	r0, r2
    e17c:	bfd4      	ite	le
    e17e:	4604      	movle	r4, r0
    e180:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    e182:	f7ff fe49 	bl	de18 <z_nrf_rtc_timer_read>
    e186:	4b10      	ldr	r3, [pc, #64]	; (e1c8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    e188:	490e      	ldr	r1, [pc, #56]	; (e1c4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e18e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    e190:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e194:	bf28      	it	cs
    e196:	2400      	movcs	r4, #0
	cyc += unannounced;
    e198:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    e19a:	428c      	cmp	r4, r1
    e19c:	bf28      	it	cs
    e19e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    e1a0:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    e1a2:	490a      	ldr	r1, [pc, #40]	; (e1cc <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    e1a4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    e1a6:	9001      	str	r0, [sp, #4]
    e1a8:	9100      	str	r1, [sp, #0]
    e1aa:	f143 0300 	adc.w	r3, r3, #0
    e1ae:	f7ff fe55 	bl	de5c <compare_set>
}
    e1b2:	b002      	add	sp, #8
    e1b4:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    e1b6:	4c03      	ldr	r4, [pc, #12]	; (e1c4 <sys_clock_set_timeout+0x58>)
    e1b8:	e7e3      	b.n	e182 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    e1ba:	2401      	movs	r4, #1
    e1bc:	e7e1      	b.n	e182 <sys_clock_set_timeout+0x16>
    e1be:	bf00      	nop
    e1c0:	007ffffe 	.word	0x007ffffe
    e1c4:	007fffff 	.word	0x007fffff
    e1c8:	20002588 	.word	0x20002588
    e1cc:	0000dd65 	.word	0x0000dd65

0000e1d0 <sys_clock_elapsed>:
{
    e1d0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    e1d2:	f7ff fe21 	bl	de18 <z_nrf_rtc_timer_read>
    e1d6:	4b02      	ldr	r3, [pc, #8]	; (e1e0 <sys_clock_elapsed+0x10>)
    e1d8:	681b      	ldr	r3, [r3, #0]
}
    e1da:	1ac0      	subs	r0, r0, r3
    e1dc:	bd08      	pop	{r3, pc}
    e1de:	bf00      	nop
    e1e0:	20002588 	.word	0x20002588

0000e1e4 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    e1e4:	2301      	movs	r3, #1
{
    e1e6:	b510      	push	{r4, lr}
    e1e8:	4c07      	ldr	r4, [pc, #28]	; (e208 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    e1ea:	2015      	movs	r0, #21
    e1ec:	6063      	str	r3, [r4, #4]
    e1ee:	f7f8 f82b 	bl	6248 <arch_irq_disable>
    e1f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    e1f6:	4b05      	ldr	r3, [pc, #20]	; (e20c <sys_clock_disable+0x28>)
    e1f8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    e1fc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    e200:	4b03      	ldr	r3, [pc, #12]	; (e210 <sys_clock_disable+0x2c>)
    e202:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    e206:	bd10      	pop	{r4, pc}
    e208:	50015000 	.word	0x50015000
    e20c:	000f0003 	.word	0x000f0003
    e210:	e000e100 	.word	0xe000e100

0000e214 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    e214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e216:	f7f6 fd55 	bl	4cc4 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    e21a:	4b07      	ldr	r3, [pc, #28]	; (e238 <k_sys_fatal_error_handler+0x24>)
    e21c:	9305      	str	r3, [sp, #20]
    e21e:	2302      	movs	r3, #2
    e220:	9304      	str	r3, [sp, #16]
    e222:	4806      	ldr	r0, [pc, #24]	; (e23c <k_sys_fatal_error_handler+0x28>)
    e224:	2300      	movs	r3, #0
    e226:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e22a:	aa04      	add	r2, sp, #16
    e22c:	f7f6 fe2a 	bl	4e84 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    e230:	2000      	movs	r0, #0
    e232:	f7f8 fc69 	bl	6b08 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    e236:	bf00      	nop
    e238:	000336da 	.word	0x000336da
    e23c:	00024c80 	.word	0x00024c80

0000e240 <wifi_nrf_utils_list_alloc>:


#include "list.h"

void *wifi_nrf_utils_list_alloc(struct wifi_nrf_osal_priv *opriv)
{
    e240:	b538      	push	{r3, r4, r5, lr}
    e242:	4605      	mov	r5, r0
	void *list = NULL;

	list = wifi_nrf_osal_llist_alloc(opriv);
    e244:	f014 fca2 	bl	22b8c <wifi_nrf_osal_llist_alloc>

	if (!list) {
    e248:	4604      	mov	r4, r0
    e24a:	b930      	cbnz	r0, e25a <wifi_nrf_utils_list_alloc+0x1a>
		wifi_nrf_osal_log_err(opriv,
    e24c:	4628      	mov	r0, r5
    e24e:	4a05      	ldr	r2, [pc, #20]	; (e264 <wifi_nrf_utils_list_alloc+0x24>)
    e250:	4905      	ldr	r1, [pc, #20]	; (e268 <wifi_nrf_utils_list_alloc+0x28>)
    e252:	f014 fc7b 	bl	22b4c <wifi_nrf_osal_log_err>
				 list);

out:
	return list;

}
    e256:	4620      	mov	r0, r4
    e258:	bd38      	pop	{r3, r4, r5, pc}
	wifi_nrf_osal_llist_init(opriv,
    e25a:	4601      	mov	r1, r0
    e25c:	4628      	mov	r0, r5
    e25e:	f014 fc9c 	bl	22b9a <wifi_nrf_osal_llist_init>
	return list;
    e262:	e7f8      	b.n	e256 <wifi_nrf_utils_list_alloc+0x16>
    e264:	00033753 	.word	0x00033753
    e268:	000336f7 	.word	0x000336f7

0000e26c <wifi_nrf_utils_list_add_tail>:


enum wifi_nrf_status wifi_nrf_utils_list_add_tail(struct wifi_nrf_osal_priv *opriv,
						  void *list,
						  void *data)
{
    e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e26e:	4604      	mov	r4, r0
    e270:	460e      	mov	r6, r1
    e272:	4617      	mov	r7, r2
	void *list_node = NULL;

	list_node = wifi_nrf_osal_llist_node_alloc(opriv);
    e274:	f014 fc79 	bl	22b6a <wifi_nrf_osal_llist_node_alloc>

	if (!list_node) {
    e278:	4605      	mov	r5, r0
    e27a:	b938      	cbnz	r0, e28c <wifi_nrf_utils_list_add_tail+0x20>
		wifi_nrf_osal_log_err(opriv,
    e27c:	4620      	mov	r0, r4
    e27e:	4a09      	ldr	r2, [pc, #36]	; (e2a4 <wifi_nrf_utils_list_add_tail+0x38>)
    e280:	4909      	ldr	r1, [pc, #36]	; (e2a8 <wifi_nrf_utils_list_add_tail+0x3c>)
    e282:	f014 fc63 	bl	22b4c <wifi_nrf_osal_log_err>
				      "%s: Unable to allocate list node\n",
				      __func__);
		return WIFI_NRF_STATUS_FAIL;
    e286:	f04f 30ff 	mov.w	r0, #4294967295
	wifi_nrf_osal_llist_add_node_tail(opriv,
					  list,
					  list_node);

	return WIFI_NRF_STATUS_SUCCESS;
}
    e28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	wifi_nrf_osal_llist_node_data_set(opriv,
    e28c:	4601      	mov	r1, r0
    e28e:	463a      	mov	r2, r7
    e290:	4620      	mov	r0, r4
    e292:	f014 fc75 	bl	22b80 <wifi_nrf_osal_llist_node_data_set>
	wifi_nrf_osal_llist_add_node_tail(opriv,
    e296:	4620      	mov	r0, r4
    e298:	462a      	mov	r2, r5
    e29a:	4631      	mov	r1, r6
    e29c:	f014 fc81 	bl	22ba2 <wifi_nrf_osal_llist_add_node_tail>
	return WIFI_NRF_STATUS_SUCCESS;
    e2a0:	2000      	movs	r0, #0
    e2a2:	e7f2      	b.n	e28a <wifi_nrf_utils_list_add_tail+0x1e>
    e2a4:	00033736 	.word	0x00033736
    e2a8:	00033714 	.word	0x00033714

0000e2ac <nrf_wifi_utils_hex_str_to_val>:

int nrf_wifi_utils_hex_str_to_val(struct wifi_nrf_osal_priv *opriv,
				  unsigned char *hex_arr,
				  unsigned int hex_arr_sz,
				  unsigned char *str)
{
    e2ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e2b0:	4606      	mov	r6, r0
	unsigned char ch = 0;
	unsigned char val = 0;
	unsigned int len = 0;
	int ret = -1;

	len = strlen(str);
    e2b2:	4618      	mov	r0, r3
{
    e2b4:	4614      	mov	r4, r2
    e2b6:	4698      	mov	r8, r3
    e2b8:	460f      	mov	r7, r1
	len = strlen(str);
    e2ba:	f009 f967 	bl	1758c <strlen>

	if (len / 2 > hex_arr_sz) {
    e2be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
	len = strlen(str);
    e2c2:	4603      	mov	r3, r0
	if (len / 2 > hex_arr_sz) {
    e2c4:	d20a      	bcs.n	e2dc <nrf_wifi_utils_hex_str_to_val+0x30>
		wifi_nrf_osal_log_err(opriv,
    e2c6:	4630      	mov	r0, r6
    e2c8:	4a1e      	ldr	r2, [pc, #120]	; (e344 <nrf_wifi_utils_hex_str_to_val+0x98>)
    e2ca:	491f      	ldr	r1, [pc, #124]	; (e348 <nrf_wifi_utils_hex_str_to_val+0x9c>)
    e2cc:	9400      	str	r4, [sp, #0]
    e2ce:	f014 fc3d 	bl	22b4c <wifi_nrf_osal_log_err>
	int ret = -1;
    e2d2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ret = j;
out:
	return ret;
}
    e2d6:	b002      	add	sp, #8
    e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (len % 2) {
    e2dc:	f010 0401 	ands.w	r4, r0, #1
    e2e0:	d02c      	beq.n	e33c <nrf_wifi_utils_hex_str_to_val+0x90>
		wifi_nrf_osal_log_err(opriv,
    e2e2:	4a18      	ldr	r2, [pc, #96]	; (e344 <nrf_wifi_utils_hex_str_to_val+0x98>)
    e2e4:	4919      	ldr	r1, [pc, #100]	; (e34c <nrf_wifi_utils_hex_str_to_val+0xa0>)
    e2e6:	4630      	mov	r0, r6
    e2e8:	f014 fc30 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    e2ec:	e7f1      	b.n	e2d2 <nrf_wifi_utils_hex_str_to_val+0x26>
		ch = ((str[i] >= 'A' && str[i] <= 'Z') ? str[i] + 32 : str[i]);
    e2ee:	f818 2000 	ldrb.w	r2, [r8, r0]
    e2f2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
    e2f6:	2919      	cmp	r1, #25
    e2f8:	d809      	bhi.n	e30e <nrf_wifi_utils_hex_str_to_val+0x62>
    e2fa:	3220      	adds	r2, #32
    e2fc:	b2d2      	uxtb	r2, r2
		if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f')) {
    e2fe:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    e302:	2905      	cmp	r1, #5
    e304:	d917      	bls.n	e336 <nrf_wifi_utils_hex_str_to_val+0x8a>
			wifi_nrf_osal_log_err(opriv,
    e306:	4613      	mov	r3, r2
    e308:	4911      	ldr	r1, [pc, #68]	; (e350 <nrf_wifi_utils_hex_str_to_val+0xa4>)
    e30a:	4a0e      	ldr	r2, [pc, #56]	; (e344 <nrf_wifi_utils_hex_str_to_val+0x98>)
    e30c:	e7eb      	b.n	e2e6 <nrf_wifi_utils_hex_str_to_val+0x3a>
		if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f')) {
    e30e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    e312:	b2c9      	uxtb	r1, r1
    e314:	2909      	cmp	r1, #9
    e316:	d8f2      	bhi.n	e2fe <nrf_wifi_utils_hex_str_to_val+0x52>
		val += ch;
    e318:	4429      	add	r1, r5
		if (!(i % 2)) {
    e31a:	07c2      	lsls	r2, r0, #31
		val += ch;
    e31c:	b2cd      	uxtb	r5, r1
			hex_arr[j] = val;
    e31e:	bf47      	ittee	mi
    e320:	553d      	strbmi	r5, [r7, r4]
			val = 0;
    e322:	2500      	movmi	r5, #0
			val <<= 4;
    e324:	012d      	lslpl	r5, r5, #4
    e326:	b2ed      	uxtbpl	r5, r5
			j++;
    e328:	bf48      	it	mi
    e32a:	3401      	addmi	r4, #1
	for (i = 0; i < len; i++) {
    e32c:	3001      	adds	r0, #1
    e32e:	4298      	cmp	r0, r3
    e330:	d1dd      	bne.n	e2ee <nrf_wifi_utils_hex_str_to_val+0x42>
	ret = j;
    e332:	4620      	mov	r0, r4
	return ret;
    e334:	e7cf      	b.n	e2d6 <nrf_wifi_utils_hex_str_to_val+0x2a>
			ch = ch - 'a' + 10;
    e336:	3a57      	subs	r2, #87	; 0x57
    e338:	b2d1      	uxtb	r1, r2
    e33a:	e7ed      	b.n	e318 <nrf_wifi_utils_hex_str_to_val+0x6c>
	for (i = 0; i < len; i++) {
    e33c:	4620      	mov	r0, r4
	unsigned char val = 0;
    e33e:	4625      	mov	r5, r4
    e340:	e7f5      	b.n	e32e <nrf_wifi_utils_hex_str_to_val+0x82>
    e342:	bf00      	nop
    e344:	000337f9 	.word	0x000337f9
    e348:	0003376d 	.word	0x0003376d
    e34c:	000337a2 	.word	0x000337a2
    e350:	000337d1 	.word	0x000337d1

0000e354 <hal_rpu_msg_post>:

static enum wifi_nrf_status hal_rpu_msg_post(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
					     enum WIFI_NRF_HAL_MSG_TYPE msg_type,
					     unsigned int queue_id,
					     unsigned int msg_addr)
{
    e354:	b570      	push	{r4, r5, r6, lr}
    e356:	4604      	mov	r4, r0
    e358:	4610      	mov	r0, r2
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct host_rpu_hpq *busy_queue = NULL;

	if (queue_id >= MAX_NUM_OF_RX_QUEUES) {
    e35a:	2802      	cmp	r0, #2
{
    e35c:	460e      	mov	r6, r1
    e35e:	461a      	mov	r2, r3
	if (queue_id >= MAX_NUM_OF_RX_QUEUES) {
    e360:	d90a      	bls.n	e378 <hal_rpu_msg_post+0x24>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e362:	6824      	ldr	r4, [r4, #0]
    e364:	4603      	mov	r3, r0
    e366:	4a22      	ldr	r2, [pc, #136]	; (e3f0 <hal_rpu_msg_post+0x9c>)
    e368:	4922      	ldr	r1, [pc, #136]	; (e3f4 <hal_rpu_msg_post+0xa0>)
    e36a:	6820      	ldr	r0, [r4, #0]
	    (msg_type == WIFI_NRF_HAL_MSG_TYPE_CMD_DATA_TX)) {
		busy_queue = &hal_dev_ctx->rpu_info.hpqm_info.cmd_busy_queue;
	} else if (msg_type == WIFI_NRF_HAL_MSG_TYPE_CMD_DATA_RX) {
		busy_queue = &hal_dev_ctx->rpu_info.hpqm_info.rx_buf_busy_queue[queue_id];
	} else {
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e36c:	f014 fbee 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    e370:	f04f 35ff 	mov.w	r5, #4294967295
			goto out;
		}
	}
out:
	return status;
}
    e374:	4628      	mov	r0, r5
    e376:	bd70      	pop	{r4, r5, r6, pc}
	if ((msg_type == WIFI_NRF_HAL_MSG_TYPE_CMD_CTRL) ||
    e378:	f011 0ffb 	tst.w	r1, #251	; 0xfb
    e37c:	d10d      	bne.n	e39a <hal_rpu_msg_post+0x46>
		busy_queue = &hal_dev_ctx->rpu_info.hpqm_info.cmd_busy_queue;
    e37e:	f104 0120 	add.w	r1, r4, #32
	status = hal_rpu_hpq_enqueue(hal_dev_ctx,
    e382:	4620      	mov	r0, r4
    e384:	f001 fb8a 	bl	fa9c <hal_rpu_hpq_enqueue>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e388:	4605      	mov	r5, r0
    e38a:	b190      	cbz	r0, e3b2 <hal_rpu_msg_post+0x5e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e38c:	6823      	ldr	r3, [r4, #0]
    e38e:	4a18      	ldr	r2, [pc, #96]	; (e3f0 <hal_rpu_msg_post+0x9c>)
    e390:	4919      	ldr	r1, [pc, #100]	; (e3f8 <hal_rpu_msg_post+0xa4>)
    e392:	6818      	ldr	r0, [r3, #0]
    e394:	f014 fbda 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    e398:	e7ec      	b.n	e374 <hal_rpu_msg_post+0x20>
	} else if (msg_type == WIFI_NRF_HAL_MSG_TYPE_CMD_DATA_RX) {
    e39a:	2902      	cmp	r1, #2
    e39c:	d103      	bne.n	e3a6 <hal_rpu_msg_post+0x52>
		busy_queue = &hal_dev_ctx->rpu_info.hpqm_info.rx_buf_busy_queue[queue_id];
    e39e:	3006      	adds	r0, #6
    e3a0:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    e3a4:	e7ed      	b.n	e382 <hal_rpu_msg_post+0x2e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e3a6:	6820      	ldr	r0, [r4, #0]
    e3a8:	460b      	mov	r3, r1
    e3aa:	4a11      	ldr	r2, [pc, #68]	; (e3f0 <hal_rpu_msg_post+0x9c>)
    e3ac:	4913      	ldr	r1, [pc, #76]	; (e3fc <hal_rpu_msg_post+0xa8>)
    e3ae:	6800      	ldr	r0, [r0, #0]
    e3b0:	e7dc      	b.n	e36c <hal_rpu_msg_post+0x18>
	if (msg_type != WIFI_NRF_HAL_MSG_TYPE_CMD_DATA_RX) {
    e3b2:	2e02      	cmp	r6, #2
    e3b4:	d0de      	beq.n	e374 <hal_rpu_msg_post+0x20>
	status = hal_rpu_reg_write(hal_dev_ctx,
    e3b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e3b8:	4620      	mov	r0, r4
    e3ba:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    e3be:	4910      	ldr	r1, [pc, #64]	; (e400 <hal_rpu_msg_post+0xac>)
    e3c0:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    e3c4:	f001 fb1c 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e3c8:	4606      	mov	r6, r0
    e3ca:	b168      	cbz	r0, e3e8 <hal_rpu_msg_post+0x94>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e3cc:	6823      	ldr	r3, [r4, #0]
    e3ce:	4a0d      	ldr	r2, [pc, #52]	; (e404 <hal_rpu_msg_post+0xb0>)
    e3d0:	490d      	ldr	r1, [pc, #52]	; (e408 <hal_rpu_msg_post+0xb4>)
    e3d2:	6818      	ldr	r0, [r3, #0]
    e3d4:	f014 fbba 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e3d8:	6823      	ldr	r3, [r4, #0]
    e3da:	4a05      	ldr	r2, [pc, #20]	; (e3f0 <hal_rpu_msg_post+0x9c>)
    e3dc:	490b      	ldr	r1, [pc, #44]	; (e40c <hal_rpu_msg_post+0xb8>)
    e3de:	6818      	ldr	r0, [r3, #0]
    e3e0:	f014 fbb4 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
    e3e4:	4635      	mov	r5, r6
    e3e6:	e7c5      	b.n	e374 <hal_rpu_msg_post+0x20>
	hal_dev_ctx->num_cmds++;
    e3e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    e3ea:	3301      	adds	r3, #1
    e3ec:	6523      	str	r3, [r4, #80]	; 0x50
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    e3ee:	e7c1      	b.n	e374 <hal_rpu_msg_post+0x20>
    e3f0:	0003418c 	.word	0x0003418c
    e3f4:	00033817 	.word	0x00033817
    e3f8:	0003384d 	.word	0x0003384d
    e3fc:	00033832 	.word	0x00033832
    e400:	a4000480 	.word	0xa4000480
    e404:	00034178 	.word	0x00034178
    e408:	00033874 	.word	0x00033874
    e40c:	0003389c 	.word	0x0003389c

0000e410 <wifi_nrf_hal_poll_reg.constprop.0>:
out:
	return status;
}


static int wifi_nrf_hal_poll_reg(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
    e410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
				 unsigned int mask,
				 unsigned int req_value,
				 unsigned int poll_delay)
{
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	unsigned int val = 0;
    e414:	2300      	movs	r3, #0
static int wifi_nrf_hal_poll_reg(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
    e416:	4605      	mov	r5, r0
    e418:	460e      	mov	r6, r1
    e41a:	4690      	mov	r8, r2
	unsigned int count = 50;
    e41c:	2732      	movs	r7, #50	; 0x32
		status = hal_rpu_reg_read(hal_dev_ctx,
					  &val,
					  reg_addr);

		if (status != WIFI_NRF_STATUS_SUCCESS) {
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e41e:	f8df 9064 	ldr.w	r9, [pc, #100]	; e484 <wifi_nrf_hal_poll_reg.constprop.0+0x74>
    e422:	f8df a064 	ldr.w	sl, [pc, #100]	; e488 <wifi_nrf_hal_poll_reg.constprop.0+0x78>
	unsigned int val = 0;
    e426:	9303      	str	r3, [sp, #12]
		status = hal_rpu_reg_read(hal_dev_ctx,
    e428:	4632      	mov	r2, r6
    e42a:	4628      	mov	r0, r5
    e42c:	a903      	add	r1, sp, #12
    e42e:	f001 fa87 	bl	f940 <hal_rpu_reg_read>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    e432:	4604      	mov	r4, r0
    e434:	b140      	cbz	r0, e448 <wifi_nrf_hal_poll_reg.constprop.0+0x38>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e436:	9b03      	ldr	r3, [sp, #12]
    e438:	6828      	ldr	r0, [r5, #0]
    e43a:	9300      	str	r3, [sp, #0]
    e43c:	464a      	mov	r2, r9
    e43e:	4633      	mov	r3, r6
    e440:	4651      	mov	r1, sl
    e442:	6800      	ldr	r0, [r0, #0]
    e444:	f014 fb82 	bl	22b4c <wifi_nrf_osal_log_err>
					      __func__,
					      reg_addr,
					      val);
		}

		if ((val & mask) == req_value) {
    e448:	9b03      	ldr	r3, [sp, #12]
    e44a:	f003 0301 	and.w	r3, r3, #1
    e44e:	4543      	cmp	r3, r8
    e450:	d00a      	beq.n	e468 <wifi_nrf_hal_poll_reg.constprop.0+0x58>
			status = WIFI_NRF_STATUS_SUCCESS;
			break;
		}

		wifi_nrf_osal_sleep_ms(hal_dev_ctx->hpriv->opriv,
    e452:	682b      	ldr	r3, [r5, #0]
    e454:	210a      	movs	r1, #10
    e456:	6818      	ldr	r0, [r3, #0]
    e458:	f014 fbf9 	bl	22c4e <wifi_nrf_osal_sleep_ms>
				       poll_delay);
	} while (count-- > 0);
    e45c:	3f01      	subs	r7, #1
    e45e:	d2e3      	bcs.n	e428 <wifi_nrf_hal_poll_reg.constprop.0+0x18>
		status = WIFI_NRF_STATUS_FAIL;
		goto out;
	}
out:
	return status;
}
    e460:	4620      	mov	r0, r4
    e462:	b004      	add	sp, #16
    e464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (count == 0) {
    e468:	b94f      	cbnz	r7, e47e <wifi_nrf_hal_poll_reg.constprop.0+0x6e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e46a:	6828      	ldr	r0, [r5, #0]
    e46c:	4633      	mov	r3, r6
    e46e:	4a05      	ldr	r2, [pc, #20]	; (e484 <wifi_nrf_hal_poll_reg.constprop.0+0x74>)
    e470:	4906      	ldr	r1, [pc, #24]	; (e48c <wifi_nrf_hal_poll_reg.constprop.0+0x7c>)
    e472:	6800      	ldr	r0, [r0, #0]
    e474:	f014 fb6a 	bl	22b4c <wifi_nrf_osal_log_err>
		status = WIFI_NRF_STATUS_FAIL;
    e478:	f04f 34ff 	mov.w	r4, #4294967295
		goto out;
    e47c:	e7f0      	b.n	e460 <wifi_nrf_hal_poll_reg.constprop.0+0x50>
			status = WIFI_NRF_STATUS_SUCCESS;
    e47e:	2400      	movs	r4, #0
    e480:	e7ee      	b.n	e460 <wifi_nrf_hal_poll_reg.constprop.0+0x50>
    e482:	bf00      	nop
    e484:	000340a7 	.word	0x000340a7
    e488:	000338bf 	.word	0x000338bf
    e48c:	000338f0 	.word	0x000338f0

0000e490 <wifi_nrf_hal_buf_map_rx>:
{
    e490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e494:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    e498:	eb00 0883 	add.w	r8, r0, r3, lsl #2
	rx_buf_info = &hal_dev_ctx->rx_buf_info[pool_id][buf_id];
    e49c:	f8d8 606c 	ldr.w	r6, [r8, #108]	; 0x6c
    e4a0:	ea4f 170e 	mov.w	r7, lr, lsl #4
	if (rx_buf_info->mapped) {
    e4a4:	f816 c007 	ldrb.w	ip, [r6, r7]
{
    e4a8:	4604      	mov	r4, r0
	rx_buf_info = &hal_dev_ctx->rx_buf_info[pool_id][buf_id];
    e4aa:	eb06 150e 	add.w	r5, r6, lr, lsl #4
	if (rx_buf_info->mapped) {
    e4ae:	f1bc 0f00 	cmp.w	ip, #0
    e4b2:	d006      	beq.n	e4c2 <wifi_nrf_hal_buf_map_rx+0x32>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e4b4:	6803      	ldr	r3, [r0, #0]
    e4b6:	4a1f      	ldr	r2, [pc, #124]	; (e534 <wifi_nrf_hal_buf_map_rx+0xa4>)
    e4b8:	491f      	ldr	r1, [pc, #124]	; (e538 <wifi_nrf_hal_buf_map_rx+0xa8>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e4ba:	6818      	ldr	r0, [r3, #0]
    e4bc:	f014 fb46 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    e4c0:	e011      	b.n	e4e6 <wifi_nrf_hal_buf_map_rx+0x56>
	rx_buf_info->virt_addr = buf;
    e4c2:	6069      	str	r1, [r5, #4]
	rx_buf_info->buf_len = buf_len;
    e4c4:	60ea      	str	r2, [r5, #12]
	if (buf_len != hal_dev_ctx->hpriv->cfg_params.rx_buf_pool[pool_id].buf_sz) {
    e4c6:	f8d0 c000 	ldr.w	ip, [r0]
    e4ca:	eb0c 0983 	add.w	r9, ip, r3, lsl #2
    e4ce:	f8b9 9034 	ldrh.w	r9, [r9, #52]	; 0x34
    e4d2:	4591      	cmp	r9, r2
    e4d4:	d00e      	beq.n	e4f4 <wifi_nrf_hal_buf_map_rx+0x64>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e4d6:	9300      	str	r3, [sp, #0]
    e4d8:	4918      	ldr	r1, [pc, #96]	; (e53c <wifi_nrf_hal_buf_map_rx+0xac>)
    e4da:	4613      	mov	r3, r2
    e4dc:	f8dc 0000 	ldr.w	r0, [ip]
    e4e0:	4a14      	ldr	r2, [pc, #80]	; (e534 <wifi_nrf_hal_buf_map_rx+0xa4>)
    e4e2:	f014 fb33 	bl	22b4c <wifi_nrf_osal_log_err>
	if (rx_buf_info->phy_addr) {
    e4e6:	68a8      	ldr	r0, [r5, #8]
    e4e8:	b108      	cbz	r0, e4ee <wifi_nrf_hal_buf_map_rx+0x5e>
		rx_buf_info->mapped = true;
    e4ea:	2301      	movs	r3, #1
    e4ec:	55f3      	strb	r3, [r6, r7]
}
    e4ee:	b003      	add	sp, #12
    e4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bounce_buf_addr = hal_dev_ctx->addr_rpu_pktram_base_rx_pool[pool_id] +
    e4f4:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
	hal_rpu_mem_write(hal_dev_ctx,
    e4f8:	460a      	mov	r2, r1
	bounce_buf_addr = hal_dev_ctx->addr_rpu_pktram_base_rx_pool[pool_id] +
    e4fa:	fb09 380e 	mla	r8, r9, lr, r3
	rpu_addr = RPU_MEM_PKT_BASE + (bounce_buf_addr - hal_dev_ctx->addr_rpu_pktram_base);
    e4fe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    e500:	eba8 0e03 	sub.w	lr, r8, r3
	hal_rpu_mem_write(hal_dev_ctx,
    e504:	f10e 4130 	add.w	r1, lr, #2952790016	; 0xb0000000
    e508:	f89c 302c 	ldrb.w	r3, [ip, #44]	; 0x2c
    e50c:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
    e510:	f001 f918 	bl	f744 <hal_rpu_mem_write>
	addr_to_map = bounce_buf_addr + hal_dev_ctx->hpriv->cfg_params.rx_buf_headroom_sz;
    e514:	6823      	ldr	r3, [r4, #0]
	rx_buf_info->phy_addr = wifi_nrf_bal_dma_map(hal_dev_ctx->bal_dev_ctx,
    e516:	464a      	mov	r2, r9
	addr_to_map = bounce_buf_addr + hal_dev_ctx->hpriv->cfg_params.rx_buf_headroom_sz;
    e518:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
	rx_buf_info->phy_addr = wifi_nrf_bal_dma_map(hal_dev_ctx->bal_dev_ctx,
    e51c:	68a0      	ldr	r0, [r4, #8]
    e51e:	2301      	movs	r3, #1
    e520:	4441      	add	r1, r8
    e522:	f014 fcde 	bl	22ee2 <wifi_nrf_bal_dma_map>
    e526:	60a8      	str	r0, [r5, #8]
	if (!rx_buf_info->phy_addr) {
    e528:	2800      	cmp	r0, #0
    e52a:	d1dc      	bne.n	e4e6 <wifi_nrf_hal_buf_map_rx+0x56>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e52c:	6823      	ldr	r3, [r4, #0]
    e52e:	4a01      	ldr	r2, [pc, #4]	; (e534 <wifi_nrf_hal_buf_map_rx+0xa4>)
    e530:	4903      	ldr	r1, [pc, #12]	; (e540 <wifi_nrf_hal_buf_map_rx+0xb0>)
    e532:	e7c2      	b.n	e4ba <wifi_nrf_hal_buf_map_rx+0x2a>
    e534:	0003425d 	.word	0x0003425d
    e538:	00033911 	.word	0x00033911
    e53c:	0003393a 	.word	0x0003393a
    e540:	00033965 	.word	0x00033965

0000e544 <wifi_nrf_hal_buf_unmap_rx>:
{
    e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rx_buf_info = &hal_dev_ctx->rx_buf_info[pool_id][buf_id];
    e546:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    e54a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
{
    e54c:	460f      	mov	r7, r1
	rx_buf_info = &hal_dev_ctx->rx_buf_info[pool_id][buf_id];
    e54e:	0119      	lsls	r1, r3, #4
    e550:	eb02 1503 	add.w	r5, r2, r3, lsl #4
	if (!rx_buf_info->mapped) {
    e554:	5c53      	ldrb	r3, [r2, r1]
{
    e556:	4604      	mov	r4, r0
	if (!rx_buf_info->mapped) {
    e558:	b943      	cbnz	r3, e56c <wifi_nrf_hal_buf_unmap_rx+0x28>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e55a:	6803      	ldr	r3, [r0, #0]
    e55c:	4a15      	ldr	r2, [pc, #84]	; (e5b4 <wifi_nrf_hal_buf_unmap_rx+0x70>)
    e55e:	4916      	ldr	r1, [pc, #88]	; (e5b8 <wifi_nrf_hal_buf_unmap_rx+0x74>)
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e560:	6818      	ldr	r0, [r3, #0]
    e562:	f014 faf3 	bl	22b4c <wifi_nrf_osal_log_err>
	unsigned long virt_addr = 0;
    e566:	2600      	movs	r6, #0
}
    e568:	4630      	mov	r0, r6
    e56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	unmapped_addr = wifi_nrf_bal_dma_unmap(hal_dev_ctx->bal_dev_ctx,
    e56c:	2301      	movs	r3, #1
    e56e:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e572:	6880      	ldr	r0, [r0, #8]
    e574:	f014 fcbd 	bl	22ef2 <wifi_nrf_bal_dma_unmap>
	if (data_len) {
    e578:	b197      	cbz	r7, e5a0 <wifi_nrf_hal_buf_unmap_rx+0x5c>
	rpu_addr = RPU_MEM_PKT_BASE + (unmapped_addr - hal_dev_ctx->addr_rpu_pktram_base);
    e57a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e57c:	6823      	ldr	r3, [r4, #0]
		if (!unmapped_addr) {
    e57e:	b910      	cbnz	r0, e586 <wifi_nrf_hal_buf_unmap_rx+0x42>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e580:	4a0c      	ldr	r2, [pc, #48]	; (e5b4 <wifi_nrf_hal_buf_unmap_rx+0x70>)
    e582:	490e      	ldr	r1, [pc, #56]	; (e5bc <wifi_nrf_hal_buf_unmap_rx+0x78>)
    e584:	e7ec      	b.n	e560 <wifi_nrf_hal_buf_unmap_rx+0x1c>
					  hal_dev_ctx->hpriv->cfg_params.rx_buf_headroom_sz),
    e586:	f893 c02c 	ldrb.w	ip, [r3, #44]	; 0x2c
				 (void *)(rx_buf_info->virt_addr +
    e58a:	6869      	ldr	r1, [r5, #4]
	rpu_addr = RPU_MEM_PKT_BASE + (unmapped_addr - hal_dev_ctx->addr_rpu_pktram_base);
    e58c:	f1c6 4630 	rsb	r6, r6, #2952790016	; 0xb0000000
    e590:	f506 46a0 	add.w	r6, r6, #20480	; 0x5000
		hal_rpu_mem_read(hal_dev_ctx,
    e594:	1832      	adds	r2, r6, r0
    e596:	463b      	mov	r3, r7
    e598:	4620      	mov	r0, r4
    e59a:	4461      	add	r1, ip
    e59c:	f001 f874 	bl	f688 <hal_rpu_mem_read>
	wifi_nrf_osal_mem_set(hal_dev_ctx->hpriv->opriv,
    e5a0:	6820      	ldr	r0, [r4, #0]
    e5a2:	2310      	movs	r3, #16
    e5a4:	2200      	movs	r2, #0
    e5a6:	4629      	mov	r1, r5
    e5a8:	6800      	ldr	r0, [r0, #0]
	virt_addr = rx_buf_info->virt_addr;
    e5aa:	686e      	ldr	r6, [r5, #4]
	wifi_nrf_osal_mem_set(hal_dev_ctx->hpriv->opriv,
    e5ac:	f014 fa87 	bl	22abe <wifi_nrf_osal_mem_set>
	return virt_addr;
    e5b0:	e7da      	b.n	e568 <wifi_nrf_hal_buf_unmap_rx+0x24>
    e5b2:	bf00      	nop
    e5b4:	00034243 	.word	0x00034243
    e5b8:	00033979 	.word	0x00033979
    e5bc:	0003399c 	.word	0x0003399c

0000e5c0 <hal_rpu_ps_wake>:
{
    e5c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!hal_dev_ctx) {
    e5c4:	4604      	mov	r4, r0
    e5c6:	b908      	cbnz	r0, e5cc <hal_rpu_ps_wake+0xc>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e5c8:	6803      	ldr	r3, [r0, #0]
    e5ca:	deff      	udf	#255	; 0xff
	if (!hal_dev_ctx->rpu_fw_booted)
    e5cc:	f890 50a6 	ldrb.w	r5, [r0, #166]	; 0xa6
    e5d0:	2d00      	cmp	r5, #0
    e5d2:	d04a      	beq.n	e66a <hal_rpu_ps_wake+0xaa>
	if (hal_dev_ctx->rpu_ps_state == RPU_PS_STATE_AWAKE) {
    e5d4:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    e5d8:	2b01      	cmp	r3, #1
    e5da:	d03b      	beq.n	e654 <hal_rpu_ps_wake+0x94>
	wifi_nrf_bal_rpu_ps_wake(hal_dev_ctx->bal_dev_ctx);
    e5dc:	6880      	ldr	r0, [r0, #8]
    e5de:	f014 fc95 	bl	22f0c <wifi_nrf_bal_rpu_ps_wake>
	start_time_us = wifi_nrf_osal_time_get_curr_us(hal_dev_ctx->hpriv->opriv);
    e5e2:	6823      	ldr	r3, [r4, #0]
	} while (elapsed_time_sec < RPU_PS_WAKE_TIMEOUT_S);
    e5e4:	f8df 808c 	ldr.w	r8, [pc, #140]	; e674 <hal_rpu_ps_wake+0xb4>
	start_time_us = wifi_nrf_osal_time_get_curr_us(hal_dev_ctx->hpriv->opriv);
    e5e8:	6818      	ldr	r0, [r3, #0]
    e5ea:	f014 fb3a 	bl	22c62 <wifi_nrf_osal_time_get_curr_us>
	wifi_nrf_osal_delay_us(hal_dev_ctx->hpriv->opriv,
    e5ee:	6823      	ldr	r3, [r4, #0]
	start_time_us = wifi_nrf_osal_time_get_curr_us(hal_dev_ctx->hpriv->opriv);
    e5f0:	4606      	mov	r6, r0
	wifi_nrf_osal_delay_us(hal_dev_ctx->hpriv->opriv,
    e5f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e5f6:	6818      	ldr	r0, [r3, #0]
    e5f8:	f014 fb2e 	bl	22c58 <wifi_nrf_osal_delay_us>
		reg_val = wifi_nrf_bal_rpu_ps_status(hal_dev_ctx->bal_dev_ctx);
    e5fc:	68a0      	ldr	r0, [r4, #8]
    e5fe:	f014 fc8a 	bl	22f16 <wifi_nrf_bal_rpu_ps_status>
		if ((reg_val & rpu_ps_state_mask) == rpu_ps_state_mask) {
    e602:	f000 0306 	and.w	r3, r0, #6
    e606:	2b06      	cmp	r3, #6
		reg_val = wifi_nrf_bal_rpu_ps_status(hal_dev_ctx->bal_dev_ctx);
    e608:	4605      	mov	r5, r0
		if ((reg_val & rpu_ps_state_mask) == rpu_ps_state_mask) {
    e60a:	d020      	beq.n	e64e <hal_rpu_ps_wake+0x8e>
		idle_time_start_us = wifi_nrf_osal_time_get_curr_us(hal_dev_ctx->hpriv->opriv);
    e60c:	6823      	ldr	r3, [r4, #0]
    e60e:	6818      	ldr	r0, [r3, #0]
    e610:	f014 fb27 	bl	22c62 <wifi_nrf_osal_time_get_curr_us>
    e614:	4607      	mov	r7, r0
			idle_time_us = wifi_nrf_osal_time_elapsed_us(hal_dev_ctx->hpriv->opriv,
    e616:	6823      	ldr	r3, [r4, #0]
    e618:	4639      	mov	r1, r7
    e61a:	6818      	ldr	r0, [r3, #0]
    e61c:	f014 fb25 	bl	22c6a <wifi_nrf_osal_time_elapsed_us>
		} while ((idle_time_us / 1000) < RPU_PS_WAKE_INTERVAL_MS);
    e620:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    e624:	d3f7      	bcc.n	e616 <hal_rpu_ps_wake+0x56>
		elapsed_time_usec = wifi_nrf_osal_time_elapsed_us(hal_dev_ctx->hpriv->opriv,
    e626:	6823      	ldr	r3, [r4, #0]
    e628:	4631      	mov	r1, r6
    e62a:	6818      	ldr	r0, [r3, #0]
    e62c:	f014 fb1d 	bl	22c6a <wifi_nrf_osal_time_elapsed_us>
	} while (elapsed_time_sec < RPU_PS_WAKE_TIMEOUT_S);
    e630:	4540      	cmp	r0, r8
    e632:	d9e3      	bls.n	e5fc <hal_rpu_ps_wake+0x3c>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e634:	2306      	movs	r3, #6
    e636:	6820      	ldr	r0, [r4, #0]
    e638:	e9cd 5300 	strd	r5, r3, [sp]
    e63c:	4a0e      	ldr	r2, [pc, #56]	; (e678 <hal_rpu_ps_wake+0xb8>)
    e63e:	2301      	movs	r3, #1
    e640:	490e      	ldr	r1, [pc, #56]	; (e67c <hal_rpu_ps_wake+0xbc>)
    e642:	6800      	ldr	r0, [r0, #0]
    e644:	f014 fa82 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    e648:	f04f 35ff 	mov.w	r5, #4294967295
    e64c:	e003      	b.n	e656 <hal_rpu_ps_wake+0x96>
	hal_dev_ctx->rpu_ps_state = RPU_PS_STATE_AWAKE;
    e64e:	2301      	movs	r3, #1
    e650:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
		status = WIFI_NRF_STATUS_SUCCESS;
    e654:	2500      	movs	r5, #0
	if (!hal_dev_ctx->irq_ctx) {
    e656:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    e65a:	b933      	cbnz	r3, e66a <hal_rpu_ps_wake+0xaa>
		wifi_nrf_osal_timer_schedule(hal_dev_ctx->hpriv->opriv,
    e65c:	6823      	ldr	r3, [r4, #0]
    e65e:	220a      	movs	r2, #10
    e660:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
    e664:	6818      	ldr	r0, [r3, #0]
    e666:	f014 fb70 	bl	22d4a <wifi_nrf_osal_timer_schedule>
}
    e66a:	4628      	mov	r0, r5
    e66c:	b002      	add	sp, #8
    e66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e672:	bf00      	nop
    e674:	000f423f 	.word	0x000f423f
    e678:	00034233 	.word	0x00034233
    e67c:	000339b2 	.word	0x000339b2

0000e680 <wifi_nrf_hal_ctrl_cmd_send>:
{
    e680:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e684:	4604      	mov	r4, r0
    e686:	4615      	mov	r5, r2
	wifi_nrf_osal_spinlock_take(hal_dev_ctx->hpriv->opriv,
    e688:	6803      	ldr	r3, [r0, #0]
{
    e68a:	460f      	mov	r7, r1
	wifi_nrf_osal_spinlock_take(hal_dev_ctx->hpriv->opriv,
    e68c:	6e01      	ldr	r1, [r0, #96]	; 0x60
    e68e:	6818      	ldr	r0, [r3, #0]
    e690:	f014 fa2a 	bl	22ae8 <wifi_nrf_osal_spinlock_take>
	if (len > hal_dev_ctx->hpriv->cfg_params.max_cmd_size) {
    e694:	6823      	ldr	r3, [r4, #0]
    e696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e698:	4295      	cmp	r5, r2
    e69a:	d94a      	bls.n	e732 <wifi_nrf_hal_ctrl_cmd_send+0xb2>
	len = cmd_size;
    e69c:	462e      	mov	r6, r5
	data = cmd;
    e69e:	46b9      	mov	r9, r7
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    e6a0:	f04f 35ff 	mov.w	r5, #4294967295
		while (len > 0) {
    e6a4:	2e00      	cmp	r6, #0
			if (len > hal_dev_ctx->hpriv->cfg_params.max_cmd_size) {
    e6a6:	6823      	ldr	r3, [r4, #0]
		while (len > 0) {
    e6a8:	dc06      	bgt.n	e6b8 <wifi_nrf_hal_ctrl_cmd_send+0x38>
	wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    e6aa:	4639      	mov	r1, r7
    e6ac:	6818      	ldr	r0, [r3, #0]
    e6ae:	f014 f9f8 	bl	22aa2 <wifi_nrf_osal_mem_free>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e6b2:	2d00      	cmp	r5, #0
    e6b4:	d05e      	beq.n	e774 <wifi_nrf_hal_ctrl_cmd_send+0xf4>
    e6b6:	e010      	b.n	e6da <wifi_nrf_hal_ctrl_cmd_send+0x5a>
			if (len > hal_dev_ctx->hpriv->cfg_params.max_cmd_size) {
    e6b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			hal_msg = wifi_nrf_osal_mem_zalloc(hal_dev_ctx->hpriv->opriv,
    e6ba:	6818      	ldr	r0, [r3, #0]
				size = hal_dev_ctx->hpriv->cfg_params.max_cmd_size;
    e6bc:	42b2      	cmp	r2, r6
    e6be:	bf28      	it	cs
    e6c0:	4632      	movcs	r2, r6
			hal_msg = wifi_nrf_osal_mem_zalloc(hal_dev_ctx->hpriv->opriv,
    e6c2:	1d11      	adds	r1, r2, #4
				size = hal_dev_ctx->hpriv->cfg_params.max_cmd_size;
    e6c4:	4690      	mov	r8, r2
			hal_msg = wifi_nrf_osal_mem_zalloc(hal_dev_ctx->hpriv->opriv,
    e6c6:	f014 f9e8 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
			if (!hal_msg) {
    e6ca:	4605      	mov	r5, r0
    e6cc:	6820      	ldr	r0, [r4, #0]
    e6ce:	b93d      	cbnz	r5, e6e0 <wifi_nrf_hal_ctrl_cmd_send+0x60>
				wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e6d0:	4a6b      	ldr	r2, [pc, #428]	; (e880 <wifi_nrf_hal_ctrl_cmd_send+0x200>)
    e6d2:	496c      	ldr	r1, [pc, #432]	; (e884 <wifi_nrf_hal_ctrl_cmd_send+0x204>)
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e6d4:	6800      	ldr	r0, [r0, #0]
    e6d6:	f014 fa39 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    e6da:	f04f 35ff 	mov.w	r5, #4294967295
    e6de:	e015      	b.n	e70c <wifi_nrf_hal_ctrl_cmd_send+0x8c>
			wifi_nrf_osal_mem_cpy(hal_dev_ctx->hpriv->opriv,
    e6e0:	1d29      	adds	r1, r5, #4
    e6e2:	4643      	mov	r3, r8
    e6e4:	464a      	mov	r2, r9
    e6e6:	6800      	ldr	r0, [r0, #0]
    e6e8:	f014 f9df 	bl	22aaa <wifi_nrf_osal_mem_cpy>
			hal_msg->len = size;
    e6ec:	f8c5 8000 	str.w	r8, [r5]
			status = wifi_nrf_utils_q_enqueue(hal_dev_ctx->hpriv->opriv,
    e6f0:	6823      	ldr	r3, [r4, #0]
    e6f2:	462a      	mov	r2, r5
    e6f4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    e6f6:	6818      	ldr	r0, [r3, #0]
    e6f8:	f014 fb5b 	bl	22db2 <wifi_nrf_utils_q_enqueue>
			if (status != WIFI_NRF_STATUS_SUCCESS) {
    e6fc:	4605      	mov	r5, r0
    e6fe:	b1a0      	cbz	r0, e72a <wifi_nrf_hal_ctrl_cmd_send+0xaa>
				wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e700:	6823      	ldr	r3, [r4, #0]
    e702:	4a5f      	ldr	r2, [pc, #380]	; (e880 <wifi_nrf_hal_ctrl_cmd_send+0x200>)
    e704:	4960      	ldr	r1, [pc, #384]	; (e888 <wifi_nrf_hal_ctrl_cmd_send+0x208>)
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e706:	6818      	ldr	r0, [r3, #0]
    e708:	f014 fa20 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e70c:	6823      	ldr	r3, [r4, #0]
    e70e:	4a5f      	ldr	r2, [pc, #380]	; (e88c <wifi_nrf_hal_ctrl_cmd_send+0x20c>)
    e710:	495f      	ldr	r1, [pc, #380]	; (e890 <wifi_nrf_hal_ctrl_cmd_send+0x210>)
    e712:	6818      	ldr	r0, [r3, #0]
    e714:	f014 fa1a 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_rel(hal_dev_ctx->hpriv->opriv,
    e718:	6823      	ldr	r3, [r4, #0]
    e71a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e71c:	6818      	ldr	r0, [r3, #0]
    e71e:	f014 f9e7 	bl	22af0 <wifi_nrf_osal_spinlock_rel>
}
    e722:	4628      	mov	r0, r5
    e724:	b002      	add	sp, #8
    e726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			len -= size;
    e72a:	eba6 0608 	sub.w	r6, r6, r8
			data += size;
    e72e:	44c1      	add	r9, r8
    e730:	e7b8      	b.n	e6a4 <wifi_nrf_hal_ctrl_cmd_send+0x24>
		hal_msg = wifi_nrf_osal_mem_zalloc(hal_dev_ctx->hpriv->opriv,
    e732:	6818      	ldr	r0, [r3, #0]
    e734:	1d29      	adds	r1, r5, #4
    e736:	f014 f9b0 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
		if (!hal_msg) {
    e73a:	4606      	mov	r6, r0
    e73c:	6820      	ldr	r0, [r4, #0]
    e73e:	b916      	cbnz	r6, e746 <wifi_nrf_hal_ctrl_cmd_send+0xc6>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e740:	4a4f      	ldr	r2, [pc, #316]	; (e880 <wifi_nrf_hal_ctrl_cmd_send+0x200>)
    e742:	4954      	ldr	r1, [pc, #336]	; (e894 <wifi_nrf_hal_ctrl_cmd_send+0x214>)
    e744:	e7c6      	b.n	e6d4 <wifi_nrf_hal_ctrl_cmd_send+0x54>
		wifi_nrf_osal_mem_cpy(hal_dev_ctx->hpriv->opriv,
    e746:	462b      	mov	r3, r5
    e748:	463a      	mov	r2, r7
    e74a:	1d31      	adds	r1, r6, #4
    e74c:	6800      	ldr	r0, [r0, #0]
    e74e:	f014 f9ac 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		hal_msg->len = len;
    e752:	6035      	str	r5, [r6, #0]
		status = wifi_nrf_utils_q_enqueue(hal_dev_ctx->hpriv->opriv,
    e754:	6823      	ldr	r3, [r4, #0]
    e756:	4632      	mov	r2, r6
    e758:	6818      	ldr	r0, [r3, #0]
    e75a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    e75c:	f014 fb29 	bl	22db2 <wifi_nrf_utils_q_enqueue>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    e760:	6823      	ldr	r3, [r4, #0]
    e762:	4605      	mov	r5, r0
    e764:	b110      	cbz	r0, e76c <wifi_nrf_hal_ctrl_cmd_send+0xec>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e766:	4a46      	ldr	r2, [pc, #280]	; (e880 <wifi_nrf_hal_ctrl_cmd_send+0x200>)
    e768:	494b      	ldr	r1, [pc, #300]	; (e898 <wifi_nrf_hal_ctrl_cmd_send+0x218>)
    e76a:	e7cc      	b.n	e706 <wifi_nrf_hal_ctrl_cmd_send+0x86>
	wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    e76c:	4639      	mov	r1, r7
    e76e:	6818      	ldr	r0, [r3, #0]
    e770:	f014 f997 	bl	22aa2 <wifi_nrf_osal_mem_free>
			continue;
    e774:	f04f 35ff 	mov.w	r5, #4294967295
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e778:	f8df 8120 	ldr.w	r8, [pc, #288]	; e89c <wifi_nrf_hal_ctrl_cmd_send+0x21c>
		if (wifi_nrf_osal_time_elapsed_us(hal_dev_ctx->hpriv->opriv,
    e77c:	f8df 9120 	ldr.w	r9, [pc, #288]	; e8a0 <wifi_nrf_hal_ctrl_cmd_send+0x220>
	while ((cmd = wifi_nrf_utils_q_dequeue(hal_dev_ctx->hpriv->opriv,
    e780:	6823      	ldr	r3, [r4, #0]
    e782:	6d61      	ldr	r1, [r4, #84]	; 0x54
    e784:	6818      	ldr	r0, [r3, #0]
    e786:	f014 fb16 	bl	22db6 <wifi_nrf_utils_q_dequeue>
    e78a:	4606      	mov	r6, r0
    e78c:	2800      	cmp	r0, #0
    e78e:	d0c3      	beq.n	e718 <wifi_nrf_hal_ctrl_cmd_send+0x98>
	start_time_us = wifi_nrf_osal_time_get_curr_us(hal_dev_ctx->hpriv->opriv);
    e790:	6823      	ldr	r3, [r4, #0]
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e792:	f8df a110 	ldr.w	sl, [pc, #272]	; e8a4 <wifi_nrf_hal_ctrl_cmd_send+0x224>
	start_time_us = wifi_nrf_osal_time_get_curr_us(hal_dev_ctx->hpriv->opriv);
    e796:	6818      	ldr	r0, [r3, #0]
    e798:	f014 fa63 	bl	22c62 <wifi_nrf_osal_time_get_curr_us>
    e79c:	4605      	mov	r5, r0
	unsigned int val = 0;
    e79e:	2300      	movs	r3, #0
    e7a0:	9301      	str	r3, [sp, #4]
	status = hal_rpu_reg_read(hal_dev_ctx,
    e7a2:	4620      	mov	r0, r4
    e7a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e7a6:	a901      	add	r1, sp, #4
    e7a8:	f001 f8ca 	bl	f940 <hal_rpu_reg_read>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e7ac:	4607      	mov	r7, r0
    e7ae:	b310      	cbz	r0, e7f6 <wifi_nrf_hal_ctrl_cmd_send+0x176>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e7b0:	6820      	ldr	r0, [r4, #0]
    e7b2:	4642      	mov	r2, r8
    e7b4:	4651      	mov	r1, sl
    e7b6:	9b01      	ldr	r3, [sp, #4]
    e7b8:	6800      	ldr	r0, [r0, #0]
    e7ba:	f014 f9c7 	bl	22b4c <wifi_nrf_osal_log_err>
		if (wifi_nrf_osal_time_elapsed_us(hal_dev_ctx->hpriv->opriv,
    e7be:	6823      	ldr	r3, [r4, #0]
    e7c0:	4629      	mov	r1, r5
    e7c2:	6818      	ldr	r0, [r3, #0]
    e7c4:	f014 fa51 	bl	22c6a <wifi_nrf_osal_time_elapsed_us>
    e7c8:	4548      	cmp	r0, r9
    e7ca:	d9e8      	bls.n	e79e <wifi_nrf_hal_ctrl_cmd_send+0x11e>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e7cc:	6820      	ldr	r0, [r4, #0]
    e7ce:	2300      	movs	r3, #0
    e7d0:	4a35      	ldr	r2, [pc, #212]	; (e8a8 <wifi_nrf_hal_ctrl_cmd_send+0x228>)
    e7d2:	4936      	ldr	r1, [pc, #216]	; (e8ac <wifi_nrf_hal_ctrl_cmd_send+0x22c>)
    e7d4:	6800      	ldr	r0, [r0, #0]
    e7d6:	f014 f9b9 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e7da:	6823      	ldr	r3, [r4, #0]
    e7dc:	4a34      	ldr	r2, [pc, #208]	; (e8b0 <wifi_nrf_hal_ctrl_cmd_send+0x230>)
    e7de:	4935      	ldr	r1, [pc, #212]	; (e8b4 <wifi_nrf_hal_ctrl_cmd_send+0x234>)
    e7e0:	6818      	ldr	r0, [r3, #0]
    e7e2:	f014 f9b3 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    e7e6:	6823      	ldr	r3, [r4, #0]
    e7e8:	4631      	mov	r1, r6
    e7ea:	6818      	ldr	r0, [r3, #0]
    e7ec:	f014 f959 	bl	22aa2 <wifi_nrf_osal_mem_free>
			continue;
    e7f0:	f04f 35ff 	mov.w	r5, #4294967295
    e7f4:	e7c4      	b.n	e780 <wifi_nrf_hal_ctrl_cmd_send+0x100>
	if (val) {
    e7f6:	9b01      	ldr	r3, [sp, #4]
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d0e0      	beq.n	e7be <wifi_nrf_hal_ctrl_cmd_send+0x13e>
		status = hal_rpu_msg_write(hal_dev_ctx,
    e7fc:	f8d6 a000 	ldr.w	sl, [r6]
	status = hal_rpu_hpq_dequeue(hal_dev_ctx,
    e800:	aa01      	add	r2, sp, #4
	unsigned int msg_addr = 0;
    e802:	9001      	str	r0, [sp, #4]
	status = hal_rpu_hpq_dequeue(hal_dev_ctx,
    e804:	f104 0128 	add.w	r1, r4, #40	; 0x28
    e808:	4620      	mov	r0, r4
    e80a:	f001 f95b 	bl	fac4 <hal_rpu_hpq_dequeue>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e80e:	4605      	mov	r5, r0
    e810:	b1d0      	cbz	r0, e848 <wifi_nrf_hal_ctrl_cmd_send+0x1c8>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e812:	6820      	ldr	r0, [r4, #0]
    e814:	9b01      	ldr	r3, [sp, #4]
    e816:	4a28      	ldr	r2, [pc, #160]	; (e8b8 <wifi_nrf_hal_ctrl_cmd_send+0x238>)
    e818:	4928      	ldr	r1, [pc, #160]	; (e8bc <wifi_nrf_hal_ctrl_cmd_send+0x23c>)
    e81a:	6800      	ldr	r0, [r0, #0]
    e81c:	f014 f996 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e820:	6820      	ldr	r0, [r4, #0]
		*msg_addr = 0;
    e822:	9701      	str	r7, [sp, #4]
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e824:	463b      	mov	r3, r7
    e826:	4a26      	ldr	r2, [pc, #152]	; (e8c0 <wifi_nrf_hal_ctrl_cmd_send+0x240>)
    e828:	4926      	ldr	r1, [pc, #152]	; (e8c4 <wifi_nrf_hal_ctrl_cmd_send+0x244>)
    e82a:	6800      	ldr	r0, [r0, #0]
    e82c:	f014 f98e 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e830:	6823      	ldr	r3, [r4, #0]
    e832:	4a1f      	ldr	r2, [pc, #124]	; (e8b0 <wifi_nrf_hal_ctrl_cmd_send+0x230>)
    e834:	6818      	ldr	r0, [r3, #0]
    e836:	4924      	ldr	r1, [pc, #144]	; (e8c8 <wifi_nrf_hal_ctrl_cmd_send+0x248>)
    e838:	f014 f988 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    e83c:	6823      	ldr	r3, [r4, #0]
    e83e:	4631      	mov	r1, r6
    e840:	6818      	ldr	r0, [r3, #0]
    e842:	f014 f92e 	bl	22aa2 <wifi_nrf_osal_mem_free>
			continue;
    e846:	e79b      	b.n	e780 <wifi_nrf_hal_ctrl_cmd_send+0x100>
	status = hal_rpu_mem_write(hal_dev_ctx,
    e848:	4653      	mov	r3, sl
    e84a:	4620      	mov	r0, r4
    e84c:	9901      	ldr	r1, [sp, #4]
    e84e:	1d32      	adds	r2, r6, #4
    e850:	f000 ff78 	bl	f744 <hal_rpu_mem_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e854:	4605      	mov	r5, r0
    e856:	b130      	cbz	r0, e866 <wifi_nrf_hal_ctrl_cmd_send+0x1e6>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e858:	6823      	ldr	r3, [r4, #0]
    e85a:	4a19      	ldr	r2, [pc, #100]	; (e8c0 <wifi_nrf_hal_ctrl_cmd_send+0x240>)
    e85c:	491b      	ldr	r1, [pc, #108]	; (e8cc <wifi_nrf_hal_ctrl_cmd_send+0x24c>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e85e:	6818      	ldr	r0, [r3, #0]
    e860:	f014 f974 	bl	22b4c <wifi_nrf_osal_log_err>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    e864:	e7e4      	b.n	e830 <wifi_nrf_hal_ctrl_cmd_send+0x1b0>
	status = hal_rpu_msg_post(hal_dev_ctx,
    e866:	4602      	mov	r2, r0
    e868:	4601      	mov	r1, r0
    e86a:	9b01      	ldr	r3, [sp, #4]
    e86c:	4620      	mov	r0, r4
    e86e:	f7ff fd71 	bl	e354 <hal_rpu_msg_post>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e872:	6823      	ldr	r3, [r4, #0]
    e874:	4605      	mov	r5, r0
    e876:	2800      	cmp	r0, #0
    e878:	d0e1      	beq.n	e83e <wifi_nrf_hal_ctrl_cmd_send+0x1be>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e87a:	4a11      	ldr	r2, [pc, #68]	; (e8c0 <wifi_nrf_hal_ctrl_cmd_send+0x240>)
    e87c:	4914      	ldr	r1, [pc, #80]	; (e8d0 <wifi_nrf_hal_ctrl_cmd_send+0x250>)
    e87e:	e7ee      	b.n	e85e <wifi_nrf_hal_ctrl_cmd_send+0x1de>
    e880:	00034206 	.word	0x00034206
    e884:	00033a05 	.word	0x00033a05
    e888:	00033a30 	.word	0x00033a30
    e88c:	00034218 	.word	0x00034218
    e890:	00033aa9 	.word	0x00033aa9
    e894:	00033a52 	.word	0x00033a52
    e898:	00033a81 	.word	0x00033a81
    e89c:	000341c4 	.word	0x000341c4
    e8a0:	000f423f 	.word	0x000f423f
    e8a4:	00033b23 	.word	0x00033b23
    e8a8:	000341d9 	.word	0x000341d9
    e8ac:	00033ac9 	.word	0x00033ac9
    e8b0:	000341ec 	.word	0x000341ec
    e8b4:	00033af0 	.word	0x00033af0
    e8b8:	0003419d 	.word	0x0003419d
    e8bc:	00033b55 	.word	0x00033b55
    e8c0:	000341b2 	.word	0x000341b2
    e8c4:	00033b82 	.word	0x00033b82
    e8c8:	00033bdc 	.word	0x00033bdc
    e8cc:	00033bb5 	.word	0x00033bb5
    e8d0:	0003389c 	.word	0x0003389c

0000e8d4 <wifi_nrf_hal_data_cmd_send>:
{
    e8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8d8:	460e      	mov	r6, r1
    e8da:	4698      	mov	r8, r3
	wifi_nrf_osal_spinlock_take(hal_dev_ctx->hpriv->opriv,
    e8dc:	6803      	ldr	r3, [r0, #0]
    e8de:	6e01      	ldr	r1, [r0, #96]	; 0x60
{
    e8e0:	4604      	mov	r4, r0
	wifi_nrf_osal_spinlock_take(hal_dev_ctx->hpriv->opriv,
    e8e2:	6818      	ldr	r0, [r3, #0]
{
    e8e4:	4615      	mov	r5, r2
    e8e6:	9f06      	ldr	r7, [sp, #24]
	wifi_nrf_osal_spinlock_take(hal_dev_ctx->hpriv->opriv,
    e8e8:	f014 f8fe 	bl	22ae8 <wifi_nrf_osal_spinlock_take>
	if (cmd_type == WIFI_NRF_HAL_MSG_TYPE_CMD_DATA_RX) {
    e8ec:	2e02      	cmp	r6, #2
    e8ee:	d11c      	bne.n	e92a <wifi_nrf_hal_data_cmd_send+0x56>
	addr = addr_base + (max_cmd_size * desc_id);
    e8f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    e8f2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
		host_addr &= RPU_ADDR_MASK_OFFSET;
    e8f6:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
		host_addr |= RPU_MCU_CORE_INDIRECT_BASE;
    e8fa:	f040 4140 	orr.w	r1, r0, #3221225472	; 0xc0000000
	status = hal_rpu_mem_write(hal_dev_ctx,
    e8fe:	462a      	mov	r2, r5
    e900:	4643      	mov	r3, r8
    e902:	4620      	mov	r0, r4
    e904:	f000 ff1e 	bl	f744 <hal_rpu_mem_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e908:	4605      	mov	r5, r0
    e90a:	b300      	cbz	r0, e94e <wifi_nrf_hal_data_cmd_send+0x7a>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e90c:	6820      	ldr	r0, [r4, #0]
    e90e:	4633      	mov	r3, r6
    e910:	4a17      	ldr	r2, [pc, #92]	; (e970 <wifi_nrf_hal_data_cmd_send+0x9c>)
    e912:	4918      	ldr	r1, [pc, #96]	; (e974 <wifi_nrf_hal_data_cmd_send+0xa0>)
    e914:	6800      	ldr	r0, [r0, #0]
    e916:	f014 f919 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_rel(hal_dev_ctx->hpriv->opriv,
    e91a:	6823      	ldr	r3, [r4, #0]
    e91c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e91e:	6818      	ldr	r0, [r3, #0]
    e920:	f014 f8e6 	bl	22af0 <wifi_nrf_osal_spinlock_rel>
}
    e924:	4628      	mov	r0, r5
    e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (cmd_type == WIFI_NRF_HAL_MSG_TYPE_CMD_DATA_TX) {
    e92a:	2e04      	cmp	r6, #4
    e92c:	d105      	bne.n	e93a <wifi_nrf_hal_data_cmd_send+0x66>
	addr = addr_base + (max_cmd_size * desc_id);
    e92e:	2394      	movs	r3, #148	; 0x94
    e930:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e932:	fb03 0107 	mla	r1, r3, r7, r0
    e936:	460f      	mov	r7, r1
    e938:	e7e1      	b.n	e8fe <wifi_nrf_hal_data_cmd_send+0x2a>
    e93a:	2700      	movs	r7, #0
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e93c:	6820      	ldr	r0, [r4, #0]
    e93e:	490e      	ldr	r1, [pc, #56]	; (e978 <wifi_nrf_hal_data_cmd_send+0xa4>)
    e940:	4633      	mov	r3, r6
    e942:	4a0b      	ldr	r2, [pc, #44]	; (e970 <wifi_nrf_hal_data_cmd_send+0x9c>)
    e944:	6800      	ldr	r0, [r0, #0]
    e946:	f014 f901 	bl	22b4c <wifi_nrf_osal_log_err>
	addr = addr_base + (max_cmd_size * desc_id);
    e94a:	4639      	mov	r1, r7
    e94c:	e7d7      	b.n	e8fe <wifi_nrf_hal_data_cmd_send+0x2a>
	status = hal_rpu_msg_post(hal_dev_ctx,
    e94e:	463b      	mov	r3, r7
    e950:	4631      	mov	r1, r6
    e952:	4620      	mov	r0, r4
    e954:	9a07      	ldr	r2, [sp, #28]
    e956:	f7ff fcfd 	bl	e354 <hal_rpu_msg_post>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e95a:	4605      	mov	r5, r0
    e95c:	2800      	cmp	r0, #0
    e95e:	d0dc      	beq.n	e91a <wifi_nrf_hal_data_cmd_send+0x46>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e960:	6823      	ldr	r3, [r4, #0]
    e962:	4a03      	ldr	r2, [pc, #12]	; (e970 <wifi_nrf_hal_data_cmd_send+0x9c>)
    e964:	4905      	ldr	r1, [pc, #20]	; (e97c <wifi_nrf_hal_data_cmd_send+0xa8>)
    e966:	6818      	ldr	r0, [r3, #0]
    e968:	f014 f8f0 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    e96c:	e7d5      	b.n	e91a <wifi_nrf_hal_data_cmd_send+0x46>
    e96e:	bf00      	nop
    e970:	0003415d 	.word	0x0003415d
    e974:	00033c21 	.word	0x00033c21
    e978:	00033bff 	.word	0x00033bff
    e97c:	00033c49 	.word	0x00033c49

0000e980 <hal_rpu_eventq_process>:
{
    e980:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	unsigned long flags = 0;
    e984:	2500      	movs	r5, #0
{
    e986:	4604      	mov	r4, r0
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e988:	4f17      	ldr	r7, [pc, #92]	; (e9e8 <hal_rpu_eventq_process+0x68>)
    e98a:	f8df 8060 	ldr.w	r8, [pc, #96]	; e9ec <hal_rpu_eventq_process+0x6c>
	unsigned long flags = 0;
    e98e:	9501      	str	r5, [sp, #4]
		wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
    e990:	6823      	ldr	r3, [r4, #0]
    e992:	aa01      	add	r2, sp, #4
    e994:	6818      	ldr	r0, [r3, #0]
    e996:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    e998:	f014 f8ae 	bl	22af8 <wifi_nrf_osal_spinlock_irq_take>
		event = wifi_nrf_utils_q_dequeue(hal_dev_ctx->hpriv->opriv,
    e99c:	6823      	ldr	r3, [r4, #0]
    e99e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    e9a0:	6818      	ldr	r0, [r3, #0]
    e9a2:	f014 fa08 	bl	22db6 <wifi_nrf_utils_q_dequeue>
    e9a6:	4606      	mov	r6, r0
		wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
    e9a8:	6823      	ldr	r3, [r4, #0]
    e9aa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    e9ac:	6818      	ldr	r0, [r3, #0]
    e9ae:	aa01      	add	r2, sp, #4
    e9b0:	f014 f8a8 	bl	22b04 <wifi_nrf_osal_spinlock_irq_rel>
		if (!event) {
    e9b4:	b1a6      	cbz	r6, e9e0 <hal_rpu_eventq_process+0x60>
		event_data = event->data;
    e9b6:	4631      	mov	r1, r6
		status = hal_dev_ctx->hpriv->intr_callbk_fn(hal_dev_ctx->mac_dev_ctx,
    e9b8:	6823      	ldr	r3, [r4, #0]
    e9ba:	f851 2b04 	ldr.w	r2, [r1], #4
    e9be:	6a1b      	ldr	r3, [r3, #32]
    e9c0:	6860      	ldr	r0, [r4, #4]
    e9c2:	4798      	blx	r3
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    e9c4:	4605      	mov	r5, r0
    e9c6:	b128      	cbz	r0, e9d4 <hal_rpu_eventq_process+0x54>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e9c8:	6823      	ldr	r3, [r4, #0]
    e9ca:	463a      	mov	r2, r7
    e9cc:	4641      	mov	r1, r8
    e9ce:	6818      	ldr	r0, [r3, #0]
    e9d0:	f014 f8bc 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    e9d4:	6823      	ldr	r3, [r4, #0]
    e9d6:	4631      	mov	r1, r6
    e9d8:	6818      	ldr	r0, [r3, #0]
    e9da:	f014 f862 	bl	22aa2 <wifi_nrf_osal_mem_free>
		wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
    e9de:	e7d7      	b.n	e990 <hal_rpu_eventq_process+0x10>
}
    e9e0:	4628      	mov	r0, r5
    e9e2:	b002      	add	sp, #8
    e9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9e8:	00034146 	.word	0x00034146
    e9ec:	00033c70 	.word	0x00033c70

0000e9f0 <event_tasklet_fn>:
{
    e9f0:	b510      	push	{r4, lr}
    e9f2:	4604      	mov	r4, r0
	status = hal_rpu_eventq_process(hal_dev_ctx);
    e9f4:	f7ff ffc4 	bl	e980 <hal_rpu_eventq_process>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    e9f8:	b138      	cbz	r0, ea0a <event_tasklet_fn+0x1a>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    e9fa:	6823      	ldr	r3, [r4, #0]
    e9fc:	4a03      	ldr	r2, [pc, #12]	; (ea0c <event_tasklet_fn+0x1c>)
    e9fe:	4904      	ldr	r1, [pc, #16]	; (ea10 <event_tasklet_fn+0x20>)
    ea00:	6818      	ldr	r0, [r3, #0]
}
    ea02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ea06:	f014 b8a1 	b.w	22b4c <wifi_nrf_osal_log_err>
}
    ea0a:	bd10      	pop	{r4, pc}
    ea0c:	00034120 	.word	0x00034120
    ea10:	00033c8f 	.word	0x00033c8f

0000ea14 <wifi_nrf_hal_dev_add>:
{
    ea14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea16:	4605      	mov	r5, r0
    ea18:	460e      	mov	r6, r1
	hal_dev_ctx = wifi_nrf_osal_mem_zalloc(hpriv->opriv,
    ea1a:	6800      	ldr	r0, [r0, #0]
    ea1c:	21bc      	movs	r1, #188	; 0xbc
    ea1e:	f014 f83c 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
	if (!hal_dev_ctx) {
    ea22:	4604      	mov	r4, r0
    ea24:	b938      	cbnz	r0, ea36 <wifi_nrf_hal_dev_add+0x22>
		wifi_nrf_osal_log_err(hpriv->opriv,
    ea26:	4a80      	ldr	r2, [pc, #512]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    ea28:	4980      	ldr	r1, [pc, #512]	; (ec2c <wifi_nrf_hal_dev_add+0x218>)
    ea2a:	6828      	ldr	r0, [r5, #0]
    ea2c:	f014 f88e 	bl	22b4c <wifi_nrf_osal_log_err>
	return NULL;
    ea30:	2400      	movs	r4, #0
}
    ea32:	4620      	mov	r0, r4
    ea34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hal_dev_ctx->mac_dev_ctx = mac_dev_ctx;
    ea36:	e9c0 5600 	strd	r5, r6, [r0]
	hal_dev_ctx->idx = hpriv->num_devs++;
    ea3a:	7a2b      	ldrb	r3, [r5, #8]
    ea3c:	1c5a      	adds	r2, r3, #1
    ea3e:	722a      	strb	r2, [r5, #8]
    ea40:	7303      	strb	r3, [r0, #12]
	hal_dev_ctx->num_cmds = RPU_CMD_START_MAGIC;
    ea42:	f64d 63ad 	movw	r3, #57005	; 0xdead
    ea46:	6503      	str	r3, [r0, #80]	; 0x50
	hal_dev_ctx->cmd_q = wifi_nrf_utils_q_alloc(hpriv->opriv);
    ea48:	6828      	ldr	r0, [r5, #0]
    ea4a:	f014 f9ae 	bl	22daa <wifi_nrf_utils_q_alloc>
    ea4e:	6560      	str	r0, [r4, #84]	; 0x54
	if (!hal_dev_ctx->cmd_q) {
    ea50:	b948      	cbnz	r0, ea66 <wifi_nrf_hal_dev_add+0x52>
		wifi_nrf_osal_log_err(hpriv->opriv,
    ea52:	4a75      	ldr	r2, [pc, #468]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    ea54:	4976      	ldr	r1, [pc, #472]	; (ec30 <wifi_nrf_hal_dev_add+0x21c>)
    ea56:	6828      	ldr	r0, [r5, #0]
    ea58:	f014 f878 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_mem_free(hpriv->opriv,
    ea5c:	4621      	mov	r1, r4
    ea5e:	6828      	ldr	r0, [r5, #0]
    ea60:	f014 f81f 	bl	22aa2 <wifi_nrf_osal_mem_free>
	hal_dev_ctx = NULL;
    ea64:	e7e4      	b.n	ea30 <wifi_nrf_hal_dev_add+0x1c>
	hal_dev_ctx->event_q = wifi_nrf_utils_q_alloc(hpriv->opriv);
    ea66:	6828      	ldr	r0, [r5, #0]
    ea68:	f014 f99f 	bl	22daa <wifi_nrf_utils_q_alloc>
    ea6c:	65a0      	str	r0, [r4, #88]	; 0x58
	if (!hal_dev_ctx->event_q) {
    ea6e:	b948      	cbnz	r0, ea84 <wifi_nrf_hal_dev_add+0x70>
		wifi_nrf_osal_log_err(hpriv->opriv,
    ea70:	4a6d      	ldr	r2, [pc, #436]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    ea72:	4970      	ldr	r1, [pc, #448]	; (ec34 <wifi_nrf_hal_dev_add+0x220>)
    ea74:	6828      	ldr	r0, [r5, #0]
    ea76:	f014 f869 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_utils_q_free(hpriv->opriv,
    ea7a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    ea7c:	6828      	ldr	r0, [r5, #0]
    ea7e:	f014 f996 	bl	22dae <wifi_nrf_utils_q_free>
    ea82:	e7eb      	b.n	ea5c <wifi_nrf_hal_dev_add+0x48>
	hal_dev_ctx->lock_hal = wifi_nrf_osal_spinlock_alloc(hpriv->opriv);
    ea84:	6828      	ldr	r0, [r5, #0]
    ea86:	f014 f824 	bl	22ad2 <wifi_nrf_osal_spinlock_alloc>
    ea8a:	4606      	mov	r6, r0
    ea8c:	6620      	str	r0, [r4, #96]	; 0x60
	if (!hal_dev_ctx->lock_hal) {
    ea8e:	b930      	cbnz	r0, ea9e <wifi_nrf_hal_dev_add+0x8a>
		wifi_nrf_osal_log_err(hpriv->opriv,
    ea90:	4a65      	ldr	r2, [pc, #404]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    ea92:	4969      	ldr	r1, [pc, #420]	; (ec38 <wifi_nrf_hal_dev_add+0x224>)
    ea94:	6828      	ldr	r0, [r5, #0]
    ea96:	f014 f859 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_utils_q_free(hpriv->opriv,
    ea9a:	6db3      	ldr	r3, [r6, #88]	; 0x58
    ea9c:	deff      	udf	#255	; 0xff
	wifi_nrf_osal_spinlock_init(hpriv->opriv,
    ea9e:	4601      	mov	r1, r0
    eaa0:	6828      	ldr	r0, [r5, #0]
    eaa2:	f014 f81d 	bl	22ae0 <wifi_nrf_osal_spinlock_init>
	hal_dev_ctx->lock_rx = wifi_nrf_osal_spinlock_alloc(hpriv->opriv);
    eaa6:	6828      	ldr	r0, [r5, #0]
    eaa8:	f014 f813 	bl	22ad2 <wifi_nrf_osal_spinlock_alloc>
    eaac:	4601      	mov	r1, r0
    eaae:	66a0      	str	r0, [r4, #104]	; 0x68
	if (!hal_dev_ctx->lock_rx) {
    eab0:	b968      	cbnz	r0, eace <wifi_nrf_hal_dev_add+0xba>
		wifi_nrf_osal_log_err(hpriv->opriv,
    eab2:	4a5d      	ldr	r2, [pc, #372]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    eab4:	4960      	ldr	r1, [pc, #384]	; (ec38 <wifi_nrf_hal_dev_add+0x224>)
    eab6:	6828      	ldr	r0, [r5, #0]
    eab8:	f014 f848 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_free(hpriv->opriv,
    eabc:	6e21      	ldr	r1, [r4, #96]	; 0x60
    eabe:	6828      	ldr	r0, [r5, #0]
    eac0:	f014 f80a 	bl	22ad8 <wifi_nrf_osal_spinlock_free>
	wifi_nrf_utils_q_free(hpriv->opriv,
    eac4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    eac6:	6828      	ldr	r0, [r5, #0]
    eac8:	f014 f971 	bl	22dae <wifi_nrf_utils_q_free>
    eacc:	e7d5      	b.n	ea7a <wifi_nrf_hal_dev_add+0x66>
	wifi_nrf_osal_spinlock_init(hpriv->opriv,
    eace:	6828      	ldr	r0, [r5, #0]
    ead0:	f014 f806 	bl	22ae0 <wifi_nrf_osal_spinlock_init>
	hal_dev_ctx->event_tasklet = wifi_nrf_osal_tasklet_alloc(hpriv->opriv,
    ead4:	2100      	movs	r1, #0
    ead6:	6828      	ldr	r0, [r5, #0]
    ead8:	f014 f89f 	bl	22c1a <wifi_nrf_osal_tasklet_alloc>
    eadc:	4601      	mov	r1, r0
    eade:	6660      	str	r0, [r4, #100]	; 0x64
	if (!hal_dev_ctx->event_tasklet) {
    eae0:	b948      	cbnz	r0, eaf6 <wifi_nrf_hal_dev_add+0xe2>
		wifi_nrf_osal_log_err(hpriv->opriv,
    eae2:	4a51      	ldr	r2, [pc, #324]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    eae4:	4955      	ldr	r1, [pc, #340]	; (ec3c <wifi_nrf_hal_dev_add+0x228>)
    eae6:	6828      	ldr	r0, [r5, #0]
    eae8:	f014 f830 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_free(hpriv->opriv,
    eaec:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    eaee:	6828      	ldr	r0, [r5, #0]
    eaf0:	f013 fff2 	bl	22ad8 <wifi_nrf_osal_spinlock_free>
    eaf4:	e7e2      	b.n	eabc <wifi_nrf_hal_dev_add+0xa8>
	wifi_nrf_osal_tasklet_init(hpriv->opriv,
    eaf6:	4623      	mov	r3, r4
    eaf8:	4a51      	ldr	r2, [pc, #324]	; (ec40 <wifi_nrf_hal_dev_add+0x22c>)
    eafa:	6828      	ldr	r0, [r5, #0]
    eafc:	f014 f897 	bl	22c2e <wifi_nrf_osal_tasklet_init>
	hal_dev_ctx->rpu_ps_lock = wifi_nrf_osal_spinlock_alloc(hal_dev_ctx->hpriv->opriv);
    eb00:	6823      	ldr	r3, [r4, #0]
    eb02:	6818      	ldr	r0, [r3, #0]
    eb04:	f013 ffe5 	bl	22ad2 <wifi_nrf_osal_spinlock_alloc>
    eb08:	6823      	ldr	r3, [r4, #0]
    eb0a:	4601      	mov	r1, r0
    eb0c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	if (!hal_dev_ctx->rpu_ps_lock) {
    eb10:	b970      	cbnz	r0, eb30 <wifi_nrf_hal_dev_add+0x11c>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    eb12:	4a4c      	ldr	r2, [pc, #304]	; (ec44 <wifi_nrf_hal_dev_add+0x230>)
    eb14:	494c      	ldr	r1, [pc, #304]	; (ec48 <wifi_nrf_hal_dev_add+0x234>)
    eb16:	6818      	ldr	r0, [r3, #0]
    eb18:	f014 f818 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_log_err(hpriv->opriv,
    eb1c:	4a42      	ldr	r2, [pc, #264]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    eb1e:	494b      	ldr	r1, [pc, #300]	; (ec4c <wifi_nrf_hal_dev_add+0x238>)
		wifi_nrf_osal_log_err(hpriv->opriv,
    eb20:	6828      	ldr	r0, [r5, #0]
    eb22:	f014 f813 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_tasklet_free(hpriv->opriv,
    eb26:	6e61      	ldr	r1, [r4, #100]	; 0x64
    eb28:	6828      	ldr	r0, [r5, #0]
    eb2a:	f014 f87b 	bl	22c24 <wifi_nrf_osal_tasklet_free>
    eb2e:	e7dd      	b.n	eaec <wifi_nrf_hal_dev_add+0xd8>
	wifi_nrf_osal_spinlock_init(hal_dev_ctx->hpriv->opriv,
    eb30:	6818      	ldr	r0, [r3, #0]
    eb32:	f013 ffd5 	bl	22ae0 <wifi_nrf_osal_spinlock_init>
	hal_dev_ctx->rpu_ps_timer = wifi_nrf_osal_timer_alloc(hal_dev_ctx->hpriv->opriv);
    eb36:	6823      	ldr	r3, [r4, #0]
    eb38:	6818      	ldr	r0, [r3, #0]
    eb3a:	f014 f8f7 	bl	22d2c <wifi_nrf_osal_timer_alloc>
    eb3e:	4601      	mov	r1, r0
    eb40:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	if (!hal_dev_ctx->rpu_ps_timer) {
    eb44:	6820      	ldr	r0, [r4, #0]
    eb46:	b959      	cbnz	r1, eb60 <wifi_nrf_hal_dev_add+0x14c>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    eb48:	4a3e      	ldr	r2, [pc, #248]	; (ec44 <wifi_nrf_hal_dev_add+0x230>)
    eb4a:	4941      	ldr	r1, [pc, #260]	; (ec50 <wifi_nrf_hal_dev_add+0x23c>)
    eb4c:	6800      	ldr	r0, [r0, #0]
    eb4e:	f013 fffd 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_spinlock_free(hal_dev_ctx->hpriv->opriv,
    eb52:	6823      	ldr	r3, [r4, #0]
    eb54:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    eb58:	6818      	ldr	r0, [r3, #0]
    eb5a:	f013 ffbd 	bl	22ad8 <wifi_nrf_osal_spinlock_free>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    eb5e:	e7dd      	b.n	eb1c <wifi_nrf_hal_dev_add+0x108>
	wifi_nrf_osal_timer_init(hal_dev_ctx->hpriv->opriv,
    eb60:	4623      	mov	r3, r4
    eb62:	4a3c      	ldr	r2, [pc, #240]	; (ec54 <wifi_nrf_hal_dev_add+0x240>)
    eb64:	6800      	ldr	r0, [r0, #0]
    eb66:	f014 f8e5 	bl	22d34 <wifi_nrf_osal_timer_init>
	hal_dev_ctx->rpu_ps_state = RPU_PS_STATE_ASLEEP;
    eb6a:	2300      	movs	r3, #0
    eb6c:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	hal_dev_ctx->dbg_enable = true;
    eb70:	2301      	movs	r3, #1
    eb72:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	hal_dev_ctx->bal_dev_ctx = wifi_nrf_bal_dev_add(hpriv->bpriv,
    eb76:	4621      	mov	r1, r4
    eb78:	6868      	ldr	r0, [r5, #4]
    eb7a:	f001 f823 	bl	fbc4 <wifi_nrf_bal_dev_add>
    eb7e:	60a0      	str	r0, [r4, #8]
	if (!hal_dev_ctx->bal_dev_ctx) {
    eb80:	b910      	cbnz	r0, eb88 <wifi_nrf_hal_dev_add+0x174>
		wifi_nrf_osal_log_err(hpriv->opriv,
    eb82:	4a29      	ldr	r2, [pc, #164]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    eb84:	4934      	ldr	r1, [pc, #208]	; (ec58 <wifi_nrf_hal_dev_add+0x244>)
    eb86:	e7cb      	b.n	eb20 <wifi_nrf_hal_dev_add+0x10c>
	status = hal_rpu_irq_enable(hal_dev_ctx);
    eb88:	4620      	mov	r0, r4
    eb8a:	f000 fb95 	bl	f2b8 <hal_rpu_irq_enable>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    eb8e:	b140      	cbz	r0, eba2 <wifi_nrf_hal_dev_add+0x18e>
		wifi_nrf_osal_log_err(hpriv->opriv,
    eb90:	4a25      	ldr	r2, [pc, #148]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    eb92:	4932      	ldr	r1, [pc, #200]	; (ec5c <wifi_nrf_hal_dev_add+0x248>)
    eb94:	6828      	ldr	r0, [r5, #0]
    eb96:	f013 ffd9 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_bal_dev_rem(hal_dev_ctx->bal_dev_ctx);
    eb9a:	68a0      	ldr	r0, [r4, #8]
    eb9c:	f014 f96d 	bl	22e7a <wifi_nrf_bal_dev_rem>
    eba0:	e7c1      	b.n	eb26 <wifi_nrf_hal_dev_add+0x112>
	for (i = 0; i < MAX_NUM_OF_RX_QUEUES; i++) {
    eba2:	2600      	movs	r6, #0
    eba4:	f104 0768 	add.w	r7, r4, #104	; 0x68
		num_rx_bufs = hal_dev_ctx->hpriv->cfg_params.rx_buf_pool[i].num_bufs;
    eba8:	6823      	ldr	r3, [r4, #0]
		hal_dev_ctx->rx_buf_info[i] = wifi_nrf_osal_mem_zalloc(hpriv->opriv,
    ebaa:	6828      	ldr	r0, [r5, #0]
		num_rx_bufs = hal_dev_ctx->hpriv->cfg_params.rx_buf_pool[i].num_bufs;
    ebac:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    ebb0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
		hal_dev_ctx->rx_buf_info[i] = wifi_nrf_osal_mem_zalloc(hpriv->opriv,
    ebb2:	0109      	lsls	r1, r1, #4
    ebb4:	f013 ff71 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
    ebb8:	f847 0f04 	str.w	r0, [r7, #4]!
		if (!hal_dev_ctx->rx_buf_info[i]) {
    ebbc:	b930      	cbnz	r0, ebcc <wifi_nrf_hal_dev_add+0x1b8>
			wifi_nrf_osal_log_err(hpriv->opriv,
    ebbe:	4633      	mov	r3, r6
    ebc0:	4a19      	ldr	r2, [pc, #100]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    ebc2:	4927      	ldr	r1, [pc, #156]	; (ec60 <wifi_nrf_hal_dev_add+0x24c>)
    ebc4:	6828      	ldr	r0, [r5, #0]
    ebc6:	f013 ffc1 	bl	22b4c <wifi_nrf_osal_log_err>
			goto bal_dev_free;
    ebca:	e7e6      	b.n	eb9a <wifi_nrf_hal_dev_add+0x186>
	for (i = 0; i < MAX_NUM_OF_RX_QUEUES; i++) {
    ebcc:	3601      	adds	r6, #1
    ebce:	2e03      	cmp	r6, #3
    ebd0:	d1ea      	bne.n	eba8 <wifi_nrf_hal_dev_add+0x194>
	status = pal_rpu_addr_offset_get(hal_dev_ctx->hpriv->opriv,
    ebd2:	4622      	mov	r2, r4
    ebd4:	f852 0b7c 	ldr.w	r0, [r2], #124
    ebd8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    ebdc:	4921      	ldr	r1, [pc, #132]	; (ec64 <wifi_nrf_hal_dev_add+0x250>)
    ebde:	6800      	ldr	r0, [r0, #0]
    ebe0:	f000 ffb4 	bl	fb4c <pal_rpu_addr_offset_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ebe4:	6826      	ldr	r6, [r4, #0]
    ebe6:	b150      	cbz	r0, ebfe <wifi_nrf_hal_dev_add+0x1ea>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ebe8:	4a1f      	ldr	r2, [pc, #124]	; (ec68 <wifi_nrf_hal_dev_add+0x254>)
    ebea:	4920      	ldr	r1, [pc, #128]	; (ec6c <wifi_nrf_hal_dev_add+0x258>)
    ebec:	6830      	ldr	r0, [r6, #0]
    ebee:	f013 ffad 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_log_err(hpriv->opriv,
    ebf2:	4a0d      	ldr	r2, [pc, #52]	; (ec28 <wifi_nrf_hal_dev_add+0x214>)
    ebf4:	491e      	ldr	r1, [pc, #120]	; (ec70 <wifi_nrf_hal_dev_add+0x25c>)
    ebf6:	6828      	ldr	r0, [r5, #0]
    ebf8:	f013 ffa8 	bl	22b4c <wifi_nrf_osal_log_err>
    ebfc:	e719      	b.n	ea32 <wifi_nrf_hal_dev_add+0x1e>
	hal_dev_ctx->addr_rpu_pktram_base_tx = hal_dev_ctx->addr_rpu_pktram_base;
    ebfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    ec00:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		 (hal_dev_ctx->addr_rpu_pktram_base + RPU_PKTRAM_SIZE) -
    ec04:	f503 33ca 	add.w	r3, r3, #103424	; 0x19400
	hal_dev_ctx->addr_rpu_pktram_base_rx_pool[0] =
    ec08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			(hal_dev_ctx->hpriv->cfg_params.rx_buf_pool[pool_idx - 1].num_bufs *
    ec0c:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
			 hal_dev_ctx->hpriv->cfg_params.rx_buf_pool[pool_idx - 1].buf_sz);
    ec0e:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
			hal_dev_ctx->addr_rpu_pktram_base_rx_pool[pool_idx - 1] +
    ec10:	fb01 3302 	mla	r3, r1, r2, r3
		hal_dev_ctx->addr_rpu_pktram_base_rx_pool[pool_idx] =
    ec14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			(hal_dev_ctx->hpriv->cfg_params.rx_buf_pool[pool_idx - 1].num_bufs *
    ec18:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
			 hal_dev_ctx->hpriv->cfg_params.rx_buf_pool[pool_idx - 1].buf_sz);
    ec1a:	8f31      	ldrh	r1, [r6, #56]	; 0x38
			hal_dev_ctx->addr_rpu_pktram_base_rx_pool[pool_idx - 1] +
    ec1c:	fb01 3302 	mla	r3, r1, r2, r3
		hal_dev_ctx->addr_rpu_pktram_base_rx_pool[pool_idx] =
    ec20:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ec24:	e705      	b.n	ea32 <wifi_nrf_hal_dev_add+0x1e>
    ec26:	bf00      	nop
    ec28:	00034131 	.word	0x00034131
    ec2c:	00033cb2 	.word	0x00033cb2
    ec30:	00033cd6 	.word	0x00033cd6
    ec34:	00033cfc 	.word	0x00033cfc
    ec38:	00033d20 	.word	0x00033d20
    ec3c:	00033d41 	.word	0x00033d41
    ec40:	0000e9f1 	.word	0x0000e9f1
    ec44:	00034110 	.word	0x00034110
    ec48:	00033d67 	.word	0x00033d67
    ec4c:	00033da2 	.word	0x00033da2
    ec50:	00033d84 	.word	0x00033d84
    ec54:	00022de3 	.word	0x00022de3
    ec58:	00033dbe 	.word	0x00033dbe
    ec5c:	00033ddf 	.word	0x00033ddf
    ec60:	00033dfe 	.word	0x00033dfe
    ec64:	b0005000 	.word	0xb0005000
    ec68:	000340eb 	.word	0x000340eb
    ec6c:	00033e20 	.word	0x00033e20
    ec70:	00033e44 	.word	0x00033e44

0000ec74 <wifi_nrf_hal_dev_init>:
{
    ec74:	b538      	push	{r3, r4, r5, lr}
	hal_dev_ctx->rpu_fw_booted = true;
    ec76:	2301      	movs	r3, #1
{
    ec78:	4605      	mov	r5, r0
	hal_dev_ctx->rpu_fw_booted = true;
    ec7a:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
	status = wifi_nrf_bal_dev_init(hal_dev_ctx->bal_dev_ctx);
    ec7e:	6880      	ldr	r0, [r0, #8]
    ec80:	f000 ffcc 	bl	fc1c <wifi_nrf_bal_dev_init>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ec84:	4604      	mov	r4, r0
    ec86:	b138      	cbz	r0, ec98 <wifi_nrf_hal_dev_init+0x24>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ec88:	682b      	ldr	r3, [r5, #0]
    ec8a:	4a12      	ldr	r2, [pc, #72]	; (ecd4 <wifi_nrf_hal_dev_init+0x60>)
    ec8c:	4912      	ldr	r1, [pc, #72]	; (ecd8 <wifi_nrf_hal_dev_init+0x64>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ec8e:	6818      	ldr	r0, [r3, #0]
    ec90:	f013 ff5c 	bl	22b4c <wifi_nrf_osal_log_err>
}
    ec94:	4620      	mov	r0, r4
    ec96:	bd38      	pop	{r3, r4, r5, pc}
	status = hal_rpu_mem_read(hal_dev_ctx,
    ec98:	2338      	movs	r3, #56	; 0x38
    ec9a:	4628      	mov	r0, r5
    ec9c:	4a0f      	ldr	r2, [pc, #60]	; (ecdc <wifi_nrf_hal_dev_init+0x68>)
    ec9e:	f105 0110 	add.w	r1, r5, #16
    eca2:	f000 fcf1 	bl	f688 <hal_rpu_mem_read>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    eca6:	4604      	mov	r4, r0
    eca8:	b118      	cbz	r0, ecb2 <wifi_nrf_hal_dev_init+0x3e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ecaa:	682b      	ldr	r3, [r5, #0]
    ecac:	4a09      	ldr	r2, [pc, #36]	; (ecd4 <wifi_nrf_hal_dev_init+0x60>)
    ecae:	490c      	ldr	r1, [pc, #48]	; (ece0 <wifi_nrf_hal_dev_init+0x6c>)
    ecb0:	e7ed      	b.n	ec8e <wifi_nrf_hal_dev_init+0x1a>
	status = hal_rpu_mem_read(hal_dev_ctx,
    ecb2:	2304      	movs	r3, #4
    ecb4:	4628      	mov	r0, r5
    ecb6:	4a0b      	ldr	r2, [pc, #44]	; (ece4 <wifi_nrf_hal_dev_init+0x70>)
    ecb8:	f105 0148 	add.w	r1, r5, #72	; 0x48
    ecbc:	f000 fce4 	bl	f688 <hal_rpu_mem_read>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ecc0:	4604      	mov	r4, r0
    ecc2:	b118      	cbz	r0, eccc <wifi_nrf_hal_dev_init+0x58>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ecc4:	682b      	ldr	r3, [r5, #0]
    ecc6:	4a03      	ldr	r2, [pc, #12]	; (ecd4 <wifi_nrf_hal_dev_init+0x60>)
    ecc8:	4907      	ldr	r1, [pc, #28]	; (ece8 <wifi_nrf_hal_dev_init+0x74>)
    ecca:	e7e0      	b.n	ec8e <wifi_nrf_hal_dev_init+0x1a>
	hal_dev_ctx->rpu_info.tx_cmd_base = RPU_MEM_TX_CMD_BASE;
    eccc:	4b07      	ldr	r3, [pc, #28]	; (ecec <wifi_nrf_hal_dev_init+0x78>)
    ecce:	64eb      	str	r3, [r5, #76]	; 0x4c
    ecd0:	e7e0      	b.n	ec94 <wifi_nrf_hal_dev_init+0x20>
    ecd2:	bf00      	nop
    ecd4:	000340d5 	.word	0x000340d5
    ecd8:	00033e60 	.word	0x00033e60
    ecdc:	b0000024 	.word	0xb0000024
    ece0:	00033e82 	.word	0x00033e82
    ece4:	b7000d58 	.word	0xb7000d58
    ece8:	00033ea2 	.word	0x00033ea2
    ecec:	b00000b8 	.word	0xb00000b8

0000ecf0 <wifi_nrf_hal_proc_reset>:
enum wifi_nrf_status wifi_nrf_hal_proc_reset(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
					     enum RPU_PROC_TYPE rpu_proc)
{
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	if ((rpu_proc != RPU_PROC_TYPE_MCU_LMAC) &&
    ecf0:	2901      	cmp	r1, #1
{
    ecf2:	b570      	push	{r4, r5, r6, lr}
    ecf4:	4605      	mov	r5, r0
    ecf6:	460e      	mov	r6, r1
	if ((rpu_proc != RPU_PROC_TYPE_MCU_LMAC) &&
    ecf8:	d90a      	bls.n	ed10 <wifi_nrf_hal_proc_reset+0x20>
	    (rpu_proc != RPU_PROC_TYPE_MCU_UMAC)) {
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ecfa:	6800      	ldr	r0, [r0, #0]
    ecfc:	460b      	mov	r3, r1
    ecfe:	4a1e      	ldr	r2, [pc, #120]	; (ed78 <wifi_nrf_hal_proc_reset+0x88>)
    ed00:	491e      	ldr	r1, [pc, #120]	; (ed7c <wifi_nrf_hal_proc_reset+0x8c>)
    ed02:	6800      	ldr	r0, [r0, #0]
    ed04:	f013 ff22 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    ed08:	f04f 34ff 	mov.w	r4, #4294967295
					       0x1,
					       10);
	}
out:
	return status;
}
    ed0c:	4620      	mov	r0, r4
    ed0e:	bd70      	pop	{r4, r5, r6, pc}
		status = hal_rpu_reg_write(hal_dev_ctx,
    ed10:	2201      	movs	r2, #1
	if (rpu_proc == RPU_PROC_TYPE_MCU_LMAC) {
    ed12:	b969      	cbnz	r1, ed30 <wifi_nrf_hal_proc_reset+0x40>
		status = hal_rpu_reg_write(hal_dev_ctx,
    ed14:	f04f 4124 	mov.w	r1, #2751463424	; 0xa4000000
    ed18:	f000 fe72 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ed1c:	4604      	mov	r4, r0
    ed1e:	b1b8      	cbz	r0, ed50 <wifi_nrf_hal_proc_reset+0x60>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ed20:	4633      	mov	r3, r6
    ed22:	6828      	ldr	r0, [r5, #0]
    ed24:	4a14      	ldr	r2, [pc, #80]	; (ed78 <wifi_nrf_hal_proc_reset+0x88>)
    ed26:	4916      	ldr	r1, [pc, #88]	; (ed80 <wifi_nrf_hal_proc_reset+0x90>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ed28:	6800      	ldr	r0, [r0, #0]
    ed2a:	f013 ff0f 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    ed2e:	e7ed      	b.n	ed0c <wifi_nrf_hal_proc_reset+0x1c>
		status = hal_rpu_reg_write(hal_dev_ctx,
    ed30:	4914      	ldr	r1, [pc, #80]	; (ed84 <wifi_nrf_hal_proc_reset+0x94>)
    ed32:	f000 fe65 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ed36:	4604      	mov	r4, r0
    ed38:	2800      	cmp	r0, #0
    ed3a:	d1f1      	bne.n	ed20 <wifi_nrf_hal_proc_reset+0x30>
		status = wifi_nrf_hal_poll_reg(hal_dev_ctx,
    ed3c:	4602      	mov	r2, r0
    ed3e:	4911      	ldr	r1, [pc, #68]	; (ed84 <wifi_nrf_hal_proc_reset+0x94>)
    ed40:	4628      	mov	r0, r5
    ed42:	f7ff fb65 	bl	e410 <wifi_nrf_hal_poll_reg.constprop.0>
    ed46:	b244      	sxtb	r4, r0
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ed48:	b954      	cbnz	r4, ed60 <wifi_nrf_hal_proc_reset+0x70>
		status = wifi_nrf_hal_poll_reg(hal_dev_ctx,
    ed4a:	2201      	movs	r2, #1
    ed4c:	490e      	ldr	r1, [pc, #56]	; (ed88 <wifi_nrf_hal_proc_reset+0x98>)
    ed4e:	e00e      	b.n	ed6e <wifi_nrf_hal_proc_reset+0x7e>
		status = wifi_nrf_hal_poll_reg(hal_dev_ctx,
    ed50:	4602      	mov	r2, r0
    ed52:	f04f 4124 	mov.w	r1, #2751463424	; 0xa4000000
    ed56:	4628      	mov	r0, r5
    ed58:	f7ff fb5a 	bl	e410 <wifi_nrf_hal_poll_reg.constprop.0>
    ed5c:	b244      	sxtb	r4, r0
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ed5e:	b124      	cbz	r4, ed6a <wifi_nrf_hal_proc_reset+0x7a>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ed60:	4633      	mov	r3, r6
    ed62:	6828      	ldr	r0, [r5, #0]
    ed64:	4a04      	ldr	r2, [pc, #16]	; (ed78 <wifi_nrf_hal_proc_reset+0x88>)
    ed66:	4909      	ldr	r1, [pc, #36]	; (ed8c <wifi_nrf_hal_proc_reset+0x9c>)
    ed68:	e7de      	b.n	ed28 <wifi_nrf_hal_proc_reset+0x38>
		status = wifi_nrf_hal_poll_reg(hal_dev_ctx,
    ed6a:	2201      	movs	r2, #1
    ed6c:	4908      	ldr	r1, [pc, #32]	; (ed90 <wifi_nrf_hal_proc_reset+0xa0>)
		status = wifi_nrf_hal_poll_reg(hal_dev_ctx,
    ed6e:	4628      	mov	r0, r5
    ed70:	f7ff fb4e 	bl	e410 <wifi_nrf_hal_poll_reg.constprop.0>
    ed74:	b244      	sxtb	r4, r0
    ed76:	e7c9      	b.n	ed0c <wifi_nrf_hal_proc_reset+0x1c>
    ed78:	000340bd 	.word	0x000340bd
    ed7c:	00033ec6 	.word	0x00033ec6
    ed80:	00033ee9 	.word	0x00033ee9
    ed84:	a4000100 	.word	0xa4000100
    ed88:	a4000118 	.word	0xa4000118
    ed8c:	00033f21 	.word	0x00033f21
    ed90:	a4000018 	.word	0xa4000018

0000ed94 <wifi_nrf_hal_fw_chk_boot>:


enum wifi_nrf_status wifi_nrf_hal_fw_chk_boot(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
					      enum RPU_PROC_TYPE rpu_proc)
{
    ed94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	unsigned int addr = 0;
	unsigned int val = 0;
    ed98:	2400      	movs	r4, #0
{
    ed9a:	4605      	mov	r5, r0
	unsigned int exp_val = 0;
	unsigned int i = 0;

	if (rpu_proc == RPU_PROC_TYPE_MCU_LMAC) {
    ed9c:	4688      	mov	r8, r1
	unsigned int val = 0;
    ed9e:	9403      	str	r4, [sp, #12]
	if (rpu_proc == RPU_PROC_TYPE_MCU_LMAC) {
    eda0:	2900      	cmp	r1, #0
    eda2:	d035      	beq.n	ee10 <wifi_nrf_hal_fw_chk_boot+0x7c>
		addr = RPU_MEM_LMAC_BOOT_SIG;
		exp_val = NRF_WIFI_LMAC_BOOT_SIG;
	} else if (rpu_proc == RPU_PROC_TYPE_MCU_UMAC) {
    eda4:	2901      	cmp	r1, #1
    eda6:	d037      	beq.n	ee18 <wifi_nrf_hal_fw_chk_boot+0x84>
		addr = RPU_MEM_UMAC_BOOT_SIG;
		exp_val = NRF_WIFI_UMAC_BOOT_SIG;
	} else {
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    eda8:	6800      	ldr	r0, [r0, #0]
    edaa:	460b      	mov	r3, r1
    edac:	4a1f      	ldr	r2, [pc, #124]	; (ee2c <wifi_nrf_hal_fw_chk_boot+0x98>)
    edae:	4920      	ldr	r1, [pc, #128]	; (ee30 <wifi_nrf_hal_fw_chk_boot+0x9c>)
    edb0:	6800      	ldr	r0, [r0, #0]
    edb2:	f013 fecb 	bl	22b4c <wifi_nrf_osal_log_err>
	unsigned int addr = 0;
    edb6:	4627      	mov	r7, r4
{
    edb8:	2600      	movs	r6, #0
					  (unsigned char *)&val,
					  addr,
					  sizeof(val));

		if (status != WIFI_NRF_STATUS_SUCCESS) {
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    edba:	f8df a070 	ldr.w	sl, [pc, #112]	; ee2c <wifi_nrf_hal_fw_chk_boot+0x98>
    edbe:	f8df 9074 	ldr.w	r9, [pc, #116]	; ee34 <wifi_nrf_hal_fw_chk_boot+0xa0>
		status = hal_rpu_mem_read(hal_dev_ctx,
    edc2:	2304      	movs	r3, #4
    edc4:	463a      	mov	r2, r7
    edc6:	4628      	mov	r0, r5
    edc8:	a903      	add	r1, sp, #12
    edca:	f000 fc5d 	bl	f688 <hal_rpu_mem_read>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    edce:	b130      	cbz	r0, edde <wifi_nrf_hal_fw_chk_boot+0x4a>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    edd0:	6828      	ldr	r0, [r5, #0]
    edd2:	4643      	mov	r3, r8
    edd4:	4652      	mov	r2, sl
    edd6:	4649      	mov	r1, r9
    edd8:	6800      	ldr	r0, [r0, #0]
    edda:	f013 feb7 	bl	22b4c <wifi_nrf_osal_log_err>
					      "%s: Reading of boot signature failed for RPU(%d)\n",
					      __func__,
					      rpu_proc);
		}

		if (val == exp_val) {
    edde:	9b03      	ldr	r3, [sp, #12]
    ede0:	42a3      	cmp	r3, r4
    ede2:	d01e      	beq.n	ee22 <wifi_nrf_hal_fw_chk_boot+0x8e>
			break;
		}

		/* Sleep for 10 ms */
		wifi_nrf_osal_sleep_ms(hal_dev_ctx->hpriv->opriv,
    ede4:	682b      	ldr	r3, [r5, #0]
    ede6:	210a      	movs	r1, #10
    ede8:	6818      	ldr	r0, [r3, #0]
				       10);

		i++;
    edea:	3601      	adds	r6, #1
		wifi_nrf_osal_sleep_ms(hal_dev_ctx->hpriv->opriv,
    edec:	f013 ff2f 	bl	22c4e <wifi_nrf_osal_sleep_ms>
	while (i < 1000) {
    edf0:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    edf4:	d1e5      	bne.n	edc2 <wifi_nrf_hal_fw_chk_boot+0x2e>

	};

	if (i == 1000) {
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    edf6:	9b03      	ldr	r3, [sp, #12]
    edf8:	6828      	ldr	r0, [r5, #0]
    edfa:	e9cd 4300 	strd	r4, r3, [sp]
    edfe:	4a0b      	ldr	r2, [pc, #44]	; (ee2c <wifi_nrf_hal_fw_chk_boot+0x98>)
    ee00:	4643      	mov	r3, r8
    ee02:	490d      	ldr	r1, [pc, #52]	; (ee38 <wifi_nrf_hal_fw_chk_boot+0xa4>)
    ee04:	6800      	ldr	r0, [r0, #0]
    ee06:	f013 fea1 	bl	22b4c <wifi_nrf_osal_log_err>
				      "Expected: 0x%X, Actual: 0x%X\n",
				      __func__,
				      rpu_proc,
				      exp_val,
				      val);
		status = WIFI_NRF_STATUS_FAIL;
    ee0a:	f04f 30ff 	mov.w	r0, #4294967295
		goto out;
	}

	status = WIFI_NRF_STATUS_SUCCESS;
out:
	return status;
    ee0e:	e009      	b.n	ee24 <wifi_nrf_hal_fw_chk_boot+0x90>
		exp_val = NRF_WIFI_LMAC_BOOT_SIG;
    ee10:	f04f 345a 	mov.w	r4, #1515870810	; 0x5a5a5a5a
		addr = RPU_MEM_LMAC_BOOT_SIG;
    ee14:	4f09      	ldr	r7, [pc, #36]	; (ee3c <wifi_nrf_hal_fw_chk_boot+0xa8>)
    ee16:	e7cf      	b.n	edb8 <wifi_nrf_hal_fw_chk_boot+0x24>
		exp_val = NRF_WIFI_UMAC_BOOT_SIG;
    ee18:	f04f 345a 	mov.w	r4, #1515870810	; 0x5a5a5a5a
		addr = RPU_MEM_UMAC_BOOT_SIG;
    ee1c:	f04f 4730 	mov.w	r7, #2952790016	; 0xb0000000
    ee20:	e7ca      	b.n	edb8 <wifi_nrf_hal_fw_chk_boot+0x24>
	status = WIFI_NRF_STATUS_SUCCESS;
    ee22:	2000      	movs	r0, #0
}
    ee24:	b004      	add	sp, #16
    ee26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee2a:	bf00      	nop
    ee2c:	0003408e 	.word	0x0003408e
    ee30:	00033f4b 	.word	0x00033f4b
    ee34:	00033f6b 	.word	0x00033f6b
    ee38:	00033f9d 	.word	0x00033f9d
    ee3c:	b7000d50 	.word	0xb7000d50

0000ee40 <wifi_nrf_hal_init>:
wifi_nrf_hal_init(struct wifi_nrf_osal_priv *opriv,
		  struct wifi_nrf_hal_cfg_params *cfg_params,
		  enum wifi_nrf_status (*intr_callbk_fn)(void *dev_ctx,
							 void *event_data,
							 unsigned int len))
{
    ee40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee42:	460f      	mov	r7, r1
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct wifi_nrf_hal_priv *hpriv = NULL;
	struct wifi_nrf_bal_cfg_params bal_cfg_params;

	hpriv = wifi_nrf_osal_mem_zalloc(opriv,
    ee44:	214c      	movs	r1, #76	; 0x4c
{
    ee46:	4605      	mov	r5, r0
    ee48:	4616      	mov	r6, r2
	hpriv = wifi_nrf_osal_mem_zalloc(opriv,
    ee4a:	f013 fe26 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					 sizeof(*hpriv));

	if (!hpriv) {
    ee4e:	4604      	mov	r4, r0
    ee50:	b930      	cbnz	r0, ee60 <wifi_nrf_hal_init+0x20>
		wifi_nrf_osal_log_err(opriv,
    ee52:	4628      	mov	r0, r5
    ee54:	4a19      	ldr	r2, [pc, #100]	; (eebc <wifi_nrf_hal_init+0x7c>)
    ee56:	491a      	ldr	r1, [pc, #104]	; (eec0 <wifi_nrf_hal_init+0x80>)
    ee58:	f013 fe78 	bl	22b4c <wifi_nrf_osal_log_err>
	hpriv = wifi_nrf_osal_mem_zalloc(opriv,
    ee5c:	2400      	movs	r4, #0
		wifi_nrf_osal_mem_free(opriv,
				       hpriv);
		hpriv = NULL;
	}
out:
	return hpriv;
    ee5e:	e016      	b.n	ee8e <wifi_nrf_hal_init+0x4e>
	hpriv->opriv = opriv;
    ee60:	4601      	mov	r1, r0
	wifi_nrf_osal_mem_cpy(opriv,
    ee62:	2324      	movs	r3, #36	; 0x24
    ee64:	463a      	mov	r2, r7
	hpriv->opriv = opriv;
    ee66:	f841 5b24 	str.w	r5, [r1], #36
	wifi_nrf_osal_mem_cpy(opriv,
    ee6a:	4628      	mov	r0, r5
    ee6c:	f013 fe1d 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	status = pal_rpu_addr_offset_get(opriv,
    ee70:	2302      	movs	r3, #2
    ee72:	f04f 4130 	mov.w	r1, #2952790016	; 0xb0000000
    ee76:	4628      	mov	r0, r5
	hpriv->intr_callbk_fn = intr_callbk_fn;
    ee78:	6226      	str	r6, [r4, #32]
	status = pal_rpu_addr_offset_get(opriv,
    ee7a:	f104 0248 	add.w	r2, r4, #72	; 0x48
    ee7e:	f000 fe65 	bl	fb4c <pal_rpu_addr_offset_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ee82:	b138      	cbz	r0, ee94 <wifi_nrf_hal_init+0x54>
		wifi_nrf_osal_log_err(opriv,
    ee84:	4628      	mov	r0, r5
    ee86:	4a0d      	ldr	r2, [pc, #52]	; (eebc <wifi_nrf_hal_init+0x7c>)
    ee88:	490e      	ldr	r1, [pc, #56]	; (eec4 <wifi_nrf_hal_init+0x84>)
    ee8a:	f013 fe5f 	bl	22b4c <wifi_nrf_osal_log_err>
}
    ee8e:	4620      	mov	r0, r4
    ee90:	b003      	add	sp, #12
    ee92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bal_cfg_params.addr_pktram_base = hpriv->addr_pktram_base;
    ee94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	hpriv->bpriv = wifi_nrf_bal_init(opriv,
    ee96:	4628      	mov	r0, r5
    ee98:	4a0b      	ldr	r2, [pc, #44]	; (eec8 <wifi_nrf_hal_init+0x88>)
    ee9a:	a901      	add	r1, sp, #4
	bal_cfg_params.addr_pktram_base = hpriv->addr_pktram_base;
    ee9c:	9301      	str	r3, [sp, #4]
	hpriv->bpriv = wifi_nrf_bal_init(opriv,
    ee9e:	f000 fed5 	bl	fc4c <wifi_nrf_bal_init>
    eea2:	6060      	str	r0, [r4, #4]
	if (!hpriv->bpriv) {
    eea4:	2800      	cmp	r0, #0
    eea6:	d1f2      	bne.n	ee8e <wifi_nrf_hal_init+0x4e>
		wifi_nrf_osal_log_err(opriv,
    eea8:	4628      	mov	r0, r5
    eeaa:	4a04      	ldr	r2, [pc, #16]	; (eebc <wifi_nrf_hal_init+0x7c>)
    eeac:	4907      	ldr	r1, [pc, #28]	; (eecc <wifi_nrf_hal_init+0x8c>)
    eeae:	f013 fe4d 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(opriv,
    eeb2:	4621      	mov	r1, r4
    eeb4:	4628      	mov	r0, r5
    eeb6:	f013 fdf4 	bl	22aa2 <wifi_nrf_osal_mem_free>
		hpriv = NULL;
    eeba:	e7cf      	b.n	ee5c <wifi_nrf_hal_init+0x1c>
    eebc:	0003407c 	.word	0x0003407c
    eec0:	00033fe2 	.word	0x00033fe2
    eec4:	00033e20 	.word	0x00033e20
    eec8:	00022e15 	.word	0x00022e15
    eecc:	0003400b 	.word	0x0003400b

0000eed0 <wifi_nrf_hal_otp_info_get>:


enum wifi_nrf_status wifi_nrf_hal_otp_info_get(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
					       struct host_rpu_umac_info *otp_info,
					       unsigned int *otp_flags)
{
    eed0:	b570      	push	{r4, r5, r6, lr}
    eed2:	4616      	mov	r6, r2
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	if (!hal_dev_ctx || !otp_info) {
    eed4:	4605      	mov	r5, r0
    eed6:	b100      	cbz	r0, eeda <wifi_nrf_hal_otp_info_get+0xa>
    eed8:	b949      	cbnz	r1, eeee <wifi_nrf_hal_otp_info_get+0x1e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    eeda:	682b      	ldr	r3, [r5, #0]
    eedc:	4a11      	ldr	r2, [pc, #68]	; (ef24 <wifi_nrf_hal_otp_info_get+0x54>)
    eede:	4912      	ldr	r1, [pc, #72]	; (ef28 <wifi_nrf_hal_otp_info_get+0x58>)
    eee0:	6818      	ldr	r0, [r3, #0]
    eee2:	f013 fe33 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    eee6:	f04f 34ff 	mov.w	r4, #4294967295
				      __func__);
		goto out;
	}
out:
	return status;
}
    eeea:	4620      	mov	r0, r4
    eeec:	bd70      	pop	{r4, r5, r6, pc}
	status = hal_rpu_mem_read(hal_dev_ctx,
    eeee:	23b8      	movs	r3, #184	; 0xb8
    eef0:	f04f 4230 	mov.w	r2, #2952790016	; 0xb0000000
    eef4:	f000 fbc8 	bl	f688 <hal_rpu_mem_read>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    eef8:	4604      	mov	r4, r0
    eefa:	b130      	cbz	r0, ef0a <wifi_nrf_hal_otp_info_get+0x3a>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    eefc:	682b      	ldr	r3, [r5, #0]
    eefe:	4a09      	ldr	r2, [pc, #36]	; (ef24 <wifi_nrf_hal_otp_info_get+0x54>)
    ef00:	490a      	ldr	r1, [pc, #40]	; (ef2c <wifi_nrf_hal_otp_info_get+0x5c>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ef02:	6818      	ldr	r0, [r3, #0]
    ef04:	f013 fe22 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    ef08:	e7ef      	b.n	eeea <wifi_nrf_hal_otp_info_get+0x1a>
	status = hal_rpu_mem_read(hal_dev_ctx,
    ef0a:	2304      	movs	r3, #4
    ef0c:	4631      	mov	r1, r6
    ef0e:	4628      	mov	r0, r5
    ef10:	4a07      	ldr	r2, [pc, #28]	; (ef30 <wifi_nrf_hal_otp_info_get+0x60>)
    ef12:	f000 fbb9 	bl	f688 <hal_rpu_mem_read>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    ef16:	4604      	mov	r4, r0
    ef18:	2800      	cmp	r0, #0
    ef1a:	d0e6      	beq.n	eeea <wifi_nrf_hal_otp_info_get+0x1a>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ef1c:	682b      	ldr	r3, [r5, #0]
    ef1e:	4a01      	ldr	r2, [pc, #4]	; (ef24 <wifi_nrf_hal_otp_info_get+0x54>)
    ef20:	4904      	ldr	r1, [pc, #16]	; (ef34 <wifi_nrf_hal_otp_info_get+0x64>)
    ef22:	e7ee      	b.n	ef02 <wifi_nrf_hal_otp_info_get+0x32>
    ef24:	00034062 	.word	0x00034062
    ef28:	00034017 	.word	0x00034017
    ef2c:	0003402f 	.word	0x0003402f
    ef30:	b0004fdc 	.word	0xb0004fdc
    ef34:	00034048 	.word	0x00034048

0000ef38 <wifi_nrf_hal_fw_patch_load>:
						enum RPU_PROC_TYPE rpu_proc,
						const void *fw_pri_patch_data,
						unsigned int fw_pri_patch_size,
						const void *fw_sec_patch_data,
						unsigned int fw_sec_patch_size)
{
    ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef3c:	b093      	sub	sp, #76	; 0x4c
    ef3e:	4604      	mov	r4, r0
    ef40:	460d      	mov	r5, r1
    ef42:	981c      	ldr	r0, [sp, #112]	; 0x70
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	unsigned int pri_dest_addr = 0;
	unsigned int sec_dest_addr = 0;

	if (!fw_pri_patch_data) {
    ef44:	b94a      	cbnz	r2, ef5a <wifi_nrf_hal_fw_patch_load+0x22>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ef46:	460b      	mov	r3, r1
    ef48:	6820      	ldr	r0, [r4, #0]
    ef4a:	4a5d      	ldr	r2, [pc, #372]	; (f0c0 <wifi_nrf_hal_fw_patch_load+0x188>)
    ef4c:	495d      	ldr	r1, [pc, #372]	; (f0c4 <wifi_nrf_hal_fw_patch_load+0x18c>)
	case RPU_PROC_TYPE_MCU_UMAC:
		pri_dest_addr = RPU_MEM_UMAC_PATCH_BIMG;
		sec_dest_addr = RPU_MEM_UMAC_PATCH_BIN;
		break;
	default:
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ef4e:	6800      	ldr	r0, [r0, #0]
    ef50:	f013 fdfc 	bl	22b4c <wifi_nrf_osal_log_err>
		status = WIFI_NRF_STATUS_FAIL;
    ef54:	f04f 37ff 	mov.w	r7, #4294967295
    ef58:	e0aa      	b.n	f0b0 <wifi_nrf_hal_fw_patch_load+0x178>
	if (!fw_sec_patch_data) {
    ef5a:	b920      	cbnz	r0, ef66 <wifi_nrf_hal_fw_patch_load+0x2e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ef5c:	460b      	mov	r3, r1
    ef5e:	6820      	ldr	r0, [r4, #0]
    ef60:	4a57      	ldr	r2, [pc, #348]	; (f0c0 <wifi_nrf_hal_fw_patch_load+0x188>)
    ef62:	4959      	ldr	r1, [pc, #356]	; (f0c8 <wifi_nrf_hal_fw_patch_load+0x190>)
    ef64:	e7f3      	b.n	ef4e <wifi_nrf_hal_fw_patch_load+0x16>
	hal_dev_ctx->curr_proc = rpu_proc;
    ef66:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
	switch (rpu_proc) {
    ef6a:	b131      	cbz	r1, ef7a <wifi_nrf_hal_fw_patch_load+0x42>
    ef6c:	2901      	cmp	r1, #1
    ef6e:	d036      	beq.n	efde <wifi_nrf_hal_fw_patch_load+0xa6>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    ef70:	460b      	mov	r3, r1
    ef72:	6820      	ldr	r0, [r4, #0]
    ef74:	4a52      	ldr	r2, [pc, #328]	; (f0c0 <wifi_nrf_hal_fw_patch_load+0x188>)
    ef76:	4955      	ldr	r1, [pc, #340]	; (f0cc <wifi_nrf_hal_fw_patch_load+0x194>)
    ef78:	e7e9      	b.n	ef4e <wifi_nrf_hal_fw_patch_load+0x16>
	switch (rpu_proc) {
    ef7a:	4955      	ldr	r1, [pc, #340]	; (f0d0 <wifi_nrf_hal_fw_patch_load+0x198>)
    ef7c:	4e55      	ldr	r6, [pc, #340]	; (f0d4 <wifi_nrf_hal_fw_patch_load+0x19c>)
				      rpu_proc);

		goto out;
	}

	const struct patch_contents patches[] = {
    ef7e:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
    ef82:	4b55      	ldr	r3, [pc, #340]	; (f0d8 <wifi_nrf_hal_fw_patch_load+0x1a0>)
    ef84:	4f55      	ldr	r7, [pc, #340]	; (f0dc <wifi_nrf_hal_fw_patch_load+0x1a4>)
    ef86:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
    ef8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ef8c:	e9cd 720a 	strd	r7, r2, [sp, #40]	; 0x28
    ef90:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    ef94:	2302      	movs	r3, #2
    ef96:	f10d 0928 	add.w	r9, sp, #40	; 0x28
    ef9a:	9306      	str	r3, [sp, #24]
	};

	for (int patch = 0; patch < ARRAY_SIZE(patches); patch++) {
		status = hal_fw_patch_load(hal_dev_ctx,
					   rpu_proc,
					   patches[patch].id_str,
    ef9c:	f8d9 3000 	ldr.w	r3, [r9]
	for (int chunk = 0; chunk < num_chunks; chunk++) {
    efa0:	2600      	movs	r6, #0
					   patches[patch].id_str,
    efa2:	9305      	str	r3, [sp, #20]
					   patches[patch].dest_addr,
    efa4:	f8d9 300c 	ldr.w	r3, [r9, #12]
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    efa8:	f04f 37ff 	mov.w	r7, #4294967295
					   patches[patch].dest_addr,
    efac:	9307      	str	r3, [sp, #28]
					   patches[patch].data,
    efae:	f8d9 3004 	ldr.w	r3, [r9, #4]
    efb2:	9308      	str	r3, [sp, #32]
					   patches[patch].size);
    efb4:	f8d9 3008 	ldr.w	r3, [r9, #8]
	int last_chunk_size = fw_patch_size % MAX_PATCH_CHUNK_SIZE;
    efb8:	f3c3 020c 	ubfx	r2, r3, #0, #13
    efbc:	9209      	str	r2, [sp, #36]	; 0x24
					(last_chunk_size ? 1 : 0);
    efbe:	3a00      	subs	r2, #0
    efc0:	bf18      	it	ne
    efc2:	2201      	movne	r2, #1
	int num_chunks = fw_patch_size / MAX_PATCH_CHUNK_SIZE +
    efc4:	eb02 3853 	add.w	r8, r2, r3, lsr #13
	for (int chunk = 0; chunk < num_chunks; chunk++) {
    efc8:	45b0      	cmp	r8, r6
    efca:	dc0b      	bgt.n	efe4 <wifi_nrf_hal_fw_patch_load+0xac>
		if (status != WIFI_NRF_STATUS_SUCCESS)
    efcc:	2f00      	cmp	r7, #0
    efce:	d1c1      	bne.n	ef54 <wifi_nrf_hal_fw_patch_load+0x1c>
	for (int patch = 0; patch < ARRAY_SIZE(patches); patch++) {
    efd0:	9b06      	ldr	r3, [sp, #24]
    efd2:	f109 0910 	add.w	r9, r9, #16
    efd6:	2b01      	cmp	r3, #1
    efd8:	d06a      	beq.n	f0b0 <wifi_nrf_hal_fw_patch_load+0x178>
    efda:	2301      	movs	r3, #1
    efdc:	e7dd      	b.n	ef9a <wifi_nrf_hal_fw_patch_load+0x62>
		sec_dest_addr = RPU_MEM_UMAC_PATCH_BIN;
    efde:	4940      	ldr	r1, [pc, #256]	; (f0e0 <wifi_nrf_hal_fw_patch_load+0x1a8>)
		pri_dest_addr = RPU_MEM_UMAC_PATCH_BIMG;
    efe0:	4e40      	ldr	r6, [pc, #256]	; (f0e4 <wifi_nrf_hal_fw_patch_load+0x1ac>)
    efe2:	e7cc      	b.n	ef7e <wifi_nrf_hal_fw_patch_load+0x46>
			((chunk == num_chunks - 1) ? last_chunk_size : MAX_PATCH_CHUNK_SIZE);
    efe4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    efe8:	f108 33ff 	add.w	r3, r8, #4294967295
    efec:	42b3      	cmp	r3, r6
    efee:	bf18      	it	ne
    eff0:	f44f 5a00 	movne.w	sl, #8192	; 0x2000
		const void *src_patch_offset = (const char *)fw_patch_data +
    eff4:	9b08      	ldr	r3, [sp, #32]
		patch_data_ram = wifi_nrf_osal_mem_alloc(hal_dev_ctx->hpriv->opriv,
    eff6:	4651      	mov	r1, sl
		const void *src_patch_offset = (const char *)fw_patch_data +
    eff8:	eb03 3b46 	add.w	fp, r3, r6, lsl #13
		int dest_chunk_offset = dest_addr + chunk * MAX_PATCH_CHUNK_SIZE;
    effc:	9b07      	ldr	r3, [sp, #28]
    effe:	eb03 3746 	add.w	r7, r3, r6, lsl #13
		patch_data_ram = wifi_nrf_osal_mem_alloc(hal_dev_ctx->hpriv->opriv,
    f002:	6823      	ldr	r3, [r4, #0]
    f004:	6818      	ldr	r0, [r3, #0]
    f006:	f013 fd44 	bl	22a92 <wifi_nrf_osal_mem_alloc>
		if (!patch_data_ram) {
    f00a:	9004      	str	r0, [sp, #16]
    f00c:	9b04      	ldr	r3, [sp, #16]
    f00e:	6820      	ldr	r0, [r4, #0]
    f010:	b99b      	cbnz	r3, f03a <wifi_nrf_hal_fw_patch_load+0x102>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f012:	6800      	ldr	r0, [r0, #0]
	RPU_PROC_TYPE_MAX
};

static inline const char *rpu_proc_to_str(enum RPU_PROC_TYPE proc)
{
	switch (proc) {
    f014:	b17d      	cbz	r5, f036 <wifi_nrf_hal_fw_patch_load+0xfe>
	case RPU_PROC_TYPE_MCU_LMAC:
		return "LMAC";
	case RPU_PROC_TYPE_MCU_UMAC:
		return "UMAC";
	default:
		return "UNKNOWN";
    f016:	4b34      	ldr	r3, [pc, #208]	; (f0e8 <wifi_nrf_hal_fw_patch_load+0x1b0>)
    f018:	4a34      	ldr	r2, [pc, #208]	; (f0ec <wifi_nrf_hal_fw_patch_load+0x1b4>)
    f01a:	2d01      	cmp	r5, #1
    f01c:	bf18      	it	ne
    f01e:	4613      	movne	r3, r2
    f020:	9a05      	ldr	r2, [sp, #20]
    f022:	3601      	adds	r6, #1
    f024:	9200      	str	r2, [sp, #0]
    f026:	e9cd 8a02 	strd	r8, sl, [sp, #8]
    f02a:	4a31      	ldr	r2, [pc, #196]	; (f0f0 <wifi_nrf_hal_fw_patch_load+0x1b8>)
    f02c:	4931      	ldr	r1, [pc, #196]	; (f0f4 <wifi_nrf_hal_fw_patch_load+0x1bc>)
    f02e:	9601      	str	r6, [sp, #4]
    f030:	f013 fd8c 	bl	22b4c <wifi_nrf_osal_log_err>
		if (status != WIFI_NRF_STATUS_SUCCESS)
    f034:	e78e      	b.n	ef54 <wifi_nrf_hal_fw_patch_load+0x1c>
		return "LMAC";
    f036:	4b30      	ldr	r3, [pc, #192]	; (f0f8 <wifi_nrf_hal_fw_patch_load+0x1c0>)
    f038:	e7f2      	b.n	f020 <wifi_nrf_hal_fw_patch_load+0xe8>
		wifi_nrf_osal_mem_cpy(hal_dev_ctx->hpriv->opriv,
    f03a:	4653      	mov	r3, sl
    f03c:	465a      	mov	r2, fp
    f03e:	9904      	ldr	r1, [sp, #16]
    f040:	6800      	ldr	r0, [r0, #0]
    f042:	f013 fd32 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		wifi_nrf_osal_log_dbg(hal_dev_ctx->hpriv->opriv,
    f046:	6823      	ldr	r3, [r4, #0]
    f048:	6818      	ldr	r0, [r3, #0]
	switch (proc) {
    f04a:	b1f5      	cbz	r5, f08a <wifi_nrf_hal_fw_patch_load+0x152>
		return "UNKNOWN";
    f04c:	f8df b098 	ldr.w	fp, [pc, #152]	; f0e8 <wifi_nrf_hal_fw_patch_load+0x1b0>
    f050:	4b26      	ldr	r3, [pc, #152]	; (f0ec <wifi_nrf_hal_fw_patch_load+0x1b4>)
    f052:	2d01      	cmp	r5, #1
    f054:	bf18      	it	ne
    f056:	469b      	movne	fp, r3
    f058:	9b05      	ldr	r3, [sp, #20]
    f05a:	3601      	adds	r6, #1
    f05c:	4a24      	ldr	r2, [pc, #144]	; (f0f0 <wifi_nrf_hal_fw_patch_load+0x1b8>)
    f05e:	4927      	ldr	r1, [pc, #156]	; (f0fc <wifi_nrf_hal_fw_patch_load+0x1c4>)
    f060:	9300      	str	r3, [sp, #0]
    f062:	e9cd 8a02 	strd	r8, sl, [sp, #8]
    f066:	465b      	mov	r3, fp
    f068:	9601      	str	r6, [sp, #4]
    f06a:	f013 fd51 	bl	22b10 <wifi_nrf_osal_log_dbg>
		status = hal_rpu_mem_write(hal_dev_ctx,
    f06e:	4639      	mov	r1, r7
    f070:	4653      	mov	r3, sl
    f072:	4620      	mov	r0, r4
    f074:	9a04      	ldr	r2, [sp, #16]
    f076:	f000 fb65 	bl	f744 <hal_rpu_mem_write>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f07a:	4607      	mov	r7, r0
    f07c:	6820      	ldr	r0, [r4, #0]
    f07e:	b93f      	cbnz	r7, f090 <wifi_nrf_hal_fw_patch_load+0x158>
			wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f080:	9904      	ldr	r1, [sp, #16]
    f082:	6800      	ldr	r0, [r0, #0]
    f084:	f013 fd0d 	bl	22aa2 <wifi_nrf_osal_mem_free>
	for (int chunk = 0; chunk < num_chunks; chunk++) {
    f088:	e79e      	b.n	efc8 <wifi_nrf_hal_fw_patch_load+0x90>
		return "LMAC";
    f08a:	f8df b06c 	ldr.w	fp, [pc, #108]	; f0f8 <wifi_nrf_hal_fw_patch_load+0x1c0>
    f08e:	e7e3      	b.n	f058 <wifi_nrf_hal_fw_patch_load+0x120>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f090:	9b05      	ldr	r3, [sp, #20]
    f092:	e9cd 8a02 	strd	r8, sl, [sp, #8]
    f096:	9300      	str	r3, [sp, #0]
    f098:	9601      	str	r6, [sp, #4]
    f09a:	465b      	mov	r3, fp
    f09c:	4918      	ldr	r1, [pc, #96]	; (f100 <wifi_nrf_hal_fw_patch_load+0x1c8>)
    f09e:	4a14      	ldr	r2, [pc, #80]	; (f0f0 <wifi_nrf_hal_fw_patch_load+0x1b8>)
    f0a0:	6800      	ldr	r0, [r0, #0]
    f0a2:	f013 fd53 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f0a6:	6823      	ldr	r3, [r4, #0]
    f0a8:	9904      	ldr	r1, [sp, #16]
    f0aa:	6818      	ldr	r0, [r3, #0]
    f0ac:	f013 fcf9 	bl	22aa2 <wifi_nrf_osal_mem_free>
			goto out;
	}
out:
	/* Reset the HAL RPU context to the LMAC context */
	hal_dev_ctx->curr_proc = RPU_PROC_TYPE_MCU_LMAC;
    f0b0:	2300      	movs	r3, #0

	return status;
}
    f0b2:	4638      	mov	r0, r7
	hal_dev_ctx->curr_proc = RPU_PROC_TYPE_MCU_LMAC;
    f0b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    f0b8:	b013      	add	sp, #76	; 0x4c
    f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0be:	bf00      	nop
    f0c0:	0003455b 	.word	0x0003455b
    f0c4:	0003427f 	.word	0x0003427f
    f0c8:	000342a7 	.word	0x000342a7
    f0cc:	000342d1 	.word	0x000342d1
    f0d0:	80044000 	.word	0x80044000
    f0d4:	80049000 	.word	0x80049000
    f0d8:	000342fa 	.word	0x000342fa
    f0dc:	000342f5 	.word	0x000342f5
    f0e0:	8008c000 	.word	0x8008c000
    f0e4:	80094400 	.word	0x80094400
    f0e8:	0003427a 	.word	0x0003427a
    f0ec:	00031f71 	.word	0x00031f71
    f0f0:	00034549 	.word	0x00034549
    f0f4:	000342fe 	.word	0x000342fe
    f0f8:	00034275 	.word	0x00034275
    f0fc:	00034344 	.word	0x00034344
    f100:	00034374 	.word	0x00034374

0000f104 <wifi_nrf_hal_fw_patch_boot>:
						enum RPU_PROC_TYPE rpu_proc,
						bool is_patch_present)
{
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	unsigned int boot_sig_addr = 0;
	unsigned int boot_sig_val = 0;
    f104:	2300      	movs	r3, #0
{
    f106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f10a:	b087      	sub	sp, #28
    f10c:	4605      	mov	r5, r0
    f10e:	4617      	mov	r7, r2
	unsigned int boot_excp_3_val = 0;
	unsigned int sleepctrl_addr = 0;
	unsigned int sleepctrl_val = 0;
	unsigned int run_addr = 0;

	if (rpu_proc == RPU_PROC_TYPE_MCU_LMAC) {
    f110:	460e      	mov	r6, r1
	unsigned int boot_sig_val = 0;
    f112:	9305      	str	r3, [sp, #20]
	if (rpu_proc == RPU_PROC_TYPE_MCU_LMAC) {
    f114:	bb29      	cbnz	r1, f162 <wifi_nrf_hal_fw_patch_boot+0x5e>
		boot_sig_addr = RPU_MEM_LMAC_BOOT_SIG;
		run_addr = RPU_REG_MIPS_MCU_CONTROL;
    f116:	429a      	cmp	r2, r3
    f118:	f04f 4924 	mov.w	r9, #2751463424	; 0xa4000000
    f11c:	bf0a      	itet	eq
    f11e:	4693      	moveq	fp, r2
    f120:	f44f 4b10 	movne.w	fp, #36864	; 0x9000
    f124:	4690      	moveq	r8, r2
    f126:	4b46      	ldr	r3, [pc, #280]	; (f240 <wifi_nrf_hal_fw_patch_boot+0x13c>)
    f128:	f8df a118 	ldr.w	sl, [pc, #280]	; f244 <wifi_nrf_hal_fw_patch_boot+0x140>
    f12c:	bf18      	it	ne
    f12e:	4698      	movne	r8, r3
    f130:	4b45      	ldr	r3, [pc, #276]	; (f248 <wifi_nrf_hal_fw_patch_boot+0x144>)
    f132:	4946      	ldr	r1, [pc, #280]	; (f24c <wifi_nrf_hal_fw_patch_boot+0x148>)
    f134:	9303      	str	r3, [sp, #12]
    f136:	3b04      	subs	r3, #4
    f138:	9302      	str	r3, [sp, #8]
    f13a:	3b04      	subs	r3, #4
    f13c:	9301      	str	r3, [sp, #4]

	/* Set the HAL RPU context to the current required context */
	hal_dev_ctx->curr_proc = rpu_proc;

	/* Clear the firmware pass signature location */
	status = hal_rpu_mem_write(hal_dev_ctx,
    f13e:	2304      	movs	r3, #4
    f140:	4628      	mov	r0, r5
	hal_dev_ctx->curr_proc = rpu_proc;
    f142:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
	status = hal_rpu_mem_write(hal_dev_ctx,
    f146:	aa05      	add	r2, sp, #20
    f148:	f000 fafc 	bl	f744 <hal_rpu_mem_write>
				   boot_sig_addr,
				   &boot_sig_val,
				   sizeof(boot_sig_val));

	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f14c:	4604      	mov	r4, r0
    f14e:	2800      	cmp	r0, #0
    f150:	d032      	beq.n	f1b8 <wifi_nrf_hal_fw_patch_boot+0xb4>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f152:	4633      	mov	r3, r6
    f154:	6828      	ldr	r0, [r5, #0]
    f156:	4a3e      	ldr	r2, [pc, #248]	; (f250 <wifi_nrf_hal_fw_patch_boot+0x14c>)
    f158:	493e      	ldr	r1, [pc, #248]	; (f254 <wifi_nrf_hal_fw_patch_boot+0x150>)
	status = hal_rpu_reg_write(hal_dev_ctx,
				   run_addr,
				   0x1);

	if (status != WIFI_NRF_STATUS_SUCCESS) {
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f15a:	6800      	ldr	r0, [r0, #0]
    f15c:	f013 fcf6 	bl	22b4c <wifi_nrf_osal_log_err>
				      "%s: RPU processor(%d) run failed\n",
				      __func__,
				      rpu_proc);

		goto out;
    f160:	e023      	b.n	f1aa <wifi_nrf_hal_fw_patch_boot+0xa6>
	} else if (rpu_proc == RPU_PROC_TYPE_MCU_UMAC) {
    f162:	2901      	cmp	r1, #1
    f164:	d118      	bne.n	f198 <wifi_nrf_hal_fw_patch_boot+0x94>
		run_addr = RPU_REG_MIPS_MCU2_CONTROL;
    f166:	4b3c      	ldr	r3, [pc, #240]	; (f258 <wifi_nrf_hal_fw_patch_boot+0x154>)
    f168:	2a00      	cmp	r2, #0
    f16a:	bf18      	it	ne
    f16c:	4698      	movne	r8, r3
    f16e:	4b3b      	ldr	r3, [pc, #236]	; (f25c <wifi_nrf_hal_fw_patch_boot+0x158>)
    f170:	bf08      	it	eq
    f172:	4693      	moveq	fp, r2
    f174:	9303      	str	r3, [sp, #12]
    f176:	f1a3 0304 	sub.w	r3, r3, #4
    f17a:	9302      	str	r3, [sp, #8]
    f17c:	f1a3 0304 	sub.w	r3, r3, #4
    f180:	bf14      	ite	ne
    f182:	f44f 3ba2 	movne.w	fp, #82944	; 0x14400
    f186:	4690      	moveq	r8, r2
    f188:	f04f 4130 	mov.w	r1, #2952790016	; 0xb0000000
    f18c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; f260 <wifi_nrf_hal_fw_patch_boot+0x15c>
    f190:	f8df a0d0 	ldr.w	sl, [pc, #208]	; f264 <wifi_nrf_hal_fw_patch_boot+0x160>
    f194:	9301      	str	r3, [sp, #4]
    f196:	e7d2      	b.n	f13e <wifi_nrf_hal_fw_patch_boot+0x3a>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f198:	6800      	ldr	r0, [r0, #0]
    f19a:	460b      	mov	r3, r1
    f19c:	4a2c      	ldr	r2, [pc, #176]	; (f250 <wifi_nrf_hal_fw_patch_boot+0x14c>)
    f19e:	4932      	ldr	r1, [pc, #200]	; (f268 <wifi_nrf_hal_fw_patch_boot+0x164>)
    f1a0:	6800      	ldr	r0, [r0, #0]
    f1a2:	f013 fcd3 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    f1a6:	f04f 34ff 	mov.w	r4, #4294967295
	}
out:
	/* Reset the HAL RPU context to the LMAC context */
	hal_dev_ctx->curr_proc = RPU_PROC_TYPE_MCU_LMAC;
    f1aa:	2300      	movs	r3, #0

	return status;

}
    f1ac:	4620      	mov	r0, r4
	hal_dev_ctx->curr_proc = RPU_PROC_TYPE_MCU_LMAC;
    f1ae:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    f1b2:	b007      	add	sp, #28
    f1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (is_patch_present) {
    f1b8:	b127      	cbz	r7, f1c4 <wifi_nrf_hal_fw_patch_boot+0xc0>
		status = hal_rpu_reg_write(hal_dev_ctx,
    f1ba:	465a      	mov	r2, fp
    f1bc:	4641      	mov	r1, r8
    f1be:	4628      	mov	r0, r5
    f1c0:	f000 fc1e 	bl	fa00 <hal_rpu_reg_write>
	status = hal_rpu_reg_write(hal_dev_ctx,
    f1c4:	4651      	mov	r1, sl
    f1c6:	4628      	mov	r0, r5
    f1c8:	4a28      	ldr	r2, [pc, #160]	; (f26c <wifi_nrf_hal_fw_patch_boot+0x168>)
    f1ca:	f000 fc19 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f1ce:	4604      	mov	r4, r0
    f1d0:	b120      	cbz	r0, f1dc <wifi_nrf_hal_fw_patch_boot+0xd8>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f1d2:	4633      	mov	r3, r6
    f1d4:	6828      	ldr	r0, [r5, #0]
    f1d6:	4a1e      	ldr	r2, [pc, #120]	; (f250 <wifi_nrf_hal_fw_patch_boot+0x14c>)
    f1d8:	4925      	ldr	r1, [pc, #148]	; (f270 <wifi_nrf_hal_fw_patch_boot+0x16c>)
    f1da:	e7be      	b.n	f15a <wifi_nrf_hal_fw_patch_boot+0x56>
	status = hal_rpu_reg_write(hal_dev_ctx,
    f1dc:	4628      	mov	r0, r5
    f1de:	4a25      	ldr	r2, [pc, #148]	; (f274 <wifi_nrf_hal_fw_patch_boot+0x170>)
    f1e0:	9901      	ldr	r1, [sp, #4]
    f1e2:	f000 fc0d 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f1e6:	4604      	mov	r4, r0
    f1e8:	b120      	cbz	r0, f1f4 <wifi_nrf_hal_fw_patch_boot+0xf0>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f1ea:	4633      	mov	r3, r6
    f1ec:	6828      	ldr	r0, [r5, #0]
    f1ee:	4a18      	ldr	r2, [pc, #96]	; (f250 <wifi_nrf_hal_fw_patch_boot+0x14c>)
    f1f0:	4921      	ldr	r1, [pc, #132]	; (f278 <wifi_nrf_hal_fw_patch_boot+0x174>)
    f1f2:	e7b2      	b.n	f15a <wifi_nrf_hal_fw_patch_boot+0x56>
	status = hal_rpu_reg_write(hal_dev_ctx,
    f1f4:	4628      	mov	r0, r5
    f1f6:	4a21      	ldr	r2, [pc, #132]	; (f27c <wifi_nrf_hal_fw_patch_boot+0x178>)
    f1f8:	9902      	ldr	r1, [sp, #8]
    f1fa:	f000 fc01 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f1fe:	4604      	mov	r4, r0
    f200:	b120      	cbz	r0, f20c <wifi_nrf_hal_fw_patch_boot+0x108>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f202:	4633      	mov	r3, r6
    f204:	6828      	ldr	r0, [r5, #0]
    f206:	4a12      	ldr	r2, [pc, #72]	; (f250 <wifi_nrf_hal_fw_patch_boot+0x14c>)
    f208:	491d      	ldr	r1, [pc, #116]	; (f280 <wifi_nrf_hal_fw_patch_boot+0x17c>)
    f20a:	e7a6      	b.n	f15a <wifi_nrf_hal_fw_patch_boot+0x56>
	status = hal_rpu_reg_write(hal_dev_ctx,
    f20c:	4602      	mov	r2, r0
    f20e:	9903      	ldr	r1, [sp, #12]
    f210:	4628      	mov	r0, r5
    f212:	f000 fbf5 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f216:	4604      	mov	r4, r0
    f218:	b120      	cbz	r0, f224 <wifi_nrf_hal_fw_patch_boot+0x120>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f21a:	4633      	mov	r3, r6
    f21c:	6828      	ldr	r0, [r5, #0]
    f21e:	4a0c      	ldr	r2, [pc, #48]	; (f250 <wifi_nrf_hal_fw_patch_boot+0x14c>)
    f220:	4918      	ldr	r1, [pc, #96]	; (f284 <wifi_nrf_hal_fw_patch_boot+0x180>)
    f222:	e79a      	b.n	f15a <wifi_nrf_hal_fw_patch_boot+0x56>
	status = hal_rpu_reg_write(hal_dev_ctx,
    f224:	2201      	movs	r2, #1
    f226:	4649      	mov	r1, r9
    f228:	4628      	mov	r0, r5
    f22a:	f000 fbe9 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f22e:	4604      	mov	r4, r0
    f230:	2800      	cmp	r0, #0
    f232:	d0ba      	beq.n	f1aa <wifi_nrf_hal_fw_patch_boot+0xa6>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f234:	4633      	mov	r3, r6
    f236:	6828      	ldr	r0, [r5, #0]
    f238:	4a05      	ldr	r2, [pc, #20]	; (f250 <wifi_nrf_hal_fw_patch_boot+0x14c>)
    f23a:	4913      	ldr	r1, [pc, #76]	; (f288 <wifi_nrf_hal_fw_patch_boot+0x184>)
    f23c:	e78d      	b.n	f15a <wifi_nrf_hal_fw_patch_boot+0x56>
    f23e:	bf00      	nop
    f240:	a4002c2c 	.word	0xa4002c2c
    f244:	a4000050 	.word	0xa4000050
    f248:	a400005c 	.word	0xa400005c
    f24c:	b7000d50 	.word	0xb7000d50
    f250:	0003452e 	.word	0x0003452e
    f254:	000343ce 	.word	0x000343ce
    f258:	a4002c30 	.word	0xa4002c30
    f25c:	a400015c 	.word	0xa400015c
    f260:	a4000100 	.word	0xa4000100
    f264:	a4000150 	.word	0xa4000150
    f268:	000343ab 	.word	0x000343ab
    f26c:	3c1a8000 	.word	0x3c1a8000
    f270:	00034404 	.word	0x00034404
    f274:	275a0000 	.word	0x275a0000
    f278:	00034446 	.word	0x00034446
    f27c:	03400008 	.word	0x03400008
    f280:	00034488 	.word	0x00034488
    f284:	000344ca 	.word	0x000344ca
    f288:	0003450c 	.word	0x0003450c

0000f28c <hal_rpu_event_free>:
}


static enum wifi_nrf_status hal_rpu_event_free(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
					       unsigned int event_addr)
{
    f28c:	b538      	push	{r3, r4, r5, lr}
    f28e:	460a      	mov	r2, r1
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	status = hal_rpu_hpq_enqueue(hal_dev_ctx,
    f290:	f100 0118 	add.w	r1, r0, #24
{
    f294:	4605      	mov	r5, r0
	status = hal_rpu_hpq_enqueue(hal_dev_ctx,
    f296:	f000 fc01 	bl	fa9c <hal_rpu_hpq_enqueue>
				     &hal_dev_ctx->rpu_info.hpqm_info.event_avl_queue,
				     event_addr);

	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f29a:	4604      	mov	r4, r0
    f29c:	b128      	cbz	r0, f2aa <hal_rpu_event_free+0x1e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f29e:	682b      	ldr	r3, [r5, #0]
    f2a0:	4a03      	ldr	r2, [pc, #12]	; (f2b0 <hal_rpu_event_free+0x24>)
    f2a2:	4904      	ldr	r1, [pc, #16]	; (f2b4 <hal_rpu_event_free+0x28>)
    f2a4:	6818      	ldr	r0, [r3, #0]
    f2a6:	f013 fc51 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
	}

out:
	return status;
}
    f2aa:	4620      	mov	r0, r4
    f2ac:	bd38      	pop	{r3, r4, r5, pc}
    f2ae:	bf00      	nop
    f2b0:	0003482c 	.word	0x0003482c
    f2b4:	00034576 	.word	0x00034576

0000f2b8 <hal_rpu_irq_enable>:
	unsigned int val = 0;
    f2b8:	2300      	movs	r3, #0
{
    f2ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
	status = hal_rpu_reg_read(hal_dev_ctx,
    f2bc:	4a16      	ldr	r2, [pc, #88]	; (f318 <hal_rpu_irq_enable+0x60>)
    f2be:	a901      	add	r1, sp, #4
{
    f2c0:	4605      	mov	r5, r0
	unsigned int val = 0;
    f2c2:	9301      	str	r3, [sp, #4]
	status = hal_rpu_reg_read(hal_dev_ctx,
    f2c4:	f000 fb3c 	bl	f940 <hal_rpu_reg_read>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f2c8:	4604      	mov	r4, r0
    f2ca:	b140      	cbz	r0, f2de <hal_rpu_irq_enable+0x26>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f2cc:	682b      	ldr	r3, [r5, #0]
    f2ce:	4a13      	ldr	r2, [pc, #76]	; (f31c <hal_rpu_irq_enable+0x64>)
    f2d0:	4913      	ldr	r1, [pc, #76]	; (f320 <hal_rpu_irq_enable+0x68>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f2d2:	6818      	ldr	r0, [r3, #0]
    f2d4:	f013 fc3a 	bl	22b4c <wifi_nrf_osal_log_err>
}
    f2d8:	4620      	mov	r0, r4
    f2da:	b003      	add	sp, #12
    f2dc:	bd30      	pop	{r4, r5, pc}
	val |= (1 << RPU_REG_BIT_INT_FROM_RPU_CTRL);
    f2de:	9a01      	ldr	r2, [sp, #4]
	status = hal_rpu_reg_write(hal_dev_ctx,
    f2e0:	4628      	mov	r0, r5
	val |= (1 << RPU_REG_BIT_INT_FROM_RPU_CTRL);
    f2e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	status = hal_rpu_reg_write(hal_dev_ctx,
    f2e6:	490c      	ldr	r1, [pc, #48]	; (f318 <hal_rpu_irq_enable+0x60>)
	val |= (1 << RPU_REG_BIT_INT_FROM_RPU_CTRL);
    f2e8:	9201      	str	r2, [sp, #4]
	status = hal_rpu_reg_write(hal_dev_ctx,
    f2ea:	f000 fb89 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f2ee:	4604      	mov	r4, r0
    f2f0:	b118      	cbz	r0, f2fa <hal_rpu_irq_enable+0x42>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f2f2:	682b      	ldr	r3, [r5, #0]
    f2f4:	4a09      	ldr	r2, [pc, #36]	; (f31c <hal_rpu_irq_enable+0x64>)
    f2f6:	490b      	ldr	r1, [pc, #44]	; (f324 <hal_rpu_irq_enable+0x6c>)
    f2f8:	e7eb      	b.n	f2d2 <hal_rpu_irq_enable+0x1a>
	val = (1 << RPU_REG_BIT_INT_FROM_MCU_CTRL);
    f2fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	status = hal_rpu_reg_write(hal_dev_ctx,
    f2fe:	4628      	mov	r0, r5
    f300:	4909      	ldr	r1, [pc, #36]	; (f328 <hal_rpu_irq_enable+0x70>)
	val = (1 << RPU_REG_BIT_INT_FROM_MCU_CTRL);
    f302:	9201      	str	r2, [sp, #4]
	status = hal_rpu_reg_write(hal_dev_ctx,
    f304:	f000 fb7c 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f308:	4604      	mov	r4, r0
    f30a:	2800      	cmp	r0, #0
    f30c:	d0e4      	beq.n	f2d8 <hal_rpu_irq_enable+0x20>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f30e:	682b      	ldr	r3, [r5, #0]
    f310:	4a02      	ldr	r2, [pc, #8]	; (f31c <hal_rpu_irq_enable+0x64>)
    f312:	4906      	ldr	r1, [pc, #24]	; (f32c <hal_rpu_irq_enable+0x74>)
    f314:	e7dd      	b.n	f2d2 <hal_rpu_irq_enable+0x1a>
    f316:	bf00      	nop
    f318:	a4000400 	.word	0xa4000400
    f31c:	0003487b 	.word	0x0003487b
    f320:	00034596 	.word	0x00034596
    f324:	000345c7 	.word	0x000345c7
    f328:	a4000494 	.word	0xa4000494
    f32c:	000345eb 	.word	0x000345eb

0000f330 <hal_rpu_irq_process>:
	return num_events;
}


enum wifi_nrf_status hal_rpu_irq_process(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx)
{
    f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int num_events = 0;
    f334:	f04f 0800 	mov.w	r8, #0
{
    f338:	4604      	mov	r4, r0
		event_addr = 0;
    f33a:	46c1      	mov	r9, r8
{
    f33c:	b0a3      	sub	sp, #140	; 0x8c
		status = hal_rpu_hpq_dequeue(hal_dev_ctx,
    f33e:	f100 0a10 	add.w	sl, r0, #16
    f342:	4651      	mov	r1, sl
    f344:	4620      	mov	r0, r4
    f346:	aa01      	add	r2, sp, #4
		event_addr = 0;
    f348:	f8cd 9004 	str.w	r9, [sp, #4]
		status = hal_rpu_hpq_dequeue(hal_dev_ctx,
    f34c:	f000 fbba 	bl	fac4 <hal_rpu_hpq_dequeue>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f350:	4683      	mov	fp, r0
    f352:	b330      	cbz	r0, f3a2 <hal_rpu_irq_process+0x72>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f354:	6823      	ldr	r3, [r4, #0]
    f356:	4aa2      	ldr	r2, [pc, #648]	; (f5e0 <hal_rpu_irq_process+0x2b0>)
    f358:	49a2      	ldr	r1, [pc, #648]	; (f5e4 <hal_rpu_irq_process+0x2b4>)
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f35a:	6818      	ldr	r0, [r3, #0]
    f35c:	f013 fbf6 	bl	22b4c <wifi_nrf_osal_log_err>

	/* If we received an interrupt without any associated event(s) it is a
	 * likely indication that the RPU is stuck and this interrupt has been
	 * raised by the watchdog
	 */
	if (!num_events) {
    f360:	f1b8 0f00 	cmp.w	r8, #0
    f364:	d10f      	bne.n	f386 <hal_rpu_irq_process+0x56>
	status = hal_rpu_reg_read(hal_dev_ctx,
    f366:	4620      	mov	r0, r4
    f368:	4a9f      	ldr	r2, [pc, #636]	; (f5e8 <hal_rpu_irq_process+0x2b8>)
    f36a:	a902      	add	r1, sp, #8
	unsigned int val = 0;
    f36c:	f8cd 8008 	str.w	r8, [sp, #8]
	status = hal_rpu_reg_read(hal_dev_ctx,
    f370:	f000 fae6 	bl	f940 <hal_rpu_reg_read>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f374:	2800      	cmp	r0, #0
    f376:	f000 8155 	beq.w	f624 <hal_rpu_irq_process+0x2f4>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f37a:	6823      	ldr	r3, [r4, #0]
    f37c:	4a9b      	ldr	r2, [pc, #620]	; (f5ec <hal_rpu_irq_process+0x2bc>)
    f37e:	499c      	ldr	r1, [pc, #624]	; (f5f0 <hal_rpu_irq_process+0x2c0>)
    f380:	6818      	ldr	r0, [r3, #0]
    f382:	f013 fbe3 	bl	22b4c <wifi_nrf_osal_log_err>
	status = hal_rpu_reg_write(hal_dev_ctx,
    f386:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f38a:	4620      	mov	r0, r4
    f38c:	4999      	ldr	r1, [pc, #612]	; (f5f4 <hal_rpu_irq_process+0x2c4>)
    f38e:	f000 fb37 	bl	fa00 <hal_rpu_reg_write>
		}
	}

	status = hal_rpu_irq_ack(hal_dev_ctx);

	if (status == WIFI_NRF_STATUS_FAIL) {
    f392:	1c43      	adds	r3, r0, #1
	status = hal_rpu_reg_write(hal_dev_ctx,
    f394:	4605      	mov	r5, r0
	if (status == WIFI_NRF_STATUS_FAIL) {
    f396:	f040 8166 	bne.w	f666 <hal_rpu_irq_process+0x336>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f39a:	6823      	ldr	r3, [r4, #0]
    f39c:	4a96      	ldr	r2, [pc, #600]	; (f5f8 <hal_rpu_irq_process+0x2c8>)
    f39e:	4997      	ldr	r1, [pc, #604]	; (f5fc <hal_rpu_irq_process+0x2cc>)
    f3a0:	e15e      	b.n	f660 <hal_rpu_irq_process+0x330>
		if (!event_addr || event_addr == 0xAAAAAAAA) {
    f3a2:	9e01      	ldr	r6, [sp, #4]
    f3a4:	2e00      	cmp	r6, #0
    f3a6:	d0db      	beq.n	f360 <hal_rpu_irq_process+0x30>
    f3a8:	f1b6 3faa 	cmp.w	r6, #2863311530	; 0xaaaaaaaa
    f3ac:	d0d8      	beq.n	f360 <hal_rpu_irq_process+0x30>
	wifi_nrf_osal_mem_set(hal_dev_ctx->hpriv->opriv,
    f3ae:	6820      	ldr	r0, [r4, #0]
    f3b0:	2380      	movs	r3, #128	; 0x80
    f3b2:	465a      	mov	r2, fp
    f3b4:	6800      	ldr	r0, [r0, #0]
    f3b6:	a902      	add	r1, sp, #8
    f3b8:	f013 fb81 	bl	22abe <wifi_nrf_osal_mem_set>
	if (!hal_dev_ctx->event_data_pending) {
    f3bc:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
    f3c0:	2f00      	cmp	r7, #0
    f3c2:	f040 80a4 	bne.w	f50e <hal_rpu_irq_process+0x1de>
		status = hal_rpu_mem_read(hal_dev_ctx,
    f3c6:	2380      	movs	r3, #128	; 0x80
    f3c8:	4632      	mov	r2, r6
    f3ca:	4620      	mov	r0, r4
    f3cc:	a902      	add	r1, sp, #8
    f3ce:	f000 f95b 	bl	f688 <hal_rpu_mem_read>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f3d2:	6823      	ldr	r3, [r4, #0]
    f3d4:	4605      	mov	r5, r0
    f3d6:	b140      	cbz	r0, f3ea <hal_rpu_irq_process+0xba>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f3d8:	4a89      	ldr	r2, [pc, #548]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f3da:	498a      	ldr	r1, [pc, #552]	; (f604 <hal_rpu_irq_process+0x2d4>)
    f3dc:	6818      	ldr	r0, [r3, #0]
    f3de:	f013 fbb5 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f3e2:	6823      	ldr	r3, [r4, #0]
    f3e4:	4a7e      	ldr	r2, [pc, #504]	; (f5e0 <hal_rpu_irq_process+0x2b0>)
    f3e6:	4988      	ldr	r1, [pc, #544]	; (f608 <hal_rpu_irq_process+0x2d8>)
    f3e8:	e7b7      	b.n	f35a <hal_rpu_irq_process+0x2a>
		rpu_msg_len = rpu_msg_hdr->len;
    f3ea:	9f02      	ldr	r7, [sp, #8]
		hal_dev_ctx->event_data = wifi_nrf_osal_mem_zalloc(hal_dev_ctx->hpriv->opriv,
    f3ec:	6818      	ldr	r0, [r3, #0]
    f3ee:	4639      	mov	r1, r7
    f3f0:	f013 fb53 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
    f3f4:	4601      	mov	r1, r0
    f3f6:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
		if (!hal_dev_ctx->event_data) {
    f3fa:	6820      	ldr	r0, [r4, #0]
    f3fc:	b939      	cbnz	r1, f40e <hal_rpu_irq_process+0xde>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f3fe:	4a80      	ldr	r2, [pc, #512]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f400:	4982      	ldr	r1, [pc, #520]	; (f60c <hal_rpu_irq_process+0x2dc>)
    f402:	6800      	ldr	r0, [r0, #0]
    f404:	f013 fba2 	bl	22b4c <wifi_nrf_osal_log_err>
		num_events++;
    f408:	f108 0801 	add.w	r8, r8, #1
		event_addr = 0;
    f40c:	e799      	b.n	f342 <hal_rpu_irq_process+0x12>
		hal_dev_ctx->event_resubmit = rpu_msg_hdr->resubmit;
    f40e:	9b03      	ldr	r3, [sp, #12]
		hal_dev_ctx->event_data_len = rpu_msg_len;
    f410:	e9c4 172b 	strd	r1, r7, [r4, #172]	; 0xac
		hal_dev_ctx->event_data_pending = rpu_msg_len;
    f414:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
		hal_dev_ctx->event_resubmit = rpu_msg_hdr->resubmit;
    f418:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		if (rpu_msg_len > hal_dev_ctx->hpriv->cfg_params.max_event_size) {
    f41c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    f41e:	429f      	cmp	r7, r3
    f420:	d953      	bls.n	f4ca <hal_rpu_irq_process+0x19a>
			status = hal_rpu_mem_read(hal_dev_ctx,
    f422:	4632      	mov	r2, r6
    f424:	4620      	mov	r0, r4
    f426:	f000 f92f 	bl	f688 <hal_rpu_mem_read>
			if (status != WIFI_NRF_STATUS_SUCCESS) {
    f42a:	b170      	cbz	r0, f44a <hal_rpu_irq_process+0x11a>
				wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f42c:	6823      	ldr	r3, [r4, #0]
    f42e:	4a74      	ldr	r2, [pc, #464]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f430:	4977      	ldr	r1, [pc, #476]	; (f610 <hal_rpu_irq_process+0x2e0>)
					wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f432:	6818      	ldr	r0, [r3, #0]
    f434:	f013 fb8a 	bl	22b4c <wifi_nrf_osal_log_err>
					wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f438:	6823      	ldr	r3, [r4, #0]
    f43a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f43e:	6818      	ldr	r0, [r3, #0]
    f440:	f013 fb2f 	bl	22aa2 <wifi_nrf_osal_mem_free>
					hal_dev_ctx->event_data = NULL;
    f444:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f448:	e7cb      	b.n	f3e2 <hal_rpu_irq_process+0xb2>
			if (hal_dev_ctx->event_resubmit) {
    f44a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    f44e:	b1a3      	cbz	r3, f47a <hal_rpu_irq_process+0x14a>
				status = hal_rpu_event_free(hal_dev_ctx,
    f450:	4631      	mov	r1, r6
    f452:	4620      	mov	r0, r4
    f454:	f7ff ff1a 	bl	f28c <hal_rpu_event_free>
				if (status != WIFI_NRF_STATUS_SUCCESS) {
    f458:	b178      	cbz	r0, f47a <hal_rpu_irq_process+0x14a>
				wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f45a:	6823      	ldr	r3, [r4, #0]
    f45c:	4a68      	ldr	r2, [pc, #416]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f45e:	496d      	ldr	r1, [pc, #436]	; (f614 <hal_rpu_irq_process+0x2e4>)
    f460:	6818      	ldr	r0, [r3, #0]
    f462:	f013 fb73 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f466:	6823      	ldr	r3, [r4, #0]
    f468:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f46c:	6818      	ldr	r0, [r3, #0]
    f46e:	f013 fb18 	bl	22aa2 <wifi_nrf_osal_mem_free>
			hal_dev_ctx->event_data = NULL;
    f472:	2300      	movs	r3, #0
    f474:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f478:	e7b3      	b.n	f3e2 <hal_rpu_irq_process+0xb2>
			       hal_dev_ctx->hpriv->cfg_params.max_event_size;
    f47a:	6821      	ldr	r1, [r4, #0]
			hal_dev_ctx->event_data_pending -=
    f47c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    f480:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    f482:	1a9b      	subs	r3, r3, r2
    f484:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
			hal_dev_ctx->event_data_curr +=
    f488:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    f48c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    f48e:	440a      	add	r2, r1
			hal_dev_ctx->event_data_curr += rpu_msg_len;
    f490:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
	if (!hal_dev_ctx->event_data_pending) {
    f494:	2b00      	cmp	r3, #0
    f496:	d1b7      	bne.n	f408 <hal_rpu_irq_process+0xd8>
		event = wifi_nrf_osal_mem_zalloc(hal_dev_ctx->hpriv->opriv,
    f498:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    f49c:	6823      	ldr	r3, [r4, #0]
    f49e:	3104      	adds	r1, #4
    f4a0:	6818      	ldr	r0, [r3, #0]
    f4a2:	f013 fafa 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
		if (!event) {
    f4a6:	4606      	mov	r6, r0
    f4a8:	6820      	ldr	r0, [r4, #0]
    f4aa:	2e00      	cmp	r6, #0
    f4ac:	d16c      	bne.n	f588 <hal_rpu_irq_process+0x258>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f4ae:	4a54      	ldr	r2, [pc, #336]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f4b0:	4959      	ldr	r1, [pc, #356]	; (f618 <hal_rpu_irq_process+0x2e8>)
    f4b2:	6800      	ldr	r0, [r0, #0]
    f4b4:	f013 fb4a 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f4b8:	6823      	ldr	r3, [r4, #0]
    f4ba:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f4be:	6818      	ldr	r0, [r3, #0]
    f4c0:	f013 faef 	bl	22aa2 <wifi_nrf_osal_mem_free>
			hal_dev_ctx->event_data = NULL;
    f4c4:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
			goto out;
    f4c8:	e05a      	b.n	f580 <hal_rpu_irq_process+0x250>
			if (rpu_msg_len > RPU_EVENT_COMMON_SIZE_MAX) {
    f4ca:	2f80      	cmp	r7, #128	; 0x80
				status = hal_rpu_mem_read(hal_dev_ctx,
    f4cc:	463b      	mov	r3, r7
			if (rpu_msg_len > RPU_EVENT_COMMON_SIZE_MAX) {
    f4ce:	d908      	bls.n	f4e2 <hal_rpu_irq_process+0x1b2>
				status = hal_rpu_mem_read(hal_dev_ctx,
    f4d0:	4632      	mov	r2, r6
    f4d2:	4620      	mov	r0, r4
    f4d4:	f000 f8d8 	bl	f688 <hal_rpu_mem_read>
				if (status != WIFI_NRF_STATUS_SUCCESS) {
    f4d8:	b138      	cbz	r0, f4ea <hal_rpu_irq_process+0x1ba>
					wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f4da:	6823      	ldr	r3, [r4, #0]
    f4dc:	4a48      	ldr	r2, [pc, #288]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f4de:	494f      	ldr	r1, [pc, #316]	; (f61c <hal_rpu_irq_process+0x2ec>)
    f4e0:	e7a7      	b.n	f432 <hal_rpu_irq_process+0x102>
				wifi_nrf_osal_mem_cpy(hal_dev_ctx->hpriv->opriv,
    f4e2:	6800      	ldr	r0, [r0, #0]
    f4e4:	aa02      	add	r2, sp, #8
    f4e6:	f013 fae0 	bl	22aaa <wifi_nrf_osal_mem_cpy>
			if (hal_dev_ctx->event_resubmit) {
    f4ea:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    f4ee:	b12b      	cbz	r3, f4fc <hal_rpu_irq_process+0x1cc>
				status = hal_rpu_event_free(hal_dev_ctx,
    f4f0:	4631      	mov	r1, r6
    f4f2:	4620      	mov	r0, r4
    f4f4:	f7ff feca 	bl	f28c <hal_rpu_event_free>
				if (status != WIFI_NRF_STATUS_SUCCESS) {
    f4f8:	2800      	cmp	r0, #0
    f4fa:	d1ae      	bne.n	f45a <hal_rpu_irq_process+0x12a>
			hal_dev_ctx->event_data_pending -= rpu_msg_len;
    f4fc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
			hal_dev_ctx->event_data_curr += rpu_msg_len;
    f500:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
			hal_dev_ctx->event_data_pending -= rpu_msg_len;
    f504:	1bdb      	subs	r3, r3, r7
    f506:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
			hal_dev_ctx->event_data_curr += rpu_msg_len;
    f50a:	443a      	add	r2, r7
    f50c:	e7c0      	b.n	f490 <hal_rpu_irq_process+0x160>
				   hal_dev_ctx->hpriv->cfg_params.max_event_size) ?
    f50e:	6823      	ldr	r3, [r4, #0]
		event_data_size = (hal_dev_ctx->event_data_pending >
    f510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f512:	429f      	cmp	r7, r3
    f514:	bf28      	it	cs
    f516:	461f      	movcs	r7, r3
		if (hal_dev_ctx->event_data) {
    f518:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    f51c:	b1bb      	cbz	r3, f54e <hal_rpu_irq_process+0x21e>
			status = hal_rpu_mem_read(hal_dev_ctx,
    f51e:	463b      	mov	r3, r7
    f520:	4632      	mov	r2, r6
    f522:	4620      	mov	r0, r4
    f524:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    f528:	f000 f8ae 	bl	f688 <hal_rpu_mem_read>
			if (status != WIFI_NRF_STATUS_SUCCESS) {
    f52c:	4605      	mov	r5, r0
    f52e:	b180      	cbz	r0, f552 <hal_rpu_irq_process+0x222>
				wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f530:	6823      	ldr	r3, [r4, #0]
    f532:	4a33      	ldr	r2, [pc, #204]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f534:	4939      	ldr	r1, [pc, #228]	; (f61c <hal_rpu_irq_process+0x2ec>)
    f536:	6818      	ldr	r0, [r3, #0]
    f538:	f013 fb08 	bl	22b4c <wifi_nrf_osal_log_err>
				wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f53c:	6823      	ldr	r3, [r4, #0]
    f53e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f542:	6818      	ldr	r0, [r3, #0]
    f544:	f013 faad 	bl	22aa2 <wifi_nrf_osal_mem_free>
				hal_dev_ctx->event_data = NULL;
    f548:	f8c4 b0a8 	str.w	fp, [r4, #168]	; 0xa8
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f54c:	e749      	b.n	f3e2 <hal_rpu_irq_process+0xb2>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    f54e:	f04f 35ff 	mov.w	r5, #4294967295
		if (hal_dev_ctx->event_resubmit) {
    f552:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    f556:	b13b      	cbz	r3, f568 <hal_rpu_irq_process+0x238>
			status = hal_rpu_event_free(hal_dev_ctx,
    f558:	4631      	mov	r1, r6
    f55a:	4620      	mov	r0, r4
    f55c:	f7ff fe96 	bl	f28c <hal_rpu_event_free>
			if (status != WIFI_NRF_STATUS_SUCCESS) {
    f560:	4605      	mov	r5, r0
    f562:	2800      	cmp	r0, #0
    f564:	f47f af79 	bne.w	f45a <hal_rpu_irq_process+0x12a>
		hal_dev_ctx->event_data_pending -= event_data_size;
    f568:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		hal_dev_ctx->event_data_curr += event_data_size;
    f56c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
		hal_dev_ctx->event_data_pending -= event_data_size;
    f570:	1bdb      	subs	r3, r3, r7
		hal_dev_ctx->event_data_curr += event_data_size;
    f572:	443a      	add	r2, r7
		hal_dev_ctx->event_data_pending -= event_data_size;
    f574:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		hal_dev_ctx->event_data_curr += event_data_size;
    f578:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
	if (!hal_dev_ctx->event_data_pending) {
    f57c:	2b00      	cmp	r3, #0
    f57e:	d08b      	beq.n	f498 <hal_rpu_irq_process+0x168>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f580:	2d00      	cmp	r5, #0
    f582:	f43f af41 	beq.w	f408 <hal_rpu_irq_process+0xd8>
    f586:	e72c      	b.n	f3e2 <hal_rpu_irq_process+0xb2>
		wifi_nrf_osal_mem_cpy(hal_dev_ctx->hpriv->opriv,
    f588:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    f58c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    f590:	1d31      	adds	r1, r6, #4
    f592:	6800      	ldr	r0, [r0, #0]
    f594:	f013 fa89 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		event->len = hal_dev_ctx->event_data_len;
    f598:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		status = wifi_nrf_utils_q_enqueue(hal_dev_ctx->hpriv->opriv,
    f59c:	4632      	mov	r2, r6
		event->len = hal_dev_ctx->event_data_len;
    f59e:	6033      	str	r3, [r6, #0]
		status = wifi_nrf_utils_q_enqueue(hal_dev_ctx->hpriv->opriv,
    f5a0:	6823      	ldr	r3, [r4, #0]
    f5a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    f5a4:	6818      	ldr	r0, [r3, #0]
    f5a6:	f013 fc04 	bl	22db2 <wifi_nrf_utils_q_enqueue>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f5aa:	6823      	ldr	r3, [r4, #0]
    f5ac:	4605      	mov	r5, r0
    f5ae:	b150      	cbz	r0, f5c6 <hal_rpu_irq_process+0x296>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f5b0:	4a13      	ldr	r2, [pc, #76]	; (f600 <hal_rpu_irq_process+0x2d0>)
    f5b2:	491b      	ldr	r1, [pc, #108]	; (f620 <hal_rpu_irq_process+0x2f0>)
    f5b4:	6818      	ldr	r0, [r3, #0]
    f5b6:	f013 fac9 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f5ba:	6823      	ldr	r3, [r4, #0]
    f5bc:	4631      	mov	r1, r6
    f5be:	6818      	ldr	r0, [r3, #0]
    f5c0:	f013 fa6f 	bl	22aa2 <wifi_nrf_osal_mem_free>
    f5c4:	e74f      	b.n	f466 <hal_rpu_irq_process+0x136>
		wifi_nrf_osal_mem_free(hal_dev_ctx->hpriv->opriv,
    f5c6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f5ca:	6818      	ldr	r0, [r3, #0]
    f5cc:	f013 fa69 	bl	22aa2 <wifi_nrf_osal_mem_free>
		hal_dev_ctx->event_data_curr = NULL;
    f5d0:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
		hal_dev_ctx->event_data_len = 0;
    f5d4:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		hal_dev_ctx->event_resubmit = 0;
    f5d8:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f5dc:	e714      	b.n	f408 <hal_rpu_irq_process+0xd8>
    f5de:	bf00      	nop
    f5e0:	00034851 	.word	0x00034851
    f5e4:	0003460d 	.word	0x0003460d
    f5e8:	a4000004 	.word	0xa4000004
    f5ec:	00034817 	.word	0x00034817
    f5f0:	00034748 	.word	0x00034748
    f5f4:	a4000488 	.word	0xa4000488
    f5f8:	00034867 	.word	0x00034867
    f5fc:	000347e6 	.word	0x000347e6
    f600:	0003483f 	.word	0x0003483f
    f604:	0003462b 	.word	0x0003462b
    f608:	0003472d 	.word	0x0003472d
    f60c:	0003464c 	.word	0x0003464c
    f610:	00034675 	.word	0x00034675
    f614:	000346a4 	.word	0x000346a4
    f618:	000346eb 	.word	0x000346eb
    f61c:	000346c8 	.word	0x000346c8
    f620:	00034712 	.word	0x00034712
	if (val & (1 << RPU_REG_BIT_MIPS_WATCHDOG_INT_STATUS)) {
    f624:	9b02      	ldr	r3, [sp, #8]
    f626:	0799      	lsls	r1, r3, #30
    f628:	f57f aead 	bpl.w	f386 <hal_rpu_irq_process+0x56>
			wifi_nrf_osal_log_dbg(hal_dev_ctx->hpriv->opriv,
    f62c:	6823      	ldr	r3, [r4, #0]
    f62e:	4910      	ldr	r1, [pc, #64]	; (f670 <hal_rpu_irq_process+0x340>)
    f630:	6818      	ldr	r0, [r3, #0]
    f632:	f013 fa6d 	bl	22b10 <wifi_nrf_osal_log_dbg>
	status = hal_rpu_reg_write(hal_dev_ctx,
    f636:	4642      	mov	r2, r8
    f638:	4620      	mov	r0, r4
    f63a:	490e      	ldr	r1, [pc, #56]	; (f674 <hal_rpu_irq_process+0x344>)
    f63c:	f000 f9e0 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f640:	4605      	mov	r5, r0
    f642:	2800      	cmp	r0, #0
    f644:	f43f ae9f 	beq.w	f386 <hal_rpu_irq_process+0x56>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f648:	6823      	ldr	r3, [r4, #0]
    f64a:	4a0b      	ldr	r2, [pc, #44]	; (f678 <hal_rpu_irq_process+0x348>)
    f64c:	490b      	ldr	r1, [pc, #44]	; (f67c <hal_rpu_irq_process+0x34c>)
    f64e:	6818      	ldr	r0, [r3, #0]
    f650:	f013 fa7c 	bl	22b4c <wifi_nrf_osal_log_err>
			if (status == WIFI_NRF_STATUS_FAIL) {
    f654:	1c6a      	adds	r2, r5, #1
    f656:	f47f ae96 	bne.w	f386 <hal_rpu_irq_process+0x56>
				wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f65a:	6823      	ldr	r3, [r4, #0]
    f65c:	4a08      	ldr	r2, [pc, #32]	; (f680 <hal_rpu_irq_process+0x350>)
    f65e:	4909      	ldr	r1, [pc, #36]	; (f684 <hal_rpu_irq_process+0x354>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f660:	6818      	ldr	r0, [r3, #0]
    f662:	f013 fa73 	bl	22b4c <wifi_nrf_osal_log_err>
				      __func__);
		goto out;
	}
out:
	return status;
}
    f666:	4628      	mov	r0, r5
    f668:	b023      	add	sp, #140	; 0x8c
    f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f66e:	bf00      	nop
    f670:	0003477b 	.word	0x0003477b
    f674:	a4000048 	.word	0xa4000048
    f678:	00034802 	.word	0x00034802
    f67c:	00034798 	.word	0x00034798
    f680:	00034867 	.word	0x00034867
    f684:	000347c5 	.word	0x000347c5

0000f688 <hal_rpu_mem_read>:

enum wifi_nrf_status hal_rpu_mem_read(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
				      void *src_addr,
				      unsigned int rpu_mem_addr_val,
				      unsigned int len)
{
    f688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f68a:	460e      	mov	r6, r1
    f68c:	461f      	mov	r7, r3
    f68e:	4611      	mov	r1, r2
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	if (!hal_dev_ctx) {
    f690:	4604      	mov	r4, r0
    f692:	b130      	cbz	r0, f6a2 <hal_rpu_mem_read+0x1a>
		goto out;
	}

	if (!src_addr) {
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f694:	6800      	ldr	r0, [r0, #0]
	if (!src_addr) {
    f696:	b94e      	cbnz	r6, f6ac <hal_rpu_mem_read+0x24>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f698:	4a23      	ldr	r2, [pc, #140]	; (f728 <hal_rpu_mem_read+0xa0>)
    f69a:	4924      	ldr	r1, [pc, #144]	; (f72c <hal_rpu_mem_read+0xa4>)
    f69c:	6800      	ldr	r0, [r0, #0]
    f69e:	f013 fa55 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    f6a2:	f04f 35ff 	mov.w	r5, #4294967295
				  src_addr,
				  rpu_mem_addr_val,
				  len);
out:
	return status;
}
    f6a6:	4628      	mov	r0, r5
    f6a8:	b003      	add	sp, #12
    f6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (((addr_val >= RPU_ADDR_GRAM_START) &&
    f6ac:	4b20      	ldr	r3, [pc, #128]	; (f730 <hal_rpu_mem_read+0xa8>)
	     (addr_val <= RPU_ADDR_GRAM_END)) ||
    f6ae:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
	if (((addr_val >= RPU_ADDR_GRAM_START) &&
    f6b2:	429a      	cmp	r2, r3
    f6b4:	d231      	bcs.n	f71a <hal_rpu_mem_read+0x92>
	unsigned long addr_offset = 0;
    f6b6:	2300      	movs	r3, #0
	unsigned long flags = 0;
    f6b8:	e9cd 3300 	strd	r3, r3, [sp]
	status = pal_rpu_addr_offset_get(hal_dev_ctx->hpriv->opriv,
    f6bc:	466a      	mov	r2, sp
    f6be:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    f6c2:	6800      	ldr	r0, [r0, #0]
    f6c4:	f000 fa42 	bl	fb4c <pal_rpu_addr_offset_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f6c8:	6823      	ldr	r3, [r4, #0]
    f6ca:	4605      	mov	r5, r0
    f6cc:	b128      	cbz	r0, f6da <hal_rpu_mem_read+0x52>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f6ce:	4a19      	ldr	r2, [pc, #100]	; (f734 <hal_rpu_mem_read+0xac>)
    f6d0:	4919      	ldr	r1, [pc, #100]	; (f738 <hal_rpu_mem_read+0xb0>)
    f6d2:	6818      	ldr	r0, [r3, #0]
    f6d4:	f013 fa3a 	bl	22b4c <wifi_nrf_osal_log_err>
		return status;
    f6d8:	e7e5      	b.n	f6a6 <hal_rpu_mem_read+0x1e>
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
    f6da:	6818      	ldr	r0, [r3, #0]
    f6dc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    f6e0:	aa01      	add	r2, sp, #4
    f6e2:	f013 fa09 	bl	22af8 <wifi_nrf_osal_spinlock_irq_take>
	status = hal_rpu_ps_wake(hal_dev_ctx);
    f6e6:	4620      	mov	r0, r4
    f6e8:	f7fe ff6a 	bl	e5c0 <hal_rpu_ps_wake>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f6ec:	4605      	mov	r5, r0
    f6ee:	b168      	cbz	r0, f70c <hal_rpu_mem_read+0x84>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f6f0:	6823      	ldr	r3, [r4, #0]
    f6f2:	4a10      	ldr	r2, [pc, #64]	; (f734 <hal_rpu_mem_read+0xac>)
    f6f4:	4911      	ldr	r1, [pc, #68]	; (f73c <hal_rpu_mem_read+0xb4>)
    f6f6:	6818      	ldr	r0, [r3, #0]
    f6f8:	f013 fa28 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
    f6fc:	6823      	ldr	r3, [r4, #0]
    f6fe:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    f702:	6818      	ldr	r0, [r3, #0]
    f704:	aa01      	add	r2, sp, #4
    f706:	f013 f9fd 	bl	22b04 <wifi_nrf_osal_spinlock_irq_rel>
	return status;
    f70a:	e7cc      	b.n	f6a6 <hal_rpu_mem_read+0x1e>
	wifi_nrf_bal_read_block(hal_dev_ctx->bal_dev_ctx,
    f70c:	463b      	mov	r3, r7
    f70e:	4631      	mov	r1, r6
    f710:	9a00      	ldr	r2, [sp, #0]
    f712:	68a0      	ldr	r0, [r4, #8]
    f714:	f013 fbd5 	bl	22ec2 <wifi_nrf_bal_read_block>
	status = WIFI_NRF_STATUS_SUCCESS;
    f718:	e7f0      	b.n	f6fc <hal_rpu_mem_read+0x74>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f71a:	460b      	mov	r3, r1
    f71c:	4a02      	ldr	r2, [pc, #8]	; (f728 <hal_rpu_mem_read+0xa0>)
    f71e:	4908      	ldr	r1, [pc, #32]	; (f740 <hal_rpu_mem_read+0xb8>)
    f720:	6800      	ldr	r0, [r0, #0]
    f722:	f013 fa13 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    f726:	e7bc      	b.n	f6a2 <hal_rpu_mem_read+0x1a>
    f728:	000349f0 	.word	0x000349f0
    f72c:	0003488e 	.word	0x0003488e
    f730:	07010200 	.word	0x07010200
    f734:	000349df 	.word	0x000349df
    f738:	00033e20 	.word	0x00033e20
    f73c:	000348a2 	.word	0x000348a2
    f740:	000348b7 	.word	0x000348b7

0000f744 <hal_rpu_mem_write>:

enum wifi_nrf_status hal_rpu_mem_write(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
				       unsigned int rpu_mem_addr_val,
				       void *src_addr,
				       unsigned int len)
{
    f744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f748:	460f      	mov	r7, r1
    f74a:	4616      	mov	r6, r2
    f74c:	4698      	mov	r8, r3
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	if (!hal_dev_ctx) {
    f74e:	4605      	mov	r5, r0
    f750:	b130      	cbz	r0, f760 <hal_rpu_mem_write+0x1c>
		return status;
	}

	if (!src_addr) {
    f752:	b95a      	cbnz	r2, f76c <hal_rpu_mem_write+0x28>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f754:	6803      	ldr	r3, [r0, #0]
    f756:	4a69      	ldr	r2, [pc, #420]	; (f8fc <hal_rpu_mem_write+0x1b8>)
    f758:	4969      	ldr	r1, [pc, #420]	; (f900 <hal_rpu_mem_write+0x1bc>)
    f75a:	6818      	ldr	r0, [r3, #0]
    f75c:	f013 f9f6 	bl	22b4c <wifi_nrf_osal_log_err>
		return status;
    f760:	f04f 34ff 	mov.w	r4, #4294967295
		goto out;
	}

out:
	return status;
}
    f764:	4620      	mov	r0, r4
    f766:	b003      	add	sp, #12
    f768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((addr_val >= RPU_ADDR_GRAM_START) &&
    f76c:	4a65      	ldr	r2, [pc, #404]	; (f904 <hal_rpu_mem_write+0x1c0>)
	     (addr_val <= RPU_ADDR_GRAM_END)) ||
    f76e:	f101 44a0 	add.w	r4, r1, #1342177280	; 0x50000000
	if (((addr_val >= RPU_ADDR_GRAM_START) &&
    f772:	4294      	cmp	r4, r2
	if (!hal_rpu_is_mem_writable(hal_dev_ctx->curr_proc,
    f774:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
	if (((addr_val >= RPU_ADDR_GRAM_START) &&
    f778:	d36e      	bcc.n	f858 <hal_rpu_mem_write+0x114>
	return ((addr_val & 0xFF000000) == RPU_MCU_CORE_INDIRECT_BASE);
    f77a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
	if (hal_rpu_is_mem_ram(proc, addr) ||
    f77e:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    f782:	d02e      	beq.n	f7e2 <hal_rpu_mem_write+0x9e>
	return pal_check_rpu_mcu_regions(proc, addr_val);
    f784:	4618      	mov	r0, r3
    f786:	f000 f9c9 	bl	fb1c <pal_check_rpu_mcu_regions>
	    hal_rpu_is_mem_core_indirect(proc, addr) ||
    f78a:	b970      	cbnz	r0, f7aa <hal_rpu_mem_write+0x66>
	if (((addr_val >= RPU_ADDR_BEV_START) &&
    f78c:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
    f790:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    f794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    f798:	d307      	bcc.n	f7aa <hal_rpu_mem_write+0x66>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f79a:	6828      	ldr	r0, [r5, #0]
    f79c:	463b      	mov	r3, r7
    f79e:	4a57      	ldr	r2, [pc, #348]	; (f8fc <hal_rpu_mem_write+0x1b8>)
    f7a0:	4959      	ldr	r1, [pc, #356]	; (f908 <hal_rpu_mem_write+0x1c4>)
    f7a2:	6800      	ldr	r0, [r0, #0]
    f7a4:	f013 f9d2 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    f7a8:	e7da      	b.n	f760 <hal_rpu_mem_write+0x1c>
	return pal_check_rpu_mcu_regions(proc, addr_val);
    f7aa:	4639      	mov	r1, r7
    f7ac:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
    f7b0:	f000 f9b4 	bl	fb1c <pal_check_rpu_mcu_regions>
	} else if (hal_rpu_is_mem_core_direct(hal_dev_ctx->curr_proc, rpu_mem_addr_val) ||
    f7b4:	2800      	cmp	r0, #0
    f7b6:	d053      	beq.n	f860 <hal_rpu_mem_write+0x11c>
	unsigned long addr_offset = 0;
    f7b8:	2300      	movs	r3, #0
	unsigned long flags = 0;
    f7ba:	e9cd 3300 	strd	r3, r3, [sp]
	status = pal_rpu_addr_offset_get(hal_dev_ctx->hpriv->opriv,
    f7be:	6828      	ldr	r0, [r5, #0]
    f7c0:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
    f7c4:	466a      	mov	r2, sp
    f7c6:	4639      	mov	r1, r7
    f7c8:	6800      	ldr	r0, [r0, #0]
    f7ca:	f000 f9bf 	bl	fb4c <pal_rpu_addr_offset_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f7ce:	682b      	ldr	r3, [r5, #0]
    f7d0:	4604      	mov	r4, r0
    f7d2:	2800      	cmp	r0, #0
    f7d4:	d06d      	beq.n	f8b2 <hal_rpu_mem_write+0x16e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f7d6:	4a4d      	ldr	r2, [pc, #308]	; (f90c <hal_rpu_mem_write+0x1c8>)
    f7d8:	494d      	ldr	r1, [pc, #308]	; (f910 <hal_rpu_mem_write+0x1cc>)
    f7da:	6818      	ldr	r0, [r3, #0]
    f7dc:	f013 f9b6 	bl	22b4c <wifi_nrf_osal_log_err>
		return status;
    f7e0:	e7c0      	b.n	f764 <hal_rpu_mem_write+0x20>
	if (core_addr_val % 4 != 0) {
    f7e2:	078a      	lsls	r2, r1, #30
    f7e4:	d008      	beq.n	f7f8 <hal_rpu_mem_write+0xb4>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f7e6:	6803      	ldr	r3, [r0, #0]
    f7e8:	4a4a      	ldr	r2, [pc, #296]	; (f914 <hal_rpu_mem_write+0x1d0>)
    f7ea:	494b      	ldr	r1, [pc, #300]	; (f918 <hal_rpu_mem_write+0x1d4>)
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f7ec:	6818      	ldr	r0, [r3, #0]
    f7ee:	f013 f9ad 	bl	22b4c <wifi_nrf_osal_log_err>
	int status = WIFI_NRF_STATUS_FAIL;
    f7f2:	f04f 34ff 	mov.w	r4, #4294967295
		goto out;
    f7f6:	e026      	b.n	f846 <hal_rpu_mem_write+0x102>
	data_reg = RPU_REG_MIPS_MCU_SYS_CORE_MEM_WDATA;
    f7f8:	2b01      	cmp	r3, #1
    f7fa:	4b48      	ldr	r3, [pc, #288]	; (f91c <hal_rpu_mem_write+0x1d8>)
    f7fc:	4a48      	ldr	r2, [pc, #288]	; (f920 <hal_rpu_mem_write+0x1dc>)
    f7fe:	bf18      	it	ne
    f800:	4699      	movne	r9, r3
	status = hal_rpu_reg_write(hal_dev_ctx,
    f802:	f1a3 0304 	sub.w	r3, r3, #4
	data_reg = RPU_REG_MIPS_MCU_SYS_CORE_MEM_WDATA;
    f806:	bf08      	it	eq
    f808:	4691      	moveq	r9, r2
	status = hal_rpu_reg_write(hal_dev_ctx,
    f80a:	f3c1 0295 	ubfx	r2, r1, #2, #22
    f80e:	4945      	ldr	r1, [pc, #276]	; (f924 <hal_rpu_mem_write+0x1e0>)
    f810:	bf18      	it	ne
    f812:	4619      	movne	r1, r3
    f814:	f000 f8f4 	bl	fa00 <hal_rpu_reg_write>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f818:	4604      	mov	r4, r0
    f81a:	b9b0      	cbnz	r0, f84a <hal_rpu_mem_write+0x106>
    f81c:	f028 0803 	bic.w	r8, r8, #3
    f820:	44b0      	add	r8, r6
	for (i = 0; i < (len / sizeof(int)); i++) {
    f822:	4546      	cmp	r6, r8
    f824:	d00f      	beq.n	f846 <hal_rpu_mem_write+0x102>
		status = hal_rpu_reg_write(hal_dev_ctx,
    f826:	4649      	mov	r1, r9
    f828:	4628      	mov	r0, r5
    f82a:	f856 2b04 	ldr.w	r2, [r6], #4
    f82e:	f000 f8e7 	bl	fa00 <hal_rpu_reg_write>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f832:	4607      	mov	r7, r0
    f834:	2800      	cmp	r0, #0
    f836:	d0f4      	beq.n	f822 <hal_rpu_mem_write+0xde>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f838:	682b      	ldr	r3, [r5, #0]
    f83a:	4a36      	ldr	r2, [pc, #216]	; (f914 <hal_rpu_mem_write+0x1d0>)
    f83c:	493a      	ldr	r1, [pc, #232]	; (f928 <hal_rpu_mem_write+0x1e4>)
    f83e:	6818      	ldr	r0, [r3, #0]
    f840:	f013 f984 	bl	22b4c <wifi_nrf_osal_log_err>
		status = hal_rpu_reg_write(hal_dev_ctx,
    f844:	463c      	mov	r4, r7
	return status;
    f846:	b264      	sxtb	r4, r4
    f848:	e78c      	b.n	f764 <hal_rpu_mem_write+0x20>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f84a:	682b      	ldr	r3, [r5, #0]
    f84c:	4a31      	ldr	r2, [pc, #196]	; (f914 <hal_rpu_mem_write+0x1d0>)
    f84e:	4937      	ldr	r1, [pc, #220]	; (f92c <hal_rpu_mem_write+0x1e8>)
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f850:	6818      	ldr	r0, [r3, #0]
    f852:	f013 f97b 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
    f856:	e7f6      	b.n	f846 <hal_rpu_mem_write+0x102>
	return pal_check_rpu_mcu_regions(proc, addr_val);
    f858:	4618      	mov	r0, r3
    f85a:	f000 f95f 	bl	fb1c <pal_check_rpu_mcu_regions>
    f85e:	e7ab      	b.n	f7b8 <hal_rpu_mem_write+0x74>
	if (((addr_val >= RPU_ADDR_BEV_START) &&
    f860:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
    f864:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    f868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    f86c:	d295      	bcs.n	f79a <hal_rpu_mem_write+0x56>
	    (bev_addr_val > RPU_ADDR_BEV_END) ||
    f86e:	07bb      	lsls	r3, r7, #30
    f870:	d13f      	bne.n	f8f2 <hal_rpu_mem_write+0x1ae>
	int status = WIFI_NRF_STATUS_FAIL;
    f872:	f04f 34ff 	mov.w	r4, #4294967295
    f876:	f028 0803 	bic.w	r8, r8, #3
    f87a:	44b0      	add	r8, r6
		addr = rpu_get_bev_addr_remap(hal_dev_ctx,
    f87c:	1bbf      	subs	r7, r7, r6
	for (i = 0; i < (len / sizeof(int)); i++) {
    f87e:	45b0      	cmp	r8, r6
    f880:	d0e1      	beq.n	f846 <hal_rpu_mem_write+0x102>
	if (hal_dev_ctx->curr_proc == RPU_PROC_TYPE_MCU_UMAC) {
    f882:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
		addr = rpu_get_bev_addr_remap(hal_dev_ctx,
    f886:	19b9      	adds	r1, r7, r6
	offset = bev_addr_val & RPU_ADDR_MASK_BEV_OFFSET;
    f888:	f3c1 0113 	ubfx	r1, r1, #0, #20
	if (hal_dev_ctx->curr_proc == RPU_PROC_TYPE_MCU_UMAC) {
    f88c:	2b01      	cmp	r3, #1
    f88e:	f101 4124 	add.w	r1, r1, #2751463424	; 0xa4000000
		status = hal_rpu_reg_write(hal_dev_ctx,
    f892:	4628      	mov	r0, r5
    f894:	f856 2b04 	ldr.w	r2, [r6], #4
	addr = RPU_REG_MIPS_MCU_BOOT_EXCP_INSTR_0 + offset;
    f898:	bf14      	ite	ne
    f89a:	3150      	addne	r1, #80	; 0x50
		addr = RPU_REG_MIPS_MCU2_BOOT_EXCP_INSTR_0 + offset;
    f89c:	f501 71a8 	addeq.w	r1, r1, #336	; 0x150
		status = hal_rpu_reg_write(hal_dev_ctx,
    f8a0:	f000 f8ae 	bl	fa00 <hal_rpu_reg_write>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    f8a4:	4604      	mov	r4, r0
    f8a6:	2800      	cmp	r0, #0
    f8a8:	d0e9      	beq.n	f87e <hal_rpu_mem_write+0x13a>
			wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f8aa:	682b      	ldr	r3, [r5, #0]
    f8ac:	4a20      	ldr	r2, [pc, #128]	; (f930 <hal_rpu_mem_write+0x1ec>)
    f8ae:	4921      	ldr	r1, [pc, #132]	; (f934 <hal_rpu_mem_write+0x1f0>)
    f8b0:	e7ce      	b.n	f850 <hal_rpu_mem_write+0x10c>
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
    f8b2:	6818      	ldr	r0, [r3, #0]
    f8b4:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    f8b8:	aa01      	add	r2, sp, #4
    f8ba:	f013 f91d 	bl	22af8 <wifi_nrf_osal_spinlock_irq_take>
	status = hal_rpu_ps_wake(hal_dev_ctx);
    f8be:	4628      	mov	r0, r5
    f8c0:	f7fe fe7e 	bl	e5c0 <hal_rpu_ps_wake>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f8c4:	4604      	mov	r4, r0
    f8c6:	b168      	cbz	r0, f8e4 <hal_rpu_mem_write+0x1a0>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f8c8:	682b      	ldr	r3, [r5, #0]
    f8ca:	4a10      	ldr	r2, [pc, #64]	; (f90c <hal_rpu_mem_write+0x1c8>)
    f8cc:	491a      	ldr	r1, [pc, #104]	; (f938 <hal_rpu_mem_write+0x1f4>)
    f8ce:	6818      	ldr	r0, [r3, #0]
    f8d0:	f013 f93c 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
    f8d4:	682b      	ldr	r3, [r5, #0]
    f8d6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    f8da:	6818      	ldr	r0, [r3, #0]
    f8dc:	aa01      	add	r2, sp, #4
    f8de:	f013 f911 	bl	22b04 <wifi_nrf_osal_spinlock_irq_rel>
		status = rpu_mem_write_ram(hal_dev_ctx,
    f8e2:	e73f      	b.n	f764 <hal_rpu_mem_write+0x20>
	wifi_nrf_bal_write_block(hal_dev_ctx->bal_dev_ctx,
    f8e4:	4643      	mov	r3, r8
    f8e6:	4632      	mov	r2, r6
    f8e8:	9900      	ldr	r1, [sp, #0]
    f8ea:	68a8      	ldr	r0, [r5, #8]
    f8ec:	f013 faf1 	bl	22ed2 <wifi_nrf_bal_write_block>
	status = WIFI_NRF_STATUS_SUCCESS;
    f8f0:	e7f0      	b.n	f8d4 <hal_rpu_mem_write+0x190>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f8f2:	682b      	ldr	r3, [r5, #0]
    f8f4:	4a0e      	ldr	r2, [pc, #56]	; (f930 <hal_rpu_mem_write+0x1ec>)
    f8f6:	4911      	ldr	r1, [pc, #68]	; (f93c <hal_rpu_mem_write+0x1f8>)
    f8f8:	e778      	b.n	f7ec <hal_rpu_mem_write+0xa8>
    f8fa:	bf00      	nop
    f8fc:	000349cd 	.word	0x000349cd
    f900:	0003488e 	.word	0x0003488e
    f904:	07010200 	.word	0x07010200
    f908:	000348b7 	.word	0x000348b7
    f90c:	000349a8 	.word	0x000349a8
    f910:	00033e20 	.word	0x00033e20
    f914:	000349ba 	.word	0x000349ba
    f918:	000348d8 	.word	0x000348d8
    f91c:	a4000034 	.word	0xa4000034
    f920:	a4000134 	.word	0xa4000134
    f924:	a4000130 	.word	0xa4000130
    f928:	00034920 	.word	0x00034920
    f92c:	000348fd 	.word	0x000348fd
    f930:	00034996 	.word	0x00034996
    f934:	00034977 	.word	0x00034977
    f938:	000348a2 	.word	0x000348a2
    f93c:	00034940 	.word	0x00034940

0000f940 <hal_rpu_reg_read>:
enum wifi_nrf_status hal_rpu_reg_read(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
				      unsigned int *val,
				      unsigned int rpu_reg_addr)
{
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	unsigned long addr_offset = 0;
    f940:	2300      	movs	r3, #0
{
    f942:	b5f0      	push	{r4, r5, r6, r7, lr}
    f944:	b085      	sub	sp, #20
    f946:	460f      	mov	r7, r1

#ifdef CONFIG_NRF_WIFI_LOW_POWER
	unsigned long flags = 0;
#endif /* CONFIG_NRF_WIFI_LOW_POWER */

	if (!hal_dev_ctx) {
    f948:	4604      	mov	r4, r0
{
    f94a:	4611      	mov	r1, r2
	unsigned long flags = 0;
    f94c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (!hal_dev_ctx) {
    f950:	b168      	cbz	r0, f96e <hal_rpu_reg_read+0x2e>
				      val,
				      rpu_reg_addr);
		return status;
	}

	status = pal_rpu_addr_offset_get(hal_dev_ctx->hpriv->opriv,
    f952:	6803      	ldr	r3, [r0, #0]
    f954:	6818      	ldr	r0, [r3, #0]
	if ((val == NULL) ||
    f956:	b127      	cbz	r7, f962 <hal_rpu_reg_read+0x22>
	if ((addr_base == RPU_ADDR_SBUS_START) ||
    f958:	f002 437e 	and.w	r3, r2, #4261412864	; 0xfe000000
    f95c:	f1b3 4f24 	cmp.w	r3, #2751463424	; 0xa4000000
    f960:	d00a      	beq.n	f978 <hal_rpu_reg_read+0x38>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f962:	9100      	str	r1, [sp, #0]
    f964:	463b      	mov	r3, r7
    f966:	4a21      	ldr	r2, [pc, #132]	; (f9ec <hal_rpu_reg_read+0xac>)
    f968:	4921      	ldr	r1, [pc, #132]	; (f9f0 <hal_rpu_reg_read+0xb0>)
    f96a:	f013 f8ef 	bl	22b4c <wifi_nrf_osal_log_err>
		return status;
    f96e:	f04f 35ff 	mov.w	r5, #4294967295
				       hal_dev_ctx->rpu_ps_lock,
				       &flags);
#endif /* CONFIG_NRF_WIFI_LOW_POWER */

	return status;
}
    f972:	4628      	mov	r0, r5
    f974:	b005      	add	sp, #20
    f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pal_rpu_addr_offset_get(hal_dev_ctx->hpriv->opriv,
    f978:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    f97c:	aa02      	add	r2, sp, #8
    f97e:	f000 f8e5 	bl	fb4c <pal_rpu_addr_offset_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f982:	6823      	ldr	r3, [r4, #0]
    f984:	4605      	mov	r5, r0
    f986:	b128      	cbz	r0, f994 <hal_rpu_reg_read+0x54>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f988:	4a18      	ldr	r2, [pc, #96]	; (f9ec <hal_rpu_reg_read+0xac>)
    f98a:	491a      	ldr	r1, [pc, #104]	; (f9f4 <hal_rpu_reg_read+0xb4>)
    f98c:	6818      	ldr	r0, [r3, #0]
    f98e:	f013 f8dd 	bl	22b4c <wifi_nrf_osal_log_err>
		return status;
    f992:	e7ee      	b.n	f972 <hal_rpu_reg_read+0x32>
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
    f994:	6818      	ldr	r0, [r3, #0]
    f996:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    f99a:	aa03      	add	r2, sp, #12
    f99c:	f013 f8ac 	bl	22af8 <wifi_nrf_osal_spinlock_irq_take>
	status = hal_rpu_ps_wake(hal_dev_ctx);
    f9a0:	4620      	mov	r0, r4
    f9a2:	f7fe fe0d 	bl	e5c0 <hal_rpu_ps_wake>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    f9a6:	4605      	mov	r5, r0
    f9a8:	b168      	cbz	r0, f9c6 <hal_rpu_reg_read+0x86>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f9aa:	6823      	ldr	r3, [r4, #0]
    f9ac:	4a0f      	ldr	r2, [pc, #60]	; (f9ec <hal_rpu_reg_read+0xac>)
    f9ae:	4912      	ldr	r1, [pc, #72]	; (f9f8 <hal_rpu_reg_read+0xb8>)
    f9b0:	6818      	ldr	r0, [r3, #0]
    f9b2:	f013 f8cb 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
    f9b6:	6823      	ldr	r3, [r4, #0]
    f9b8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    f9bc:	6818      	ldr	r0, [r3, #0]
    f9be:	aa03      	add	r2, sp, #12
    f9c0:	f013 f8a0 	bl	22b04 <wifi_nrf_osal_spinlock_irq_rel>
	return status;
    f9c4:	e7d5      	b.n	f972 <hal_rpu_reg_read+0x32>
	*val = wifi_nrf_bal_read_word(hal_dev_ctx->bal_dev_ctx,
    f9c6:	9902      	ldr	r1, [sp, #8]
    f9c8:	68a0      	ldr	r0, [r4, #8]
    f9ca:	f013 fa70 	bl	22eae <wifi_nrf_bal_read_word>
	if (*val == 0xFFFFFFFF) {
    f9ce:	1c43      	adds	r3, r0, #1
	*val = wifi_nrf_bal_read_word(hal_dev_ctx->bal_dev_ctx,
    f9d0:	4606      	mov	r6, r0
    f9d2:	6038      	str	r0, [r7, #0]
	if (*val == 0xFFFFFFFF) {
    f9d4:	d1ef      	bne.n	f9b6 <hal_rpu_reg_read+0x76>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    f9d6:	6820      	ldr	r0, [r4, #0]
    f9d8:	9600      	str	r6, [sp, #0]
    f9da:	9b02      	ldr	r3, [sp, #8]
    f9dc:	4a03      	ldr	r2, [pc, #12]	; (f9ec <hal_rpu_reg_read+0xac>)
    f9de:	4907      	ldr	r1, [pc, #28]	; (f9fc <hal_rpu_reg_read+0xbc>)
    f9e0:	6800      	ldr	r0, [r0, #0]
    f9e2:	f013 f8b3 	bl	22b4c <wifi_nrf_osal_log_err>
		status = WIFI_NRF_STATUS_FAIL;
    f9e6:	4635      	mov	r5, r6
		goto out;
    f9e8:	e7e5      	b.n	f9b6 <hal_rpu_reg_read+0x76>
    f9ea:	bf00      	nop
    f9ec:	00034ac6 	.word	0x00034ac6
    f9f0:	00034a01 	.word	0x00034a01
    f9f4:	00033e20 	.word	0x00033e20
    f9f8:	000348a2 	.word	0x000348a2
    f9fc:	00034a2f 	.word	0x00034a2f

0000fa00 <hal_rpu_reg_write>:

enum wifi_nrf_status hal_rpu_reg_write(struct wifi_nrf_hal_dev_ctx *hal_dev_ctx,
				       unsigned int rpu_reg_addr,
				       unsigned int val)
{
    fa00:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fa02:	4616      	mov	r6, r2
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	unsigned long addr_offset = 0;
    fa04:	2200      	movs	r2, #0
{
    fa06:	460b      	mov	r3, r1

#ifdef CONFIG_NRF_WIFI_LOW_POWER
	unsigned long flags = 0;
#endif /* CONFIG_NRF_WIFI_LOW_POWER */

	if (!hal_dev_ctx) {
    fa08:	4604      	mov	r4, r0
	unsigned long flags = 0;
    fa0a:	e9cd 2200 	strd	r2, r2, [sp]
	if (!hal_dev_ctx) {
    fa0e:	b150      	cbz	r0, fa26 <hal_rpu_reg_write+0x26>
		return status;
	}

	if (!hal_rpu_is_reg(rpu_reg_addr)) {
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    fa10:	6802      	ldr	r2, [r0, #0]
    fa12:	6810      	ldr	r0, [r2, #0]
	if ((addr_base == RPU_ADDR_SBUS_START) ||
    fa14:	f001 427e 	and.w	r2, r1, #4261412864	; 0xfe000000
    fa18:	f1b2 4f24 	cmp.w	r2, #2751463424	; 0xa4000000
    fa1c:	d008      	beq.n	fa30 <hal_rpu_reg_write+0x30>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    fa1e:	4a1b      	ldr	r2, [pc, #108]	; (fa8c <hal_rpu_reg_write+0x8c>)
    fa20:	491b      	ldr	r1, [pc, #108]	; (fa90 <hal_rpu_reg_write+0x90>)
    fa22:	f013 f893 	bl	22b4c <wifi_nrf_osal_log_err>
		return status;
    fa26:	f04f 35ff 	mov.w	r5, #4294967295
				       hal_dev_ctx->rpu_ps_lock,
				       &flags);
#endif /* CONFIG_NRF_WIFI_LOW_POWER */

	return status;
}
    fa2a:	4628      	mov	r0, r5
    fa2c:	b002      	add	sp, #8
    fa2e:	bd70      	pop	{r4, r5, r6, pc}
	status = pal_rpu_addr_offset_get(hal_dev_ctx->hpriv->opriv,
    fa30:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    fa34:	466a      	mov	r2, sp
    fa36:	f000 f889 	bl	fb4c <pal_rpu_addr_offset_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    fa3a:	6823      	ldr	r3, [r4, #0]
    fa3c:	4605      	mov	r5, r0
    fa3e:	b128      	cbz	r0, fa4c <hal_rpu_reg_write+0x4c>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    fa40:	4a12      	ldr	r2, [pc, #72]	; (fa8c <hal_rpu_reg_write+0x8c>)
    fa42:	4914      	ldr	r1, [pc, #80]	; (fa94 <hal_rpu_reg_write+0x94>)
    fa44:	6818      	ldr	r0, [r3, #0]
    fa46:	f013 f881 	bl	22b4c <wifi_nrf_osal_log_err>
		return status;
    fa4a:	e7ee      	b.n	fa2a <hal_rpu_reg_write+0x2a>
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
    fa4c:	6818      	ldr	r0, [r3, #0]
    fa4e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    fa52:	aa01      	add	r2, sp, #4
    fa54:	f013 f850 	bl	22af8 <wifi_nrf_osal_spinlock_irq_take>
	status = hal_rpu_ps_wake(hal_dev_ctx);
    fa58:	4620      	mov	r0, r4
    fa5a:	f7fe fdb1 	bl	e5c0 <hal_rpu_ps_wake>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    fa5e:	4605      	mov	r5, r0
    fa60:	b168      	cbz	r0, fa7e <hal_rpu_reg_write+0x7e>
		wifi_nrf_osal_log_err(hal_dev_ctx->hpriv->opriv,
    fa62:	6823      	ldr	r3, [r4, #0]
    fa64:	4a09      	ldr	r2, [pc, #36]	; (fa8c <hal_rpu_reg_write+0x8c>)
    fa66:	490c      	ldr	r1, [pc, #48]	; (fa98 <hal_rpu_reg_write+0x98>)
    fa68:	6818      	ldr	r0, [r3, #0]
    fa6a:	f013 f86f 	bl	22b4c <wifi_nrf_osal_log_err>
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
    fa6e:	6823      	ldr	r3, [r4, #0]
    fa70:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    fa74:	6818      	ldr	r0, [r3, #0]
    fa76:	aa01      	add	r2, sp, #4
    fa78:	f013 f844 	bl	22b04 <wifi_nrf_osal_spinlock_irq_rel>
	return status;
    fa7c:	e7d5      	b.n	fa2a <hal_rpu_reg_write+0x2a>
	wifi_nrf_bal_write_word(hal_dev_ctx->bal_dev_ctx,
    fa7e:	4632      	mov	r2, r6
    fa80:	9900      	ldr	r1, [sp, #0]
    fa82:	68a0      	ldr	r0, [r4, #8]
    fa84:	f013 fa18 	bl	22eb8 <wifi_nrf_bal_write_word>
	status = WIFI_NRF_STATUS_SUCCESS;
    fa88:	e7f1      	b.n	fa6e <hal_rpu_reg_write+0x6e>
    fa8a:	bf00      	nop
    fa8c:	00034ab4 	.word	0x00034ab4
    fa90:	00034a65 	.word	0x00034a65
    fa94:	00034a8e 	.word	0x00034a8e
    fa98:	000348a2 	.word	0x000348a2

0000fa9c <hal_rpu_hpq_enqueue>:
#include "hal_common.h"

enum wifi_nrf_status hal_rpu_hpq_enqueue(struct wifi_nrf_hal_dev_ctx *hal_ctx,
					 struct host_rpu_hpq *hpq,
					 unsigned int val)
{
    fa9c:	b538      	push	{r3, r4, r5, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	status = hal_rpu_reg_write(hal_ctx,
    fa9e:	6809      	ldr	r1, [r1, #0]
{
    faa0:	4605      	mov	r5, r0
	status = hal_rpu_reg_write(hal_ctx,
    faa2:	f7ff ffad 	bl	fa00 <hal_rpu_reg_write>
				   hpq->enqueue_addr,
				   val);

	if (status != WIFI_NRF_STATUS_SUCCESS) {
    faa6:	4604      	mov	r4, r0
    faa8:	b128      	cbz	r0, fab6 <hal_rpu_hpq_enqueue+0x1a>
		wifi_nrf_osal_log_err(hal_ctx->hpriv->opriv,
    faaa:	682b      	ldr	r3, [r5, #0]
    faac:	4a03      	ldr	r2, [pc, #12]	; (fabc <hal_rpu_hpq_enqueue+0x20>)
    faae:	4904      	ldr	r1, [pc, #16]	; (fac0 <hal_rpu_hpq_enqueue+0x24>)
    fab0:	6818      	ldr	r0, [r3, #0]
    fab2:	f013 f84b 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
	}

out:
	return status;
}
    fab6:	4620      	mov	r0, r4
    fab8:	bd38      	pop	{r3, r4, r5, pc}
    faba:	bf00      	nop
    fabc:	00034b65 	.word	0x00034b65
    fac0:	00034ad7 	.word	0x00034ad7

0000fac4 <hal_rpu_hpq_dequeue>:


enum wifi_nrf_status hal_rpu_hpq_dequeue(struct wifi_nrf_hal_dev_ctx *hal_ctx,
					 struct host_rpu_hpq *hpq,
					 unsigned int *val)
{
    fac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fac6:	4614      	mov	r4, r2
    fac8:	460f      	mov	r7, r1
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	status = hal_rpu_reg_read(hal_ctx,
    faca:	684a      	ldr	r2, [r1, #4]
    facc:	4621      	mov	r1, r4
{
    face:	4606      	mov	r6, r0
	status = hal_rpu_reg_read(hal_ctx,
    fad0:	f7ff ff36 	bl	f940 <hal_rpu_reg_read>
				  val,
				  hpq->dequeue_addr);

	if (status != WIFI_NRF_STATUS_SUCCESS) {
    fad4:	4605      	mov	r5, r0
    fad6:	b140      	cbz	r0, faea <hal_rpu_hpq_dequeue+0x26>
		wifi_nrf_osal_log_err(hal_ctx->hpriv->opriv,
    fad8:	6830      	ldr	r0, [r6, #0]
    fada:	6823      	ldr	r3, [r4, #0]
    fadc:	4a0c      	ldr	r2, [pc, #48]	; (fb10 <hal_rpu_hpq_dequeue+0x4c>)
    fade:	490d      	ldr	r1, [pc, #52]	; (fb14 <hal_rpu_hpq_dequeue+0x50>)
    fae0:	6800      	ldr	r0, [r0, #0]
    fae2:	f013 f833 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
		}
	}
out:
	return status;
}
    fae6:	4628      	mov	r0, r5
    fae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (*val) {
    faea:	6822      	ldr	r2, [r4, #0]
    faec:	2a00      	cmp	r2, #0
    faee:	d0fa      	beq.n	fae6 <hal_rpu_hpq_dequeue+0x22>
		status = hal_rpu_reg_write(hal_ctx,
    faf0:	6879      	ldr	r1, [r7, #4]
    faf2:	4630      	mov	r0, r6
    faf4:	f7ff ff84 	bl	fa00 <hal_rpu_reg_write>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
    faf8:	4607      	mov	r7, r0
    fafa:	2800      	cmp	r0, #0
    fafc:	d0f3      	beq.n	fae6 <hal_rpu_hpq_dequeue+0x22>
			wifi_nrf_osal_log_err(hal_ctx->hpriv->opriv,
    fafe:	6830      	ldr	r0, [r6, #0]
    fb00:	6823      	ldr	r3, [r4, #0]
    fb02:	4a03      	ldr	r2, [pc, #12]	; (fb10 <hal_rpu_hpq_dequeue+0x4c>)
    fb04:	4904      	ldr	r1, [pc, #16]	; (fb18 <hal_rpu_hpq_dequeue+0x54>)
    fb06:	6800      	ldr	r0, [r0, #0]
    fb08:	f013 f820 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
    fb0c:	463d      	mov	r5, r7
    fb0e:	e7ea      	b.n	fae6 <hal_rpu_hpq_dequeue+0x22>
    fb10:	00034b51 	.word	0x00034b51
    fb14:	00034afe 	.word	0x00034afe
    fb18:	00034b1e 	.word	0x00034b1e

0000fb1c <pal_check_rpu_mcu_regions>:
bool pal_check_rpu_mcu_regions(enum RPU_PROC_TYPE proc, unsigned int addr_val)
{
	const struct rpu_addr_map *map = &RPU_ADDR_MAP_MCU[proc];
	enum RPU_MCU_ADDR_REGIONS region_type;

	if (proc >= RPU_PROC_TYPE_MAX) {
    fb1c:	2801      	cmp	r0, #1
    fb1e:	d80f      	bhi.n	fb40 <pal_check_rpu_mcu_regions+0x24>
    fb20:	2218      	movs	r2, #24
    fb22:	4b09      	ldr	r3, [pc, #36]	; (fb48 <pal_check_rpu_mcu_regions+0x2c>)
    fb24:	fb02 3300 	mla	r3, r2, r0, r3
    fb28:	2003      	movs	r0, #3
	}

	for (region_type = 0; region_type < RPU_MCU_ADDR_REGION_MAX; region_type++) {
		const struct rpu_addr_region *region = &map->regions[region_type];

		if ((addr_val >= region->start) && (addr_val <= region->end)) {
    fb2a:	681a      	ldr	r2, [r3, #0]
    fb2c:	428a      	cmp	r2, r1
    fb2e:	d802      	bhi.n	fb36 <pal_check_rpu_mcu_regions+0x1a>
    fb30:	685a      	ldr	r2, [r3, #4]
    fb32:	428a      	cmp	r2, r1
    fb34:	d206      	bcs.n	fb44 <pal_check_rpu_mcu_regions+0x28>
	for (region_type = 0; region_type < RPU_MCU_ADDR_REGION_MAX; region_type++) {
    fb36:	3801      	subs	r0, #1
    fb38:	f103 0308 	add.w	r3, r3, #8
    fb3c:	d1f5      	bne.n	fb2a <pal_check_rpu_mcu_regions+0xe>
    fb3e:	4770      	bx	lr
		return false;
    fb40:	2000      	movs	r0, #0
    fb42:	4770      	bx	lr
			return true;
    fb44:	2001      	movs	r0, #1
		}
	}

	return false;
}
    fb46:	4770      	bx	lr
    fb48:	000251ec 	.word	0x000251ec

0000fb4c <pal_rpu_addr_offset_get>:

enum wifi_nrf_status pal_rpu_addr_offset_get(struct wifi_nrf_osal_priv *opriv,
					     unsigned int rpu_addr,
					     unsigned long *addr,
						 enum RPU_PROC_TYPE proc)
{
    fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb4e:	461d      	mov	r5, r3
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	unsigned int addr_base = (rpu_addr & RPU_ADDR_MASK_BASE);
    fb50:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
	unsigned long region_offset = 0;

	if (addr_base == RPU_ADDR_SBUS_START) {
    fb54:	f1b3 4f24 	cmp.w	r3, #2751463424	; 0xa4000000
{
    fb58:	4607      	mov	r7, r0
    fb5a:	460c      	mov	r4, r1
    fb5c:	4616      	mov	r6, r2
	if (addr_base == RPU_ADDR_SBUS_START) {
    fb5e:	d020      	beq.n	fba2 <pal_rpu_addr_offset_get+0x56>
		region_offset = SOC_MMAP_ADDR_OFFSET_SYSBUS;
	} else if ((rpu_addr >= RPU_ADDR_GRAM_START) &&
    fb60:	f101 4292 	add.w	r2, r1, #1224736768	; 0x49000000
    fb64:	f5b2 3f81 	cmp.w	r2, #66048	; 0x10200
    fb68:	d31d      	bcc.n	fba6 <pal_rpu_addr_offset_get+0x5a>
		   (rpu_addr <= RPU_ADDR_GRAM_END)) {
		region_offset = SOC_MMAP_ADDR_OFFSET_GRAM_PKD;
	} else if (addr_base == RPU_ADDR_PBUS_START) {
    fb6a:	f1b3 4f25 	cmp.w	r3, #2768240640	; 0xa5000000
    fb6e:	d01d      	beq.n	fbac <pal_rpu_addr_offset_get+0x60>
		region_offset = SOC_MMAP_ADDR_OFFSET_PBUS;
	} else if (addr_base == RPU_ADDR_PKTRAM_START) {
    fb70:	f1b3 4f30 	cmp.w	r3, #2952790016	; 0xb0000000
    fb74:	d01d      	beq.n	fbb2 <pal_rpu_addr_offset_get+0x66>
		region_offset = SOC_MMAP_ADDR_OFFSET_PKTRAM_HOST_VIEW;
	} else if (pal_check_rpu_mcu_regions(proc, rpu_addr)) {
    fb76:	4628      	mov	r0, r5
    fb78:	f7ff ffd0 	bl	fb1c <pal_check_rpu_mcu_regions>
    fb7c:	b140      	cbz	r0, fb90 <pal_rpu_addr_offset_get+0x44>
		region_offset = SOC_MMAP_ADDR_OFFSETS_MCU[proc];
    fb7e:	4b0e      	ldr	r3, [pc, #56]	; (fbb8 <pal_rpu_addr_offset_get+0x6c>)
    fb80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
				      __func__,
				      rpu_addr);
		goto out;
	}

	*addr = region_offset + (rpu_addr & RPU_ADDR_MASK_OFFSET);
    fb84:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    fb88:	441c      	add	r4, r3

	status = WIFI_NRF_STATUS_SUCCESS;
    fb8a:	2000      	movs	r0, #0
	*addr = region_offset + (rpu_addr & RPU_ADDR_MASK_OFFSET);
    fb8c:	6034      	str	r4, [r6, #0]
	status = WIFI_NRF_STATUS_SUCCESS;
    fb8e:	e007      	b.n	fba0 <pal_rpu_addr_offset_get+0x54>
		wifi_nrf_osal_log_err(opriv,
    fb90:	460b      	mov	r3, r1
    fb92:	4638      	mov	r0, r7
    fb94:	4a09      	ldr	r2, [pc, #36]	; (fbbc <pal_rpu_addr_offset_get+0x70>)
    fb96:	490a      	ldr	r1, [pc, #40]	; (fbc0 <pal_rpu_addr_offset_get+0x74>)
    fb98:	f012 ffd8 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
    fb9c:	f04f 30ff 	mov.w	r0, #4294967295
out:
	return status;
}
    fba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		region_offset = SOC_MMAP_ADDR_OFFSET_SYSBUS;
    fba2:	2300      	movs	r3, #0
    fba4:	e7ee      	b.n	fb84 <pal_rpu_addr_offset_get+0x38>
		region_offset = SOC_MMAP_ADDR_OFFSET_GRAM_PKD;
    fba6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    fbaa:	e7eb      	b.n	fb84 <pal_rpu_addr_offset_get+0x38>
		region_offset = SOC_MMAP_ADDR_OFFSET_PBUS;
    fbac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fbb0:	e7e8      	b.n	fb84 <pal_rpu_addr_offset_get+0x38>
		region_offset = SOC_MMAP_ADDR_OFFSET_PKTRAM_HOST_VIEW;
    fbb2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
    fbb6:	e7e5      	b.n	fb84 <pal_rpu_addr_offset_get+0x38>
    fbb8:	000251e4 	.word	0x000251e4
    fbbc:	00034b94 	.word	0x00034b94
    fbc0:	00034b79 	.word	0x00034b79

0000fbc4 <wifi_nrf_bal_dev_add>:
#endif  /* CONFIG_NRF_WIFI_LOW_POWER */


struct wifi_nrf_bal_dev_ctx *wifi_nrf_bal_dev_add(struct wifi_nrf_bal_priv *bpriv,
						  void *hal_dev_ctx)
{
    fbc4:	b570      	push	{r4, r5, r6, lr}
    fbc6:	4605      	mov	r5, r0
    fbc8:	460e      	mov	r6, r1
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct wifi_nrf_bal_dev_ctx *bal_dev_ctx = NULL;

	bal_dev_ctx = wifi_nrf_osal_mem_zalloc(bpriv->opriv,
    fbca:	6800      	ldr	r0, [r0, #0]
    fbcc:	2110      	movs	r1, #16
    fbce:	f012 ff64 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					       sizeof(*bal_dev_ctx));

	if (!bal_dev_ctx) {
    fbd2:	4604      	mov	r4, r0
    fbd4:	b938      	cbnz	r0, fbe6 <wifi_nrf_bal_dev_add+0x22>
		wifi_nrf_osal_log_err(bpriv->opriv,
    fbd6:	4a0e      	ldr	r2, [pc, #56]	; (fc10 <wifi_nrf_bal_dev_add+0x4c>)
    fbd8:	490e      	ldr	r1, [pc, #56]	; (fc14 <wifi_nrf_bal_dev_add+0x50>)
    fbda:	6828      	ldr	r0, [r5, #0]
    fbdc:	f012 ffb6 	bl	22b4c <wifi_nrf_osal_log_err>
	bal_dev_ctx = wifi_nrf_osal_mem_zalloc(bpriv->opriv,
    fbe0:	2400      	movs	r4, #0
			bal_dev_ctx = NULL;
		}
	}

	return bal_dev_ctx;
}
    fbe2:	4620      	mov	r0, r4
    fbe4:	bd70      	pop	{r4, r5, r6, pc}
	bal_dev_ctx->hal_dev_ctx = hal_dev_ctx;
    fbe6:	e9c0 5600 	strd	r5, r6, [r0]
	bal_dev_ctx->bus_dev_ctx = bpriv->ops->dev_add(bpriv->bus_priv,
    fbea:	68ab      	ldr	r3, [r5, #8]
    fbec:	4601      	mov	r1, r0
    fbee:	689b      	ldr	r3, [r3, #8]
    fbf0:	6868      	ldr	r0, [r5, #4]
    fbf2:	4798      	blx	r3
    fbf4:	60a0      	str	r0, [r4, #8]
	if (!bal_dev_ctx->bus_dev_ctx) {
    fbf6:	2800      	cmp	r0, #0
    fbf8:	d1f3      	bne.n	fbe2 <wifi_nrf_bal_dev_add+0x1e>
		wifi_nrf_osal_log_err(bpriv->opriv,
    fbfa:	4a05      	ldr	r2, [pc, #20]	; (fc10 <wifi_nrf_bal_dev_add+0x4c>)
    fbfc:	4906      	ldr	r1, [pc, #24]	; (fc18 <wifi_nrf_bal_dev_add+0x54>)
    fbfe:	6828      	ldr	r0, [r5, #0]
    fc00:	f012 ffa4 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_mem_free(bpriv->opriv,
    fc04:	4621      	mov	r1, r4
    fc06:	6828      	ldr	r0, [r5, #0]
    fc08:	f012 ff4b 	bl	22aa2 <wifi_nrf_osal_mem_free>
			bal_dev_ctx = NULL;
    fc0c:	e7e8      	b.n	fbe0 <wifi_nrf_bal_dev_add+0x1c>
    fc0e:	bf00      	nop
    fc10:	00034c4e 	.word	0x00034c4e
    fc14:	00034bac 	.word	0x00034bac
    fc18:	00034bd0 	.word	0x00034bd0

0000fc1c <wifi_nrf_bal_dev_init>:
			       bal_dev_ctx);
}


enum wifi_nrf_status wifi_nrf_bal_dev_init(struct wifi_nrf_bal_dev_ctx *bal_dev_ctx)
{
    fc1c:	b538      	push	{r3, r4, r5, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

#ifdef CONFIG_NRF_WIFI_LOW_POWER
	bal_dev_ctx->rpu_fw_booted = true;
    fc1e:	2301      	movs	r3, #1
    fc20:	7303      	strb	r3, [r0, #12]
#endif /* CONFIG_NRF_WIFI_LOW_POWER */

	status = bal_dev_ctx->bpriv->ops->dev_init(bal_dev_ctx->bus_dev_ctx);
    fc22:	6803      	ldr	r3, [r0, #0]
{
    fc24:	4604      	mov	r4, r0
	status = bal_dev_ctx->bpriv->ops->dev_init(bal_dev_ctx->bus_dev_ctx);
    fc26:	689b      	ldr	r3, [r3, #8]
    fc28:	6880      	ldr	r0, [r0, #8]
    fc2a:	691b      	ldr	r3, [r3, #16]
    fc2c:	4798      	blx	r3

	if (status != WIFI_NRF_STATUS_SUCCESS) {
    fc2e:	4605      	mov	r5, r0
    fc30:	b128      	cbz	r0, fc3e <wifi_nrf_bal_dev_init+0x22>
		wifi_nrf_osal_log_err(bal_dev_ctx->bpriv->opriv,
    fc32:	6823      	ldr	r3, [r4, #0]
    fc34:	4a03      	ldr	r2, [pc, #12]	; (fc44 <wifi_nrf_bal_dev_init+0x28>)
    fc36:	4904      	ldr	r1, [pc, #16]	; (fc48 <wifi_nrf_bal_dev_init+0x2c>)
    fc38:	6818      	ldr	r0, [r3, #0]
    fc3a:	f012 ff87 	bl	22b4c <wifi_nrf_osal_log_err>
				      "%s: dev_init failed\n", __func__);
		goto out;
	}
out:
	return status;
}
    fc3e:	4628      	mov	r0, r5
    fc40:	bd38      	pop	{r3, r4, r5, pc}
    fc42:	bf00      	nop
    fc44:	00034c38 	.word	0x00034c38
    fc48:	00034be8 	.word	0x00034be8

0000fc4c <wifi_nrf_bal_init>:

struct wifi_nrf_bal_priv *
wifi_nrf_bal_init(struct wifi_nrf_osal_priv *opriv,
		  struct wifi_nrf_bal_cfg_params *cfg_params,
		  enum wifi_nrf_status (*intr_callbk_fn)(void *hal_dev_ctx))
{
    fc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc4e:	460e      	mov	r6, r1
	struct wifi_nrf_bal_priv *bpriv = NULL;

	bpriv = wifi_nrf_osal_mem_zalloc(opriv,
    fc50:	2118      	movs	r1, #24
{
    fc52:	4605      	mov	r5, r0
    fc54:	4617      	mov	r7, r2
	bpriv = wifi_nrf_osal_mem_zalloc(opriv,
    fc56:	f012 ff20 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					 sizeof(*bpriv));

	if (!bpriv) {
    fc5a:	4604      	mov	r4, r0
    fc5c:	b938      	cbnz	r0, fc6e <wifi_nrf_bal_init+0x22>
		wifi_nrf_osal_log_err(opriv,
    fc5e:	4628      	mov	r0, r5
    fc60:	4a0e      	ldr	r2, [pc, #56]	; (fc9c <wifi_nrf_bal_init+0x50>)
    fc62:	490f      	ldr	r1, [pc, #60]	; (fca0 <wifi_nrf_bal_init+0x54>)
    fc64:	f012 ff72 	bl	22b4c <wifi_nrf_osal_log_err>
	bpriv = wifi_nrf_osal_mem_zalloc(opriv,
    fc68:	2400      	movs	r4, #0
		bpriv = NULL;
	}

out:
	return bpriv;
}
    fc6a:	4620      	mov	r0, r4
    fc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bpriv->opriv = opriv;
    fc6e:	6005      	str	r5, [r0, #0]
	bpriv->intr_callbk_fn = intr_callbk_fn;
    fc70:	6147      	str	r7, [r0, #20]
	bpriv->ops = get_bus_ops();
    fc72:	f000 f8b5 	bl	fde0 <get_bus_ops>
    fc76:	60a0      	str	r0, [r4, #8]
	bpriv->bus_priv = bpriv->ops->init(opriv,
    fc78:	6803      	ldr	r3, [r0, #0]
    fc7a:	4631      	mov	r1, r6
    fc7c:	4628      	mov	r0, r5
    fc7e:	4a09      	ldr	r2, [pc, #36]	; (fca4 <wifi_nrf_bal_init+0x58>)
    fc80:	4798      	blx	r3
    fc82:	6060      	str	r0, [r4, #4]
	if (!bpriv->bus_priv) {
    fc84:	2800      	cmp	r0, #0
    fc86:	d1f0      	bne.n	fc6a <wifi_nrf_bal_init+0x1e>
		wifi_nrf_osal_log_err(opriv,
    fc88:	4628      	mov	r0, r5
    fc8a:	4a04      	ldr	r2, [pc, #16]	; (fc9c <wifi_nrf_bal_init+0x50>)
    fc8c:	4906      	ldr	r1, [pc, #24]	; (fca8 <wifi_nrf_bal_init+0x5c>)
    fc8e:	f012 ff5d 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(opriv,
    fc92:	4621      	mov	r1, r4
    fc94:	4628      	mov	r0, r5
    fc96:	f012 ff04 	bl	22aa2 <wifi_nrf_osal_mem_free>
		bpriv = NULL;
    fc9a:	e7e5      	b.n	fc68 <wifi_nrf_bal_init+0x1c>
    fc9c:	00034c26 	.word	0x00034c26
    fca0:	00034bfd 	.word	0x00034bfd
    fca4:	00022e73 	.word	0x00022e73
    fca8:	0003400b 	.word	0x0003400b

0000fcac <wifi_nrf_bus_qspi_dev_add>:
}


static void *wifi_nrf_bus_qspi_dev_add(void *bus_priv,
				       void *bal_dev_ctx)
{
    fcac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fcae:	4605      	mov	r5, r0
    fcb0:	460e      	mov	r6, r1
	struct wifi_nrf_bus_qspi_dev_ctx *qspi_dev_ctx = NULL;
	struct wifi_nrf_osal_host_map host_map;

	qspi_priv = bus_priv;

	qspi_dev_ctx = wifi_nrf_osal_mem_zalloc(qspi_priv->opriv,
    fcb2:	6800      	ldr	r0, [r0, #0]
    fcb4:	2114      	movs	r1, #20
    fcb6:	f012 fef0 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
						sizeof(*qspi_dev_ctx));

	if (!qspi_dev_ctx) {
    fcba:	4604      	mov	r4, r0
    fcbc:	b940      	cbnz	r0, fcd0 <wifi_nrf_bus_qspi_dev_add+0x24>
		wifi_nrf_osal_log_err(qspi_priv->opriv,
    fcbe:	4a20      	ldr	r2, [pc, #128]	; (fd40 <wifi_nrf_bus_qspi_dev_add+0x94>)
    fcc0:	4920      	ldr	r1, [pc, #128]	; (fd44 <wifi_nrf_bus_qspi_dev_add+0x98>)
    fcc2:	6828      	ldr	r0, [r5, #0]
    fcc4:	f012 ff42 	bl	22b4c <wifi_nrf_osal_log_err>
	qspi_dev_ctx = wifi_nrf_osal_mem_zalloc(qspi_priv->opriv,
    fcc8:	2400      	movs	r4, #0
		goto out;
	}

out:
	return qspi_dev_ctx;
}
    fcca:	4620      	mov	r0, r4
    fccc:	b002      	add	sp, #8
    fcce:	bd70      	pop	{r4, r5, r6, pc}
	qspi_dev_ctx->bal_dev_ctx = bal_dev_ctx;
    fcd0:	e9c0 5600 	strd	r5, r6, [r0]
	qspi_dev_ctx->os_qspi_dev_ctx = wifi_nrf_osal_bus_qspi_dev_add(qspi_priv->opriv,
    fcd4:	4602      	mov	r2, r0
    fcd6:	e9d5 0100 	ldrd	r0, r1, [r5]
    fcda:	f012 ffd4 	bl	22c86 <wifi_nrf_osal_bus_qspi_dev_add>
    fcde:	4601      	mov	r1, r0
    fce0:	60a0      	str	r0, [r4, #8]
	if (!qspi_dev_ctx->os_qspi_dev_ctx) {
    fce2:	b948      	cbnz	r0, fcf8 <wifi_nrf_bus_qspi_dev_add+0x4c>
		wifi_nrf_osal_log_err(qspi_priv->opriv,
    fce4:	4a16      	ldr	r2, [pc, #88]	; (fd40 <wifi_nrf_bus_qspi_dev_add+0x94>)
    fce6:	4918      	ldr	r1, [pc, #96]	; (fd48 <wifi_nrf_bus_qspi_dev_add+0x9c>)
    fce8:	6828      	ldr	r0, [r5, #0]
    fcea:	f012 ff2f 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(qspi_priv->opriv,
    fcee:	4621      	mov	r1, r4
    fcf0:	6828      	ldr	r0, [r5, #0]
    fcf2:	f012 fed6 	bl	22aa2 <wifi_nrf_osal_mem_free>
		goto out;
    fcf6:	e7e7      	b.n	fcc8 <wifi_nrf_bus_qspi_dev_add+0x1c>
	wifi_nrf_osal_bus_qspi_dev_host_map_get(qspi_priv->opriv,
    fcf8:	466a      	mov	r2, sp
    fcfa:	6828      	ldr	r0, [r5, #0]
    fcfc:	f012 ffe9 	bl	22cd2 <wifi_nrf_osal_bus_qspi_dev_host_map_get>
	qspi_dev_ctx->host_addr_base = host_map.addr;
    fd00:	9a00      	ldr	r2, [sp, #0]
	status = wifi_nrf_osal_bus_qspi_dev_intr_reg(qspi_dev_ctx->qspi_priv->opriv,
    fd02:	6820      	ldr	r0, [r4, #0]
	qspi_dev_ctx->host_addr_base = host_map.addr;
    fd04:	60e2      	str	r2, [r4, #12]
	qspi_dev_ctx->addr_pktram_base = qspi_dev_ctx->host_addr_base +
    fd06:	68eb      	ldr	r3, [r5, #12]
	status = wifi_nrf_osal_bus_qspi_dev_intr_reg(qspi_dev_ctx->qspi_priv->opriv,
    fd08:	68a1      	ldr	r1, [r4, #8]
	qspi_dev_ctx->addr_pktram_base = qspi_dev_ctx->host_addr_base +
    fd0a:	4413      	add	r3, r2
    fd0c:	6123      	str	r3, [r4, #16]
	status = wifi_nrf_osal_bus_qspi_dev_intr_reg(qspi_dev_ctx->qspi_priv->opriv,
    fd0e:	4622      	mov	r2, r4
    fd10:	4b0e      	ldr	r3, [pc, #56]	; (fd4c <wifi_nrf_bus_qspi_dev_add+0xa0>)
    fd12:	6800      	ldr	r0, [r0, #0]
    fd14:	f012 ffcd 	bl	22cb2 <wifi_nrf_osal_bus_qspi_dev_intr_reg>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    fd18:	2800      	cmp	r0, #0
    fd1a:	d0d6      	beq.n	fcca <wifi_nrf_bus_qspi_dev_add+0x1e>
		wifi_nrf_osal_log_err(qspi_dev_ctx->qspi_priv->opriv,
    fd1c:	6823      	ldr	r3, [r4, #0]
    fd1e:	4a08      	ldr	r2, [pc, #32]	; (fd40 <wifi_nrf_bus_qspi_dev_add+0x94>)
    fd20:	490b      	ldr	r1, [pc, #44]	; (fd50 <wifi_nrf_bus_qspi_dev_add+0xa4>)
    fd22:	6818      	ldr	r0, [r3, #0]
    fd24:	f012 ff12 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_bus_qspi_dev_intr_unreg(qspi_dev_ctx->qspi_priv->opriv,
    fd28:	6823      	ldr	r3, [r4, #0]
    fd2a:	68a1      	ldr	r1, [r4, #8]
    fd2c:	6818      	ldr	r0, [r3, #0]
    fd2e:	f012 ffcb 	bl	22cc8 <wifi_nrf_osal_bus_qspi_dev_intr_unreg>
		wifi_nrf_osal_bus_qspi_dev_rem(qspi_dev_ctx->qspi_priv->opriv,
    fd32:	6823      	ldr	r3, [r4, #0]
    fd34:	68a1      	ldr	r1, [r4, #8]
    fd36:	6818      	ldr	r0, [r3, #0]
    fd38:	f012 ffac 	bl	22c94 <wifi_nrf_osal_bus_qspi_dev_rem>
		wifi_nrf_osal_mem_free(qspi_priv->opriv,
    fd3c:	e7d7      	b.n	fcee <wifi_nrf_bus_qspi_dev_add+0x42>
    fd3e:	bf00      	nop
    fd40:	00034d6f 	.word	0x00034d6f
    fd44:	00034c63 	.word	0x00034c63
    fd48:	00034c88 	.word	0x00034c88
    fd4c:	00022f21 	.word	0x00022f21
    fd50:	00034cb3 	.word	0x00034cb3

0000fd54 <wifi_nrf_bus_qspi_init>:


static void *wifi_nrf_bus_qspi_init(struct wifi_nrf_osal_priv *opriv,
				    void *params,
				    enum wifi_nrf_status (*intr_callbk_fn)(void *bal_dev_ctx))
{
    fd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd56:	460f      	mov	r7, r1
	struct wifi_nrf_bus_qspi_priv *qspi_priv = NULL;

	qspi_priv = wifi_nrf_osal_mem_zalloc(opriv,
    fd58:	2110      	movs	r1, #16
{
    fd5a:	4605      	mov	r5, r0
    fd5c:	4616      	mov	r6, r2
	qspi_priv = wifi_nrf_osal_mem_zalloc(opriv,
    fd5e:	f012 fe9c 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					     sizeof(*qspi_priv));

	if (!qspi_priv) {
    fd62:	4604      	mov	r4, r0
    fd64:	b938      	cbnz	r0, fd76 <wifi_nrf_bus_qspi_init+0x22>
		wifi_nrf_osal_log_err(opriv,
    fd66:	4628      	mov	r0, r5
    fd68:	4a0f      	ldr	r2, [pc, #60]	; (fda8 <wifi_nrf_bus_qspi_init+0x54>)
    fd6a:	4910      	ldr	r1, [pc, #64]	; (fdac <wifi_nrf_bus_qspi_init+0x58>)
    fd6c:	f012 feee 	bl	22b4c <wifi_nrf_osal_log_err>
	qspi_priv = wifi_nrf_osal_mem_zalloc(opriv,
    fd70:	2400      	movs	r4, #0

		goto out;
	}
out:
	return qspi_priv;
}
    fd72:	4620      	mov	r0, r4
    fd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	qspi_priv->opriv = opriv;
    fd76:	4601      	mov	r1, r0
	wifi_nrf_osal_mem_cpy(opriv,
    fd78:	2304      	movs	r3, #4
    fd7a:	463a      	mov	r2, r7
	qspi_priv->opriv = opriv;
    fd7c:	f841 5b0c 	str.w	r5, [r1], #12
	wifi_nrf_osal_mem_cpy(opriv,
    fd80:	4628      	mov	r0, r5
    fd82:	f012 fe92 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	qspi_priv->os_qspi_priv = wifi_nrf_osal_bus_qspi_init(opriv);
    fd86:	4628      	mov	r0, r5
	qspi_priv->intr_callbk_fn = intr_callbk_fn;
    fd88:	60a6      	str	r6, [r4, #8]
	qspi_priv->os_qspi_priv = wifi_nrf_osal_bus_qspi_init(opriv);
    fd8a:	f012 ff73 	bl	22c74 <wifi_nrf_osal_bus_qspi_init>
    fd8e:	6060      	str	r0, [r4, #4]
	if (!qspi_priv->os_qspi_priv) {
    fd90:	2800      	cmp	r0, #0
    fd92:	d1ee      	bne.n	fd72 <wifi_nrf_bus_qspi_init+0x1e>
		wifi_nrf_osal_log_err(opriv,
    fd94:	4628      	mov	r0, r5
    fd96:	4a04      	ldr	r2, [pc, #16]	; (fda8 <wifi_nrf_bus_qspi_init+0x54>)
    fd98:	4905      	ldr	r1, [pc, #20]	; (fdb0 <wifi_nrf_bus_qspi_init+0x5c>)
    fd9a:	f012 fed7 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(opriv,
    fd9e:	4621      	mov	r1, r4
    fda0:	4628      	mov	r0, r5
    fda2:	f012 fe7e 	bl	22aa2 <wifi_nrf_osal_mem_free>
		goto out;
    fda6:	e7e3      	b.n	fd70 <wifi_nrf_bus_qspi_init+0x1c>
    fda8:	00034d58 	.word	0x00034d58
    fdac:	00034cdf 	.word	0x00034cdf
    fdb0:	00034d0c 	.word	0x00034d0c

0000fdb4 <wifi_nrf_bus_qspi_dev_init>:
{
    fdb4:	b538      	push	{r3, r4, r5, lr}
	status = wifi_nrf_osal_bus_qspi_dev_init(qspi_dev_ctx->qspi_priv->opriv,
    fdb6:	6803      	ldr	r3, [r0, #0]
    fdb8:	6881      	ldr	r1, [r0, #8]
{
    fdba:	4604      	mov	r4, r0
	status = wifi_nrf_osal_bus_qspi_dev_init(qspi_dev_ctx->qspi_priv->opriv,
    fdbc:	6818      	ldr	r0, [r3, #0]
    fdbe:	f012 ff6e 	bl	22c9e <wifi_nrf_osal_bus_qspi_dev_init>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
    fdc2:	4605      	mov	r5, r0
    fdc4:	b128      	cbz	r0, fdd2 <wifi_nrf_bus_qspi_dev_init+0x1e>
		wifi_nrf_osal_log_err(qspi_dev_ctx->qspi_priv->opriv,
    fdc6:	6823      	ldr	r3, [r4, #0]
    fdc8:	4a03      	ldr	r2, [pc, #12]	; (fdd8 <wifi_nrf_bus_qspi_dev_init+0x24>)
    fdca:	4904      	ldr	r1, [pc, #16]	; (fddc <wifi_nrf_bus_qspi_dev_init+0x28>)
    fdcc:	6818      	ldr	r0, [r3, #0]
    fdce:	f012 febd 	bl	22b4c <wifi_nrf_osal_log_err>
}
    fdd2:	4628      	mov	r0, r5
    fdd4:	bd38      	pop	{r3, r4, r5, pc}
    fdd6:	bf00      	nop
    fdd8:	00034d89 	.word	0x00034d89
    fddc:	00034d30 	.word	0x00034d30

0000fde0 <get_bus_ops>:


struct wifi_nrf_bal_ops *get_bus_ops(void)
{
	return &wifi_nrf_bus_qspi_ops;
}
    fde0:	4800      	ldr	r0, [pc, #0]	; (fde4 <get_bus_ops+0x4>)
    fde2:	4770      	bx	lr
    fde4:	2000090c 	.word	0x2000090c

0000fde8 <umac_cmd_alloc>:
#include "fmac_structs.h"

struct host_rpu_msg *umac_cmd_alloc(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
				    int type,
				    int len)
{
    fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct host_rpu_msg *umac_cmd = NULL;

	umac_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
    fdea:	6803      	ldr	r3, [r0, #0]
    fdec:	f102 050c 	add.w	r5, r2, #12
{
    fdf0:	4606      	mov	r6, r0
    fdf2:	460f      	mov	r7, r1
	umac_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
    fdf4:	6818      	ldr	r0, [r3, #0]
    fdf6:	4629      	mov	r1, r5
    fdf8:	f012 fe4f 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					    sizeof(*umac_cmd) + len);

	if (!umac_cmd) {
    fdfc:	4604      	mov	r4, r0
    fdfe:	b938      	cbnz	r0, fe10 <umac_cmd_alloc+0x28>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
    fe00:	6833      	ldr	r3, [r6, #0]
    fe02:	4a05      	ldr	r2, [pc, #20]	; (fe18 <umac_cmd_alloc+0x30>)
    fe04:	4905      	ldr	r1, [pc, #20]	; (fe1c <umac_cmd_alloc+0x34>)
    fe06:	6818      	ldr	r0, [r3, #0]
    fe08:	f012 fea0 	bl	22b4c <wifi_nrf_osal_log_err>
	umac_cmd->type = type;
	umac_cmd->hdr.len = sizeof(*umac_cmd) + len;

out:
	return umac_cmd;
}
    fe0c:	4620      	mov	r0, r4
    fe0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	umac_cmd->type = type;
    fe10:	6087      	str	r7, [r0, #8]
	umac_cmd->hdr.len = sizeof(*umac_cmd) + len;
    fe12:	6005      	str	r5, [r0, #0]
	return umac_cmd;
    fe14:	e7fa      	b.n	fe0c <umac_cmd_alloc+0x24>
    fe16:	bf00      	nop
    fe18:	00034e3a 	.word	0x00034e3a
    fe1c:	00034da4 	.word	0x00034da4

0000fe20 <umac_cmd_cfg>:


enum wifi_nrf_status umac_cmd_cfg(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
				void *params,
				int len)
{
    fe20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct host_rpu_msg *umac_cmd = NULL;

	if (!fmac_dev_ctx->fw_init_done) {
    fe22:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
{
    fe26:	4604      	mov	r4, r0
    fe28:	460f      	mov	r7, r1
    fe2a:	4616      	mov	r6, r2
	if (!fmac_dev_ctx->fw_init_done) {
    fe2c:	b94b      	cbnz	r3, fe42 <umac_cmd_cfg+0x22>
		struct nrf_wifi_umac_hdr *umac_hdr = NULL;

		umac_hdr = (struct nrf_wifi_umac_hdr *)params;
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
    fe2e:	6800      	ldr	r0, [r0, #0]
    fe30:	688b      	ldr	r3, [r1, #8]
    fe32:	4a11      	ldr	r2, [pc, #68]	; (fe78 <umac_cmd_cfg+0x58>)
    fe34:	4911      	ldr	r1, [pc, #68]	; (fe7c <umac_cmd_cfg+0x5c>)
    fe36:	6800      	ldr	r0, [r0, #0]
    fe38:	f012 fe88 	bl	22b4c <wifi_nrf_osal_log_err>
					    umac_cmd,
					    (sizeof(*umac_cmd) + len));

out:
	return status;
}
    fe3c:	f04f 30ff 	mov.w	r0, #4294967295
    fe40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	umac_cmd = umac_cmd_alloc(fmac_dev_ctx,
    fe42:	2103      	movs	r1, #3
    fe44:	f7ff ffd0 	bl	fde8 <umac_cmd_alloc>
	if (!umac_cmd) {
    fe48:	4605      	mov	r5, r0
    fe4a:	6820      	ldr	r0, [r4, #0]
    fe4c:	b92d      	cbnz	r5, fe5a <umac_cmd_cfg+0x3a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
    fe4e:	4a0a      	ldr	r2, [pc, #40]	; (fe78 <umac_cmd_cfg+0x58>)
    fe50:	490b      	ldr	r1, [pc, #44]	; (fe80 <umac_cmd_cfg+0x60>)
    fe52:	6800      	ldr	r0, [r0, #0]
    fe54:	f012 fe7a 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
    fe58:	e7f0      	b.n	fe3c <umac_cmd_cfg+0x1c>
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
    fe5a:	463a      	mov	r2, r7
    fe5c:	f105 010c 	add.w	r1, r5, #12
    fe60:	4633      	mov	r3, r6
    fe62:	6800      	ldr	r0, [r0, #0]
    fe64:	f012 fe21 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	status = wifi_nrf_hal_ctrl_cmd_send(fmac_dev_ctx->hal_dev_ctx,
    fe68:	4629      	mov	r1, r5
    fe6a:	68a0      	ldr	r0, [r4, #8]
    fe6c:	f106 020c 	add.w	r2, r6, #12
}
    fe70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	status = wifi_nrf_hal_ctrl_cmd_send(fmac_dev_ctx->hal_dev_ctx,
    fe74:	f7fe bc04 	b.w	e680 <wifi_nrf_hal_ctrl_cmd_send>
    fe78:	00034e2d 	.word	0x00034e2d
    fe7c:	00034dc5 	.word	0x00034dc5
    fe80:	00034dec 	.word	0x00034dec

0000fe84 <umac_cmd_init>:
				   int sleep_type,
#endif /* CONFIG_NRF_WIFI_LOW_POWER */
				   unsigned int phy_calib,
				   enum op_band op_band,
				   struct nrf_wifi_tx_pwr_ctrl_params *tx_pwr_ctrl_params)
{
    fe84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe88:	461f      	mov	r7, r3
    fe8a:	e9dd 8b0c 	ldrd	r8, fp, [sp, #48]	; 0x30
    fe8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fe90:	4689      	mov	r9, r1
    fe92:	4616      	mov	r6, r2
	struct nrf_wifi_cmd_sys_init *umac_cmd_data = NULL;
	unsigned int len = 0;

	len = sizeof(*umac_cmd_data);

	umac_cmd = umac_cmd_alloc(fmac_dev_ctx,
    fe94:	2100      	movs	r1, #0
    fe96:	f240 1245 	movw	r2, #325	; 0x145
{
    fe9a:	4605      	mov	r5, r0
    fe9c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    fea0:	9301      	str	r3, [sp, #4]
	umac_cmd = umac_cmd_alloc(fmac_dev_ctx,
    fea2:	f7ff ffa1 	bl	fde8 <umac_cmd_alloc>
				  NRF_WIFI_HOST_RPU_MSG_TYPE_SYSTEM,
				  len);

	if (!umac_cmd) {
    fea6:	4604      	mov	r4, r0
    fea8:	2800      	cmp	r0, #0
    feaa:	f000 80c5 	beq.w	10038 <umac_cmd_init+0x1b4>
	}

	umac_cmd_data = (struct nrf_wifi_cmd_sys_init *)(umac_cmd->msg);

	umac_cmd_data->sys_head.cmd_event = NRF_WIFI_CMD_INIT;
	umac_cmd_data->sys_head.len = len;
    feae:	2245      	movs	r2, #69	; 0x45
	umac_cmd_data->sys_head.cmd_event = NRF_WIFI_CMD_INIT;
    feb0:	2300      	movs	r3, #0
	umac_cmd_data->sys_head.len = len;
    feb2:	7402      	strb	r2, [r0, #16]
    feb4:	2201      	movs	r2, #1
	umac_cmd_data->sys_head.cmd_event = NRF_WIFI_CMD_INIT;
    feb6:	7303      	strb	r3, [r0, #12]
    feb8:	7343      	strb	r3, [r0, #13]
    feba:	7383      	strb	r3, [r0, #14]
    febc:	73c3      	strb	r3, [r0, #15]
	umac_cmd_data->sys_head.len = len;
    febe:	7442      	strb	r2, [r0, #17]
    fec0:	7483      	strb	r3, [r0, #18]
    fec2:	74c3      	strb	r3, [r0, #19]

#ifndef CONFIG_NRF700X_RADIO_TEST
	umac_cmd_data->sys_params.rf_params_valid = rf_params_valid;
    fec4:	f880 60fe 	strb.w	r6, [r0, #254]	; 0xfe

	if (rf_params_valid) {
    fec8:	b13e      	cbz	r6, feda <umac_cmd_init+0x56>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
    feca:	6828      	ldr	r0, [r5, #0]
    fecc:	23c8      	movs	r3, #200	; 0xc8
    fece:	464a      	mov	r2, r9
    fed0:	6800      	ldr	r0, [r0, #0]
    fed2:	f104 0136 	add.w	r1, r4, #54	; 0x36
    fed6:	f012 fde8 	bl	22aaa <wifi_nrf_osal_mem_cpy>
				      NRF_WIFI_RF_PARAMS_SIZE);
	}
#endif /* !CONFIG_NRF700X_RADIO_TEST */

	umac_cmd_data->sys_params.phy_calib = phy_calib;
	umac_cmd_data->sys_params.hw_bringup_time = HW_DELAY;
    feda:	f06f 027b 	mvn.w	r2, #123	; 0x7b
    fede:	7722      	strb	r2, [r4, #28]
    fee0:	221c      	movs	r2, #28
    fee2:	7762      	strb	r2, [r4, #29]
	umac_cmd_data->sys_params.sw_bringup_time = SW_DELAY;
    fee4:	f06f 0277 	mvn.w	r2, #119	; 0x77
    fee8:	f884 2020 	strb.w	r2, [r4, #32]
    feec:	2213      	movs	r2, #19
    feee:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	umac_cmd_data->sys_params.bcn_time_out = BCN_TIMEOUT;
    fef2:	2240      	movs	r2, #64	; 0x40
    fef4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    fef8:	f06f 0263 	mvn.w	r2, #99	; 0x63
	umac_cmd_data->sys_params.hw_bringup_time = HW_DELAY;
    fefc:	2300      	movs	r3, #0
	umac_cmd_data->sys_params.bcn_time_out = BCN_TIMEOUT;
    fefe:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	umac_cmd_data->sys_params.calib_sleep_clk = CALIB_SLEEP_CLOCK_ENABLE;
    ff02:	2201      	movs	r2, #1
	umac_cmd_data->sys_params.phy_calib = phy_calib;
    ff04:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	umac_cmd_data->sys_params.hw_bringup_time = HW_DELAY;
    ff08:	77a3      	strb	r3, [r4, #30]
    ff0a:	77e3      	strb	r3, [r4, #31]
	umac_cmd_data->sys_params.sw_bringup_time = SW_DELAY;
    ff0c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    ff10:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	umac_cmd_data->sys_params.bcn_time_out = BCN_TIMEOUT;
    ff14:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    ff18:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	umac_cmd_data->sys_params.calib_sleep_clk = CALIB_SLEEP_CLOCK_ENABLE;
    ff1c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    ff20:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    ff24:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    ff28:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
#ifdef CONFIG_NRF_WIFI_LOW_POWER
	umac_cmd_data->sys_params.sleep_enable = sleep_type;
    ff2c:	f8c4 8018 	str.w	r8, [r4, #24]
#endif /* CONFIG_NRF_WIFI_LOW_POWER */
#ifdef CONFIG_NRF700X_TCP_IP_CHECKSUM_OFFLOAD
	umac_cmd_data->sys_params.tcp_ip_checksum_offload = 1;
#endif /* CONFIG_NRF700X_TCP_IP_CHECKSUM_OFFLOAD */

	wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv, "RPU LPM type: %s\n",
    ff30:	682b      	ldr	r3, [r5, #0]
    ff32:	f1b8 0f02 	cmp.w	r8, #2
    ff36:	6818      	ldr	r0, [r3, #0]
    ff38:	d07c      	beq.n	10034 <umac_cmd_init+0x1b0>
		umac_cmd_data->sys_params.sleep_enable == 2 ? "HW" :
		umac_cmd_data->sys_params.sleep_enable == 1 ? "SW" : "DISABLED");
    ff3a:	4a45      	ldr	r2, [pc, #276]	; (10050 <umac_cmd_init+0x1cc>)
    ff3c:	4b45      	ldr	r3, [pc, #276]	; (10054 <umac_cmd_init+0x1d0>)
    ff3e:	f1b8 0f01 	cmp.w	r8, #1
    ff42:	bf08      	it	eq
    ff44:	461a      	moveq	r2, r3
	wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv, "RPU LPM type: %s\n",
    ff46:	4944      	ldr	r1, [pc, #272]	; (10058 <umac_cmd_init+0x1d4>)
    ff48:	f012 fde2 	bl	22b10 <wifi_nrf_osal_log_dbg>
#ifndef CONFIG_NRF700X_RADIO_TEST
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
    ff4c:	6828      	ldr	r0, [r5, #0]
    ff4e:	f104 01ff 	add.w	r1, r4, #255	; 0xff
    ff52:	f100 0216 	add.w	r2, r0, #22
    ff56:	230c      	movs	r3, #12
    ff58:	6800      	ldr	r0, [r0, #0]
    ff5a:	f012 fda6 	bl	22aaa <wifi_nrf_osal_mem_cpy>
			      umac_cmd_data->rx_buf_pools,
			      fmac_dev_ctx->fpriv->rx_buf_pools,
			      sizeof(umac_cmd_data->rx_buf_pools));

	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
    ff5e:	6828      	ldr	r0, [r5, #0]
    ff60:	463a      	mov	r2, r7
    ff62:	f204 110b 	addw	r1, r4, #267	; 0x10b
    ff66:	230b      	movs	r3, #11
    ff68:	6800      	ldr	r0, [r0, #0]
    ff6a:	f012 fd9e 	bl	22aaa <wifi_nrf_osal_mem_cpy>
			      &umac_cmd_data->data_config_params,
			      config,
			      sizeof(umac_cmd_data->data_config_params));

	umac_cmd_data->temp_vbat_config_params.temp_based_calib_en = NRF_WIFI_TEMP_CALIB_ENABLE;
    ff6e:	2301      	movs	r3, #1
	umac_cmd_data->temp_vbat_config_params.temp_calib_bitmap = NRF_WIFI_DEF_PHY_TEMP_CALIB;
	umac_cmd_data->temp_vbat_config_params.vbat_calibp_bitmap = NRF_WIFI_DEF_PHY_VBAT_CALIB;
	umac_cmd_data->temp_vbat_config_params.temp_vbat_mon_period = NRF_WIFI_TEMP_CALIB_PERIOD;
	umac_cmd_data->temp_vbat_config_params.vth_low = NRF_WIFI_VBAT_LOW;
    ff70:	2106      	movs	r1, #6
	umac_cmd_data->temp_vbat_config_params.temp_based_calib_en = NRF_WIFI_TEMP_CALIB_ENABLE;
    ff72:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	umac_cmd_data->temp_vbat_config_params.vth_low = NRF_WIFI_VBAT_LOW;
    ff76:	f884 112a 	strb.w	r1, [r4, #298]	; 0x12a
	umac_cmd_data->temp_vbat_config_params.temp_calib_bitmap = NRF_WIFI_DEF_PHY_TEMP_CALIB;
    ff7a:	233b      	movs	r3, #59	; 0x3b
	umac_cmd_data->temp_vbat_config_params.vth_hi = NRF_WIFI_VBAT_HIGH;
    ff7c:	210c      	movs	r1, #12
	umac_cmd_data->temp_vbat_config_params.temp_calib_bitmap = NRF_WIFI_DEF_PHY_TEMP_CALIB;
    ff7e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	umac_cmd_data->temp_vbat_config_params.vth_hi = NRF_WIFI_VBAT_HIGH;
    ff82:	f884 112e 	strb.w	r1, [r4, #302]	; 0x12e
	umac_cmd_data->temp_vbat_config_params.vbat_calibp_bitmap = NRF_WIFI_DEF_PHY_VBAT_CALIB;
    ff86:	2320      	movs	r3, #32
	umac_cmd_data->temp_vbat_config_params.temp_threshold = NRF_WIFI_TEMP_CALIB_THRESHOLD;
    ff88:	2128      	movs	r1, #40	; 0x28
	umac_cmd_data->temp_vbat_config_params.temp_based_calib_en = NRF_WIFI_TEMP_CALIB_ENABLE;
    ff8a:	2200      	movs	r2, #0
	umac_cmd_data->temp_vbat_config_params.vbat_calibp_bitmap = NRF_WIFI_DEF_PHY_VBAT_CALIB;
    ff8c:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	umac_cmd_data->temp_vbat_config_params.temp_threshold = NRF_WIFI_TEMP_CALIB_THRESHOLD;
    ff90:	f884 1132 	strb.w	r1, [r4, #306]	; 0x132
	umac_cmd_data->temp_vbat_config_params.temp_vbat_mon_period = NRF_WIFI_TEMP_CALIB_PERIOD;
    ff94:	2310      	movs	r3, #16
	umac_cmd_data->temp_vbat_config_params.vth_very_low = NRF_WIFI_VBAT_VERYLOW;
    ff96:	2103      	movs	r1, #3
	umac_cmd_data->temp_vbat_config_params.temp_vbat_mon_period = NRF_WIFI_TEMP_CALIB_PERIOD;
    ff98:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	umac_cmd_data->temp_vbat_config_params.temp_based_calib_en = NRF_WIFI_TEMP_CALIB_ENABLE;
    ff9c:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
    ffa0:	f884 2118 	strb.w	r2, [r4, #280]	; 0x118
    ffa4:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
	umac_cmd_data->temp_vbat_config_params.temp_calib_bitmap = NRF_WIFI_DEF_PHY_TEMP_CALIB;
    ffa8:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    ffac:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
    ffb0:	f884 211d 	strb.w	r2, [r4, #285]	; 0x11d
	umac_cmd_data->temp_vbat_config_params.vbat_calibp_bitmap = NRF_WIFI_DEF_PHY_VBAT_CALIB;
    ffb4:	f884 211f 	strb.w	r2, [r4, #287]	; 0x11f
    ffb8:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
    ffbc:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
	umac_cmd_data->temp_vbat_config_params.temp_vbat_mon_period = NRF_WIFI_TEMP_CALIB_PERIOD;
    ffc0:	f884 2122 	strb.w	r2, [r4, #290]	; 0x122
    ffc4:	f884 2123 	strb.w	r2, [r4, #291]	; 0x123
    ffc8:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
	umac_cmd_data->temp_vbat_config_params.vth_low = NRF_WIFI_VBAT_LOW;
    ffcc:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    ffd0:	f884 212c 	strb.w	r2, [r4, #300]	; 0x12c
    ffd4:	f884 212d 	strb.w	r2, [r4, #301]	; 0x12d
	umac_cmd_data->temp_vbat_config_params.vth_hi = NRF_WIFI_VBAT_HIGH;
    ffd8:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
    ffdc:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
    ffe0:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
	umac_cmd_data->temp_vbat_config_params.temp_threshold = NRF_WIFI_TEMP_CALIB_THRESHOLD;
    ffe4:	f884 2133 	strb.w	r2, [r4, #307]	; 0x133
    ffe8:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
    ffec:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
	umac_cmd_data->temp_vbat_config_params.vth_very_low = NRF_WIFI_VBAT_VERYLOW;
    fff0:	f884 1126 	strb.w	r1, [r4, #294]	; 0x126
    fff4:	f884 2127 	strb.w	r2, [r4, #295]	; 0x127
    fff8:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    fffc:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
#endif /* !CONFIG_NRF700X_RADIO_TEST */

	umac_cmd_data->op_band = op_band;
   10000:	f8c4 a13d 	str.w	sl, [r4, #317]	; 0x13d

	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10004:	6828      	ldr	r0, [r5, #0]
   10006:	9a01      	ldr	r2, [sp, #4]
   10008:	f204 1141 	addw	r1, r4, #321	; 0x141
   1000c:	6800      	ldr	r0, [r0, #0]
   1000e:	f012 fd4c 	bl	22aaa <wifi_nrf_osal_mem_cpy>
			      &umac_cmd_data->tx_pwr_ctrl_params,
			      tx_pwr_ctrl_params,
			      sizeof(umac_cmd_data->tx_pwr_ctrl_params));

	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10012:	6828      	ldr	r0, [r5, #0]
   10014:	f204 113b 	addw	r1, r4, #315	; 0x13b
   10018:	2302      	movs	r3, #2
   1001a:	4a10      	ldr	r2, [pc, #64]	; (1005c <umac_cmd_init+0x1d8>)
   1001c:	6800      	ldr	r0, [r0, #0]
   1001e:	f012 fd44 	bl	22aaa <wifi_nrf_osal_mem_cpy>
					umac_cmd_data->country_code,
					CONFIG_NRF700X_REG_DOMAIN,
					NRF_WIFI_COUNTRY_CODE_LEN);

	status = wifi_nrf_hal_ctrl_cmd_send(fmac_dev_ctx->hal_dev_ctx,
   10022:	f240 1251 	movw	r2, #337	; 0x151
   10026:	4621      	mov	r1, r4
   10028:	68a8      	ldr	r0, [r5, #8]
					    umac_cmd,
					    (sizeof(*umac_cmd) + len));

out:
	return status;
}
   1002a:	b003      	add	sp, #12
   1002c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	status = wifi_nrf_hal_ctrl_cmd_send(fmac_dev_ctx->hal_dev_ctx,
   10030:	f7fe bb26 	b.w	e680 <wifi_nrf_hal_ctrl_cmd_send>
	wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv, "RPU LPM type: %s\n",
   10034:	4a0a      	ldr	r2, [pc, #40]	; (10060 <umac_cmd_init+0x1dc>)
   10036:	e786      	b.n	ff46 <umac_cmd_init+0xc2>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10038:	682b      	ldr	r3, [r5, #0]
   1003a:	4a0a      	ldr	r2, [pc, #40]	; (10064 <umac_cmd_init+0x1e0>)
   1003c:	490a      	ldr	r1, [pc, #40]	; (10068 <umac_cmd_init+0x1e4>)
   1003e:	6818      	ldr	r0, [r3, #0]
   10040:	f012 fd84 	bl	22b4c <wifi_nrf_osal_log_err>
}
   10044:	f04f 30ff 	mov.w	r0, #4294967295
   10048:	b003      	add	sp, #12
   1004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1004e:	bf00      	nop
   10050:	00032251 	.word	0x00032251
   10054:	00034e0a 	.word	0x00034e0a
   10058:	00034e0d 	.word	0x00034e0d
   1005c:	0003351f 	.word	0x0003351f
   10060:	00034e07 	.word	0x00034e07
   10064:	00034e1f 	.word	0x00034e1f
   10068:	00034dec 	.word	0x00034dec

0001006c <wifi_nrf_fmac_event_callback>:


enum wifi_nrf_status wifi_nrf_fmac_event_callback(void *mac_dev_ctx,
						  void *rpu_event_data,
						  unsigned int rpu_event_len)
{
   1006c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rpu_msg = (struct host_rpu_msg *)rpu_event_data;
	umac_hdr = (struct nrf_wifi_umac_hdr *)rpu_msg->msg;
	umac_msg_len = rpu_msg->hdr.len;
	umac_msg_type = umac_hdr->cmd_evnt;

	switch (rpu_msg->type) {
   10070:	688d      	ldr	r5, [r1, #8]
{
   10072:	4606      	mov	r6, r0
	switch (rpu_msg->type) {
   10074:	2d02      	cmp	r5, #2
{
   10076:	460c      	mov	r4, r1
	umac_msg_len = rpu_msg->hdr.len;
   10078:	680a      	ldr	r2, [r1, #0]
	switch (rpu_msg->type) {
   1007a:	d008      	beq.n	1008e <wifi_nrf_fmac_event_callback+0x22>
   1007c:	2d03      	cmp	r5, #3
   1007e:	d02d      	beq.n	100dc <wifi_nrf_fmac_event_callback+0x70>
   10080:	2d00      	cmp	r5, #0
   10082:	d07c      	beq.n	1017e <wifi_nrf_fmac_event_callback+0x112>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10084:	f04f 35ff 	mov.w	r5, #4294967295
		goto out;
	}

out:
	return status;
}
   10088:	4628      	mov	r0, r5
   1008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fmac_dev_ctx || !rpu_msg) {
   1008e:	2800      	cmp	r0, #0
   10090:	d0f8      	beq.n	10084 <wifi_nrf_fmac_event_callback+0x18>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10092:	f04f 35ff 	mov.w	r5, #4294967295
	umac_head = (unsigned char *)rpu_msg->msg;
   10096:	340c      	adds	r4, #12
	host_rpu_length_left = rpu_msg->hdr.len - sizeof(struct host_rpu_msg);
   10098:	f1a2 070c 	sub.w	r7, r2, #12
	while (host_rpu_length_left > 0) {
   1009c:	2f00      	cmp	r7, #0
   1009e:	ddf3      	ble.n	10088 <wifi_nrf_fmac_event_callback+0x1c>
	event = ((struct nrf_wifi_umac_head *)umac_head)->cmd;
   100a0:	f8d4 8000 	ldr.w	r8, [r4]
	switch (event) {
   100a4:	f1b8 0f03 	cmp.w	r8, #3
   100a8:	d113      	bne.n	100d2 <wifi_nrf_fmac_event_callback+0x66>
		status = wifi_nrf_fmac_rx_event_process(fmac_dev_ctx,
   100aa:	4621      	mov	r1, r4
   100ac:	4630      	mov	r0, r6
   100ae:	f001 fe99 	bl	11de4 <wifi_nrf_fmac_rx_event_process>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   100b2:	4605      	mov	r5, r0
   100b4:	b168      	cbz	r0, 100d2 <wifi_nrf_fmac_event_callback+0x66>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   100b6:	6830      	ldr	r0, [r6, #0]
   100b8:	4643      	mov	r3, r8
   100ba:	4a46      	ldr	r2, [pc, #280]	; (101d4 <wifi_nrf_fmac_event_callback+0x168>)
   100bc:	4946      	ldr	r1, [pc, #280]	; (101d8 <wifi_nrf_fmac_event_callback+0x16c>)
   100be:	6800      	ldr	r0, [r0, #0]
   100c0:	f012 fd44 	bl	22b4c <wifi_nrf_osal_log_err>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   100c4:	6833      	ldr	r3, [r6, #0]
   100c6:	4a45      	ldr	r2, [pc, #276]	; (101dc <wifi_nrf_fmac_event_callback+0x170>)
   100c8:	4945      	ldr	r1, [pc, #276]	; (101e0 <wifi_nrf_fmac_event_callback+0x174>)
   100ca:	6818      	ldr	r0, [r3, #0]
   100cc:	f012 fd3e 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
   100d0:	e7da      	b.n	10088 <wifi_nrf_fmac_event_callback+0x1c>
		host_rpu_length_left -= ((struct nrf_wifi_umac_head *)umac_head)->len;
   100d2:	6863      	ldr	r3, [r4, #4]
		status = wifi_nrf_fmac_data_event_process(fmac_dev_ctx,
   100d4:	2500      	movs	r5, #0
		host_rpu_length_left -= ((struct nrf_wifi_umac_head *)umac_head)->len;
   100d6:	1aff      	subs	r7, r7, r3
		umac_head += ((struct nrf_wifi_umac_head *)umac_head)->len;
   100d8:	441c      	add	r4, r3
   100da:	e7df      	b.n	1009c <wifi_nrf_fmac_event_callback+0x30>
	if_id = umac_hdr->ids.wdev_id;
   100dc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
	event_num = umac_hdr->cmd_evnt;
   100de:	694b      	ldr	r3, [r1, #20]
	if_id = umac_hdr->ids.wdev_id;
   100e0:	b2ed      	uxtb	r5, r5
	if (if_id >= MAX_NUM_VIFS) {
   100e2:	2d01      	cmp	r5, #1
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   100e4:	6800      	ldr	r0, [r0, #0]
	if (if_id >= MAX_NUM_VIFS) {
   100e6:	d906      	bls.n	100f6 <wifi_nrf_fmac_event_callback+0x8a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   100e8:	462b      	mov	r3, r5
   100ea:	4a3e      	ldr	r2, [pc, #248]	; (101e4 <wifi_nrf_fmac_event_callback+0x178>)
   100ec:	493e      	ldr	r1, [pc, #248]	; (101e8 <wifi_nrf_fmac_event_callback+0x17c>)
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   100ee:	6800      	ldr	r0, [r0, #0]
   100f0:	f012 fd2c 	bl	22b4c <wifi_nrf_osal_log_err>
   100f4:	e02a      	b.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
	vif_ctx = fmac_dev_ctx->vif_ctx[if_id];
   100f6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	switch (umac_hdr->cmd_evnt) {
   100fa:	f240 1613 	movw	r6, #275	; 0x113
   100fe:	42b3      	cmp	r3, r6
	vif_ctx = fmac_dev_ctx->vif_ctx[if_id];
   10100:	68ed      	ldr	r5, [r5, #12]
						 rpu_msg->msg,
   10102:	f101 010c 	add.w	r1, r1, #12
	switch (umac_hdr->cmd_evnt) {
   10106:	d031      	beq.n	1016c <wifi_nrf_fmac_event_callback+0x100>
   10108:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
   1010c:	d210      	bcs.n	10130 <wifi_nrf_fmac_event_callback+0xc4>
   1010e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   10112:	d01f      	beq.n	10154 <wifi_nrf_fmac_event_callback+0xe8>
   10114:	f240 1403 	movw	r4, #259	; 0x103
   10118:	42a3      	cmp	r3, r4
   1011a:	d019      	beq.n	10150 <wifi_nrf_fmac_event_callback+0xe4>
   1011c:	f240 1401 	movw	r4, #257	; 0x101
   10120:	42a3      	cmp	r3, r4
   10122:	d00f      	beq.n	10144 <wifi_nrf_fmac_event_callback+0xd8>
		wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv,
   10124:	4a2f      	ldr	r2, [pc, #188]	; (101e4 <wifi_nrf_fmac_event_callback+0x178>)
   10126:	4931      	ldr	r1, [pc, #196]	; (101ec <wifi_nrf_fmac_event_callback+0x180>)
   10128:	6800      	ldr	r0, [r0, #0]
   1012a:	f012 fcf1 	bl	22b10 <wifi_nrf_osal_log_dbg>
		break;
   1012e:	e00d      	b.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
	switch (umac_hdr->cmd_evnt) {
   10130:	f240 1623 	movw	r6, #291	; 0x123
   10134:	42b3      	cmp	r3, r6
   10136:	d00f      	beq.n	10158 <wifi_nrf_fmac_event_callback+0xec>
   10138:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
   1013c:	d1f2      	bne.n	10124 <wifi_nrf_fmac_event_callback+0xb8>
		if (callbk_fns->twt_sleep_callbk_fn)
   1013e:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
   10142:	e000      	b.n	10146 <wifi_nrf_fmac_event_callback+0xda>
		if (callbk_fns->scan_start_callbk_fn)
   10144:	6c44      	ldr	r4, [r0, #68]	; 0x44
   10146:	b1bc      	cbz	r4, 10178 <wifi_nrf_fmac_event_callback+0x10c>
			callbk_fns->scan_start_callbk_fn(vif_ctx->os_vif_ctx,
   10148:	6868      	ldr	r0, [r5, #4]
   1014a:	47a0      	blx	r4
		status = umac_event_ctrl_process(fmac_dev_ctx,
   1014c:	2500      	movs	r5, #0
   1014e:	e79b      	b.n	10088 <wifi_nrf_fmac_event_callback+0x1c>
		if (callbk_fns->scan_done_callbk_fn)
   10150:	6c84      	ldr	r4, [r0, #72]	; 0x48
   10152:	e7f8      	b.n	10146 <wifi_nrf_fmac_event_callback+0xda>
		if (callbk_fns->scan_abort_callbk_fn)
   10154:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
   10156:	e7f6      	b.n	10146 <wifi_nrf_fmac_event_callback+0xda>
		if (umac_hdr->seq != 0)
   10158:	6924      	ldr	r4, [r4, #16]
		if (callbk_fns->disp_scan_res_callbk_fn)
   1015a:	6d46      	ldr	r6, [r0, #84]	; 0x54
		if (umac_hdr->seq != 0)
   1015c:	3c00      	subs	r4, #0
   1015e:	bf18      	it	ne
   10160:	2401      	movne	r4, #1
		if (callbk_fns->disp_scan_res_callbk_fn)
   10162:	b14e      	cbz	r6, 10178 <wifi_nrf_fmac_event_callback+0x10c>
			callbk_fns->disp_scan_res_callbk_fn(vif_ctx->os_vif_ctx,
   10164:	4623      	mov	r3, r4
   10166:	6868      	ldr	r0, [r5, #4]
   10168:	47b0      	blx	r6
   1016a:	e7ef      	b.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
		if (evnt_vif_state->status < 0)
   1016c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1016e:	2b00      	cmp	r3, #0
   10170:	dbec      	blt.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
		vif_ctx->ifflags = true;
   10172:	2301      	movs	r3, #1
   10174:	752b      	strb	r3, [r5, #20]
		break;
   10176:	e7e9      	b.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10178:	4a1a      	ldr	r2, [pc, #104]	; (101e4 <wifi_nrf_fmac_event_callback+0x178>)
   1017a:	491c      	ldr	r1, [pc, #112]	; (101ec <wifi_nrf_fmac_event_callback+0x180>)
   1017c:	e7b7      	b.n	100ee <wifi_nrf_fmac_event_callback+0x82>
	switch (((struct nrf_wifi_sys_head *)sys_head)->cmd_event) {
   1017e:	68cb      	ldr	r3, [r1, #12]
   10180:	2b02      	cmp	r3, #2
   10182:	d006      	beq.n	10192 <wifi_nrf_fmac_event_callback+0x126>
   10184:	2b03      	cmp	r3, #3
   10186:	d019      	beq.n	101bc <wifi_nrf_fmac_event_callback+0x150>
   10188:	2b01      	cmp	r3, #1
   1018a:	d11b      	bne.n	101c4 <wifi_nrf_fmac_event_callback+0x158>
		fmac_dev_ctx->fw_init_done = 1;
   1018c:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   10190:	e7dc      	b.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10192:	6803      	ldr	r3, [r0, #0]
   10194:	6818      	ldr	r0, [r3, #0]
	if (!fmac_dev_ctx->stats_req) {
   10196:	f896 3198 	ldrb.w	r3, [r6, #408]	; 0x198
   1019a:	b923      	cbnz	r3, 101a6 <wifi_nrf_fmac_event_callback+0x13a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1019c:	4a14      	ldr	r2, [pc, #80]	; (101f0 <wifi_nrf_fmac_event_callback+0x184>)
   1019e:	4915      	ldr	r1, [pc, #84]	; (101f4 <wifi_nrf_fmac_event_callback+0x188>)
   101a0:	f012 fcd4 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
   101a4:	e76e      	b.n	10084 <wifi_nrf_fmac_event_callback+0x18>
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   101a6:	f101 0214 	add.w	r2, r1, #20
   101aa:	f240 237b 	movw	r3, #635	; 0x27b
   101ae:	f8d6 1194 	ldr.w	r1, [r6, #404]	; 0x194
   101b2:	f012 fc7a 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	fmac_dev_ctx->stats_req = false;
   101b6:	f886 5198 	strb.w	r5, [r6, #408]	; 0x198
	status = WIFI_NRF_STATUS_SUCCESS;
   101ba:	e7c7      	b.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
		fmac_dev_ctx->fw_deinit_done = 1;
   101bc:	2301      	movs	r3, #1
   101be:	f880 319b 	strb.w	r3, [r0, #411]	; 0x19b
		break;
   101c2:	e7c3      	b.n	1014c <wifi_nrf_fmac_event_callback+0xe0>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   101c4:	6800      	ldr	r0, [r0, #0]
   101c6:	4a0c      	ldr	r2, [pc, #48]	; (101f8 <wifi_nrf_fmac_event_callback+0x18c>)
   101c8:	490c      	ldr	r1, [pc, #48]	; (101fc <wifi_nrf_fmac_event_callback+0x190>)
   101ca:	6800      	ldr	r0, [r0, #0]
   101cc:	f012 fcbe 	bl	22b4c <wifi_nrf_osal_log_err>
		break;
   101d0:	e758      	b.n	10084 <wifi_nrf_fmac_event_callback+0x18>
   101d2:	bf00      	nop
   101d4:	00034f64 	.word	0x00034f64
   101d8:	00034e49 	.word	0x00034e49
   101dc:	00034f85 	.word	0x00034f85
   101e0:	00034e64 	.word	0x00034e64
   101e4:	00034f4c 	.word	0x00034f4c
   101e8:	00034e88 	.word	0x00034e88
   101ec:	00034eaf 	.word	0x00034eaf
   101f0:	00034f1b 	.word	0x00034f1b
   101f4:	00034ed8 	.word	0x00034ed8
   101f8:	00034f34 	.word	0x00034f34
   101fc:	00034eff 	.word	0x00034eff

00010200 <wifi_nrf_fmac_deinit_rx.isra.0>:
out:
	return status;
}


static enum wifi_nrf_status wifi_nrf_fmac_deinit_rx(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx)
   10200:	b570      	push	{r4, r5, r6, lr}
   10202:	4604      	mov	r4, r0
				     fmac_dev_ctx->rx_tasklet);
	wifi_nrf_utils_q_free(fpriv->opriv,
			      fmac_dev_ctx->rx_tasklet_event_q);
#endif /* CONFIG_NRF700X_RX_WQ_ENABLED */

	for (desc_id = 0; desc_id < fpriv->num_rx_bufs; desc_id++) {
   10204:	2500      	movs	r5, #0
	fpriv = fmac_dev_ctx->fpriv;
   10206:	6806      	ldr	r6, [r0, #0]
	for (desc_id = 0; desc_id < fpriv->num_rx_bufs; desc_id++) {
   10208:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1020a:	429d      	cmp	r5, r3
   1020c:	d307      	bcc.n	1021e <wifi_nrf_fmac_deinit_rx.isra.0+0x1e>
					      desc_id);
			goto out;
		}
	}

	wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   1020e:	6823      	ldr	r3, [r4, #0]
   10210:	69a1      	ldr	r1, [r4, #24]
   10212:	6818      	ldr	r0, [r3, #0]
   10214:	f012 fc45 	bl	22aa2 <wifi_nrf_osal_mem_free>
			       fmac_dev_ctx->rx_buf_info);

	fmac_dev_ctx->rx_buf_info = NULL;
   10218:	2300      	movs	r3, #0
   1021a:	61a3      	str	r3, [r4, #24]
out:
	return status;
}
   1021c:	bd70      	pop	{r4, r5, r6, pc}
		status = wifi_nrf_fmac_rx_cmd_send(fmac_dev_ctx,
   1021e:	462a      	mov	r2, r5
   10220:	2101      	movs	r1, #1
   10222:	4620      	mov	r0, r4
   10224:	f001 fd40 	bl	11ca8 <wifi_nrf_fmac_rx_cmd_send>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10228:	b140      	cbz	r0, 1023c <wifi_nrf_fmac_deinit_rx.isra.0+0x3c>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1022a:	6820      	ldr	r0, [r4, #0]
   1022c:	462b      	mov	r3, r5
}
   1022e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10232:	4a03      	ldr	r2, [pc, #12]	; (10240 <wifi_nrf_fmac_deinit_rx.isra.0+0x40>)
   10234:	4903      	ldr	r1, [pc, #12]	; (10244 <wifi_nrf_fmac_deinit_rx.isra.0+0x44>)
   10236:	6800      	ldr	r0, [r0, #0]
   10238:	f012 bc88 	b.w	22b4c <wifi_nrf_osal_log_err>
	for (desc_id = 0; desc_id < fpriv->num_rx_bufs; desc_id++) {
   1023c:	3501      	adds	r5, #1
   1023e:	e7e3      	b.n	10208 <wifi_nrf_fmac_deinit_rx.isra.0+0x8>
   10240:	00035916 	.word	0x00035916
   10244:	00034fa7 	.word	0x00034fa7

00010248 <wifi_nrf_fmac_dev_add>:
}


struct wifi_nrf_fmac_dev_ctx *wifi_nrf_fmac_dev_add(struct wifi_nrf_fmac_priv *fpriv,
						    void *os_dev_ctx)
{
   10248:	b570      	push	{r4, r5, r6, lr}
   1024a:	460e      	mov	r6, r1
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	if (!fpriv || !os_dev_ctx) {
   1024c:	4604      	mov	r4, r0
   1024e:	b160      	cbz	r0, 1026a <wifi_nrf_fmac_dev_add+0x22>
   10250:	b159      	cbz	r1, 1026a <wifi_nrf_fmac_dev_add+0x22>
		return NULL;
	}

	fmac_dev_ctx = wifi_nrf_osal_mem_zalloc(fpriv->opriv,
   10252:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   10256:	6800      	ldr	r0, [r0, #0]
   10258:	f012 fc1f 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
						sizeof(*fmac_dev_ctx));

	if (!fmac_dev_ctx) {
   1025c:	4605      	mov	r5, r0
   1025e:	b938      	cbnz	r0, 10270 <wifi_nrf_fmac_dev_add+0x28>
		wifi_nrf_osal_log_err(fpriv->opriv,
   10260:	4a0e      	ldr	r2, [pc, #56]	; (1029c <wifi_nrf_fmac_dev_add+0x54>)
   10262:	490f      	ldr	r1, [pc, #60]	; (102a0 <wifi_nrf_fmac_dev_add+0x58>)
   10264:	6820      	ldr	r0, [r4, #0]
   10266:	f012 fc71 	bl	22b4c <wifi_nrf_osal_log_err>
		return NULL;
   1026a:	2500      	movs	r5, #0
#ifndef CONFIG_NRF700X_RADIO_TEST
	fpriv->hpriv->cfg_params.max_ampdu_len_per_token = fpriv->max_ampdu_len_per_token;
#endif /* !CONFIG_NRF700X_RADIO_TEST */
out:
	return fmac_dev_ctx;
}
   1026c:	4628      	mov	r0, r5
   1026e:	bd70      	pop	{r4, r5, r6, pc}
	fmac_dev_ctx->os_dev_ctx = os_dev_ctx;
   10270:	e9c0 4600 	strd	r4, r6, [r0]
	fmac_dev_ctx->hal_dev_ctx = wifi_nrf_hal_dev_add(fpriv->hpriv,
   10274:	4601      	mov	r1, r0
   10276:	6860      	ldr	r0, [r4, #4]
   10278:	f7fe fbcc 	bl	ea14 <wifi_nrf_hal_dev_add>
   1027c:	60a8      	str	r0, [r5, #8]
	if (!fmac_dev_ctx->hal_dev_ctx) {
   1027e:	b948      	cbnz	r0, 10294 <wifi_nrf_fmac_dev_add+0x4c>
		wifi_nrf_osal_log_err(fpriv->opriv,
   10280:	4a06      	ldr	r2, [pc, #24]	; (1029c <wifi_nrf_fmac_dev_add+0x54>)
   10282:	4908      	ldr	r1, [pc, #32]	; (102a4 <wifi_nrf_fmac_dev_add+0x5c>)
   10284:	6820      	ldr	r0, [r4, #0]
   10286:	f012 fc61 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(fpriv->opriv,
   1028a:	4629      	mov	r1, r5
   1028c:	6820      	ldr	r0, [r4, #0]
   1028e:	f012 fc08 	bl	22aa2 <wifi_nrf_osal_mem_free>
		goto out;
   10292:	e7ea      	b.n	1026a <wifi_nrf_fmac_dev_add+0x22>
	fpriv->hpriv->cfg_params.max_ampdu_len_per_token = fpriv->max_ampdu_len_per_token;
   10294:	6863      	ldr	r3, [r4, #4]
   10296:	6b62      	ldr	r2, [r4, #52]	; 0x34
   10298:	645a      	str	r2, [r3, #68]	; 0x44
   1029a:	e7e7      	b.n	1026c <wifi_nrf_fmac_dev_add+0x24>
   1029c:	00035971 	.word	0x00035971
   102a0:	00034fe6 	.word	0x00034fe6
   102a4:	0003500b 	.word	0x0003500b

000102a8 <wifi_nrf_fmac_init>:
#else
struct wifi_nrf_fmac_priv *wifi_nrf_fmac_init(struct nrf_wifi_data_config_params *data_config,
					      struct rx_buf_pool_params *rx_buf_pools,
					      struct wifi_nrf_fmac_callbk_fns *callbk_fns)
#endif /* !CONFIG_NRF700X_RADIO_TEST */
{
   102a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   102ac:	b08b      	sub	sp, #44	; 0x2c
   102ae:	4607      	mov	r7, r0
   102b0:	460e      	mov	r6, r1
   102b2:	4691      	mov	r9, r2
#ifndef CONFIG_NRF700X_RADIO_TEST
	unsigned int pool_idx = 0;
	unsigned int desc = 0;
#endif /* !CONFIG_NRF700X_RADIO_TEST */

	opriv = wifi_nrf_osal_init();
   102b4:	f012 fbe0 	bl	22a78 <wifi_nrf_osal_init>

	if (!opriv) {
   102b8:	4605      	mov	r5, r0
   102ba:	b148      	cbz	r0, 102d0 <wifi_nrf_fmac_init+0x28>
		goto out;
	}

	fpriv = wifi_nrf_osal_mem_zalloc(opriv,
   102bc:	21b8      	movs	r1, #184	; 0xb8
   102be:	f012 fbec 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					 sizeof(*fpriv));

	if (!fpriv) {
   102c2:	4604      	mov	r4, r0
   102c4:	b948      	cbnz	r0, 102da <wifi_nrf_fmac_init+0x32>
		wifi_nrf_osal_log_err(opriv,
   102c6:	4628      	mov	r0, r5
   102c8:	4a34      	ldr	r2, [pc, #208]	; (1039c <wifi_nrf_fmac_init+0xf4>)
   102ca:	4935      	ldr	r1, [pc, #212]	; (103a0 <wifi_nrf_fmac_init+0xf8>)
   102cc:	f012 fc3e 	bl	22b4c <wifi_nrf_osal_log_err>
	struct wifi_nrf_fmac_priv *fpriv = NULL;
   102d0:	2400      	movs	r4, #0
		opriv = NULL;
		goto out;
	}
out:
	return fpriv;
}
   102d2:	4620      	mov	r0, r4
   102d4:	b00b      	add	sp, #44	; 0x2c
   102d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fpriv->opriv = opriv;
   102da:	4680      	mov	r8, r0
	wifi_nrf_osal_mem_set(opriv,
   102dc:	2324      	movs	r3, #36	; 0x24
   102de:	2200      	movs	r2, #0
	fpriv->opriv = opriv;
   102e0:	f848 5b3c 	str.w	r5, [r8], #60
	wifi_nrf_osal_mem_set(opriv,
   102e4:	a901      	add	r1, sp, #4
   102e6:	4628      	mov	r0, r5
   102e8:	f012 fbe9 	bl	22abe <wifi_nrf_osal_mem_set>
	wifi_nrf_osal_mem_cpy(opriv,
   102ec:	237c      	movs	r3, #124	; 0x7c
   102ee:	464a      	mov	r2, r9
   102f0:	4641      	mov	r1, r8
   102f2:	4628      	mov	r0, r5
   102f4:	f012 fbd9 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	wifi_nrf_osal_mem_cpy(opriv,
   102f8:	230b      	movs	r3, #11
   102fa:	463a      	mov	r2, r7
   102fc:	f104 0108 	add.w	r1, r4, #8
   10300:	4628      	mov	r0, r5
   10302:	f012 fbd2 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	fpriv->num_tx_tokens = CONFIG_NRF700X_MAX_TX_TOKENS;
   10306:	230a      	movs	r3, #10
   10308:	74e3      	strb	r3, [r4, #19]
	fpriv->num_tx_tokens_per_ac = (fpriv->num_tx_tokens / WIFI_NRF_FMAC_AC_MAX);
   1030a:	2302      	movs	r3, #2
	wifi_nrf_osal_mem_cpy(opriv,
   1030c:	4632      	mov	r2, r6
	fpriv->num_tx_tokens_per_ac = (fpriv->num_tx_tokens / WIFI_NRF_FMAC_AC_MAX);
   1030e:	82a3      	strh	r3, [r4, #20]
	wifi_nrf_osal_mem_cpy(opriv,
   10310:	4628      	mov	r0, r5
   10312:	230c      	movs	r3, #12
   10314:	f104 0116 	add.w	r1, r4, #22
   10318:	f012 fbc7 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		fpriv->rx_desc[pool_idx] = desc;
   1031c:	2300      	movs	r3, #0
		desc += fpriv->rx_buf_pools[pool_idx].num_bufs;
   1031e:	8b22      	ldrh	r2, [r4, #24]
		fpriv->rx_desc[pool_idx] = desc;
   10320:	6263      	str	r3, [r4, #36]	; 0x24
		desc += fpriv->rx_buf_pools[pool_idx].num_bufs;
   10322:	8ba3      	ldrh	r3, [r4, #28]
		fpriv->rx_desc[pool_idx] = desc;
   10324:	62a2      	str	r2, [r4, #40]	; 0x28
		desc += fpriv->rx_buf_pools[pool_idx].num_bufs;
   10326:	4413      	add	r3, r2
   10328:	8c22      	ldrh	r2, [r4, #32]
		fpriv->rx_desc[pool_idx] = desc;
   1032a:	62e3      	str	r3, [r4, #44]	; 0x2c
		desc += fpriv->rx_buf_pools[pool_idx].num_bufs;
   1032c:	4413      	add	r3, r2
	fpriv->num_rx_bufs = desc;
   1032e:	6323      	str	r3, [r4, #48]	; 0x30
	hal_cfg_params.rx_buf_headroom_sz = RX_BUF_HEADROOM;
   10330:	f243 4304 	movw	r3, #13316	; 0x3404
	hal_cfg_params.max_tx_frms = (fpriv->num_tx_tokens *
   10334:	7b62      	ldrb	r2, [r4, #13]
	hal_cfg_params.rx_buf_headroom_sz = RX_BUF_HEADROOM;
   10336:	f8ad 300c 	strh.w	r3, [sp, #12]
	hal_cfg_params.max_tx_frms = (fpriv->num_tx_tokens *
   1033a:	7ce3      	ldrb	r3, [r4, #19]
   1033c:	f104 000c 	add.w	r0, r4, #12
   10340:	fb13 f302 	smulbb	r3, r3, r2
   10344:	9304      	str	r3, [sp, #16]
	for (pool_idx = 0; pool_idx < MAX_NUM_OF_RX_QUEUES; pool_idx++) {
   10346:	4623      	mov	r3, r4
   10348:	aa01      	add	r2, sp, #4
			fpriv->rx_buf_pools[pool_idx].num_bufs;
   1034a:	8b19      	ldrh	r1, [r3, #24]
	for (pool_idx = 0; pool_idx < MAX_NUM_OF_RX_QUEUES; pool_idx++) {
   1034c:	3304      	adds	r3, #4
		hal_cfg_params.rx_buf_pool[pool_idx].num_bufs =
   1034e:	8251      	strh	r1, [r2, #18]
			fpriv->rx_buf_pools[pool_idx].buf_sz + RX_BUF_HEADROOM;
   10350:	8a59      	ldrh	r1, [r3, #18]
	for (pool_idx = 0; pool_idx < MAX_NUM_OF_RX_QUEUES; pool_idx++) {
   10352:	4298      	cmp	r0, r3
			fpriv->rx_buf_pools[pool_idx].buf_sz + RX_BUF_HEADROOM;
   10354:	f101 0104 	add.w	r1, r1, #4
		hal_cfg_params.rx_buf_pool[pool_idx].buf_sz =
   10358:	8211      	strh	r1, [r2, #16]
	for (pool_idx = 0; pool_idx < MAX_NUM_OF_RX_QUEUES; pool_idx++) {
   1035a:	f102 0204 	add.w	r2, r2, #4
   1035e:	d1f4      	bne.n	1034a <wifi_nrf_fmac_init+0xa2>
	hal_cfg_params.max_tx_frm_sz = CONFIG_NRF700X_TX_MAX_DATA_SIZE + TX_BUF_HEADROOM;
   10360:	f240 6374 	movw	r3, #1652	; 0x674
	hal_cfg_params.max_event_size = MAX_EVENT_POOL_LEN;
   10364:	f44f 71c8 	mov.w	r1, #400	; 0x190
	hal_cfg_params.max_tx_frm_sz = CONFIG_NRF700X_TX_MAX_DATA_SIZE + TX_BUF_HEADROOM;
   10368:	9308      	str	r3, [sp, #32]
	hal_cfg_params.max_event_size = MAX_EVENT_POOL_LEN;
   1036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	fpriv->hpriv = wifi_nrf_hal_init(opriv,
   1036e:	4628      	mov	r0, r5
	hal_cfg_params.max_event_size = MAX_EVENT_POOL_LEN;
   10370:	e9cd 1301 	strd	r1, r3, [sp, #4]
	fpriv->hpriv = wifi_nrf_hal_init(opriv,
   10374:	4a0b      	ldr	r2, [pc, #44]	; (103a4 <wifi_nrf_fmac_init+0xfc>)
   10376:	a901      	add	r1, sp, #4
   10378:	f7fe fd62 	bl	ee40 <wifi_nrf_hal_init>
   1037c:	6060      	str	r0, [r4, #4]
	if (!fpriv->hpriv) {
   1037e:	2800      	cmp	r0, #0
   10380:	d1a7      	bne.n	102d2 <wifi_nrf_fmac_init+0x2a>
		wifi_nrf_osal_log_err(opriv,
   10382:	4a06      	ldr	r2, [pc, #24]	; (1039c <wifi_nrf_fmac_init+0xf4>)
   10384:	4628      	mov	r0, r5
   10386:	4908      	ldr	r1, [pc, #32]	; (103a8 <wifi_nrf_fmac_init+0x100>)
   10388:	f012 fbe0 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(opriv,
   1038c:	4628      	mov	r0, r5
   1038e:	4621      	mov	r1, r4
   10390:	f012 fb87 	bl	22aa2 <wifi_nrf_osal_mem_free>
		wifi_nrf_osal_deinit(opriv);
   10394:	4628      	mov	r0, r5
   10396:	f012 fb79 	bl	22a8c <wifi_nrf_osal_deinit>
		goto out;
   1039a:	e799      	b.n	102d0 <wifi_nrf_fmac_init+0x28>
   1039c:	00035903 	.word	0x00035903
   103a0:	0003502c 	.word	0x0003502c
   103a4:	0001006d 	.word	0x0001006d
   103a8:	0003504a 	.word	0x0003504a

000103ac <wifi_nrf_fmac_fw_load>:
}


enum wifi_nrf_status wifi_nrf_fmac_fw_load(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
					   struct wifi_nrf_fmac_fw_info *fmac_fw)
{
   103ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	/* Load the LMAC patches if available */
	if ((fmac_fw->lmac_patch_pri.data) && (fmac_fw->lmac_patch_pri.size)) {
   103ae:	680b      	ldr	r3, [r1, #0]
{
   103b0:	4605      	mov	r5, r0
   103b2:	460e      	mov	r6, r1
		status = wifi_nrf_hal_proc_reset(fmac_dev_ctx->hal_dev_ctx,
   103b4:	6880      	ldr	r0, [r0, #8]
	if ((fmac_fw->lmac_patch_pri.data) && (fmac_fw->lmac_patch_pri.size)) {
   103b6:	2b00      	cmp	r3, #0
   103b8:	d02e      	beq.n	10418 <wifi_nrf_fmac_fw_load+0x6c>
   103ba:	684b      	ldr	r3, [r1, #4]
   103bc:	b363      	cbz	r3, 10418 <wifi_nrf_fmac_fw_load+0x6c>
		status = wifi_nrf_hal_proc_reset(fmac_dev_ctx->hal_dev_ctx,
   103be:	2100      	movs	r1, #0
   103c0:	f7fe fc96 	bl	ecf0 <wifi_nrf_hal_proc_reset>
						 RPU_PROC_TYPE_MCU_LMAC);

		if (status != WIFI_NRF_STATUS_SUCCESS) {
   103c4:	4604      	mov	r4, r0
   103c6:	b140      	cbz	r0, 103da <wifi_nrf_fmac_fw_load+0x2e>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   103c8:	682b      	ldr	r3, [r5, #0]
   103ca:	4a44      	ldr	r2, [pc, #272]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
   103cc:	4944      	ldr	r1, [pc, #272]	; (104e0 <wifi_nrf_fmac_fw_load+0x134>)
						    fmac_fw->lmac_patch_pri.size,
						    fmac_fw->lmac_patch_sec.data,
						    fmac_fw->lmac_patch_sec.size);

		if (status != WIFI_NRF_STATUS_SUCCESS) {
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   103ce:	6818      	ldr	r0, [r3, #0]
   103d0:	f012 fbbc 	bl	22b4c <wifi_nrf_osal_log_err>

	fmac_dev_ctx->fw_boot_done = true;

out:
	return status;
}
   103d4:	4620      	mov	r0, r4
   103d6:	b002      	add	sp, #8
   103d8:	bd70      	pop	{r4, r5, r6, pc}
		status = wifi_nrf_hal_fw_patch_load(fmac_dev_ctx->hal_dev_ctx,
   103da:	68f3      	ldr	r3, [r6, #12]
   103dc:	4601      	mov	r1, r0
   103de:	9301      	str	r3, [sp, #4]
   103e0:	68b3      	ldr	r3, [r6, #8]
   103e2:	9300      	str	r3, [sp, #0]
   103e4:	e9d6 2300 	ldrd	r2, r3, [r6]
   103e8:	68a8      	ldr	r0, [r5, #8]
   103ea:	f7fe fda5 	bl	ef38 <wifi_nrf_hal_fw_patch_load>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   103ee:	682b      	ldr	r3, [r5, #0]
   103f0:	4604      	mov	r4, r0
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   103f2:	4a3a      	ldr	r2, [pc, #232]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   103f4:	b108      	cbz	r0, 103fa <wifi_nrf_fmac_fw_load+0x4e>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   103f6:	493b      	ldr	r1, [pc, #236]	; (104e4 <wifi_nrf_fmac_fw_load+0x138>)
   103f8:	e7e9      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
			wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv,
   103fa:	493b      	ldr	r1, [pc, #236]	; (104e8 <wifi_nrf_fmac_fw_load+0x13c>)
   103fc:	6818      	ldr	r0, [r3, #0]
   103fe:	f012 fb87 	bl	22b10 <wifi_nrf_osal_log_dbg>
		status = wifi_nrf_hal_fw_patch_boot(fmac_dev_ctx->hal_dev_ctx,
   10402:	4621      	mov	r1, r4
   10404:	2201      	movs	r2, #1
   10406:	68a8      	ldr	r0, [r5, #8]
   10408:	f7fe fe7c 	bl	f104 <wifi_nrf_hal_fw_patch_boot>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   1040c:	4604      	mov	r4, r0
   1040e:	b168      	cbz	r0, 1042c <wifi_nrf_fmac_fw_load+0x80>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10410:	682b      	ldr	r3, [r5, #0]
   10412:	4a32      	ldr	r2, [pc, #200]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
   10414:	4935      	ldr	r1, [pc, #212]	; (104ec <wifi_nrf_fmac_fw_load+0x140>)
   10416:	e7da      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
		status = wifi_nrf_hal_fw_patch_boot(fmac_dev_ctx->hal_dev_ctx,
   10418:	2200      	movs	r2, #0
   1041a:	4611      	mov	r1, r2
   1041c:	f7fe fe72 	bl	f104 <wifi_nrf_hal_fw_patch_boot>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10420:	4604      	mov	r4, r0
   10422:	b118      	cbz	r0, 1042c <wifi_nrf_fmac_fw_load+0x80>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10424:	682b      	ldr	r3, [r5, #0]
   10426:	4a2d      	ldr	r2, [pc, #180]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
   10428:	4931      	ldr	r1, [pc, #196]	; (104f0 <wifi_nrf_fmac_fw_load+0x144>)
   1042a:	e7d0      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
		status = wifi_nrf_hal_fw_chk_boot(fmac_dev_ctx->hal_dev_ctx,
   1042c:	4621      	mov	r1, r4
   1042e:	68a8      	ldr	r0, [r5, #8]
   10430:	f7fe fcb0 	bl	ed94 <wifi_nrf_hal_fw_chk_boot>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10434:	682b      	ldr	r3, [r5, #0]
   10436:	4604      	mov	r4, r0
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10438:	4a28      	ldr	r2, [pc, #160]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   1043a:	b108      	cbz	r0, 10440 <wifi_nrf_fmac_fw_load+0x94>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1043c:	492d      	ldr	r1, [pc, #180]	; (104f4 <wifi_nrf_fmac_fw_load+0x148>)
   1043e:	e7c6      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
			wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv,
   10440:	6818      	ldr	r0, [r3, #0]
   10442:	492d      	ldr	r1, [pc, #180]	; (104f8 <wifi_nrf_fmac_fw_load+0x14c>)
   10444:	f012 fb64 	bl	22b10 <wifi_nrf_osal_log_dbg>
	if ((fmac_fw->umac_patch_pri.data) && (fmac_fw->umac_patch_pri.size)) {
   10448:	6933      	ldr	r3, [r6, #16]
		status = wifi_nrf_hal_proc_reset(fmac_dev_ctx->hal_dev_ctx,
   1044a:	68a8      	ldr	r0, [r5, #8]
	if ((fmac_fw->umac_patch_pri.data) && (fmac_fw->umac_patch_pri.size)) {
   1044c:	b34b      	cbz	r3, 104a2 <wifi_nrf_fmac_fw_load+0xf6>
   1044e:	6973      	ldr	r3, [r6, #20]
   10450:	b33b      	cbz	r3, 104a2 <wifi_nrf_fmac_fw_load+0xf6>
		status = wifi_nrf_hal_proc_reset(fmac_dev_ctx->hal_dev_ctx,
   10452:	2101      	movs	r1, #1
   10454:	f7fe fc4c 	bl	ecf0 <wifi_nrf_hal_proc_reset>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10458:	4604      	mov	r4, r0
   1045a:	b118      	cbz	r0, 10464 <wifi_nrf_fmac_fw_load+0xb8>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1045c:	682b      	ldr	r3, [r5, #0]
   1045e:	4a1f      	ldr	r2, [pc, #124]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
   10460:	4926      	ldr	r1, [pc, #152]	; (104fc <wifi_nrf_fmac_fw_load+0x150>)
   10462:	e7b4      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
		status = wifi_nrf_hal_fw_patch_load(fmac_dev_ctx->hal_dev_ctx,
   10464:	69f3      	ldr	r3, [r6, #28]
   10466:	2101      	movs	r1, #1
   10468:	9301      	str	r3, [sp, #4]
   1046a:	69b3      	ldr	r3, [r6, #24]
   1046c:	9300      	str	r3, [sp, #0]
   1046e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   10472:	68a8      	ldr	r0, [r5, #8]
   10474:	f7fe fd60 	bl	ef38 <wifi_nrf_hal_fw_patch_load>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10478:	682b      	ldr	r3, [r5, #0]
   1047a:	4604      	mov	r4, r0
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1047c:	4a17      	ldr	r2, [pc, #92]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   1047e:	b108      	cbz	r0, 10484 <wifi_nrf_fmac_fw_load+0xd8>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10480:	491f      	ldr	r1, [pc, #124]	; (10500 <wifi_nrf_fmac_fw_load+0x154>)
   10482:	e7a4      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
			wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv,
   10484:	491f      	ldr	r1, [pc, #124]	; (10504 <wifi_nrf_fmac_fw_load+0x158>)
   10486:	6818      	ldr	r0, [r3, #0]
   10488:	f012 fb42 	bl	22b10 <wifi_nrf_osal_log_dbg>
		status = wifi_nrf_hal_fw_patch_boot(fmac_dev_ctx->hal_dev_ctx,
   1048c:	2201      	movs	r2, #1
   1048e:	68a8      	ldr	r0, [r5, #8]
   10490:	4611      	mov	r1, r2
   10492:	f7fe fe37 	bl	f104 <wifi_nrf_hal_fw_patch_boot>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10496:	4604      	mov	r4, r0
   10498:	b168      	cbz	r0, 104b6 <wifi_nrf_fmac_fw_load+0x10a>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1049a:	682b      	ldr	r3, [r5, #0]
   1049c:	4a0f      	ldr	r2, [pc, #60]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
   1049e:	491a      	ldr	r1, [pc, #104]	; (10508 <wifi_nrf_fmac_fw_load+0x15c>)
   104a0:	e795      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
		status = wifi_nrf_hal_fw_patch_boot(fmac_dev_ctx->hal_dev_ctx,
   104a2:	2200      	movs	r2, #0
   104a4:	2101      	movs	r1, #1
   104a6:	f7fe fe2d 	bl	f104 <wifi_nrf_hal_fw_patch_boot>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   104aa:	4604      	mov	r4, r0
   104ac:	b118      	cbz	r0, 104b6 <wifi_nrf_fmac_fw_load+0x10a>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   104ae:	682b      	ldr	r3, [r5, #0]
   104b0:	4a0a      	ldr	r2, [pc, #40]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
   104b2:	4916      	ldr	r1, [pc, #88]	; (1050c <wifi_nrf_fmac_fw_load+0x160>)
   104b4:	e78b      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
		status = wifi_nrf_hal_fw_chk_boot(fmac_dev_ctx->hal_dev_ctx,
   104b6:	2101      	movs	r1, #1
   104b8:	68a8      	ldr	r0, [r5, #8]
   104ba:	f7fe fc6b 	bl	ed94 <wifi_nrf_hal_fw_chk_boot>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   104be:	682b      	ldr	r3, [r5, #0]
   104c0:	4604      	mov	r4, r0
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   104c2:	4a06      	ldr	r2, [pc, #24]	; (104dc <wifi_nrf_fmac_fw_load+0x130>)
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   104c4:	b108      	cbz	r0, 104ca <wifi_nrf_fmac_fw_load+0x11e>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   104c6:	4912      	ldr	r1, [pc, #72]	; (10510 <wifi_nrf_fmac_fw_load+0x164>)
   104c8:	e781      	b.n	103ce <wifi_nrf_fmac_fw_load+0x22>
			wifi_nrf_osal_log_dbg(fmac_dev_ctx->fpriv->opriv,
   104ca:	6818      	ldr	r0, [r3, #0]
   104cc:	4911      	ldr	r1, [pc, #68]	; (10514 <wifi_nrf_fmac_fw_load+0x168>)
   104ce:	f012 fb1f 	bl	22b10 <wifi_nrf_osal_log_dbg>
	fmac_dev_ctx->fw_boot_done = true;
   104d2:	2301      	movs	r3, #1
   104d4:	2400      	movs	r4, #0
   104d6:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
   104da:	e77b      	b.n	103d4 <wifi_nrf_fmac_fw_load+0x28>
   104dc:	000358ed 	.word	0x000358ed
   104e0:	00035065 	.word	0x00035065
   104e4:	00035086 	.word	0x00035086
   104e8:	000350a2 	.word	0x000350a2
   104ec:	000350bb 	.word	0x000350bb
   104f0:	0003511b 	.word	0x0003511b
   104f4:	000350df 	.word	0x000350df
   104f8:	000350ff 	.word	0x000350ff
   104fc:	00035135 	.word	0x00035135
   10500:	00035156 	.word	0x00035156
   10504:	00035172 	.word	0x00035172
   10508:	0003518b 	.word	0x0003518b
   1050c:	000351eb 	.word	0x000351eb
   10510:	000351af 	.word	0x000351af
   10514:	000351cf 	.word	0x000351cf

00010518 <wifi_nrf_fmac_ver_get>:
}


enum wifi_nrf_status wifi_nrf_fmac_ver_get(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
					  unsigned int *fw_ver)
{
   10518:	b538      	push	{r3, r4, r5, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;

	status = hal_rpu_mem_read(fmac_dev_ctx->hal_dev_ctx,
   1051a:	4a08      	ldr	r2, [pc, #32]	; (1053c <wifi_nrf_fmac_ver_get+0x24>)
{
   1051c:	4605      	mov	r5, r0
	status = hal_rpu_mem_read(fmac_dev_ctx->hal_dev_ctx,
   1051e:	2304      	movs	r3, #4
   10520:	6880      	ldr	r0, [r0, #8]
   10522:	f7ff f8b1 	bl	f688 <hal_rpu_mem_read>
				  fw_ver,
				  RPU_MEM_UMAC_VER,
				  sizeof(*fw_ver));

	if (status != WIFI_NRF_STATUS_SUCCESS) {
   10526:	4604      	mov	r4, r0
   10528:	b128      	cbz	r0, 10536 <wifi_nrf_fmac_ver_get+0x1e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1052a:	682b      	ldr	r3, [r5, #0]
   1052c:	4a04      	ldr	r2, [pc, #16]	; (10540 <wifi_nrf_fmac_ver_get+0x28>)
   1052e:	4905      	ldr	r1, [pc, #20]	; (10544 <wifi_nrf_fmac_ver_get+0x2c>)
   10530:	6818      	ldr	r0, [r3, #0]
   10532:	f012 fb0b 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
	}

out:
	return status;
}
   10536:	4620      	mov	r0, r4
   10538:	bd38      	pop	{r3, r4, r5, pc}
   1053a:	bf00      	nop
   1053c:	b0000004 	.word	0xb0000004
   10540:	000358d7 	.word	0x000358d7
   10544:	00035205 	.word	0x00035205

00010548 <wifi_nrf_fmac_scan>:
#else /* CONFIG_NRF700X_RADIO_TEST */

enum wifi_nrf_status wifi_nrf_fmac_scan(void *dev_ctx,
					unsigned char if_idx,
					struct nrf_wifi_umac_scan_info *scan_info)
{
   10548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1054c:	4605      	mov	r5, r0
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct nrf_wifi_umac_cmd_scan *scan_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;
	int channel_info_len = (sizeof(struct nrf_wifi_channel) *
				scan_info->scan_params.num_scan_channels);
   1054e:	7b53      	ldrb	r3, [r2, #13]
{
   10550:	4617      	mov	r7, r2
	int channel_info_len = (sizeof(struct nrf_wifi_channel) *
   10552:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   10556:	ebc3 06c2 	rsb	r6, r3, r2, lsl #3

	fmac_dev_ctx = dev_ctx;

	if (fmac_dev_ctx->vif_ctx[if_idx]->if_type == NRF_WIFI_IFTYPE_AP) {
		wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   1055a:	6802      	ldr	r2, [r0, #0]
{
   1055c:	4688      	mov	r8, r1
		wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   1055e:	6810      	ldr	r0, [r2, #0]
	if (fmac_dev_ctx->vif_ctx[if_idx]->if_type == NRF_WIFI_IFTYPE_AP) {
   10560:	eb05 0281 	add.w	r2, r5, r1, lsl #2
   10564:	68d2      	ldr	r2, [r2, #12]
   10566:	6992      	ldr	r2, [r2, #24]
   10568:	2a03      	cmp	r2, #3
   1056a:	d108      	bne.n	1057e <wifi_nrf_fmac_scan+0x36>
		wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   1056c:	4a1e      	ldr	r2, [pc, #120]	; (105e8 <wifi_nrf_fmac_scan+0xa0>)
   1056e:	491f      	ldr	r1, [pc, #124]	; (105ec <wifi_nrf_fmac_scan+0xa4>)
   10570:	f012 fadd 	bl	22b2e <wifi_nrf_osal_log_info>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10574:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       scan_cmd);
	}

	return status;
}
   10578:	4630      	mov	r0, r6
   1057a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (scan_info->scan_params.num_scan_channels > MAX_NUM_CHANNELS) {
   1057e:	2b2a      	cmp	r3, #42	; 0x2a
   10580:	d904      	bls.n	1058c <wifi_nrf_fmac_scan+0x44>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10582:	4a19      	ldr	r2, [pc, #100]	; (105e8 <wifi_nrf_fmac_scan+0xa0>)
   10584:	491a      	ldr	r1, [pc, #104]	; (105f0 <wifi_nrf_fmac_scan+0xa8>)
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10586:	f012 fae1 	bl	22b4c <wifi_nrf_osal_log_err>
	if (scan_cmd) {
   1058a:	e7f3      	b.n	10574 <wifi_nrf_fmac_scan+0x2c>
	scan_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   1058c:	f206 29df 	addw	r9, r6, #735	; 0x2df
   10590:	4649      	mov	r1, r9
   10592:	f012 fa82 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
	if (!scan_cmd) {
   10596:	4604      	mov	r4, r0
   10598:	b920      	cbnz	r0, 105a4 <wifi_nrf_fmac_scan+0x5c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1059a:	682b      	ldr	r3, [r5, #0]
   1059c:	4a12      	ldr	r2, [pc, #72]	; (105e8 <wifi_nrf_fmac_scan+0xa0>)
   1059e:	4915      	ldr	r1, [pc, #84]	; (105f4 <wifi_nrf_fmac_scan+0xac>)
   105a0:	6818      	ldr	r0, [r3, #0]
   105a2:	e7f0      	b.n	10586 <wifi_nrf_fmac_scan+0x3e>
	scan_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_TRIGGER_SCAN;
   105a4:	2300      	movs	r3, #0
   105a6:	7203      	strb	r3, [r0, #8]
   105a8:	7243      	strb	r3, [r0, #9]
   105aa:	7283      	strb	r3, [r0, #10]
   105ac:	72c3      	strb	r3, [r0, #11]
	scan_cmd->umac_hdr.ids.wdev_id = if_idx;
   105ae:	6203      	str	r3, [r0, #32]
	scan_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   105b0:	6903      	ldr	r3, [r0, #16]
	scan_cmd->umac_hdr.ids.wdev_id = if_idx;
   105b2:	f8c0 801c 	str.w	r8, [r0, #28]
	scan_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   105b6:	f043 0301 	orr.w	r3, r3, #1
   105ba:	6103      	str	r3, [r0, #16]
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   105bc:	6828      	ldr	r0, [r5, #0]
   105be:	f206 23bb 	addw	r3, r6, #699	; 0x2bb
   105c2:	463a      	mov	r2, r7
   105c4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   105c8:	6800      	ldr	r0, [r0, #0]
   105ca:	f012 fa6e 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	status = umac_cmd_cfg(fmac_dev_ctx,
   105ce:	4621      	mov	r1, r4
   105d0:	464a      	mov	r2, r9
   105d2:	4628      	mov	r0, r5
   105d4:	f7ff fc24 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   105d8:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   105da:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   105dc:	4621      	mov	r1, r4
   105de:	6818      	ldr	r0, [r3, #0]
   105e0:	f012 fa5f 	bl	22aa2 <wifi_nrf_osal_mem_free>
   105e4:	e7c8      	b.n	10578 <wifi_nrf_fmac_scan+0x30>
   105e6:	bf00      	nop
   105e8:	000358c4 	.word	0x000358c4
   105ec:	00035222 	.word	0x00035222
   105f0:	0003524f 	.word	0x0003524f
   105f4:	00035285 	.word	0x00035285

000105f8 <wifi_nrf_fmac_scan_res_get>:

enum wifi_nrf_status wifi_nrf_fmac_scan_res_get(void *dev_ctx,
						unsigned char vif_idx,
						int scan_type)

{
   105f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105fa:	4605      	mov	r5, r0
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	fmac_dev_ctx = dev_ctx;

	if (fmac_dev_ctx->vif_ctx[vif_idx]->if_type == NRF_WIFI_IFTYPE_AP) {
		wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   105fc:	6803      	ldr	r3, [r0, #0]
{
   105fe:	460e      	mov	r6, r1
		wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   10600:	6818      	ldr	r0, [r3, #0]
	if (fmac_dev_ctx->vif_ctx[vif_idx]->if_type == NRF_WIFI_IFTYPE_AP) {
   10602:	eb05 0381 	add.w	r3, r5, r1, lsl #2
   10606:	68db      	ldr	r3, [r3, #12]
{
   10608:	4617      	mov	r7, r2
	if (fmac_dev_ctx->vif_ctx[vif_idx]->if_type == NRF_WIFI_IFTYPE_AP) {
   1060a:	699b      	ldr	r3, [r3, #24]
   1060c:	2b03      	cmp	r3, #3
   1060e:	d107      	bne.n	10620 <wifi_nrf_fmac_scan_res_get+0x28>
		wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   10610:	4a15      	ldr	r2, [pc, #84]	; (10668 <wifi_nrf_fmac_scan_res_get+0x70>)
   10612:	4916      	ldr	r1, [pc, #88]	; (1066c <wifi_nrf_fmac_scan_res_get+0x74>)
   10614:	f012 fa8b 	bl	22b2e <wifi_nrf_osal_log_info>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10618:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       scan_res_cmd);
	}

	return status;
}
   1061c:	4630      	mov	r0, r6
   1061e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	scan_res_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10620:	2128      	movs	r1, #40	; 0x28
   10622:	f012 fa3a 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
	if (!scan_res_cmd) {
   10626:	4604      	mov	r4, r0
   10628:	b930      	cbnz	r0, 10638 <wifi_nrf_fmac_scan_res_get+0x40>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1062a:	682b      	ldr	r3, [r5, #0]
   1062c:	4a0e      	ldr	r2, [pc, #56]	; (10668 <wifi_nrf_fmac_scan_res_get+0x70>)
   1062e:	4910      	ldr	r1, [pc, #64]	; (10670 <wifi_nrf_fmac_scan_res_get+0x78>)
   10630:	6818      	ldr	r0, [r3, #0]
   10632:	f012 fa8b 	bl	22b4c <wifi_nrf_osal_log_err>
	if (scan_res_cmd) {
   10636:	e7ef      	b.n	10618 <wifi_nrf_fmac_scan_res_get+0x20>
	scan_res_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_GET_SCAN_RESULTS;
   10638:	2300      	movs	r3, #0
   1063a:	2201      	movs	r2, #1
   1063c:	7243      	strb	r3, [r0, #9]
   1063e:	7283      	strb	r3, [r0, #10]
   10640:	72c3      	strb	r3, [r0, #11]
	scan_res_cmd->umac_hdr.ids.wdev_id = vif_idx;
   10642:	6203      	str	r3, [r0, #32]
	scan_res_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10644:	6903      	ldr	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10646:	4601      	mov	r1, r0
	scan_res_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10648:	4313      	orrs	r3, r2
	scan_res_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_GET_SCAN_RESULTS;
   1064a:	7202      	strb	r2, [r0, #8]
	scan_res_cmd->umac_hdr.ids.wdev_id = vif_idx;
   1064c:	61c6      	str	r6, [r0, #28]
	scan_res_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   1064e:	6103      	str	r3, [r0, #16]
	scan_res_cmd->scan_reason = scan_type;
   10650:	6247      	str	r7, [r0, #36]	; 0x24
	status = umac_cmd_cfg(fmac_dev_ctx,
   10652:	2228      	movs	r2, #40	; 0x28
   10654:	4628      	mov	r0, r5
   10656:	f7ff fbe3 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   1065a:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   1065c:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   1065e:	4621      	mov	r1, r4
   10660:	6818      	ldr	r0, [r3, #0]
   10662:	f012 fa1e 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10666:	e7d9      	b.n	1061c <wifi_nrf_fmac_scan_res_get+0x24>
   10668:	000358a9 	.word	0x000358a9
   1066c:	00035222 	.word	0x00035222
   10670:	00035285 	.word	0x00035285

00010674 <wifi_nrf_fmac_add_vif>:


unsigned char wifi_nrf_fmac_add_vif(void *dev_ctx,
				    void *os_vif_ctx,
				    struct nrf_wifi_umac_add_vif_info *vif_info)
{
   10674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10678:	460d      	mov	r5, r1
	struct wifi_nrf_fmac_vif_ctx *vif_ctx = NULL;
	unsigned char vif_idx = 0;

	fmac_dev_ctx = dev_ctx;

	switch (vif_info->iftype) {
   1067a:	6811      	ldr	r1, [r2, #0]
{
   1067c:	4604      	mov	r4, r0
	switch (vif_info->iftype) {
   1067e:	2903      	cmp	r1, #3
{
   10680:	4691      	mov	r9, r2
	switch (vif_info->iftype) {
   10682:	dc11      	bgt.n	106a8 <wifi_nrf_fmac_add_vif+0x34>
   10684:	2901      	cmp	r1, #1
   10686:	dd13      	ble.n	106b0 <wifi_nrf_fmac_add_vif+0x3c>
				      "%s: VIF type not supported\n",
				      __func__);
		goto err;
	}

	if (wifi_nrf_fmac_vif_check_if_limit(fmac_dev_ctx,
   10688:	4620      	mov	r0, r4
   1068a:	f001 fc79 	bl	11f80 <wifi_nrf_fmac_vif_check_if_limit>
   1068e:	4680      	mov	r8, r0
   10690:	b9a0      	cbnz	r0, 106bc <wifi_nrf_fmac_add_vif+0x48>
					     vif_info->iftype)) {
		goto err;
	}

	vif_ctx = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10692:	6823      	ldr	r3, [r4, #0]
   10694:	2124      	movs	r1, #36	; 0x24
   10696:	6818      	ldr	r0, [r3, #0]
   10698:	f012 f9ff 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					   sizeof(*vif_ctx));

	if (!vif_ctx) {
   1069c:	4606      	mov	r6, r0
   1069e:	b988      	cbnz	r0, 106c4 <wifi_nrf_fmac_add_vif+0x50>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   106a0:	6823      	ldr	r3, [r4, #0]
   106a2:	4a3f      	ldr	r2, [pc, #252]	; (107a0 <wifi_nrf_fmac_add_vif+0x12c>)
   106a4:	493f      	ldr	r1, [pc, #252]	; (107a4 <wifi_nrf_fmac_add_vif+0x130>)
   106a6:	e006      	b.n	106b6 <wifi_nrf_fmac_add_vif+0x42>
	switch (vif_info->iftype) {
   106a8:	f1a1 0308 	sub.w	r3, r1, #8
   106ac:	2b01      	cmp	r3, #1
   106ae:	d9eb      	bls.n	10688 <wifi_nrf_fmac_add_vif+0x14>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   106b0:	6823      	ldr	r3, [r4, #0]
   106b2:	4a3b      	ldr	r2, [pc, #236]	; (107a0 <wifi_nrf_fmac_add_vif+0x12c>)
   106b4:	493c      	ldr	r1, [pc, #240]	; (107a8 <wifi_nrf_fmac_add_vif+0x134>)
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   106b6:	6818      	ldr	r0, [r3, #0]
   106b8:	f012 fa48 	bl	22b4c <wifi_nrf_osal_log_err>
	if (vif_ctx) {
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       vif_ctx);
	}

	vif_idx = MAX_NUM_VIFS;
   106bc:	2702      	movs	r7, #2
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       add_vif_cmd);
	}

	return vif_idx;
}
   106be:	4638      	mov	r0, r7
   106c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	vif_ctx->if_type = vif_info->iftype;
   106c4:	464a      	mov	r2, r9
	vif_ctx->os_vif_ctx = os_vif_ctx;
   106c6:	e9c0 4500 	strd	r4, r5, [r0]
	vif_ctx->if_type = vif_info->iftype;
   106ca:	f852 3b0c 	ldr.w	r3, [r2], #12
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   106ce:	f106 0108 	add.w	r1, r6, #8
	vif_ctx->if_type = vif_info->iftype;
   106d2:	6183      	str	r3, [r0, #24]
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   106d4:	6820      	ldr	r0, [r4, #0]
   106d6:	2306      	movs	r3, #6
   106d8:	6800      	ldr	r0, [r0, #0]
   106da:	f012 f9e6 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	vif_idx = wifi_nrf_fmac_vif_idx_get(fmac_dev_ctx);
   106de:	4620      	mov	r0, r4
   106e0:	f012 fc85 	bl	22fee <wifi_nrf_fmac_vif_idx_get>
	if (vif_idx == MAX_NUM_VIFS) {
   106e4:	2802      	cmp	r0, #2
	vif_idx = wifi_nrf_fmac_vif_idx_get(fmac_dev_ctx);
   106e6:	4607      	mov	r7, r0
	if (vif_idx == MAX_NUM_VIFS) {
   106e8:	d10b      	bne.n	10702 <wifi_nrf_fmac_add_vif+0x8e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   106ea:	6823      	ldr	r3, [r4, #0]
   106ec:	4a2c      	ldr	r2, [pc, #176]	; (107a0 <wifi_nrf_fmac_add_vif+0x12c>)
   106ee:	492f      	ldr	r1, [pc, #188]	; (107ac <wifi_nrf_fmac_add_vif+0x138>)
   106f0:	6818      	ldr	r0, [r3, #0]
   106f2:	f012 fa2b 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   106f6:	6823      	ldr	r3, [r4, #0]
   106f8:	4631      	mov	r1, r6
   106fa:	6818      	ldr	r0, [r3, #0]
   106fc:	f012 f9d1 	bl	22aa2 <wifi_nrf_osal_mem_free>
	if (add_vif_cmd) {
   10700:	e7dc      	b.n	106bc <wifi_nrf_fmac_add_vif+0x48>
	if (vif_idx != 0) {
   10702:	2800      	cmp	r0, #0
   10704:	d046      	beq.n	10794 <wifi_nrf_fmac_add_vif+0x120>
		add_vif_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10706:	6823      	ldr	r3, [r4, #0]
   10708:	214a      	movs	r1, #74	; 0x4a
   1070a:	6818      	ldr	r0, [r3, #0]
   1070c:	f012 f9c5 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
		if (!add_vif_cmd) {
   10710:	4605      	mov	r5, r0
   10712:	b918      	cbnz	r0, 1071c <wifi_nrf_fmac_add_vif+0xa8>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10714:	6823      	ldr	r3, [r4, #0]
   10716:	4a22      	ldr	r2, [pc, #136]	; (107a0 <wifi_nrf_fmac_add_vif+0x12c>)
   10718:	4925      	ldr	r1, [pc, #148]	; (107b0 <wifi_nrf_fmac_add_vif+0x13c>)
   1071a:	e7e9      	b.n	106f0 <wifi_nrf_fmac_add_vif+0x7c>
		add_vif_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_NEW_INTERFACE;
   1071c:	230f      	movs	r3, #15
   1071e:	7203      	strb	r3, [r0, #8]
		add_vif_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10720:	6903      	ldr	r3, [r0, #16]
		add_vif_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_NEW_INTERFACE;
   10722:	f880 8009 	strb.w	r8, [r0, #9]
		add_vif_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10726:	f043 0301 	orr.w	r3, r3, #1
   1072a:	6103      	str	r3, [r0, #16]
		add_vif_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_NEW_INTERFACE;
   1072c:	f880 800a 	strb.w	r8, [r0, #10]
   10730:	f880 800b 	strb.w	r8, [r0, #11]
		add_vif_cmd->umac_hdr.ids.wdev_id = vif_idx;
   10734:	61c7      	str	r7, [r0, #28]
   10736:	f8c0 8020 	str.w	r8, [r0, #32]
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   1073a:	6820      	ldr	r0, [r4, #0]
   1073c:	2322      	movs	r3, #34	; 0x22
   1073e:	464a      	mov	r2, r9
   10740:	f105 0128 	add.w	r1, r5, #40	; 0x28
   10744:	6800      	ldr	r0, [r0, #0]
   10746:	f012 f9b0 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		add_vif_cmd->valid_fields |= NRF_WIFI_CMD_NEW_INTERFACE_IFTYPE_VALID;
   1074a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		status = umac_cmd_cfg(fmac_dev_ctx,
   1074c:	224a      	movs	r2, #74	; 0x4a
		add_vif_cmd->valid_fields |= NRF_WIFI_CMD_NEW_INTERFACE_MAC_ADDR_VALID;
   1074e:	f043 030e 	orr.w	r3, r3, #14
		status = umac_cmd_cfg(fmac_dev_ctx,
   10752:	4629      	mov	r1, r5
   10754:	4620      	mov	r0, r4
		add_vif_cmd->valid_fields |= NRF_WIFI_CMD_NEW_INTERFACE_MAC_ADDR_VALID;
   10756:	626b      	str	r3, [r5, #36]	; 0x24
		status = umac_cmd_cfg(fmac_dev_ctx,
   10758:	f7ff fb62 	bl	fe20 <umac_cmd_cfg>
		if (status == WIFI_NRF_STATUS_FAIL) {
   1075c:	3001      	adds	r0, #1
   1075e:	d111      	bne.n	10784 <wifi_nrf_fmac_add_vif+0x110>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10760:	6823      	ldr	r3, [r4, #0]
   10762:	4a0f      	ldr	r2, [pc, #60]	; (107a0 <wifi_nrf_fmac_add_vif+0x12c>)
   10764:	4913      	ldr	r1, [pc, #76]	; (107b4 <wifi_nrf_fmac_add_vif+0x140>)
   10766:	6818      	ldr	r0, [r3, #0]
   10768:	f012 f9f0 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   1076c:	6823      	ldr	r3, [r4, #0]
   1076e:	4631      	mov	r1, r6
   10770:	6818      	ldr	r0, [r3, #0]
   10772:	f012 f996 	bl	22aa2 <wifi_nrf_osal_mem_free>
	vif_idx = MAX_NUM_VIFS;
   10776:	2702      	movs	r7, #2
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10778:	6823      	ldr	r3, [r4, #0]
   1077a:	4629      	mov	r1, r5
   1077c:	6818      	ldr	r0, [r3, #0]
   1077e:	f012 f990 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10782:	e79c      	b.n	106be <wifi_nrf_fmac_add_vif+0x4a>
	fmac_dev_ctx->vif_ctx[vif_idx] = vif_ctx;
   10784:	eb04 0387 	add.w	r3, r4, r7, lsl #2
   10788:	60de      	str	r6, [r3, #12]
	wifi_nrf_fmac_vif_incr_if_type(fmac_dev_ctx,
   1078a:	4620      	mov	r0, r4
   1078c:	69b1      	ldr	r1, [r6, #24]
   1078e:	f001 fc25 	bl	11fdc <wifi_nrf_fmac_vif_incr_if_type>
	if (add_vif_cmd) {
   10792:	e7f1      	b.n	10778 <wifi_nrf_fmac_add_vif+0x104>
	fmac_dev_ctx->vif_ctx[vif_idx] = vif_ctx;
   10794:	60e6      	str	r6, [r4, #12]
	wifi_nrf_fmac_vif_incr_if_type(fmac_dev_ctx,
   10796:	4620      	mov	r0, r4
   10798:	69b1      	ldr	r1, [r6, #24]
   1079a:	f001 fc1f 	bl	11fdc <wifi_nrf_fmac_vif_incr_if_type>
	if (add_vif_cmd) {
   1079e:	e78e      	b.n	106be <wifi_nrf_fmac_add_vif+0x4a>
   107a0:	00035893 	.word	0x00035893
   107a4:	000352c0 	.word	0x000352c0
   107a8:	000352a4 	.word	0x000352a4
   107ac:	000352eb 	.word	0x000352eb
   107b0:	0003530d 	.word	0x0003530d
   107b4:	00035334 	.word	0x00035334

000107b8 <wifi_nrf_fmac_chg_vif_state>:

#define RPU_CMD_TIMEOUT_MS 10000
enum wifi_nrf_status wifi_nrf_fmac_chg_vif_state(void *dev_ctx,
						 unsigned char if_idx,
						 struct nrf_wifi_umac_chg_vif_state_info *vif_info)
{
   107b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct wifi_nrf_fmac_vif_ctx *vif_ctx = NULL;
	unsigned int count = RPU_CMD_TIMEOUT_MS;

	fmac_dev_ctx = dev_ctx;

	chg_vif_state_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   107bc:	6803      	ldr	r3, [r0, #0]
{
   107be:	4605      	mov	r5, r0
   107c0:	460e      	mov	r6, r1
	chg_vif_state_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   107c2:	6818      	ldr	r0, [r3, #0]
   107c4:	2138      	movs	r1, #56	; 0x38
{
   107c6:	4690      	mov	r8, r2
	chg_vif_state_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   107c8:	f012 f967 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
						     sizeof(*chg_vif_state_cmd));

	if (!chg_vif_state_cmd) {
   107cc:	4604      	mov	r4, r0
   107ce:	b950      	cbnz	r0, 107e6 <wifi_nrf_fmac_chg_vif_state+0x2e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   107d0:	682b      	ldr	r3, [r5, #0]
   107d2:	4a2b      	ldr	r2, [pc, #172]	; (10880 <wifi_nrf_fmac_chg_vif_state+0xc8>)
   107d4:	492b      	ldr	r1, [pc, #172]	; (10884 <wifi_nrf_fmac_chg_vif_state+0xcc>)
   107d6:	6818      	ldr	r0, [r3, #0]
   107d8:	f012 f9b8 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   107dc:	f04f 37ff 	mov.w	r7, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       chg_vif_state_cmd);
	}

	return status;
}
   107e0:	4638      	mov	r0, r7
   107e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	chg_vif_state_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_IFFLAGS;
   107e6:	2312      	movs	r3, #18
   107e8:	2700      	movs	r7, #0
   107ea:	7203      	strb	r3, [r0, #8]
	chg_vif_state_cmd->umac_hdr.ids.valid_fields |=
   107ec:	6903      	ldr	r3, [r0, #16]
	chg_vif_state_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_IFFLAGS;
   107ee:	7247      	strb	r7, [r0, #9]
	chg_vif_state_cmd->umac_hdr.ids.valid_fields |=
   107f0:	f043 0301 	orr.w	r3, r3, #1
	chg_vif_state_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_IFFLAGS;
   107f4:	7287      	strb	r7, [r0, #10]
   107f6:	72c7      	strb	r7, [r0, #11]
	chg_vif_state_cmd->umac_hdr.ids.wdev_id = if_idx;
   107f8:	6207      	str	r7, [r0, #32]
	chg_vif_state_cmd->umac_hdr.ids.valid_fields |=
   107fa:	6103      	str	r3, [r0, #16]
	chg_vif_state_cmd->umac_hdr.ids.wdev_id = if_idx;
   107fc:	61c6      	str	r6, [r0, #28]
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   107fe:	6828      	ldr	r0, [r5, #0]
   10800:	2314      	movs	r3, #20
   10802:	4642      	mov	r2, r8
   10804:	f104 0124 	add.w	r1, r4, #36	; 0x24
   10808:	6800      	ldr	r0, [r0, #0]
   1080a:	f012 f94e 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	vif_ctx = fmac_dev_ctx->vif_ctx[if_idx];
   1080e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
   10812:	f8d3 900c 	ldr.w	r9, [r3, #12]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10816:	2238      	movs	r2, #56	; 0x38
	vif_ctx->ifflags = false;
   10818:	f889 7014 	strb.w	r7, [r9, #20]
	status = umac_cmd_cfg(fmac_dev_ctx,
   1081c:	4621      	mov	r1, r4
   1081e:	4628      	mov	r0, r5
   10820:	f7ff fafe 	bl	fe20 <umac_cmd_cfg>
	unsigned int count = RPU_CMD_TIMEOUT_MS;
   10824:	f242 7a10 	movw	sl, #10000	; 0x2710
	status = umac_cmd_cfg(fmac_dev_ctx,
   10828:	4607      	mov	r7, r0
	while (!vif_ctx->ifflags && (--count > 0))
   1082a:	f899 3014 	ldrb.w	r3, [r9, #20]
		wifi_nrf_osal_sleep_ms(fmac_dev_ctx->fpriv->opriv, 1);
   1082e:	6828      	ldr	r0, [r5, #0]
	while (!vif_ctx->ifflags && (--count > 0))
   10830:	b993      	cbnz	r3, 10858 <wifi_nrf_fmac_chg_vif_state+0xa0>
   10832:	f1ba 0a01 	subs.w	sl, sl, #1
   10836:	d106      	bne.n	10846 <wifi_nrf_fmac_chg_vif_state+0x8e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10838:	230a      	movs	r3, #10
   1083a:	4a11      	ldr	r2, [pc, #68]	; (10880 <wifi_nrf_fmac_chg_vif_state+0xc8>)
   1083c:	4912      	ldr	r1, [pc, #72]	; (10888 <wifi_nrf_fmac_chg_vif_state+0xd0>)
   1083e:	6800      	ldr	r0, [r0, #0]
   10840:	f012 f984 	bl	22b4c <wifi_nrf_osal_log_err>
	if (chg_vif_state_cmd) {
   10844:	e015      	b.n	10872 <wifi_nrf_fmac_chg_vif_state+0xba>
		wifi_nrf_osal_sleep_ms(fmac_dev_ctx->fpriv->opriv, 1);
   10846:	2101      	movs	r1, #1
   10848:	6800      	ldr	r0, [r0, #0]
   1084a:	f012 fa00 	bl	22c4e <wifi_nrf_osal_sleep_ms>
   1084e:	e7ec      	b.n	1082a <wifi_nrf_fmac_chg_vif_state+0x72>
		} else if (vif_info->state == 0) {
   10850:	b97b      	cbnz	r3, 10872 <wifi_nrf_fmac_chg_vif_state+0xba>
			fmac_dev_ctx->tx_config.peers[MAX_PEERS].peer_id = -1;
   10852:	f04f 33ff 	mov.w	r3, #4294967295
   10856:	e008      	b.n	1086a <wifi_nrf_fmac_chg_vif_state+0xb2>
	if (vif_ctx->if_type == NRF_WIFI_IFTYPE_AP) {
   10858:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1085c:	2b03      	cmp	r3, #3
   1085e:	d108      	bne.n	10872 <wifi_nrf_fmac_chg_vif_state+0xba>
		if (vif_info->state == 1) {
   10860:	f8d8 3000 	ldr.w	r3, [r8]
   10864:	2b01      	cmp	r3, #1
   10866:	d1f3      	bne.n	10850 <wifi_nrf_fmac_chg_vif_state+0x98>
			fmac_dev_ctx->tx_config.peers[MAX_PEERS].peer_id = MAX_PEERS;
   10868:	2305      	movs	r3, #5
			fmac_dev_ctx->tx_config.peers[MAX_PEERS].peer_id = -1;
   1086a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
			fmac_dev_ctx->tx_config.peers[MAX_PEERS].if_idx = if_idx;
   1086e:	f885 609c 	strb.w	r6, [r5, #156]	; 0x9c
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10872:	682b      	ldr	r3, [r5, #0]
   10874:	4621      	mov	r1, r4
   10876:	6818      	ldr	r0, [r3, #0]
   10878:	f012 f913 	bl	22aa2 <wifi_nrf_osal_mem_free>
	return status;
   1087c:	e7b0      	b.n	107e0 <wifi_nrf_fmac_chg_vif_state+0x28>
   1087e:	bf00      	nop
   10880:	00035877 	.word	0x00035877
   10884:	00035285 	.word	0x00035285
   10888:	00035360 	.word	0x00035360

0001088c <wifi_nrf_fmac_set_vif_macaddr>:


enum wifi_nrf_status wifi_nrf_fmac_set_vif_macaddr(void *dev_ctx,
						   unsigned char if_idx,
						   unsigned char *mac_addr)
{
   1088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1088e:	460f      	mov	r7, r1
   10890:	4616      	mov	r6, r2
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;
	struct nrf_wifi_umac_cmd_change_macaddr *cmd = NULL;

	if (!dev_ctx) {
   10892:	4605      	mov	r5, r0
   10894:	b178      	cbz	r0, 108b6 <wifi_nrf_fmac_set_vif_macaddr+0x2a>
		goto out;
	}

	if (!mac_addr) {
   10896:	b90a      	cbnz	r2, 1089c <wifi_nrf_fmac_set_vif_macaddr+0x10>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10898:	6813      	ldr	r3, [r2, #0]
   1089a:	deff      	udf	#255	; 0xff
		goto out;
	}

	fmac_dev_ctx = dev_ctx;

	cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   1089c:	6803      	ldr	r3, [r0, #0]
   1089e:	212a      	movs	r1, #42	; 0x2a
   108a0:	6818      	ldr	r0, [r3, #0]
   108a2:	f012 f8fa 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					       sizeof(*cmd));

	if (!cmd) {
   108a6:	4604      	mov	r4, r0
   108a8:	b948      	cbnz	r0, 108be <wifi_nrf_fmac_set_vif_macaddr+0x32>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   108aa:	682b      	ldr	r3, [r5, #0]
   108ac:	4a14      	ldr	r2, [pc, #80]	; (10900 <wifi_nrf_fmac_set_vif_macaddr+0x74>)
   108ae:	4915      	ldr	r1, [pc, #84]	; (10904 <wifi_nrf_fmac_set_vif_macaddr+0x78>)
   108b0:	6818      	ldr	r0, [r3, #0]
   108b2:	f012 f94b 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   108b6:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       cmd);
	}

	return status;
}
   108ba:	4630      	mov	r0, r6
   108bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CHANGE_MACADDR;
   108be:	2300      	movs	r3, #0
   108c0:	2234      	movs	r2, #52	; 0x34
   108c2:	7243      	strb	r3, [r0, #9]
   108c4:	7283      	strb	r3, [r0, #10]
   108c6:	72c3      	strb	r3, [r0, #11]
	cmd->umac_hdr.ids.wdev_id = if_idx;
   108c8:	6203      	str	r3, [r0, #32]
	cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   108ca:	6903      	ldr	r3, [r0, #16]
	cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CHANGE_MACADDR;
   108cc:	7202      	strb	r2, [r0, #8]
	cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   108ce:	f043 0301 	orr.w	r3, r3, #1
	cmd->umac_hdr.ids.wdev_id = if_idx;
   108d2:	61c7      	str	r7, [r0, #28]
	cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   108d4:	6103      	str	r3, [r0, #16]
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   108d6:	6828      	ldr	r0, [r5, #0]
   108d8:	2306      	movs	r3, #6
   108da:	4632      	mov	r2, r6
   108dc:	f104 0124 	add.w	r1, r4, #36	; 0x24
   108e0:	6800      	ldr	r0, [r0, #0]
   108e2:	f012 f8e2 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	status = umac_cmd_cfg(fmac_dev_ctx,
   108e6:	4621      	mov	r1, r4
   108e8:	222a      	movs	r2, #42	; 0x2a
   108ea:	4628      	mov	r0, r5
   108ec:	f7ff fa98 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   108f0:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   108f2:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   108f4:	4621      	mov	r1, r4
   108f6:	6818      	ldr	r0, [r3, #0]
   108f8:	f012 f8d3 	bl	22aa2 <wifi_nrf_osal_mem_free>
   108fc:	e7dd      	b.n	108ba <wifi_nrf_fmac_set_vif_macaddr+0x2e>
   108fe:	bf00      	nop
   10900:	00035859 	.word	0x00035859
   10904:	00035384 	.word	0x00035384

00010908 <wifi_nrf_fmac_set_power_save>:


enum wifi_nrf_status wifi_nrf_fmac_set_power_save(void *dev_ctx,
						  unsigned char if_idx,
						  bool state)
{
   10908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_wifi_umac_cmd_set_power_save *set_ps_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	fmac_dev_ctx = dev_ctx;

	set_ps_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   1090a:	6803      	ldr	r3, [r0, #0]
{
   1090c:	4605      	mov	r5, r0
   1090e:	460f      	mov	r7, r1
	set_ps_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10910:	6818      	ldr	r0, [r3, #0]
   10912:	2128      	movs	r1, #40	; 0x28
{
   10914:	4616      	mov	r6, r2
	set_ps_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10916:	f012 f8c0 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					      sizeof(*set_ps_cmd));

	if (!set_ps_cmd) {
   1091a:	4604      	mov	r4, r0
   1091c:	b948      	cbnz	r0, 10932 <wifi_nrf_fmac_set_power_save+0x2a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1091e:	682b      	ldr	r3, [r5, #0]
   10920:	4a10      	ldr	r2, [pc, #64]	; (10964 <wifi_nrf_fmac_set_power_save+0x5c>)
   10922:	4911      	ldr	r1, [pc, #68]	; (10968 <wifi_nrf_fmac_set_power_save+0x60>)
   10924:	6818      	ldr	r0, [r3, #0]
   10926:	f012 f911 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   1092a:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       set_ps_cmd);
	}

	return status;
}
   1092e:	4630      	mov	r0, r6
   10930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_ps_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_POWER_SAVE;
   10932:	2300      	movs	r3, #0
   10934:	2221      	movs	r2, #33	; 0x21
   10936:	7243      	strb	r3, [r0, #9]
   10938:	7283      	strb	r3, [r0, #10]
   1093a:	72c3      	strb	r3, [r0, #11]
	set_ps_cmd->umac_hdr.ids.wdev_id = if_idx;
   1093c:	6203      	str	r3, [r0, #32]
	set_ps_cmd->umac_hdr.ids.valid_fields |=
   1093e:	6903      	ldr	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10940:	4601      	mov	r1, r0
	set_ps_cmd->umac_hdr.ids.valid_fields |=
   10942:	f043 0301 	orr.w	r3, r3, #1
	set_ps_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_POWER_SAVE;
   10946:	7202      	strb	r2, [r0, #8]
	set_ps_cmd->umac_hdr.ids.wdev_id = if_idx;
   10948:	61c7      	str	r7, [r0, #28]
	set_ps_cmd->umac_hdr.ids.valid_fields |=
   1094a:	6103      	str	r3, [r0, #16]
	set_ps_cmd->info.ps_state = state;
   1094c:	6246      	str	r6, [r0, #36]	; 0x24
	status = umac_cmd_cfg(fmac_dev_ctx,
   1094e:	2228      	movs	r2, #40	; 0x28
   10950:	4628      	mov	r0, r5
   10952:	f7ff fa65 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10956:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10958:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   1095a:	4621      	mov	r1, r4
   1095c:	6818      	ldr	r0, [r3, #0]
   1095e:	f012 f8a0 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10962:	e7e4      	b.n	1092e <wifi_nrf_fmac_set_power_save+0x26>
   10964:	0003583c 	.word	0x0003583c
   10968:	00035285 	.word	0x00035285

0001096c <wifi_nrf_fmac_set_uapsd_queue>:


enum wifi_nrf_status wifi_nrf_fmac_set_uapsd_queue(void *dev_ctx,
						   unsigned char if_idx,
						   unsigned int uapsd_queue)
{
   1096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1096e:	460f      	mov	r7, r1
   10970:	4616      	mov	r6, r2
	struct nrf_wifi_umac_cmd_config_uapsd  *set_uapsdq_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	fmac_dev_ctx = dev_ctx;

	if (!dev_ctx) {
   10972:	4605      	mov	r5, r0
   10974:	b918      	cbnz	r0, 1097e <wifi_nrf_fmac_set_uapsd_queue+0x12>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10976:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       set_uapsdq_cmd);
	}

	return status;
}
   1097a:	4630      	mov	r0, r6
   1097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_uapsdq_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   1097e:	6803      	ldr	r3, [r0, #0]
   10980:	2128      	movs	r1, #40	; 0x28
   10982:	6818      	ldr	r0, [r3, #0]
   10984:	f012 f889 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
	if (!set_uapsdq_cmd) {
   10988:	4604      	mov	r4, r0
   1098a:	b930      	cbnz	r0, 1099a <wifi_nrf_fmac_set_uapsd_queue+0x2e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   1098c:	682b      	ldr	r3, [r5, #0]
   1098e:	4a0f      	ldr	r2, [pc, #60]	; (109cc <wifi_nrf_fmac_set_uapsd_queue+0x60>)
   10990:	490f      	ldr	r1, [pc, #60]	; (109d0 <wifi_nrf_fmac_set_uapsd_queue+0x64>)
   10992:	6818      	ldr	r0, [r3, #0]
   10994:	f012 f8da 	bl	22b4c <wifi_nrf_osal_log_err>
	if (set_uapsdq_cmd) {
   10998:	e7ed      	b.n	10976 <wifi_nrf_fmac_set_uapsd_queue+0xa>
	set_uapsdq_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CONFIG_UAPSD;
   1099a:	2300      	movs	r3, #0
   1099c:	222f      	movs	r2, #47	; 0x2f
   1099e:	7243      	strb	r3, [r0, #9]
   109a0:	7283      	strb	r3, [r0, #10]
   109a2:	72c3      	strb	r3, [r0, #11]
	set_uapsdq_cmd->umac_hdr.ids.wdev_id = if_idx;
   109a4:	6203      	str	r3, [r0, #32]
	set_uapsdq_cmd->umac_hdr.ids.valid_fields |=
   109a6:	6903      	ldr	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   109a8:	4601      	mov	r1, r0
	set_uapsdq_cmd->umac_hdr.ids.valid_fields |=
   109aa:	f043 0301 	orr.w	r3, r3, #1
	set_uapsdq_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CONFIG_UAPSD;
   109ae:	7202      	strb	r2, [r0, #8]
	set_uapsdq_cmd->umac_hdr.ids.wdev_id = if_idx;
   109b0:	61c7      	str	r7, [r0, #28]
	set_uapsdq_cmd->umac_hdr.ids.valid_fields |=
   109b2:	6103      	str	r3, [r0, #16]
	set_uapsdq_cmd->info.uapsd_queue = uapsd_queue;
   109b4:	6246      	str	r6, [r0, #36]	; 0x24
	status = umac_cmd_cfg(fmac_dev_ctx,
   109b6:	2228      	movs	r2, #40	; 0x28
   109b8:	4628      	mov	r0, r5
   109ba:	f7ff fa31 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   109be:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   109c0:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   109c2:	4621      	mov	r1, r4
   109c4:	6818      	ldr	r0, [r3, #0]
   109c6:	f012 f86c 	bl	22aa2 <wifi_nrf_osal_mem_free>
   109ca:	e7d6      	b.n	1097a <wifi_nrf_fmac_set_uapsd_queue+0xe>
   109cc:	0003581e 	.word	0x0003581e
   109d0:	00035285 	.word	0x00035285

000109d4 <wifi_nrf_fmac_set_power_save_timeout>:


enum wifi_nrf_status wifi_nrf_fmac_set_power_save_timeout(void *dev_ctx,
							  unsigned char if_idx,
							  int ps_timeout)
{
   109d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_wifi_umac_cmd_set_power_save_timeout *set_ps_timeout_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	fmac_dev_ctx = dev_ctx;

	set_ps_timeout_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   109d6:	6803      	ldr	r3, [r0, #0]
{
   109d8:	4605      	mov	r5, r0
   109da:	460f      	mov	r7, r1
	set_ps_timeout_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   109dc:	6818      	ldr	r0, [r3, #0]
   109de:	2128      	movs	r1, #40	; 0x28
{
   109e0:	4616      	mov	r6, r2
	set_ps_timeout_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   109e2:	f012 f85a 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					      sizeof(*set_ps_timeout_cmd));

	if (!set_ps_timeout_cmd) {
   109e6:	4604      	mov	r4, r0
   109e8:	b948      	cbnz	r0, 109fe <wifi_nrf_fmac_set_power_save_timeout+0x2a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   109ea:	682b      	ldr	r3, [r5, #0]
   109ec:	4a10      	ldr	r2, [pc, #64]	; (10a30 <wifi_nrf_fmac_set_power_save_timeout+0x5c>)
   109ee:	4911      	ldr	r1, [pc, #68]	; (10a34 <wifi_nrf_fmac_set_power_save_timeout+0x60>)
   109f0:	6818      	ldr	r0, [r3, #0]
   109f2:	f012 f8ab 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   109f6:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       set_ps_timeout_cmd);
	}

	return status;
}
   109fa:	4630      	mov	r0, r6
   109fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_ps_timeout_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_POWER_SAVE_TIMEOUT;
   109fe:	2300      	movs	r3, #0
   10a00:	2235      	movs	r2, #53	; 0x35
   10a02:	7243      	strb	r3, [r0, #9]
   10a04:	7283      	strb	r3, [r0, #10]
   10a06:	72c3      	strb	r3, [r0, #11]
	set_ps_timeout_cmd->umac_hdr.ids.wdev_id = if_idx;
   10a08:	6203      	str	r3, [r0, #32]
	set_ps_timeout_cmd->umac_hdr.ids.valid_fields |=
   10a0a:	6903      	ldr	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10a0c:	4601      	mov	r1, r0
	set_ps_timeout_cmd->umac_hdr.ids.valid_fields |=
   10a0e:	f043 0301 	orr.w	r3, r3, #1
	set_ps_timeout_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_POWER_SAVE_TIMEOUT;
   10a12:	7202      	strb	r2, [r0, #8]
	set_ps_timeout_cmd->umac_hdr.ids.wdev_id = if_idx;
   10a14:	61c7      	str	r7, [r0, #28]
	set_ps_timeout_cmd->umac_hdr.ids.valid_fields |=
   10a16:	6103      	str	r3, [r0, #16]
	set_ps_timeout_cmd->timeout = ps_timeout;
   10a18:	6246      	str	r6, [r0, #36]	; 0x24
	status = umac_cmd_cfg(fmac_dev_ctx,
   10a1a:	2228      	movs	r2, #40	; 0x28
   10a1c:	4628      	mov	r0, r5
   10a1e:	f7ff f9ff 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10a22:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10a24:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10a26:	4621      	mov	r1, r4
   10a28:	6818      	ldr	r0, [r3, #0]
   10a2a:	f012 f83a 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10a2e:	e7e4      	b.n	109fa <wifi_nrf_fmac_set_power_save_timeout+0x26>
   10a30:	000357f9 	.word	0x000357f9
   10a34:	00035285 	.word	0x00035285

00010a38 <wifi_nrf_fmac_twt_setup>:


enum wifi_nrf_status wifi_nrf_fmac_twt_setup(void *dev_ctx,
					     unsigned char if_idx,
					     struct nrf_wifi_umac_config_twt_info *twt_params)
{
   10a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a3a:	460f      	mov	r7, r1
   10a3c:	4616      	mov	r6, r2

	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct nrf_wifi_umac_cmd_config_twt *twt_setup_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	if (!dev_ctx || !twt_params) {
   10a3e:	4605      	mov	r5, r0
   10a40:	b168      	cbz	r0, 10a5e <wifi_nrf_fmac_twt_setup+0x26>
   10a42:	b162      	cbz	r2, 10a5e <wifi_nrf_fmac_twt_setup+0x26>
		goto out;
	}

	fmac_dev_ctx = dev_ctx;

	twt_setup_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10a44:	6803      	ldr	r3, [r0, #0]
   10a46:	213e      	movs	r1, #62	; 0x3e
   10a48:	6818      	ldr	r0, [r3, #0]
   10a4a:	f012 f826 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
						 sizeof(*twt_setup_cmd));

	if (!twt_setup_cmd) {
   10a4e:	4604      	mov	r4, r0
   10a50:	6828      	ldr	r0, [r5, #0]
   10a52:	b944      	cbnz	r4, 10a66 <wifi_nrf_fmac_twt_setup+0x2e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10a54:	4a13      	ldr	r2, [pc, #76]	; (10aa4 <wifi_nrf_fmac_twt_setup+0x6c>)
   10a56:	4914      	ldr	r1, [pc, #80]	; (10aa8 <wifi_nrf_fmac_twt_setup+0x70>)
   10a58:	6800      	ldr	r0, [r0, #0]
   10a5a:	f012 f877 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10a5e:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       twt_setup_cmd);
	}

	return status;
}
   10a62:	4630      	mov	r0, r6
   10a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10a66:	4632      	mov	r2, r6
   10a68:	f104 0124 	add.w	r1, r4, #36	; 0x24
   10a6c:	231a      	movs	r3, #26
   10a6e:	6800      	ldr	r0, [r0, #0]
   10a70:	f012 f81b 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	twt_setup_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CONFIG_TWT;
   10a74:	2300      	movs	r3, #0
   10a76:	2230      	movs	r2, #48	; 0x30
   10a78:	7263      	strb	r3, [r4, #9]
   10a7a:	72a3      	strb	r3, [r4, #10]
   10a7c:	72e3      	strb	r3, [r4, #11]
	twt_setup_cmd->umac_hdr.ids.wdev_id = if_idx;
   10a7e:	6223      	str	r3, [r4, #32]
	twt_setup_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10a80:	6923      	ldr	r3, [r4, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10a82:	4621      	mov	r1, r4
	twt_setup_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10a84:	f043 0301 	orr.w	r3, r3, #1
	twt_setup_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CONFIG_TWT;
   10a88:	7222      	strb	r2, [r4, #8]
	twt_setup_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10a8a:	6123      	str	r3, [r4, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10a8c:	223e      	movs	r2, #62	; 0x3e
   10a8e:	4628      	mov	r0, r5
	twt_setup_cmd->umac_hdr.ids.wdev_id = if_idx;
   10a90:	61e7      	str	r7, [r4, #28]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10a92:	f7ff f9c5 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10a96:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10a98:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10a9a:	4621      	mov	r1, r4
   10a9c:	6818      	ldr	r0, [r3, #0]
   10a9e:	f012 f800 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10aa2:	e7de      	b.n	10a62 <wifi_nrf_fmac_twt_setup+0x2a>
   10aa4:	000357e1 	.word	0x000357e1
   10aa8:	00035285 	.word	0x00035285

00010aac <wifi_nrf_fmac_twt_teardown>:


enum wifi_nrf_status wifi_nrf_fmac_twt_teardown(void *dev_ctx,
						unsigned char if_idx,
						struct nrf_wifi_umac_config_twt_info *twt_params)
{
   10aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10aae:	460f      	mov	r7, r1
   10ab0:	4616      	mov	r6, r2

	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct nrf_wifi_umac_cmd_teardown_twt *twt_teardown_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	if (!dev_ctx || !twt_params) {
   10ab2:	4605      	mov	r5, r0
   10ab4:	b168      	cbz	r0, 10ad2 <wifi_nrf_fmac_twt_teardown+0x26>
   10ab6:	b162      	cbz	r2, 10ad2 <wifi_nrf_fmac_twt_teardown+0x26>
		goto out;
	}

	fmac_dev_ctx = dev_ctx;

	twt_teardown_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10ab8:	6803      	ldr	r3, [r0, #0]
   10aba:	2126      	movs	r1, #38	; 0x26
   10abc:	6818      	ldr	r0, [r3, #0]
   10abe:	f011 ffec 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
						    sizeof(*twt_teardown_cmd));

	if (!twt_teardown_cmd) {
   10ac2:	4604      	mov	r4, r0
   10ac4:	6828      	ldr	r0, [r5, #0]
   10ac6:	b944      	cbnz	r4, 10ada <wifi_nrf_fmac_twt_teardown+0x2e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10ac8:	4a13      	ldr	r2, [pc, #76]	; (10b18 <wifi_nrf_fmac_twt_teardown+0x6c>)
   10aca:	4914      	ldr	r1, [pc, #80]	; (10b1c <wifi_nrf_fmac_twt_teardown+0x70>)
   10acc:	6800      	ldr	r0, [r0, #0]
   10ace:	f012 f83d 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10ad2:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       twt_teardown_cmd);
	}

	return status;
}
   10ad6:	4630      	mov	r0, r6
   10ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10ada:	4632      	mov	r2, r6
   10adc:	f104 0124 	add.w	r1, r4, #36	; 0x24
   10ae0:	2302      	movs	r3, #2
   10ae2:	6800      	ldr	r0, [r0, #0]
   10ae4:	f011 ffe1 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	twt_teardown_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_TEARDOWN_TWT;
   10ae8:	2300      	movs	r3, #0
   10aea:	2231      	movs	r2, #49	; 0x31
   10aec:	7263      	strb	r3, [r4, #9]
   10aee:	72a3      	strb	r3, [r4, #10]
   10af0:	72e3      	strb	r3, [r4, #11]
	twt_teardown_cmd->umac_hdr.ids.wdev_id = if_idx;
   10af2:	6223      	str	r3, [r4, #32]
	twt_teardown_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10af4:	6923      	ldr	r3, [r4, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10af6:	4621      	mov	r1, r4
	twt_teardown_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10af8:	f043 0301 	orr.w	r3, r3, #1
	twt_teardown_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_TEARDOWN_TWT;
   10afc:	7222      	strb	r2, [r4, #8]
	twt_teardown_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10afe:	6123      	str	r3, [r4, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10b00:	2226      	movs	r2, #38	; 0x26
   10b02:	4628      	mov	r0, r5
	twt_teardown_cmd->umac_hdr.ids.wdev_id = if_idx;
   10b04:	61e7      	str	r7, [r4, #28]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10b06:	f7ff f98b 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10b0a:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10b0c:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10b0e:	4621      	mov	r1, r4
   10b10:	6818      	ldr	r0, [r3, #0]
   10b12:	f011 ffc6 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10b16:	e7de      	b.n	10ad6 <wifi_nrf_fmac_twt_teardown+0x2a>
   10b18:	000357c6 	.word	0x000357c6
   10b1c:	00035285 	.word	0x00035285

00010b20 <wifi_nrf_fmac_set_mcast_addr>:

enum wifi_nrf_status wifi_nrf_fmac_set_mcast_addr(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
						  unsigned char if_idx,
						  struct nrf_wifi_umac_mcast_cfg *mcast_info)
{
   10b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct nrf_wifi_umac_cmd_mcast_filter *set_mcast_cmd = NULL;

	set_mcast_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10b22:	6803      	ldr	r3, [r0, #0]
{
   10b24:	4605      	mov	r5, r0
   10b26:	460f      	mov	r7, r1
	set_mcast_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10b28:	6818      	ldr	r0, [r3, #0]
   10b2a:	212e      	movs	r1, #46	; 0x2e
{
   10b2c:	4616      	mov	r6, r2
	set_mcast_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10b2e:	f011 ffb4 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
						 sizeof(*set_mcast_cmd));

	if (!set_mcast_cmd) {
   10b32:	4604      	mov	r4, r0
   10b34:	b948      	cbnz	r0, 10b4a <wifi_nrf_fmac_set_mcast_addr+0x2a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10b36:	682b      	ldr	r3, [r5, #0]
   10b38:	4a14      	ldr	r2, [pc, #80]	; (10b8c <wifi_nrf_fmac_set_mcast_addr+0x6c>)
   10b3a:	4915      	ldr	r1, [pc, #84]	; (10b90 <wifi_nrf_fmac_set_mcast_addr+0x70>)
   10b3c:	6818      	ldr	r0, [r3, #0]
   10b3e:	f012 f805 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10b42:	f04f 36ff 	mov.w	r6, #4294967295
	if (set_mcast_cmd) {
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       set_mcast_cmd);
	}
	return status;
}
   10b46:	4630      	mov	r0, r6
   10b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_mcast_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_MCAST_FILTER;
   10b4a:	2300      	movs	r3, #0
   10b4c:	2233      	movs	r2, #51	; 0x33
   10b4e:	7243      	strb	r3, [r0, #9]
   10b50:	7283      	strb	r3, [r0, #10]
   10b52:	72c3      	strb	r3, [r0, #11]
	set_mcast_cmd->umac_hdr.ids.wdev_id = if_idx;
   10b54:	6203      	str	r3, [r0, #32]
	set_mcast_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10b56:	6903      	ldr	r3, [r0, #16]
	set_mcast_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_MCAST_FILTER;
   10b58:	7202      	strb	r2, [r0, #8]
	set_mcast_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10b5a:	f043 0301 	orr.w	r3, r3, #1
	set_mcast_cmd->umac_hdr.ids.wdev_id = if_idx;
   10b5e:	61c7      	str	r7, [r0, #28]
	set_mcast_cmd->umac_hdr.ids.valid_fields |= NRF_WIFI_INDEX_IDS_WDEV_ID_VALID;
   10b60:	6103      	str	r3, [r0, #16]
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10b62:	6828      	ldr	r0, [r5, #0]
   10b64:	230a      	movs	r3, #10
   10b66:	4632      	mov	r2, r6
   10b68:	f104 0124 	add.w	r1, r4, #36	; 0x24
   10b6c:	6800      	ldr	r0, [r0, #0]
   10b6e:	f011 ff9c 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	status = umac_cmd_cfg(fmac_dev_ctx,
   10b72:	4621      	mov	r1, r4
   10b74:	222e      	movs	r2, #46	; 0x2e
   10b76:	4628      	mov	r0, r5
   10b78:	f7ff f952 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10b7c:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10b7e:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10b80:	4621      	mov	r1, r4
   10b82:	6818      	ldr	r0, [r3, #0]
   10b84:	f011 ff8d 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10b88:	e7dd      	b.n	10b46 <wifi_nrf_fmac_set_mcast_addr+0x26>
   10b8a:	bf00      	nop
   10b8c:	000357a9 	.word	0x000357a9
   10b90:	00035285 	.word	0x00035285

00010b94 <wifi_nrf_fmac_get_reg>:
	return status;
}

enum wifi_nrf_status wifi_nrf_fmac_get_reg(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
					   struct wifi_nrf_fmac_reg_info *reg_info)
{
   10b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
				      "%s: Invalid parameters\n",
				      __func__);
		goto err;
	}

	get_reg_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10b96:	6803      	ldr	r3, [r0, #0]
{
   10b98:	4604      	mov	r4, r0
	if (!fmac_dev_ctx || !reg_info) {
   10b9a:	460e      	mov	r6, r1
	get_reg_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10b9c:	6818      	ldr	r0, [r3, #0]
	if (!fmac_dev_ctx || !reg_info) {
   10b9e:	b939      	cbnz	r1, 10bb0 <wifi_nrf_fmac_get_reg+0x1c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10ba0:	4a21      	ldr	r2, [pc, #132]	; (10c28 <wifi_nrf_fmac_get_reg+0x94>)
   10ba2:	4922      	ldr	r1, [pc, #136]	; (10c2c <wifi_nrf_fmac_get_reg+0x98>)
   10ba4:	f011 ffd2 	bl	22b4c <wifi_nrf_osal_log_err>
	       fmac_dev_ctx->alpha2,
	       sizeof(reg_info->alpha2));

	return WIFI_NRF_STATUS_SUCCESS;
err:
	return WIFI_NRF_STATUS_FAIL;
   10ba8:	f04f 35ff 	mov.w	r5, #4294967295
}
   10bac:	4628      	mov	r0, r5
   10bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	get_reg_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10bb0:	f240 3132 	movw	r1, #818	; 0x332
   10bb4:	f011 ff71 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
	if (!get_reg_cmd) {
   10bb8:	4601      	mov	r1, r0
   10bba:	b920      	cbnz	r0, 10bc6 <wifi_nrf_fmac_get_reg+0x32>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10bbc:	6823      	ldr	r3, [r4, #0]
   10bbe:	4a1a      	ldr	r2, [pc, #104]	; (10c28 <wifi_nrf_fmac_get_reg+0x94>)
   10bc0:	491b      	ldr	r1, [pc, #108]	; (10c30 <wifi_nrf_fmac_get_reg+0x9c>)
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10bc2:	6818      	ldr	r0, [r3, #0]
   10bc4:	e7ee      	b.n	10ba4 <wifi_nrf_fmac_get_reg+0x10>
	get_reg_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_GET_REG;
   10bc6:	2300      	movs	r3, #0
   10bc8:	222c      	movs	r2, #44	; 0x2c
   10bca:	7243      	strb	r3, [r0, #9]
   10bcc:	7202      	strb	r2, [r0, #8]
   10bce:	7283      	strb	r3, [r0, #10]
   10bd0:	72c3      	strb	r3, [r0, #11]
	get_reg_cmd->umac_hdr.ids.valid_fields = 0;
   10bd2:	7403      	strb	r3, [r0, #16]
   10bd4:	7443      	strb	r3, [r0, #17]
   10bd6:	7483      	strb	r3, [r0, #18]
   10bd8:	74c3      	strb	r3, [r0, #19]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10bda:	f240 3232 	movw	r2, #818	; 0x332
   10bde:	4620      	mov	r0, r4
   10be0:	f7ff f91e 	bl	fe20 <umac_cmd_cfg>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   10be4:	4605      	mov	r5, r0
   10be6:	b118      	cbz	r0, 10bf0 <wifi_nrf_fmac_get_reg+0x5c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10be8:	6823      	ldr	r3, [r4, #0]
   10bea:	4a0f      	ldr	r2, [pc, #60]	; (10c28 <wifi_nrf_fmac_get_reg+0x94>)
   10bec:	4911      	ldr	r1, [pc, #68]	; (10c34 <wifi_nrf_fmac_get_reg+0xa0>)
   10bee:	e7e8      	b.n	10bc2 <wifi_nrf_fmac_get_reg+0x2e>
	fmac_dev_ctx->alpha2_valid = false;
   10bf0:	2765      	movs	r7, #101	; 0x65
   10bf2:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
		wifi_nrf_osal_sleep_ms(fmac_dev_ctx->fpriv->opriv,
   10bf6:	6823      	ldr	r3, [r4, #0]
   10bf8:	2164      	movs	r1, #100	; 0x64
   10bfa:	6818      	ldr	r0, [r3, #0]
   10bfc:	f012 f827 	bl	22c4e <wifi_nrf_osal_sleep_ms>
	} while (count++ < 100 && !fmac_dev_ctx->alpha2_valid);
   10c00:	3f01      	subs	r7, #1
   10c02:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   10c06:	d001      	beq.n	10c0c <wifi_nrf_fmac_get_reg+0x78>
   10c08:	2b00      	cmp	r3, #0
   10c0a:	d0f4      	beq.n	10bf6 <wifi_nrf_fmac_get_reg+0x62>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10c0c:	6822      	ldr	r2, [r4, #0]
   10c0e:	6810      	ldr	r0, [r2, #0]
	if (!fmac_dev_ctx->alpha2_valid) {
   10c10:	b913      	cbnz	r3, 10c18 <wifi_nrf_fmac_get_reg+0x84>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10c12:	4a05      	ldr	r2, [pc, #20]	; (10c28 <wifi_nrf_fmac_get_reg+0x94>)
   10c14:	4907      	ldr	r1, [pc, #28]	; (10c34 <wifi_nrf_fmac_get_reg+0xa0>)
   10c16:	e7c5      	b.n	10ba4 <wifi_nrf_fmac_get_reg+0x10>
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10c18:	2302      	movs	r3, #2
   10c1a:	4631      	mov	r1, r6
   10c1c:	f204 129d 	addw	r2, r4, #413	; 0x19d
   10c20:	f011 ff43 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	return WIFI_NRF_STATUS_SUCCESS;
   10c24:	e7c2      	b.n	10bac <wifi_nrf_fmac_get_reg+0x18>
   10c26:	bf00      	nop
   10c28:	00035793 	.word	0x00035793
   10c2c:	00034017 	.word	0x00034017
   10c30:	00035285 	.word	0x00035285
   10c34:	000353a0 	.word	0x000353a0

00010c38 <wifi_nrf_fmac_get_power_save_info>:

enum wifi_nrf_status wifi_nrf_fmac_get_power_save_info(void *dev_ctx,
						       unsigned char if_idx)
{
   10c38:	b570      	push	{r4, r5, r6, lr}
	struct nrf_wifi_umac_cmd_get_power_save_info *get_ps_info_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	fmac_dev_ctx = dev_ctx;

	get_ps_info_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10c3a:	6803      	ldr	r3, [r0, #0]
{
   10c3c:	4605      	mov	r5, r0
   10c3e:	460e      	mov	r6, r1
	get_ps_info_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10c40:	6818      	ldr	r0, [r3, #0]
   10c42:	2124      	movs	r1, #36	; 0x24
   10c44:	f011 ff29 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
						   sizeof(*get_ps_info_cmd));

	if (!get_ps_info_cmd) {
   10c48:	4604      	mov	r4, r0
   10c4a:	b948      	cbnz	r0, 10c60 <wifi_nrf_fmac_get_power_save_info+0x28>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10c4c:	682b      	ldr	r3, [r5, #0]
   10c4e:	4a10      	ldr	r2, [pc, #64]	; (10c90 <wifi_nrf_fmac_get_power_save_info+0x58>)
   10c50:	4910      	ldr	r1, [pc, #64]	; (10c94 <wifi_nrf_fmac_get_power_save_info+0x5c>)
   10c52:	6818      	ldr	r0, [r3, #0]
   10c54:	f011 ff7a 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10c58:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       get_ps_info_cmd);
	}

	return status;
}
   10c5c:	4630      	mov	r0, r6
   10c5e:	bd70      	pop	{r4, r5, r6, pc}
	get_ps_info_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_GET_POWER_SAVE_INFO;
   10c60:	2300      	movs	r3, #0
   10c62:	2237      	movs	r2, #55	; 0x37
   10c64:	7243      	strb	r3, [r0, #9]
   10c66:	7283      	strb	r3, [r0, #10]
   10c68:	72c3      	strb	r3, [r0, #11]
	get_ps_info_cmd->umac_hdr.ids.wdev_id = if_idx;
   10c6a:	6203      	str	r3, [r0, #32]
	get_ps_info_cmd->umac_hdr.ids.valid_fields |=
   10c6c:	6903      	ldr	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10c6e:	4601      	mov	r1, r0
	get_ps_info_cmd->umac_hdr.ids.valid_fields |=
   10c70:	f043 0301 	orr.w	r3, r3, #1
	get_ps_info_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_GET_POWER_SAVE_INFO;
   10c74:	7202      	strb	r2, [r0, #8]
	get_ps_info_cmd->umac_hdr.ids.wdev_id = if_idx;
   10c76:	61c6      	str	r6, [r0, #28]
	get_ps_info_cmd->umac_hdr.ids.valid_fields |=
   10c78:	6103      	str	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10c7a:	2224      	movs	r2, #36	; 0x24
   10c7c:	4628      	mov	r0, r5
   10c7e:	f7ff f8cf 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10c82:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   10c84:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   10c86:	4621      	mov	r1, r4
   10c88:	6818      	ldr	r0, [r3, #0]
   10c8a:	f011 ff0a 	bl	22aa2 <wifi_nrf_osal_mem_free>
   10c8e:	e7e5      	b.n	10c5c <wifi_nrf_fmac_get_power_save_info+0x24>
   10c90:	00035771 	.word	0x00035771
   10c94:	00035285 	.word	0x00035285

00010c98 <wifi_nrf_fmac_otp_mac_addr_get>:
#endif /* !CONFIG_NRF700X_RADIO_TEST */

enum wifi_nrf_status wifi_nrf_fmac_otp_mac_addr_get(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
						    unsigned char vif_idx,
						    unsigned char *mac_addr)
{
   10c98:	b5f0      	push	{r4, r5, r6, r7, lr}
				      "%s: Invalid parameters\n",
				      __func__);
		goto out;
	}

	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10c9a:	6803      	ldr	r3, [r0, #0]
{
   10c9c:	4605      	mov	r5, r0
   10c9e:	460f      	mov	r7, r1
	if (!fmac_dev_ctx || !mac_addr || (vif_idx >= MAX_NUM_VIFS)) {
   10ca0:	4614      	mov	r4, r2
	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10ca2:	6818      	ldr	r0, [r3, #0]
{
   10ca4:	b0b7      	sub	sp, #220	; 0xdc
	if (!fmac_dev_ctx || !mac_addr || (vif_idx >= MAX_NUM_VIFS)) {
   10ca6:	b10a      	cbz	r2, 10cac <wifi_nrf_fmac_otp_mac_addr_get+0x14>
   10ca8:	2901      	cmp	r1, #1
   10caa:	d908      	bls.n	10cbe <wifi_nrf_fmac_otp_mac_addr_get+0x26>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10cac:	4a22      	ldr	r2, [pc, #136]	; (10d38 <wifi_nrf_fmac_otp_mac_addr_get+0xa0>)
   10cae:	4923      	ldr	r1, [pc, #140]	; (10d3c <wifi_nrf_fmac_otp_mac_addr_get+0xa4>)
   10cb0:	f011 ff4c 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10cb4:	f04f 36ff 	mov.w	r6, #4294967295

		}
	}
out:
	return status;
}
   10cb8:	4630      	mov	r0, r6
   10cba:	b037      	add	sp, #220	; 0xdc
   10cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10cbe:	23bc      	movs	r3, #188	; 0xbc
   10cc0:	22ff      	movs	r2, #255	; 0xff
   10cc2:	a907      	add	r1, sp, #28
   10cc4:	f011 fefb 	bl	22abe <wifi_nrf_osal_mem_set>
	status = wifi_nrf_hal_otp_info_get(fmac_dev_ctx->hal_dev_ctx,
   10cc8:	68a8      	ldr	r0, [r5, #8]
   10cca:	aa35      	add	r2, sp, #212	; 0xd4
   10ccc:	a907      	add	r1, sp, #28
   10cce:	f7fe f8ff 	bl	eed0 <wifi_nrf_hal_otp_info_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   10cd2:	4606      	mov	r6, r0
   10cd4:	6828      	ldr	r0, [r5, #0]
   10cd6:	b12e      	cbz	r6, 10ce4 <wifi_nrf_fmac_otp_mac_addr_get+0x4c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10cd8:	4a17      	ldr	r2, [pc, #92]	; (10d38 <wifi_nrf_fmac_otp_mac_addr_get+0xa0>)
   10cda:	4919      	ldr	r1, [pc, #100]	; (10d40 <wifi_nrf_fmac_otp_mac_addr_get+0xa8>)
   10cdc:	6800      	ldr	r0, [r0, #0]
   10cde:	f011 ff35 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
   10ce2:	e7e9      	b.n	10cb8 <wifi_nrf_fmac_otp_mac_addr_get+0x20>
	if (vif_idx == 0) {
   10ce4:	b957      	cbnz	r7, 10cfc <wifi_nrf_fmac_otp_mac_addr_get+0x64>
		otp_mac_addr_flag_mask = (~MAC0_ADDR_FLAG_MASK);
   10ce6:	2302      	movs	r3, #2
		otp_mac_addr = (unsigned char *)otp_info.info.mac_address0;
   10ce8:	aa28      	add	r2, sp, #160	; 0xa0
	if (otp_info.flags & otp_mac_addr_flag_mask) {
   10cea:	9935      	ldr	r1, [sp, #212]	; 0xd4
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10cec:	6800      	ldr	r0, [r0, #0]
	if (otp_info.flags & otp_mac_addr_flag_mask) {
   10cee:	420b      	tst	r3, r1
   10cf0:	d007      	beq.n	10d02 <wifi_nrf_fmac_otp_mac_addr_get+0x6a>
		wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   10cf2:	4a11      	ldr	r2, [pc, #68]	; (10d38 <wifi_nrf_fmac_otp_mac_addr_get+0xa0>)
   10cf4:	4913      	ldr	r1, [pc, #76]	; (10d44 <wifi_nrf_fmac_otp_mac_addr_get+0xac>)
   10cf6:	f011 ff1a 	bl	22b2e <wifi_nrf_osal_log_info>
   10cfa:	e7dd      	b.n	10cb8 <wifi_nrf_fmac_otp_mac_addr_get+0x20>
		otp_mac_addr_flag_mask = (~MAC1_ADDR_FLAG_MASK);
   10cfc:	2304      	movs	r3, #4
		otp_mac_addr = (unsigned char *)otp_info.info.mac_address1;
   10cfe:	aa2a      	add	r2, sp, #168	; 0xa8
   10d00:	e7f3      	b.n	10cea <wifi_nrf_fmac_otp_mac_addr_get+0x52>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10d02:	2306      	movs	r3, #6
   10d04:	4621      	mov	r1, r4
   10d06:	f011 fed0 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		if (!nrf_wifi_utils_is_mac_addr_valid((const char *)mac_addr)) {
   10d0a:	4620      	mov	r0, r4
   10d0c:	f012 f855 	bl	22dba <nrf_wifi_utils_is_mac_addr_valid>
   10d10:	2800      	cmp	r0, #0
   10d12:	d1d1      	bne.n	10cb8 <wifi_nrf_fmac_otp_mac_addr_get+0x20>
			wifi_nrf_osal_log_info(fmac_dev_ctx->fpriv->opriv,
   10d14:	7963      	ldrb	r3, [r4, #5]
   10d16:	6828      	ldr	r0, [r5, #0]
   10d18:	9304      	str	r3, [sp, #16]
   10d1a:	7923      	ldrb	r3, [r4, #4]
   10d1c:	4a06      	ldr	r2, [pc, #24]	; (10d38 <wifi_nrf_fmac_otp_mac_addr_get+0xa0>)
   10d1e:	9303      	str	r3, [sp, #12]
   10d20:	78e3      	ldrb	r3, [r4, #3]
   10d22:	4909      	ldr	r1, [pc, #36]	; (10d48 <wifi_nrf_fmac_otp_mac_addr_get+0xb0>)
   10d24:	9302      	str	r3, [sp, #8]
   10d26:	78a3      	ldrb	r3, [r4, #2]
   10d28:	9301      	str	r3, [sp, #4]
   10d2a:	7863      	ldrb	r3, [r4, #1]
   10d2c:	9300      	str	r3, [sp, #0]
   10d2e:	7823      	ldrb	r3, [r4, #0]
   10d30:	6800      	ldr	r0, [r0, #0]
   10d32:	f011 fefc 	bl	22b2e <wifi_nrf_osal_log_info>
   10d36:	e7bf      	b.n	10cb8 <wifi_nrf_fmac_otp_mac_addr_get+0x20>
   10d38:	00035752 	.word	0x00035752
   10d3c:	00034017 	.word	0x00034017
   10d40:	000353ca 	.word	0x000353ca
   10d44:	000353f6 	.word	0x000353f6
   10d48:	0003541a 	.word	0x0003541a

00010d4c <wifi_nrf_fmac_rf_params_get>:


enum wifi_nrf_status wifi_nrf_fmac_rf_params_get(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
						 unsigned char *rf_params)
{
   10d4c:	b570      	push	{r4, r5, r6, lr}
				      "%s: Invalid parameters\n",
				      __func__);
		goto out;
	}

	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10d4e:	6803      	ldr	r3, [r0, #0]
{
   10d50:	4604      	mov	r4, r0
	if (!fmac_dev_ctx || !rf_params) {
   10d52:	460d      	mov	r5, r1
	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10d54:	6818      	ldr	r0, [r3, #0]
{
   10d56:	b0b0      	sub	sp, #192	; 0xc0
	if (!fmac_dev_ctx || !rf_params) {
   10d58:	b931      	cbnz	r1, 10d68 <wifi_nrf_fmac_rf_params_get+0x1c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10d5a:	4a5b      	ldr	r2, [pc, #364]	; (10ec8 <wifi_nrf_fmac_rf_params_get+0x17c>)
   10d5c:	495b      	ldr	r1, [pc, #364]	; (10ecc <wifi_nrf_fmac_rf_params_get+0x180>)
					    rf_params,
					    NRF_WIFI_RF_PARAMS_SIZE,
					    NRF_WIFI_DEF_RF_PARAMS);

	if (ret == -1) {
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10d5e:	f011 fef5 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10d62:	f04f 36ff 	mov.w	r6, #4294967295
   10d66:	e011      	b.n	10d8c <wifi_nrf_fmac_rf_params_get+0x40>
	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10d68:	23bc      	movs	r3, #188	; 0xbc
   10d6a:	22ff      	movs	r2, #255	; 0xff
   10d6c:	a901      	add	r1, sp, #4
   10d6e:	f011 fea6 	bl	22abe <wifi_nrf_osal_mem_set>
	status = wifi_nrf_hal_otp_info_get(fmac_dev_ctx->hal_dev_ctx,
   10d72:	68a0      	ldr	r0, [r4, #8]
   10d74:	aa2f      	add	r2, sp, #188	; 0xbc
   10d76:	a901      	add	r1, sp, #4
   10d78:	f7fe f8aa 	bl	eed0 <wifi_nrf_hal_otp_info_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   10d7c:	4606      	mov	r6, r0
   10d7e:	6820      	ldr	r0, [r4, #0]
   10d80:	b13e      	cbz	r6, 10d92 <wifi_nrf_fmac_rf_params_get+0x46>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10d82:	4a51      	ldr	r2, [pc, #324]	; (10ec8 <wifi_nrf_fmac_rf_params_get+0x17c>)
   10d84:	4952      	ldr	r1, [pc, #328]	; (10ed0 <wifi_nrf_fmac_rf_params_get+0x184>)
   10d86:	6800      	ldr	r0, [r0, #0]
   10d88:	f011 fee0 	bl	22b4c <wifi_nrf_osal_log_err>
	}

	status = WIFI_NRF_STATUS_SUCCESS;
out:
	return status;
}
   10d8c:	4630      	mov	r0, r6
   10d8e:	b030      	add	sp, #192	; 0xc0
   10d90:	bd70      	pop	{r4, r5, r6, pc}
	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10d92:	23c8      	movs	r3, #200	; 0xc8
   10d94:	22ff      	movs	r2, #255	; 0xff
   10d96:	4629      	mov	r1, r5
   10d98:	6800      	ldr	r0, [r0, #0]
   10d9a:	f011 fe90 	bl	22abe <wifi_nrf_osal_mem_set>
	ret = nrf_wifi_utils_hex_str_to_val(fmac_dev_ctx->fpriv->opriv,
   10d9e:	6820      	ldr	r0, [r4, #0]
   10da0:	22c8      	movs	r2, #200	; 0xc8
   10da2:	4629      	mov	r1, r5
   10da4:	4b4b      	ldr	r3, [pc, #300]	; (10ed4 <wifi_nrf_fmac_rf_params_get+0x188>)
   10da6:	6800      	ldr	r0, [r0, #0]
   10da8:	f7fd fa80 	bl	e2ac <nrf_wifi_utils_hex_str_to_val>
	if (ret == -1) {
   10dac:	3001      	adds	r0, #1
   10dae:	d104      	bne.n	10dba <wifi_nrf_fmac_rf_params_get+0x6e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10db0:	6823      	ldr	r3, [r4, #0]
   10db2:	4a45      	ldr	r2, [pc, #276]	; (10ec8 <wifi_nrf_fmac_rf_params_get+0x17c>)
   10db4:	4948      	ldr	r1, [pc, #288]	; (10ed8 <wifi_nrf_fmac_rf_params_get+0x18c>)
   10db6:	6818      	ldr	r0, [r3, #0]
   10db8:	e7d1      	b.n	10d5e <wifi_nrf_fmac_rf_params_get+0x12>
	if (!(otp_info.flags & (~CALIB_XO_FLAG_MASK))) {
   10dba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10dbc:	071b      	lsls	r3, r3, #28
   10dbe:	d406      	bmi.n	10dce <wifi_nrf_fmac_rf_params_get+0x82>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10dc0:	6820      	ldr	r0, [r4, #0]
   10dc2:	2301      	movs	r3, #1
   10dc4:	6800      	ldr	r0, [r0, #0]
   10dc6:	aa26      	add	r2, sp, #152	; 0x98
   10dc8:	1da9      	adds	r1, r5, #6
   10dca:	f011 fe6e 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_PDADJM7_FLAG_MASK))) {
   10dce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10dd0:	06d8      	lsls	r0, r3, #27
   10dd2:	d406      	bmi.n	10de2 <wifi_nrf_fmac_rf_params_get+0x96>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10dd4:	6820      	ldr	r0, [r4, #0]
   10dd6:	2304      	movs	r3, #4
   10dd8:	6800      	ldr	r0, [r0, #0]
   10dda:	aa27      	add	r2, sp, #156	; 0x9c
   10ddc:	1de9      	adds	r1, r5, #7
   10dde:	f011 fe64 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_PDADJM0_FLAG_MASK))) {
   10de2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10de4:	0699      	lsls	r1, r3, #26
   10de6:	d407      	bmi.n	10df8 <wifi_nrf_fmac_rf_params_get+0xac>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10de8:	6820      	ldr	r0, [r4, #0]
   10dea:	2304      	movs	r3, #4
   10dec:	6800      	ldr	r0, [r0, #0]
   10dee:	aa28      	add	r2, sp, #160	; 0xa0
   10df0:	f105 010b 	add.w	r1, r5, #11
   10df4:	f011 fe59 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_PWR2G_FLAG_MASK))) {
   10df8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10dfa:	065a      	lsls	r2, r3, #25
   10dfc:	d410      	bmi.n	10e20 <wifi_nrf_fmac_rf_params_get+0xd4>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10dfe:	6820      	ldr	r0, [r4, #0]
   10e00:	2301      	movs	r3, #1
   10e02:	aa29      	add	r2, sp, #164	; 0xa4
   10e04:	f105 010f 	add.w	r1, r5, #15
   10e08:	6800      	ldr	r0, [r0, #0]
   10e0a:	f011 fe4e 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e0e:	6820      	ldr	r0, [r4, #0]
   10e10:	2302      	movs	r3, #2
   10e12:	6800      	ldr	r0, [r0, #0]
   10e14:	f10d 02a5 	add.w	r2, sp, #165	; 0xa5
   10e18:	f105 0110 	add.w	r1, r5, #16
   10e1c:	f011 fe45 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_PWR5GM7_FLAG_MASK))) {
   10e20:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10e22:	061b      	lsls	r3, r3, #24
   10e24:	d407      	bmi.n	10e36 <wifi_nrf_fmac_rf_params_get+0xea>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e26:	6820      	ldr	r0, [r4, #0]
   10e28:	2303      	movs	r3, #3
   10e2a:	6800      	ldr	r0, [r0, #0]
   10e2c:	aa2a      	add	r2, sp, #168	; 0xa8
   10e2e:	f105 0112 	add.w	r1, r5, #18
   10e32:	f011 fe3a 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_PWR5GM0_FLAG_MASK))) {
   10e36:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10e38:	05d8      	lsls	r0, r3, #23
   10e3a:	d407      	bmi.n	10e4c <wifi_nrf_fmac_rf_params_get+0x100>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e3c:	6820      	ldr	r0, [r4, #0]
   10e3e:	2303      	movs	r3, #3
   10e40:	6800      	ldr	r0, [r0, #0]
   10e42:	aa2b      	add	r2, sp, #172	; 0xac
   10e44:	f105 0115 	add.w	r1, r5, #21
   10e48:	f011 fe2f 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_RXGNOFF_FLAG_MASK))) {
   10e4c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10e4e:	0599      	lsls	r1, r3, #22
   10e50:	d407      	bmi.n	10e62 <wifi_nrf_fmac_rf_params_get+0x116>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e52:	6820      	ldr	r0, [r4, #0]
   10e54:	2304      	movs	r3, #4
   10e56:	6800      	ldr	r0, [r0, #0]
   10e58:	aa2c      	add	r2, sp, #176	; 0xb0
   10e5a:	f105 0118 	add.w	r1, r5, #24
   10e5e:	f011 fe24 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_TXPOWBACKOFFT_FLAG_MASK))) {
   10e62:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10e64:	055a      	lsls	r2, r3, #21
   10e66:	d422      	bmi.n	10eae <wifi_nrf_fmac_rf_params_get+0x162>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e68:	6820      	ldr	r0, [r4, #0]
   10e6a:	2301      	movs	r3, #1
   10e6c:	aa2d      	add	r2, sp, #180	; 0xb4
   10e6e:	f105 011e 	add.w	r1, r5, #30
   10e72:	6800      	ldr	r0, [r0, #0]
   10e74:	f011 fe19 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e78:	6820      	ldr	r0, [r4, #0]
   10e7a:	2301      	movs	r3, #1
   10e7c:	f10d 02b5 	add.w	r2, sp, #181	; 0xb5
   10e80:	f105 011f 	add.w	r1, r5, #31
   10e84:	6800      	ldr	r0, [r0, #0]
   10e86:	f011 fe10 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e8a:	6820      	ldr	r0, [r4, #0]
   10e8c:	2301      	movs	r3, #1
   10e8e:	f10d 02b6 	add.w	r2, sp, #182	; 0xb6
   10e92:	f105 0120 	add.w	r1, r5, #32
   10e96:	6800      	ldr	r0, [r0, #0]
   10e98:	f011 fe07 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10e9c:	6820      	ldr	r0, [r4, #0]
   10e9e:	2301      	movs	r3, #1
   10ea0:	6800      	ldr	r0, [r0, #0]
   10ea2:	f10d 02b7 	add.w	r2, sp, #183	; 0xb7
   10ea6:	f105 0121 	add.w	r1, r5, #33	; 0x21
   10eaa:	f011 fdfe 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	if (!(otp_info.flags & (~CALIB_TXPOWBACKOFFV_FLAG_MASK))) {
   10eae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   10eb0:	051b      	lsls	r3, r3, #20
   10eb2:	f53f af6b 	bmi.w	10d8c <wifi_nrf_fmac_rf_params_get+0x40>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   10eb6:	6820      	ldr	r0, [r4, #0]
   10eb8:	2304      	movs	r3, #4
   10eba:	aa2e      	add	r2, sp, #184	; 0xb8
   10ebc:	f105 0122 	add.w	r1, r5, #34	; 0x22
   10ec0:	6800      	ldr	r0, [r0, #0]
   10ec2:	f011 fdf2 	bl	22aaa <wifi_nrf_osal_mem_cpy>
   10ec6:	e761      	b.n	10d8c <wifi_nrf_fmac_rf_params_get+0x40>
   10ec8:	00035736 	.word	0x00035736
   10ecc:	00034017 	.word	0x00034017
   10ed0:	000353ca 	.word	0x000353ca
   10ed4:	0003544f 	.word	0x0003544f
   10ed8:	00035586 	.word	0x00035586

00010edc <wifi_nrf_fmac_dev_init>:
{
   10edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ee0:	460e      	mov	r6, r1
   10ee2:	4617      	mov	r7, r2
   10ee4:	4698      	mov	r8, r3
	if (!fmac_dev_ctx) {
   10ee6:	4604      	mov	r4, r0
{
   10ee8:	b0e6      	sub	sp, #408	; 0x198
	if (!fmac_dev_ctx) {
   10eea:	b908      	cbnz	r0, 10ef0 <wifi_nrf_fmac_dev_init+0x14>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10eec:	6803      	ldr	r3, [r0, #0]
   10eee:	deff      	udf	#255	; 0xff
	status = wifi_nrf_hal_dev_init(fmac_dev_ctx->hal_dev_ctx);
   10ef0:	6880      	ldr	r0, [r0, #8]
   10ef2:	f7fd febf 	bl	ec74 <wifi_nrf_hal_dev_init>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   10ef6:	4605      	mov	r5, r0
   10ef8:	6820      	ldr	r0, [r4, #0]
   10efa:	b12d      	cbz	r5, 10f08 <wifi_nrf_fmac_dev_init+0x2c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10efc:	4a5a      	ldr	r2, [pc, #360]	; (11068 <wifi_nrf_fmac_dev_init+0x18c>)
   10efe:	495b      	ldr	r1, [pc, #364]	; (1106c <wifi_nrf_fmac_dev_init+0x190>)
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10f00:	6800      	ldr	r0, [r0, #0]
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10f02:	f011 fe23 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
   10f06:	e028      	b.n	10f5a <wifi_nrf_fmac_dev_init+0x7e>
	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10f08:	23bc      	movs	r3, #188	; 0xbc
   10f0a:	22ff      	movs	r2, #255	; 0xff
   10f0c:	a905      	add	r1, sp, #20
   10f0e:	6800      	ldr	r0, [r0, #0]
   10f10:	f011 fdd5 	bl	22abe <wifi_nrf_osal_mem_set>
	status = wifi_nrf_hal_otp_info_get(fmac_dev_ctx->hal_dev_ctx,
   10f14:	68a0      	ldr	r0, [r4, #8]
   10f16:	aa33      	add	r2, sp, #204	; 0xcc
   10f18:	a905      	add	r1, sp, #20
   10f1a:	f7fd ffd9 	bl	eed0 <wifi_nrf_hal_otp_info_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   10f1e:	4605      	mov	r5, r0
   10f20:	6820      	ldr	r0, [r4, #0]
   10f22:	b115      	cbz	r5, 10f2a <wifi_nrf_fmac_dev_init+0x4e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10f24:	4a50      	ldr	r2, [pc, #320]	; (11068 <wifi_nrf_fmac_dev_init+0x18c>)
   10f26:	4952      	ldr	r1, [pc, #328]	; (11070 <wifi_nrf_fmac_dev_init+0x194>)
   10f28:	e7ea      	b.n	10f00 <wifi_nrf_fmac_dev_init+0x24>
	wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   10f2a:	23c8      	movs	r3, #200	; 0xc8
   10f2c:	22ff      	movs	r2, #255	; 0xff
   10f2e:	6800      	ldr	r0, [r0, #0]
   10f30:	a934      	add	r1, sp, #208	; 0xd0
   10f32:	f011 fdc4 	bl	22abe <wifi_nrf_osal_mem_set>
	if (rf_params_usr) {
   10f36:	b1a6      	cbz	r6, 10f62 <wifi_nrf_fmac_dev_init+0x86>
		ret = nrf_wifi_utils_hex_str_to_val(fmac_dev_ctx->fpriv->opriv,
   10f38:	6820      	ldr	r0, [r4, #0]
   10f3a:	4633      	mov	r3, r6
   10f3c:	22c8      	movs	r2, #200	; 0xc8
   10f3e:	6800      	ldr	r0, [r0, #0]
   10f40:	a934      	add	r1, sp, #208	; 0xd0
   10f42:	f7fd f9b3 	bl	e2ac <nrf_wifi_utils_hex_str_to_val>
		if (ret == -1) {
   10f46:	3001      	adds	r0, #1
   10f48:	d116      	bne.n	10f78 <wifi_nrf_fmac_dev_init+0x9c>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10f4a:	6823      	ldr	r3, [r4, #0]
   10f4c:	4a46      	ldr	r2, [pc, #280]	; (11068 <wifi_nrf_fmac_dev_init+0x18c>)
   10f4e:	4949      	ldr	r1, [pc, #292]	; (11074 <wifi_nrf_fmac_dev_init+0x198>)
   10f50:	6818      	ldr	r0, [r3, #0]
   10f52:	f011 fdfb 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   10f56:	f04f 35ff 	mov.w	r5, #4294967295
}
   10f5a:	4628      	mov	r0, r5
   10f5c:	b066      	add	sp, #408	; 0x198
   10f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = wifi_nrf_fmac_rf_params_get(fmac_dev_ctx,
   10f62:	4620      	mov	r0, r4
   10f64:	a934      	add	r1, sp, #208	; 0xd0
   10f66:	f7ff fef1 	bl	10d4c <wifi_nrf_fmac_rf_params_get>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10f6a:	4605      	mov	r5, r0
   10f6c:	b120      	cbz	r0, 10f78 <wifi_nrf_fmac_dev_init+0x9c>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10f6e:	6823      	ldr	r3, [r4, #0]
   10f70:	4a3d      	ldr	r2, [pc, #244]	; (11068 <wifi_nrf_fmac_dev_init+0x18c>)
   10f72:	4941      	ldr	r1, [pc, #260]	; (11078 <wifi_nrf_fmac_dev_init+0x19c>)
   10f74:	6818      	ldr	r0, [r3, #0]
   10f76:	e7c4      	b.n	10f02 <wifi_nrf_fmac_dev_init+0x26>
	fpriv = fmac_dev_ctx->fpriv;
   10f78:	6823      	ldr	r3, [r4, #0]
	size = (fpriv->num_rx_bufs * sizeof(struct wifi_nrf_fmac_buf_map_info));
   10f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
	fmac_dev_ctx->rx_buf_info = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   10f7c:	6818      	ldr	r0, [r3, #0]
   10f7e:	00c9      	lsls	r1, r1, #3
   10f80:	f011 fd8b 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
   10f84:	61a0      	str	r0, [r4, #24]
	if (!fmac_dev_ctx->rx_buf_info) {
   10f86:	2800      	cmp	r0, #0
   10f88:	d146      	bne.n	11018 <wifi_nrf_fmac_dev_init+0x13c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10f8a:	6823      	ldr	r3, [r4, #0]
   10f8c:	4a3b      	ldr	r2, [pc, #236]	; (1107c <wifi_nrf_fmac_dev_init+0x1a0>)
   10f8e:	6818      	ldr	r0, [r3, #0]
   10f90:	493b      	ldr	r1, [pc, #236]	; (11080 <wifi_nrf_fmac_dev_init+0x1a4>)
   10f92:	f011 fddb 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10f96:	6823      	ldr	r3, [r4, #0]
   10f98:	4a3a      	ldr	r2, [pc, #232]	; (11084 <wifi_nrf_fmac_dev_init+0x1a8>)
   10f9a:	493b      	ldr	r1, [pc, #236]	; (11088 <wifi_nrf_fmac_dev_init+0x1ac>)
   10f9c:	6818      	ldr	r0, [r3, #0]
   10f9e:	f011 fdd5 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10fa2:	6823      	ldr	r3, [r4, #0]
   10fa4:	4a30      	ldr	r2, [pc, #192]	; (11068 <wifi_nrf_fmac_dev_init+0x18c>)
   10fa6:	4939      	ldr	r1, [pc, #228]	; (1108c <wifi_nrf_fmac_dev_init+0x1b0>)
   10fa8:	e7d2      	b.n	10f50 <wifi_nrf_fmac_dev_init+0x74>
		status = wifi_nrf_fmac_rx_cmd_send(fmac_dev_ctx,
   10faa:	4632      	mov	r2, r6
   10fac:	2100      	movs	r1, #0
   10fae:	4620      	mov	r0, r4
   10fb0:	f000 fe7a 	bl	11ca8 <wifi_nrf_fmac_rx_cmd_send>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   10fb4:	4605      	mov	r5, r0
   10fb6:	b178      	cbz	r0, 10fd8 <wifi_nrf_fmac_dev_init+0xfc>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10fb8:	6820      	ldr	r0, [r4, #0]
   10fba:	4633      	mov	r3, r6
   10fbc:	4a2f      	ldr	r2, [pc, #188]	; (1107c <wifi_nrf_fmac_dev_init+0x1a0>)
   10fbe:	4934      	ldr	r1, [pc, #208]	; (11090 <wifi_nrf_fmac_dev_init+0x1b4>)
   10fc0:	6800      	ldr	r0, [r0, #0]
   10fc2:	f011 fdc3 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   10fc6:	6823      	ldr	r3, [r4, #0]
   10fc8:	4a2e      	ldr	r2, [pc, #184]	; (11084 <wifi_nrf_fmac_dev_init+0x1a8>)
   10fca:	492f      	ldr	r1, [pc, #188]	; (11088 <wifi_nrf_fmac_dev_init+0x1ac>)
   10fcc:	6818      	ldr	r0, [r3, #0]
   10fce:	f011 fdbd 	bl	22b4c <wifi_nrf_osal_log_err>
	if (status == WIFI_NRF_STATUS_FAIL) {
   10fd2:	1c6b      	adds	r3, r5, #1
   10fd4:	d1c1      	bne.n	10f5a <wifi_nrf_fmac_dev_init+0x7e>
   10fd6:	e7e4      	b.n	10fa2 <wifi_nrf_fmac_dev_init+0xc6>
	for (desc_id = 0; desc_id < fmac_dev_ctx->fpriv->num_rx_bufs; desc_id++) {
   10fd8:	3601      	adds	r6, #1
   10fda:	6823      	ldr	r3, [r4, #0]
   10fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   10fde:	4296      	cmp	r6, r2
   10fe0:	d3e3      	bcc.n	10faa <wifi_nrf_fmac_dev_init+0xce>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   10fe2:	2d00      	cmp	r5, #0
   10fe4:	d1d8      	bne.n	10f98 <wifi_nrf_fmac_dev_init+0xbc>
	status = umac_cmd_init(fmac_dev_ctx,
   10fe6:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
   10fe8:	3308      	adds	r3, #8
   10fea:	9203      	str	r2, [sp, #12]
   10fec:	f89d 21b0 	ldrb.w	r2, [sp, #432]	; 0x1b0
   10ff0:	4620      	mov	r0, r4
   10ff2:	e9cd 8201 	strd	r8, r2, [sp, #4]
   10ff6:	9700      	str	r7, [sp, #0]
   10ff8:	2201      	movs	r2, #1
   10ffa:	a934      	add	r1, sp, #208	; 0xd0
   10ffc:	f7fe ff42 	bl	fe84 <umac_cmd_init>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   11000:	6823      	ldr	r3, [r4, #0]
   11002:	4605      	mov	r5, r0
   11004:	b160      	cbz	r0, 11020 <wifi_nrf_fmac_dev_init+0x144>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11006:	4a1f      	ldr	r2, [pc, #124]	; (11084 <wifi_nrf_fmac_dev_init+0x1a8>)
   11008:	4922      	ldr	r1, [pc, #136]	; (11094 <wifi_nrf_fmac_dev_init+0x1b8>)
   1100a:	6818      	ldr	r0, [r3, #0]
   1100c:	f011 fd9e 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_fmac_deinit_rx(fmac_dev_ctx);
   11010:	4620      	mov	r0, r4
   11012:	f7ff f8f5 	bl	10200 <wifi_nrf_fmac_deinit_rx.isra.0>
		goto out;
   11016:	e7dc      	b.n	10fd2 <wifi_nrf_fmac_dev_init+0xf6>
	for (desc_id = 0; desc_id < fmac_dev_ctx->fpriv->num_rx_bufs; desc_id++) {
   11018:	2600      	movs	r6, #0
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   1101a:	f04f 35ff 	mov.w	r5, #4294967295
   1101e:	e7dc      	b.n	10fda <wifi_nrf_fmac_dev_init+0xfe>
	start_time_us = wifi_nrf_osal_time_get_curr_us(fmac_dev_ctx->fpriv->opriv);
   11020:	6818      	ldr	r0, [r3, #0]
   11022:	f011 fe1e 	bl	22c62 <wifi_nrf_osal_time_get_curr_us>
   11026:	4606      	mov	r6, r0
		if (wifi_nrf_osal_time_elapsed_us(fmac_dev_ctx->fpriv->opriv,
   11028:	4f1b      	ldr	r7, [pc, #108]	; (11098 <wifi_nrf_fmac_dev_init+0x1bc>)
	while (!fmac_dev_ctx->fw_init_done) {
   1102a:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
   1102e:	2b00      	cmp	r3, #0
   11030:	d193      	bne.n	10f5a <wifi_nrf_fmac_dev_init+0x7e>
		wifi_nrf_osal_sleep_ms(fmac_dev_ctx->fpriv->opriv, 1);
   11032:	6823      	ldr	r3, [r4, #0]
   11034:	2101      	movs	r1, #1
   11036:	6818      	ldr	r0, [r3, #0]
   11038:	f011 fe09 	bl	22c4e <wifi_nrf_osal_sleep_ms>
		if (wifi_nrf_osal_time_elapsed_us(fmac_dev_ctx->fpriv->opriv,
   1103c:	6823      	ldr	r3, [r4, #0]
   1103e:	4631      	mov	r1, r6
   11040:	6818      	ldr	r0, [r3, #0]
   11042:	f011 fe12 	bl	22c6a <wifi_nrf_osal_time_elapsed_us>
   11046:	42b8      	cmp	r0, r7
   11048:	d9ef      	bls.n	1102a <wifi_nrf_fmac_dev_init+0x14e>
	if (!fmac_dev_ctx->fw_init_done) {
   1104a:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
   1104e:	2b00      	cmp	r3, #0
   11050:	d183      	bne.n	10f5a <wifi_nrf_fmac_dev_init+0x7e>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11052:	6823      	ldr	r3, [r4, #0]
   11054:	4a0b      	ldr	r2, [pc, #44]	; (11084 <wifi_nrf_fmac_dev_init+0x1a8>)
   11056:	4911      	ldr	r1, [pc, #68]	; (1109c <wifi_nrf_fmac_dev_init+0x1c0>)
   11058:	6818      	ldr	r0, [r3, #0]
   1105a:	f011 fd77 	bl	22b4c <wifi_nrf_osal_log_err>
		wifi_nrf_fmac_deinit_rx(fmac_dev_ctx);
   1105e:	4620      	mov	r0, r4
   11060:	f7ff f8ce 	bl	10200 <wifi_nrf_fmac_deinit_rx.isra.0>
	if (status == WIFI_NRF_STATUS_FAIL) {
   11064:	e79d      	b.n	10fa2 <wifi_nrf_fmac_dev_init+0xc6>
   11066:	bf00      	nop
   11068:	0003595a 	.word	0x0003595a
   1106c:	000355c2 	.word	0x000355c2
   11070:	000353ca 	.word	0x000353ca
   11074:	000355e4 	.word	0x000355e4
   11078:	000355ff 	.word	0x000355ff
   1107c:	0003592e 	.word	0x0003592e
   11080:	0003561d 	.word	0x0003561d
   11084:	00035944 	.word	0x00035944
   11088:	0003563b 	.word	0x0003563b
   1108c:	000356bb 	.word	0x000356bb
   11090:	0003564f 	.word	0x0003564f
   11094:	0003568c 	.word	0x0003568c
   11098:	004c4b3f 	.word	0x004c4b3f
   1109c:	000356a2 	.word	0x000356a2

000110a0 <wifi_nrf_fmac_set_reg>:


enum wifi_nrf_status wifi_nrf_fmac_set_reg(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
					   struct wifi_nrf_fmac_reg_info *reg_info)
{
   110a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				      "%s: Invalid parameters\n",
				      __func__);
		goto out;
	}

	set_reg_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   110a4:	6803      	ldr	r3, [r0, #0]
{
   110a6:	4606      	mov	r6, r0
	if (!fmac_dev_ctx || !reg_info) {
   110a8:	460f      	mov	r7, r1
	set_reg_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   110aa:	6818      	ldr	r0, [r3, #0]
	if (!fmac_dev_ctx || !reg_info) {
   110ac:	b941      	cbnz	r1, 110c0 <wifi_nrf_fmac_set_reg+0x20>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   110ae:	4a21      	ldr	r2, [pc, #132]	; (11134 <wifi_nrf_fmac_set_reg+0x94>)
   110b0:	4921      	ldr	r1, [pc, #132]	; (11138 <wifi_nrf_fmac_set_reg+0x98>)
   110b2:	f011 fd4b 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   110b6:	f04f 35ff 	mov.w	r5, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       set_reg_cmd);
	}

	return status;
}
   110ba:	4628      	mov	r0, r5
   110bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	set_reg_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   110c0:	212e      	movs	r1, #46	; 0x2e
   110c2:	f011 fcea 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
	if (!set_reg_cmd) {
   110c6:	4604      	mov	r4, r0
   110c8:	b920      	cbnz	r0, 110d4 <wifi_nrf_fmac_set_reg+0x34>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   110ca:	6833      	ldr	r3, [r6, #0]
   110cc:	4a19      	ldr	r2, [pc, #100]	; (11134 <wifi_nrf_fmac_set_reg+0x94>)
   110ce:	491b      	ldr	r1, [pc, #108]	; (1113c <wifi_nrf_fmac_set_reg+0x9c>)
   110d0:	6818      	ldr	r0, [r3, #0]
   110d2:	e7ee      	b.n	110b2 <wifi_nrf_fmac_set_reg+0x12>
	set_reg_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_REQ_SET_REG;
   110d4:	2500      	movs	r5, #0
   110d6:	f04f 082e 	mov.w	r8, #46	; 0x2e
   110da:	7245      	strb	r5, [r0, #9]
   110dc:	f880 8008 	strb.w	r8, [r0, #8]
   110e0:	7285      	strb	r5, [r0, #10]
   110e2:	72c5      	strb	r5, [r0, #11]
	set_reg_cmd->umac_hdr.ids.valid_fields = 0;
   110e4:	7405      	strb	r5, [r0, #16]
   110e6:	7445      	strb	r5, [r0, #17]
   110e8:	7485      	strb	r5, [r0, #18]
   110ea:	74c5      	strb	r5, [r0, #19]
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   110ec:	6830      	ldr	r0, [r6, #0]
   110ee:	463a      	mov	r2, r7
   110f0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   110f4:	2302      	movs	r3, #2
   110f6:	6800      	ldr	r0, [r0, #0]
   110f8:	f011 fcd7 	bl	22aaa <wifi_nrf_osal_mem_cpy>
	set_reg_cmd->valid_fields = NRF_WIFI_CMD_REQ_SET_REG_ALPHA2_VALID;
   110fc:	2301      	movs	r3, #1
   110fe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
   11102:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
   11106:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
   1110a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (reg_info->force) {
   1110e:	78bb      	ldrb	r3, [r7, #2]
	status = umac_cmd_cfg(fmac_dev_ctx,
   11110:	4621      	mov	r1, r4
		set_reg_cmd->valid_fields |= NRF_WIFI_CMD_REQ_SET_REG_USER_REG_FORCE;
   11112:	42ab      	cmp	r3, r5
   11114:	bf0c      	ite	eq
   11116:	2301      	moveq	r3, #1
   11118:	2305      	movne	r3, #5
	status = umac_cmd_cfg(fmac_dev_ctx,
   1111a:	4642      	mov	r2, r8
   1111c:	6263      	str	r3, [r4, #36]	; 0x24
   1111e:	4630      	mov	r0, r6
   11120:	f7fe fe7e 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   11124:	6833      	ldr	r3, [r6, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   11126:	4605      	mov	r5, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   11128:	4621      	mov	r1, r4
   1112a:	6818      	ldr	r0, [r3, #0]
   1112c:	f011 fcb9 	bl	22aa2 <wifi_nrf_osal_mem_free>
   11130:	e7c3      	b.n	110ba <wifi_nrf_fmac_set_reg+0x1a>
   11132:	bf00      	nop
   11134:	00035720 	.word	0x00035720
   11138:	00034017 	.word	0x00034017
   1113c:	00035285 	.word	0x00035285

00011140 <wifi_nrf_fmac_set_listen_interval>:


enum wifi_nrf_status wifi_nrf_fmac_set_listen_interval(void *dev_ctx,
						       unsigned char if_idx,
						       unsigned short listen_interval)
{
   11140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_wifi_umac_cmd_set_listen_interval *set_listen_interval_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	fmac_dev_ctx = dev_ctx;

	set_listen_interval_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   11142:	6803      	ldr	r3, [r0, #0]
{
   11144:	4605      	mov	r5, r0
   11146:	460f      	mov	r7, r1
	set_listen_interval_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   11148:	6818      	ldr	r0, [r3, #0]
   1114a:	2126      	movs	r1, #38	; 0x26
{
   1114c:	4616      	mov	r6, r2
	set_listen_interval_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   1114e:	f011 fca4 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
					      sizeof(*set_listen_interval_cmd));

	if (!set_listen_interval_cmd) {
   11152:	4604      	mov	r4, r0
   11154:	b948      	cbnz	r0, 1116a <wifi_nrf_fmac_set_listen_interval+0x2a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11156:	682b      	ldr	r3, [r5, #0]
   11158:	4a10      	ldr	r2, [pc, #64]	; (1119c <wifi_nrf_fmac_set_listen_interval+0x5c>)
   1115a:	4911      	ldr	r1, [pc, #68]	; (111a0 <wifi_nrf_fmac_set_listen_interval+0x60>)
   1115c:	6818      	ldr	r0, [r3, #0]
   1115e:	f011 fcf5 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   11162:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       set_listen_interval_cmd);
	}

	return status;
}
   11166:	4630      	mov	r0, r6
   11168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_listen_interval_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_LISTEN_INTERVAL;
   1116a:	2300      	movs	r3, #0
   1116c:	2238      	movs	r2, #56	; 0x38
   1116e:	7243      	strb	r3, [r0, #9]
   11170:	7283      	strb	r3, [r0, #10]
   11172:	72c3      	strb	r3, [r0, #11]
	set_listen_interval_cmd->umac_hdr.ids.wdev_id = if_idx;
   11174:	6203      	str	r3, [r0, #32]
	set_listen_interval_cmd->umac_hdr.ids.valid_fields |=
   11176:	6903      	ldr	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   11178:	4601      	mov	r1, r0
	set_listen_interval_cmd->umac_hdr.ids.valid_fields |=
   1117a:	f043 0301 	orr.w	r3, r3, #1
	set_listen_interval_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_SET_LISTEN_INTERVAL;
   1117e:	7202      	strb	r2, [r0, #8]
	set_listen_interval_cmd->umac_hdr.ids.wdev_id = if_idx;
   11180:	61c7      	str	r7, [r0, #28]
	set_listen_interval_cmd->umac_hdr.ids.valid_fields |=
   11182:	6103      	str	r3, [r0, #16]
	set_listen_interval_cmd->listen_interval = listen_interval;
   11184:	8486      	strh	r6, [r0, #36]	; 0x24
	status = umac_cmd_cfg(fmac_dev_ctx,
   11186:	2226      	movs	r2, #38	; 0x26
   11188:	4628      	mov	r0, r5
   1118a:	f7fe fe49 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   1118e:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   11190:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   11192:	4621      	mov	r1, r4
   11194:	6818      	ldr	r0, [r3, #0]
   11196:	f011 fc84 	bl	22aa2 <wifi_nrf_osal_mem_free>
   1119a:	e7e4      	b.n	11166 <wifi_nrf_fmac_set_listen_interval+0x26>
   1119c:	000356fe 	.word	0x000356fe
   111a0:	00035285 	.word	0x00035285

000111a4 <wifi_nrf_fmac_set_ps_wakeup_mode>:


enum wifi_nrf_status wifi_nrf_fmac_set_ps_wakeup_mode(void *dev_ctx,
						      unsigned char if_idx,
						      bool ps_wakeup_mode)
{
   111a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_wifi_umac_cmd_config_extended_ps *set_ps_wakeup_mode_cmd = NULL;
	struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx = NULL;

	fmac_dev_ctx = dev_ctx;

	set_ps_wakeup_mode_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   111a6:	6803      	ldr	r3, [r0, #0]
{
   111a8:	4605      	mov	r5, r0
   111aa:	460f      	mov	r7, r1
	set_ps_wakeup_mode_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   111ac:	6818      	ldr	r0, [r3, #0]
   111ae:	2125      	movs	r1, #37	; 0x25
{
   111b0:	4616      	mov	r6, r2
	set_ps_wakeup_mode_cmd = wifi_nrf_osal_mem_zalloc(fmac_dev_ctx->fpriv->opriv,
   111b2:	f011 fc72 	bl	22a9a <wifi_nrf_osal_mem_zalloc>
							  sizeof(*set_ps_wakeup_mode_cmd));

	if (!set_ps_wakeup_mode_cmd) {
   111b6:	4604      	mov	r4, r0
   111b8:	b948      	cbnz	r0, 111ce <wifi_nrf_fmac_set_ps_wakeup_mode+0x2a>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   111ba:	682b      	ldr	r3, [r5, #0]
   111bc:	4a11      	ldr	r2, [pc, #68]	; (11204 <wifi_nrf_fmac_set_ps_wakeup_mode+0x60>)
   111be:	4912      	ldr	r1, [pc, #72]	; (11208 <wifi_nrf_fmac_set_ps_wakeup_mode+0x64>)
   111c0:	6818      	ldr	r0, [r3, #0]
   111c2:	f011 fcc3 	bl	22b4c <wifi_nrf_osal_log_err>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   111c6:	f04f 36ff 	mov.w	r6, #4294967295
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
				       set_ps_wakeup_mode_cmd);
	}

	return status;
}
   111ca:	4630      	mov	r0, r6
   111cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_ps_wakeup_mode_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CONFIG_EXTENDED_PS;
   111ce:	2300      	movs	r3, #0
   111d0:	2239      	movs	r2, #57	; 0x39
   111d2:	7243      	strb	r3, [r0, #9]
   111d4:	7283      	strb	r3, [r0, #10]
   111d6:	72c3      	strb	r3, [r0, #11]
	set_ps_wakeup_mode_cmd->umac_hdr.ids.wdev_id = if_idx;
   111d8:	6203      	str	r3, [r0, #32]
	set_ps_wakeup_mode_cmd->umac_hdr.ids.valid_fields |=
   111da:	6903      	ldr	r3, [r0, #16]
	status = umac_cmd_cfg(fmac_dev_ctx,
   111dc:	4601      	mov	r1, r0
	set_ps_wakeup_mode_cmd->umac_hdr.ids.valid_fields |=
   111de:	f043 0301 	orr.w	r3, r3, #1
	set_ps_wakeup_mode_cmd->umac_hdr.cmd_evnt = NRF_WIFI_UMAC_CMD_CONFIG_EXTENDED_PS;
   111e2:	7202      	strb	r2, [r0, #8]
	set_ps_wakeup_mode_cmd->umac_hdr.ids.wdev_id = if_idx;
   111e4:	61c7      	str	r7, [r0, #28]
	set_ps_wakeup_mode_cmd->umac_hdr.ids.valid_fields |=
   111e6:	6103      	str	r3, [r0, #16]
	set_ps_wakeup_mode_cmd->enable_extended_ps = ps_wakeup_mode;
   111e8:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
	status = umac_cmd_cfg(fmac_dev_ctx,
   111ec:	2225      	movs	r2, #37	; 0x25
   111ee:	4628      	mov	r0, r5
   111f0:	f7fe fe16 	bl	fe20 <umac_cmd_cfg>
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   111f4:	682b      	ldr	r3, [r5, #0]
	status = umac_cmd_cfg(fmac_dev_ctx,
   111f6:	4606      	mov	r6, r0
		wifi_nrf_osal_mem_free(fmac_dev_ctx->fpriv->opriv,
   111f8:	4621      	mov	r1, r4
   111fa:	6818      	ldr	r0, [r3, #0]
   111fc:	f011 fc51 	bl	22aa2 <wifi_nrf_osal_mem_free>
   11200:	e7e3      	b.n	111ca <wifi_nrf_fmac_set_ps_wakeup_mode+0x26>
   11202:	bf00      	nop
   11204:	000356dd 	.word	0x000356dd
   11208:	00035285 	.word	0x00035285

0001120c <zep_shim_irq_handler>:
{
	struct zep_shim_intr_priv *intr_priv = NULL;

	intr_priv = (struct zep_shim_intr_priv *)cb;

	k_work_schedule_for_queue(&zep_wifi_intr_q, &intr_priv->work, K_NO_WAIT);
   1120c:	2200      	movs	r2, #0
   1120e:	2300      	movs	r3, #0
   11210:	4801      	ldr	r0, [pc, #4]	; (11218 <zep_shim_irq_handler+0xc>)
   11212:	3118      	adds	r1, #24
   11214:	f004 bd36 	b.w	15c84 <k_work_schedule_for_queue>
   11218:	20002598 	.word	0x20002598

0001121c <zep_shim_pr_info>:
{
   1121c:	b580      	push	{r7, lr}
   1121e:	b094      	sub	sp, #80	; 0x50
   11220:	af00      	add	r7, sp, #0
   11222:	4602      	mov	r2, r0
   11224:	460b      	mov	r3, r1
	vsnprintf(buf, sizeof(buf), fmt, args);
   11226:	4638      	mov	r0, r7
   11228:	2150      	movs	r1, #80	; 0x50
   1122a:	f007 ffa1 	bl	19170 <vsnprintf>
	LOG_INF("%s", buf);
   1122e:	b088      	sub	sp, #32
   11230:	466a      	mov	r2, sp
   11232:	4b09      	ldr	r3, [pc, #36]	; (11258 <zep_shim_pr_info+0x3c>)
   11234:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   11238:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1123c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11240:	8393      	strh	r3, [r2, #28]
   11242:	4b06      	ldr	r3, [pc, #24]	; (1125c <zep_shim_pr_info+0x40>)
   11244:	4806      	ldr	r0, [pc, #24]	; (11260 <zep_shim_pr_info+0x44>)
   11246:	f842 3f10 	str.w	r3, [r2, #16]!
   1124a:	f012 f81f 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   1124e:	2000      	movs	r0, #0
   11250:	3750      	adds	r7, #80	; 0x50
   11252:	46bd      	mov	sp, r7
   11254:	bd80      	pop	{r7, pc}
   11256:	bf00      	nop
   11258:	00032001 	.word	0x00032001
   1125c:	01000003 	.word	0x01000003
   11260:	00024d98 	.word	0x00024d98

00011264 <zep_shim_pr_err>:
{
   11264:	b580      	push	{r7, lr}
   11266:	b0c0      	sub	sp, #256	; 0x100
   11268:	af00      	add	r7, sp, #0
   1126a:	4602      	mov	r2, r0
   1126c:	460b      	mov	r3, r1
	vsnprintf(buf, sizeof(buf), fmt, args);
   1126e:	4638      	mov	r0, r7
   11270:	f44f 7180 	mov.w	r1, #256	; 0x100
   11274:	f007 ff7c 	bl	19170 <vsnprintf>
	LOG_ERR("%s", buf);
   11278:	b088      	sub	sp, #32
   1127a:	466a      	mov	r2, sp
   1127c:	4b09      	ldr	r3, [pc, #36]	; (112a4 <zep_shim_pr_err+0x40>)
   1127e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11282:	e9c2 3705 	strd	r3, r7, [r2, #20]
   11286:	f44f 7300 	mov.w	r3, #512	; 0x200
   1128a:	8393      	strh	r3, [r2, #28]
   1128c:	4b06      	ldr	r3, [pc, #24]	; (112a8 <zep_shim_pr_err+0x44>)
   1128e:	4807      	ldr	r0, [pc, #28]	; (112ac <zep_shim_pr_err+0x48>)
   11290:	f842 3f10 	str.w	r3, [r2, #16]!
   11294:	f011 fffa 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   11298:	2000      	movs	r0, #0
   1129a:	f507 7780 	add.w	r7, r7, #256	; 0x100
   1129e:	46bd      	mov	sp, r7
   112a0:	bd80      	pop	{r7, pc}
   112a2:	bf00      	nop
   112a4:	00032001 	.word	0x00032001
   112a8:	01000003 	.word	0x01000003
   112ac:	00024d98 	.word	0x00024d98

000112b0 <zep_shim_bus_qspi_intr_reg>:
}

static enum wifi_nrf_status zep_shim_bus_qspi_intr_reg(void *os_dev_ctx, void *callbk_data,
						       int (*callbk_fn)(void *callbk_data))
{
   112b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct zep_shim_intr_priv *intr_priv = NULL;
	int ret = -1;

	intr_priv = k_calloc(sizeof(*intr_priv), sizeof(char));
   112b2:	2048      	movs	r0, #72	; 0x48
{
   112b4:	460e      	mov	r6, r1
   112b6:	af00      	add	r7, sp, #0
	intr_priv = k_calloc(sizeof(*intr_priv), sizeof(char));
   112b8:	2101      	movs	r1, #1
{
   112ba:	4615      	mov	r5, r2
	intr_priv = k_calloc(sizeof(*intr_priv), sizeof(char));
   112bc:	f013 fabd 	bl	2483a <k_calloc>

	if (!intr_priv) {
   112c0:	4604      	mov	r4, r0
   112c2:	b9b0      	cbnz	r0, 112f2 <zep_shim_bus_qspi_intr_reg+0x42>
		LOG_ERR("%s: Unable to allocate memory for intr_priv\n", __func__);
   112c4:	466c      	mov	r4, sp
   112c6:	b088      	sub	sp, #32
   112c8:	466a      	mov	r2, sp
   112ca:	4b1b      	ldr	r3, [pc, #108]	; (11338 <zep_shim_bus_qspi_intr_reg+0x88>)
   112cc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   112d0:	6153      	str	r3, [r2, #20]
   112d2:	4b1a      	ldr	r3, [pc, #104]	; (1133c <zep_shim_bus_qspi_intr_reg+0x8c>)
   112d4:	481a      	ldr	r0, [pc, #104]	; (11340 <zep_shim_bus_qspi_intr_reg+0x90>)
   112d6:	6193      	str	r3, [r2, #24]
   112d8:	f44f 7300 	mov.w	r3, #512	; 0x200
   112dc:	8393      	strh	r3, [r2, #28]
   112de:	4b19      	ldr	r3, [pc, #100]	; (11344 <zep_shim_bus_qspi_intr_reg+0x94>)
   112e0:	f842 3f10 	str.w	r3, [r2, #16]!
   112e4:	f011 ffd2 	bl	2328c <z_log_msg_static_create.constprop.0>
   112e8:	46a5      	mov	sp, r4
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   112ea:	f04f 30ff 	mov.w	r0, #4294967295

	status = WIFI_NRF_STATUS_SUCCESS;

out:
	return status;
}
   112ee:	46bd      	mov	sp, r7
   112f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	intr_priv->callbk_fn = callbk_fn;
   112f2:	e9c0 6503 	strd	r6, r5, [r0, #12]
	k_work_init_delayable(&intr_priv->work, irq_work_handler);
   112f6:	4914      	ldr	r1, [pc, #80]	; (11348 <zep_shim_bus_qspi_intr_reg+0x98>)
   112f8:	3018      	adds	r0, #24
   112fa:	f012 ff59 	bl	241b0 <k_work_init_delayable>
	ret = rpu_irq_config(&intr_priv->gpio_cb_data, zep_shim_irq_handler);
   112fe:	4620      	mov	r0, r4
   11300:	4912      	ldr	r1, [pc, #72]	; (1134c <zep_shim_bus_qspi_intr_reg+0x9c>)
   11302:	f000 fbdf 	bl	11ac4 <rpu_irq_config>
	if (ret) {
   11306:	2800      	cmp	r0, #0
   11308:	d0f1      	beq.n	112ee <zep_shim_bus_qspi_intr_reg+0x3e>
		LOG_ERR("%s: request_irq failed\n", __func__);
   1130a:	466d      	mov	r5, sp
   1130c:	b088      	sub	sp, #32
   1130e:	466a      	mov	r2, sp
   11310:	4b0f      	ldr	r3, [pc, #60]	; (11350 <zep_shim_bus_qspi_intr_reg+0xa0>)
   11312:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11316:	6153      	str	r3, [r2, #20]
   11318:	4b08      	ldr	r3, [pc, #32]	; (1133c <zep_shim_bus_qspi_intr_reg+0x8c>)
   1131a:	4809      	ldr	r0, [pc, #36]	; (11340 <zep_shim_bus_qspi_intr_reg+0x90>)
   1131c:	6193      	str	r3, [r2, #24]
   1131e:	f44f 7300 	mov.w	r3, #512	; 0x200
   11322:	8393      	strh	r3, [r2, #28]
   11324:	4b07      	ldr	r3, [pc, #28]	; (11344 <zep_shim_bus_qspi_intr_reg+0x94>)
   11326:	f842 3f10 	str.w	r3, [r2, #16]!
   1132a:	f011 ffaf 	bl	2328c <z_log_msg_static_create.constprop.0>
		k_free(intr_priv);
   1132e:	4620      	mov	r0, r4
   11330:	46ad      	mov	sp, r5
   11332:	f013 fa77 	bl	24824 <k_free>
		goto out;
   11336:	e7d8      	b.n	112ea <zep_shim_bus_qspi_intr_reg+0x3a>
   11338:	00035987 	.word	0x00035987
   1133c:	00035af2 	.word	0x00035af2
   11340:	00024d98 	.word	0x00024d98
   11344:	01000003 	.word	0x01000003
   11348:	000232ef 	.word	0x000232ef
   1134c:	0001120d 	.word	0x0001120d
   11350:	000359b4 	.word	0x000359b4

00011354 <zep_shim_spinlock_alloc.part.0>:
static void *zep_shim_spinlock_alloc(void)
   11354:	b580      	push	{r7, lr}
   11356:	af00      	add	r7, sp, #0
		LOG_ERR("%s: Unable to allocate memory for spinlock\n", __func__);
   11358:	b088      	sub	sp, #32
   1135a:	466a      	mov	r2, sp
   1135c:	4b08      	ldr	r3, [pc, #32]	; (11380 <zep_shim_spinlock_alloc.part.0+0x2c>)
   1135e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11362:	6153      	str	r3, [r2, #20]
   11364:	4b07      	ldr	r3, [pc, #28]	; (11384 <zep_shim_spinlock_alloc.part.0+0x30>)
   11366:	4808      	ldr	r0, [pc, #32]	; (11388 <zep_shim_spinlock_alloc.part.0+0x34>)
   11368:	6193      	str	r3, [r2, #24]
   1136a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1136e:	8393      	strh	r3, [r2, #28]
   11370:	4b06      	ldr	r3, [pc, #24]	; (1138c <zep_shim_spinlock_alloc.part.0+0x38>)
   11372:	f842 3f10 	str.w	r3, [r2, #16]!
   11376:	f011 ff89 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   1137a:	46bd      	mov	sp, r7
   1137c:	bd80      	pop	{r7, pc}
   1137e:	bf00      	nop
   11380:	000359cc 	.word	0x000359cc
   11384:	00035a83 	.word	0x00035a83
   11388:	00024d98 	.word	0x00024d98
   1138c:	01000003 	.word	0x01000003

00011390 <zep_shim_llist_node_alloc.part.0>:
static void *zep_shim_llist_node_alloc(void)
   11390:	b580      	push	{r7, lr}
   11392:	af00      	add	r7, sp, #0
		LOG_ERR("%s: Unable to allocate memory for linked list node\n", __func__);
   11394:	b088      	sub	sp, #32
   11396:	466a      	mov	r2, sp
   11398:	4b08      	ldr	r3, [pc, #32]	; (113bc <zep_shim_llist_node_alloc.part.0+0x2c>)
   1139a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1139e:	6153      	str	r3, [r2, #20]
   113a0:	4b07      	ldr	r3, [pc, #28]	; (113c0 <zep_shim_llist_node_alloc.part.0+0x30>)
   113a2:	4808      	ldr	r0, [pc, #32]	; (113c4 <zep_shim_llist_node_alloc.part.0+0x34>)
   113a4:	6193      	str	r3, [r2, #24]
   113a6:	f44f 7300 	mov.w	r3, #512	; 0x200
   113aa:	8393      	strh	r3, [r2, #28]
   113ac:	4b06      	ldr	r3, [pc, #24]	; (113c8 <zep_shim_llist_node_alloc.part.0+0x38>)
   113ae:	f842 3f10 	str.w	r3, [r2, #16]!
   113b2:	f011 ff6b 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   113b6:	2000      	movs	r0, #0
   113b8:	46bd      	mov	sp, r7
   113ba:	bd80      	pop	{r7, pc}
   113bc:	000359f8 	.word	0x000359f8
   113c0:	00035a9b 	.word	0x00035a9b
   113c4:	00024d98 	.word	0x00024d98
   113c8:	01000003 	.word	0x01000003

000113cc <zep_shim_llist_alloc.part.0>:
static void *zep_shim_llist_alloc(void)
   113cc:	b580      	push	{r7, lr}
   113ce:	af00      	add	r7, sp, #0
		LOG_ERR("%s: Unable to allocate memory for linked list\n", __func__);
   113d0:	b088      	sub	sp, #32
   113d2:	466a      	mov	r2, sp
   113d4:	4b08      	ldr	r3, [pc, #32]	; (113f8 <zep_shim_llist_alloc.part.0+0x2c>)
   113d6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   113da:	6153      	str	r3, [r2, #20]
   113dc:	4b07      	ldr	r3, [pc, #28]	; (113fc <zep_shim_llist_alloc.part.0+0x30>)
   113de:	4808      	ldr	r0, [pc, #32]	; (11400 <zep_shim_llist_alloc.part.0+0x34>)
   113e0:	6193      	str	r3, [r2, #24]
   113e2:	f44f 7300 	mov.w	r3, #512	; 0x200
   113e6:	8393      	strh	r3, [r2, #28]
   113e8:	4b06      	ldr	r3, [pc, #24]	; (11404 <zep_shim_llist_alloc.part.0+0x38>)
   113ea:	f842 3f10 	str.w	r3, [r2, #16]!
   113ee:	f011 ff4d 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   113f2:	46bd      	mov	sp, r7
   113f4:	bd80      	pop	{r7, pc}
   113f6:	bf00      	nop
   113f8:	00035a2c 	.word	0x00035a2c
   113fc:	00035ab5 	.word	0x00035ab5
   11400:	00024d98 	.word	0x00024d98
   11404:	01000003 	.word	0x01000003

00011408 <zep_shim_bus_qspi_init.part.0>:
static void *zep_shim_bus_qspi_init(void)
   11408:	b580      	push	{r7, lr}
   1140a:	af00      	add	r7, sp, #0
		LOG_ERR("%s: Unable to allocate memory for qspi_priv\n", __func__);
   1140c:	b088      	sub	sp, #32
   1140e:	466a      	mov	r2, sp
   11410:	4b08      	ldr	r3, [pc, #32]	; (11434 <zep_shim_bus_qspi_init.part.0+0x2c>)
   11412:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11416:	6153      	str	r3, [r2, #20]
   11418:	4b07      	ldr	r3, [pc, #28]	; (11438 <zep_shim_bus_qspi_init.part.0+0x30>)
   1141a:	4808      	ldr	r0, [pc, #32]	; (1143c <zep_shim_bus_qspi_init.part.0+0x34>)
   1141c:	6193      	str	r3, [r2, #24]
   1141e:	f44f 7300 	mov.w	r3, #512	; 0x200
   11422:	8393      	strh	r3, [r2, #28]
   11424:	4b06      	ldr	r3, [pc, #24]	; (11440 <zep_shim_bus_qspi_init.part.0+0x38>)
   11426:	f842 3f10 	str.w	r3, [r2, #16]!
   1142a:	f011 ff2f 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   1142e:	46bd      	mov	sp, r7
   11430:	bd80      	pop	{r7, pc}
   11432:	bf00      	nop
   11434:	00034cdf 	.word	0x00034cdf
   11438:	00035aca 	.word	0x00035aca
   1143c:	00024d98 	.word	0x00024d98
   11440:	01000003 	.word	0x01000003

00011444 <irq_work_handler.part.0>:
static void irq_work_handler(struct k_work *work)
   11444:	b580      	push	{r7, lr}
   11446:	af00      	add	r7, sp, #0
		LOG_ERR("%s: Interrupt callback failed\n", __func__);
   11448:	b088      	sub	sp, #32
   1144a:	466a      	mov	r2, sp
   1144c:	4b08      	ldr	r3, [pc, #32]	; (11470 <irq_work_handler.part.0+0x2c>)
   1144e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11452:	6153      	str	r3, [r2, #20]
   11454:	4b07      	ldr	r3, [pc, #28]	; (11474 <irq_work_handler.part.0+0x30>)
   11456:	4808      	ldr	r0, [pc, #32]	; (11478 <irq_work_handler.part.0+0x34>)
   11458:	6193      	str	r3, [r2, #24]
   1145a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1145e:	8393      	strh	r3, [r2, #28]
   11460:	4b06      	ldr	r3, [pc, #24]	; (1147c <irq_work_handler.part.0+0x38>)
   11462:	f842 3f10 	str.w	r3, [r2, #16]!
   11466:	f011 ff11 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   1146a:	46bd      	mov	sp, r7
   1146c:	bd80      	pop	{r7, pc}
   1146e:	bf00      	nop
   11470:	00033c70 	.word	0x00033c70
   11474:	00035ae1 	.word	0x00035ae1
   11478:	00024d98 	.word	0x00024d98
   1147c:	01000003 	.word	0x01000003

00011480 <zep_shim_bus_qspi_dev_host_map_get.part.0>:
static void zep_shim_bus_qspi_dev_host_map_get(void *os_qspi_dev_ctx,
   11480:	b580      	push	{r7, lr}
   11482:	af00      	add	r7, sp, #0
		LOG_ERR("%s: Invalid parameters\n", __func__);
   11484:	b088      	sub	sp, #32
   11486:	466a      	mov	r2, sp
   11488:	4b08      	ldr	r3, [pc, #32]	; (114ac <zep_shim_bus_qspi_dev_host_map_get.part.0+0x2c>)
   1148a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1148e:	6153      	str	r3, [r2, #20]
   11490:	4b07      	ldr	r3, [pc, #28]	; (114b0 <zep_shim_bus_qspi_dev_host_map_get.part.0+0x30>)
   11492:	4808      	ldr	r0, [pc, #32]	; (114b4 <zep_shim_bus_qspi_dev_host_map_get.part.0+0x34>)
   11494:	6193      	str	r3, [r2, #24]
   11496:	f44f 7300 	mov.w	r3, #512	; 0x200
   1149a:	8393      	strh	r3, [r2, #28]
   1149c:	4b06      	ldr	r3, [pc, #24]	; (114b8 <zep_shim_bus_qspi_dev_host_map_get.part.0+0x38>)
   1149e:	f842 3f10 	str.w	r3, [r2, #16]!
   114a2:	f011 fef3 	bl	2328c <z_log_msg_static_create.constprop.0>
}
   114a6:	46bd      	mov	sp, r7
   114a8:	bd80      	pop	{r7, pc}
   114aa:	bf00      	nop
   114ac:	00034017 	.word	0x00034017
   114b0:	00035b0d 	.word	0x00035b0d
   114b4:	00024d98 	.word	0x00024d98
   114b8:	01000003 	.word	0x01000003

000114bc <zep_shim_timer_alloc.part.0>:
static void zep_shim_bus_qspi_intr_unreg(void *os_qspi_dev_ctx)
{
}

#ifdef CONFIG_NRF_WIFI_LOW_POWER
static void *zep_shim_timer_alloc(void)
   114bc:	b580      	push	{r7, lr}
   114be:	af00      	add	r7, sp, #0
	struct timer_list *timer = NULL;

	timer = k_malloc(sizeof(*timer));

	if (!timer)
		LOG_ERR("%s: Unable to allocate memory for work\n", __func__);
   114c0:	b088      	sub	sp, #32
   114c2:	466a      	mov	r2, sp
   114c4:	4b08      	ldr	r3, [pc, #32]	; (114e8 <zep_shim_timer_alloc.part.0+0x2c>)
   114c6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   114ca:	6153      	str	r3, [r2, #20]
   114cc:	4b07      	ldr	r3, [pc, #28]	; (114ec <zep_shim_timer_alloc.part.0+0x30>)
   114ce:	4808      	ldr	r0, [pc, #32]	; (114f0 <zep_shim_timer_alloc.part.0+0x34>)
   114d0:	6193      	str	r3, [r2, #24]
   114d2:	f44f 7300 	mov.w	r3, #512	; 0x200
   114d6:	8393      	strh	r3, [r2, #28]
   114d8:	4b06      	ldr	r3, [pc, #24]	; (114f4 <zep_shim_timer_alloc.part.0+0x38>)
   114da:	f842 3f10 	str.w	r3, [r2, #16]!
   114de:	f011 fed5 	bl	2328c <z_log_msg_static_create.constprop.0>

	return timer;
}
   114e2:	46bd      	mov	sp, r7
   114e4:	bd80      	pop	{r7, pc}
   114e6:	bf00      	nop
   114e8:	00035a5b 	.word	0x00035a5b
   114ec:	00035b30 	.word	0x00035b30
   114f0:	00024d98 	.word	0x00024d98
   114f4:	01000003 	.word	0x01000003

000114f8 <get_os_ops>:
};

const struct wifi_nrf_osal_ops *get_os_ops(void)
{
	return &wifi_nrf_os_zep_ops;
}
   114f8:	4800      	ldr	r0, [pc, #0]	; (114fc <get_os_ops+0x4>)
   114fa:	4770      	bx	lr
   114fc:	0002521c 	.word	0x0002521c

00011500 <workqueue_init>:

	return &zep_work_item[free_work_index];
}

static int workqueue_init(void)
{
   11500:	b537      	push	{r0, r1, r2, r4, r5, lr}
	k_work_queue_init(&zep_wifi_bh_q);

	k_work_queue_start(&zep_wifi_bh_q,
   11502:	2400      	movs	r4, #0
	k_work_queue_init(&zep_wifi_bh_q);
   11504:	4d0d      	ldr	r5, [pc, #52]	; (1153c <workqueue_init+0x3c>)
   11506:	4628      	mov	r0, r5
   11508:	f012 fe4c 	bl	241a4 <k_work_queue_init>
	k_work_queue_start(&zep_wifi_bh_q,
   1150c:	4628      	mov	r0, r5
						bh_wq_stack_area,
						K_THREAD_STACK_SIZEOF(bh_wq_stack_area),
						CONFIG_NRF700X_BH_WQ_PRIORITY,
						NULL);

	k_work_queue_init(&zep_wifi_intr_q);
   1150e:	4d0c      	ldr	r5, [pc, #48]	; (11540 <workqueue_init+0x40>)
	k_work_queue_start(&zep_wifi_bh_q,
   11510:	4623      	mov	r3, r4
   11512:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11516:	490b      	ldr	r1, [pc, #44]	; (11544 <workqueue_init+0x44>)
   11518:	9400      	str	r4, [sp, #0]
   1151a:	f004 fb7b 	bl	15c14 <k_work_queue_start>
	k_work_queue_init(&zep_wifi_intr_q);
   1151e:	4628      	mov	r0, r5
   11520:	f012 fe40 	bl	241a4 <k_work_queue_init>

	k_work_queue_start(&zep_wifi_intr_q,
   11524:	4628      	mov	r0, r5
   11526:	f06f 030e 	mvn.w	r3, #14
   1152a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1152e:	4906      	ldr	r1, [pc, #24]	; (11548 <workqueue_init+0x48>)
   11530:	9400      	str	r4, [sp, #0]
   11532:	f004 fb6f 	bl	15c14 <k_work_queue_start>
						CONFIG_NRF700X_RX_WQ_PRIORITY,
						NULL);
#endif /* CONFIG_NRF700X_RX_WQ_ENABLED */

	return 0;
}
   11536:	4620      	mov	r0, r4
   11538:	b003      	add	sp, #12
   1153a:	bd30      	pop	{r4, r5, pc}
   1153c:	20002638 	.word	0x20002638
   11540:	20002598 	.word	0x20002598
   11544:	2000ae50 	.word	0x2000ae50
   11548:	2000a650 	.word	0x2000a650

0001154c <get_free_work_item_index>:
	for (i = 0; i < CONFIG_NRF700X_WORKQ_MAX_ITEMS; i++) {
   1154c:	2000      	movs	r0, #0
		if (zep_work_item[i].in_use)
   1154e:	4b05      	ldr	r3, [pc, #20]	; (11564 <get_free_work_item_index+0x18>)
   11550:	0142      	lsls	r2, r0, #5
   11552:	5c9a      	ldrb	r2, [r3, r2]
   11554:	b122      	cbz	r2, 11560 <get_free_work_item_index+0x14>
	for (i = 0; i < CONFIG_NRF700X_WORKQ_MAX_ITEMS; i++) {
   11556:	3001      	adds	r0, #1
   11558:	2864      	cmp	r0, #100	; 0x64
   1155a:	d1f9      	bne.n	11550 <get_free_work_item_index+0x4>
	return -1;
   1155c:	f04f 30ff 	mov.w	r0, #4294967295
}
   11560:	4770      	bx	lr
   11562:	bf00      	nop
   11564:	20003a38 	.word	0x20003a38

00011568 <work_alloc>:
{
   11568:	b598      	push	{r3, r4, r7, lr}
   1156a:	af00      	add	r7, sp, #0
   1156c:	4601      	mov	r1, r0
	int free_work_index = get_free_work_item_index();
   1156e:	f7ff ffed 	bl	1154c <get_free_work_item_index>
	if (free_work_index < 0) {
   11572:	2800      	cmp	r0, #0
   11574:	da16      	bge.n	115a4 <work_alloc+0x3c>
		LOG_ERR("%s: Reached maximum work items", __func__);
   11576:	466c      	mov	r4, sp
   11578:	b088      	sub	sp, #32
   1157a:	466a      	mov	r2, sp
   1157c:	4b0d      	ldr	r3, [pc, #52]	; (115b4 <work_alloc+0x4c>)
   1157e:	6153      	str	r3, [r2, #20]
   11580:	4b0d      	ldr	r3, [pc, #52]	; (115b8 <work_alloc+0x50>)
   11582:	6193      	str	r3, [r2, #24]
   11584:	f44f 7300 	mov.w	r3, #512	; 0x200
   11588:	8393      	strh	r3, [r2, #28]
   1158a:	4b0c      	ldr	r3, [pc, #48]	; (115bc <work_alloc+0x54>)
   1158c:	f842 3f10 	str.w	r3, [r2, #16]!
   11590:	480b      	ldr	r0, [pc, #44]	; (115c0 <work_alloc+0x58>)
   11592:	2300      	movs	r3, #0
   11594:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11598:	f7f3 fc74 	bl	4e84 <z_impl_z_log_msg_static_create>
		return NULL;
   1159c:	2000      	movs	r0, #0
   1159e:	46a5      	mov	sp, r4
}
   115a0:	46bd      	mov	sp, r7
   115a2:	bd98      	pop	{r3, r4, r7, pc}
	zep_work_item[free_work_index].in_use = true;
   115a4:	2401      	movs	r4, #1
   115a6:	4b07      	ldr	r3, [pc, #28]	; (115c4 <work_alloc+0x5c>)
   115a8:	0142      	lsls	r2, r0, #5
   115aa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   115ae:	549c      	strb	r4, [r3, r2]
	zep_work_item[free_work_index].type = type;
   115b0:	7701      	strb	r1, [r0, #28]
	return &zep_work_item[free_work_index];
   115b2:	e7f5      	b.n	115a0 <work_alloc+0x38>
   115b4:	00035b4e 	.word	0x00035b4e
   115b8:	00035b6d 	.word	0x00035b6d
   115bc:	01000003 	.word	0x01000003
   115c0:	00024d98 	.word	0x00024d98
   115c4:	20003a38 	.word	0x20003a38

000115c8 <work_init>:

void work_init(struct zep_work_item *item, void (*callback)(unsigned long),
		  unsigned long data)
{
	item->callback = callback;
	item->data = data;
   115c8:	e9c0 2105 	strd	r2, r1, [r0, #20]

	k_work_init(&item->work, workqueue_callback);
   115cc:	4901      	ldr	r1, [pc, #4]	; (115d4 <work_init+0xc>)
   115ce:	3004      	adds	r0, #4
   115d0:	f012 bd9a 	b.w	24108 <k_work_init>
   115d4:	0002335b 	.word	0x0002335b

000115d8 <work_schedule>:
}

void work_schedule(struct zep_work_item *item)
{
	if (item->type == ZEP_WORK_TYPE_IRQ)
   115d8:	7f03      	ldrb	r3, [r0, #28]
   115da:	2b01      	cmp	r3, #1
   115dc:	d103      	bne.n	115e6 <work_schedule+0xe>
		k_work_submit_to_queue(&zep_wifi_intr_q, &item->work);
   115de:	1d01      	adds	r1, r0, #4
   115e0:	4803      	ldr	r0, [pc, #12]	; (115f0 <work_schedule+0x18>)
	else if (item->type == ZEP_WORK_TYPE_BH)
		k_work_submit_to_queue(&zep_wifi_bh_q, &item->work);
   115e2:	f012 bdbe 	b.w	24162 <k_work_submit_to_queue>
	else if (item->type == ZEP_WORK_TYPE_BH)
   115e6:	b913      	cbnz	r3, 115ee <work_schedule+0x16>
		k_work_submit_to_queue(&zep_wifi_bh_q, &item->work);
   115e8:	1d01      	adds	r1, r0, #4
   115ea:	4802      	ldr	r0, [pc, #8]	; (115f4 <work_schedule+0x1c>)
   115ec:	e7f9      	b.n	115e2 <work_schedule+0xa>
#endif /* CONFIG_NRF700X_TX_DONE_WQ_ENABLED */
#ifdef CONFIG_NRF700X_RX_WQ_ENABLED
	else if (item->type == ZEP_WORK_TYPE_RX)
		k_work_submit_to_queue(&zep_wifi_rx_q, &item->work);
#endif /* CONFIG_NRF700X_RX_WQ_ENABLED */
}
   115ee:	4770      	bx	lr
   115f0:	20002598 	.word	0x20002598
   115f4:	20002638 	.word	0x20002638

000115f8 <init_timer>:
	timer->function(timer->data);
}

void init_timer(struct timer_list *timer)
{
	k_work_init_delayable(&timer->work, timer_expiry_function);
   115f8:	4901      	ldr	r1, [pc, #4]	; (11600 <init_timer+0x8>)
   115fa:	3008      	adds	r0, #8
   115fc:	f012 bdd8 	b.w	241b0 <k_work_init_delayable>
   11600:	0002336d 	.word	0x0002336d

00011604 <wifi_nrf_reg_domain>:
int wifi_nrf_reg_domain(const struct device *dev, struct wifi_reg_domain *reg_domain)
{
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct wifi_nrf_ctx_zep *rpu_ctx_zep = NULL;
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = NULL;
	struct wifi_nrf_fmac_reg_info reg_domain_info = {0};
   11604:	2300      	movs	r3, #0
{
   11606:	b590      	push	{r4, r7, lr}
   11608:	b083      	sub	sp, #12
   1160a:	af00      	add	r7, sp, #0
   1160c:	460c      	mov	r4, r1
	struct wifi_nrf_fmac_reg_info reg_domain_info = {0};
   1160e:	80bb      	strh	r3, [r7, #4]
   11610:	71bb      	strb	r3, [r7, #6]
	int ret = -1;

	if (!dev || !reg_domain) {
   11612:	b1a8      	cbz	r0, 11640 <wifi_nrf_reg_domain+0x3c>
   11614:	b1a1      	cbz	r1, 11640 <wifi_nrf_reg_domain+0x3c>
		goto err;
	}

	vif_ctx_zep = dev->data;
   11616:	6903      	ldr	r3, [r0, #16]

	if (!vif_ctx_zep) {
   11618:	b9bb      	cbnz	r3, 1164a <wifi_nrf_reg_domain+0x46>
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   1161a:	466c      	mov	r4, sp
   1161c:	b088      	sub	sp, #32
   1161e:	466a      	mov	r2, sp
   11620:	4b26      	ldr	r3, [pc, #152]	; (116bc <wifi_nrf_reg_domain+0xb8>)
   11622:	6153      	str	r3, [r2, #20]
   11624:	4b26      	ldr	r3, [pc, #152]	; (116c0 <wifi_nrf_reg_domain+0xbc>)
   11626:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1162a:	6193      	str	r3, [r2, #24]
   1162c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11630:	8393      	strh	r3, [r2, #28]
   11632:	4b24      	ldr	r3, [pc, #144]	; (116c4 <wifi_nrf_reg_domain+0xc0>)
   11634:	f842 3f10 	str.w	r3, [r2, #16]!
   11638:	4823      	ldr	r0, [pc, #140]	; (116c8 <wifi_nrf_reg_domain+0xc4>)
   1163a:	f011 feb6 	bl	233aa <z_log_msg_static_create.constprop.0>
   1163e:	46a5      	mov	sp, r4
	int ret = -1;
   11640:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ret = 0;
err:
	return ret;
}
   11644:	370c      	adds	r7, #12
   11646:	46bd      	mov	sp, r7
   11648:	bd90      	pop	{r4, r7, pc}
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   1164a:	68da      	ldr	r2, [r3, #12]
	if (!rpu_ctx_zep) {
   1164c:	b922      	cbnz	r2, 11658 <wifi_nrf_reg_domain+0x54>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n", __func__);
   1164e:	466c      	mov	r4, sp
   11650:	b088      	sub	sp, #32
   11652:	466a      	mov	r2, sp
   11654:	4b1d      	ldr	r3, [pc, #116]	; (116cc <wifi_nrf_reg_domain+0xc8>)
   11656:	e7e4      	b.n	11622 <wifi_nrf_reg_domain+0x1e>
	if (reg_domain->oper == WIFI_MGMT_SET) {
   11658:	780b      	ldrb	r3, [r1, #0]
   1165a:	2b01      	cmp	r3, #1
   1165c:	d10f      	bne.n	1167e <wifi_nrf_reg_domain+0x7a>
		memcpy(reg_domain_info.alpha2, reg_domain->country_code, WIFI_COUNTRY_CODE_LEN);
   1165e:	884b      	ldrh	r3, [r1, #2]
		status = wifi_nrf_fmac_set_reg(rpu_ctx_zep->rpu_ctx, &reg_domain_info);
   11660:	6850      	ldr	r0, [r2, #4]
		memcpy(reg_domain_info.alpha2, reg_domain->country_code, WIFI_COUNTRY_CODE_LEN);
   11662:	80bb      	strh	r3, [r7, #4]
		reg_domain_info.force = reg_domain->force;
   11664:	784b      	ldrb	r3, [r1, #1]
		status = wifi_nrf_fmac_set_reg(rpu_ctx_zep->rpu_ctx, &reg_domain_info);
   11666:	1d39      	adds	r1, r7, #4
		reg_domain_info.force = reg_domain->force;
   11668:	71bb      	strb	r3, [r7, #6]
		status = wifi_nrf_fmac_set_reg(rpu_ctx_zep->rpu_ctx, &reg_domain_info);
   1166a:	f7ff fd19 	bl	110a0 <wifi_nrf_fmac_set_reg>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   1166e:	b908      	cbnz	r0, 11674 <wifi_nrf_reg_domain+0x70>
	ret = 0;
   11670:	2000      	movs	r0, #0
   11672:	e7e7      	b.n	11644 <wifi_nrf_reg_domain+0x40>
			LOG_ERR("%s: Failed to set regulatory domain\n", __func__);
   11674:	466c      	mov	r4, sp
   11676:	b088      	sub	sp, #32
   11678:	466a      	mov	r2, sp
   1167a:	4b15      	ldr	r3, [pc, #84]	; (116d0 <wifi_nrf_reg_domain+0xcc>)
   1167c:	e7d1      	b.n	11622 <wifi_nrf_reg_domain+0x1e>
	} else if (reg_domain->oper == WIFI_MGMT_GET) {
   1167e:	b963      	cbnz	r3, 1169a <wifi_nrf_reg_domain+0x96>
		status = wifi_nrf_fmac_get_reg(rpu_ctx_zep->rpu_ctx, &reg_domain_info);
   11680:	6850      	ldr	r0, [r2, #4]
   11682:	1d39      	adds	r1, r7, #4
   11684:	f7ff fa86 	bl	10b94 <wifi_nrf_fmac_get_reg>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   11688:	b120      	cbz	r0, 11694 <wifi_nrf_reg_domain+0x90>
			LOG_ERR("%s: Failed to get regulatory domain\n", __func__);
   1168a:	466c      	mov	r4, sp
   1168c:	b088      	sub	sp, #32
   1168e:	466a      	mov	r2, sp
   11690:	4b10      	ldr	r3, [pc, #64]	; (116d4 <wifi_nrf_reg_domain+0xd0>)
   11692:	e7c6      	b.n	11622 <wifi_nrf_reg_domain+0x1e>
   11694:	88bb      	ldrh	r3, [r7, #4]
   11696:	8063      	strh	r3, [r4, #2]
   11698:	e7ea      	b.n	11670 <wifi_nrf_reg_domain+0x6c>
		LOG_ERR("%s: Invalid operation: %d\n", __func__, reg_domain->oper);
   1169a:	466c      	mov	r4, sp
   1169c:	b08a      	sub	sp, #40	; 0x28
   1169e:	466a      	mov	r2, sp
   116a0:	490d      	ldr	r1, [pc, #52]	; (116d8 <wifi_nrf_reg_domain+0xd4>)
   116a2:	6151      	str	r1, [r2, #20]
   116a4:	4906      	ldr	r1, [pc, #24]	; (116c0 <wifi_nrf_reg_domain+0xbc>)
   116a6:	e9c2 1306 	strd	r1, r3, [r2, #24]
   116aa:	f44f 7300 	mov.w	r3, #512	; 0x200
   116ae:	8413      	strh	r3, [r2, #32]
   116b0:	4b0a      	ldr	r3, [pc, #40]	; (116dc <wifi_nrf_reg_domain+0xd8>)
   116b2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   116b6:	f842 3f10 	str.w	r3, [r2, #16]!
   116ba:	e7bd      	b.n	11638 <wifi_nrf_reg_domain+0x34>
   116bc:	00035b78 	.word	0x00035b78
   116c0:	00035d85 	.word	0x00035d85
   116c4:	01000003 	.word	0x01000003
   116c8:	00024d98 	.word	0x00024d98
   116cc:	00035b91 	.word	0x00035b91
   116d0:	00035baa 	.word	0x00035baa
   116d4:	00035bcf 	.word	0x00035bcf
   116d8:	00035bf4 	.word	0x00035bf4
   116dc:	01000004 	.word	0x01000004

000116e0 <wifi_nrf_event_get_reg_zep.part.0>:
void wifi_nrf_event_get_reg_zep(void *vif_ctx,
   116e0:	b580      	push	{r7, lr}
   116e2:	af00      	add	r7, sp, #0
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   116e4:	b088      	sub	sp, #32
   116e6:	466a      	mov	r2, sp
   116e8:	4b08      	ldr	r3, [pc, #32]	; (1170c <wifi_nrf_event_get_reg_zep.part.0+0x2c>)
   116ea:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   116ee:	6153      	str	r3, [r2, #20]
   116f0:	4b07      	ldr	r3, [pc, #28]	; (11710 <wifi_nrf_event_get_reg_zep.part.0+0x30>)
   116f2:	4808      	ldr	r0, [pc, #32]	; (11714 <wifi_nrf_event_get_reg_zep.part.0+0x34>)
   116f4:	6193      	str	r3, [r2, #24]
   116f6:	f44f 7300 	mov.w	r3, #512	; 0x200
   116fa:	8393      	strh	r3, [r2, #28]
   116fc:	4b06      	ldr	r3, [pc, #24]	; (11718 <wifi_nrf_event_get_reg_zep.part.0+0x38>)
   116fe:	f842 3f10 	str.w	r3, [r2, #16]!
   11702:	f011 fe52 	bl	233aa <z_log_msg_static_create.constprop.0>
}
   11706:	46bd      	mov	sp, r7
   11708:	bd80      	pop	{r7, pc}
   1170a:	bf00      	nop
   1170c:	00035b78 	.word	0x00035b78
   11710:	00035db8 	.word	0x00035db8
   11714:	00024d98 	.word	0x00024d98
   11718:	01000003 	.word	0x01000003

0001171c <wifi_nrf_event_proc_cookie_rsp.part.0>:
void wifi_nrf_event_proc_cookie_rsp(void *vif_ctx,
   1171c:	b580      	push	{r7, lr}
   1171e:	af00      	add	r7, sp, #0
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   11720:	b088      	sub	sp, #32
   11722:	466a      	mov	r2, sp
   11724:	4b08      	ldr	r3, [pc, #32]	; (11748 <wifi_nrf_event_proc_cookie_rsp.part.0+0x2c>)
   11726:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1172a:	6153      	str	r3, [r2, #20]
   1172c:	4b07      	ldr	r3, [pc, #28]	; (1174c <wifi_nrf_event_proc_cookie_rsp.part.0+0x30>)
   1172e:	4808      	ldr	r0, [pc, #32]	; (11750 <wifi_nrf_event_proc_cookie_rsp.part.0+0x34>)
   11730:	6193      	str	r3, [r2, #24]
   11732:	f44f 7300 	mov.w	r3, #512	; 0x200
   11736:	8393      	strh	r3, [r2, #28]
   11738:	4b06      	ldr	r3, [pc, #24]	; (11754 <wifi_nrf_event_proc_cookie_rsp.part.0+0x38>)
   1173a:	f842 3f10 	str.w	r3, [r2, #16]!
   1173e:	f011 fe34 	bl	233aa <z_log_msg_static_create.constprop.0>
}
   11742:	46bd      	mov	sp, r7
   11744:	bd80      	pop	{r7, pc}
   11746:	bf00      	nop
   11748:	00035b78 	.word	0x00035b78
   1174c:	00035d99 	.word	0x00035d99
   11750:	00024d98 	.word	0x00024d98
   11754:	01000003 	.word	0x01000003

00011758 <wifi_nrf_event_proc_scan_done_zep>:
{
   11758:	b598      	push	{r3, r4, r7, lr}
   1175a:	af00      	add	r7, sp, #0
	if (!vif_ctx_zep) {
   1175c:	b9a0      	cbnz	r0, 11788 <wifi_nrf_event_proc_scan_done_zep+0x30>
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   1175e:	466c      	mov	r4, sp
   11760:	b088      	sub	sp, #32
   11762:	466a      	mov	r2, sp
   11764:	4b16      	ldr	r3, [pc, #88]	; (117c0 <wifi_nrf_event_proc_scan_done_zep+0x68>)
			LOG_ERR("%s: wifi_nrf_disp_scan_res_get_zep failed\n", __func__);
   11766:	6153      	str	r3, [r2, #20]
   11768:	4b16      	ldr	r3, [pc, #88]	; (117c4 <wifi_nrf_event_proc_scan_done_zep+0x6c>)
   1176a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1176e:	6193      	str	r3, [r2, #24]
   11770:	f44f 7300 	mov.w	r3, #512	; 0x200
   11774:	8393      	strh	r3, [r2, #28]
   11776:	4b14      	ldr	r3, [pc, #80]	; (117c8 <wifi_nrf_event_proc_scan_done_zep+0x70>)
   11778:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("%s: Scan type = %d not supported yet\n", __func__, vif_ctx_zep->scan_type);
   1177c:	4813      	ldr	r0, [pc, #76]	; (117cc <wifi_nrf_event_proc_scan_done_zep+0x74>)
   1177e:	f011 fe14 	bl	233aa <z_log_msg_static_create.constprop.0>
   11782:	46a5      	mov	sp, r4
}
   11784:	46bd      	mov	sp, r7
   11786:	bd98      	pop	{r3, r4, r7, pc}
	if (vif_ctx_zep->scan_type == SCAN_DISPLAY) {
   11788:	69c3      	ldr	r3, [r0, #28]
   1178a:	b943      	cbnz	r3, 1179e <wifi_nrf_event_proc_scan_done_zep+0x46>
		status = wifi_nrf_disp_scan_res_get_zep(vif_ctx_zep);
   1178c:	f000 fd38 	bl	12200 <wifi_nrf_disp_scan_res_get_zep>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   11790:	2800      	cmp	r0, #0
   11792:	d0f7      	beq.n	11784 <wifi_nrf_event_proc_scan_done_zep+0x2c>
			LOG_ERR("%s: wifi_nrf_disp_scan_res_get_zep failed\n", __func__);
   11794:	466c      	mov	r4, sp
   11796:	b088      	sub	sp, #32
   11798:	466a      	mov	r2, sp
   1179a:	4b0d      	ldr	r3, [pc, #52]	; (117d0 <wifi_nrf_event_proc_scan_done_zep+0x78>)
   1179c:	e7e3      	b.n	11766 <wifi_nrf_event_proc_scan_done_zep+0xe>
		LOG_ERR("%s: Scan type = %d not supported yet\n", __func__, vif_ctx_zep->scan_type);
   1179e:	466c      	mov	r4, sp
   117a0:	b08a      	sub	sp, #40	; 0x28
   117a2:	466a      	mov	r2, sp
   117a4:	490b      	ldr	r1, [pc, #44]	; (117d4 <wifi_nrf_event_proc_scan_done_zep+0x7c>)
   117a6:	6151      	str	r1, [r2, #20]
   117a8:	4906      	ldr	r1, [pc, #24]	; (117c4 <wifi_nrf_event_proc_scan_done_zep+0x6c>)
   117aa:	e9c2 1306 	strd	r1, r3, [r2, #24]
   117ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   117b2:	8413      	strh	r3, [r2, #32]
   117b4:	4b08      	ldr	r3, [pc, #32]	; (117d8 <wifi_nrf_event_proc_scan_done_zep+0x80>)
   117b6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   117ba:	f842 3f10 	str.w	r3, [r2, #16]!
   117be:	e7dd      	b.n	1177c <wifi_nrf_event_proc_scan_done_zep+0x24>
   117c0:	00035b78 	.word	0x00035b78
   117c4:	00035dd3 	.word	0x00035dd3
   117c8:	01000003 	.word	0x01000003
   117cc:	00024d98 	.word	0x00024d98
   117d0:	00035c0f 	.word	0x00035c0f
   117d4:	00035c3a 	.word	0x00035c3a
   117d8:	01000004 	.word	0x01000004

000117dc <wifi_nrf_fmac_dev_add_zep>:

#endif /* !CONFIG_NRF700X_RADIO_TEST */

enum wifi_nrf_status wifi_nrf_fmac_dev_add_zep(struct wifi_nrf_drv_priv_zep *drv_priv_zep)
{
   117dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117de:	b091      	sub	sp, #68	; 0x44
#else
	sleep_type = SLEEP_DISABLE;
#endif /* CONFIG_NRF700X_RADIO_TEST */
#endif /* CONFIG_NRF_WIFI_LOW_POWER */
	struct nrf_wifi_tx_pwr_ctrl_params tx_pwr_ctrl_params;
	unsigned int fw_ver = 0;
   117e0:	2300      	movs	r3, #0
{
   117e2:	af02      	add	r7, sp, #8

	rpu_ctx_zep = &drv_priv_zep->rpu_ctx_zep;

	rpu_ctx_zep->drv_priv_zep = drv_priv_zep;
   117e4:	6080      	str	r0, [r0, #8]

	rpu_ctx = wifi_nrf_fmac_dev_add(drv_priv_zep->fmac_priv, rpu_ctx_zep);
   117e6:	f100 0108 	add.w	r1, r0, #8
{
   117ea:	4605      	mov	r5, r0
	rpu_ctx = wifi_nrf_fmac_dev_add(drv_priv_zep->fmac_priv, rpu_ctx_zep);
   117ec:	6800      	ldr	r0, [r0, #0]
	unsigned int fw_ver = 0;
   117ee:	607b      	str	r3, [r7, #4]
	rpu_ctx = wifi_nrf_fmac_dev_add(drv_priv_zep->fmac_priv, rpu_ctx_zep);
   117f0:	f7fe fd2a 	bl	10248 <wifi_nrf_fmac_dev_add>

	if (!rpu_ctx) {
   117f4:	4606      	mov	r6, r0
   117f6:	b9c0      	cbnz	r0, 1182a <wifi_nrf_fmac_dev_add_zep+0x4e>
		LOG_ERR("%s: wifi_nrf_fmac_dev_add failed\n", __func__);
   117f8:	466c      	mov	r4, sp
   117fa:	b088      	sub	sp, #32
   117fc:	aa02      	add	r2, sp, #8
   117fe:	4b46      	ldr	r3, [pc, #280]	; (11918 <wifi_nrf_fmac_dev_add_zep+0x13c>)
   11800:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11804:	6153      	str	r3, [r2, #20]
   11806:	4b45      	ldr	r3, [pc, #276]	; (1191c <wifi_nrf_fmac_dev_add_zep+0x140>)
   11808:	4845      	ldr	r0, [pc, #276]	; (11920 <wifi_nrf_fmac_dev_add_zep+0x144>)
   1180a:	6193      	str	r3, [r2, #24]
   1180c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11810:	8393      	strh	r3, [r2, #28]
   11812:	4b44      	ldr	r3, [pc, #272]	; (11924 <wifi_nrf_fmac_dev_add_zep+0x148>)
   11814:	f842 3f10 	str.w	r3, [r2, #16]!
   11818:	f011 fdc7 	bl	233aa <z_log_msg_static_create.constprop.0>
   1181c:	46a5      	mov	sp, r4
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   1181e:	f04f 34ff 	mov.w	r4, #4294967295
		LOG_ERR("%s: wifi_nrf_fmac_dev_init failed\n", __func__);
		goto out;
	}
out:
	return status;
}
   11822:	4620      	mov	r0, r4
   11824:	373c      	adds	r7, #60	; 0x3c
   11826:	46bd      	mov	sp, r7
   11828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fw_info.lmac_patch_pri.data = wifi_nrf_lmac_patch_pri_bimg;
   1182a:	4b3f      	ldr	r3, [pc, #252]	; (11928 <wifi_nrf_fmac_dev_add_zep+0x14c>)
	rpu_ctx_zep->rpu_ctx = rpu_ctx;
   1182c:	60e8      	str	r0, [r5, #12]
	fw_info.lmac_patch_pri.data = wifi_nrf_lmac_patch_pri_bimg;
   1182e:	61bb      	str	r3, [r7, #24]
	fw_info.lmac_patch_pri.size = sizeof(wifi_nrf_lmac_patch_pri_bimg);
   11830:	f44f 7317 	mov.w	r3, #604	; 0x25c
   11834:	61fb      	str	r3, [r7, #28]
	fw_info.lmac_patch_sec.data = wifi_nrf_lmac_patch_sec_bin;
   11836:	4b3d      	ldr	r3, [pc, #244]	; (1192c <wifi_nrf_fmac_dev_add_zep+0x150>)
	status = wifi_nrf_fmac_fw_load(rpu_ctx,
   11838:	f107 0118 	add.w	r1, r7, #24
	fw_info.lmac_patch_sec.data = wifi_nrf_lmac_patch_sec_bin;
   1183c:	623b      	str	r3, [r7, #32]
	fw_info.lmac_patch_sec.size = sizeof(wifi_nrf_lmac_patch_sec_bin);
   1183e:	f244 4310 	movw	r3, #17424	; 0x4410
   11842:	627b      	str	r3, [r7, #36]	; 0x24
	fw_info.umac_patch_pri.data = wifi_nrf_umac_patch_pri_bimg;
   11844:	4b3a      	ldr	r3, [pc, #232]	; (11930 <wifi_nrf_fmac_dev_add_zep+0x154>)
   11846:	62bb      	str	r3, [r7, #40]	; 0x28
	fw_info.umac_patch_pri.size = sizeof(wifi_nrf_umac_patch_pri_bimg);
   11848:	f44f 7344 	mov.w	r3, #784	; 0x310
   1184c:	62fb      	str	r3, [r7, #44]	; 0x2c
	fw_info.umac_patch_sec.data = wifi_nrf_umac_patch_sec_bin;
   1184e:	4b39      	ldr	r3, [pc, #228]	; (11934 <wifi_nrf_fmac_dev_add_zep+0x158>)
   11850:	633b      	str	r3, [r7, #48]	; 0x30
	fw_info.umac_patch_sec.size = sizeof(wifi_nrf_umac_patch_sec_bin);
   11852:	f247 431c 	movw	r3, #29724	; 0x741c
   11856:	637b      	str	r3, [r7, #52]	; 0x34
	status = wifi_nrf_fmac_fw_load(rpu_ctx,
   11858:	f7fe fda8 	bl	103ac <wifi_nrf_fmac_fw_load>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   1185c:	4604      	mov	r4, r0
   1185e:	b198      	cbz	r0, 11888 <wifi_nrf_fmac_dev_add_zep+0xac>
		LOG_ERR("%s: wifi_nrf_fmac_fw_load failed\n", __func__);
   11860:	466d      	mov	r5, sp
   11862:	b088      	sub	sp, #32
   11864:	aa02      	add	r2, sp, #8
   11866:	4b34      	ldr	r3, [pc, #208]	; (11938 <wifi_nrf_fmac_dev_add_zep+0x15c>)
		LOG_ERR("%s: FW version read failed\n", __func__);
   11868:	6153      	str	r3, [r2, #20]
   1186a:	4b2c      	ldr	r3, [pc, #176]	; (1191c <wifi_nrf_fmac_dev_add_zep+0x140>)
   1186c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11870:	6193      	str	r3, [r2, #24]
   11872:	f44f 7300 	mov.w	r3, #512	; 0x200
   11876:	8393      	strh	r3, [r2, #28]
   11878:	4b2a      	ldr	r3, [pc, #168]	; (11924 <wifi_nrf_fmac_dev_add_zep+0x148>)
   1187a:	4829      	ldr	r0, [pc, #164]	; (11920 <wifi_nrf_fmac_dev_add_zep+0x144>)
   1187c:	f842 3f10 	str.w	r3, [r2, #16]!
   11880:	f011 fd93 	bl	233aa <z_log_msg_static_create.constprop.0>
   11884:	46ad      	mov	sp, r5
		goto out;
   11886:	e7cc      	b.n	11822 <wifi_nrf_fmac_dev_add_zep+0x46>
	status = wifi_nrf_fmac_ver_get(rpu_ctx,
   11888:	4630      	mov	r0, r6
   1188a:	1d39      	adds	r1, r7, #4
   1188c:	f7fe fe44 	bl	10518 <wifi_nrf_fmac_ver_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   11890:	4604      	mov	r4, r0
   11892:	b120      	cbz	r0, 1189e <wifi_nrf_fmac_dev_add_zep+0xc2>
		LOG_ERR("%s: FW version read failed\n", __func__);
   11894:	466d      	mov	r5, sp
   11896:	b088      	sub	sp, #32
   11898:	aa02      	add	r2, sp, #8
   1189a:	4b28      	ldr	r3, [pc, #160]	; (1193c <wifi_nrf_fmac_dev_add_zep+0x160>)
   1189c:	e7e4      	b.n	11868 <wifi_nrf_fmac_dev_add_zep+0x8c>
	LOG_INF("Firmware (v%d.%d.%d.%d) booted successfully\n",
   1189e:	466e      	mov	r6, sp
   118a0:	b08a      	sub	sp, #40	; 0x28
   118a2:	687b      	ldr	r3, [r7, #4]
   118a4:	aa02      	add	r2, sp, #8
   118a6:	4926      	ldr	r1, [pc, #152]	; (11940 <wifi_nrf_fmac_dev_add_zep+0x164>)
   118a8:	481d      	ldr	r0, [pc, #116]	; (11920 <wifi_nrf_fmac_dev_add_zep+0x144>)
   118aa:	6151      	str	r1, [r2, #20]
   118ac:	0e19      	lsrs	r1, r3, #24
   118ae:	6191      	str	r1, [r2, #24]
   118b0:	f3c3 4107 	ubfx	r1, r3, #16, #8
   118b4:	61d1      	str	r1, [r2, #28]
   118b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
   118ba:	b2db      	uxtb	r3, r3
   118bc:	6253      	str	r3, [r2, #36]	; 0x24
   118be:	2306      	movs	r3, #6
   118c0:	6211      	str	r1, [r2, #32]
   118c2:	f842 3f10 	str.w	r3, [r2, #16]!
   118c6:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   118ca:	f011 fd6e 	bl	233aa <z_log_msg_static_create.constprop.0>
   118ce:	46b5      	mov	sp, r6
	status = wifi_nrf_fmac_dev_init(rpu_ctx_zep->rpu_ctx,
   118d0:	f107 0308 	add.w	r3, r7, #8
	tx_pwr_ctrl_params.band_edge_2g_lo = CONFIG_NRF700X_BAND_2G_LOWER_EDGE_BACKOFF;
   118d4:	e9c7 4402 	strd	r4, r4, [r7, #8]
	tx_pwr_ctrl_params.band_edge_5g_unii_3_lo = CONFIG_NRF700X_BAND_UNII_3_LOWER_EDGE_BACKOFF;
   118d8:	e9c7 4404 	strd	r4, r4, [r7, #16]
	status = wifi_nrf_fmac_dev_init(rpu_ctx_zep->rpu_ctx,
   118dc:	e9cd 4300 	strd	r4, r3, [sp]
   118e0:	4621      	mov	r1, r4
   118e2:	2202      	movs	r2, #2
   118e4:	4b17      	ldr	r3, [pc, #92]	; (11944 <wifi_nrf_fmac_dev_add_zep+0x168>)
   118e6:	68e8      	ldr	r0, [r5, #12]
   118e8:	f7ff faf8 	bl	10edc <wifi_nrf_fmac_dev_init>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   118ec:	4604      	mov	r4, r0
   118ee:	2800      	cmp	r0, #0
   118f0:	d097      	beq.n	11822 <wifi_nrf_fmac_dev_add_zep+0x46>
		LOG_ERR("%s: wifi_nrf_fmac_dev_init failed\n", __func__);
   118f2:	b088      	sub	sp, #32
   118f4:	aa02      	add	r2, sp, #8
   118f6:	4b14      	ldr	r3, [pc, #80]	; (11948 <wifi_nrf_fmac_dev_add_zep+0x16c>)
   118f8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   118fc:	6153      	str	r3, [r2, #20]
   118fe:	4b07      	ldr	r3, [pc, #28]	; (1191c <wifi_nrf_fmac_dev_add_zep+0x140>)
   11900:	4807      	ldr	r0, [pc, #28]	; (11920 <wifi_nrf_fmac_dev_add_zep+0x144>)
   11902:	6193      	str	r3, [r2, #24]
   11904:	f44f 7300 	mov.w	r3, #512	; 0x200
   11908:	8393      	strh	r3, [r2, #28]
   1190a:	4b06      	ldr	r3, [pc, #24]	; (11924 <wifi_nrf_fmac_dev_add_zep+0x148>)
   1190c:	f842 3f10 	str.w	r3, [r2, #16]!
   11910:	f011 fd4b 	bl	233aa <z_log_msg_static_create.constprop.0>
   11914:	46b5      	mov	sp, r6
		goto out;
   11916:	e784      	b.n	11822 <wifi_nrf_fmac_dev_add_zep+0x46>
   11918:	00035c60 	.word	0x00035c60
   1191c:	00035d6b 	.word	0x00035d6b
   11920:	00024d98 	.word	0x00024d98
   11924:	01000003 	.word	0x01000003
   11928:	000297bc 	.word	0x000297bc
   1192c:	000253ac 	.word	0x000253ac
   11930:	00030e34 	.word	0x00030e34
   11934:	00029a18 	.word	0x00029a18
   11938:	00035c82 	.word	0x00035c82
   1193c:	00035ca4 	.word	0x00035ca4
   11940:	00035cc0 	.word	0x00035cc0
   11944:	0003003b 	.word	0x0003003b
   11948:	00035ced 	.word	0x00035ced

0001194c <wifi_nrf_drv_main_zep>:


static int wifi_nrf_drv_main_zep(const struct device *dev)
{
   1194c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1194e:	b0a7      	sub	sp, #156	; 0x9c
   11950:	af00      	add	r7, sp, #0
   11952:	4604      	mov	r4, r0
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
#ifndef CONFIG_NRF700X_RADIO_TEST
	struct wifi_nrf_fmac_callbk_fns callbk_fns = { 0 };
   11954:	227c      	movs	r2, #124	; 0x7c
   11956:	2100      	movs	r1, #0
   11958:	f107 001c 	add.w	r0, r7, #28
   1195c:	f005 fd3c 	bl	173d8 <memset>
	struct nrf_wifi_data_config_params data_config = { 0 };
   11960:	2300      	movs	r3, #0
   11962:	e9c7 3301 	strd	r3, r3, [r7, #4]
   11966:	f8c7 300b 	str.w	r3, [r7, #11]
	callbk_fns.rx_frm_callbk_fn = wifi_nrf_if_rx_frm;
#endif
	rx_buf_pools[0].num_bufs = rx1_num_bufs;
	rx_buf_pools[1].num_bufs = rx2_num_bufs;
	rx_buf_pools[2].num_bufs = rx3_num_bufs;
	rx_buf_pools[0].buf_sz = rx1_buf_sz;
   1196a:	4b32      	ldr	r3, [pc, #200]	; (11a34 <wifi_nrf_drv_main_zep+0xe8>)
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = dev->data;
   1196c:	6926      	ldr	r6, [r4, #16]
	rx_buf_pools[1].buf_sz = rx2_buf_sz;
   1196e:	e9c7 3304 	strd	r3, r3, [r7, #16]
	rx_buf_pools[2].buf_sz = rx3_buf_sz;
   11972:	61bb      	str	r3, [r7, #24]

	callbk_fns.scan_start_callbk_fn = wifi_nrf_event_proc_scan_start_zep;
   11974:	4b30      	ldr	r3, [pc, #192]	; (11a38 <wifi_nrf_drv_main_zep+0xec>)
	vif_ctx_zep->rpu_ctx_zep = &rpu_drv_priv_zep.rpu_ctx_zep;
   11976:	4d31      	ldr	r5, [pc, #196]	; (11a3c <wifi_nrf_drv_main_zep+0xf0>)
	callbk_fns.scan_start_callbk_fn = wifi_nrf_event_proc_scan_start_zep;
   11978:	627b      	str	r3, [r7, #36]	; 0x24
	callbk_fns.scan_done_callbk_fn = wifi_nrf_event_proc_scan_done_zep;
   1197a:	4b31      	ldr	r3, [pc, #196]	; (11a40 <wifi_nrf_drv_main_zep+0xf4>)
	vif_ctx_zep->rpu_ctx_zep = &rpu_drv_priv_zep.rpu_ctx_zep;
   1197c:	60f5      	str	r5, [r6, #12]
	callbk_fns.scan_done_callbk_fn = wifi_nrf_event_proc_scan_done_zep;
   1197e:	62bb      	str	r3, [r7, #40]	; 0x28
	callbk_fns.disp_scan_res_callbk_fn = wifi_nrf_event_proc_disp_scan_res_zep;
   11980:	4b30      	ldr	r3, [pc, #192]	; (11a44 <wifi_nrf_drv_main_zep+0xf8>)
	callbk_fns.event_get_wiphy = wifi_nrf_wpa_supp_event_get_wiphy;
	callbk_fns.mgmt_rx_callbk_fn = wifi_nrf_wpa_supp_event_mgmt_rx_callbk_fn;
	callbk_fns.get_conn_info_callbk_fn = wifi_nrf_supp_event_proc_get_conn_info;
#endif /* CONFIG_WPA_SUPP */

	rpu_drv_priv_zep.fmac_priv = wifi_nrf_fmac_init(&data_config,
   11982:	f107 021c 	add.w	r2, r7, #28
	callbk_fns.disp_scan_res_callbk_fn = wifi_nrf_event_proc_disp_scan_res_zep;
   11986:	637b      	str	r3, [r7, #52]	; 0x34
	callbk_fns.twt_config_callbk_fn = wifi_nrf_event_proc_twt_setup_zep;
   11988:	4b2f      	ldr	r3, [pc, #188]	; (11a48 <wifi_nrf_drv_main_zep+0xfc>)
	rpu_drv_priv_zep.fmac_priv = wifi_nrf_fmac_init(&data_config,
   1198a:	f107 0110 	add.w	r1, r7, #16
	callbk_fns.twt_config_callbk_fn = wifi_nrf_event_proc_twt_setup_zep;
   1198e:	67fb      	str	r3, [r7, #124]	; 0x7c
	callbk_fns.twt_teardown_callbk_fn = wifi_nrf_event_proc_twt_teardown_zep;
   11990:	4b2e      	ldr	r3, [pc, #184]	; (11a4c <wifi_nrf_drv_main_zep+0x100>)
	rpu_drv_priv_zep.fmac_priv = wifi_nrf_fmac_init(&data_config,
   11992:	1d38      	adds	r0, r7, #4
	callbk_fns.twt_teardown_callbk_fn = wifi_nrf_event_proc_twt_teardown_zep;
   11994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	callbk_fns.twt_sleep_callbk_fn = wifi_nrf_event_proc_twt_sleep_zep;
   11998:	4b2d      	ldr	r3, [pc, #180]	; (11a50 <wifi_nrf_drv_main_zep+0x104>)
   1199a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	callbk_fns.event_get_reg = wifi_nrf_event_get_reg_zep;
   1199e:	4b2d      	ldr	r3, [pc, #180]	; (11a54 <wifi_nrf_drv_main_zep+0x108>)
   119a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	callbk_fns.event_get_ps_info = wifi_nrf_event_proc_get_power_save_info;
   119a4:	4b2c      	ldr	r3, [pc, #176]	; (11a58 <wifi_nrf_drv_main_zep+0x10c>)
   119a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	callbk_fns.cookie_rsp_callbk_fn = wifi_nrf_event_proc_cookie_rsp;
   119aa:	4b2c      	ldr	r3, [pc, #176]	; (11a5c <wifi_nrf_drv_main_zep+0x110>)
   119ac:	65fb      	str	r3, [r7, #92]	; 0x5c
	rpu_drv_priv_zep.fmac_priv = wifi_nrf_fmac_init(&data_config,
   119ae:	f7fe fc7b 	bl	102a8 <wifi_nrf_fmac_init>
   119b2:	f845 0c08 	str.w	r0, [r5, #-8]
							&callbk_fns);
#else /* !CONFIG_NRF700X_RADIO_TEST */
	rpu_drv_priv_zep.fmac_priv = wifi_nrf_fmac_init();
#endif /* CONFIG_NRF700X_RADIO_TEST */

	if (rpu_drv_priv_zep.fmac_priv == NULL) {
   119b6:	b9b8      	cbnz	r0, 119e8 <wifi_nrf_drv_main_zep+0x9c>
		LOG_ERR("%s: wifi_nrf_fmac_init failed\n",
   119b8:	466c      	mov	r4, sp
   119ba:	b088      	sub	sp, #32
   119bc:	466a      	mov	r2, sp
   119be:	4b28      	ldr	r3, [pc, #160]	; (11a60 <wifi_nrf_drv_main_zep+0x114>)
   119c0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   119c4:	6153      	str	r3, [r2, #20]
   119c6:	4b27      	ldr	r3, [pc, #156]	; (11a64 <wifi_nrf_drv_main_zep+0x118>)
   119c8:	4827      	ldr	r0, [pc, #156]	; (11a68 <wifi_nrf_drv_main_zep+0x11c>)
   119ca:	6193      	str	r3, [r2, #24]
   119cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   119d0:	8393      	strh	r3, [r2, #28]
   119d2:	4b26      	ldr	r3, [pc, #152]	; (11a6c <wifi_nrf_drv_main_zep+0x120>)
   119d4:	f842 3f10 	str.w	r3, [r2, #16]!
   119d8:	f011 fce7 	bl	233aa <z_log_msg_static_create.constprop.0>
   119dc:	46a5      	mov	sp, r4

	return 0;
fmac_deinit:
	wifi_nrf_fmac_deinit(rpu_drv_priv_zep.fmac_priv);
err:
	return -1;
   119de:	f04f 30ff 	mov.w	r0, #4294967295
}
   119e2:	379c      	adds	r7, #156	; 0x9c
   119e4:	46bd      	mov	sp, r7
   119e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = wifi_nrf_fmac_dev_add_zep(&rpu_drv_priv_zep);
   119e8:	f1a5 0008 	sub.w	r0, r5, #8
   119ec:	f7ff fef6 	bl	117dc <wifi_nrf_fmac_dev_add_zep>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   119f0:	4604      	mov	r4, r0
   119f2:	b1b8      	cbz	r0, 11a24 <wifi_nrf_drv_main_zep+0xd8>
		LOG_ERR("%s: wifi_nrf_fmac_dev_add_zep failed\n",
   119f4:	466c      	mov	r4, sp
   119f6:	b088      	sub	sp, #32
   119f8:	466a      	mov	r2, sp
   119fa:	4b1d      	ldr	r3, [pc, #116]	; (11a70 <wifi_nrf_drv_main_zep+0x124>)
   119fc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   11a00:	6153      	str	r3, [r2, #20]
   11a02:	4b18      	ldr	r3, [pc, #96]	; (11a64 <wifi_nrf_drv_main_zep+0x118>)
   11a04:	4818      	ldr	r0, [pc, #96]	; (11a68 <wifi_nrf_drv_main_zep+0x11c>)
   11a06:	6193      	str	r3, [r2, #24]
   11a08:	f44f 7300 	mov.w	r3, #512	; 0x200
   11a0c:	8393      	strh	r3, [r2, #28]
   11a0e:	4b17      	ldr	r3, [pc, #92]	; (11a6c <wifi_nrf_drv_main_zep+0x120>)
   11a10:	f842 3f10 	str.w	r3, [r2, #16]!
   11a14:	f011 fcc9 	bl	233aa <z_log_msg_static_create.constprop.0>
   11a18:	46a5      	mov	sp, r4
	wifi_nrf_fmac_deinit(rpu_drv_priv_zep.fmac_priv);
   11a1a:	f855 0c08 	ldr.w	r0, [r5, #-8]
   11a1e:	f011 faef 	bl	23000 <wifi_nrf_fmac_deinit>
   11a22:	e7dc      	b.n	119de <wifi_nrf_drv_main_zep+0x92>
	k_work_init_delayable(&vif_ctx_zep->scan_timeout_work,
   11a24:	f106 0028 	add.w	r0, r6, #40	; 0x28
   11a28:	4912      	ldr	r1, [pc, #72]	; (11a74 <wifi_nrf_drv_main_zep+0x128>)
   11a2a:	f012 fbc1 	bl	241b0 <k_work_init_delayable>
	return 0;
   11a2e:	4620      	mov	r0, r4
   11a30:	e7d7      	b.n	119e2 <wifi_nrf_drv_main_zep+0x96>
   11a32:	bf00      	nop
   11a34:	000203e8 	.word	0x000203e8
   11a38:	000233a9 	.word	0x000233a9
   11a3c:	200026e0 	.word	0x200026e0
   11a40:	00011759 	.word	0x00011759
   11a44:	00012251 	.word	0x00012251
   11a48:	00012779 	.word	0x00012779
   11a4c:	000236bf 	.word	0x000236bf
   11a50:	00012871 	.word	0x00012871
   11a54:	000233b1 	.word	0x000233b1
   11a58:	000235db 	.word	0x000235db
   11a5c:	000233cb 	.word	0x000233cb
   11a60:	00035d10 	.word	0x00035d10
   11a64:	00035d55 	.word	0x00035d55
   11a68:	00024d98 	.word	0x00024d98
   11a6c:	01000003 	.word	0x01000003
   11a70:	00035d2f 	.word	0x00035d2f
   11a74:	00012095 	.word	0x00012095

00011a78 <qspi_defconfig>:
			 .write = spim_write,
			 .hl_read = spim_hl_read};
#endif

struct qspi_config *qspi_defconfig(void)
{
   11a78:	b538      	push	{r3, r4, r5, lr}
	memset(&config, 0, sizeof(struct qspi_config));
   11a7a:	4c0d      	ldr	r4, [pc, #52]	; (11ab0 <qspi_defconfig+0x38>)
   11a7c:	226c      	movs	r2, #108	; 0x6c
   11a7e:	2100      	movs	r1, #0
   11a80:	4620      	mov	r0, r4
   11a82:	f005 fca9 	bl	173d8 <memset>
#if defined(CONFIG_NRF700X_ON_QSPI)
	config.addrmode = NRF_QSPI_ADDRMODE_24BIT;
	config.RDC4IO = 0xA0;
   11a86:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
   11a8a:	80a3      	strh	r3, [r4, #4]
	config.easydma = true;
	config.quad_spi = true;
#endif
	config.addrmask = 0x800000; /* set bit23 (incr. addr mode) */
   11a8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	config.quad_spi = true;
   11a90:	2501      	movs	r5, #1
	config.addrmask = 0x800000; /* set bit23 (incr. addr mode) */
   11a92:	6263      	str	r3, [r4, #36]	; 0x24

	config.test_name = "QSPI TEST";
   11a94:	4b07      	ldr	r3, [pc, #28]	; (11ab4 <qspi_defconfig+0x3c>)
	config.encryption = config.CMD_CNONCE = false;

#if defined(CONFIG_NRF700X_ON_QSPI)

	/*For #Bit 6 Enable below: i.e ALL Ones for QSPI Key*/
	memset(&config.p_cfg.key, 0xff, sizeof(config.p_cfg.key));
   11a96:	2210      	movs	r2, #16
   11a98:	21ff      	movs	r1, #255	; 0xff
   11a9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	config.test_name = "QSPI TEST";
   11a9e:	64e3      	str	r3, [r4, #76]	; 0x4c
	config.quad_spi = true;
   11aa0:	71e5      	strb	r5, [r4, #7]
	memset(&config.p_cfg.key, 0xff, sizeof(config.p_cfg.key));
   11aa2:	f005 fc99 	bl	173d8 <memset>

	config.p_cfg.nonce[0] = 0x16181648;
   11aa6:	4b04      	ldr	r3, [pc, #16]	; (11ab8 <qspi_defconfig+0x40>)
	config.p_cfg.nonce[1] = 0x0;
	config.p_cfg.nonce[2] = 0x1;
   11aa8:	6465      	str	r5, [r4, #68]	; 0x44
	config.p_cfg.nonce[0] = 0x16181648;
   11aaa:	63e3      	str	r3, [r4, #60]	; 0x3c

#endif /*CONFIG_NRF700X_ON_QSPI*/

	return &config;
}
   11aac:	4620      	mov	r0, r4
   11aae:	bd38      	pop	{r3, r4, r5, pc}
   11ab0:	200046d4 	.word	0x200046d4
   11ab4:	00035dfb 	.word	0x00035dfb
   11ab8:	16181648 	.word	0x16181648

00011abc <qspi_dev>:
#if CONFIG_NRF700X_ON_QSPI
	return &qspi;
#else
	return &spim;
#endif
}
   11abc:	4800      	ldr	r0, [pc, #0]	; (11ac0 <qspi_dev+0x4>)
   11abe:	4770      	bx	lr
   11ac0:	20000948 	.word	0x20000948

00011ac4 <rpu_irq_config>:

	return 0;
}

int rpu_irq_config(struct gpio_callback *irq_callback_data, void (*irq_handler)())
{
   11ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ac6:	4604      	mov	r4, r0
   11ac8:	460e      	mov	r6, r1
	int ret;

	ret = gpio_pin_configure_dt(&host_irq_spec, GPIO_INPUT);
   11aca:	4811      	ldr	r0, [pc, #68]	; (11b10 <rpu_irq_config+0x4c>)
   11acc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   11ad0:	f011 fc82 	bl	233d8 <gpio_pin_configure_dt>
	const struct gpio_driver_api *api =
   11ad4:	4d0f      	ldr	r5, [pc, #60]	; (11b14 <rpu_irq_config+0x50>)
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11ad6:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   11ada:	692b      	ldr	r3, [r5, #16]
	const struct gpio_driver_api *api =
   11adc:	68af      	ldr	r7, [r5, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   11ade:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11ae0:	2117      	movs	r1, #23
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   11ae2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11ae6:	bf14      	ite	ne
   11ae8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   11aec:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   11af0:	4628      	mov	r0, r5
   11af2:	f8d7 c018 	ldr.w	ip, [r7, #24]
   11af6:	47e0      	blx	ip
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
	callback->pin_mask = pin_mask;
   11af8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	callback->handler = handler;
   11afc:	6066      	str	r6, [r4, #4]
	callback->pin_mask = pin_mask;
   11afe:	60a3      	str	r3, [r4, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   11b00:	69fb      	ldr	r3, [r7, #28]
   11b02:	b11b      	cbz	r3, 11b0c <rpu_irq_config+0x48>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   11b04:	2201      	movs	r2, #1
   11b06:	4621      	mov	r1, r4
   11b08:	4628      	mov	r0, r5
   11b0a:	4798      	blx	r3
	gpio_add_callback(host_irq_spec.port, irq_callback_data);

	LOG_DBG("Finished Interrupt config\n\n");

	return 0;
}
   11b0c:	2000      	movs	r0, #0
   11b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b10:	0003115c 	.word	0x0003115c
   11b14:	00024958 	.word	0x00024958

00011b18 <ble_gpio_config>:


int ble_gpio_config(void)
{
   11b18:	b508      	push	{r3, lr}
   11b1a:	4807      	ldr	r0, [pc, #28]	; (11b38 <ble_gpio_config+0x20>)
   11b1c:	f012 f8b6 	bl	23c8c <z_device_is_ready>
#if defined(CONFIG_BOARD_NRF7002DK_NRF7001_NRF5340_CPUAPP) || \
	defined(CONFIG_BOARD_NRF7002DK_NRF5340_CPUAPP)
	int ret;

	if (!device_is_ready(btrf_switch_spec.port)) {
   11b20:	b130      	cbz	r0, 11b30 <ble_gpio_config+0x18>

	return ret;
#else
	return 0;
#endif /* CONFIG_BOARD_NRF700XDK_NRF5340 */
}
   11b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = gpio_pin_configure_dt(&btrf_switch_spec, GPIO_OUTPUT);
   11b26:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   11b2a:	4804      	ldr	r0, [pc, #16]	; (11b3c <ble_gpio_config+0x24>)
   11b2c:	f011 bc54 	b.w	233d8 <gpio_pin_configure_dt>
}
   11b30:	f06f 0012 	mvn.w	r0, #18
   11b34:	bd08      	pop	{r3, pc}
   11b36:	bf00      	nop
   11b38:	00024940 	.word	0x00024940
   11b3c:	00031144 	.word	0x00031144

00011b40 <rpu_gpio_config>:


int rpu_gpio_config(void)
{
   11b40:	b510      	push	{r4, lr}
   11b42:	b086      	sub	sp, #24
   11b44:	4817      	ldr	r0, [pc, #92]	; (11ba4 <rpu_gpio_config+0x64>)
   11b46:	f012 f8a1 	bl	23c8c <z_device_is_ready>
	int ret;

	if (!device_is_ready(iovdd_ctrl_spec.port)) {
   11b4a:	b920      	cbnz	r0, 11b56 <rpu_gpio_config+0x16>
		return -ENODEV;
   11b4c:	f06f 0412 	mvn.w	r4, #18
	}

	LOG_DBG("GPIO configuration done...\n\n");

	return 0;
}
   11b50:	4620      	mov	r0, r4
   11b52:	b006      	add	sp, #24
   11b54:	bd10      	pop	{r4, pc}
   11b56:	4813      	ldr	r0, [pc, #76]	; (11ba4 <rpu_gpio_config+0x64>)
   11b58:	f012 f898 	bl	23c8c <z_device_is_ready>
	if (!device_is_ready(bucken_spec.port)) {
   11b5c:	2800      	cmp	r0, #0
   11b5e:	d0f5      	beq.n	11b4c <rpu_gpio_config+0xc>
   11b60:	4810      	ldr	r0, [pc, #64]	; (11ba4 <rpu_gpio_config+0x64>)
   11b62:	f012 f893 	bl	23c8c <z_device_is_ready>
	if (!device_is_ready(host_irq_spec.port)) {
   11b66:	2800      	cmp	r0, #0
   11b68:	d0f0      	beq.n	11b4c <rpu_gpio_config+0xc>
	ret = gpio_pin_configure_dt(&bucken_spec, (GPIO_OUTPUT | NRF_GPIO_DRIVE_H0H1));
   11b6a:	490f      	ldr	r1, [pc, #60]	; (11ba8 <rpu_gpio_config+0x68>)
   11b6c:	480f      	ldr	r0, [pc, #60]	; (11bac <rpu_gpio_config+0x6c>)
   11b6e:	f011 fc33 	bl	233d8 <gpio_pin_configure_dt>
	if (ret) {
   11b72:	4604      	mov	r4, r0
   11b74:	b158      	cbz	r0, 11b8e <rpu_gpio_config+0x4e>
		LOG_ERR("BUCKEN GPIO configuration failed...\n");
   11b76:	4b0e      	ldr	r3, [pc, #56]	; (11bb0 <rpu_gpio_config+0x70>)
		LOG_ERR("IOVDD GPIO configuration failed...\n");
   11b78:	9305      	str	r3, [sp, #20]
   11b7a:	2302      	movs	r3, #2
   11b7c:	9304      	str	r3, [sp, #16]
   11b7e:	2300      	movs	r3, #0
   11b80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11b84:	480b      	ldr	r0, [pc, #44]	; (11bb4 <rpu_gpio_config+0x74>)
   11b86:	aa04      	add	r2, sp, #16
   11b88:	f7f3 f97c 	bl	4e84 <z_impl_z_log_msg_static_create>
		return ret;
   11b8c:	e7e0      	b.n	11b50 <rpu_gpio_config+0x10>
	ret = gpio_pin_configure_dt(&iovdd_ctrl_spec, GPIO_OUTPUT);
   11b8e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   11b92:	4809      	ldr	r0, [pc, #36]	; (11bb8 <rpu_gpio_config+0x78>)
   11b94:	f011 fc20 	bl	233d8 <gpio_pin_configure_dt>
	if (ret) {
   11b98:	4604      	mov	r4, r0
   11b9a:	2800      	cmp	r0, #0
   11b9c:	d0d8      	beq.n	11b50 <rpu_gpio_config+0x10>
		LOG_ERR("IOVDD GPIO configuration failed...\n");
   11b9e:	4b07      	ldr	r3, [pc, #28]	; (11bbc <rpu_gpio_config+0x7c>)
   11ba0:	e7ea      	b.n	11b78 <rpu_gpio_config+0x38>
   11ba2:	bf00      	nop
   11ba4:	00024958 	.word	0x00024958
   11ba8:	00020300 	.word	0x00020300
   11bac:	0003114c 	.word	0x0003114c
   11bb0:	00035e05 	.word	0x00035e05
   11bb4:	00024d98 	.word	0x00024d98
   11bb8:	00031154 	.word	0x00031154
   11bbc:	00035e2a 	.word	0x00035e2a

00011bc0 <rpu_pwron>:

int rpu_pwron(void)
{
   11bc0:	b510      	push	{r4, lr}
	int ret;

	ret = gpio_pin_set_dt(&bucken_spec, 1);
   11bc2:	2101      	movs	r1, #1
   11bc4:	4812      	ldr	r0, [pc, #72]	; (11c10 <rpu_pwron+0x50>)
{
   11bc6:	b086      	sub	sp, #24
	ret = gpio_pin_set_dt(&bucken_spec, 1);
   11bc8:	f011 fc1b 	bl	23402 <gpio_pin_set_dt>
	if (ret) {
   11bcc:	4604      	mov	r4, r0
   11bce:	b168      	cbz	r0, 11bec <rpu_pwron+0x2c>
		LOG_ERR("BUCKEN GPIO set failed...\n");
   11bd0:	4b10      	ldr	r3, [pc, #64]	; (11c14 <rpu_pwron+0x54>)
	}
	/* Settling time is 50us (H0) or 100us (L0) */
	k_msleep(1);
	ret = gpio_pin_set_dt(&iovdd_ctrl_spec, 1);
	if (ret) {
		LOG_ERR("IOVDD GPIO set failed...\n");
   11bd2:	9305      	str	r3, [sp, #20]
   11bd4:	2302      	movs	r3, #2
   11bd6:	9304      	str	r3, [sp, #16]
   11bd8:	2300      	movs	r3, #0
   11bda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11bde:	480e      	ldr	r0, [pc, #56]	; (11c18 <rpu_pwron+0x58>)
   11be0:	aa04      	add	r2, sp, #16
   11be2:	f7f3 f94f 	bl	4e84 <z_impl_z_log_msg_static_create>

	LOG_DBG("Bucken = %d, IOVDD = %d\n", gpio_pin_get_dt(&bucken_spec),
			gpio_pin_get_dt(&iovdd_ctrl_spec));

	return 0;
}
   11be6:	4620      	mov	r0, r4
   11be8:	b006      	add	sp, #24
   11bea:	bd10      	pop	{r4, pc}
   11bec:	2100      	movs	r1, #0
   11bee:	2021      	movs	r0, #33	; 0x21
   11bf0:	f004 fb9c 	bl	1632c <z_impl_k_sleep>
	ret = gpio_pin_set_dt(&iovdd_ctrl_spec, 1);
   11bf4:	2101      	movs	r1, #1
   11bf6:	4809      	ldr	r0, [pc, #36]	; (11c1c <rpu_pwron+0x5c>)
   11bf8:	f011 fc03 	bl	23402 <gpio_pin_set_dt>
	if (ret) {
   11bfc:	4604      	mov	r4, r0
   11bfe:	b108      	cbz	r0, 11c04 <rpu_pwron+0x44>
		LOG_ERR("IOVDD GPIO set failed...\n");
   11c00:	4b07      	ldr	r3, [pc, #28]	; (11c20 <rpu_pwron+0x60>)
   11c02:	e7e6      	b.n	11bd2 <rpu_pwron+0x12>
   11c04:	2100      	movs	r1, #0
   11c06:	2021      	movs	r0, #33	; 0x21
   11c08:	f004 fb90 	bl	1632c <z_impl_k_sleep>
   11c0c:	e7eb      	b.n	11be6 <rpu_pwron+0x26>
   11c0e:	bf00      	nop
   11c10:	0003114c 	.word	0x0003114c
   11c14:	00035e4e 	.word	0x00035e4e
   11c18:	00024d98 	.word	0x00024d98
   11c1c:	00031154 	.word	0x00031154
   11c20:	00035e69 	.word	0x00035e69

00011c24 <rpu_qspi_init>:
	return gpio_pin_set_dt(&btrf_switch_spec, ant_switch & 0x1);
}
#endif /* CONFIG_BOARD_NRF7002DK_NRF5340 */

int rpu_qspi_init(void)
{
   11c24:	b510      	push	{r4, lr}
	qdev = qspi_dev();
   11c26:	f7ff ff49 	bl	11abc <qspi_dev>
   11c2a:	4c05      	ldr	r4, [pc, #20]	; (11c40 <rpu_qspi_init+0x1c>)
   11c2c:	6020      	str	r0, [r4, #0]

	cfg = qspi_defconfig();
   11c2e:	f7ff ff23 	bl	11a78 <qspi_defconfig>
   11c32:	4b04      	ldr	r3, [pc, #16]	; (11c44 <rpu_qspi_init+0x20>)
   11c34:	6018      	str	r0, [r3, #0]

	qdev->init(cfg);
   11c36:	6823      	ldr	r3, [r4, #0]
   11c38:	689b      	ldr	r3, [r3, #8]
   11c3a:	4798      	blx	r3

	return 0;
}
   11c3c:	2000      	movs	r0, #0
   11c3e:	bd10      	pop	{r4, pc}
   11c40:	20004744 	.word	0x20004744
   11c44:	20004740 	.word	0x20004740

00011c48 <rpu_sleep>:
}

int rpu_sleep(void)
{
#if CONFIG_NRF700X_ON_QSPI
	return qspi_cmd_sleep_rpu(&qspi_perip);
   11c48:	4801      	ldr	r0, [pc, #4]	; (11c50 <rpu_sleep+0x8>)
   11c4a:	f001 bd97 	b.w	1377c <qspi_cmd_sleep_rpu>
   11c4e:	bf00      	nop
   11c50:	20000964 	.word	0x20000964

00011c54 <rpu_wrsr2>:
	rpu_read(addr, buff, wrd_len * 4);
	rpu_sleep();
}

int rpu_wrsr2(uint8_t data)
{
   11c54:	b508      	push	{r3, lr}
   11c56:	4601      	mov	r1, r0
#if CONFIG_NRF700X_ON_QSPI
	qspi_cmd_wakeup_rpu(&qspi_perip, data);
   11c58:	4802      	ldr	r0, [pc, #8]	; (11c64 <rpu_wrsr2+0x10>)
   11c5a:	f001 fb61 	bl	13320 <qspi_cmd_wakeup_rpu>
	spim_cmd_rpu_wakeup_fn(data);
#endif

	LOG_DBG("Written 0x%x to WRSR2\n", data);
	return 0;
}
   11c5e:	2000      	movs	r0, #0
   11c60:	bd08      	pop	{r3, pc}
   11c62:	bf00      	nop
   11c64:	20000964 	.word	0x20000964

00011c68 <rpu_rdsr2>:

int rpu_rdsr2(void)
{
#if CONFIG_NRF700X_ON_QSPI
	return qspi_validate_rpu_wake_writecmd(&qspi_perip);
   11c68:	4801      	ldr	r0, [pc, #4]	; (11c70 <rpu_rdsr2+0x8>)
   11c6a:	f011 bd91 	b.w	23790 <qspi_validate_rpu_wake_writecmd>
   11c6e:	bf00      	nop
   11c70:	20000964 	.word	0x20000964

00011c74 <rpu_rdsr1>:
}

int rpu_rdsr1(void)
{
#if CONFIG_NRF700X_ON_QSPI
	return qspi_wait_while_rpu_awake(&qspi_perip);
   11c74:	4801      	ldr	r0, [pc, #4]	; (11c7c <rpu_rdsr1+0x8>)
   11c76:	f001 bafb 	b.w	13270 <qspi_wait_while_rpu_awake>
   11c7a:	bf00      	nop
   11c7c:	20000964 	.word	0x20000964

00011c80 <rpu_clks_on>:
}


int rpu_clks_on(void)
{
	uint32_t rpu_clks = 0x100;
   11c80:	f44f 7380 	mov.w	r3, #256	; 0x100
{
   11c84:	b507      	push	{r0, r1, r2, lr}
	/* Enable RPU Clocks */
	qdev->write(0x048C20, &rpu_clks, 4);
   11c86:	2204      	movs	r2, #4
	uint32_t rpu_clks = 0x100;
   11c88:	9301      	str	r3, [sp, #4]
	qdev->write(0x048C20, &rpu_clks, 4);
   11c8a:	4b05      	ldr	r3, [pc, #20]	; (11ca0 <rpu_clks_on+0x20>)
   11c8c:	eb0d 0102 	add.w	r1, sp, r2
   11c90:	681b      	ldr	r3, [r3, #0]
   11c92:	4804      	ldr	r0, [pc, #16]	; (11ca4 <rpu_clks_on+0x24>)
   11c94:	68db      	ldr	r3, [r3, #12]
   11c96:	4798      	blx	r3
	LOG_DBG("RPU Clocks ON...\n");
	return 0;
}
   11c98:	2000      	movs	r0, #0
   11c9a:	b003      	add	sp, #12
   11c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca0:	20004744 	.word	0x20004744
   11ca4:	00048c20 	.word	0x00048c20

00011ca8 <wifi_nrf_fmac_rx_cmd_send>:


enum wifi_nrf_status wifi_nrf_fmac_rx_cmd_send(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
					       enum wifi_nrf_fmac_rx_cmd_type cmd_type,
					       unsigned int desc_id)
{
   11ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cac:	4615      	mov	r5, r2
   11cae:	b087      	sub	sp, #28
   11cb0:	460f      	mov	r7, r1
	unsigned long nwb = 0;
	unsigned long nwb_data = 0;
	unsigned long phy_addr = 0;
	unsigned int buf_len = 0;

	status = wifi_nrf_fmac_map_desc_to_pool(fmac_dev_ctx,
   11cb2:	aa04      	add	r2, sp, #16
   11cb4:	4629      	mov	r1, r5
{
   11cb6:	4606      	mov	r6, r0
	status = wifi_nrf_fmac_map_desc_to_pool(fmac_dev_ctx,
   11cb8:	f011 fbd2 	bl	23460 <wifi_nrf_fmac_map_desc_to_pool>
						desc_id,
						&pool_info);

	if (status != WIFI_NRF_STATUS_SUCCESS) {
   11cbc:	4604      	mov	r4, r0
   11cbe:	6830      	ldr	r0, [r6, #0]
   11cc0:	b12c      	cbz	r4, 11cce <wifi_nrf_fmac_rx_cmd_send+0x26>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11cc2:	4a40      	ldr	r2, [pc, #256]	; (11dc4 <wifi_nrf_fmac_rx_cmd_send+0x11c>)
   11cc4:	4940      	ldr	r1, [pc, #256]	; (11dc8 <wifi_nrf_fmac_rx_cmd_send+0x120>)
   11cc6:	6800      	ldr	r0, [r0, #0]
						     0,
						     pool_info.pool_id,
						     pool_info.buf_id);

		if (!nwb_data) {
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11cc8:	f010 ff40 	bl	22b4c <wifi_nrf_osal_log_err>
					      "%s: wifi_nrf_hal_buf_unmap_rx failed\n",
					      __func__);
			goto out;
   11ccc:	e04f      	b.n	11d6e <wifi_nrf_fmac_rx_cmd_send+0xc6>
	buf_len = fmac_dev_ctx->fpriv->rx_buf_pools[pool_info.pool_id].buf_sz + RX_BUF_HEADROOM;
   11cce:	f8dd 9010 	ldr.w	r9, [sp, #16]
	rx_buf_info = &fmac_dev_ctx->rx_buf_info[desc_id];
   11cd2:	f8d6 8018 	ldr.w	r8, [r6, #24]
	buf_len = fmac_dev_ctx->fpriv->rx_buf_pools[pool_info.pool_id].buf_sz + RX_BUF_HEADROOM;
   11cd6:	eb00 0389 	add.w	r3, r0, r9, lsl #2
   11cda:	f8b3 b016 	ldrh.w	fp, [r3, #22]
	rx_buf_info = &fmac_dev_ctx->rx_buf_info[desc_id];
   11cde:	eb08 0ac5 	add.w	sl, r8, r5, lsl #3
	if (cmd_type == WIFI_NRF_FMAC_RX_CMD_TYPE_INIT) {
   11ce2:	2f00      	cmp	r7, #0
   11ce4:	d147      	bne.n	11d76 <wifi_nrf_fmac_rx_cmd_send+0xce>
		if (rx_buf_info->mapped) {
   11ce6:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11cea:	6800      	ldr	r0, [r0, #0]
		if (rx_buf_info->mapped) {
   11cec:	b12b      	cbz	r3, 11cfa <wifi_nrf_fmac_rx_cmd_send+0x52>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11cee:	462b      	mov	r3, r5
   11cf0:	4a34      	ldr	r2, [pc, #208]	; (11dc4 <wifi_nrf_fmac_rx_cmd_send+0x11c>)
   11cf2:	4936      	ldr	r1, [pc, #216]	; (11dcc <wifi_nrf_fmac_rx_cmd_send+0x124>)
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11cf4:	f010 ff2a 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
   11cf8:	e00c      	b.n	11d14 <wifi_nrf_fmac_rx_cmd_send+0x6c>
	buf_len = fmac_dev_ctx->fpriv->rx_buf_pools[pool_info.pool_id].buf_sz + RX_BUF_HEADROOM;
   11cfa:	f10b 0b04 	add.w	fp, fp, #4
		nwb = (unsigned long)wifi_nrf_osal_nbuf_alloc(fmac_dev_ctx->fpriv->opriv,
   11cfe:	4659      	mov	r1, fp
   11d00:	f010 ff62 	bl	22bc8 <wifi_nrf_osal_nbuf_alloc>
		if (!nwb) {
   11d04:	6833      	ldr	r3, [r6, #0]
   11d06:	4607      	mov	r7, r0
   11d08:	b938      	cbnz	r0, 11d1a <wifi_nrf_fmac_rx_cmd_send+0x72>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11d0a:	4a2e      	ldr	r2, [pc, #184]	; (11dc4 <wifi_nrf_fmac_rx_cmd_send+0x11c>)
   11d0c:	4930      	ldr	r1, [pc, #192]	; (11dd0 <wifi_nrf_fmac_rx_cmd_send+0x128>)
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11d0e:	6818      	ldr	r0, [r3, #0]
   11d10:	f010 ff1c 	bl	22b4c <wifi_nrf_osal_log_err>
			status = WIFI_NRF_STATUS_FAIL;
   11d14:	f04f 34ff 	mov.w	r4, #4294967295
   11d18:	e029      	b.n	11d6e <wifi_nrf_fmac_rx_cmd_send+0xc6>
		nwb_data = (unsigned long)wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   11d1a:	4601      	mov	r1, r0
   11d1c:	6818      	ldr	r0, [r3, #0]
   11d1e:	f010 ff62 	bl	22be6 <wifi_nrf_osal_nbuf_data_get>
		phy_addr = wifi_nrf_hal_buf_map_rx(fmac_dev_ctx->hal_dev_ctx,
   11d22:	9b05      	ldr	r3, [sp, #20]
		*(unsigned int *)(nwb_data) = desc_id;
   11d24:	6005      	str	r5, [r0, #0]
		phy_addr = wifi_nrf_hal_buf_map_rx(fmac_dev_ctx->hal_dev_ctx,
   11d26:	9300      	str	r3, [sp, #0]
		nwb_data = (unsigned long)wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   11d28:	4601      	mov	r1, r0
		phy_addr = wifi_nrf_hal_buf_map_rx(fmac_dev_ctx->hal_dev_ctx,
   11d2a:	465a      	mov	r2, fp
   11d2c:	464b      	mov	r3, r9
   11d2e:	68b0      	ldr	r0, [r6, #8]
   11d30:	f7fc fbae 	bl	e490 <wifi_nrf_hal_buf_map_rx>
		if (!phy_addr) {
   11d34:	4683      	mov	fp, r0
   11d36:	b918      	cbnz	r0, 11d40 <wifi_nrf_fmac_rx_cmd_send+0x98>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11d38:	6833      	ldr	r3, [r6, #0]
   11d3a:	4a22      	ldr	r2, [pc, #136]	; (11dc4 <wifi_nrf_fmac_rx_cmd_send+0x11c>)
   11d3c:	4925      	ldr	r1, [pc, #148]	; (11dd4 <wifi_nrf_fmac_rx_cmd_send+0x12c>)
   11d3e:	e7e6      	b.n	11d0e <wifi_nrf_fmac_rx_cmd_send+0x66>
		rx_buf_info->mapped = true;
   11d40:	2301      	movs	r3, #1
		rx_buf_info->nwb = nwb;
   11d42:	f8ca 7004 	str.w	r7, [sl, #4]
		rx_buf_info->mapped = true;
   11d46:	f808 3035 	strb.w	r3, [r8, r5, lsl #3]
		wifi_nrf_osal_mem_set(fmac_dev_ctx->fpriv->opriv,
   11d4a:	6830      	ldr	r0, [r6, #0]
   11d4c:	4622      	mov	r2, r4
   11d4e:	2304      	movs	r3, #4
   11d50:	a903      	add	r1, sp, #12
   11d52:	6800      	ldr	r0, [r0, #0]
   11d54:	f010 feb3 	bl	22abe <wifi_nrf_osal_mem_set>
		status = wifi_nrf_hal_data_cmd_send(fmac_dev_ctx->hal_dev_ctx,
   11d58:	e9cd 5900 	strd	r5, r9, [sp]
   11d5c:	2304      	movs	r3, #4
   11d5e:	2102      	movs	r1, #2
   11d60:	68b0      	ldr	r0, [r6, #8]
   11d62:	aa03      	add	r2, sp, #12
		rx_cmd.addr = (unsigned int)phy_addr;
   11d64:	f8cd b00c 	str.w	fp, [sp, #12]
		status = wifi_nrf_hal_data_cmd_send(fmac_dev_ctx->hal_dev_ctx,
   11d68:	f7fc fdb4 	bl	e8d4 <wifi_nrf_hal_data_cmd_send>
   11d6c:	4604      	mov	r4, r0
				      cmd_type);
		goto out;
	}
out:
	return status;
}
   11d6e:	4620      	mov	r0, r4
   11d70:	b007      	add	sp, #28
   11d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (cmd_type == WIFI_NRF_FMAC_RX_CMD_TYPE_DEINIT) {
   11d76:	2f01      	cmp	r7, #1
   11d78:	d11d      	bne.n	11db6 <wifi_nrf_fmac_rx_cmd_send+0x10e>
		if (!rx_buf_info->mapped) {
   11d7a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   11d7e:	b923      	cbnz	r3, 11d8a <wifi_nrf_fmac_rx_cmd_send+0xe2>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11d80:	462b      	mov	r3, r5
   11d82:	4a10      	ldr	r2, [pc, #64]	; (11dc4 <wifi_nrf_fmac_rx_cmd_send+0x11c>)
   11d84:	4914      	ldr	r1, [pc, #80]	; (11dd8 <wifi_nrf_fmac_rx_cmd_send+0x130>)
   11d86:	6800      	ldr	r0, [r0, #0]
   11d88:	e7b4      	b.n	11cf4 <wifi_nrf_fmac_rx_cmd_send+0x4c>
		nwb_data = wifi_nrf_hal_buf_unmap_rx(fmac_dev_ctx->hal_dev_ctx,
   11d8a:	9b05      	ldr	r3, [sp, #20]
   11d8c:	464a      	mov	r2, r9
   11d8e:	4621      	mov	r1, r4
   11d90:	68b0      	ldr	r0, [r6, #8]
   11d92:	f7fc fbd7 	bl	e544 <wifi_nrf_hal_buf_unmap_rx>
		if (!nwb_data) {
   11d96:	6833      	ldr	r3, [r6, #0]
   11d98:	b918      	cbnz	r0, 11da2 <wifi_nrf_fmac_rx_cmd_send+0xfa>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11d9a:	4a0a      	ldr	r2, [pc, #40]	; (11dc4 <wifi_nrf_fmac_rx_cmd_send+0x11c>)
   11d9c:	490f      	ldr	r1, [pc, #60]	; (11ddc <wifi_nrf_fmac_rx_cmd_send+0x134>)
   11d9e:	6818      	ldr	r0, [r3, #0]
   11da0:	e792      	b.n	11cc8 <wifi_nrf_fmac_rx_cmd_send+0x20>
		wifi_nrf_osal_nbuf_free(fmac_dev_ctx->fpriv->opriv,
   11da2:	f8da 1004 	ldr.w	r1, [sl, #4]
   11da6:	6818      	ldr	r0, [r3, #0]
   11da8:	f010 ff13 	bl	22bd2 <wifi_nrf_osal_nbuf_free>
		rx_buf_info->nwb = 0;
   11dac:	f8ca 4004 	str.w	r4, [sl, #4]
		rx_buf_info->mapped = false;
   11db0:	f808 4035 	strb.w	r4, [r8, r5, lsl #3]
		status = WIFI_NRF_STATUS_SUCCESS;
   11db4:	e7db      	b.n	11d6e <wifi_nrf_fmac_rx_cmd_send+0xc6>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11db6:	463b      	mov	r3, r7
   11db8:	4a02      	ldr	r2, [pc, #8]	; (11dc4 <wifi_nrf_fmac_rx_cmd_send+0x11c>)
   11dba:	4909      	ldr	r1, [pc, #36]	; (11de0 <wifi_nrf_fmac_rx_cmd_send+0x138>)
   11dbc:	6800      	ldr	r0, [r0, #0]
   11dbe:	f010 fec5 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
   11dc2:	e7d4      	b.n	11d6e <wifi_nrf_fmac_rx_cmd_send+0xc6>
   11dc4:	00036046 	.word	0x00036046
   11dc8:	00035e83 	.word	0x00035e83
   11dcc:	00035eae 	.word	0x00035eae
   11dd0:	00035eeb 	.word	0x00035eeb
   11dd4:	00035f12 	.word	0x00035f12
   11dd8:	00035f36 	.word	0x00035f36
   11ddc:	00035f6f 	.word	0x00035f6f
   11de0:	00035f95 	.word	0x00035f95

00011de4 <wifi_nrf_fmac_rx_event_process>:
}
#endif /* CONFIG_NRF700X_RX_WQ_ENABLED */

enum wifi_nrf_status wifi_nrf_fmac_rx_event_process(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
						    struct nrf_wifi_rx_buff *config)
{
   11de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de8:	4604      	mov	r4, r0
   11dea:	460e      	mov	r6, r1

	vif_ctx = fmac_dev_ctx->vif_ctx[config->wdev_id];

	num_pkts = config->rx_pkt_cnt;

	for (i = 0; i < num_pkts; i++) {
   11dec:	f04f 0900 	mov.w	r9, #0
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   11df0:	f04f 35ff 	mov.w	r5, #4294967295
	vif_ctx = fmac_dev_ctx->vif_ctx[config->wdev_id];
   11df4:	7b0b      	ldrb	r3, [r1, #12]
{
   11df6:	b091      	sub	sp, #68	; 0x44
	vif_ctx = fmac_dev_ctx->vif_ctx[config->wdev_id];
   11df8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11dfc:	68db      	ldr	r3, [r3, #12]
   11dfe:	9302      	str	r3, [sp, #8]
	num_pkts = config->rx_pkt_cnt;
   11e00:	7b4b      	ldrb	r3, [r1, #13]
   11e02:	9303      	str	r3, [sp, #12]

		rx_buf_info->nwb = 0;
		rx_buf_info->mapped = false;

		if (config->rx_pkt_type == NRF_WIFI_RX_PKT_DATA) {
			switch (config->rx_buff_info[i].pkt_type) {
   11e04:	f101 0318 	add.w	r3, r1, #24
   11e08:	9304      	str	r3, [sp, #16]
	for (i = 0; i < num_pkts; i++) {
   11e0a:	9b03      	ldr	r3, [sp, #12]
   11e0c:	4599      	cmp	r9, r3
   11e0e:	d213      	bcs.n	11e38 <wifi_nrf_fmac_rx_event_process+0x54>
		if (desc_id >= fmac_dev_ctx->fpriv->num_rx_bufs) {
   11e10:	6827      	ldr	r7, [r4, #0]
		desc_id = config->rx_buff_info[i].descriptor_id;
   11e12:	eb09 1a09 	add.w	sl, r9, r9, lsl #4
   11e16:	eb06 030a 	add.w	r3, r6, sl
   11e1a:	f8b3 8014 	ldrh.w	r8, [r3, #20]
		pkt_len = config->rx_buff_info[i].rx_pkt_len;
   11e1e:	f8b3 b016 	ldrh.w	fp, [r3, #22]
		if (desc_id >= fmac_dev_ctx->fpriv->num_rx_bufs) {
   11e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11e24:	4543      	cmp	r3, r8
   11e26:	d80b      	bhi.n	11e40 <wifi_nrf_fmac_rx_event_process+0x5c>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11e28:	4643      	mov	r3, r8
   11e2a:	4a4e      	ldr	r2, [pc, #312]	; (11f64 <wifi_nrf_fmac_rx_event_process+0x180>)
   11e2c:	494e      	ldr	r1, [pc, #312]	; (11f68 <wifi_nrf_fmac_rx_event_process+0x184>)
   11e2e:	6838      	ldr	r0, [r7, #0]
			case PKT_TYPE_MSDU:
				wifi_nrf_util_rx_convert_amsdu_to_eth(fmac_dev_ctx,
								      nwb);
				break;
			default:
				wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11e30:	f010 fe8c 	bl	22b4c <wifi_nrf_osal_log_err>
			status = WIFI_NRF_STATUS_FAIL;
   11e34:	f04f 35ff 	mov.w	r5, #4294967295
			goto out;
		}
	}
out:
	return status;
}
   11e38:	4628      	mov	r0, r5
   11e3a:	b011      	add	sp, #68	; 0x44
   11e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = wifi_nrf_fmac_map_desc_to_pool(fmac_dev_ctx,
   11e40:	4641      	mov	r1, r8
   11e42:	4620      	mov	r0, r4
   11e44:	aa06      	add	r2, sp, #24
   11e46:	f011 fb0b 	bl	23460 <wifi_nrf_fmac_map_desc_to_pool>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   11e4a:	4605      	mov	r5, r0
   11e4c:	b128      	cbz	r0, 11e5a <wifi_nrf_fmac_rx_event_process+0x76>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11e4e:	4a45      	ldr	r2, [pc, #276]	; (11f64 <wifi_nrf_fmac_rx_event_process+0x180>)
   11e50:	4946      	ldr	r1, [pc, #280]	; (11f6c <wifi_nrf_fmac_rx_event_process+0x188>)
   11e52:	6838      	ldr	r0, [r7, #0]
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11e54:	f010 fe7a 	bl	22b4c <wifi_nrf_osal_log_err>
			goto out;
   11e58:	e7ee      	b.n	11e38 <wifi_nrf_fmac_rx_event_process+0x54>
		nwb_data = (void *)wifi_nrf_hal_buf_unmap_rx(fmac_dev_ctx->hal_dev_ctx,
   11e5a:	4659      	mov	r1, fp
   11e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11e60:	68a0      	ldr	r0, [r4, #8]
   11e62:	f7fc fb6f 	bl	e544 <wifi_nrf_hal_buf_unmap_rx>
		if (!nwb_data) {
   11e66:	f8d4 c000 	ldr.w	ip, [r4]
   11e6a:	b920      	cbnz	r0, 11e76 <wifi_nrf_fmac_rx_event_process+0x92>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11e6c:	4a3d      	ldr	r2, [pc, #244]	; (11f64 <wifi_nrf_fmac_rx_event_process+0x180>)
   11e6e:	4940      	ldr	r1, [pc, #256]	; (11f70 <wifi_nrf_fmac_rx_event_process+0x18c>)
   11e70:	f8dc 0000 	ldr.w	r0, [ip]
   11e74:	e7ee      	b.n	11e54 <wifi_nrf_fmac_rx_event_process+0x70>
		rx_buf_info = &fmac_dev_ctx->rx_buf_info[desc_id];
   11e76:	69a3      	ldr	r3, [r4, #24]
		wifi_nrf_osal_nbuf_data_put(fmac_dev_ctx->fpriv->opriv,
   11e78:	f8dc 0000 	ldr.w	r0, [ip]
		rx_buf_info = &fmac_dev_ctx->rx_buf_info[desc_id];
   11e7c:	9301      	str	r3, [sp, #4]
   11e7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
		nwb = (void *)rx_buf_info->nwb;
   11e82:	685f      	ldr	r7, [r3, #4]
		wifi_nrf_osal_nbuf_data_put(fmac_dev_ctx->fpriv->opriv,
   11e84:	f10b 0204 	add.w	r2, fp, #4
   11e88:	4639      	mov	r1, r7
		nwb = (void *)rx_buf_info->nwb;
   11e8a:	9305      	str	r3, [sp, #20]
		wifi_nrf_osal_nbuf_data_put(fmac_dev_ctx->fpriv->opriv,
   11e8c:	f010 feb0 	bl	22bf0 <wifi_nrf_osal_nbuf_data_put>
		wifi_nrf_osal_nbuf_data_pull(fmac_dev_ctx->fpriv->opriv,
   11e90:	6820      	ldr	r0, [r4, #0]
   11e92:	2204      	movs	r2, #4
   11e94:	4639      	mov	r1, r7
   11e96:	6800      	ldr	r0, [r0, #0]
   11e98:	f010 feb8 	bl	22c0c <wifi_nrf_osal_nbuf_data_pull>
		nwb_data = wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   11e9c:	6822      	ldr	r2, [r4, #0]
   11e9e:	4639      	mov	r1, r7
   11ea0:	6810      	ldr	r0, [r2, #0]
   11ea2:	f010 fea0 	bl	22be6 <wifi_nrf_osal_nbuf_data_get>
		rx_buf_info->nwb = 0;
   11ea6:	9b05      	ldr	r3, [sp, #20]
		nwb_data = wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   11ea8:	4683      	mov	fp, r0
		rx_buf_info->nwb = 0;
   11eaa:	605d      	str	r5, [r3, #4]
		rx_buf_info->mapped = false;
   11eac:	9b01      	ldr	r3, [sp, #4]
   11eae:	f803 5038 	strb.w	r5, [r3, r8, lsl #3]
		if (config->rx_pkt_type == NRF_WIFI_RX_PKT_DATA) {
   11eb2:	68b3      	ldr	r3, [r6, #8]
   11eb4:	2b00      	cmp	r3, #0
   11eb6:	d147      	bne.n	11f48 <wifi_nrf_fmac_rx_event_process+0x164>
			switch (config->rx_buff_info[i].pkt_type) {
   11eb8:	9b04      	ldr	r3, [sp, #16]
   11eba:	f813 300a 	ldrb.w	r3, [r3, sl]
   11ebe:	2b01      	cmp	r3, #1
   11ec0:	d033      	beq.n	11f2a <wifi_nrf_fmac_rx_event_process+0x146>
   11ec2:	2b02      	cmp	r3, #2
   11ec4:	d037      	beq.n	11f36 <wifi_nrf_fmac_rx_event_process+0x152>
   11ec6:	6820      	ldr	r0, [r4, #0]
   11ec8:	2b00      	cmp	r3, #0
   11eca:	d139      	bne.n	11f40 <wifi_nrf_fmac_rx_event_process+0x15c>
				wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   11ecc:	231e      	movs	r3, #30
   11ece:	465a      	mov	r2, fp
   11ed0:	a908      	add	r1, sp, #32
   11ed2:	6800      	ldr	r0, [r0, #0]
   11ed4:	f010 fde9 	bl	22aaa <wifi_nrf_osal_mem_cpy>
									  config->mac_header_len));
   11ed8:	7bf1      	ldrb	r1, [r6, #15]
				eth_type = wifi_nrf_util_rx_get_eth_type(fmac_dev_ctx,
   11eda:	4620      	mov	r0, r4
   11edc:	4459      	add	r1, fp
   11ede:	f011 fadb 	bl	23498 <wifi_nrf_util_rx_get_eth_type>
				size = config->mac_header_len +
   11ee2:	f896 a00f 	ldrb.w	sl, [r6, #15]
				eth_type = wifi_nrf_util_rx_get_eth_type(fmac_dev_ctx,
   11ee6:	4605      	mov	r5, r0
					wifi_nrf_util_get_skip_header_bytes(eth_type);
   11ee8:	f011 fada 	bl	234a0 <wifi_nrf_util_get_skip_header_bytes>
				wifi_nrf_osal_nbuf_data_pull(fmac_dev_ctx->fpriv->opriv,
   11eec:	6823      	ldr	r3, [r4, #0]
   11eee:	eb0a 0200 	add.w	r2, sl, r0
   11ef2:	4639      	mov	r1, r7
   11ef4:	6818      	ldr	r0, [r3, #0]
   11ef6:	f010 fe89 	bl	22c0c <wifi_nrf_osal_nbuf_data_pull>
				wifi_nrf_util_convert_to_eth(fmac_dev_ctx,
   11efa:	462b      	mov	r3, r5
   11efc:	4639      	mov	r1, r7
   11efe:	4620      	mov	r0, r4
   11f00:	aa08      	add	r2, sp, #32
   11f02:	f011 fad3 	bl	234ac <wifi_nrf_util_convert_to_eth>
			fmac_dev_ctx->fpriv->callbk_fns.rx_frm_callbk_fn(vif_ctx->os_vif_ctx,
   11f06:	6823      	ldr	r3, [r4, #0]
   11f08:	9a02      	ldr	r2, [sp, #8]
   11f0a:	4639      	mov	r1, r7
   11f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11f0e:	6850      	ldr	r0, [r2, #4]
   11f10:	4798      	blx	r3
		status = wifi_nrf_fmac_rx_cmd_send(fmac_dev_ctx,
   11f12:	4642      	mov	r2, r8
   11f14:	2100      	movs	r1, #0
   11f16:	4620      	mov	r0, r4
   11f18:	f7ff fec6 	bl	11ca8 <wifi_nrf_fmac_rx_cmd_send>
		if (status != WIFI_NRF_STATUS_SUCCESS) {
   11f1c:	4605      	mov	r5, r0
   11f1e:	b1f0      	cbz	r0, 11f5e <wifi_nrf_fmac_rx_event_process+0x17a>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11f20:	6823      	ldr	r3, [r4, #0]
   11f22:	4a10      	ldr	r2, [pc, #64]	; (11f64 <wifi_nrf_fmac_rx_event_process+0x180>)
   11f24:	4913      	ldr	r1, [pc, #76]	; (11f74 <wifi_nrf_fmac_rx_event_process+0x190>)
   11f26:	6818      	ldr	r0, [r3, #0]
   11f28:	e794      	b.n	11e54 <wifi_nrf_fmac_rx_event_process+0x70>
				wifi_nrf_osal_nbuf_data_pull(fmac_dev_ctx->fpriv->opriv,
   11f2a:	6823      	ldr	r3, [r4, #0]
   11f2c:	4639      	mov	r1, r7
   11f2e:	7bf2      	ldrb	r2, [r6, #15]
   11f30:	6818      	ldr	r0, [r3, #0]
   11f32:	f010 fe6b 	bl	22c0c <wifi_nrf_osal_nbuf_data_pull>
				wifi_nrf_util_rx_convert_amsdu_to_eth(fmac_dev_ctx,
   11f36:	4639      	mov	r1, r7
   11f38:	4620      	mov	r0, r4
   11f3a:	f011 fb02 	bl	23542 <wifi_nrf_util_rx_convert_amsdu_to_eth>
				break;
   11f3e:	e7e2      	b.n	11f06 <wifi_nrf_fmac_rx_event_process+0x122>
				wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11f40:	4a08      	ldr	r2, [pc, #32]	; (11f64 <wifi_nrf_fmac_rx_event_process+0x180>)
   11f42:	490d      	ldr	r1, [pc, #52]	; (11f78 <wifi_nrf_fmac_rx_event_process+0x194>)
   11f44:	6800      	ldr	r0, [r0, #0]
   11f46:	e773      	b.n	11e30 <wifi_nrf_fmac_rx_event_process+0x4c>
				wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   11f48:	6822      	ldr	r2, [r4, #0]
		} else if (config->rx_pkt_type == NRF_WIFI_RX_PKT_BCN_PRB_RSP) {
   11f4a:	2b01      	cmp	r3, #1
				wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   11f4c:	6810      	ldr	r0, [r2, #0]
		} else if (config->rx_pkt_type == NRF_WIFI_RX_PKT_BCN_PRB_RSP) {
   11f4e:	d103      	bne.n	11f58 <wifi_nrf_fmac_rx_event_process+0x174>
			wifi_nrf_osal_nbuf_free(fmac_dev_ctx->fpriv->opriv,
   11f50:	4639      	mov	r1, r7
   11f52:	f010 fe3e 	bl	22bd2 <wifi_nrf_osal_nbuf_free>
   11f56:	e7dc      	b.n	11f12 <wifi_nrf_fmac_rx_event_process+0x12e>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11f58:	4a02      	ldr	r2, [pc, #8]	; (11f64 <wifi_nrf_fmac_rx_event_process+0x180>)
   11f5a:	4908      	ldr	r1, [pc, #32]	; (11f7c <wifi_nrf_fmac_rx_event_process+0x198>)
   11f5c:	e768      	b.n	11e30 <wifi_nrf_fmac_rx_event_process+0x4c>
	for (i = 0; i < num_pkts; i++) {
   11f5e:	f109 0901 	add.w	r9, r9, #1
   11f62:	e752      	b.n	11e0a <wifi_nrf_fmac_rx_event_process+0x26>
   11f64:	00036027 	.word	0x00036027
   11f68:	00035fb0 	.word	0x00035fb0
   11f6c:	00035e83 	.word	0x00035e83
   11f70:	00035f6f 	.word	0x00035f6f
   11f74:	00036001 	.word	0x00036001
   11f78:	00035fc8 	.word	0x00035fc8
   11f7c:	00035fe1 	.word	0x00035fe1

00011f80 <wifi_nrf_fmac_vif_check_if_limit>:


int wifi_nrf_fmac_vif_check_if_limit(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
				     int if_type)
{
	switch (if_type) {
   11f80:	3902      	subs	r1, #2
{
   11f82:	b508      	push	{r3, lr}
	switch (if_type) {
   11f84:	2907      	cmp	r1, #7
   11f86:	d819      	bhi.n	11fbc <wifi_nrf_fmac_vif_check_if_limit+0x3c>
   11f88:	e8df f001 	tbb	[pc, r1]
   11f8c:	18181104 	.word	0x18181104
   11f90:	11041818 	.word	0x11041818
	case NRF_WIFI_IFTYPE_STATION:
	case NRF_WIFI_IFTYPE_P2P_CLIENT:
		if (fmac_dev_ctx->num_sta >= MAX_NUM_STAS) {
   11f94:	f890 3190 	ldrb.w	r3, [r0, #400]	; 0x190
   11f98:	2b01      	cmp	r3, #1
   11f9a:	d913      	bls.n	11fc4 <wifi_nrf_fmac_vif_check_if_limit+0x44>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11f9c:	6803      	ldr	r3, [r0, #0]
   11f9e:	4a0b      	ldr	r2, [pc, #44]	; (11fcc <wifi_nrf_fmac_vif_check_if_limit+0x4c>)
   11fa0:	490b      	ldr	r1, [pc, #44]	; (11fd0 <wifi_nrf_fmac_vif_check_if_limit+0x50>)
		}
		break;
	case NRF_WIFI_IFTYPE_AP:
	case NRF_WIFI_IFTYPE_P2P_GO:
		if (fmac_dev_ctx->num_ap >= MAX_NUM_APS) {
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11fa2:	6818      	ldr	r0, [r3, #0]
   11fa4:	f010 fdd2 	bl	22b4c <wifi_nrf_osal_log_err>
			return -1;
   11fa8:	f04f 30ff 	mov.w	r0, #4294967295
				      __func__);
		return -1;
	}

	return 0;
}
   11fac:	bd08      	pop	{r3, pc}
		if (fmac_dev_ctx->num_ap >= MAX_NUM_APS) {
   11fae:	f890 3191 	ldrb.w	r3, [r0, #401]	; 0x191
   11fb2:	b14b      	cbz	r3, 11fc8 <wifi_nrf_fmac_vif_check_if_limit+0x48>
			wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11fb4:	6803      	ldr	r3, [r0, #0]
   11fb6:	4a05      	ldr	r2, [pc, #20]	; (11fcc <wifi_nrf_fmac_vif_check_if_limit+0x4c>)
   11fb8:	4906      	ldr	r1, [pc, #24]	; (11fd4 <wifi_nrf_fmac_vif_check_if_limit+0x54>)
   11fba:	e7f2      	b.n	11fa2 <wifi_nrf_fmac_vif_check_if_limit+0x22>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   11fbc:	6803      	ldr	r3, [r0, #0]
   11fbe:	4a03      	ldr	r2, [pc, #12]	; (11fcc <wifi_nrf_fmac_vif_check_if_limit+0x4c>)
   11fc0:	4905      	ldr	r1, [pc, #20]	; (11fd8 <wifi_nrf_fmac_vif_check_if_limit+0x58>)
   11fc2:	e7ee      	b.n	11fa2 <wifi_nrf_fmac_vif_check_if_limit+0x22>
	return 0;
   11fc4:	2000      	movs	r0, #0
   11fc6:	e7f1      	b.n	11fac <wifi_nrf_fmac_vif_check_if_limit+0x2c>
   11fc8:	4618      	mov	r0, r3
   11fca:	e7ef      	b.n	11fac <wifi_nrf_fmac_vif_check_if_limit+0x2c>
   11fcc:	0003610b 	.word	0x0003610b
   11fd0:	00036060 	.word	0x00036060
   11fd4:	00036089 	.word	0x00036089
   11fd8:	000360b1 	.word	0x000360b1

00011fdc <wifi_nrf_fmac_vif_incr_if_type>:


void wifi_nrf_fmac_vif_incr_if_type(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
				    int if_type)
{
	switch (if_type) {
   11fdc:	3902      	subs	r1, #2
   11fde:	2907      	cmp	r1, #7
   11fe0:	d811      	bhi.n	12006 <wifi_nrf_fmac_vif_incr_if_type+0x2a>
   11fe2:	e8df f001 	tbb	[pc, r1]
   11fe6:	0a04      	.short	0x0a04
   11fe8:	10101010 	.word	0x10101010
   11fec:	0a04      	.short	0x0a04
	case NRF_WIFI_IFTYPE_STATION:
	case NRF_WIFI_IFTYPE_P2P_CLIENT:
		fmac_dev_ctx->num_sta++;
   11fee:	f890 3190 	ldrb.w	r3, [r0, #400]	; 0x190
   11ff2:	3301      	adds	r3, #1
   11ff4:	f880 3190 	strb.w	r3, [r0, #400]	; 0x190
		break;
   11ff8:	4770      	bx	lr
	case NRF_WIFI_IFTYPE_AP:
	case NRF_WIFI_IFTYPE_P2P_GO:
		fmac_dev_ctx->num_ap++;
   11ffa:	f890 3191 	ldrb.w	r3, [r0, #401]	; 0x191
   11ffe:	3301      	adds	r3, #1
   12000:	f880 3191 	strb.w	r3, [r0, #401]	; 0x191
	default:
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
				      "%s:Unsupported VIF type\n",
				      __func__);
	}
}
   12004:	4770      	bx	lr
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   12006:	6803      	ldr	r3, [r0, #0]
   12008:	4a02      	ldr	r2, [pc, #8]	; (12014 <wifi_nrf_fmac_vif_incr_if_type+0x38>)
   1200a:	4903      	ldr	r1, [pc, #12]	; (12018 <wifi_nrf_fmac_vif_incr_if_type+0x3c>)
   1200c:	6818      	ldr	r0, [r3, #0]
   1200e:	f010 bd9d 	b.w	22b4c <wifi_nrf_osal_log_err>
   12012:	bf00      	nop
   12014:	000360ec 	.word	0x000360ec
   12018:	000360d3 	.word	0x000360d3

0001201c <twt_rpu_to_wifi_mgmt_neg_type>:

	return rpu_neg_type;
}

static enum wifi_twt_negotiation_type twt_rpu_to_wifi_mgmt_neg_type(unsigned char neg_type)
{
   1201c:	b598      	push	{r3, r4, r7, lr}
   1201e:	af00      	add	r7, sp, #0
	enum wifi_twt_negotiation_type wifi_neg_type = WIFI_TWT_INDIVIDUAL;

	switch (neg_type) {
   12020:	b1a8      	cbz	r0, 1204e <twt_rpu_to_wifi_mgmt_neg_type+0x32>
   12022:	2802      	cmp	r0, #2
   12024:	d016      	beq.n	12054 <twt_rpu_to_wifi_mgmt_neg_type+0x38>
		break;
	case NRF_WIFI_TWT_NEGOTIATION_TYPE_BROADCAST:
		wifi_neg_type = WIFI_TWT_BROADCAST;
		break;
	default:
		LOG_ERR("%s: Invalid negotiation type: %d\n",
   12026:	466c      	mov	r4, sp
   12028:	b08a      	sub	sp, #40	; 0x28
   1202a:	466a      	mov	r2, sp
   1202c:	4b0a      	ldr	r3, [pc, #40]	; (12058 <twt_rpu_to_wifi_mgmt_neg_type+0x3c>)
   1202e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   12032:	6153      	str	r3, [r2, #20]
   12034:	4b09      	ldr	r3, [pc, #36]	; (1205c <twt_rpu_to_wifi_mgmt_neg_type+0x40>)
	switch (neg_type) {
   12036:	e9c2 3006 	strd	r3, r0, [r2, #24]
		LOG_ERR("%s: Invalid negotiation type: %d\n",
   1203a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1203e:	8413      	strh	r3, [r2, #32]
   12040:	4b07      	ldr	r3, [pc, #28]	; (12060 <twt_rpu_to_wifi_mgmt_neg_type+0x44>)
   12042:	4808      	ldr	r0, [pc, #32]	; (12064 <twt_rpu_to_wifi_mgmt_neg_type+0x48>)
   12044:	f842 3f10 	str.w	r3, [r2, #16]!
   12048:	f011 fac4 	bl	235d4 <z_log_msg_static_create.constprop.0>
   1204c:	46a5      	mov	sp, r4
		wifi_neg_type = WIFI_TWT_INDIVIDUAL;
   1204e:	2000      	movs	r0, #0
			__func__, neg_type);
		break;
	}

	return wifi_neg_type;
}
   12050:	46bd      	mov	sp, r7
   12052:	bd98      	pop	{r3, r4, r7, pc}
	switch (neg_type) {
   12054:	2001      	movs	r0, #1
   12056:	e7fb      	b.n	12050 <twt_rpu_to_wifi_mgmt_neg_type+0x34>
   12058:	0003612c 	.word	0x0003612c
   1205c:	00036382 	.word	0x00036382
   12060:	01000004 	.word	0x01000004
   12064:	00024d98 	.word	0x00024d98

00012068 <wifi_nrf_twt_float_to_us.isra.0>:
static uint64_t wifi_nrf_twt_float_to_us(struct twt_interval_float twt_interval_float)
   12068:	b510      	push	{r4, lr}
   1206a:	460c      	mov	r4, r1
	return floor(ldexp(twt_interval_float.mantissa, twt_interval_float.exponent) / (1000)) *
   1206c:	f7ee f9b6 	bl	3dc <__aeabi_ui2d>
   12070:	4622      	mov	r2, r4
   12072:	f004 fd6d 	bl	16b50 <ldexp>
   12076:	2200      	movs	r2, #0
   12078:	4b05      	ldr	r3, [pc, #20]	; (12090 <wifi_nrf_twt_float_to_us.isra.0+0x28>)
   1207a:	f7ee fb53 	bl	724 <__aeabi_ddiv>
   1207e:	f7ef f8c7 	bl	1210 <floor>
   12082:	2200      	movs	r2, #0
   12084:	4b02      	ldr	r3, [pc, #8]	; (12090 <wifi_nrf_twt_float_to_us.isra.0+0x28>)
   12086:	f7ee fa23 	bl	4d0 <__aeabi_dmul>
   1208a:	f7ee fcbb 	bl	a04 <__aeabi_d2ulz>
}
   1208e:	bd10      	pop	{r4, pc}
   12090:	408f4000 	.word	0x408f4000

00012094 <wifi_nrf_scan_timeout_work>:
{
   12094:	b5b0      	push	{r4, r5, r7, lr}
   12096:	b08c      	sub	sp, #48	; 0x30
	if (!vif_ctx_zep->scan_in_progress) {
   12098:	f810 3c10 	ldrb.w	r3, [r0, #-16]
{
   1209c:	4604      	mov	r4, r0
	disp_scan_cb = (scan_result_cb_t)vif_ctx_zep->disp_scan_cb;
   1209e:	f850 5c14 	ldr.w	r5, [r0, #-20]
{
   120a2:	af00      	add	r7, sp, #0
	if (!vif_ctx_zep->scan_in_progress) {
   120a4:	b9ab      	cbnz	r3, 120d2 <wifi_nrf_scan_timeout_work+0x3e>
		LOG_INF("%s: Scan not in progress\n", __func__);
   120a6:	466c      	mov	r4, sp
   120a8:	b088      	sub	sp, #32
   120aa:	466a      	mov	r2, sp
   120ac:	4b12      	ldr	r3, [pc, #72]	; (120f8 <wifi_nrf_scan_timeout_work+0x64>)
   120ae:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   120b2:	6153      	str	r3, [r2, #20]
   120b4:	4b11      	ldr	r3, [pc, #68]	; (120fc <wifi_nrf_scan_timeout_work+0x68>)
   120b6:	4812      	ldr	r0, [pc, #72]	; (12100 <wifi_nrf_scan_timeout_work+0x6c>)
   120b8:	6193      	str	r3, [r2, #24]
   120ba:	f44f 7300 	mov.w	r3, #512	; 0x200
   120be:	8393      	strh	r3, [r2, #28]
   120c0:	4b10      	ldr	r3, [pc, #64]	; (12104 <wifi_nrf_scan_timeout_work+0x70>)
   120c2:	f842 3f10 	str.w	r3, [r2, #16]!
   120c6:	f011 fa85 	bl	235d4 <z_log_msg_static_create.constprop.0>
   120ca:	46a5      	mov	sp, r4
}
   120cc:	3730      	adds	r7, #48	; 0x30
   120ce:	46bd      	mov	sp, r7
   120d0:	bdb0      	pop	{r4, r5, r7, pc}
	if (disp_scan_cb) {
   120d2:	b16d      	cbz	r5, 120f0 <wifi_nrf_scan_timeout_work+0x5c>
		memset(&res, 0x0, sizeof(res));
   120d4:	222d      	movs	r2, #45	; 0x2d
   120d6:	2100      	movs	r1, #0
   120d8:	4638      	mov	r0, r7
   120da:	f005 f97d 	bl	173d8 <memset>
		disp_scan_cb(vif_ctx_zep->zep_net_if_ctx, -ETIMEDOUT, &res);
   120de:	463a      	mov	r2, r7
   120e0:	f06f 0173 	mvn.w	r1, #115	; 0x73
   120e4:	f854 0c24 	ldr.w	r0, [r4, #-36]
   120e8:	47a8      	blx	r5
		vif_ctx_zep->disp_scan_cb = NULL;
   120ea:	2300      	movs	r3, #0
   120ec:	f844 3c14 	str.w	r3, [r4, #-20]
	vif_ctx_zep->scan_in_progress = false;
   120f0:	2300      	movs	r3, #0
   120f2:	f804 3c10 	strb.w	r3, [r4, #-16]
   120f6:	e7e9      	b.n	120cc <wifi_nrf_scan_timeout_work+0x38>
   120f8:	0003614e 	.word	0x0003614e
   120fc:	0003640d 	.word	0x0003640d
   12100:	00024d98 	.word	0x00024d98
   12104:	01000003 	.word	0x01000003

00012108 <wifi_nrf_disp_scan_zep>:
{
   12108:	b5f0      	push	{r4, r5, r6, r7, lr}
   1210a:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
	vif_ctx_zep = dev->data;
   1210e:	6904      	ldr	r4, [r0, #16]
{
   12110:	460b      	mov	r3, r1
   12112:	af00      	add	r7, sp, #0
	if (!vif_ctx_zep) {
   12114:	b9c4      	cbnz	r4, 12148 <wifi_nrf_disp_scan_zep+0x40>
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   12116:	466c      	mov	r4, sp
   12118:	b088      	sub	sp, #32
   1211a:	466a      	mov	r2, sp
   1211c:	4b30      	ldr	r3, [pc, #192]	; (121e0 <wifi_nrf_disp_scan_zep+0xd8>)
		LOG_ERR("%s: Interface not UP\n", __func__);
   1211e:	6153      	str	r3, [r2, #20]
   12120:	4b30      	ldr	r3, [pc, #192]	; (121e4 <wifi_nrf_disp_scan_zep+0xdc>)
   12122:	4831      	ldr	r0, [pc, #196]	; (121e8 <wifi_nrf_disp_scan_zep+0xe0>)
   12124:	6193      	str	r3, [r2, #24]
   12126:	f44f 7300 	mov.w	r3, #512	; 0x200
   1212a:	8393      	strh	r3, [r2, #28]
   1212c:	4b2f      	ldr	r3, [pc, #188]	; (121ec <wifi_nrf_disp_scan_zep+0xe4>)
   1212e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12132:	f842 3f10 	str.w	r3, [r2, #16]!
   12136:	f011 fa4d 	bl	235d4 <z_log_msg_static_create.constprop.0>
	int ret = -1;
   1213a:	f04f 30ff 	mov.w	r0, #4294967295
   1213e:	46a5      	mov	sp, r4
}
   12140:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
   12144:	46bd      	mov	sp, r7
   12146:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vif_ctx_zep->if_op_state != WIFI_NRF_FMAC_IF_OP_STATE_UP) {
   12148:	f894 6064 	ldrb.w	r6, [r4, #100]	; 0x64
   1214c:	2e01      	cmp	r6, #1
   1214e:	d004      	beq.n	1215a <wifi_nrf_disp_scan_zep+0x52>
		LOG_ERR("%s: Interface not UP\n", __func__);
   12150:	466c      	mov	r4, sp
   12152:	b088      	sub	sp, #32
   12154:	466a      	mov	r2, sp
   12156:	4b26      	ldr	r3, [pc, #152]	; (121f0 <wifi_nrf_disp_scan_zep+0xe8>)
   12158:	e7e1      	b.n	1211e <wifi_nrf_disp_scan_zep+0x16>
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   1215a:	68e5      	ldr	r5, [r4, #12]
	if (!rpu_ctx_zep) {
   1215c:	b925      	cbnz	r5, 12168 <wifi_nrf_disp_scan_zep+0x60>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n", __func__);
   1215e:	466c      	mov	r4, sp
   12160:	b088      	sub	sp, #32
   12162:	466a      	mov	r2, sp
   12164:	4b23      	ldr	r3, [pc, #140]	; (121f4 <wifi_nrf_disp_scan_zep+0xec>)
   12166:	e7da      	b.n	1211e <wifi_nrf_disp_scan_zep+0x16>
	if (vif_ctx_zep->scan_in_progress) {
   12168:	7e21      	ldrb	r1, [r4, #24]
   1216a:	b1a9      	cbz	r1, 12198 <wifi_nrf_disp_scan_zep+0x90>
		LOG_INF("%s: Scan already in progress\n", __func__);
   1216c:	466c      	mov	r4, sp
   1216e:	b088      	sub	sp, #32
   12170:	466a      	mov	r2, sp
   12172:	4b21      	ldr	r3, [pc, #132]	; (121f8 <wifi_nrf_disp_scan_zep+0xf0>)
   12174:	481c      	ldr	r0, [pc, #112]	; (121e8 <wifi_nrf_disp_scan_zep+0xe0>)
   12176:	6153      	str	r3, [r2, #20]
   12178:	4b1a      	ldr	r3, [pc, #104]	; (121e4 <wifi_nrf_disp_scan_zep+0xdc>)
   1217a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1217e:	6193      	str	r3, [r2, #24]
   12180:	f44f 7300 	mov.w	r3, #512	; 0x200
   12184:	8393      	strh	r3, [r2, #28]
   12186:	4b19      	ldr	r3, [pc, #100]	; (121ec <wifi_nrf_disp_scan_zep+0xe4>)
   12188:	f842 3f10 	str.w	r3, [r2, #16]!
   1218c:	f011 fa22 	bl	235d4 <z_log_msg_static_create.constprop.0>
		ret = -EBUSY;
   12190:	f06f 000f 	mvn.w	r0, #15
   12194:	46a5      	mov	sp, r4
		goto out;
   12196:	e7d3      	b.n	12140 <wifi_nrf_disp_scan_zep+0x38>
	vif_ctx_zep->disp_scan_cb = cb;
   12198:	6163      	str	r3, [r4, #20]
	memset(&scan_info, 0, sizeof(scan_info));
   1219a:	f240 22bb 	movw	r2, #699	; 0x2bb
   1219e:	1d38      	adds	r0, r7, #4
   121a0:	f005 f91a 	bl	173d8 <memset>
	if (!vif_ctx_zep->passive_scan) {
   121a4:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
   121a8:	b903      	cbnz	r3, 121ac <wifi_nrf_disp_scan_zep+0xa4>
		scan_info.scan_params.num_scan_ssids = 1;
   121aa:	743e      	strb	r6, [r7, #16]
	status = wifi_nrf_fmac_scan(rpu_ctx_zep->rpu_ctx, vif_ctx_zep->vif_idx, &scan_info);
   121ac:	6868      	ldr	r0, [r5, #4]
   121ae:	7c21      	ldrb	r1, [r4, #16]
   121b0:	1d3a      	adds	r2, r7, #4
   121b2:	f7fe f9c9 	bl	10548 <wifi_nrf_fmac_scan>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   121b6:	4605      	mov	r5, r0
   121b8:	b120      	cbz	r0, 121c4 <wifi_nrf_disp_scan_zep+0xbc>
		LOG_ERR("%s: wifi_nrf_fmac_scan failed\n", __func__);
   121ba:	466c      	mov	r4, sp
   121bc:	b088      	sub	sp, #32
   121be:	466a      	mov	r2, sp
   121c0:	4b0e      	ldr	r3, [pc, #56]	; (121fc <wifi_nrf_disp_scan_zep+0xf4>)
   121c2:	e7ac      	b.n	1211e <wifi_nrf_disp_scan_zep+0x16>
	vif_ctx_zep->scan_in_progress = true;
   121c4:	2301      	movs	r3, #1
	vif_ctx_zep->scan_type = SCAN_DISPLAY;
   121c6:	61e0      	str	r0, [r4, #28]
	vif_ctx_zep->scan_in_progress = true;
   121c8:	7623      	strb	r3, [r4, #24]
	vif_ctx_zep->scan_res_cnt = 0;
   121ca:	6220      	str	r0, [r4, #32]
	k_work_schedule(&vif_ctx_zep->scan_timeout_work, WIFI_NRF_SCAN_TIMEOUT);
   121cc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   121d0:	2300      	movs	r3, #0
   121d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   121d6:	f003 fd7f 	bl	15cd8 <k_work_schedule>
	ret = 0;
   121da:	4628      	mov	r0, r5
   121dc:	e7b0      	b.n	12140 <wifi_nrf_disp_scan_zep+0x38>
   121de:	bf00      	nop
   121e0:	00035b78 	.word	0x00035b78
   121e4:	000363f6 	.word	0x000363f6
   121e8:	00024d98 	.word	0x00024d98
   121ec:	01000003 	.word	0x01000003
   121f0:	00036168 	.word	0x00036168
   121f4:	00035b91 	.word	0x00035b91
   121f8:	0003617e 	.word	0x0003617e
   121fc:	0003619c 	.word	0x0003619c

00012200 <wifi_nrf_disp_scan_res_get_zep>:
{
   12200:	b5b0      	push	{r4, r5, r7, lr}
	status = wifi_nrf_fmac_scan_res_get(rpu_ctx_zep->rpu_ctx,
   12202:	68c3      	ldr	r3, [r0, #12]
   12204:	7c01      	ldrb	r1, [r0, #16]
   12206:	2200      	movs	r2, #0
   12208:	6858      	ldr	r0, [r3, #4]
{
   1220a:	af00      	add	r7, sp, #0
	status = wifi_nrf_fmac_scan_res_get(rpu_ctx_zep->rpu_ctx,
   1220c:	f7fe f9f4 	bl	105f8 <wifi_nrf_fmac_scan_res_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   12210:	4604      	mov	r4, r0
   12212:	b190      	cbz	r0, 1223a <wifi_nrf_disp_scan_res_get_zep+0x3a>
		LOG_ERR("%s: wifi_nrf_fmac_scan failed\n", __func__);
   12214:	466d      	mov	r5, sp
   12216:	b088      	sub	sp, #32
   12218:	466a      	mov	r2, sp
   1221a:	4b09      	ldr	r3, [pc, #36]	; (12240 <wifi_nrf_disp_scan_res_get_zep+0x40>)
   1221c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12220:	6153      	str	r3, [r2, #20]
   12222:	4b08      	ldr	r3, [pc, #32]	; (12244 <wifi_nrf_disp_scan_res_get_zep+0x44>)
   12224:	4808      	ldr	r0, [pc, #32]	; (12248 <wifi_nrf_disp_scan_res_get_zep+0x48>)
   12226:	6193      	str	r3, [r2, #24]
   12228:	f44f 7300 	mov.w	r3, #512	; 0x200
   1222c:	8393      	strh	r3, [r2, #28]
   1222e:	4b07      	ldr	r3, [pc, #28]	; (1224c <wifi_nrf_disp_scan_res_get_zep+0x4c>)
   12230:	f842 3f10 	str.w	r3, [r2, #16]!
   12234:	f011 f9ce 	bl	235d4 <z_log_msg_static_create.constprop.0>
   12238:	46ad      	mov	sp, r5
}
   1223a:	4620      	mov	r0, r4
   1223c:	46bd      	mov	sp, r7
   1223e:	bdb0      	pop	{r4, r5, r7, pc}
   12240:	0003619c 	.word	0x0003619c
   12244:	000363d7 	.word	0x000363d7
   12248:	00024d98 	.word	0x00024d98
   1224c:	01000003 	.word	0x01000003

00012250 <wifi_nrf_event_proc_disp_scan_res_zep>:
{
   12250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12254:	4604      	mov	r4, r0
   12256:	460f      	mov	r7, r1
   12258:	461e      	mov	r6, r3
	for (i = 0; i < scan_res->event_bss_count; i++) {
   1225a:	f04f 0800 	mov.w	r8, #0
   1225e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 12348 <wifi_nrf_event_proc_disp_scan_res_zep+0xf8>
{
   12262:	b08d      	sub	sp, #52	; 0x34
   12264:	f101 0526 	add.w	r5, r1, #38	; 0x26
	for (i = 0; i < scan_res->event_bss_count; i++) {
   12268:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1226c:	4598      	cmp	r8, r3
   1226e:	d30e      	bcc.n	1228e <wifi_nrf_event_proc_disp_scan_res_zep+0x3e>
	if (more_res == false) {
   12270:	b956      	cbnz	r6, 12288 <wifi_nrf_event_proc_disp_scan_res_zep+0x38>
		vif_ctx_zep->disp_scan_cb(vif_ctx_zep->zep_net_if_ctx, 0, NULL);
   12272:	6860      	ldr	r0, [r4, #4]
   12274:	4632      	mov	r2, r6
   12276:	4631      	mov	r1, r6
   12278:	6963      	ldr	r3, [r4, #20]
   1227a:	4798      	blx	r3
		vif_ctx_zep->scan_in_progress = false;
   1227c:	7626      	strb	r6, [r4, #24]
		vif_ctx_zep->disp_scan_cb = NULL;
   1227e:	6166      	str	r6, [r4, #20]
		k_work_cancel_delayable(&vif_ctx_zep->scan_timeout_work);
   12280:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12284:	f011 ffa2 	bl	241cc <k_work_cancel_delayable>
}
   12288:	b00d      	add	sp, #52	; 0x34
   1228a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memset(&res, 0x0, sizeof(res));
   1228e:	2226      	movs	r2, #38	; 0x26
   12290:	2100      	movs	r1, #0
   12292:	4668      	mov	r0, sp
   12294:	f005 f8a0 	bl	173d8 <memset>
		res.ssid_length = MIN(sizeof(res.ssid), r->ssid.nrf_wifi_ssid_len);
   12298:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		res.band = r->nwk_band;
   1229c:	2344      	movs	r3, #68	; 0x44
		res.ssid_length = MIN(sizeof(res.ssid), r->ssid.nrf_wifi_ssid_len);
   1229e:	2a20      	cmp	r2, #32
   122a0:	bf28      	it	cs
   122a2:	2220      	movcs	r2, #32
		res.band = r->nwk_band;
   122a4:	fb03 7308 	mla	r3, r3, r8, r7
		res.ssid_length = MIN(sizeof(res.ssid), r->ssid.nrf_wifi_ssid_len);
   122a8:	f88d 2020 	strb.w	r2, [sp, #32]
		res.band = r->nwk_band;
   122ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   122ae:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
		res.channel = r->nwk_channel;
   122b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
   122b4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		res.security = drv_to_wifi_mgmt(r->security_type);
   122b8:	f8d3 3055 	ldr.w	r3, [r3, #85]	; 0x55
   122bc:	2b07      	cmp	r3, #7
   122be:	bf8c      	ite	hi
   122c0:	2308      	movhi	r3, #8
   122c2:	f819 3003 	ldrbls.w	r3, [r9, r3]
   122c6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		res.mfp = drv_to_wifi_mgmt_mfp(r->mfp_flag);
   122ca:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
	if (!mfp_flag)
   122ce:	b133      	cbz	r3, 122de <wifi_nrf_event_proc_disp_scan_res_zep+0x8e>
	if (mfp_flag & NRF_WIFI_MFP_REQUIRED)
   122d0:	07d9      	lsls	r1, r3, #31
   122d2:	d431      	bmi.n	12338 <wifi_nrf_event_proc_disp_scan_res_zep+0xe8>
	return WIFI_MFP_UNKNOWN;
   122d4:	f013 0f02 	tst.w	r3, #2
   122d8:	bf14      	ite	ne
   122da:	2301      	movne	r3, #1
   122dc:	2303      	moveq	r3, #3
		memcpy(res.ssid,
   122de:	4629      	mov	r1, r5
   122e0:	4668      	mov	r0, sp
		res.mfp = drv_to_wifi_mgmt_mfp(r->mfp_flag);
   122e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		memcpy(res.ssid,
   122e6:	f7ee fc35 	bl	b54 <memcpy>
		memcpy(res.mac,	r->mac_addr, NRF_WIFI_ETH_ADDR_LEN);
   122ea:	6a2b      	ldr	r3, [r5, #32]
   122ec:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
   122f0:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   122f2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		res.mac_length = NRF_WIFI_ETH_ADDR_LEN;
   122f6:	2306      	movs	r3, #6
   122f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		if (r->signal.signal_type == NRF_WIFI_SIGNAL_TYPE_MBM) {
   122fc:	2344      	movs	r3, #68	; 0x44
   122fe:	fb03 7308 	mla	r3, r3, r8, r7
   12302:	f103 0258 	add.w	r2, r3, #88	; 0x58
   12306:	f8d3 305d 	ldr.w	r3, [r3, #93]	; 0x5d
   1230a:	2b02      	cmp	r3, #2
   1230c:	d116      	bne.n	1233c <wifi_nrf_event_proc_disp_scan_res_zep+0xec>
			int val = (r->signal.signal.mbm_signal);
   1230e:	f8d2 3009 	ldr.w	r3, [r2, #9]
			res.rssi = (val / 100);
   12312:	2264      	movs	r2, #100	; 0x64
   12314:	fb93 f3f2 	sdiv	r3, r3, r2
			res.rssi = (r->signal.signal.unspec_signal);
   12318:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		vif_ctx_zep->disp_scan_cb(vif_ctx_zep->zep_net_if_ctx,
   1231c:	6963      	ldr	r3, [r4, #20]
   1231e:	466a      	mov	r2, sp
   12320:	2100      	movs	r1, #0
   12322:	6860      	ldr	r0, [r4, #4]
   12324:	4798      	blx	r3
		vif_ctx_zep->scan_res_cnt++;
   12326:	6a23      	ldr	r3, [r4, #32]
   12328:	3301      	adds	r3, #1
   1232a:	6223      	str	r3, [r4, #32]
	z_impl_k_yield();
   1232c:	f003 ff7c 	bl	16228 <z_impl_k_yield>
	for (i = 0; i < scan_res->event_bss_count; i++) {
   12330:	f108 0801 	add.w	r8, r8, #1
   12334:	3544      	adds	r5, #68	; 0x44
   12336:	e797      	b.n	12268 <wifi_nrf_event_proc_disp_scan_res_zep+0x18>
		return WIFI_MFP_REQUIRED;
   12338:	2302      	movs	r3, #2
   1233a:	e7d0      	b.n	122de <wifi_nrf_event_proc_disp_scan_res_zep+0x8e>
		} else if (r->signal.signal_type == NRF_WIFI_SIGNAL_TYPE_UNSPEC) {
   1233c:	2b03      	cmp	r3, #3
   1233e:	d1ed      	bne.n	1231c <wifi_nrf_event_proc_disp_scan_res_zep+0xcc>
			res.rssi = (r->signal.signal.unspec_signal);
   12340:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   12344:	e7e8      	b.n	12318 <wifi_nrf_event_proc_disp_scan_res_zep+0xc8>
   12346:	bf00      	nop
   12348:	000362eb 	.word	0x000362eb

0001234c <wifi_nrf_set_power_save>:
{
   1234c:	b5b0      	push	{r4, r5, r7, lr}
   1234e:	460c      	mov	r4, r1
   12350:	af00      	add	r7, sp, #0
	if (!dev || !params) {
   12352:	b100      	cbz	r0, 12356 <wifi_nrf_set_power_save+0xa>
   12354:	b9b1      	cbnz	r1, 12384 <wifi_nrf_set_power_save+0x38>
		LOG_ERR("%s: dev or params is NULL\n", __func__);
   12356:	466c      	mov	r4, sp
   12358:	b088      	sub	sp, #32
   1235a:	466a      	mov	r2, sp
   1235c:	4b44      	ldr	r3, [pc, #272]	; (12470 <wifi_nrf_set_power_save+0x124>)
   1235e:	6153      	str	r3, [r2, #20]
   12360:	4b44      	ldr	r3, [pc, #272]	; (12474 <wifi_nrf_set_power_save+0x128>)
   12362:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12366:	6193      	str	r3, [r2, #24]
   12368:	f44f 7300 	mov.w	r3, #512	; 0x200
   1236c:	8393      	strh	r3, [r2, #28]
   1236e:	4b42      	ldr	r3, [pc, #264]	; (12478 <wifi_nrf_set_power_save+0x12c>)
   12370:	4842      	ldr	r0, [pc, #264]	; (1247c <wifi_nrf_set_power_save+0x130>)
   12372:	f842 3f10 	str.w	r3, [r2, #16]!
   12376:	f011 f92d 	bl	235d4 <z_log_msg_static_create.constprop.0>
   1237a:	46a5      	mov	sp, r4
	int ret = -1;
   1237c:	f04f 30ff 	mov.w	r0, #4294967295
}
   12380:	46bd      	mov	sp, r7
   12382:	bdb0      	pop	{r4, r5, r7, pc}
	vif_ctx_zep = dev->data;
   12384:	6903      	ldr	r3, [r0, #16]
	if (!vif_ctx_zep) {
   12386:	b923      	cbnz	r3, 12392 <wifi_nrf_set_power_save+0x46>
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   12388:	466c      	mov	r4, sp
   1238a:	b088      	sub	sp, #32
   1238c:	466a      	mov	r2, sp
   1238e:	4b3c      	ldr	r3, [pc, #240]	; (12480 <wifi_nrf_set_power_save+0x134>)
   12390:	e7e5      	b.n	1235e <wifi_nrf_set_power_save+0x12>
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   12392:	68d8      	ldr	r0, [r3, #12]
	if (!rpu_ctx_zep) {
   12394:	b920      	cbnz	r0, 123a0 <wifi_nrf_set_power_save+0x54>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n", __func__);
   12396:	466c      	mov	r4, sp
   12398:	b088      	sub	sp, #32
   1239a:	466a      	mov	r2, sp
   1239c:	4b39      	ldr	r3, [pc, #228]	; (12484 <wifi_nrf_set_power_save+0x138>)
   1239e:	e7de      	b.n	1235e <wifi_nrf_set_power_save+0x12>
	switch (params->type) {
   123a0:	7b0a      	ldrb	r2, [r1, #12]
   123a2:	2a04      	cmp	r2, #4
   123a4:	d85f      	bhi.n	12466 <wifi_nrf_set_power_save+0x11a>
   123a6:	e8df f002 	tbb	[pc, r2]
   123aa:	034c      	.short	0x034c
   123ac:	4255      	.short	0x4255
   123ae:	23          	.byte	0x23
   123af:	00          	.byte	0x00
		if ((params->listen_interval <
   123b0:	8862      	ldrh	r2, [r4, #2]
   123b2:	2a02      	cmp	r2, #2
   123b4:	d804      	bhi.n	123c0 <wifi_nrf_set_power_save+0x74>
			params->fail_reason =
   123b6:	2306      	movs	r3, #6
			return -EINVAL;
   123b8:	f06f 0015 	mvn.w	r0, #21
			params->fail_reason =
   123bc:	7363      	strb	r3, [r4, #13]
			return -EINVAL;
   123be:	e7df      	b.n	12380 <wifi_nrf_set_power_save+0x34>
		status = wifi_nrf_fmac_set_listen_interval(
   123c0:	7c19      	ldrb	r1, [r3, #16]
   123c2:	6840      	ldr	r0, [r0, #4]
   123c4:	f7fe febc 	bl	11140 <wifi_nrf_fmac_set_listen_interval>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   123c8:	2800      	cmp	r0, #0
   123ca:	d0d9      	beq.n	12380 <wifi_nrf_set_power_save+0x34>
		LOG_ERR("%s: Confiuring PS param %d failed\n",
   123cc:	466d      	mov	r5, sp
   123ce:	b08a      	sub	sp, #40	; 0x28
   123d0:	466a      	mov	r2, sp
   123d2:	7b23      	ldrb	r3, [r4, #12]
   123d4:	492c      	ldr	r1, [pc, #176]	; (12488 <wifi_nrf_set_power_save+0x13c>)
   123d6:	6151      	str	r1, [r2, #20]
   123d8:	4926      	ldr	r1, [pc, #152]	; (12474 <wifi_nrf_set_power_save+0x128>)
   123da:	e9c2 1306 	strd	r1, r3, [r2, #24]
   123de:	f44f 7300 	mov.w	r3, #512	; 0x200
   123e2:	8413      	strh	r3, [r2, #32]
   123e4:	4b29      	ldr	r3, [pc, #164]	; (1248c <wifi_nrf_set_power_save+0x140>)
   123e6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   123ea:	f842 3f10 	str.w	r3, [r2, #16]!
   123ee:	e011      	b.n	12414 <wifi_nrf_set_power_save+0xc8>
		if (vif_ctx_zep->if_type != NRF_WIFI_IFTYPE_STATION) {
   123f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   123f2:	2a02      	cmp	r2, #2
   123f4:	d015      	beq.n	12422 <wifi_nrf_set_power_save+0xd6>
			LOG_ERR("%s: Operation supported only in STA mode\n",
   123f6:	466d      	mov	r5, sp
   123f8:	b088      	sub	sp, #32
   123fa:	466a      	mov	r2, sp
   123fc:	4b24      	ldr	r3, [pc, #144]	; (12490 <wifi_nrf_set_power_save+0x144>)
   123fe:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12402:	6153      	str	r3, [r2, #20]
   12404:	4b1b      	ldr	r3, [pc, #108]	; (12474 <wifi_nrf_set_power_save+0x128>)
   12406:	6193      	str	r3, [r2, #24]
   12408:	f44f 7300 	mov.w	r3, #512	; 0x200
   1240c:	8393      	strh	r3, [r2, #28]
   1240e:	4b1a      	ldr	r3, [pc, #104]	; (12478 <wifi_nrf_set_power_save+0x12c>)
   12410:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("%s: Confiuring PS param %d failed\n",
   12414:	4819      	ldr	r0, [pc, #100]	; (1247c <wifi_nrf_set_power_save+0x130>)
   12416:	f011 f8dd 	bl	235d4 <z_log_msg_static_create.constprop.0>
		params->fail_reason =
   1241a:	2301      	movs	r3, #1
   1241c:	46ad      	mov	sp, r5
   1241e:	7363      	strb	r3, [r4, #13]
		goto out;
   12420:	e7ac      	b.n	1237c <wifi_nrf_set_power_save+0x30>
		status = wifi_nrf_fmac_set_power_save_timeout(
   12422:	68a2      	ldr	r2, [r4, #8]
   12424:	7c19      	ldrb	r1, [r3, #16]
   12426:	6840      	ldr	r0, [r0, #4]
   12428:	f7fe fad4 	bl	109d4 <wifi_nrf_fmac_set_power_save_timeout>
	break;
   1242c:	e7cc      	b.n	123c8 <wifi_nrf_set_power_save+0x7c>
		if (params->mode == WIFI_PS_MODE_WMM) {
   1242e:	7962      	ldrb	r2, [r4, #5]
		status = wifi_nrf_fmac_set_uapsd_queue(rpu_ctx_zep->rpu_ctx,
   12430:	7c19      	ldrb	r1, [r3, #16]
	unsigned int uapsd_queue = UAPSD_Q_MIN; /* Legacy mode */
   12432:	2a01      	cmp	r2, #1
		status = wifi_nrf_fmac_set_uapsd_queue(rpu_ctx_zep->rpu_ctx,
   12434:	bf0c      	ite	eq
   12436:	220f      	moveq	r2, #15
   12438:	2200      	movne	r2, #0
   1243a:	6840      	ldr	r0, [r0, #4]
   1243c:	f7fe fa96 	bl	1096c <wifi_nrf_fmac_set_uapsd_queue>
	break;
   12440:	e7c2      	b.n	123c8 <wifi_nrf_set_power_save+0x7c>
		status = wifi_nrf_fmac_set_power_save(rpu_ctx_zep->rpu_ctx,
   12442:	7822      	ldrb	r2, [r4, #0]
   12444:	7c19      	ldrb	r1, [r3, #16]
   12446:	3a00      	subs	r2, #0
   12448:	bf18      	it	ne
   1244a:	2201      	movne	r2, #1
   1244c:	6840      	ldr	r0, [r0, #4]
   1244e:	f7fe fa5b 	bl	10908 <wifi_nrf_fmac_set_power_save>
	break;
   12452:	e7b9      	b.n	123c8 <wifi_nrf_set_power_save+0x7c>
		status = wifi_nrf_fmac_set_ps_wakeup_mode(
   12454:	7922      	ldrb	r2, [r4, #4]
   12456:	7c19      	ldrb	r1, [r3, #16]
   12458:	3a00      	subs	r2, #0
   1245a:	bf18      	it	ne
   1245c:	2201      	movne	r2, #1
   1245e:	6840      	ldr	r0, [r0, #4]
   12460:	f7fe fea0 	bl	111a4 <wifi_nrf_fmac_set_ps_wakeup_mode>
	break;
   12464:	e7b0      	b.n	123c8 <wifi_nrf_set_power_save+0x7c>
		params->fail_reason =
   12466:	2301      	movs	r3, #1
		return -ENOTSUP;
   12468:	f06f 0085 	mvn.w	r0, #133	; 0x85
		params->fail_reason =
   1246c:	7363      	strb	r3, [r4, #13]
		return -ENOTSUP;
   1246e:	e787      	b.n	12380 <wifi_nrf_set_power_save+0x34>
   12470:	000361bb 	.word	0x000361bb
   12474:	000363bf 	.word	0x000363bf
   12478:	01000003 	.word	0x01000003
   1247c:	00024d98 	.word	0x00024d98
   12480:	00035b78 	.word	0x00035b78
   12484:	00035b91 	.word	0x00035b91
   12488:	00036200 	.word	0x00036200
   1248c:	01000004 	.word	0x01000004
   12490:	000361d6 	.word	0x000361d6

00012494 <wifi_nrf_get_power_save_config>:
{
   12494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12496:	af00      	add	r7, sp, #0
	if (!dev || !ps_config) {
   12498:	b1a8      	cbz	r0, 124c6 <wifi_nrf_get_power_save_config+0x32>
   1249a:	b1a1      	cbz	r1, 124c6 <wifi_nrf_get_power_save_config+0x32>
	vif_ctx_zep = dev->data;
   1249c:	6905      	ldr	r5, [r0, #16]
	if (!vif_ctx_zep) {
   1249e:	b9b5      	cbnz	r5, 124ce <wifi_nrf_get_power_save_config+0x3a>
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   124a0:	466c      	mov	r4, sp
   124a2:	b088      	sub	sp, #32
   124a4:	466a      	mov	r2, sp
   124a6:	4b21      	ldr	r3, [pc, #132]	; (1252c <wifi_nrf_get_power_save_config+0x98>)
   124a8:	6153      	str	r3, [r2, #20]
   124aa:	4b21      	ldr	r3, [pc, #132]	; (12530 <wifi_nrf_get_power_save_config+0x9c>)
   124ac:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   124b0:	6193      	str	r3, [r2, #24]
   124b2:	f44f 7300 	mov.w	r3, #512	; 0x200
   124b6:	8393      	strh	r3, [r2, #28]
   124b8:	4b1e      	ldr	r3, [pc, #120]	; (12534 <wifi_nrf_get_power_save_config+0xa0>)
   124ba:	481f      	ldr	r0, [pc, #124]	; (12538 <wifi_nrf_get_power_save_config+0xa4>)
   124bc:	f842 3f10 	str.w	r3, [r2, #16]!
   124c0:	f011 f888 	bl	235d4 <z_log_msg_static_create.constprop.0>
   124c4:	46a5      	mov	sp, r4
	int ret = -1;
   124c6:	f04f 30ff 	mov.w	r0, #4294967295
}
   124ca:	46bd      	mov	sp, r7
   124cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (vif_ctx_zep->if_type != NRF_WIFI_IFTYPE_STATION) {
   124ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   124d0:	2b02      	cmp	r3, #2
   124d2:	d004      	beq.n	124de <wifi_nrf_get_power_save_config+0x4a>
		LOG_ERR("%s: Operation supported only in STA mode\n",
   124d4:	466c      	mov	r4, sp
   124d6:	b088      	sub	sp, #32
   124d8:	466a      	mov	r2, sp
   124da:	4b18      	ldr	r3, [pc, #96]	; (1253c <wifi_nrf_get_power_save_config+0xa8>)
   124dc:	e7e4      	b.n	124a8 <wifi_nrf_get_power_save_config+0x14>
	vif_ctx_zep->ps_config_info_evnt = false;
   124de:	2200      	movs	r2, #0
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   124e0:	68eb      	ldr	r3, [r5, #12]
	fmac_dev_ctx = rpu_ctx_zep->rpu_ctx;
   124e2:	685e      	ldr	r6, [r3, #4]
	vif_ctx_zep->ps_info = ps_config;
   124e4:	67a9      	str	r1, [r5, #120]	; 0x78
	vif_ctx_zep->ps_config_info_evnt = false;
   124e6:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
	status = wifi_nrf_fmac_get_power_save_info(rpu_ctx_zep->rpu_ctx,
   124ea:	7c29      	ldrb	r1, [r5, #16]
   124ec:	6858      	ldr	r0, [r3, #4]
   124ee:	f7fe fba3 	bl	10c38 <wifi_nrf_fmac_get_power_save_info>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   124f2:	4604      	mov	r4, r0
   124f4:	b120      	cbz	r0, 12500 <wifi_nrf_get_power_save_config+0x6c>
		LOG_ERR("%s: wifi_nrf_fmac_get_power_save_info failed\n",
   124f6:	466c      	mov	r4, sp
   124f8:	b088      	sub	sp, #32
   124fa:	466a      	mov	r2, sp
   124fc:	4b10      	ldr	r3, [pc, #64]	; (12540 <wifi_nrf_get_power_save_config+0xac>)
   124fe:	e7d3      	b.n	124a8 <wifi_nrf_get_power_save_config+0x14>
		wifi_nrf_osal_sleep_ms(fmac_dev_ctx->fpriv->opriv,
   12500:	6833      	ldr	r3, [r6, #0]
   12502:	2101      	movs	r1, #1
   12504:	6818      	ldr	r0, [r3, #0]
   12506:	f010 fba2 	bl	22c4e <wifi_nrf_osal_sleep_ms>
	} while ((vif_ctx_zep->ps_config_info_evnt == false) &&
   1250a:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
		 count++;
   1250e:	3401      	adds	r4, #1
	} while ((vif_ctx_zep->ps_config_info_evnt == false) &&
   12510:	b943      	cbnz	r3, 12524 <wifi_nrf_get_power_save_config+0x90>
   12512:	2c32      	cmp	r4, #50	; 0x32
   12514:	d1f4      	bne.n	12500 <wifi_nrf_get_power_save_config+0x6c>
		wifi_nrf_osal_log_err(fmac_dev_ctx->fpriv->opriv,
   12516:	6833      	ldr	r3, [r6, #0]
   12518:	4a05      	ldr	r2, [pc, #20]	; (12530 <wifi_nrf_get_power_save_config+0x9c>)
   1251a:	490a      	ldr	r1, [pc, #40]	; (12544 <wifi_nrf_get_power_save_config+0xb0>)
   1251c:	6818      	ldr	r0, [r3, #0]
   1251e:	f010 fb15 	bl	22b4c <wifi_nrf_osal_log_err>
		goto out;
   12522:	e7d0      	b.n	124c6 <wifi_nrf_get_power_save_config+0x32>
	if (count == WIFI_NRF_FMAC_PS_CONF_EVNT_RECV_TIMEOUT) {
   12524:	2c32      	cmp	r4, #50	; 0x32
   12526:	d0f6      	beq.n	12516 <wifi_nrf_get_power_save_config+0x82>
	ret = 0;
   12528:	2000      	movs	r0, #0
	return ret;
   1252a:	e7ce      	b.n	124ca <wifi_nrf_get_power_save_config+0x36>
   1252c:	00035b78 	.word	0x00035b78
   12530:	000363a0 	.word	0x000363a0
   12534:	01000003 	.word	0x01000003
   12538:	00024d98 	.word	0x00024d98
   1253c:	000361d6 	.word	0x000361d6
   12540:	00036223 	.word	0x00036223
   12544:	00036251 	.word	0x00036251

00012548 <wifi_nrf_set_twt>:
}


int wifi_nrf_set_twt(const struct device *dev,
		     struct wifi_twt_params *twt_params)
{
   12548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1254c:	4605      	mov	r5, r0
   1254e:	b08f      	sub	sp, #60	; 0x3c
   12550:	af00      	add	r7, sp, #0
   12552:	460c      	mov	r4, r1
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
	struct wifi_nrf_ctx_zep *rpu_ctx_zep = NULL;
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = NULL;
	struct nrf_wifi_umac_config_twt_info twt_info = {0};
   12554:	221a      	movs	r2, #26
   12556:	2100      	movs	r1, #0
   12558:	f107 001c 	add.w	r0, r7, #28
   1255c:	f004 ff3c 	bl	173d8 <memset>
	int ret = -1;

	if (!dev || !twt_params) {
   12560:	2d00      	cmp	r5, #0
   12562:	f000 80d8 	beq.w	12716 <wifi_nrf_set_twt+0x1ce>
   12566:	2c00      	cmp	r4, #0
   12568:	f000 80d5 	beq.w	12716 <wifi_nrf_set_twt+0x1ce>
		goto out;
	}

	vif_ctx_zep = dev->data;
   1256c:	692d      	ldr	r5, [r5, #16]

	if (!vif_ctx_zep) {
   1256e:	b99d      	cbnz	r5, 12598 <wifi_nrf_set_twt+0x50>
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   12570:	466c      	mov	r4, sp
   12572:	b088      	sub	sp, #32
   12574:	466a      	mov	r2, sp
   12576:	4b72      	ldr	r3, [pc, #456]	; (12740 <wifi_nrf_set_twt+0x1f8>)
		status = WIFI_NRF_STATUS_FAIL;
		break;
	}

	if (status != WIFI_NRF_STATUS_SUCCESS) {
		LOG_ERR("%s: wifi_nrf_set_twt failed\n", __func__);
   12578:	6153      	str	r3, [r2, #20]
   1257a:	4b72      	ldr	r3, [pc, #456]	; (12744 <wifi_nrf_set_twt+0x1fc>)
   1257c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12580:	6193      	str	r3, [r2, #24]
   12582:	f44f 7300 	mov.w	r3, #512	; 0x200
   12586:	8393      	strh	r3, [r2, #28]
   12588:	4b6f      	ldr	r3, [pc, #444]	; (12748 <wifi_nrf_set_twt+0x200>)
   1258a:	4870      	ldr	r0, [pc, #448]	; (1274c <wifi_nrf_set_twt+0x204>)
   1258c:	f842 3f10 	str.w	r3, [r2, #16]!
   12590:	f011 f820 	bl	235d4 <z_log_msg_static_create.constprop.0>
   12594:	46a5      	mov	sp, r4
		goto out;
   12596:	e0be      	b.n	12716 <wifi_nrf_set_twt+0x1ce>
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   12598:	68ee      	ldr	r6, [r5, #12]
	if (!rpu_ctx_zep) {
   1259a:	b926      	cbnz	r6, 125a6 <wifi_nrf_set_twt+0x5e>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n", __func__);
   1259c:	466c      	mov	r4, sp
   1259e:	b088      	sub	sp, #32
   125a0:	466a      	mov	r2, sp
   125a2:	4b6b      	ldr	r3, [pc, #428]	; (12750 <wifi_nrf_set_twt+0x208>)
   125a4:	e7e8      	b.n	12578 <wifi_nrf_set_twt+0x30>
	switch (twt_params->operation) {
   125a6:	f894 a000 	ldrb.w	sl, [r4]
   125aa:	f1ba 0f00 	cmp.w	sl, #0
   125ae:	d00f      	beq.n	125d0 <wifi_nrf_set_twt+0x88>
   125b0:	f1ba 0f01 	cmp.w	sl, #1
   125b4:	f000 809a 	beq.w	126ec <wifi_nrf_set_twt+0x1a4>
		LOG_ERR("Unknown TWT operation\n");
   125b8:	4b66      	ldr	r3, [pc, #408]	; (12754 <wifi_nrf_set_twt+0x20c>)
   125ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   125be:	617b      	str	r3, [r7, #20]
   125c0:	2302      	movs	r3, #2
   125c2:	4862      	ldr	r0, [pc, #392]	; (1274c <wifi_nrf_set_twt+0x204>)
   125c4:	613b      	str	r3, [r7, #16]
   125c6:	f107 0210 	add.w	r2, r7, #16
   125ca:	f011 f803 	bl	235d4 <z_log_msg_static_create.constprop.0>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   125ce:	e066      	b.n	1269e <wifi_nrf_set_twt+0x156>
		if (vif_ctx_zep->twt_in_progress) {
   125d0:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
   125d4:	b123      	cbz	r3, 125e0 <wifi_nrf_set_twt+0x98>
			return WIFI_TWT_FAIL_OPERATION_IN_PROGRESS;
   125d6:	2007      	movs	r0, #7
	}

	ret = 0;
out:
	return ret;
}
   125d8:	373c      	adds	r7, #60	; 0x3c
   125da:	46bd      	mov	sp, r7
   125dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double twt_interval_ms = twt_interval / 1000.0;
   125e0:	68a0      	ldr	r0, [r4, #8]
	int exponent = 0;
   125e2:	f8c7 a000 	str.w	sl, [r7]
	double twt_interval_ms = twt_interval / 1000.0;
   125e6:	f7ed fef9 	bl	3dc <__aeabi_ui2d>
   125ea:	4b5b      	ldr	r3, [pc, #364]	; (12758 <wifi_nrf_set_twt+0x210>)
   125ec:	2200      	movs	r2, #0
   125ee:	f7ee f899 	bl	724 <__aeabi_ddiv>
	mantissa = frexp(twt_interval_ms, &exponent);
   125f2:	463a      	mov	r2, r7
   125f4:	f004 fa74 	bl	16ae0 <frexp>
	twt_interval_float.mantissa = ceil(mantissa * 1000);
   125f8:	4b57      	ldr	r3, [pc, #348]	; (12758 <wifi_nrf_set_twt+0x210>)
   125fa:	2200      	movs	r2, #0
   125fc:	f7ed ff68 	bl	4d0 <__aeabi_dmul>
   12600:	f7ee fd8a 	bl	1118 <ceil>
   12604:	f7ee f976 	bl	8f4 <__aeabi_d2uiz>
		twt_info.twt_flow_id = twt_params->flow_id;
   12608:	7963      	ldrb	r3, [r4, #5]
	twt_interval_float.exponent = exponent;
   1260a:	f897 9000 	ldrb.w	r9, [r7]
		twt_info.twt_flow_id = twt_params->flow_id;
   1260e:	773b      	strb	r3, [r7, #28]
		twt_info.neg_type = twt_wifi_mgmt_to_rpu_neg_type(twt_params->negotiation_type);
   12610:	7863      	ldrb	r3, [r4, #1]
	twt_interval_float.mantissa = ceil(mantissa * 1000);
   12612:	fa1f f880 	uxth.w	r8, r0
	switch (neg_type) {
   12616:	b1ab      	cbz	r3, 12644 <wifi_nrf_set_twt+0xfc>
   12618:	2b01      	cmp	r3, #1
   1261a:	d01e      	beq.n	1265a <wifi_nrf_set_twt+0x112>
		LOG_ERR("%s: Invalid negotiation type: %d\n",
   1261c:	46eb      	mov	fp, sp
   1261e:	b08a      	sub	sp, #40	; 0x28
   12620:	466a      	mov	r2, sp
   12622:	494e      	ldr	r1, [pc, #312]	; (1275c <wifi_nrf_set_twt+0x214>)
   12624:	4849      	ldr	r0, [pc, #292]	; (1274c <wifi_nrf_set_twt+0x204>)
   12626:	6151      	str	r1, [r2, #20]
   12628:	494d      	ldr	r1, [pc, #308]	; (12760 <wifi_nrf_set_twt+0x218>)
	switch (neg_type) {
   1262a:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("%s: Invalid negotiation type: %d\n",
   1262e:	f44f 7300 	mov.w	r3, #512	; 0x200
   12632:	8413      	strh	r3, [r2, #32]
   12634:	4b4b      	ldr	r3, [pc, #300]	; (12764 <wifi_nrf_set_twt+0x21c>)
   12636:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1263a:	f842 3f10 	str.w	r3, [r2, #16]!
   1263e:	f010 ffc9 	bl	235d4 <z_log_msg_static_create.constprop.0>
   12642:	46dd      	mov	sp, fp
		twt_info.setup_cmd = twt_wifi_mgmt_to_rpu_setup_cmd(twt_params->setup_cmd);
   12644:	78a3      	ldrb	r3, [r4, #2]
		twt_info.neg_type = twt_wifi_mgmt_to_rpu_neg_type(twt_params->negotiation_type);
   12646:	f887 a01d 	strb.w	sl, [r7, #29]
	switch (setup_cmd) {
   1264a:	2b07      	cmp	r3, #7
   1264c:	d836      	bhi.n	126bc <wifi_nrf_set_twt+0x174>
   1264e:	e8df f003 	tbb	[pc, r3]
   12652:	4b49      	.short	0x4b49
   12654:	2f2d2b07 	.word	0x2f2d2b07
   12658:	3331      	.short	0x3331
	switch (neg_type) {
   1265a:	f04f 0a02 	mov.w	sl, #2
   1265e:	e7f1      	b.n	12644 <wifi_nrf_set_twt+0xfc>
		rpu_setup_cmd = NRF_WIFI_DEMAND_TWT;
   12660:	2302      	movs	r3, #2
		twt_info.setup_cmd = twt_wifi_mgmt_to_rpu_setup_cmd(twt_params->setup_cmd);
   12662:	f8c7 301e 	str.w	r3, [r7, #30]
		twt_info.ap_trigger_frame = twt_params->setup.trigger;
   12666:	7c63      	ldrb	r3, [r4, #17]
		twt_info.twt_target_wake_interval_mantissa = twt_interval_float.mantissa;
   12668:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		twt_info.ap_trigger_frame = twt_params->setup.trigger;
   1266c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		twt_info.is_implicit = twt_params->setup.implicit;
   12670:	7ca3      	ldrb	r3, [r4, #18]
		twt_info.twt_target_wake_interval_exponent = twt_interval_float.exponent;
   12672:	f887 9025 	strb.w	r9, [r7, #37]	; 0x25
		twt_info.is_implicit = twt_params->setup.implicit;
   12676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (twt_params->setup.announce) {
   1267a:	7ce3      	ldrb	r3, [r4, #19]
		status = wifi_nrf_fmac_twt_setup(rpu_ctx_zep->rpu_ctx,
   1267c:	f107 021c 	add.w	r2, r7, #28
		if (twt_params->setup.announce) {
   12680:	f083 0301 	eor.w	r3, r3, #1
   12684:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		twt_info.nominal_min_twt_wake_duration =
   12688:	6963      	ldr	r3, [r4, #20]
   1268a:	633b      	str	r3, [r7, #48]	; 0x30
		twt_info.dialog_token = twt_params->dialog_token;
   1268c:	7923      	ldrb	r3, [r4, #4]
   1268e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		status = wifi_nrf_fmac_twt_setup(rpu_ctx_zep->rpu_ctx,
   12692:	7c29      	ldrb	r1, [r5, #16]
   12694:	6870      	ldr	r0, [r6, #4]
   12696:	f7fe f9cf 	bl	10a38 <wifi_nrf_fmac_twt_setup>
		if (status == WIFI_NRF_STATUS_SUCCESS) {
   1269a:	2800      	cmp	r0, #0
   1269c:	d04e      	beq.n	1273c <wifi_nrf_set_twt+0x1f4>
		LOG_ERR("%s: wifi_nrf_set_twt failed\n", __func__);
   1269e:	466c      	mov	r4, sp
   126a0:	b088      	sub	sp, #32
   126a2:	466a      	mov	r2, sp
   126a4:	4b30      	ldr	r3, [pc, #192]	; (12768 <wifi_nrf_set_twt+0x220>)
   126a6:	e767      	b.n	12578 <wifi_nrf_set_twt+0x30>
		rpu_setup_cmd = NRF_WIFI_GROUPING_TWT;
   126a8:	2303      	movs	r3, #3
		break;
   126aa:	e7da      	b.n	12662 <wifi_nrf_set_twt+0x11a>
		rpu_setup_cmd = NRF_WIFI_ACCEPT_TWT;
   126ac:	2304      	movs	r3, #4
		break;
   126ae:	e7d8      	b.n	12662 <wifi_nrf_set_twt+0x11a>
		rpu_setup_cmd = NRF_WIFI_ALTERNATE_TWT;
   126b0:	2305      	movs	r3, #5
		break;
   126b2:	e7d6      	b.n	12662 <wifi_nrf_set_twt+0x11a>
		rpu_setup_cmd = NRF_WIFI_DICTATE_TWT;
   126b4:	2306      	movs	r3, #6
		break;
   126b6:	e7d4      	b.n	12662 <wifi_nrf_set_twt+0x11a>
		rpu_setup_cmd = NRF_WIFI_REJECT_TWT;
   126b8:	2307      	movs	r3, #7
		break;
   126ba:	e7d2      	b.n	12662 <wifi_nrf_set_twt+0x11a>
		LOG_ERR("%s: Invalid setup command: %d\n",
   126bc:	46ea      	mov	sl, sp
   126be:	b08a      	sub	sp, #40	; 0x28
   126c0:	466a      	mov	r2, sp
   126c2:	492a      	ldr	r1, [pc, #168]	; (1276c <wifi_nrf_set_twt+0x224>)
   126c4:	4821      	ldr	r0, [pc, #132]	; (1274c <wifi_nrf_set_twt+0x204>)
   126c6:	6151      	str	r1, [r2, #20]
   126c8:	4929      	ldr	r1, [pc, #164]	; (12770 <wifi_nrf_set_twt+0x228>)
	switch (setup_cmd) {
   126ca:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("%s: Invalid setup command: %d\n",
   126ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   126d2:	8413      	strh	r3, [r2, #32]
   126d4:	4b23      	ldr	r3, [pc, #140]	; (12764 <wifi_nrf_set_twt+0x21c>)
   126d6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   126da:	f842 3f10 	str.w	r3, [r2, #16]!
   126de:	f010 ff79 	bl	235d4 <z_log_msg_static_create.constprop.0>
   126e2:	46d5      	mov	sp, sl
		rpu_setup_cmd = NRF_WIFI_REQUEST_TWT;
   126e4:	2300      	movs	r3, #0
   126e6:	e7bc      	b.n	12662 <wifi_nrf_set_twt+0x11a>
	switch (setup_cmd) {
   126e8:	2301      	movs	r3, #1
   126ea:	e7ba      	b.n	12662 <wifi_nrf_set_twt+0x11a>
		twt_info.twt_flow_id = twt_params->flow_id;
   126ec:	7963      	ldrb	r3, [r4, #5]
   126ee:	773b      	strb	r3, [r7, #28]
		if (twt_params->teardown.teardown_all) {
   126f0:	7a23      	ldrb	r3, [r4, #8]
   126f2:	b1a3      	cbz	r3, 1271e <wifi_nrf_set_twt+0x1d6>
			if (vif_ctx_zep->neg_twt_flow_id == 0xFF) {
   126f4:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   126f8:	2bff      	cmp	r3, #255	; 0xff
   126fa:	d10f      	bne.n	1271c <wifi_nrf_set_twt+0x1d4>
				LOG_ERR("Invalid negotiated TWT flow id\n");
   126fc:	4b1d      	ldr	r3, [pc, #116]	; (12774 <wifi_nrf_set_twt+0x22c>)
   126fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12702:	617b      	str	r3, [r7, #20]
   12704:	2302      	movs	r3, #2
   12706:	4811      	ldr	r0, [pc, #68]	; (1274c <wifi_nrf_set_twt+0x204>)
   12708:	613b      	str	r3, [r7, #16]
   1270a:	f107 0210 	add.w	r2, r7, #16
   1270e:	f010 ff61 	bl	235d4 <z_log_msg_static_create.constprop.0>
				twt_params->fail_reason =
   12712:	2308      	movs	r3, #8
   12714:	7623      	strb	r3, [r4, #24]
	int ret = -1;
   12716:	f04f 30ff 	mov.w	r0, #4294967295
   1271a:	e75d      	b.n	125d8 <wifi_nrf_set_twt+0x90>
			twt_info.twt_flow_id = vif_ctx_zep->neg_twt_flow_id;
   1271c:	773b      	strb	r3, [r7, #28]
		status = wifi_nrf_fmac_twt_teardown(rpu_ctx_zep->rpu_ctx,
   1271e:	7c29      	ldrb	r1, [r5, #16]
   12720:	6870      	ldr	r0, [r6, #4]
   12722:	f107 021c 	add.w	r2, r7, #28
   12726:	f7fe f9c1 	bl	10aac <wifi_nrf_fmac_twt_teardown>
		if (status == WIFI_NRF_STATUS_SUCCESS) {
   1272a:	2800      	cmp	r0, #0
   1272c:	d1b7      	bne.n	1269e <wifi_nrf_set_twt+0x156>
			vif_ctx_zep->neg_twt_flow_id = 0XFF;
   1272e:	23ff      	movs	r3, #255	; 0xff
   12730:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
			vif_ctx_zep->twt_in_progress = false;
   12734:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
	ret = 0;
   12738:	2000      	movs	r0, #0
   1273a:	e74d      	b.n	125d8 <wifi_nrf_set_twt+0x90>
   1273c:	2001      	movs	r0, #1
   1273e:	e7f9      	b.n	12734 <wifi_nrf_set_twt+0x1ec>
   12740:	00035b78 	.word	0x00035b78
   12744:	00036371 	.word	0x00036371
   12748:	01000003 	.word	0x01000003
   1274c:	00024d98 	.word	0x00024d98
   12750:	00035b91 	.word	0x00035b91
   12754:	0003629f 	.word	0x0003629f
   12758:	408f4000 	.word	0x408f4000
   1275c:	0003612c 	.word	0x0003612c
   12760:	00036353 	.word	0x00036353
   12764:	01000004 	.word	0x01000004
   12768:	000362b6 	.word	0x000362b6
   1276c:	00036260 	.word	0x00036260
   12770:	00036334 	.word	0x00036334
   12774:	0003627f 	.word	0x0003627f

00012778 <wifi_nrf_event_proc_twt_setup_zep>:

void wifi_nrf_event_proc_twt_setup_zep(void *vif_ctx,
				       struct nrf_wifi_umac_cmd_config_twt *twt_setup_info,
				       unsigned int event_len)
{
   12778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1277a:	b089      	sub	sp, #36	; 0x24
   1277c:	460c      	mov	r4, r1
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = NULL;
	struct wifi_twt_params twt_params;
	struct twt_interval_float twt_interval_float;

	if (!vif_ctx || !twt_setup_info) {
   1277e:	4605      	mov	r5, r0
{
   12780:	af00      	add	r7, sp, #0
	if (!vif_ctx || !twt_setup_info) {
   12782:	2800      	cmp	r0, #0
   12784:	d046      	beq.n	12814 <wifi_nrf_event_proc_twt_setup_zep+0x9c>
   12786:	2900      	cmp	r1, #0
   12788:	d044      	beq.n	12814 <wifi_nrf_event_proc_twt_setup_zep+0x9c>
		return;
	}

	vif_ctx_zep = vif_ctx;

	twt_params.operation = WIFI_TWT_SETUP;
   1278a:	2300      	movs	r3, #0
   1278c:	703b      	strb	r3, [r7, #0]
	twt_params.flow_id = twt_setup_info->info.twt_flow_id;
   1278e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
	/* Store the negotiated flow id and pass it to user. */
	vif_ctx_zep->neg_twt_flow_id = twt_setup_info->info.twt_flow_id;
   12792:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
	twt_params.negotiation_type = twt_rpu_to_wifi_mgmt_neg_type(twt_setup_info->info.neg_type);
   12796:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
	twt_params.flow_id = twt_setup_info->info.twt_flow_id;
   1279a:	717b      	strb	r3, [r7, #5]
	twt_params.negotiation_type = twt_rpu_to_wifi_mgmt_neg_type(twt_setup_info->info.neg_type);
   1279c:	f7ff fc3e 	bl	1201c <twt_rpu_to_wifi_mgmt_neg_type>
   127a0:	7078      	strb	r0, [r7, #1]
	twt_params.setup_cmd = twt_rpu_to_wifi_mgmt_setup_cmd(twt_setup_info->info.setup_cmd);
   127a2:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
	switch (setup_cmd) {
   127a6:	2b07      	cmp	r3, #7
   127a8:	d841      	bhi.n	1282e <wifi_nrf_event_proc_twt_setup_zep+0xb6>
   127aa:	e8df f003 	tbb	[pc, r3]
   127ae:	5654      	.short	0x5654
   127b0:	3a383604 	.word	0x3a383604
   127b4:	3e3c      	.short	0x3e3c
		wifi_setup_cmd = WIFI_TWT_SETUP_CMD_DEMAND;
   127b6:	2302      	movs	r3, #2
	twt_params.setup_cmd = twt_rpu_to_wifi_mgmt_setup_cmd(twt_setup_info->info.setup_cmd);
   127b8:	70bb      	strb	r3, [r7, #2]
	twt_params.setup.trigger = twt_setup_info->info.ap_trigger_frame ? 1 : 0;
   127ba:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		twt_setup_info->info.twt_flow_type == NRF_WIFI_TWT_FLOW_TYPE_ANNOUNCED;
	twt_params.setup.twt_wake_interval =
			twt_setup_info->info.nominal_min_twt_wake_duration;
	twt_interval_float.mantissa = twt_setup_info->info.twt_target_wake_interval_mantissa;
	twt_interval_float.exponent = twt_setup_info->info.twt_target_wake_interval_exponent;
	twt_params.setup.twt_interval = wifi_nrf_twt_float_to_us(twt_interval_float);
   127be:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
	twt_params.setup.trigger = twt_setup_info->info.ap_trigger_frame ? 1 : 0;
   127c2:	3b00      	subs	r3, #0
   127c4:	bf18      	it	ne
   127c6:	2301      	movne	r3, #1
   127c8:	747b      	strb	r3, [r7, #17]
	twt_params.setup.implicit = twt_setup_info->info.is_implicit ? 1 : 0;
   127ca:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   127ce:	3b00      	subs	r3, #0
   127d0:	bf18      	it	ne
   127d2:	2301      	movne	r3, #1
   127d4:	74bb      	strb	r3, [r7, #18]
		twt_setup_info->info.twt_flow_type == NRF_WIFI_TWT_FLOW_TYPE_ANNOUNCED;
   127d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   127da:	fab3 f383 	clz	r3, r3
   127de:	095b      	lsrs	r3, r3, #5
   127e0:	74fb      	strb	r3, [r7, #19]
			twt_setup_info->info.nominal_min_twt_wake_duration;
   127e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	twt_params.setup.twt_wake_interval =
   127e4:	617b      	str	r3, [r7, #20]
	twt_params.setup.twt_interval = wifi_nrf_twt_float_to_us(twt_interval_float);
   127e6:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
   127e8:	f7ff fc3e 	bl	12068 <wifi_nrf_twt_float_to_us.isra.0>
	twt_params.dialog_token = twt_setup_info->info.dialog_token;
   127ec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	twt_params.setup.twt_interval = wifi_nrf_twt_float_to_us(twt_interval_float);
   127f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	twt_params.dialog_token = twt_setup_info->info.dialog_token;
   127f4:	713b      	strb	r3, [r7, #4]
	twt_params.resp_status = twt_setup_info->info.twt_resp_status;
   127f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   127fa:	70fb      	strb	r3, [r7, #3]

	if ((twt_setup_info->info.twt_resp_status == 0) ||
   127fc:	b11b      	cbz	r3, 12806 <wifi_nrf_event_proc_twt_setup_zep+0x8e>
   127fe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   12802:	2b04      	cmp	r3, #4
   12804:	d002      	beq.n	1280c <wifi_nrf_event_proc_twt_setup_zep+0x94>
	    (twt_setup_info->info.neg_type != NRF_WIFI_ACCEPT_TWT)) {
		vif_ctx_zep->twt_in_progress = false;
   12806:	2300      	movs	r3, #0
   12808:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
	}

	wifi_mgmt_raise_twt_event(vif_ctx_zep->zep_net_if_ctx, &twt_params);
   1280c:	4639      	mov	r1, r7
   1280e:	6868      	ldr	r0, [r5, #4]
   12810:	f7f5 fa1e 	bl	7c50 <wifi_mgmt_raise_twt_event>
}
   12814:	3724      	adds	r7, #36	; 0x24
   12816:	46bd      	mov	sp, r7
   12818:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wifi_setup_cmd = WIFI_TWT_SETUP_CMD_GROUPING;
   1281a:	2303      	movs	r3, #3
		break;
   1281c:	e7cc      	b.n	127b8 <wifi_nrf_event_proc_twt_setup_zep+0x40>
		wifi_setup_cmd = WIFI_TWT_SETUP_CMD_ACCEPT;
   1281e:	2304      	movs	r3, #4
		break;
   12820:	e7ca      	b.n	127b8 <wifi_nrf_event_proc_twt_setup_zep+0x40>
		wifi_setup_cmd = WIFI_TWT_SETUP_CMD_ALTERNATE;
   12822:	2305      	movs	r3, #5
		break;
   12824:	e7c8      	b.n	127b8 <wifi_nrf_event_proc_twt_setup_zep+0x40>
		wifi_setup_cmd = WIFI_TWT_SETUP_CMD_DICTATE;
   12826:	2306      	movs	r3, #6
		break;
   12828:	e7c6      	b.n	127b8 <wifi_nrf_event_proc_twt_setup_zep+0x40>
		wifi_setup_cmd = WIFI_TWT_SETUP_CMD_REJECT;
   1282a:	2307      	movs	r3, #7
		break;
   1282c:	e7c4      	b.n	127b8 <wifi_nrf_event_proc_twt_setup_zep+0x40>
		LOG_ERR("%s: Invalid setup command: %d\n",
   1282e:	466e      	mov	r6, sp
   12830:	b08a      	sub	sp, #40	; 0x28
   12832:	466a      	mov	r2, sp
   12834:	490a      	ldr	r1, [pc, #40]	; (12860 <wifi_nrf_event_proc_twt_setup_zep+0xe8>)
   12836:	480b      	ldr	r0, [pc, #44]	; (12864 <wifi_nrf_event_proc_twt_setup_zep+0xec>)
   12838:	6151      	str	r1, [r2, #20]
   1283a:	490b      	ldr	r1, [pc, #44]	; (12868 <wifi_nrf_event_proc_twt_setup_zep+0xf0>)
   1283c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12840:	f44f 7300 	mov.w	r3, #512	; 0x200
   12844:	8413      	strh	r3, [r2, #32]
   12846:	4b09      	ldr	r3, [pc, #36]	; (1286c <wifi_nrf_event_proc_twt_setup_zep+0xf4>)
   12848:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1284c:	f842 3f10 	str.w	r3, [r2, #16]!
   12850:	f010 fec0 	bl	235d4 <z_log_msg_static_create.constprop.0>
   12854:	46b5      	mov	sp, r6
		wifi_setup_cmd = WIFI_TWT_SETUP_CMD_REQUEST;
   12856:	2300      	movs	r3, #0
   12858:	e7ae      	b.n	127b8 <wifi_nrf_event_proc_twt_setup_zep+0x40>
	switch (setup_cmd) {
   1285a:	2301      	movs	r3, #1
   1285c:	e7ac      	b.n	127b8 <wifi_nrf_event_proc_twt_setup_zep+0x40>
   1285e:	bf00      	nop
   12860:	00036260 	.word	0x00036260
   12864:	00024d98 	.word	0x00024d98
   12868:	00036315 	.word	0x00036315
   1286c:	01000004 	.word	0x01000004

00012870 <wifi_nrf_event_proc_twt_sleep_zep>:
}

void wifi_nrf_event_proc_twt_sleep_zep(void *vif_ctx,
					struct nrf_wifi_umac_event_twt_sleep *sleep_evnt,
					unsigned int event_len)
{
   12870:	b5b0      	push	{r4, r5, r7, lr}
   12872:	af00      	add	r7, sp, #0
	int desc = 0;
	int ac = 0;
#endif
	vif_ctx_zep = vif_ctx;

	if (!vif_ctx_zep) {
   12874:	b9a0      	cbnz	r0, 128a0 <wifi_nrf_event_proc_twt_sleep_zep+0x30>
		LOG_ERR("%s: vif_ctx_zep is NULL\n", __func__);
   12876:	466c      	mov	r4, sp
   12878:	b088      	sub	sp, #32
   1287a:	466a      	mov	r2, sp
   1287c:	4b18      	ldr	r3, [pc, #96]	; (128e0 <wifi_nrf_event_proc_twt_sleep_zep+0x70>)
		return;
	}

	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
	if (!rpu_ctx_zep) {
		LOG_ERR("%s: rpu_ctx_zep is NULL\n", __func__);
   1287e:	6153      	str	r3, [r2, #20]
   12880:	4b18      	ldr	r3, [pc, #96]	; (128e4 <wifi_nrf_event_proc_twt_sleep_zep+0x74>)
   12882:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12886:	6193      	str	r3, [r2, #24]
   12888:	f44f 7300 	mov.w	r3, #512	; 0x200
   1288c:	8393      	strh	r3, [r2, #28]
   1288e:	4b16      	ldr	r3, [pc, #88]	; (128e8 <wifi_nrf_event_proc_twt_sleep_zep+0x78>)
   12890:	4816      	ldr	r0, [pc, #88]	; (128ec <wifi_nrf_event_proc_twt_sleep_zep+0x7c>)
   12892:	f842 3f10 	str.w	r3, [r2, #16]!
   12896:	f010 fe9d 	bl	235d4 <z_log_msg_static_create.constprop.0>
   1289a:	46a5      	mov	sp, r4
				fmac_dev_ctx->tx_config.tx_lock);
	break;
	default:
	break;
	}
}
   1289c:	46bd      	mov	sp, r7
   1289e:	bdb0      	pop	{r4, r5, r7, pc}
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   128a0:	68c3      	ldr	r3, [r0, #12]
	if (!rpu_ctx_zep) {
   128a2:	b923      	cbnz	r3, 128ae <wifi_nrf_event_proc_twt_sleep_zep+0x3e>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n", __func__);
   128a4:	466c      	mov	r4, sp
   128a6:	b088      	sub	sp, #32
   128a8:	466a      	mov	r2, sp
   128aa:	4b11      	ldr	r3, [pc, #68]	; (128f0 <wifi_nrf_event_proc_twt_sleep_zep+0x80>)
   128ac:	e7e7      	b.n	1287e <wifi_nrf_event_proc_twt_sleep_zep+0xe>
	fmac_dev_ctx = rpu_ctx_zep->rpu_ctx;
   128ae:	685c      	ldr	r4, [r3, #4]
	if (!sleep_evnt) {
   128b0:	b921      	cbnz	r1, 128bc <wifi_nrf_event_proc_twt_sleep_zep+0x4c>
		LOG_ERR("%s: sleep_evnt is NULL\n", __func__);
   128b2:	466c      	mov	r4, sp
   128b4:	b088      	sub	sp, #32
   128b6:	466a      	mov	r2, sp
   128b8:	4b0e      	ldr	r3, [pc, #56]	; (128f4 <wifi_nrf_event_proc_twt_sleep_zep+0x84>)
   128ba:	e7e0      	b.n	1287e <wifi_nrf_event_proc_twt_sleep_zep+0xe>
	switch (sleep_evnt->info.type) {
   128bc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   128be:	b10d      	cbz	r5, 128c4 <wifi_nrf_event_proc_twt_sleep_zep+0x54>
   128c0:	2d01      	cmp	r5, #1
   128c2:	d1eb      	bne.n	1289c <wifi_nrf_event_proc_twt_sleep_zep+0x2c>
		wifi_nrf_osal_spinlock_take(fmac_dev_ctx->fpriv->opriv,
   128c4:	6823      	ldr	r3, [r4, #0]
   128c6:	69e1      	ldr	r1, [r4, #28]
   128c8:	6818      	ldr	r0, [r3, #0]
   128ca:	f010 f90d 	bl	22ae8 <wifi_nrf_osal_spinlock_take>
		wifi_nrf_osal_spinlock_rel(fmac_dev_ctx->fpriv->opriv,
   128ce:	6823      	ldr	r3, [r4, #0]
		fmac_dev_ctx->twt_sleep_status = WIFI_NRF_FMAC_TWT_STATE_AWAKE;
   128d0:	f884 51a0 	strb.w	r5, [r4, #416]	; 0x1a0
		wifi_nrf_osal_spinlock_rel(fmac_dev_ctx->fpriv->opriv,
   128d4:	69e1      	ldr	r1, [r4, #28]
   128d6:	6818      	ldr	r0, [r3, #0]
   128d8:	f010 f90a 	bl	22af0 <wifi_nrf_osal_spinlock_rel>
	break;
   128dc:	e7de      	b.n	1289c <wifi_nrf_event_proc_twt_sleep_zep+0x2c>
   128de:	bf00      	nop
   128e0:	00035b78 	.word	0x00035b78
   128e4:	000362f3 	.word	0x000362f3
   128e8:	01000003 	.word	0x01000003
   128ec:	00024d98 	.word	0x00024d98
   128f0:	00035b91 	.word	0x00035b91
   128f4:	000362d3 	.word	0x000362d3

000128f8 <ip_maddr_event_handler>:
}

static void ip_maddr_event_handler(struct net_mgmt_event_callback *cb,
				   uint32_t mgmt_event,
				   struct net_if *iface)
{
   128f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   128fc:	b089      	sub	sp, #36	; 0x24
	return iface->if_dev->dev;
   128fe:	6813      	ldr	r3, [r2, #0]
   12900:	4681      	mov	r9, r0
	enum wifi_nrf_status status;
	uint8_t mac_string_buf[sizeof("xx:xx:xx:xx:xx:xx")];

	dev = net_if_get_device(iface);

	if (!dev) {
   12902:	681b      	ldr	r3, [r3, #0]
{
   12904:	460e      	mov	r6, r1
   12906:	af00      	add	r7, sp, #0
	if (!dev) {
   12908:	b31b      	cbz	r3, 12952 <ip_maddr_event_handler+0x5a>
		LOG_ERR("%s: dev is NULL\n", __func__);
		return;
	}

	for (int i = 0; i < ARRAY_SIZE(rpu_ctx->vif_ctx_zep); i++) {
		if (rpu_ctx->vif_ctx_zep[i].zep_net_if_ctx == iface) {
   1290a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 12a3c <ip_maddr_event_handler+0x144>
   1290e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   12912:	429a      	cmp	r2, r3
   12914:	d034      	beq.n	12980 <ip_maddr_event_handler+0x88>
   12916:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   1291a:	429a      	cmp	r2, r3
   1291c:	d036      	beq.n	1298c <ip_maddr_event_handler+0x94>
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = NULL;
   1291e:	2500      	movs	r5, #0
			vif_ctx_zep = &rpu_ctx->vif_ctx_zep[i];
			break;
		}
	}

	mcast_info = k_calloc(sizeof(*mcast_info), sizeof(char));
   12920:	2101      	movs	r1, #1
   12922:	200a      	movs	r0, #10
   12924:	f011 ff89 	bl	2483a <k_calloc>

	if (!mcast_info) {
   12928:	4604      	mov	r4, r0
   1292a:	2800      	cmp	r0, #0
   1292c:	d130      	bne.n	12990 <ip_maddr_event_handler+0x98>
		LOG_ERR("%s: Unable to allocate memory of size %d "
   1292e:	466c      	mov	r4, sp
   12930:	b08a      	sub	sp, #40	; 0x28
   12932:	466a      	mov	r2, sp
   12934:	4b42      	ldr	r3, [pc, #264]	; (12a40 <ip_maddr_event_handler+0x148>)
   12936:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1293a:	6153      	str	r3, [r2, #20]
   1293c:	4b41      	ldr	r3, [pc, #260]	; (12a44 <ip_maddr_event_handler+0x14c>)
   1293e:	6193      	str	r3, [r2, #24]
   12940:	230a      	movs	r3, #10
   12942:	61d3      	str	r3, [r2, #28]
   12944:	f44f 7300 	mov.w	r3, #512	; 0x200
   12948:	8413      	strh	r3, [r2, #32]
   1294a:	4b3f      	ldr	r3, [pc, #252]	; (12a48 <ip_maddr_event_handler+0x150>)
   1294c:	f842 3f10 	str.w	r3, [r2, #16]!
   12950:	e00e      	b.n	12970 <ip_maddr_event_handler+0x78>
		LOG_ERR("%s: dev is NULL\n", __func__);
   12952:	466c      	mov	r4, sp
   12954:	b088      	sub	sp, #32
   12956:	466a      	mov	r2, sp
   12958:	4b3c      	ldr	r3, [pc, #240]	; (12a4c <ip_maddr_event_handler+0x154>)
   1295a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1295e:	6153      	str	r3, [r2, #20]
   12960:	4b38      	ldr	r3, [pc, #224]	; (12a44 <ip_maddr_event_handler+0x14c>)
   12962:	6193      	str	r3, [r2, #24]
   12964:	f44f 7300 	mov.w	r3, #512	; 0x200
   12968:	8393      	strh	r3, [r2, #28]
   1296a:	4b39      	ldr	r3, [pc, #228]	; (12a50 <ip_maddr_event_handler+0x158>)
   1296c:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("%s: Unable to allocate memory of size %d "
   12970:	4838      	ldr	r0, [pc, #224]	; (12a54 <ip_maddr_event_handler+0x15c>)
   12972:	f010 fec2 	bl	236fa <z_log_msg_static_create.constprop.0>
   12976:	46a5      	mov	sp, r4
					       WIFI_MAC_ADDR_LEN, mac_string_buf,
					       sizeof(mac_string_buf)));
	}

	k_free(mcast_info);
}
   12978:	3724      	adds	r7, #36	; 0x24
   1297a:	46bd      	mov	sp, r7
   1297c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < ARRAY_SIZE(rpu_ctx->vif_ctx_zep); i++) {
   12980:	2500      	movs	r5, #0
			vif_ctx_zep = &rpu_ctx->vif_ctx_zep[i];
   12982:	2398      	movs	r3, #152	; 0x98
   12984:	fb03 8505 	mla	r5, r3, r5, r8
   12988:	3510      	adds	r5, #16
			break;
   1298a:	e7c9      	b.n	12920 <ip_maddr_event_handler+0x28>
	for (int i = 0; i < ARRAY_SIZE(rpu_ctx->vif_ctx_zep); i++) {
   1298c:	2501      	movs	r5, #1
   1298e:	e7f8      	b.n	12982 <ip_maddr_event_handler+0x8a>
	if ((mgmt_event == NET_EVENT_IPV4_MADDR_ADD) ||
   12990:	4b31      	ldr	r3, [pc, #196]	; (12a58 <ip_maddr_event_handler+0x160>)
   12992:	4433      	add	r3, r6
   12994:	2b01      	cmp	r3, #1
   12996:	d840      	bhi.n	12a1a <ip_maddr_event_handler+0x122>
		if ((cb->info == NULL) ||
   12998:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1299c:	2800      	cmp	r0, #0
   1299e:	d0eb      	beq.n	12978 <ip_maddr_event_handler+0x80>
   129a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   129a4:	2b04      	cmp	r3, #4
   129a6:	d1e7      	bne.n	12978 <ip_maddr_event_handler+0x80>
		net_eth_ipv4_mcast_to_mac_addr((const struct in_addr *)cb->info,
   129a8:	1d39      	adds	r1, r7, #4
   129aa:	f00d fcbd 	bl	20328 <net_eth_ipv4_mcast_to_mac_addr>
		if (mgmt_event == NET_EVENT_IPV4_MADDR_ADD) {
   129ae:	4b2b      	ldr	r3, [pc, #172]	; (12a5c <ip_maddr_event_handler+0x164>)
		if (mgmt_event == NET_EVENT_IPV6_MADDR_ADD) {
   129b0:	429e      	cmp	r6, r3
			mcast_info->type = MCAST_ADDR_DEL;
   129b2:	bf18      	it	ne
   129b4:	2201      	movne	r2, #1
   129b6:	f04f 0300 	mov.w	r3, #0
   129ba:	bf14      	ite	ne
   129bc:	7022      	strbne	r2, [r4, #0]
			mcast_info->type = MCAST_ADDR_ADD;
   129be:	7023      	strbeq	r3, [r4, #0]
			mcast_info->type = MCAST_ADDR_DEL;
   129c0:	7063      	strb	r3, [r4, #1]
   129c2:	70a3      	strb	r3, [r4, #2]
   129c4:	70e3      	strb	r3, [r4, #3]
   129c6:	6878      	ldr	r0, [r7, #4]
	status = wifi_nrf_fmac_set_mcast_addr(rpu_ctx->rpu_ctx,
   129c8:	4622      	mov	r2, r4
   129ca:	6060      	str	r0, [r4, #4]
   129cc:	893b      	ldrh	r3, [r7, #8]
   129ce:	8123      	strh	r3, [r4, #8]
   129d0:	7c29      	ldrb	r1, [r5, #16]
   129d2:	f8d8 000c 	ldr.w	r0, [r8, #12]
   129d6:	f7fe f8a3 	bl	10b20 <wifi_nrf_fmac_set_mcast_addr>
	if (status == WIFI_NRF_STATUS_FAIL) {
   129da:	3001      	adds	r0, #1
   129dc:	d119      	bne.n	12a12 <ip_maddr_event_handler+0x11a>
		LOG_ERR("%s: nrf_wifi_fmac_set_multicast failed	for"
   129de:	f107 020c 	add.w	r2, r7, #12
   129e2:	2312      	movs	r3, #18
   129e4:	2106      	movs	r1, #6
   129e6:	1d38      	adds	r0, r7, #4
   129e8:	f7f5 fe36 	bl	8658 <net_sprint_ll_addr_buf>
   129ec:	466d      	mov	r5, sp
   129ee:	b08a      	sub	sp, #40	; 0x28
   129f0:	466a      	mov	r2, sp
   129f2:	4b1b      	ldr	r3, [pc, #108]	; (12a60 <ip_maddr_event_handler+0x168>)
   129f4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   129f8:	6153      	str	r3, [r2, #20]
   129fa:	4b12      	ldr	r3, [pc, #72]	; (12a44 <ip_maddr_event_handler+0x14c>)
   129fc:	e9c2 3006 	strd	r3, r0, [r2, #24]
   12a00:	4b18      	ldr	r3, [pc, #96]	; (12a64 <ip_maddr_event_handler+0x16c>)
   12a02:	4814      	ldr	r0, [pc, #80]	; (12a54 <ip_maddr_event_handler+0x15c>)
   12a04:	6213      	str	r3, [r2, #32]
   12a06:	4b18      	ldr	r3, [pc, #96]	; (12a68 <ip_maddr_event_handler+0x170>)
   12a08:	f842 3f10 	str.w	r3, [r2, #16]!
   12a0c:	f010 fe75 	bl	236fa <z_log_msg_static_create.constprop.0>
   12a10:	46ad      	mov	sp, r5
	k_free(mcast_info);
   12a12:	4620      	mov	r0, r4
   12a14:	f011 ff06 	bl	24824 <k_free>
   12a18:	e7ae      	b.n	12978 <ip_maddr_event_handler+0x80>
	} else if ((mgmt_event == NET_EVENT_IPV6_MADDR_ADD) ||
   12a1a:	4b14      	ldr	r3, [pc, #80]	; (12a6c <ip_maddr_event_handler+0x174>)
   12a1c:	4433      	add	r3, r6
   12a1e:	2b01      	cmp	r3, #1
   12a20:	d8d1      	bhi.n	129c6 <ip_maddr_event_handler+0xce>
		if ((cb->info == NULL) ||
   12a22:	f8d9 0008 	ldr.w	r0, [r9, #8]
   12a26:	2800      	cmp	r0, #0
   12a28:	d0a6      	beq.n	12978 <ip_maddr_event_handler+0x80>
   12a2a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   12a2e:	2b10      	cmp	r3, #16
   12a30:	d1a2      	bne.n	12978 <ip_maddr_event_handler+0x80>
		net_eth_ipv6_mcast_to_mac_addr(
   12a32:	1d39      	adds	r1, r7, #4
   12a34:	f00d fc88 	bl	20348 <net_eth_ipv6_mcast_to_mac_addr>
		if (mgmt_event == NET_EVENT_IPV6_MADDR_ADD) {
   12a38:	4b0d      	ldr	r3, [pc, #52]	; (12a70 <ip_maddr_event_handler+0x178>)
   12a3a:	e7b9      	b.n	129b0 <ip_maddr_event_handler+0xb8>
   12a3c:	200026d8 	.word	0x200026d8
   12a40:	00036439 	.word	0x00036439
   12a44:	0003661e 	.word	0x0003661e
   12a48:	01000004 	.word	0x01000004
   12a4c:	00036428 	.word	0x00036428
   12a50:	01000003 	.word	0x01000003
   12a54:	00024d98 	.word	0x00024d98
   12a58:	1ffbfffd 	.word	0x1ffbfffd
   12a5c:	e0040003 	.word	0xe0040003
   12a60:	00036472 	.word	0x00036472
   12a64:	03010200 	.word	0x03010200
   12a68:	02000004 	.word	0x02000004
   12a6c:	1f9ffffd 	.word	0x1f9ffffd
   12a70:	e0600003 	.word	0xe0600003

00012a74 <wifi_nrf_if_init_zep>:

void wifi_nrf_if_init_zep(struct net_if *iface)
{
   12a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a78:	b08a      	sub	sp, #40	; 0x28
	const struct device *dev = NULL;
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = NULL;
	struct wifi_nrf_ctx_zep *rpu_ctx_zep = NULL;
	struct nrf_wifi_umac_add_vif_info add_vif_info;

	if (!iface) {
   12a7a:	4605      	mov	r5, r0
{
   12a7c:	af00      	add	r7, sp, #0
	if (!iface) {
   12a7e:	b9b0      	cbnz	r0, 12aae <wifi_nrf_if_init_zep+0x3a>
		LOG_ERR("%s: Invalid parameters\n",
   12a80:	466c      	mov	r4, sp
   12a82:	b088      	sub	sp, #32
   12a84:	466a      	mov	r2, sp
   12a86:	4b52      	ldr	r3, [pc, #328]	; (12bd0 <wifi_nrf_if_init_zep+0x15c>)
	}

	dev = net_if_get_device(iface);

	if (!dev) {
		LOG_ERR("%s: Invalid dev\n",
   12a88:	6153      	str	r3, [r2, #20]
   12a8a:	4b52      	ldr	r3, [pc, #328]	; (12bd4 <wifi_nrf_if_init_zep+0x160>)
   12a8c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12a90:	6193      	str	r3, [r2, #24]
   12a92:	f44f 7300 	mov.w	r3, #512	; 0x200
   12a96:	8393      	strh	r3, [r2, #28]
   12a98:	4b4f      	ldr	r3, [pc, #316]	; (12bd8 <wifi_nrf_if_init_zep+0x164>)
   12a9a:	f842 3f10 	str.w	r3, [r2, #16]!
   12a9e:	484f      	ldr	r0, [pc, #316]	; (12bdc <wifi_nrf_if_init_zep+0x168>)
   12aa0:	f010 fe2b 	bl	236fa <z_log_msg_static_create.constprop.0>
   12aa4:	46a5      	mov	sp, r4
	net_mgmt_init_event_callback(&ip_maddr6_cb,
			     ip_maddr_event_handler,
			     NET_EVENT_IPV6_MADDR_ADD | NET_EVENT_IPV6_MADDR_DEL);
	net_mgmt_add_event_callback(&ip_maddr6_cb);

}
   12aa6:	3728      	adds	r7, #40	; 0x28
   12aa8:	46bd      	mov	sp, r7
   12aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12aae:	6803      	ldr	r3, [r0, #0]
   12ab0:	f8d3 8000 	ldr.w	r8, [r3]
	if (!dev) {
   12ab4:	f1b8 0f00 	cmp.w	r8, #0
   12ab8:	d104      	bne.n	12ac4 <wifi_nrf_if_init_zep+0x50>
		LOG_ERR("%s: Invalid dev\n",
   12aba:	466c      	mov	r4, sp
   12abc:	b088      	sub	sp, #32
   12abe:	466a      	mov	r2, sp
   12ac0:	4b47      	ldr	r3, [pc, #284]	; (12be0 <wifi_nrf_if_init_zep+0x16c>)
   12ac2:	e7e1      	b.n	12a88 <wifi_nrf_if_init_zep+0x14>
   12ac4:	4640      	mov	r0, r8
   12ac6:	f011 f8e1 	bl	23c8c <z_device_is_ready>
	if (!device_is_ready(dev)) {
   12aca:	b988      	cbnz	r0, 12af0 <wifi_nrf_if_init_zep+0x7c>
		LOG_ERR("%s: Device %s is not ready\n",
   12acc:	466c      	mov	r4, sp
   12ace:	b08a      	sub	sp, #40	; 0x28
   12ad0:	466a      	mov	r2, sp
   12ad2:	f8d8 3000 	ldr.w	r3, [r8]
   12ad6:	4943      	ldr	r1, [pc, #268]	; (12be4 <wifi_nrf_if_init_zep+0x170>)
   12ad8:	6151      	str	r1, [r2, #20]
   12ada:	493e      	ldr	r1, [pc, #248]	; (12bd4 <wifi_nrf_if_init_zep+0x160>)
   12adc:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12ae0:	4b41      	ldr	r3, [pc, #260]	; (12be8 <wifi_nrf_if_init_zep+0x174>)
   12ae2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   12ae6:	6213      	str	r3, [r2, #32]
   12ae8:	4b40      	ldr	r3, [pc, #256]	; (12bec <wifi_nrf_if_init_zep+0x178>)
   12aea:	f842 3f10 	str.w	r3, [r2, #16]!
   12aee:	e7d6      	b.n	12a9e <wifi_nrf_if_init_zep+0x2a>
	vif_ctx_zep = dev->data;
   12af0:	f8d8 4010 	ldr.w	r4, [r8, #16]
	if (!vif_ctx_zep) {
   12af4:	b924      	cbnz	r4, 12b00 <wifi_nrf_if_init_zep+0x8c>
		LOG_ERR("%s: vif_ctx_zep is NULL\n",
   12af6:	466c      	mov	r4, sp
   12af8:	b088      	sub	sp, #32
   12afa:	466a      	mov	r2, sp
   12afc:	4b3c      	ldr	r3, [pc, #240]	; (12bf0 <wifi_nrf_if_init_zep+0x17c>)
   12afe:	e7c3      	b.n	12a88 <wifi_nrf_if_init_zep+0x14>
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   12b00:	68e6      	ldr	r6, [r4, #12]
	if (!rpu_ctx_zep) {
   12b02:	b926      	cbnz	r6, 12b0e <wifi_nrf_if_init_zep+0x9a>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n",
   12b04:	466c      	mov	r4, sp
   12b06:	b088      	sub	sp, #32
   12b08:	466a      	mov	r2, sp
   12b0a:	4b3a      	ldr	r3, [pc, #232]	; (12bf4 <wifi_nrf_if_init_zep+0x180>)
   12b0c:	e7bc      	b.n	12a88 <wifi_nrf_if_init_zep+0x14>
	memset(&add_vif_info,
   12b0e:	221e      	movs	r2, #30
   12b10:	2100      	movs	r1, #0
	vif_ctx_zep->zep_dev_ctx = dev;
   12b12:	e9c4 8500 	strd	r8, r5, [r4]
	memset(&add_vif_info,
   12b16:	f107 0008 	add.w	r0, r7, #8
   12b1a:	f004 fc5d 	bl	173d8 <memset>
	add_vif_info.iftype = NRF_WIFI_IFTYPE_STATION;
   12b1e:	2302      	movs	r3, #2
   12b20:	607b      	str	r3, [r7, #4]
	memcpy(add_vif_info.ifacename,
   12b22:	f8d8 8000 	ldr.w	r8, [r8]
   12b26:	4640      	mov	r0, r8
   12b28:	f004 fd30 	bl	1758c <strlen>
   12b2c:	2310      	movs	r3, #16
   12b2e:	4602      	mov	r2, r0
   12b30:	4641      	mov	r1, r8
   12b32:	f107 0016 	add.w	r0, r7, #22
   12b36:	f004 fbbb 	bl	172b0 <__memcpy_chk>
	vif_ctx_zep->vif_idx = wifi_nrf_fmac_add_vif(rpu_ctx_zep->rpu_ctx,
   12b3a:	4621      	mov	r1, r4
   12b3c:	6870      	ldr	r0, [r6, #4]
   12b3e:	1d3a      	adds	r2, r7, #4
   12b40:	f7fd fd98 	bl	10674 <wifi_nrf_fmac_add_vif>
	rpu_ctx_zep->vif_ctx_zep[vif_ctx_zep->vif_idx].if_type =
   12b44:	2398      	movs	r3, #152	; 0x98
	vif_ctx_zep->vif_idx = wifi_nrf_fmac_add_vif(rpu_ctx_zep->rpu_ctx,
   12b46:	7420      	strb	r0, [r4, #16]
	rpu_ctx_zep->vif_ctx_zep[vif_ctx_zep->vif_idx].if_type =
   12b48:	fb03 6000 	mla	r0, r3, r0, r6
   12b4c:	687b      	ldr	r3, [r7, #4]
   12b4e:	67c3      	str	r3, [r0, #124]	; 0x7c
	if (vif_ctx_zep->vif_idx >= MAX_NUM_VIFS) {
   12b50:	7c21      	ldrb	r1, [r4, #16]
   12b52:	2901      	cmp	r1, #1
   12b54:	d916      	bls.n	12b84 <wifi_nrf_if_init_zep+0x110>
		LOG_ERR("%s: FMAC returned invalid interface index\n",
   12b56:	466d      	mov	r5, sp
   12b58:	b088      	sub	sp, #32
   12b5a:	466a      	mov	r2, sp
   12b5c:	4b26      	ldr	r3, [pc, #152]	; (12bf8 <wifi_nrf_if_init_zep+0x184>)
   12b5e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12b62:	6153      	str	r3, [r2, #20]
   12b64:	4b1b      	ldr	r3, [pc, #108]	; (12bd4 <wifi_nrf_if_init_zep+0x160>)
   12b66:	481d      	ldr	r0, [pc, #116]	; (12bdc <wifi_nrf_if_init_zep+0x168>)
   12b68:	6193      	str	r3, [r2, #24]
   12b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
   12b6e:	8393      	strh	r3, [r2, #28]
   12b70:	4b19      	ldr	r3, [pc, #100]	; (12bd8 <wifi_nrf_if_init_zep+0x164>)
   12b72:	f842 3f10 	str.w	r3, [r2, #16]!
   12b76:	f010 fdc0 	bl	236fa <z_log_msg_static_create.constprop.0>
		k_free(vif_ctx_zep);
   12b7a:	4620      	mov	r0, r4
   12b7c:	46ad      	mov	sp, r5
   12b7e:	f011 fe51 	bl	24824 <k_free>
		return;
   12b82:	e790      	b.n	12aa6 <wifi_nrf_if_init_zep+0x32>
						vif_ctx_zep->mac_addr.addr);
   12b84:	3458      	adds	r4, #88	; 0x58
	status = wifi_nrf_fmac_otp_mac_addr_get(rpu_ctx_zep->rpu_ctx,
   12b86:	4622      	mov	r2, r4
   12b88:	6870      	ldr	r0, [r6, #4]
   12b8a:	f7fe f885 	bl	10c98 <wifi_nrf_fmac_otp_mac_addr_get>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   12b8e:	b120      	cbz	r0, 12b9a <wifi_nrf_if_init_zep+0x126>
		LOG_ERR("%s: Fetching of MAC address from OTP failed\n",
   12b90:	466c      	mov	r4, sp
   12b92:	b088      	sub	sp, #32
   12b94:	466a      	mov	r2, sp
   12b96:	4b19      	ldr	r3, [pc, #100]	; (12bfc <wifi_nrf_if_init_zep+0x188>)
   12b98:	e776      	b.n	12a88 <wifi_nrf_if_init_zep+0x14>
	ethernet_init(iface);
   12b9a:	4628      	mov	r0, r5
   12b9c:	f7f4 fd56 	bl	764c <ethernet_init>
	net_if_carrier_off(iface);
   12ba0:	4628      	mov	r0, r5
   12ba2:	f00d ff9b 	bl	20adc <net_if_carrier_off>
	return net_if_set_link_addr_locked(iface, addr, len, type);
   12ba6:	4621      	mov	r1, r4
   12ba8:	2206      	movs	r2, #6
   12baa:	2303      	movs	r3, #3
   12bac:	4628      	mov	r0, r5
   12bae:	f00d fecc 	bl	2094a <net_if_set_link_addr_locked>
	cb->handler = handler;
   12bb2:	4c13      	ldr	r4, [pc, #76]	; (12c00 <wifi_nrf_if_init_zep+0x18c>)
   12bb4:	4813      	ldr	r0, [pc, #76]	; (12c04 <wifi_nrf_if_init_zep+0x190>)
	cb->event_mask = mgmt_event_mask;
   12bb6:	4b14      	ldr	r3, [pc, #80]	; (12c08 <wifi_nrf_if_init_zep+0x194>)
	cb->handler = handler;
   12bb8:	6044      	str	r4, [r0, #4]
	cb->event_mask = mgmt_event_mask;
   12bba:	6103      	str	r3, [r0, #16]
	net_mgmt_add_event_callback(&ip_maddr4_cb);
   12bbc:	f7f5 ffb6 	bl	8b2c <net_mgmt_add_event_callback>
	cb->handler = handler;
   12bc0:	4812      	ldr	r0, [pc, #72]	; (12c0c <wifi_nrf_if_init_zep+0x198>)
	cb->event_mask = mgmt_event_mask;
   12bc2:	4b13      	ldr	r3, [pc, #76]	; (12c10 <wifi_nrf_if_init_zep+0x19c>)
	cb->handler = handler;
   12bc4:	6044      	str	r4, [r0, #4]
	cb->event_mask = mgmt_event_mask;
   12bc6:	6103      	str	r3, [r0, #16]
	net_mgmt_add_event_callback(&ip_maddr6_cb);
   12bc8:	f7f5 ffb0 	bl	8b2c <net_mgmt_add_event_callback>
   12bcc:	e76b      	b.n	12aa6 <wifi_nrf_if_init_zep+0x32>
   12bce:	bf00      	nop
   12bd0:	00034017 	.word	0x00034017
   12bd4:	00036635 	.word	0x00036635
   12bd8:	01000003 	.word	0x01000003
   12bdc:	00024d98 	.word	0x00024d98
   12be0:	000364aa 	.word	0x000364aa
   12be4:	000364bb 	.word	0x000364bb
   12be8:	03010200 	.word	0x03010200
   12bec:	02000004 	.word	0x02000004
   12bf0:	00035b78 	.word	0x00035b78
   12bf4:	00035b91 	.word	0x00035b91
   12bf8:	000364d7 	.word	0x000364d7
   12bfc:	00036502 	.word	0x00036502
   12c00:	000128f9 	.word	0x000128f9
   12c04:	2000475c 	.word	0x2000475c
   12c08:	e0040007 	.word	0xe0040007
   12c0c:	20004748 	.word	0x20004748
   12c10:	e0600007 	.word	0xe0600007

00012c14 <wifi_nrf_if_start_zep>:


int wifi_nrf_if_start_zep(const struct device *dev)
{
   12c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12c18:	b087      	sub	sp, #28
	struct nrf_wifi_umac_chg_vif_state_info vif_info;
	char *mac_addr = NULL;
	unsigned int mac_addr_len = 0;
	int ret = -1;

	if (!dev) {
   12c1a:	4605      	mov	r5, r0
{
   12c1c:	af00      	add	r7, sp, #0
	if (!dev) {
   12c1e:	b9c0      	cbnz	r0, 12c52 <wifi_nrf_if_start_zep+0x3e>
		LOG_ERR("%s: Invalid parameters\n",
   12c20:	466c      	mov	r4, sp
   12c22:	b088      	sub	sp, #32
   12c24:	466a      	mov	r2, sp
   12c26:	4b45      	ldr	r3, [pc, #276]	; (12d3c <wifi_nrf_if_start_zep+0x128>)
   12c28:	6153      	str	r3, [r2, #20]
   12c2a:	4b45      	ldr	r3, [pc, #276]	; (12d40 <wifi_nrf_if_start_zep+0x12c>)
   12c2c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12c30:	6193      	str	r3, [r2, #24]
   12c32:	f44f 7300 	mov.w	r3, #512	; 0x200
   12c36:	8393      	strh	r3, [r2, #28]
   12c38:	4b42      	ldr	r3, [pc, #264]	; (12d44 <wifi_nrf_if_start_zep+0x130>)
   12c3a:	f842 3f10 	str.w	r3, [r2, #16]!
   12c3e:	4842      	ldr	r0, [pc, #264]	; (12d48 <wifi_nrf_if_start_zep+0x134>)
   12c40:	f010 fd5b 	bl	236fa <z_log_msg_static_create.constprop.0>
#endif /* CONFIG_NRF_WIFI_LOW_POWER */

	vif_ctx_zep->if_op_state = WIFI_NRF_FMAC_IF_OP_STATE_UP;
	return 0;
out:
	return ret;
   12c44:	f04f 30ff 	mov.w	r0, #4294967295
   12c48:	46a5      	mov	sp, r4
}
   12c4a:	371c      	adds	r7, #28
   12c4c:	46bd      	mov	sp, r7
   12c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c52:	f011 f81b 	bl	23c8c <z_device_is_ready>
	if (!device_is_ready(dev)) {
   12c56:	b980      	cbnz	r0, 12c7a <wifi_nrf_if_start_zep+0x66>
		LOG_ERR("%s: Device %s is not ready\n",
   12c58:	466c      	mov	r4, sp
   12c5a:	b08a      	sub	sp, #40	; 0x28
   12c5c:	682b      	ldr	r3, [r5, #0]
   12c5e:	466a      	mov	r2, sp
   12c60:	493a      	ldr	r1, [pc, #232]	; (12d4c <wifi_nrf_if_start_zep+0x138>)
   12c62:	6151      	str	r1, [r2, #20]
   12c64:	4936      	ldr	r1, [pc, #216]	; (12d40 <wifi_nrf_if_start_zep+0x12c>)
   12c66:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("%s: Invalid MAC address: %s\n",
   12c6a:	4b39      	ldr	r3, [pc, #228]	; (12d50 <wifi_nrf_if_start_zep+0x13c>)
   12c6c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   12c70:	6213      	str	r3, [r2, #32]
   12c72:	4b38      	ldr	r3, [pc, #224]	; (12d54 <wifi_nrf_if_start_zep+0x140>)
   12c74:	f842 3f10 	str.w	r3, [r2, #16]!
   12c78:	e7e1      	b.n	12c3e <wifi_nrf_if_start_zep+0x2a>
	vif_ctx_zep = dev->data;
   12c7a:	692c      	ldr	r4, [r5, #16]
	if (!vif_ctx_zep) {
   12c7c:	b924      	cbnz	r4, 12c88 <wifi_nrf_if_start_zep+0x74>
		LOG_ERR("%s: vif_ctx_zep is NULL\n",
   12c7e:	466c      	mov	r4, sp
   12c80:	b088      	sub	sp, #32
   12c82:	466a      	mov	r2, sp
   12c84:	4b34      	ldr	r3, [pc, #208]	; (12d58 <wifi_nrf_if_start_zep+0x144>)
   12c86:	e7cf      	b.n	12c28 <wifi_nrf_if_start_zep+0x14>
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   12c88:	68e6      	ldr	r6, [r4, #12]
	if (!rpu_ctx_zep) {
   12c8a:	b926      	cbnz	r6, 12c96 <wifi_nrf_if_start_zep+0x82>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n",
   12c8c:	466c      	mov	r4, sp
   12c8e:	b088      	sub	sp, #32
   12c90:	466a      	mov	r2, sp
   12c92:	4b32      	ldr	r3, [pc, #200]	; (12d5c <wifi_nrf_if_start_zep+0x148>)
   12c94:	e7c8      	b.n	12c28 <wifi_nrf_if_start_zep+0x14>
	return &iface->if_dev->link_addr;
   12c96:	6863      	ldr	r3, [r4, #4]
   12c98:	681b      	ldr	r3, [r3, #0]
	mac_addr = net_if_get_link_addr(vif_ctx_zep->zep_net_if_ctx)->addr;
   12c9a:	f8d3 8010 	ldr.w	r8, [r3, #16]
	mac_addr_len = net_if_get_link_addr(vif_ctx_zep->zep_net_if_ctx)->len;
   12c9e:	f893 9014 	ldrb.w	r9, [r3, #20]
	if (!nrf_wifi_utils_is_mac_addr_valid(mac_addr)) {
   12ca2:	4640      	mov	r0, r8
   12ca4:	f010 f889 	bl	22dba <nrf_wifi_utils_is_mac_addr_valid>
   12ca8:	b970      	cbnz	r0, 12cc8 <wifi_nrf_if_start_zep+0xb4>

static inline char *net_sprint_ll_addr(const uint8_t *ll, uint8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   12caa:	2318      	movs	r3, #24
   12cac:	4649      	mov	r1, r9
   12cae:	4640      	mov	r0, r8
   12cb0:	4a2b      	ldr	r2, [pc, #172]	; (12d60 <wifi_nrf_if_start_zep+0x14c>)
   12cb2:	f7f5 fcd1 	bl	8658 <net_sprint_ll_addr_buf>
		LOG_ERR("%s: Invalid MAC address: %s\n",
   12cb6:	466c      	mov	r4, sp
   12cb8:	b08a      	sub	sp, #40	; 0x28
   12cba:	466a      	mov	r2, sp
   12cbc:	4b29      	ldr	r3, [pc, #164]	; (12d64 <wifi_nrf_if_start_zep+0x150>)
   12cbe:	6153      	str	r3, [r2, #20]
   12cc0:	4b1f      	ldr	r3, [pc, #124]	; (12d40 <wifi_nrf_if_start_zep+0x12c>)
   12cc2:	e9c2 3006 	strd	r3, r0, [r2, #24]
   12cc6:	e7d0      	b.n	12c6a <wifi_nrf_if_start_zep+0x56>
	status = wifi_nrf_fmac_set_vif_macaddr(rpu_ctx_zep->rpu_ctx,
   12cc8:	7c21      	ldrb	r1, [r4, #16]
   12cca:	4642      	mov	r2, r8
   12ccc:	6870      	ldr	r0, [r6, #4]
   12cce:	f7fd fddd 	bl	1088c <wifi_nrf_fmac_set_vif_macaddr>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   12cd2:	4601      	mov	r1, r0
   12cd4:	b120      	cbz	r0, 12ce0 <wifi_nrf_if_start_zep+0xcc>
		LOG_ERR("%s: MAC address change failed\n",
   12cd6:	466c      	mov	r4, sp
   12cd8:	b088      	sub	sp, #32
   12cda:	466a      	mov	r2, sp
   12cdc:	4b22      	ldr	r3, [pc, #136]	; (12d68 <wifi_nrf_if_start_zep+0x154>)
   12cde:	e7a3      	b.n	12c28 <wifi_nrf_if_start_zep+0x14>
	vif_info.state = WIFI_NRF_FMAC_IF_OP_STATE_UP;
   12ce0:	f04f 0801 	mov.w	r8, #1
	memset(&vif_info,
   12ce4:	2210      	movs	r2, #16
   12ce6:	f107 0008 	add.w	r0, r7, #8
   12cea:	f004 fb75 	bl	173d8 <memset>
	memcpy(vif_info.ifacename,
   12cee:	682d      	ldr	r5, [r5, #0]
	vif_info.state = WIFI_NRF_FMAC_IF_OP_STATE_UP;
   12cf0:	f8c7 8004 	str.w	r8, [r7, #4]
	memcpy(vif_info.ifacename,
   12cf4:	4628      	mov	r0, r5
   12cf6:	f004 fc49 	bl	1758c <strlen>
   12cfa:	4629      	mov	r1, r5
   12cfc:	4602      	mov	r2, r0
   12cfe:	2310      	movs	r3, #16
   12d00:	f107 0008 	add.w	r0, r7, #8
   12d04:	f004 fad4 	bl	172b0 <__memcpy_chk>
	status = wifi_nrf_fmac_chg_vif_state(rpu_ctx_zep->rpu_ctx,
   12d08:	7c21      	ldrb	r1, [r4, #16]
   12d0a:	6870      	ldr	r0, [r6, #4]
   12d0c:	1d3a      	adds	r2, r7, #4
   12d0e:	f7fd fd53 	bl	107b8 <wifi_nrf_fmac_chg_vif_state>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   12d12:	b120      	cbz	r0, 12d1e <wifi_nrf_if_start_zep+0x10a>
		LOG_ERR("%s: wifi_nrf_fmac_chg_vif_state failed\n",
   12d14:	466c      	mov	r4, sp
   12d16:	b088      	sub	sp, #32
   12d18:	466a      	mov	r2, sp
   12d1a:	4b14      	ldr	r3, [pc, #80]	; (12d6c <wifi_nrf_if_start_zep+0x158>)
   12d1c:	e784      	b.n	12c28 <wifi_nrf_if_start_zep+0x14>
	status = wifi_nrf_fmac_set_power_save(rpu_ctx_zep->rpu_ctx,
   12d1e:	4642      	mov	r2, r8
   12d20:	7c21      	ldrb	r1, [r4, #16]
   12d22:	6870      	ldr	r0, [r6, #4]
   12d24:	f7fd fdf0 	bl	10908 <wifi_nrf_fmac_set_power_save>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   12d28:	b120      	cbz	r0, 12d34 <wifi_nrf_if_start_zep+0x120>
		LOG_ERR("%s: wifi_nrf_fmac_set_power_save failed\n",
   12d2a:	466c      	mov	r4, sp
   12d2c:	b088      	sub	sp, #32
   12d2e:	466a      	mov	r2, sp
   12d30:	4b0f      	ldr	r3, [pc, #60]	; (12d70 <wifi_nrf_if_start_zep+0x15c>)
   12d32:	e779      	b.n	12c28 <wifi_nrf_if_start_zep+0x14>
	vif_ctx_zep->if_op_state = WIFI_NRF_FMAC_IF_OP_STATE_UP;
   12d34:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	return 0;
   12d38:	e787      	b.n	12c4a <wifi_nrf_if_start_zep+0x36>
   12d3a:	bf00      	nop
   12d3c:	00034017 	.word	0x00034017
   12d40:	00036608 	.word	0x00036608
   12d44:	01000003 	.word	0x01000003
   12d48:	00024d98 	.word	0x00024d98
   12d4c:	000364bb 	.word	0x000364bb
   12d50:	03010200 	.word	0x03010200
   12d54:	02000004 	.word	0x02000004
   12d58:	00035b78 	.word	0x00035b78
   12d5c:	00035b91 	.word	0x00035b91
   12d60:	20005534 	.word	0x20005534
   12d64:	0003652f 	.word	0x0003652f
   12d68:	0003654c 	.word	0x0003654c
   12d6c:	0003656b 	.word	0x0003656b
   12d70:	00036593 	.word	0x00036593

00012d74 <wifi_nrf_if_stop_zep>:


int wifi_nrf_if_stop_zep(const struct device *dev)
{
   12d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d76:	b087      	sub	sp, #28
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = NULL;
	struct wifi_nrf_ctx_zep *rpu_ctx_zep = NULL;
	struct nrf_wifi_umac_chg_vif_state_info vif_info;
	int ret = -1;

	if (!dev) {
   12d78:	4605      	mov	r5, r0
{
   12d7a:	af00      	add	r7, sp, #0
	if (!dev) {
   12d7c:	b9b8      	cbnz	r0, 12dae <wifi_nrf_if_stop_zep+0x3a>
		LOG_ERR("%s: Invalid parameters\n",
   12d7e:	466c      	mov	r4, sp
   12d80:	b088      	sub	sp, #32
   12d82:	466a      	mov	r2, sp
   12d84:	4b25      	ldr	r3, [pc, #148]	; (12e1c <wifi_nrf_if_stop_zep+0xa8>)
	}

	vif_ctx_zep = dev->data;

	if (!vif_ctx_zep) {
		LOG_ERR("%s: vif_ctx_zep is NULL\n",
   12d86:	6153      	str	r3, [r2, #20]
   12d88:	4b25      	ldr	r3, [pc, #148]	; (12e20 <wifi_nrf_if_stop_zep+0xac>)
   12d8a:	4826      	ldr	r0, [pc, #152]	; (12e24 <wifi_nrf_if_stop_zep+0xb0>)
   12d8c:	6193      	str	r3, [r2, #24]
   12d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
   12d92:	8393      	strh	r3, [r2, #28]
   12d94:	4b24      	ldr	r3, [pc, #144]	; (12e28 <wifi_nrf_if_stop_zep+0xb4>)
   12d96:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12d9a:	f842 3f10 	str.w	r3, [r2, #16]!
   12d9e:	f010 fcac 	bl	236fa <z_log_msg_static_create.constprop.0>
	int ret = -1;
   12da2:	f04f 30ff 	mov.w	r0, #4294967295
   12da6:	46a5      	mov	sp, r4

	vif_ctx_zep->if_op_state = WIFI_NRF_FMAC_IF_OP_STATE_DOWN;
	ret = 0;
out:
	return ret;
}
   12da8:	371c      	adds	r7, #28
   12daa:	46bd      	mov	sp, r7
   12dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	vif_ctx_zep = dev->data;
   12dae:	6904      	ldr	r4, [r0, #16]
	if (!vif_ctx_zep) {
   12db0:	b924      	cbnz	r4, 12dbc <wifi_nrf_if_stop_zep+0x48>
		LOG_ERR("%s: vif_ctx_zep is NULL\n",
   12db2:	466c      	mov	r4, sp
   12db4:	b088      	sub	sp, #32
   12db6:	466a      	mov	r2, sp
   12db8:	4b1c      	ldr	r3, [pc, #112]	; (12e2c <wifi_nrf_if_stop_zep+0xb8>)
   12dba:	e7e4      	b.n	12d86 <wifi_nrf_if_stop_zep+0x12>
	rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
   12dbc:	68e6      	ldr	r6, [r4, #12]
	if (!rpu_ctx_zep) {
   12dbe:	b926      	cbnz	r6, 12dca <wifi_nrf_if_stop_zep+0x56>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n",
   12dc0:	466c      	mov	r4, sp
   12dc2:	b088      	sub	sp, #32
   12dc4:	466a      	mov	r2, sp
   12dc6:	4b1a      	ldr	r3, [pc, #104]	; (12e30 <wifi_nrf_if_stop_zep+0xbc>)
   12dc8:	e7dd      	b.n	12d86 <wifi_nrf_if_stop_zep+0x12>
	status = wifi_nrf_fmac_set_power_save(rpu_ctx_zep->rpu_ctx,
   12dca:	7c21      	ldrb	r1, [r4, #16]
   12dcc:	2200      	movs	r2, #0
   12dce:	6870      	ldr	r0, [r6, #4]
   12dd0:	f7fd fd9a 	bl	10908 <wifi_nrf_fmac_set_power_save>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   12dd4:	4601      	mov	r1, r0
   12dd6:	b120      	cbz	r0, 12de2 <wifi_nrf_if_stop_zep+0x6e>
		LOG_ERR("%s: wifi_nrf_fmac_set_power_save failed\n",
   12dd8:	466c      	mov	r4, sp
   12dda:	b088      	sub	sp, #32
   12ddc:	466a      	mov	r2, sp
   12dde:	4b15      	ldr	r3, [pc, #84]	; (12e34 <wifi_nrf_if_stop_zep+0xc0>)
   12de0:	e7d1      	b.n	12d86 <wifi_nrf_if_stop_zep+0x12>
	memset(&vif_info,
   12de2:	2214      	movs	r2, #20
   12de4:	1d38      	adds	r0, r7, #4
   12de6:	f004 faf7 	bl	173d8 <memset>
	memcpy(vif_info.ifacename,
   12dea:	682d      	ldr	r5, [r5, #0]
   12dec:	4628      	mov	r0, r5
   12dee:	f004 fbcd 	bl	1758c <strlen>
   12df2:	4629      	mov	r1, r5
   12df4:	4602      	mov	r2, r0
   12df6:	2310      	movs	r3, #16
   12df8:	f107 0008 	add.w	r0, r7, #8
   12dfc:	f004 fa58 	bl	172b0 <__memcpy_chk>
	status = wifi_nrf_fmac_chg_vif_state(rpu_ctx_zep->rpu_ctx,
   12e00:	7c21      	ldrb	r1, [r4, #16]
   12e02:	6870      	ldr	r0, [r6, #4]
   12e04:	1d3a      	adds	r2, r7, #4
   12e06:	f7fd fcd7 	bl	107b8 <wifi_nrf_fmac_chg_vif_state>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   12e0a:	b120      	cbz	r0, 12e16 <wifi_nrf_if_stop_zep+0xa2>
		LOG_ERR("%s: wifi_nrf_fmac_chg_vif_state failed\n",
   12e0c:	466c      	mov	r4, sp
   12e0e:	b088      	sub	sp, #32
   12e10:	466a      	mov	r2, sp
   12e12:	4b09      	ldr	r3, [pc, #36]	; (12e38 <wifi_nrf_if_stop_zep+0xc4>)
   12e14:	e7b7      	b.n	12d86 <wifi_nrf_if_stop_zep+0x12>
	vif_ctx_zep->if_op_state = WIFI_NRF_FMAC_IF_OP_STATE_DOWN;
   12e16:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
	return ret;
   12e1a:	e7c5      	b.n	12da8 <wifi_nrf_if_stop_zep+0x34>
   12e1c:	00034017 	.word	0x00034017
   12e20:	000365f3 	.word	0x000365f3
   12e24:	00024d98 	.word	0x00024d98
   12e28:	01000003 	.word	0x01000003
   12e2c:	00035b78 	.word	0x00035b78
   12e30:	00035b91 	.word	0x00035b91
   12e34:	00036593 	.word	0x00036593
   12e38:	0003656b 	.word	0x0003656b

00012e3c <wifi_nrf_if_set_config_zep>:


int wifi_nrf_if_set_config_zep(const struct device *dev,
			       enum ethernet_config_type type,
			       const struct ethernet_config *config)
{
   12e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e3e:	460e      	mov	r6, r1
   12e40:	4615      	mov	r5, r2
   12e42:	af00      	add	r7, sp, #0
	struct wifi_nrf_vif_ctx_zep *vif_ctx_zep = NULL;
	struct wifi_nrf_ctx_zep *rpu_ctx_zep = vif_ctx_zep->rpu_ctx_zep;
	int ret = -1;

	if (!dev) {
   12e44:	b9b0      	cbnz	r0, 12e74 <wifi_nrf_if_set_config_zep+0x38>
		LOG_ERR("%s: Invalid parameters\n",
   12e46:	466c      	mov	r4, sp
   12e48:	b088      	sub	sp, #32
   12e4a:	466a      	mov	r2, sp
   12e4c:	4b26      	ldr	r3, [pc, #152]	; (12ee8 <wifi_nrf_if_set_config_zep+0xac>)
	}

	vif_ctx_zep = dev->data;

	if (!vif_ctx_zep) {
		LOG_ERR("%s: vif_ctx_zep is NULL\n",
   12e4e:	6153      	str	r3, [r2, #20]
   12e50:	4b26      	ldr	r3, [pc, #152]	; (12eec <wifi_nrf_if_set_config_zep+0xb0>)
   12e52:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12e56:	6193      	str	r3, [r2, #24]
   12e58:	f44f 7300 	mov.w	r3, #512	; 0x200
   12e5c:	8393      	strh	r3, [r2, #28]
   12e5e:	4b24      	ldr	r3, [pc, #144]	; (12ef0 <wifi_nrf_if_set_config_zep+0xb4>)
   12e60:	f842 3f10 	str.w	r3, [r2, #16]!
   12e64:	4823      	ldr	r0, [pc, #140]	; (12ef4 <wifi_nrf_if_set_config_zep+0xb8>)
   12e66:	f010 fc48 	bl	236fa <z_log_msg_static_create.constprop.0>
	int ret = -1;
   12e6a:	f04f 30ff 	mov.w	r0, #4294967295
   12e6e:	46a5      	mov	sp, r4
	}

	ret = 0;
out:
	return ret;
}
   12e70:	46bd      	mov	sp, r7
   12e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	vif_ctx_zep = dev->data;
   12e74:	6904      	ldr	r4, [r0, #16]
	if (!vif_ctx_zep) {
   12e76:	b924      	cbnz	r4, 12e82 <wifi_nrf_if_set_config_zep+0x46>
		LOG_ERR("%s: vif_ctx_zep is NULL\n",
   12e78:	466c      	mov	r4, sp
   12e7a:	b088      	sub	sp, #32
   12e7c:	466a      	mov	r2, sp
   12e7e:	4b1e      	ldr	r3, [pc, #120]	; (12ef8 <wifi_nrf_if_set_config_zep+0xbc>)
   12e80:	e7e5      	b.n	12e4e <wifi_nrf_if_set_config_zep+0x12>
	if (!rpu_ctx_zep) {
   12e82:	68e3      	ldr	r3, [r4, #12]
   12e84:	b923      	cbnz	r3, 12e90 <wifi_nrf_if_set_config_zep+0x54>
		LOG_ERR("%s: rpu_ctx_zep is NULL\n",
   12e86:	466c      	mov	r4, sp
   12e88:	b088      	sub	sp, #32
   12e8a:	466a      	mov	r2, sp
   12e8c:	4b1b      	ldr	r3, [pc, #108]	; (12efc <wifi_nrf_if_set_config_zep+0xc0>)
   12e8e:	e7de      	b.n	12e4e <wifi_nrf_if_set_config_zep+0x12>
	if (type == ETHERNET_CONFIG_TYPE_MAC_ADDRESS) {
   12e90:	2903      	cmp	r1, #3
   12e92:	d001      	beq.n	12e98 <wifi_nrf_if_set_config_zep+0x5c>
	ret = 0;
   12e94:	2000      	movs	r0, #0
   12e96:	e7eb      	b.n	12e70 <wifi_nrf_if_set_config_zep+0x34>
		if (!nrf_wifi_utils_is_mac_addr_valid(config->mac_address.addr)) {
   12e98:	4610      	mov	r0, r2
   12e9a:	f00f ff8e 	bl	22dba <nrf_wifi_utils_is_mac_addr_valid>
   12e9e:	b9a8      	cbnz	r0, 12ecc <wifi_nrf_if_set_config_zep+0x90>
   12ea0:	2318      	movs	r3, #24
   12ea2:	2106      	movs	r1, #6
   12ea4:	4628      	mov	r0, r5
   12ea6:	4a16      	ldr	r2, [pc, #88]	; (12f00 <wifi_nrf_if_set_config_zep+0xc4>)
   12ea8:	f7f5 fbd6 	bl	8658 <net_sprint_ll_addr_buf>
			LOG_ERR("%s: Invalid MAC address %s\n",
   12eac:	466c      	mov	r4, sp
   12eae:	b08a      	sub	sp, #40	; 0x28
   12eb0:	466a      	mov	r2, sp
   12eb2:	4b14      	ldr	r3, [pc, #80]	; (12f04 <wifi_nrf_if_set_config_zep+0xc8>)
   12eb4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   12eb8:	6153      	str	r3, [r2, #20]
   12eba:	4b0c      	ldr	r3, [pc, #48]	; (12eec <wifi_nrf_if_set_config_zep+0xb0>)
   12ebc:	e9c2 3006 	strd	r3, r0, [r2, #24]
   12ec0:	4b11      	ldr	r3, [pc, #68]	; (12f08 <wifi_nrf_if_set_config_zep+0xcc>)
   12ec2:	6213      	str	r3, [r2, #32]
   12ec4:	4b11      	ldr	r3, [pc, #68]	; (12f0c <wifi_nrf_if_set_config_zep+0xd0>)
   12ec6:	f842 3f10 	str.w	r3, [r2, #16]!
   12eca:	e7cb      	b.n	12e64 <wifi_nrf_if_set_config_zep+0x28>
   12ecc:	682b      	ldr	r3, [r5, #0]
	return net_if_set_link_addr_locked(iface, addr, len, type);
   12ece:	2206      	movs	r2, #6
   12ed0:	65a3      	str	r3, [r4, #88]	; 0x58
   12ed2:	88ab      	ldrh	r3, [r5, #4]
   12ed4:	6860      	ldr	r0, [r4, #4]
   12ed6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
   12eda:	f104 0158 	add.w	r1, r4, #88	; 0x58
   12ede:	4633      	mov	r3, r6
   12ee0:	f00d fd33 	bl	2094a <net_if_set_link_addr_locked>
   12ee4:	e7d6      	b.n	12e94 <wifi_nrf_if_set_config_zep+0x58>
   12ee6:	bf00      	nop
   12ee8:	00034017 	.word	0x00034017
   12eec:	000365d8 	.word	0x000365d8
   12ef0:	01000003 	.word	0x01000003
   12ef4:	00024d98 	.word	0x00024d98
   12ef8:	00035b78 	.word	0x00035b78
   12efc:	00035b91 	.word	0x00035b91
   12f00:	20005534 	.word	0x20005534
   12f04:	000365bc 	.word	0x000365bc
   12f08:	03010200 	.word	0x03010200
   12f0c:	02000004 	.word	0x02000004

00012f10 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   12f10:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   12f14:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   12f18:	280a      	cmp	r0, #10
   12f1a:	bf9a      	itte	ls
   12f1c:	4b02      	ldrls	r3, [pc, #8]	; (12f28 <qspi_get_zephyr_ret_code+0x18>)
   12f1e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   12f22:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   12f26:	4770      	bx	lr
   12f28:	00031634 	.word	0x00031634

00012f2c <qspi_handler>:
 */
static void qspi_handler(nrfx_qspi_evt_t event, void *p_context)
{
	struct qspi_nor_data *dev_data = p_context;

	if (event == NRFX_QSPI_EVENT_DONE)
   12f2c:	b938      	cbnz	r0, 12f3e <qspi_handler+0x12>
	if (!qspi_config->easydma)
   12f2e:	4b04      	ldr	r3, [pc, #16]	; (12f40 <qspi_handler+0x14>)
   12f30:	681b      	ldr	r3, [r3, #0]
   12f32:	795b      	ldrb	r3, [r3, #5]
   12f34:	b11b      	cbz	r3, 12f3e <qspi_handler+0x12>
	k_sem_give(&dev_data->sync);
   12f36:	f101 0030 	add.w	r0, r1, #48	; 0x30
   12f3a:	f010 bbe6 	b.w	2370a <k_sem_give>
		_qspi_complete(dev_data);
}
   12f3e:	4770      	bx	lr
   12f40:	20004790 	.word	0x20004790

00012f44 <_qspi_wait_for_completion.constprop.0>:
	if (!qspi_config->easydma)
   12f44:	4b08      	ldr	r3, [pc, #32]	; (12f68 <_qspi_wait_for_completion.constprop.0+0x24>)
   12f46:	681b      	ldr	r3, [r3, #0]
   12f48:	795b      	ldrb	r3, [r3, #5]
   12f4a:	b15b      	cbz	r3, 12f64 <_qspi_wait_for_completion.constprop.0+0x20>
	if (res == NRFX_SUCCESS) {
   12f4c:	4b07      	ldr	r3, [pc, #28]	; (12f6c <_qspi_wait_for_completion.constprop.0+0x28>)
   12f4e:	4298      	cmp	r0, r3
   12f50:	d108      	bne.n	12f64 <_qspi_wait_for_completion.constprop.0+0x20>
	return dev->data;
   12f52:	4b07      	ldr	r3, [pc, #28]	; (12f70 <_qspi_wait_for_completion.constprop.0+0x2c>)
		k_sem_take(&dev_data->sync, K_FOREVER);
   12f54:	f04f 32ff 	mov.w	r2, #4294967295
   12f58:	6918      	ldr	r0, [r3, #16]
   12f5a:	f04f 33ff 	mov.w	r3, #4294967295
   12f5e:	3030      	adds	r0, #48	; 0x30
   12f60:	f010 bbd8 	b.w	23714 <k_sem_take.isra.0>
}
   12f64:	4770      	bx	lr
   12f66:	bf00      	nop
   12f68:	20004790 	.word	0x20004790
   12f6c:	0bad0000 	.word	0x0bad0000
   12f70:	20000964 	.word	0x20000964

00012f74 <qspi_device_init>:

static bool qspi_initialized;

static int qspi_device_init(const struct device *dev)
{
   12f74:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   12f76:	6905      	ldr	r5, [r0, #16]
{
   12f78:	4604      	mov	r4, r0
	 */
#ifdef CONFIG_MULTITHREADING
	k_sem_give(&dev_data->count);
#endif

	if (!qspi_initialized) {
   12f7a:	4e13      	ldr	r6, [pc, #76]	; (12fc8 <qspi_device_init+0x54>)
	qspi_lock(dev);
   12f7c:	4628      	mov	r0, r5
   12f7e:	f010 fbcb 	bl	23718 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   12f82:	f105 0048 	add.w	r0, r5, #72	; 0x48
   12f86:	f010 fbc0 	bl	2370a <k_sem_give>
	if (!qspi_initialized) {
   12f8a:	7833      	ldrb	r3, [r6, #0]
   12f8c:	b9d3      	cbnz	r3, 12fc4 <qspi_device_init+0x50>
		res = nrfx_qspi_init(&QSPIconfig, qspi_handler, dev_data);
   12f8e:	462a      	mov	r2, r5
   12f90:	490e      	ldr	r1, [pc, #56]	; (12fcc <qspi_device_init+0x58>)
   12f92:	480f      	ldr	r0, [pc, #60]	; (12fd0 <qspi_device_init+0x5c>)
   12f94:	f001 fe74 	bl	14c80 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   12f98:	f7ff ffba 	bl	12f10 <qspi_get_zephyr_ret_code>
		NRF_QSPI->IFTIMING |= qspi_config->RDC4IO;
   12f9c:	4b0d      	ldr	r3, [pc, #52]	; (12fd4 <qspi_device_init+0x60>)
   12f9e:	4a0e      	ldr	r2, [pc, #56]	; (12fd8 <qspi_device_init+0x64>)
   12fa0:	681b      	ldr	r3, [r3, #0]
   12fa2:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   12fa6:	791b      	ldrb	r3, [r3, #4]
		qspi_initialized = (ret == 0);
   12fa8:	4605      	mov	r5, r0
		NRF_QSPI->IFTIMING |= qspi_config->RDC4IO;
   12faa:	430b      	orrs	r3, r1
   12fac:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
		qspi_initialized = (ret == 0);
   12fb0:	fab0 f380 	clz	r3, r0
   12fb4:	095b      	lsrs	r3, r3, #5
   12fb6:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   12fb8:	6920      	ldr	r0, [r4, #16]
   12fba:	3018      	adds	r0, #24
   12fbc:	f010 fba5 	bl	2370a <k_sem_give>
	}

	qspi_unlock(dev);

	return ret;
}
   12fc0:	4628      	mov	r0, r5
   12fc2:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   12fc4:	2500      	movs	r5, #0
   12fc6:	e7f7      	b.n	12fb8 <qspi_device_init+0x44>
   12fc8:	2000554c 	.word	0x2000554c
   12fcc:	00012f2d 	.word	0x00012f2d
   12fd0:	20004770 	.word	0x20004770
   12fd4:	20004790 	.word	0x20004790
   12fd8:	5002b000 	.word	0x5002b000

00012fdc <qspi_send_cmd>:
 *
 * If this is used for both send and receive the buffer sizes must be
 * equal and cover the whole transaction.
 */
static int qspi_send_cmd(const struct device *dev, const struct qspi_cmd *cmd, bool wren)
{
   12fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fde:	b083      	sub	sp, #12
	size_t tx_len = 0;
	void *rx_buf = NULL;
	size_t rx_len = 0;
	size_t xfer_len = sizeof(cmd->op_code);

	if (cmd->tx_buf) {
   12fe0:	684c      	ldr	r4, [r1, #4]
{
   12fe2:	4605      	mov	r5, r0
   12fe4:	af00      	add	r7, sp, #0
	if (cmd->tx_buf) {
   12fe6:	b174      	cbz	r4, 13006 <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   12fe8:	e9d4 4300 	ldrd	r4, r3, [r4]
		tx_len = cmd->tx_buf->len;
	}

	if (cmd->rx_buf) {
   12fec:	6888      	ldr	r0, [r1, #8]
   12fee:	b308      	cbz	r0, 13034 <qspi_send_cmd+0x58>
		rx_buf = cmd->rx_buf->buf;
		rx_len = cmd->rx_buf->len;
   12ff0:	e9d0 6000 	ldrd	r6, r0, [r0]
	}

	if ((rx_len != 0) && (tx_len != 0)) {
   12ff4:	b1f8      	cbz	r0, 13036 <qspi_send_cmd+0x5a>
   12ff6:	b1f3      	cbz	r3, 13036 <qspi_send_cmd+0x5a>
		if (rx_len != tx_len)
   12ff8:	4298      	cmp	r0, r3
   12ffa:	d006      	beq.n	1300a <qspi_send_cmd+0x2e>
		return -EINVAL;
   12ffc:	f06f 0015 	mvn.w	r0, #21

	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);

	qspi_unlock(dev);
	return qspi_get_zephyr_ret_code(res);
}
   13000:	370c      	adds	r7, #12
   13002:	46bd      	mov	sp, r7
   13004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   13006:	4623      	mov	r3, r4
   13008:	e7f0      	b.n	12fec <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   1300a:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1300c:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu", cmd->op_code, xfer_len);
   1300e:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   13010:	d914      	bls.n	1303c <qspi_send_cmd+0x60>
		LOG_WRN("cinstr %02x transfer too long: %zu", cmd->op_code, xfer_len);
   13012:	466c      	mov	r4, sp
   13014:	b088      	sub	sp, #32
   13016:	466a      	mov	r2, sp
   13018:	61d3      	str	r3, [r2, #28]
   1301a:	2304      	movs	r3, #4
   1301c:	4814      	ldr	r0, [pc, #80]	; (13070 <qspi_send_cmd+0x94>)
   1301e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   13022:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   13026:	4813      	ldr	r0, [pc, #76]	; (13074 <qspi_send_cmd+0x98>)
   13028:	f842 3f10 	str.w	r3, [r2, #16]!
   1302c:	f010 fb6f 	bl	2370e <z_log_msg_static_create.constprop.0>
   13030:	46a5      	mov	sp, r4
		return -EINVAL;
   13032:	e7e3      	b.n	12ffc <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   13034:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   13036:	3301      	adds	r3, #1
   13038:	4403      	add	r3, r0
   1303a:	e7e7      	b.n	1300c <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1303c:	707b      	strb	r3, [r7, #1]
   1303e:	f240 1301 	movw	r3, #257	; 0x101
   13042:	807b      	strh	r3, [r7, #2]
   13044:	2300      	movs	r3, #0
	qspi_lock(dev);
   13046:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   13048:	713b      	strb	r3, [r7, #4]
   1304a:	7039      	strb	r1, [r7, #0]
   1304c:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   1304e:	f010 fb63 	bl	23718 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   13052:	4621      	mov	r1, r4
   13054:	4632      	mov	r2, r6
   13056:	4638      	mov	r0, r7
   13058:	f001 fefc 	bl	14e54 <nrfx_qspi_cinstr_xfer>
   1305c:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1305e:	6928      	ldr	r0, [r5, #16]
   13060:	3018      	adds	r0, #24
   13062:	f010 fb52 	bl	2370a <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   13066:	4620      	mov	r0, r4
   13068:	f7ff ff52 	bl	12f10 <qspi_get_zephyr_ret_code>
   1306c:	e7c8      	b.n	13000 <qspi_send_cmd+0x24>
   1306e:	bf00      	nop
   13070:	0003664a 	.word	0x0003664a
   13074:	00024d98 	.word	0x00024d98

00013078 <qspi_rdsr.constprop.0>:

/* RDSR wrapper.  Negative value is error. */
static int qspi_rdsr(const struct device *dev)
   13078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	uint8_t sr = -1;
   1307a:	23ff      	movs	r3, #255	; 0xff
   1307c:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   13080:	f10d 0303 	add.w	r3, sp, #3
		.buf = &sr,
		.len = sizeof(sr),
	};
	struct qspi_cmd cmd = {
   13084:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   13086:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   13088:	2301      	movs	r3, #1
   1308a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1308e:	2305      	movs	r3, #5
		.op_code = SPI_NOR_CMD_RDSR,
		.rx_buf = &sr_buf,
	};
	int ret = qspi_send_cmd(dev, &cmd, false);
   13090:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   13092:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
   13096:	4806      	ldr	r0, [pc, #24]	; (130b0 <qspi_rdsr.constprop.0+0x38>)
	struct qspi_cmd cmd = {
   13098:	ab01      	add	r3, sp, #4
   1309a:	9204      	str	r2, [sp, #16]
   1309c:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   1309e:	f7ff ff9d 	bl	12fdc <qspi_send_cmd>

	return (ret < 0) ? ret : sr;
   130a2:	2800      	cmp	r0, #0
   130a4:	bfa8      	it	ge
   130a6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   130aa:	b007      	add	sp, #28
   130ac:	f85d fb04 	ldr.w	pc, [sp], #4
   130b0:	20000964 	.word	0x20000964

000130b4 <qspi_device_uninit>:
{
   130b4:	b538      	push	{r3, r4, r5, lr}
   130b6:	4604      	mov	r4, r0
	qspi_lock(dev);
   130b8:	6900      	ldr	r0, [r0, #16]
   130ba:	f010 fb2d 	bl	23718 <qspi_lock.isra.0>
	return dev->data;
   130be:	6925      	ldr	r5, [r4, #16]
	(void)k_sem_take(&dev_data->count, K_NO_WAIT);
   130c0:	2200      	movs	r2, #0
   130c2:	2300      	movs	r3, #0
   130c4:	f105 0048 	add.w	r0, r5, #72	; 0x48
   130c8:	f010 fb24 	bl	23714 <k_sem_take.isra.0>
	if (last) {
   130cc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   130ce:	b94b      	cbnz	r3, 130e4 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   130d0:	4d09      	ldr	r5, [pc, #36]	; (130f8 <qspi_device_uninit+0x44>)
   130d2:	f001 ff0b 	bl	14eec <nrfx_qspi_mem_busy_check>
   130d6:	42a8      	cmp	r0, r5
   130d8:	d10a      	bne.n	130f0 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   130da:	f001 ff29 	bl	14f30 <nrfx_qspi_uninit>
		qspi_initialized = false;
   130de:	2200      	movs	r2, #0
   130e0:	4b06      	ldr	r3, [pc, #24]	; (130fc <qspi_device_uninit+0x48>)
   130e2:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   130e4:	6920      	ldr	r0, [r4, #16]
}
   130e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   130ea:	3018      	adds	r0, #24
   130ec:	f010 bb0d 	b.w	2370a <k_sem_give>
				k_msleep(50);
   130f0:	2032      	movs	r0, #50	; 0x32
   130f2:	f010 fb18 	bl	23726 <k_msleep.isra.0>
   130f6:	e7ec      	b.n	130d2 <qspi_device_uninit+0x1e>
   130f8:	0bad0000 	.word	0x0bad0000
   130fc:	2000554c 	.word	0x2000554c

00013100 <qspi_nor_read.constprop.0>:
	}

	return res;
}

static int qspi_nor_read(const struct device *dev, int addr, void *dest, size_t size)
   13100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13104:	4680      	mov	r8, r0
   13106:	4615      	mov	r5, r2
{
	if (!dest)
   13108:	460f      	mov	r7, r1
static int qspi_nor_read(const struct device *dev, int addr, void *dest, size_t size)
   1310a:	b085      	sub	sp, #20
	if (!dest)
   1310c:	2900      	cmp	r1, #0
   1310e:	f000 8091 	beq.w	13234 <qspi_nor_read.constprop.0+0x134>
		return -EINVAL;

	/* read size must be non-zero */
	if (!size)
   13112:	2a00      	cmp	r2, #0
   13114:	f000 8091 	beq.w	1323a <qspi_nor_read.constprop.0+0x13a>
		return 0;

	int rc = qspi_device_init(dev);
   13118:	f8df 9124 	ldr.w	r9, [pc, #292]	; 13240 <qspi_nor_read.constprop.0+0x140>
   1311c:	4648      	mov	r0, r9
   1311e:	f7ff ff29 	bl	12f74 <qspi_device_init>

	if (rc != 0)
   13122:	4604      	mov	r4, r0
   13124:	2800      	cmp	r0, #0
   13126:	d17e      	bne.n	13226 <qspi_nor_read.constprop.0+0x126>
		goto out;

	qspi_lock(dev);
   13128:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1312c:	f010 faf4 	bl	23718 <qspi_lock.isra.0>
	int flash_prefix = (WORD_SIZE - (addr % WORD_SIZE)) % WORD_SIZE;
   13130:	f1d8 0300 	rsbs	r3, r8, #0
   13134:	f003 0303 	and.w	r3, r3, #3
   13138:	f008 0403 	and.w	r4, r8, #3
   1313c:	bf58      	it	pl
   1313e:	425c      	negpl	r4, r3
   13140:	4264      	negs	r4, r4
   13142:	f004 0403 	and.w	r4, r4, #3
   13146:	42ac      	cmp	r4, r5
   13148:	bf28      	it	cs
   1314a:	462c      	movcs	r4, r5
	int dest_prefix = (WORD_SIZE - (int)dptr % WORD_SIZE) % WORD_SIZE;
   1314c:	427b      	negs	r3, r7
   1314e:	f003 0303 	and.w	r3, r3, #3
   13152:	f007 0603 	and.w	r6, r7, #3
   13156:	bf58      	it	pl
   13158:	425e      	negpl	r6, r3
   1315a:	4276      	negs	r6, r6
   1315c:	f006 0603 	and.w	r6, r6, #3
   13160:	42ae      	cmp	r6, r5
   13162:	bf28      	it	cs
   13164:	462e      	movcs	r6, r5
	int flash_suffix = (size - flash_prefix) % WORD_SIZE;
   13166:	1b2b      	subs	r3, r5, r4
	int dest_middle = size - dest_prefix - (size - dest_prefix) % WORD_SIZE;
   13168:	1bad      	subs	r5, r5, r6
   1316a:	f025 0503 	bic.w	r5, r5, #3
	int flash_middle = size - flash_prefix - flash_suffix;
   1316e:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   13172:	45aa      	cmp	sl, r5
		flash_suffix = size - flash_prefix - flash_middle;
   13174:	bfc8      	it	gt
   13176:	46aa      	movgt	sl, r5
   13178:	f003 0b03 	and.w	fp, r3, #3
   1317c:	bfc8      	it	gt
   1317e:	eba3 0b05 	subgt.w	fp, r3, r5
	if (flash_middle != 0) {
   13182:	f1ba 0f00 	cmp.w	sl, #0
   13186:	d015      	beq.n	131b4 <qspi_nor_read.constprop.0+0xb4>
		res = _nrfx_qspi_read(dptr + dest_prefix, flash_middle, addr + flash_prefix);
   13188:	19bb      	adds	r3, r7, r6
	return nrfx_qspi_read(p_rx_buffer, rx_buffer_length, src_address);
   1318a:	eb08 0204 	add.w	r2, r8, r4
   1318e:	4651      	mov	r1, sl
   13190:	4618      	mov	r0, r3
   13192:	9301      	str	r3, [sp, #4]
   13194:	f010 fd76 	bl	23c84 <nrfx_qspi_read>
   13198:	4605      	mov	r5, r0
		_qspi_wait_for_completion(dev, res);
   1319a:	f7ff fed3 	bl	12f44 <_qspi_wait_for_completion.constprop.0>
		if (res != NRFX_SUCCESS)
   1319e:	4a29      	ldr	r2, [pc, #164]	; (13244 <qspi_nor_read.constprop.0+0x144>)
   131a0:	4295      	cmp	r5, r2
   131a2:	d137      	bne.n	13214 <qspi_nor_read.constprop.0+0x114>
		if (flash_prefix != dest_prefix)
   131a4:	42b4      	cmp	r4, r6
   131a6:	d005      	beq.n	131b4 <qspi_nor_read.constprop.0+0xb4>
__ssp_bos_icheck3(memmove, void *, const void *)
   131a8:	9b01      	ldr	r3, [sp, #4]
   131aa:	4652      	mov	r2, sl
   131ac:	4619      	mov	r1, r3
   131ae:	1938      	adds	r0, r7, r4
   131b0:	f004 f892 	bl	172d8 <memmove>
	if (flash_prefix != 0) {
   131b4:	b1ac      	cbz	r4, 131e2 <qspi_nor_read.constprop.0+0xe2>
		res = _nrfx_qspi_read(buf, WORD_SIZE, addr - (WORD_SIZE - flash_prefix));
   131b6:	f1c4 0604 	rsb	r6, r4, #4
	return nrfx_qspi_read(p_rx_buffer, rx_buffer_length, src_address);
   131ba:	2104      	movs	r1, #4
   131bc:	eba8 0206 	sub.w	r2, r8, r6
   131c0:	a802      	add	r0, sp, #8
   131c2:	f010 fd5f 	bl	23c84 <nrfx_qspi_read>
   131c6:	4605      	mov	r5, r0
		_qspi_wait_for_completion(dev, res);
   131c8:	f7ff febc 	bl	12f44 <_qspi_wait_for_completion.constprop.0>
		if (res != NRFX_SUCCESS)
   131cc:	4b1d      	ldr	r3, [pc, #116]	; (13244 <qspi_nor_read.constprop.0+0x144>)
   131ce:	429d      	cmp	r5, r3
   131d0:	d120      	bne.n	13214 <qspi_nor_read.constprop.0+0x114>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   131d2:	f106 0308 	add.w	r3, r6, #8
   131d6:	4622      	mov	r2, r4
   131d8:	4638      	mov	r0, r7
   131da:	eb0d 0103 	add.w	r1, sp, r3
   131de:	f7ed fcb9 	bl	b54 <memcpy>
	if (flash_suffix != 0) {
   131e2:	f1bb 0f00 	cmp.w	fp, #0
   131e6:	d014      	beq.n	13212 <qspi_nor_read.constprop.0+0x112>
	return nrfx_qspi_read(p_rx_buffer, rx_buffer_length, src_address);
   131e8:	2108      	movs	r1, #8
		res = _nrfx_qspi_read(buf, WORD_SIZE * 2, addr + flash_prefix + flash_middle);
   131ea:	eb08 0204 	add.w	r2, r8, r4
	return nrfx_qspi_read(p_rx_buffer, rx_buffer_length, src_address);
   131ee:	4452      	add	r2, sl
   131f0:	eb0d 0001 	add.w	r0, sp, r1
   131f4:	f010 fd46 	bl	23c84 <nrfx_qspi_read>
   131f8:	4605      	mov	r5, r0
		_qspi_wait_for_completion(dev, res);
   131fa:	f7ff fea3 	bl	12f44 <_qspi_wait_for_completion.constprop.0>
		if (res != NRFX_SUCCESS)
   131fe:	4b11      	ldr	r3, [pc, #68]	; (13244 <qspi_nor_read.constprop.0+0x144>)
   13200:	429d      	cmp	r5, r3
   13202:	d107      	bne.n	13214 <qspi_nor_read.constprop.0+0x114>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   13204:	eb0a 0004 	add.w	r0, sl, r4
   13208:	465a      	mov	r2, fp
   1320a:	a902      	add	r1, sp, #8
   1320c:	4438      	add	r0, r7
   1320e:	f7ed fca1 	bl	b54 <memcpy>
	return res;
   13212:	4d0c      	ldr	r5, [pc, #48]	; (13244 <qspi_nor_read.constprop.0+0x144>)
	k_sem_give(&dev_data->sem);
   13214:	f8d9 0010 	ldr.w	r0, [r9, #16]
   13218:	3018      	adds	r0, #24
   1321a:	f010 fa76 	bl	2370a <k_sem_give>

	nrfx_err_t res = read_non_aligned(dev, addr, dest, size);

	qspi_unlock(dev);

	rc = qspi_get_zephyr_ret_code(res);
   1321e:	4628      	mov	r0, r5
   13220:	f7ff fe76 	bl	12f10 <qspi_get_zephyr_ret_code>
   13224:	4604      	mov	r4, r0

out:
	qspi_device_uninit(dev);
   13226:	4806      	ldr	r0, [pc, #24]	; (13240 <qspi_nor_read.constprop.0+0x140>)
   13228:	f7ff ff44 	bl	130b4 <qspi_device_uninit>
	return rc;
}
   1322c:	4620      	mov	r0, r4
   1322e:	b005      	add	sp, #20
   13230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   13234:	f06f 0415 	mvn.w	r4, #21
   13238:	e7f8      	b.n	1322c <qspi_nor_read.constprop.0+0x12c>
		return 0;
   1323a:	4614      	mov	r4, r2
   1323c:	e7f6      	b.n	1322c <qspi_nor_read.constprop.0+0x12c>
   1323e:	bf00      	nop
   13240:	20000964 	.word	0x20000964
   13244:	0bad0000 	.word	0x0bad0000

00013248 <_nrfx_qspi_init>:
{
   13248:	b508      	push	{r3, lr}
	nrfx_qspi_init(p_config, handler, p_context);
   1324a:	f001 fd19 	bl	14c80 <nrfx_qspi_init>
	p_reg->IFTIMING |= qspi_config->RDC4IO;
   1324e:	4b05      	ldr	r3, [pc, #20]	; (13264 <_nrfx_qspi_init+0x1c>)
   13250:	4a05      	ldr	r2, [pc, #20]	; (13268 <_nrfx_qspi_init+0x20>)
   13252:	681b      	ldr	r3, [r3, #0]
   13254:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   13258:	791b      	ldrb	r3, [r3, #4]
}
   1325a:	4804      	ldr	r0, [pc, #16]	; (1326c <_nrfx_qspi_init+0x24>)
	p_reg->IFTIMING |= qspi_config->RDC4IO;
   1325c:	430b      	orrs	r3, r1
   1325e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   13262:	bd08      	pop	{r3, pc}
   13264:	20004790 	.word	0x20004790
   13268:	5002b000 	.word	0x5002b000
   1326c:	0bad0000 	.word	0x0bad0000

00013270 <qspi_wait_while_rpu_awake>:

/* Wait until RDSR1 confirms RPU_AWAKE/RPU_READY */
int qspi_wait_while_rpu_awake(const struct device *dev)
{
	int ret;
	uint8_t val = 0;
   13270:	2300      	movs	r3, #0
{
   13272:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13274:	4605      	mov	r5, r0
	uint8_t val = 0;
   13276:	240a      	movs	r4, #10
   13278:	f88d 3007 	strb.w	r3, [sp, #7]

	for (int ii = 0; ii < 10; ii++) {
		ret = qspi_RDSR1(dev, &val);
   1327c:	4628      	mov	r0, r5
   1327e:	f10d 0107 	add.w	r1, sp, #7
   13282:	f010 fa97 	bl	237b4 <qspi_RDSR1>

		LOG_DBG("RDSR1 = 0x%x\n", val);

		if (!ret && (val & RPU_AWAKE_BIT)) {
   13286:	b918      	cbnz	r0, 13290 <qspi_wait_while_rpu_awake+0x20>
   13288:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1328c:	079a      	lsls	r2, r3, #30
   1328e:	d404      	bmi.n	1329a <qspi_wait_while_rpu_awake+0x2a>
			break;
		}

		k_msleep(1);
   13290:	2001      	movs	r0, #1
   13292:	f010 fa48 	bl	23726 <k_msleep.isra.0>
	for (int ii = 0; ii < 10; ii++) {
   13296:	3c01      	subs	r4, #1
   13298:	d1f0      	bne.n	1327c <qspi_wait_while_rpu_awake+0xc>
	}

	/* Configure DTS settings */
	if (val & RPU_AWAKE_BIT) {
   1329a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1329e:	0783      	lsls	r3, r0, #30
		/* Restore QSPI clock frequency from DTS */
		QSPIconfig.phy_if.sck_freq = qspi_dts_freq_to_sckfreq();
   132a0:	bf42      	ittt	mi
   132a2:	2203      	movmi	r2, #3
   132a4:	4b01      	ldrmi	r3, [pc, #4]	; (132ac <qspi_wait_while_rpu_awake+0x3c>)
   132a6:	745a      	strbmi	r2, [r3, #17]
	}

	return val;
}
   132a8:	b003      	add	sp, #12
   132aa:	bd30      	pop	{r4, r5, pc}
   132ac:	20004770 	.word	0x20004770

000132b0 <qspi_WRSR2>:

	return ret;
}

int qspi_WRSR2(const struct device *dev, uint8_t data)
{
   132b0:	b5b0      	push	{r4, r5, r7, lr}
   132b2:	b088      	sub	sp, #32
   132b4:	af00      	add	r7, sp, #0
	const struct qspi_buf tx_buf = {
   132b6:	1dfb      	adds	r3, r7, #7
		.buf = &data,
		.len = sizeof(data),
	};
	const struct qspi_cmd cmd = {
   132b8:	2201      	movs	r2, #1
	const struct qspi_buf tx_buf = {
   132ba:	60fb      	str	r3, [r7, #12]
	const struct qspi_cmd cmd = {
   132bc:	2300      	movs	r3, #0
   132be:	e9c7 2304 	strd	r2, r3, [r7, #16]
   132c2:	61fb      	str	r3, [r7, #28]
   132c4:	233f      	movs	r3, #63	; 0x3f
   132c6:	753b      	strb	r3, [r7, #20]
   132c8:	f107 030c 	add.w	r3, r7, #12
{
   132cc:	4605      	mov	r5, r0
   132ce:	71f9      	strb	r1, [r7, #7]
	const struct qspi_cmd cmd = {
   132d0:	61bb      	str	r3, [r7, #24]
		.op_code = 0x3f,
		.tx_buf = &tx_buf,
	};
	int ret = qspi_device_init(dev);
   132d2:	f7ff fe4f 	bl	12f74 <qspi_device_init>

	if (ret == 0)
   132d6:	4604      	mov	r4, r0
   132d8:	b930      	cbnz	r0, 132e8 <qspi_WRSR2+0x38>
		ret = qspi_send_cmd(dev, &cmd, false);
   132da:	4602      	mov	r2, r0
   132dc:	f107 0114 	add.w	r1, r7, #20
   132e0:	4628      	mov	r0, r5
   132e2:	f7ff fe7b 	bl	12fdc <qspi_send_cmd>
   132e6:	4604      	mov	r4, r0

	qspi_device_uninit(dev);
   132e8:	4628      	mov	r0, r5
   132ea:	f7ff fee3 	bl	130b4 <qspi_device_uninit>

	if (ret < 0)
   132ee:	2c00      	cmp	r4, #0
   132f0:	da0e      	bge.n	13310 <qspi_WRSR2+0x60>
		LOG_ERR("cmd_wakeup RPU failed %d\n", ret);
   132f2:	466d      	mov	r5, sp
   132f4:	b088      	sub	sp, #32
   132f6:	466a      	mov	r2, sp
   132f8:	4b07      	ldr	r3, [pc, #28]	; (13318 <qspi_WRSR2+0x68>)
   132fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   132fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13302:	2303      	movs	r3, #3
   13304:	4805      	ldr	r0, [pc, #20]	; (1331c <qspi_WRSR2+0x6c>)
   13306:	f842 3f10 	str.w	r3, [r2, #16]!
   1330a:	f010 fa00 	bl	2370e <z_log_msg_static_create.constprop.0>
   1330e:	46ad      	mov	sp, r5

	return ret;
}
   13310:	4620      	mov	r0, r4
   13312:	3720      	adds	r7, #32
   13314:	46bd      	mov	sp, r7
   13316:	bdb0      	pop	{r4, r5, r7, pc}
   13318:	0003666d 	.word	0x0003666d
   1331c:	00024d98 	.word	0x00024d98

00013320 <qspi_cmd_wakeup_rpu>:
int qspi_cmd_wakeup_rpu(const struct device *dev, uint8_t data)
{
	int ret;

	/* Waking RPU works reliably only with lowest frequency (8MHz) */
	QSPIconfig.phy_if.sck_freq = qspi_freq_mhz_to_sckfreq(8);
   13320:	220b      	movs	r2, #11
   13322:	4b02      	ldr	r3, [pc, #8]	; (1332c <qspi_cmd_wakeup_rpu+0xc>)
   13324:	745a      	strb	r2, [r3, #17]

	ret = qspi_WRSR2(dev, data);
   13326:	f7ff bfc3 	b.w	132b0 <qspi_WRSR2>
   1332a:	bf00      	nop
   1332c:	20004770 	.word	0x20004770

00013330 <qspi_init>:

	return 0;
}

int qspi_init(struct qspi_config *config)
{
   13330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13334:	b087      	sub	sp, #28
	unsigned int rc;

	qspi_config = config;
   13336:	4e5c      	ldr	r6, [pc, #368]	; (134a8 <qspi_init+0x178>)

	config->readoc = config->quad_spi ? NRF_QSPI_READOC_READ4IO : NRF_QSPI_READOC_FASTREAD;
   13338:	79c3      	ldrb	r3, [r0, #7]
{
   1333a:	af00      	add	r7, sp, #0
	qspi_config = config;
   1333c:	6030      	str	r0, [r6, #0]
	config->readoc = config->quad_spi ? NRF_QSPI_READOC_READ4IO : NRF_QSPI_READOC_FASTREAD;
   1333e:	2b00      	cmp	r3, #0
   13340:	d05d      	beq.n	133fe <qspi_init+0xce>
   13342:	2304      	movs	r3, #4
	config->writeoc = config->quad_spi ? NRF_QSPI_WRITEOC_PP4IO : NRF_QSPI_WRITEOC_PP;
   13344:	2203      	movs	r2, #3
   13346:	7043      	strb	r3, [r0, #1]

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   13348:	2500      	movs	r5, #0
   1334a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1334e:	7082      	strb	r2, [r0, #2]
	ret = pinctrl_lookup_state(config, id, &state);
   13350:	4629      	mov	r1, r5
   13352:	4856      	ldr	r0, [pc, #344]	; (134ac <qspi_init+0x17c>)
   13354:	f8c3 55b8 	str.w	r5, [r3, #1464]	; 0x5b8
   13358:	f107 020c 	add.w	r2, r7, #12
   1335c:	f00f fae6 	bl	2292c <pinctrl_lookup_state>
	if (ret < 0) {
   13360:	1e04      	subs	r4, r0, #0
   13362:	db41      	blt.n	133e8 <qspi_init+0xb8>
	return pinctrl_apply_state_direct(config, state);
   13364:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13366:	4a52      	ldr	r2, [pc, #328]	; (134b0 <qspi_init+0x180>)
   13368:	7919      	ldrb	r1, [r3, #4]
   1336a:	6818      	ldr	r0, [r3, #0]
   1336c:	f7fa fa70 	bl	d850 <pinctrl_configure_pins>
	if (ret < 0) {
   13370:	1e04      	subs	r4, r0, #0
   13372:	db39      	blt.n	133e8 <qspi_init+0xb8>
	initstruct->skip_gpio_cfg = true,
   13374:	f04f 0901 	mov.w	r9, #1
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority), nrfx_isr,
   13378:	462a      	mov	r2, r5
   1337a:	2101      	movs	r1, #1
   1337c:	202b      	movs	r0, #43	; 0x2b
   1337e:	f7f2 ff85 	bl	628c <z_arm_irq_priority_set>
		qspi_config->qspi_slave_latency = 1;
   13382:	6833      	ldr	r3, [r6, #0]
	initstruct->xip_offset = 0;
   13384:	f8df 812c 	ldr.w	r8, [pc, #300]	; 134b4 <qspi_init+0x184>
		qspi_config->qspi_slave_latency = 1;
   13388:	f883 9028 	strb.w	r9, [r3, #40]	; 0x28
		initstruct->prot_if.readoc = NRF_QSPI_READOC_READ4IO;
   1338c:	f44f 7341 	mov.w	r3, #772	; 0x304
   13390:	f8a8 300a 	strh.w	r3, [r8, #10]
	initstruct->phy_if.spi_mode = qspi_get_mode(DT_INST_PROP(0, cpol), DT_INST_PROP(0, cpha));
   13394:	f44f 7340 	mov.w	r3, #768	; 0x300
   13398:	f8a8 3010 	strh.w	r3, [r8, #16]
	nrfx_err_t res = _nrfx_qspi_init(&QSPIconfig, qspi_handler, dev_data);
   1339c:	4b46      	ldr	r3, [pc, #280]	; (134b8 <qspi_init+0x188>)
   1339e:	4640      	mov	r0, r8
   133a0:	691a      	ldr	r2, [r3, #16]
   133a2:	4946      	ldr	r1, [pc, #280]	; (134bc <qspi_init+0x18c>)
	initstruct->xip_offset = 0;
   133a4:	f8c8 5000 	str.w	r5, [r8]
	initstruct->skip_gpio_cfg = true,
   133a8:	f888 9013 	strb.w	r9, [r8, #19]
	initstruct->skip_psel_cfg = true,
   133ac:	f888 9014 	strb.w	r9, [r8, #20]
	initstruct->prot_if.addrmode = NRF_QSPI_ADDRMODE_24BIT;
   133b0:	f8c8 500c 	str.w	r5, [r8, #12]
	nrfx_err_t res = _nrfx_qspi_init(&QSPIconfig, qspi_handler, dev_data);
   133b4:	f7ff ff48 	bl	13248 <_nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   133b8:	f7ff fdaa 	bl	12f10 <qspi_get_zephyr_ret_code>
	if (ret == 0) {
   133bc:	4604      	mov	r4, r0
   133be:	b998      	cbnz	r0, 133e8 <qspi_init+0xb8>
		ret = qspi_rdsr(dev);
   133c0:	f7ff fe5a 	bl	13078 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   133c4:	1e05      	subs	r5, r0, #0
   133c6:	da1c      	bge.n	13402 <qspi_init+0xd2>
			LOG_ERR("RDSR failed: %d", ret);
   133c8:	466c      	mov	r4, sp
   133ca:	b088      	sub	sp, #32
   133cc:	466a      	mov	r2, sp
   133ce:	4b3c      	ldr	r3, [pc, #240]	; (134c0 <qspi_init+0x190>)
   133d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   133d4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   133d8:	2303      	movs	r3, #3
   133da:	483a      	ldr	r0, [pc, #232]	; (134c4 <qspi_init+0x194>)
   133dc:	f842 3f10 	str.w	r3, [r2, #16]!
   133e0:	f010 f995 	bl	2370e <z_log_msg_static_create.constprop.0>
   133e4:	46a5      	mov	sp, r4
			return ret;
   133e6:	462c      	mov	r4, r5

	rc = qspi_nor_init(&qspi_perip);

	k_sem_init(&qspi_config->lock, 1, 1);
   133e8:	6830      	ldr	r0, [r6, #0]
   133ea:	300c      	adds	r0, #12
	return z_impl_k_sem_init(sem, initial_count, limit);
   133ec:	2201      	movs	r2, #1
   133ee:	4611      	mov	r1, r2
   133f0:	f010 fe07 	bl	24002 <z_impl_k_sem_init>

	return rc;
}
   133f4:	4620      	mov	r0, r4
   133f6:	371c      	adds	r7, #28
   133f8:	46bd      	mov	sp, r7
   133fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	config->writeoc = config->quad_spi ? NRF_QSPI_WRITEOC_PP4IO : NRF_QSPI_WRITEOC_PP;
   133fe:	461a      	mov	r2, r3
   13400:	e7a1      	b.n	13346 <qspi_init+0x16>
	switch (lines) {
   13402:	f898 200b 	ldrb.w	r2, [r8, #11]
		uint8_t sr = (uint8_t)ret;
   13406:	b2eb      	uxtb	r3, r5
	switch (lines) {
   13408:	3a02      	subs	r2, #2
   1340a:	2a01      	cmp	r2, #1
		uint8_t sr = (uint8_t)ret;
   1340c:	70fb      	strb	r3, [r7, #3]
	switch (lines) {
   1340e:	d908      	bls.n	13422 <qspi_init+0xf2>
	switch (lines) {
   13410:	f898 500a 	ldrb.w	r5, [r8, #10]
   13414:	3d03      	subs	r5, #3
   13416:	2d01      	cmp	r5, #1
   13418:	bf8c      	ite	hi
   1341a:	f04f 0900 	movhi.w	r9, #0
   1341e:	f04f 0901 	movls.w	r9, #1
		if (qe_state != qe_value) {
   13422:	f3c3 1280 	ubfx	r2, r3, #6, #1
   13426:	4591      	cmp	r9, r2
   13428:	d01c      	beq.n	13464 <qspi_init+0x134>
			const struct qspi_buf sr_buf = {
   1342a:	1cfa      	adds	r2, r7, #3
			struct qspi_cmd cmd = {
   1342c:	2100      	movs	r1, #0
			const struct qspi_buf sr_buf = {
   1342e:	607a      	str	r2, [r7, #4]
			struct qspi_cmd cmd = {
   13430:	2201      	movs	r2, #1
   13432:	6179      	str	r1, [r7, #20]
   13434:	e9c7 2102 	strd	r2, r1, [r7, #8]
   13438:	1d39      	adds	r1, r7, #4
   1343a:	6139      	str	r1, [r7, #16]
			sr ^= qe_mask;
   1343c:	f083 0340 	eor.w	r3, r3, #64	; 0x40
			ret = qspi_send_cmd(dev, &cmd, true);
   13440:	481d      	ldr	r0, [pc, #116]	; (134b8 <qspi_init+0x188>)
			struct qspi_cmd cmd = {
   13442:	733a      	strb	r2, [r7, #12]
			ret = qspi_send_cmd(dev, &cmd, true);
   13444:	f107 010c 	add.w	r1, r7, #12
			sr ^= qe_mask;
   13448:	70fb      	strb	r3, [r7, #3]
			ret = qspi_send_cmd(dev, &cmd, true);
   1344a:	f7ff fdc7 	bl	12fdc <qspi_send_cmd>
			if (ret == 0)
   1344e:	f1b0 0800 	subs.w	r8, r0, #0
   13452:	d10b      	bne.n	1346c <qspi_init+0x13c>
		ret = qspi_rdsr(dev);
   13454:	f7ff fe10 	bl	13078 <qspi_rdsr.constprop.0>
	} while ((ret >= 0) && ((ret & SPI_NOR_WIP_BIT) != 0U));
   13458:	f1b0 0800 	subs.w	r8, r0, #0
   1345c:	db09      	blt.n	13472 <qspi_init+0x142>
   1345e:	f018 0f01 	tst.w	r8, #1
   13462:	d1f7      	bne.n	13454 <qspi_init+0x124>
	qspi_device_uninit(dev);
   13464:	4814      	ldr	r0, [pc, #80]	; (134b8 <qspi_init+0x188>)
   13466:	f7ff fe25 	bl	130b4 <qspi_device_uninit>
	return 0;
   1346a:	e7bd      	b.n	133e8 <qspi_init+0xb8>
		if (ret < 0)
   1346c:	db01      	blt.n	13472 <qspi_init+0x142>
	if (ret != 0)
   1346e:	4644      	mov	r4, r8
   13470:	e7ba      	b.n	133e8 <qspi_init+0xb8>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear", ret);
   13472:	4a15      	ldr	r2, [pc, #84]	; (134c8 <qspi_init+0x198>)
   13474:	4b15      	ldr	r3, [pc, #84]	; (134cc <qspi_init+0x19c>)
   13476:	466c      	mov	r4, sp
   13478:	b08a      	sub	sp, #40	; 0x28
   1347a:	f1b9 0f00 	cmp.w	r9, #0
   1347e:	bf18      	it	ne
   13480:	4613      	movne	r3, r2
   13482:	466a      	mov	r2, sp
   13484:	4912      	ldr	r1, [pc, #72]	; (134d0 <qspi_init+0x1a0>)
   13486:	f8c2 801c 	str.w	r8, [r2, #28]
   1348a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1348e:	f44f 7300 	mov.w	r3, #512	; 0x200
   13492:	8413      	strh	r3, [r2, #32]
   13494:	4b0f      	ldr	r3, [pc, #60]	; (134d4 <qspi_init+0x1a4>)
   13496:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1349a:	480a      	ldr	r0, [pc, #40]	; (134c4 <qspi_init+0x194>)
   1349c:	f842 3f10 	str.w	r3, [r2, #16]!
   134a0:	f010 f935 	bl	2370e <z_log_msg_static_create.constprop.0>
   134a4:	46a5      	mov	sp, r4
   134a6:	e7e2      	b.n	1346e <qspi_init+0x13e>
   134a8:	20004790 	.word	0x20004790
   134ac:	00031164 	.word	0x00031164
   134b0:	5002b000 	.word	0x5002b000
   134b4:	20004770 	.word	0x20004770
   134b8:	20000964 	.word	0x20000964
   134bc:	00012f2d 	.word	0x00012f2d
   134c0:	0003668d 	.word	0x0003668d
   134c4:	00024d98 	.word	0x00024d98
   134c8:	00032f49 	.word	0x00032f49
   134cc:	00036687 	.word	0x00036687
   134d0:	0003669d 	.word	0x0003669d
   134d4:	01000004 	.word	0x01000004

000134d8 <qspi_update_nonce>:

void qspi_update_nonce(unsigned int addr, int len, int hlread)
{
   134d8:	b510      	push	{r4, lr}
#if defined(CONFIG_SOC_SERIES_NRF53X)

	NRF_QSPI_Type *p_reg = NRF_QSPI;

	if (!qspi_config->encryption)
   134da:	4b0b      	ldr	r3, [pc, #44]	; (13508 <qspi_update_nonce+0x30>)
   134dc:	681b      	ldr	r3, [r3, #0]
   134de:	7a1b      	ldrb	r3, [r3, #8]
   134e0:	b18b      	cbz	r3, 13506 <qspi_update_nonce+0x2e>
		return;

	if (nonce_last_addr == 0 || hlread)
   134e2:	4c0a      	ldr	r4, [pc, #40]	; (1350c <qspi_update_nonce+0x34>)
   134e4:	6823      	ldr	r3, [r4, #0]
   134e6:	b103      	cbz	r3, 134ea <qspi_update_nonce+0x12>
   134e8:	b13a      	cbz	r2, 134fa <qspi_update_nonce+0x22>
		p_reg->DMA_ENC.NONCE2 = ++nonce_cnt;
	else if ((nonce_last_addr + 4) != addr)
		p_reg->DMA_ENC.NONCE2 = ++nonce_cnt;
   134ea:	4a09      	ldr	r2, [pc, #36]	; (13510 <qspi_update_nonce+0x38>)
   134ec:	6813      	ldr	r3, [r2, #0]
   134ee:	3301      	adds	r3, #1
   134f0:	6013      	str	r3, [r2, #0]
   134f2:	4a08      	ldr	r2, [pc, #32]	; (13514 <qspi_update_nonce+0x3c>)
   134f4:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   134f8:	e002      	b.n	13500 <qspi_update_nonce+0x28>
	else if ((nonce_last_addr + 4) != addr)
   134fa:	3304      	adds	r3, #4
   134fc:	4298      	cmp	r0, r3
   134fe:	d1f4      	bne.n	134ea <qspi_update_nonce+0x12>

	nonce_last_addr = addr + len - 4;
   13500:	4401      	add	r1, r0
   13502:	3904      	subs	r1, #4
   13504:	6021      	str	r1, [r4, #0]

#endif
}
   13506:	bd10      	pop	{r4, pc}
   13508:	20004790 	.word	0x20004790
   1350c:	2000478c 	.word	0x2000478c
   13510:	20004788 	.word	0x20004788
   13514:	5002b000 	.word	0x5002b000

00013518 <qspi_addr_check>:

void qspi_addr_check(unsigned int addr, const void *data, unsigned int len)
{
   13518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((addr % 4 != 0) || (((unsigned int)data) % 4 != 0) || (len % 4 != 0)) {
   1351a:	ea41 0400 	orr.w	r4, r1, r0
   1351e:	f002 0303 	and.w	r3, r2, #3
   13522:	4322      	orrs	r2, r4
   13524:	0792      	lsls	r2, r2, #30
{
   13526:	af00      	add	r7, sp, #0
	if ((addr % 4 != 0) || (((unsigned int)data) % 4 != 0) || (len % 4 != 0)) {
   13528:	f000 0603 	and.w	r6, r0, #3
   1352c:	f001 0503 	and.w	r5, r1, #3
   13530:	d023      	beq.n	1357a <qspi_addr_check+0x62>
		LOG_ERR("%s : Unaligned address %x %x %d %x %x\n", __func__, addr,
   13532:	466c      	mov	r4, sp
   13534:	b08e      	sub	sp, #56	; 0x38
   13536:	466a      	mov	r2, sp
   13538:	3e00      	subs	r6, #0
   1353a:	bf18      	it	ne
   1353c:	2601      	movne	r6, #1
   1353e:	3d00      	subs	r5, #0
   13540:	bf18      	it	ne
   13542:	2501      	movne	r5, #1
   13544:	3b00      	subs	r3, #0
   13546:	bf18      	it	ne
   13548:	2301      	movne	r3, #1
   1354a:	62d3      	str	r3, [r2, #44]	; 0x2c
   1354c:	f44f 7300 	mov.w	r3, #512	; 0x200
   13550:	f8df c02c 	ldr.w	ip, [pc, #44]	; 13580 <qspi_addr_check+0x68>
   13554:	8613      	strh	r3, [r2, #48]	; 0x30
   13556:	f8c2 c014 	str.w	ip, [r2, #20]
   1355a:	4b0a      	ldr	r3, [pc, #40]	; (13584 <qspi_addr_check+0x6c>)
   1355c:	f8df c028 	ldr.w	ip, [pc, #40]	; 13588 <qspi_addr_check+0x70>
   13560:	6211      	str	r1, [r2, #32]
   13562:	e9c2 c006 	strd	ip, r0, [r2, #24]
   13566:	6256      	str	r6, [r2, #36]	; 0x24
   13568:	6295      	str	r5, [r2, #40]	; 0x28
   1356a:	f244 4140 	movw	r1, #17472	; 0x4440
   1356e:	4807      	ldr	r0, [pc, #28]	; (1358c <qspi_addr_check+0x74>)
   13570:	f842 3f10 	str.w	r3, [r2, #16]!
   13574:	f010 f8cb 	bl	2370e <z_log_msg_static_create.constprop.0>
   13578:	46a5      	mov	sp, r4
		       (unsigned int)data, (addr % 4 != 0), (((unsigned int)data) % 4 != 0),
		       (len % 4 != 0));
	}
}
   1357a:	46bd      	mov	sp, r7
   1357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1357e:	bf00      	nop
   13580:	000366ae 	.word	0x000366ae
   13584:	01000008 	.word	0x01000008
   13588:	00036718 	.word	0x00036718
   1358c:	00024d98 	.word	0x00024d98

00013590 <qspi_write>:

int qspi_write(unsigned int addr, const void *data, int len)
{
   13590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13594:	4680      	mov	r8, r0
   13596:	4615      	mov	r5, r2
   13598:	4689      	mov	r9, r1
	int status;

	qspi_addr_check(addr, data, len);

	addr |= qspi_config->addrmask;
   1359a:	4e33      	ldr	r6, [pc, #204]	; (13668 <qspi_write+0xd8>)
	qspi_addr_check(addr, data, len);
   1359c:	f7ff ffbc 	bl	13518 <qspi_addr_check>
	addr |= qspi_config->addrmask;
   135a0:	6830      	ldr	r0, [r6, #0]

	k_sem_take(&qspi_config->lock, K_FOREVER);
   135a2:	f04f 32ff 	mov.w	r2, #4294967295
	addr |= qspi_config->addrmask;
   135a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	k_sem_take(&qspi_config->lock, K_FOREVER);
   135a8:	300c      	adds	r0, #12
	addr |= qspi_config->addrmask;
   135aa:	ea48 0803 	orr.w	r8, r8, r3
	k_sem_take(&qspi_config->lock, K_FOREVER);
   135ae:	f04f 33ff 	mov.w	r3, #4294967295
   135b2:	f010 f8af 	bl	23714 <k_sem_take.isra.0>

	qspi_update_nonce(addr, len, 0);
   135b6:	2200      	movs	r2, #0
   135b8:	4629      	mov	r1, r5
   135ba:	4640      	mov	r0, r8
   135bc:	f7ff ff8c 	bl	134d8 <qspi_update_nonce>
	if (!src)
   135c0:	f1b9 0f00 	cmp.w	r9, #0
   135c4:	d04d      	beq.n	13662 <qspi_write+0xd2>
	if ((size == 0) || ((size > 4) && ((size % 4U) != 0)))
   135c6:	2d00      	cmp	r5, #0
   135c8:	d04b      	beq.n	13662 <qspi_write+0xd2>
   135ca:	2d04      	cmp	r5, #4
   135cc:	d901      	bls.n	135d2 <qspi_write+0x42>
   135ce:	07ab      	lsls	r3, r5, #30
   135d0:	d147      	bne.n	13662 <qspi_write+0xd2>
	if ((addr % 4U) != 0)
   135d2:	f018 0f03 	tst.w	r8, #3
   135d6:	d144      	bne.n	13662 <qspi_write+0xd2>
	int rc = qspi_device_init(dev);
   135d8:	4f24      	ldr	r7, [pc, #144]	; (1366c <qspi_write+0xdc>)
   135da:	4638      	mov	r0, r7
   135dc:	f7ff fcca 	bl	12f74 <qspi_device_init>
	if (rc != 0)
   135e0:	4604      	mov	r4, r0
   135e2:	bb80      	cbnz	r0, 13646 <qspi_write+0xb6>
	k_sem_take(&dev_data->trans, K_FOREVER);
   135e4:	f04f 32ff 	mov.w	r2, #4294967295
   135e8:	f04f 33ff 	mov.w	r3, #4294967295
   135ec:	6938      	ldr	r0, [r7, #16]
   135ee:	f010 f891 	bl	23714 <k_sem_take.isra.0>
	qspi_lock(dev);
   135f2:	6938      	ldr	r0, [r7, #16]
   135f4:	f010 f890 	bl	23718 <qspi_lock.isra.0>
	if (size < 4U)
   135f8:	2d03      	cmp	r5, #3
	return nrfx_qspi_read(p_rx_buffer, rx_buffer_length, src_address);
   135fa:	4642      	mov	r2, r8
	if (size < 4U)
   135fc:	d82e      	bhi.n	1365c <qspi_write+0xcc>
	return nrfx_qspi_read(p_rx_buffer, rx_buffer_length, src_address);
   135fe:	2104      	movs	r1, #4
   13600:	eb0d 0001 	add.w	r0, sp, r1
   13604:	f010 fb3e 	bl	23c84 <nrfx_qspi_read>
   13608:	4604      	mov	r4, r0
	_qspi_wait_for_completion(dev, res);
   1360a:	f7ff fc9b 	bl	12f44 <_qspi_wait_for_completion.constprop.0>
	if (res == NRFX_SUCCESS) {
   1360e:	4b18      	ldr	r3, [pc, #96]	; (13670 <qspi_write+0xe0>)
   13610:	429c      	cmp	r4, r3
   13612:	d10d      	bne.n	13630 <qspi_write+0xa0>
		memcpy(buf, sptr, slen);
   13614:	462a      	mov	r2, r5
   13616:	4649      	mov	r1, r9
   13618:	a801      	add	r0, sp, #4
   1361a:	f7ed fa9b 	bl	b54 <memcpy>
	return nrfx_qspi_write(p_tx_buffer, tx_buffer_length, dst_address);
   1361e:	2104      	movs	r1, #4
   13620:	4642      	mov	r2, r8
   13622:	eb0d 0001 	add.w	r0, sp, r1
   13626:	f010 fb2a 	bl	23c7e <nrfx_qspi_write>
   1362a:	4604      	mov	r4, r0
		_qspi_wait_for_completion(dev, res);
   1362c:	f7ff fc8a 	bl	12f44 <_qspi_wait_for_completion.constprop.0>
	k_sem_give(&dev_data->sem);
   13630:	6938      	ldr	r0, [r7, #16]
   13632:	3018      	adds	r0, #24
   13634:	f010 f869 	bl	2370a <k_sem_give>
	k_sem_give(&dev_data->trans);
   13638:	6938      	ldr	r0, [r7, #16]
   1363a:	f010 f866 	bl	2370a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1363e:	4620      	mov	r0, r4
   13640:	f7ff fc66 	bl	12f10 <qspi_get_zephyr_ret_code>
   13644:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   13646:	4809      	ldr	r0, [pc, #36]	; (1366c <qspi_write+0xdc>)
   13648:	f7ff fd34 	bl	130b4 <qspi_device_uninit>

	status = qspi_nor_write(&qspi_perip, addr, data, len);

	k_sem_give(&qspi_config->lock);
   1364c:	6830      	ldr	r0, [r6, #0]
   1364e:	300c      	adds	r0, #12
   13650:	f010 f85b 	bl	2370a <k_sem_give>

	return status;
}
   13654:	4620      	mov	r0, r4
   13656:	b003      	add	sp, #12
   13658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nrfx_qspi_write(p_tx_buffer, tx_buffer_length, dst_address);
   1365c:	4629      	mov	r1, r5
   1365e:	4648      	mov	r0, r9
   13660:	e7e1      	b.n	13626 <qspi_write+0x96>
		return -EINVAL;
   13662:	f06f 0415 	mvn.w	r4, #21
   13666:	e7f1      	b.n	1364c <qspi_write+0xbc>
   13668:	20004790 	.word	0x20004790
   1366c:	20000964 	.word	0x20000964
   13670:	0bad0000 	.word	0x0bad0000

00013674 <qspi_read>:

int qspi_read(unsigned int addr, void *data, int len)
{
   13674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13676:	4604      	mov	r4, r0
   13678:	4615      	mov	r5, r2
   1367a:	460e      	mov	r6, r1
	int status;

	qspi_addr_check(addr, data, len);

	addr |= qspi_config->addrmask;
   1367c:	4f0e      	ldr	r7, [pc, #56]	; (136b8 <qspi_read+0x44>)
	qspi_addr_check(addr, data, len);
   1367e:	f7ff ff4b 	bl	13518 <qspi_addr_check>
	addr |= qspi_config->addrmask;
   13682:	6838      	ldr	r0, [r7, #0]

	k_sem_take(&qspi_config->lock, K_FOREVER);
   13684:	f04f 32ff 	mov.w	r2, #4294967295
	addr |= qspi_config->addrmask;
   13688:	6a43      	ldr	r3, [r0, #36]	; 0x24
	k_sem_take(&qspi_config->lock, K_FOREVER);
   1368a:	300c      	adds	r0, #12
	addr |= qspi_config->addrmask;
   1368c:	431c      	orrs	r4, r3
	k_sem_take(&qspi_config->lock, K_FOREVER);
   1368e:	f04f 33ff 	mov.w	r3, #4294967295
   13692:	f010 f83f 	bl	23714 <k_sem_take.isra.0>

	qspi_update_nonce(addr, len, 0);
   13696:	4629      	mov	r1, r5
   13698:	4620      	mov	r0, r4
   1369a:	2200      	movs	r2, #0
   1369c:	f7ff ff1c 	bl	134d8 <qspi_update_nonce>

	status = qspi_nor_read(&qspi_perip, addr, data, len);
   136a0:	462a      	mov	r2, r5
   136a2:	4631      	mov	r1, r6
   136a4:	f7ff fd2c 	bl	13100 <qspi_nor_read.constprop.0>
   136a8:	4604      	mov	r4, r0

	k_sem_give(&qspi_config->lock);
   136aa:	6838      	ldr	r0, [r7, #0]
   136ac:	300c      	adds	r0, #12
   136ae:	f010 f82c 	bl	2370a <k_sem_give>

	return status;
}
   136b2:	4620      	mov	r0, r4
   136b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   136b6:	bf00      	nop
   136b8:	20004790 	.word	0x20004790

000136bc <qspi_hl_readw>:

int qspi_hl_readw(unsigned int addr, void *data)
{
   136bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int status;
	uint8_t *rxb = NULL;
	uint32_t len = 4;

	len = len + (4 * qspi_config->qspi_slave_latency);
   136c0:	f04f 0a04 	mov.w	sl, #4
   136c4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 13768 <qspi_hl_readw+0xac>
{
   136c8:	4683      	mov	fp, r0
	len = len + (4 * qspi_config->qspi_slave_latency);
   136ca:	f8d8 3000 	ldr.w	r3, [r8]
{
   136ce:	af00      	add	r7, sp, #0
	len = len + (4 * qspi_config->qspi_slave_latency);
   136d0:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
{
   136d4:	460e      	mov	r6, r1
	len = len + (4 * qspi_config->qspi_slave_latency);
   136d6:	fb15 f90a 	smulbb	r9, r5, sl
   136da:	fb1a a505 	smlabb	r5, sl, r5, sl

	rxb = k_malloc(len);
   136de:	4628      	mov	r0, r5
   136e0:	f011 f8a7 	bl	24832 <k_malloc>

	if (rxb == NULL) {
   136e4:	4604      	mov	r4, r0
   136e6:	b9d8      	cbnz	r0, 13720 <qspi_hl_readw+0x64>
		LOG_ERR("%s: ERROR ENOMEM line %d\n", __func__, __LINE__);
   136e8:	466c      	mov	r4, sp
   136ea:	b08a      	sub	sp, #40	; 0x28
   136ec:	466a      	mov	r2, sp
   136ee:	4b1f      	ldr	r3, [pc, #124]	; (1376c <qspi_hl_readw+0xb0>)
   136f0:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   136f4:	6153      	str	r3, [r2, #20]
   136f6:	4b1e      	ldr	r3, [pc, #120]	; (13770 <qspi_hl_readw+0xb4>)
   136f8:	481e      	ldr	r0, [pc, #120]	; (13774 <qspi_hl_readw+0xb8>)
   136fa:	6193      	str	r3, [r2, #24]
   136fc:	f240 439b 	movw	r3, #1179	; 0x49b
   13700:	61d3      	str	r3, [r2, #28]
   13702:	f44f 7300 	mov.w	r3, #512	; 0x200
   13706:	8413      	strh	r3, [r2, #32]
   13708:	4b1b      	ldr	r3, [pc, #108]	; (13778 <qspi_hl_readw+0xbc>)
		return -ENOMEM;
   1370a:	f06f 050b 	mvn.w	r5, #11
		LOG_ERR("%s: ERROR ENOMEM line %d\n", __func__, __LINE__);
   1370e:	f842 3f10 	str.w	r3, [r2, #16]!
   13712:	f00f fffc 	bl	2370e <z_log_msg_static_create.constprop.0>
   13716:	46a5      	mov	sp, r4
	*(uint32_t *)data = *(uint32_t *)(rxb + (len - 4));

	k_free(rxb);

	return status;
}
   13718:	4628      	mov	r0, r5
   1371a:	46bd      	mov	sp, r7
   1371c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memset, void *, int)
   13720:	462a      	mov	r2, r5
   13722:	2100      	movs	r1, #0
   13724:	f003 fe58 	bl	173d8 <memset>
	k_sem_take(&qspi_config->lock, K_FOREVER);
   13728:	f8d8 0000 	ldr.w	r0, [r8]
   1372c:	f04f 33ff 	mov.w	r3, #4294967295
   13730:	f04f 32ff 	mov.w	r2, #4294967295
   13734:	300c      	adds	r0, #12
   13736:	f00f ffed 	bl	23714 <k_sem_take.isra.0>
	qspi_update_nonce(addr, 4, 1);
   1373a:	4651      	mov	r1, sl
   1373c:	4658      	mov	r0, fp
   1373e:	2201      	movs	r2, #1
   13740:	f7ff feca 	bl	134d8 <qspi_update_nonce>
	status = qspi_nor_read(&qspi_perip, addr, rxb, len);
   13744:	462a      	mov	r2, r5
   13746:	4621      	mov	r1, r4
   13748:	f7ff fcda 	bl	13100 <qspi_nor_read.constprop.0>
   1374c:	4605      	mov	r5, r0
	k_sem_give(&qspi_config->lock);
   1374e:	f8d8 0000 	ldr.w	r0, [r8]
   13752:	300c      	adds	r0, #12
   13754:	f00f ffd9 	bl	2370a <k_sem_give>
	*(uint32_t *)data = *(uint32_t *)(rxb + (len - 4));
   13758:	f854 3009 	ldr.w	r3, [r4, r9]
	k_free(rxb);
   1375c:	4620      	mov	r0, r4
	*(uint32_t *)data = *(uint32_t *)(rxb + (len - 4));
   1375e:	6033      	str	r3, [r6, #0]
	k_free(rxb);
   13760:	f011 f860 	bl	24824 <k_free>
	return status;
   13764:	e7d8      	b.n	13718 <qspi_hl_readw+0x5c>
   13766:	bf00      	nop
   13768:	20004790 	.word	0x20004790
   1376c:	000366d5 	.word	0x000366d5
   13770:	0003670a 	.word	0x0003670a
   13774:	00024d98 	.word	0x00024d98
   13778:	01000004 	.word	0x01000004

0001377c <qspi_cmd_sleep_rpu>:

	return 0;
}

int qspi_cmd_sleep_rpu(const struct device *dev)
{
   1377c:	b5b0      	push	{r4, r5, r7, lr}
   1377e:	b086      	sub	sp, #24
   13780:	af00      	add	r7, sp, #0
	uint8_t data = 0x0;

	/* printf("TODO : %s:\n", __func__); */
	const struct qspi_buf tx_buf = {
   13782:	1cfa      	adds	r2, r7, #3
	uint8_t data = 0x0;
   13784:	2300      	movs	r3, #0
	const struct qspi_buf tx_buf = {
   13786:	607a      	str	r2, [r7, #4]
   13788:	2201      	movs	r2, #1
	uint8_t data = 0x0;
   1378a:	70fb      	strb	r3, [r7, #3]
		.buf = &data,
		.len = sizeof(data),
	};

	const struct qspi_cmd cmd = {
   1378c:	e9c7 2302 	strd	r2, r3, [r7, #8]
   13790:	617b      	str	r3, [r7, #20]
   13792:	233f      	movs	r3, #63	; 0x3f
   13794:	733b      	strb	r3, [r7, #12]
   13796:	1d3b      	adds	r3, r7, #4
{
   13798:	4605      	mov	r5, r0
	const struct qspi_cmd cmd = {
   1379a:	613b      	str	r3, [r7, #16]
		.op_code = 0x3f, /* 0x3f, //WRSR2(0x3F) WakeUP RPU. */
		.tx_buf = &tx_buf,
	};

	int ret = qspi_device_init(dev);
   1379c:	f7ff fbea 	bl	12f74 <qspi_device_init>

	if (ret == 0) {
   137a0:	4604      	mov	r4, r0
   137a2:	b930      	cbnz	r0, 137b2 <qspi_cmd_sleep_rpu+0x36>
		ret = qspi_send_cmd(dev, &cmd, false);
   137a4:	4602      	mov	r2, r0
   137a6:	f107 010c 	add.w	r1, r7, #12
   137aa:	4628      	mov	r0, r5
   137ac:	f7ff fc16 	bl	12fdc <qspi_send_cmd>
   137b0:	4604      	mov	r4, r0
	}

	qspi_device_uninit(dev);
   137b2:	4628      	mov	r0, r5
   137b4:	f7ff fc7e 	bl	130b4 <qspi_device_uninit>

	if (ret < 0) {
   137b8:	2c00      	cmp	r4, #0
   137ba:	da0e      	bge.n	137da <qspi_cmd_sleep_rpu+0x5e>
		LOG_ERR("cmd_wakeup RPU failed: %d\n", ret);
   137bc:	466d      	mov	r5, sp
   137be:	b088      	sub	sp, #32
   137c0:	466a      	mov	r2, sp
   137c2:	4b08      	ldr	r3, [pc, #32]	; (137e4 <qspi_cmd_sleep_rpu+0x68>)
   137c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   137c8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   137cc:	2303      	movs	r3, #3
   137ce:	4806      	ldr	r0, [pc, #24]	; (137e8 <qspi_cmd_sleep_rpu+0x6c>)
   137d0:	f842 3f10 	str.w	r3, [r2, #16]!
   137d4:	f00f ff9b 	bl	2370e <z_log_msg_static_create.constprop.0>
   137d8:	46ad      	mov	sp, r5
	}

	return ret;
}
   137da:	4620      	mov	r0, r4
   137dc:	3718      	adds	r7, #24
   137de:	46bd      	mov	sp, r7
   137e0:	bdb0      	pop	{r4, r5, r7, pc}
   137e2:	bf00      	nop
   137e4:	000366ef 	.word	0x000366ef
   137e8:	00024d98 	.word	0x00024d98

000137ec <mbedtls_internal_md5_process>:
}

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
   137ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
        uint32_t X[16], A, B, C, D;
    } local;

    local.X[ 0] = MBEDTLS_GET_UINT32_LE( data,  0 );
    local.X[ 1] = MBEDTLS_GET_UINT32_LE( data,  4 );
   137f0:	684b      	ldr	r3, [r1, #4]
{
   137f2:	b0a1      	sub	sp, #132	; 0x84
    local.X[ 1] = MBEDTLS_GET_UINT32_LE( data,  4 );
   137f4:	9301      	str	r3, [sp, #4]
   137f6:	930d      	str	r3, [sp, #52]	; 0x34
    local.X[ 2] = MBEDTLS_GET_UINT32_LE( data,  8 );
   137f8:	688b      	ldr	r3, [r1, #8]
    local.X[ 0] = MBEDTLS_GET_UINT32_LE( data,  0 );
   137fa:	f8d1 9000 	ldr.w	r9, [r1]
    local.X[ 2] = MBEDTLS_GET_UINT32_LE( data,  8 );
   137fe:	9302      	str	r3, [sp, #8]
   13800:	930e      	str	r3, [sp, #56]	; 0x38
    local.X[ 3] = MBEDTLS_GET_UINT32_LE( data, 12 );
   13802:	68cb      	ldr	r3, [r1, #12]
    local.X[ 4] = MBEDTLS_GET_UINT32_LE( data, 16 );
    local.X[ 5] = MBEDTLS_GET_UINT32_LE( data, 20 );
   13804:	f8d1 c014 	ldr.w	ip, [r1, #20]
    local.X[ 3] = MBEDTLS_GET_UINT32_LE( data, 12 );
   13808:	9303      	str	r3, [sp, #12]
   1380a:	930f      	str	r3, [sp, #60]	; 0x3c
    local.X[ 4] = MBEDTLS_GET_UINT32_LE( data, 16 );
   1380c:	690b      	ldr	r3, [r1, #16]
    local.X[ 6] = MBEDTLS_GET_UINT32_LE( data, 24 );
    local.X[ 7] = MBEDTLS_GET_UINT32_LE( data, 28 );
   1380e:	f8d1 801c 	ldr.w	r8, [r1, #28]
    local.X[ 4] = MBEDTLS_GET_UINT32_LE( data, 16 );
   13812:	9304      	str	r3, [sp, #16]
   13814:	9310      	str	r3, [sp, #64]	; 0x40
    local.X[ 6] = MBEDTLS_GET_UINT32_LE( data, 24 );
   13816:	698b      	ldr	r3, [r1, #24]
    local.X[ 5] = MBEDTLS_GET_UINT32_LE( data, 20 );
   13818:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    local.X[ 6] = MBEDTLS_GET_UINT32_LE( data, 24 );
   1381c:	9305      	str	r3, [sp, #20]
   1381e:	9312      	str	r3, [sp, #72]	; 0x48
    local.X[ 8] = MBEDTLS_GET_UINT32_LE( data, 32 );
   13820:	6a0b      	ldr	r3, [r1, #32]
    local.X[ 0] = MBEDTLS_GET_UINT32_LE( data,  0 );
   13822:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    local.X[ 8] = MBEDTLS_GET_UINT32_LE( data, 32 );
   13826:	9306      	str	r3, [sp, #24]
   13828:	9314      	str	r3, [sp, #80]	; 0x50
    local.X[ 9] = MBEDTLS_GET_UINT32_LE( data, 36 );
   1382a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    local.X[ 7] = MBEDTLS_GET_UINT32_LE( data, 28 );
   1382c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    local.X[ 9] = MBEDTLS_GET_UINT32_LE( data, 36 );
   13830:	9307      	str	r3, [sp, #28]
   13832:	9315      	str	r3, [sp, #84]	; 0x54
    local.X[10] = MBEDTLS_GET_UINT32_LE( data, 40 );
   13834:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   13836:	9308      	str	r3, [sp, #32]
   13838:	9316      	str	r3, [sp, #88]	; 0x58
    local.X[11] = MBEDTLS_GET_UINT32_LE( data, 44 );
   1383a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   1383c:	9309      	str	r3, [sp, #36]	; 0x24
   1383e:	9317      	str	r3, [sp, #92]	; 0x5c
    local.X[12] = MBEDTLS_GET_UINT32_LE( data, 48 );
    local.X[13] = MBEDTLS_GET_UINT32_LE( data, 52 );
   13840:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    local.C = ctx->state[2];
    local.D = ctx->state[3];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
   13842:	6942      	ldr	r2, [r0, #20]
    local.X[13] = MBEDTLS_GET_UINT32_LE( data, 52 );
   13844:	930a      	str	r3, [sp, #40]	; 0x28
   13846:	9319      	str	r3, [sp, #100]	; 0x64
    local.X[15] = MBEDTLS_GET_UINT32_LE( data, 60 );
   13848:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    local.X[12] = MBEDTLS_GET_UINT32_LE( data, 48 );
   1384a:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    local.X[15] = MBEDTLS_GET_UINT32_LE( data, 60 );
   1384c:	930b      	str	r3, [sp, #44]	; 0x2c
   1384e:	931b      	str	r3, [sp, #108]	; 0x6c
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
   13850:	e9d0 b303 	ldrd	fp, r3, [r0, #12]
   13854:	ea83 0402 	eor.w	r4, r3, r2
   13858:	ea04 040b 	and.w	r4, r4, fp
   1385c:	4054      	eors	r4, r2
   1385e:	4be6      	ldr	r3, [pc, #920]	; (13bf8 <mbedtls_internal_md5_process+0x40c>)
   13860:	6882      	ldr	r2, [r0, #8]
    local.X[14] = MBEDTLS_GET_UINT32_LE( data, 56 );
   13862:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
   13866:	4413      	add	r3, r2
   13868:	444b      	add	r3, r9
   1386a:	441c      	add	r4, r3
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
   1386c:	6903      	ldr	r3, [r0, #16]
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
   1386e:	eb0b 6474 	add.w	r4, fp, r4, ror #25
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
   13872:	ea8b 0203 	eor.w	r2, fp, r3
   13876:	4022      	ands	r2, r4
   13878:	6941      	ldr	r1, [r0, #20]
   1387a:	405a      	eors	r2, r3
   1387c:	4bdf      	ldr	r3, [pc, #892]	; (13bfc <mbedtls_internal_md5_process+0x410>)
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
   1387e:	6905      	ldr	r5, [r0, #16]
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
   13880:	440b      	add	r3, r1
   13882:	9901      	ldr	r1, [sp, #4]
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
   13884:	f8dd a00c 	ldr.w	sl, [sp, #12]
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
   13888:	440b      	add	r3, r1
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
   1388a:	49dd      	ldr	r1, [pc, #884]	; (13c00 <mbedtls_internal_md5_process+0x414>)
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
   1388c:	441a      	add	r2, r3
   1388e:	eb04 5232 	add.w	r2, r4, r2, ror #20
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
   13892:	ea8b 0304 	eor.w	r3, fp, r4
   13896:	4429      	add	r1, r5
   13898:	9d02      	ldr	r5, [sp, #8]
   1389a:	4013      	ands	r3, r2
   1389c:	4429      	add	r1, r5
   1389e:	ea83 030b 	eor.w	r3, r3, fp
   138a2:	440b      	add	r3, r1
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
   138a4:	49d7      	ldr	r1, [pc, #860]	; (13c04 <mbedtls_internal_md5_process+0x418>)
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
   138a6:	eb02 33f3 	add.w	r3, r2, r3, ror #15
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
   138aa:	ea84 0502 	eor.w	r5, r4, r2
   138ae:	401d      	ands	r5, r3
   138b0:	4459      	add	r1, fp
   138b2:	4451      	add	r1, sl
   138b4:	4065      	eors	r5, r4
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
   138b6:	9e04      	ldr	r6, [sp, #16]
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
   138b8:	440d      	add	r5, r1
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
   138ba:	f8df a34c 	ldr.w	sl, [pc, #844]	; 13c08 <mbedtls_internal_md5_process+0x41c>
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
   138be:	eb03 25b5 	add.w	r5, r3, r5, ror #10
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
   138c2:	ea82 0103 	eor.w	r1, r2, r3
   138c6:	4029      	ands	r1, r5
   138c8:	44b2      	add	sl, r6
   138ca:	44a2      	add	sl, r4
   138cc:	4051      	eors	r1, r2
   138ce:	4451      	add	r1, sl
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
   138d0:	f8df a338 	ldr.w	sl, [pc, #824]	; 13c0c <mbedtls_internal_md5_process+0x420>
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
   138d4:	eb05 6171 	add.w	r1, r5, r1, ror #25
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
   138d8:	ea83 0405 	eor.w	r4, r3, r5
   138dc:	400c      	ands	r4, r1
   138de:	44e2      	add	sl, ip
   138e0:	4492      	add	sl, r2
   138e2:	405c      	eors	r4, r3
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
   138e4:	9e05      	ldr	r6, [sp, #20]
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
   138e6:	4454      	add	r4, sl
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
   138e8:	f8df a324 	ldr.w	sl, [pc, #804]	; 13c10 <mbedtls_internal_md5_process+0x424>
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
   138ec:	eb01 5434 	add.w	r4, r1, r4, ror #20
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
   138f0:	ea85 0201 	eor.w	r2, r5, r1
   138f4:	4022      	ands	r2, r4
   138f6:	44b2      	add	sl, r6
   138f8:	449a      	add	sl, r3
   138fa:	406a      	eors	r2, r5
   138fc:	4452      	add	r2, sl
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
   138fe:	f8df a314 	ldr.w	sl, [pc, #788]	; 13c14 <mbedtls_internal_md5_process+0x428>
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
   13902:	eb04 32f2 	add.w	r2, r4, r2, ror #15
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
   13906:	ea81 0304 	eor.w	r3, r1, r4
   1390a:	4013      	ands	r3, r2
   1390c:	44c2      	add	sl, r8
   1390e:	44aa      	add	sl, r5
   13910:	404b      	eors	r3, r1
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
   13912:	9e06      	ldr	r6, [sp, #24]
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
   13914:	4453      	add	r3, sl
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
   13916:	f8df a300 	ldr.w	sl, [pc, #768]	; 13c18 <mbedtls_internal_md5_process+0x42c>
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
   1391a:	eb02 23b3 	add.w	r3, r2, r3, ror #10
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
   1391e:	ea84 0502 	eor.w	r5, r4, r2
   13922:	401d      	ands	r5, r3
   13924:	44b2      	add	sl, r6
   13926:	448a      	add	sl, r1
   13928:	4065      	eors	r5, r4
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
   1392a:	9e07      	ldr	r6, [sp, #28]
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
   1392c:	4455      	add	r5, sl
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
   1392e:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 13c1c <mbedtls_internal_md5_process+0x430>
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
   13932:	eb03 6575 	add.w	r5, r3, r5, ror #25
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
   13936:	ea82 0103 	eor.w	r1, r2, r3
   1393a:	4029      	ands	r1, r5
   1393c:	44b2      	add	sl, r6
   1393e:	44a2      	add	sl, r4
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
   13940:	9e08      	ldr	r6, [sp, #32]
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
   13942:	4051      	eors	r1, r2
   13944:	4451      	add	r1, sl
   13946:	eb05 5131 	add.w	r1, r5, r1, ror #20
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
   1394a:	ea83 0405 	eor.w	r4, r3, r5
   1394e:	f5a6 4a24 	sub.w	sl, r6, #41984	; 0xa400
   13952:	400c      	ands	r4, r1
   13954:	f1aa 0a4f 	sub.w	sl, sl, #79	; 0x4f
   13958:	4492      	add	sl, r2
   1395a:	405c      	eors	r4, r3
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
   1395c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
   1395e:	4454      	add	r4, sl
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
   13960:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 13c20 <mbedtls_internal_md5_process+0x434>
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
   13964:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
   13968:	ea85 0201 	eor.w	r2, r5, r1
   1396c:	4022      	ands	r2, r4
   1396e:	44b2      	add	sl, r6
   13970:	449a      	add	sl, r3
   13972:	406a      	eors	r2, r5
   13974:	4452      	add	r2, sl
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
   13976:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 13c24 <mbedtls_internal_md5_process+0x438>
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
   1397a:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
   1397e:	ea81 0304 	eor.w	r3, r1, r4
   13982:	4013      	ands	r3, r2
   13984:	44ba      	add	sl, r7
   13986:	44aa      	add	sl, r5
   13988:	404b      	eors	r3, r1
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
   1398a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
   1398c:	4453      	add	r3, sl
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
   1398e:	4da6      	ldr	r5, [pc, #664]	; (13c28 <mbedtls_internal_md5_process+0x43c>)
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
   13990:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
   13994:	ea84 0a02 	eor.w	sl, r4, r2
   13998:	ea0a 0a03 	and.w	sl, sl, r3
   1399c:	4435      	add	r5, r6
   1399e:	440d      	add	r5, r1
   139a0:	ea8a 0a04 	eor.w	sl, sl, r4
   139a4:	44aa      	add	sl, r5
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
   139a6:	4da1      	ldr	r5, [pc, #644]	; (13c2c <mbedtls_internal_md5_process+0x440>)
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
   139a8:	eb03 5a3a 	add.w	sl, r3, sl, ror #20
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
   139ac:	ea82 0103 	eor.w	r1, r2, r3
   139b0:	ea01 010a 	and.w	r1, r1, sl
   139b4:	4475      	add	r5, lr
   139b6:	4425      	add	r5, r4
   139b8:	4051      	eors	r1, r2
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
   139ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
   139bc:	4429      	add	r1, r5
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
   139be:	4d9c      	ldr	r5, [pc, #624]	; (13c30 <mbedtls_internal_md5_process+0x444>)
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
   139c0:	eb0a 31f1 	add.w	r1, sl, r1, ror #15
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
   139c4:	ea83 040a 	eor.w	r4, r3, sl
   139c8:	400c      	ands	r4, r1
   139ca:	4435      	add	r5, r6
   139cc:	4415      	add	r5, r2
   139ce:	405c      	eors	r4, r3
   139d0:	442c      	add	r4, r5
   139d2:	eb01 24b4 	add.w	r4, r1, r4, ror #10

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
   139d6:	9e01      	ldr	r6, [sp, #4]
   139d8:	4a96      	ldr	r2, [pc, #600]	; (13c34 <mbedtls_internal_md5_process+0x448>)
   139da:	ea81 0504 	eor.w	r5, r1, r4
   139de:	ea05 050a 	and.w	r5, r5, sl
   139e2:	4432      	add	r2, r6
   139e4:	441a      	add	r2, r3
   139e6:	404d      	eors	r5, r1
   139e8:	4415      	add	r5, r2
   139ea:	eb04 65f5 	add.w	r5, r4, r5, ror #27
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
   139ee:	9e05      	ldr	r6, [sp, #20]
   139f0:	4b91      	ldr	r3, [pc, #580]	; (13c38 <mbedtls_internal_md5_process+0x44c>)
   139f2:	ea84 0205 	eor.w	r2, r4, r5
   139f6:	400a      	ands	r2, r1
   139f8:	4433      	add	r3, r6
   139fa:	4453      	add	r3, sl
   139fc:	4062      	eors	r2, r4
   139fe:	441a      	add	r2, r3
   13a00:	eb05 52f2 	add.w	r2, r5, r2, ror #23
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
   13a04:	9e09      	ldr	r6, [sp, #36]	; 0x24
   13a06:	f8df a234 	ldr.w	sl, [pc, #564]	; 13c3c <mbedtls_internal_md5_process+0x450>
   13a0a:	ea85 0302 	eor.w	r3, r5, r2
   13a0e:	4023      	ands	r3, r4
   13a10:	44b2      	add	sl, r6
   13a12:	448a      	add	sl, r1
   13a14:	406b      	eors	r3, r5
   13a16:	4453      	add	r3, sl
   13a18:	eb02 43b3 	add.w	r3, r2, r3, ror #18
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
   13a1c:	f8df a220 	ldr.w	sl, [pc, #544]	; 13c40 <mbedtls_internal_md5_process+0x454>
   13a20:	ea82 0103 	eor.w	r1, r2, r3
   13a24:	4029      	ands	r1, r5
   13a26:	44ca      	add	sl, r9
   13a28:	44a2      	add	sl, r4
   13a2a:	4051      	eors	r1, r2
   13a2c:	4451      	add	r1, sl
   13a2e:	eb03 3131 	add.w	r1, r3, r1, ror #12
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
   13a32:	f8df a210 	ldr.w	sl, [pc, #528]	; 13c44 <mbedtls_internal_md5_process+0x458>
   13a36:	ea83 0401 	eor.w	r4, r3, r1
   13a3a:	4014      	ands	r4, r2
   13a3c:	44e2      	add	sl, ip
   13a3e:	44aa      	add	sl, r5
   13a40:	405c      	eors	r4, r3
   13a42:	4454      	add	r4, sl
   13a44:	eb01 64f4 	add.w	r4, r1, r4, ror #27
    local.X[12] = MBEDTLS_GET_UINT32_LE( data, 48 );
   13a48:	9718      	str	r7, [sp, #96]	; 0x60
    local.X[14] = MBEDTLS_GET_UINT32_LE( data, 56 );
   13a4a:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
   13a4e:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 13c48 <mbedtls_internal_md5_process+0x45c>
   13a52:	9e08      	ldr	r6, [sp, #32]
   13a54:	ea81 0504 	eor.w	r5, r1, r4
   13a58:	401d      	ands	r5, r3
   13a5a:	44b2      	add	sl, r6
   13a5c:	4492      	add	sl, r2
   13a5e:	404d      	eors	r5, r1
   13a60:	4455      	add	r5, sl
   13a62:	eb04 55f5 	add.w	r5, r4, r5, ror #23
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
   13a66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13a68:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 13c4c <mbedtls_internal_md5_process+0x460>
   13a6c:	ea84 0205 	eor.w	r2, r4, r5
   13a70:	400a      	ands	r2, r1
   13a72:	44b2      	add	sl, r6
   13a74:	449a      	add	sl, r3
   13a76:	4062      	eors	r2, r4
   13a78:	4452      	add	r2, sl
   13a7a:	eb05 42b2 	add.w	r2, r5, r2, ror #18
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
   13a7e:	9e04      	ldr	r6, [sp, #16]
   13a80:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 13c50 <mbedtls_internal_md5_process+0x464>
   13a84:	ea85 0302 	eor.w	r3, r5, r2
   13a88:	4023      	ands	r3, r4
   13a8a:	44b2      	add	sl, r6
   13a8c:	448a      	add	sl, r1
   13a8e:	406b      	eors	r3, r5
   13a90:	4453      	add	r3, sl
   13a92:	eb02 3333 	add.w	r3, r2, r3, ror #12
    P( local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6 );
   13a96:	9e07      	ldr	r6, [sp, #28]
   13a98:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 13c54 <mbedtls_internal_md5_process+0x468>
   13a9c:	ea82 0103 	eor.w	r1, r2, r3
   13aa0:	4029      	ands	r1, r5
   13aa2:	44b2      	add	sl, r6
   13aa4:	44a2      	add	sl, r4
   13aa6:	4051      	eors	r1, r2
   13aa8:	4451      	add	r1, sl
   13aaa:	eb03 61f1 	add.w	r1, r3, r1, ror #27
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
   13aae:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 13c58 <mbedtls_internal_md5_process+0x46c>
   13ab2:	ea83 0401 	eor.w	r4, r3, r1
   13ab6:	4014      	ands	r4, r2
   13ab8:	44f2      	add	sl, lr
   13aba:	44aa      	add	sl, r5
   13abc:	405c      	eors	r4, r3
   13abe:	4454      	add	r4, sl
   13ac0:	eb01 54f4 	add.w	r4, r1, r4, ror #23
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
   13ac4:	9e03      	ldr	r6, [sp, #12]
   13ac6:	f8df a194 	ldr.w	sl, [pc, #404]	; 13c5c <mbedtls_internal_md5_process+0x470>
   13aca:	ea81 0504 	eor.w	r5, r1, r4
   13ace:	401d      	ands	r5, r3
   13ad0:	44b2      	add	sl, r6
   13ad2:	4492      	add	sl, r2
   13ad4:	404d      	eors	r5, r1
   13ad6:	4455      	add	r5, sl
   13ad8:	eb04 45b5 	add.w	r5, r4, r5, ror #18
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
   13adc:	9e06      	ldr	r6, [sp, #24]
   13ade:	f8df a180 	ldr.w	sl, [pc, #384]	; 13c60 <mbedtls_internal_md5_process+0x474>
   13ae2:	ea84 0205 	eor.w	r2, r4, r5
   13ae6:	400a      	ands	r2, r1
   13ae8:	44b2      	add	sl, r6
   13aea:	449a      	add	sl, r3
   13aec:	4062      	eors	r2, r4
   13aee:	4452      	add	r2, sl
   13af0:	eb05 3232 	add.w	r2, r5, r2, ror #12
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
   13af4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   13af6:	f8df a16c 	ldr.w	sl, [pc, #364]	; 13c64 <mbedtls_internal_md5_process+0x478>
   13afa:	ea85 0302 	eor.w	r3, r5, r2
   13afe:	4023      	ands	r3, r4
   13b00:	44b2      	add	sl, r6
   13b02:	448a      	add	sl, r1
   13b04:	406b      	eors	r3, r5
   13b06:	4453      	add	r3, sl
   13b08:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
   13b0c:	9e02      	ldr	r6, [sp, #8]
   13b0e:	f8df a158 	ldr.w	sl, [pc, #344]	; 13c68 <mbedtls_internal_md5_process+0x47c>
   13b12:	ea82 0103 	eor.w	r1, r2, r3
   13b16:	4029      	ands	r1, r5
   13b18:	44b2      	add	sl, r6
   13b1a:	44a2      	add	sl, r4
   13b1c:	4051      	eors	r1, r2
   13b1e:	4451      	add	r1, sl
   13b20:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
   13b24:	f8df a144 	ldr.w	sl, [pc, #324]	; 13c6c <mbedtls_internal_md5_process+0x480>
   13b28:	ea83 0401 	eor.w	r4, r3, r1
   13b2c:	4014      	ands	r4, r2
   13b2e:	44c2      	add	sl, r8
   13b30:	44aa      	add	sl, r5
   13b32:	405c      	eors	r4, r3
   13b34:	4454      	add	r4, sl
   13b36:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
   13b3a:	ea81 0504 	eor.w	r5, r1, r4
   13b3e:	462e      	mov	r6, r5
   13b40:	f8df a12c 	ldr.w	sl, [pc, #300]	; 13c70 <mbedtls_internal_md5_process+0x484>
   13b44:	401d      	ands	r5, r3
   13b46:	44ba      	add	sl, r7
   13b48:	4492      	add	sl, r2

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
   13b4a:	f5ac 22b8 	sub.w	r2, ip, #376832	; 0x5c000
   13b4e:	f2a2 62be 	subw	r2, r2, #1726	; 0x6be
   13b52:	441a      	add	r2, r3
   13b54:	4633      	mov	r3, r6
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
   13b56:	404d      	eors	r5, r1
   13b58:	4455      	add	r5, sl
   13b5a:	eb04 3535 	add.w	r5, r4, r5, ror #12
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
   13b5e:	9e06      	ldr	r6, [sp, #24]
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
   13b60:	406b      	eors	r3, r5
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
   13b62:	f8df a110 	ldr.w	sl, [pc, #272]	; 13c74 <mbedtls_internal_md5_process+0x488>
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
   13b66:	441a      	add	r2, r3
   13b68:	eb05 7332 	add.w	r3, r5, r2, ror #28
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
   13b6c:	44b2      	add	sl, r6
   13b6e:	ea84 0205 	eor.w	r2, r4, r5
   13b72:	405a      	eors	r2, r3
   13b74:	448a      	add	sl, r1
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
   13b76:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
   13b78:	eb02 010a 	add.w	r1, r2, sl
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
   13b7c:	4a3e      	ldr	r2, [pc, #248]	; (13c78 <mbedtls_internal_md5_process+0x48c>)
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
   13b7e:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
   13b82:	ea85 0a03 	eor.w	sl, r5, r3
   13b86:	4432      	add	r2, r6
   13b88:	4422      	add	r2, r4
   13b8a:	ea8a 0a01 	eor.w	sl, sl, r1
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
   13b8e:	4c3b      	ldr	r4, [pc, #236]	; (13c7c <mbedtls_internal_md5_process+0x490>)
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
   13b90:	4492      	add	sl, r2
   13b92:	eb01 4a3a 	add.w	sl, r1, sl, ror #16
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
   13b96:	ea83 0201 	eor.w	r2, r3, r1
   13b9a:	4474      	add	r4, lr
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
   13b9c:	9e01      	ldr	r6, [sp, #4]
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
   13b9e:	442c      	add	r4, r5
   13ba0:	ea82 020a 	eor.w	r2, r2, sl
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
   13ba4:	4d36      	ldr	r5, [pc, #216]	; (13c80 <mbedtls_internal_md5_process+0x494>)
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
   13ba6:	4422      	add	r2, r4
   13ba8:	eb0a 2272 	add.w	r2, sl, r2, ror #9
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
   13bac:	ea81 040a 	eor.w	r4, r1, sl
   13bb0:	4435      	add	r5, r6
   13bb2:	4054      	eors	r4, r2
   13bb4:	441d      	add	r5, r3
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
   13bb6:	9e04      	ldr	r6, [sp, #16]
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
   13bb8:	1963      	adds	r3, r4, r5
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
   13bba:	4c32      	ldr	r4, [pc, #200]	; (13c84 <mbedtls_internal_md5_process+0x498>)
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
   13bbc:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
   13bc0:	ea8a 0502 	eor.w	r5, sl, r2
   13bc4:	4434      	add	r4, r6
   13bc6:	440c      	add	r4, r1
   13bc8:	405d      	eors	r5, r3
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
   13bca:	492f      	ldr	r1, [pc, #188]	; (13c88 <mbedtls_internal_md5_process+0x49c>)
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
   13bcc:	4425      	add	r5, r4
   13bce:	eb03 5575 	add.w	r5, r3, r5, ror #21
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
   13bd2:	ea82 0403 	eor.w	r4, r2, r3
   13bd6:	4441      	add	r1, r8
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
   13bd8:	9e08      	ldr	r6, [sp, #32]
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
   13bda:	4451      	add	r1, sl
   13bdc:	406c      	eors	r4, r5
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
   13bde:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 13c8c <mbedtls_internal_md5_process+0x4a0>
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
   13be2:	440c      	add	r4, r1
   13be4:	eb05 4434 	add.w	r4, r5, r4, ror #16
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
   13be8:	ea83 0105 	eor.w	r1, r3, r5
   13bec:	44b2      	add	sl, r6
   13bee:	4492      	add	sl, r2
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
   13bf0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
   13bf2:	4061      	eors	r1, r4
   13bf4:	e04c      	b.n	13c90 <mbedtls_internal_md5_process+0x4a4>
   13bf6:	bf00      	nop
   13bf8:	d76aa478 	.word	0xd76aa478
   13bfc:	e8c7b756 	.word	0xe8c7b756
   13c00:	242070db 	.word	0x242070db
   13c04:	c1bdceee 	.word	0xc1bdceee
   13c08:	f57c0faf 	.word	0xf57c0faf
   13c0c:	4787c62a 	.word	0x4787c62a
   13c10:	a8304613 	.word	0xa8304613
   13c14:	fd469501 	.word	0xfd469501
   13c18:	698098d8 	.word	0x698098d8
   13c1c:	8b44f7af 	.word	0x8b44f7af
   13c20:	895cd7be 	.word	0x895cd7be
   13c24:	6b901122 	.word	0x6b901122
   13c28:	fd987193 	.word	0xfd987193
   13c2c:	a679438e 	.word	0xa679438e
   13c30:	49b40821 	.word	0x49b40821
   13c34:	f61e2562 	.word	0xf61e2562
   13c38:	c040b340 	.word	0xc040b340
   13c3c:	265e5a51 	.word	0x265e5a51
   13c40:	e9b6c7aa 	.word	0xe9b6c7aa
   13c44:	d62f105d 	.word	0xd62f105d
   13c48:	02441453 	.word	0x02441453
   13c4c:	d8a1e681 	.word	0xd8a1e681
   13c50:	e7d3fbc8 	.word	0xe7d3fbc8
   13c54:	21e1cde6 	.word	0x21e1cde6
   13c58:	c33707d6 	.word	0xc33707d6
   13c5c:	f4d50d87 	.word	0xf4d50d87
   13c60:	455a14ed 	.word	0x455a14ed
   13c64:	a9e3e905 	.word	0xa9e3e905
   13c68:	fcefa3f8 	.word	0xfcefa3f8
   13c6c:	676f02d9 	.word	0x676f02d9
   13c70:	8d2a4c8a 	.word	0x8d2a4c8a
   13c74:	8771f681 	.word	0x8771f681
   13c78:	6d9d6122 	.word	0x6d9d6122
   13c7c:	fde5380c 	.word	0xfde5380c
   13c80:	a4beea44 	.word	0xa4beea44
   13c84:	4bdecfa9 	.word	0x4bdecfa9
   13c88:	f6bb4b60 	.word	0xf6bb4b60
   13c8c:	bebfbc70 	.word	0xbebfbc70
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
   13c90:	4a85      	ldr	r2, [pc, #532]	; (13ea8 <mbedtls_internal_md5_process+0x6bc>)
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
   13c92:	4451      	add	r1, sl
   13c94:	eb04 2171 	add.w	r1, r4, r1, ror #9
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
   13c98:	ea85 0a04 	eor.w	sl, r5, r4
   13c9c:	4432      	add	r2, r6
   13c9e:	441a      	add	r2, r3
   13ca0:	ea8a 0a01 	eor.w	sl, sl, r1
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
   13ca4:	4b81      	ldr	r3, [pc, #516]	; (13eac <mbedtls_internal_md5_process+0x6c0>)
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
   13ca6:	4492      	add	sl, r2
   13ca8:	eb01 7a3a 	add.w	sl, r1, sl, ror #28
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
   13cac:	ea84 0201 	eor.w	r2, r4, r1
   13cb0:	444b      	add	r3, r9
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
   13cb2:	9e03      	ldr	r6, [sp, #12]
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
   13cb4:	442b      	add	r3, r5
   13cb6:	ea82 020a 	eor.w	r2, r2, sl
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
   13cba:	4d7d      	ldr	r5, [pc, #500]	; (13eb0 <mbedtls_internal_md5_process+0x6c4>)
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
   13cbc:	441a      	add	r2, r3
   13cbe:	eb0a 5272 	add.w	r2, sl, r2, ror #21
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
   13cc2:	ea81 030a 	eor.w	r3, r1, sl
   13cc6:	4435      	add	r5, r6
   13cc8:	4425      	add	r5, r4
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
   13cca:	9e05      	ldr	r6, [sp, #20]
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
   13ccc:	4053      	eors	r3, r2
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
   13cce:	4c79      	ldr	r4, [pc, #484]	; (13eb4 <mbedtls_internal_md5_process+0x6c8>)
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
   13cd0:	442b      	add	r3, r5
   13cd2:	eb02 4333 	add.w	r3, r2, r3, ror #16
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
   13cd6:	ea8a 0502 	eor.w	r5, sl, r2
   13cda:	4434      	add	r4, r6
   13cdc:	440c      	add	r4, r1
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
   13cde:	9e07      	ldr	r6, [sp, #28]
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
   13ce0:	405d      	eors	r5, r3
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
   13ce2:	4975      	ldr	r1, [pc, #468]	; (13eb8 <mbedtls_internal_md5_process+0x6cc>)
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
   13ce4:	4425      	add	r5, r4
   13ce6:	eb03 2575 	add.w	r5, r3, r5, ror #9
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
   13cea:	ea82 0403 	eor.w	r4, r2, r3
   13cee:	4431      	add	r1, r6
   13cf0:	4451      	add	r1, sl
   13cf2:	406c      	eors	r4, r5
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
   13cf4:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 13ebc <mbedtls_internal_md5_process+0x6d0>
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
   13cf8:	440c      	add	r4, r1
   13cfa:	eb05 7434 	add.w	r4, r5, r4, ror #28
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
   13cfe:	ea83 0105 	eor.w	r1, r3, r5
   13d02:	44ba      	add	sl, r7
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
   13d04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
   13d06:	4492      	add	sl, r2
   13d08:	4061      	eors	r1, r4
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
   13d0a:	4a6d      	ldr	r2, [pc, #436]	; (13ec0 <mbedtls_internal_md5_process+0x6d4>)
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
   13d0c:	4451      	add	r1, sl
   13d0e:	eb04 5171 	add.w	r1, r4, r1, ror #21
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
   13d12:	ea85 0a04 	eor.w	sl, r5, r4
   13d16:	4432      	add	r2, r6
   13d18:	441a      	add	r2, r3
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
   13d1a:	9e02      	ldr	r6, [sp, #8]
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
   13d1c:	ea8a 0a01 	eor.w	sl, sl, r1
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
   13d20:	4b68      	ldr	r3, [pc, #416]	; (13ec4 <mbedtls_internal_md5_process+0x6d8>)
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
   13d22:	4492      	add	sl, r2
   13d24:	eb01 4a3a 	add.w	sl, r1, sl, ror #16
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
   13d28:	ea84 0201 	eor.w	r2, r4, r1
   13d2c:	4433      	add	r3, r6
   13d2e:	442b      	add	r3, r5
   13d30:	ea82 020a 	eor.w	r2, r2, sl
   13d34:	441a      	add	r2, r3

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
   13d36:	4d64      	ldr	r5, [pc, #400]	; (13ec8 <mbedtls_internal_md5_process+0x6dc>)
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
   13d38:	eb0a 2272 	add.w	r2, sl, r2, ror #9
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
   13d3c:	ea62 0301 	orn	r3, r2, r1
   13d40:	444d      	add	r5, r9
   13d42:	4425      	add	r5, r4
   13d44:	ea83 030a 	eor.w	r3, r3, sl
   13d48:	442b      	add	r3, r5
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
   13d4a:	4d60      	ldr	r5, [pc, #384]	; (13ecc <mbedtls_internal_md5_process+0x6e0>)
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
   13d4c:	eb02 63b3 	add.w	r3, r2, r3, ror #26
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
   13d50:	ea63 040a 	orn	r4, r3, sl
   13d54:	4445      	add	r5, r8
   13d56:	440d      	add	r5, r1
   13d58:	4054      	eors	r4, r2
   13d5a:	442c      	add	r4, r5
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
   13d5c:	4d5c      	ldr	r5, [pc, #368]	; (13ed0 <mbedtls_internal_md5_process+0x6e4>)
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
   13d5e:	eb03 54b4 	add.w	r4, r3, r4, ror #22
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
   13d62:	ea64 0102 	orn	r1, r4, r2
   13d66:	4475      	add	r5, lr
   13d68:	4455      	add	r5, sl
   13d6a:	4059      	eors	r1, r3
   13d6c:	4429      	add	r1, r5
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
   13d6e:	f8df e164 	ldr.w	lr, [pc, #356]	; 13ed4 <mbedtls_internal_md5_process+0x6e8>
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
   13d72:	eb04 4171 	add.w	r1, r4, r1, ror #17
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
   13d76:	ea61 0503 	orn	r5, r1, r3
   13d7a:	44e6      	add	lr, ip
   13d7c:	4496      	add	lr, r2
   13d7e:	4065      	eors	r5, r4
   13d80:	4475      	add	r5, lr
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
   13d82:	f8df c154 	ldr.w	ip, [pc, #340]	; 13ed8 <mbedtls_internal_md5_process+0x6ec>
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
   13d86:	eb01 25f5 	add.w	r5, r1, r5, ror #11
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
   13d8a:	ea65 0204 	orn	r2, r5, r4
   13d8e:	44bc      	add	ip, r7
   13d90:	449c      	add	ip, r3
   13d92:	404a      	eors	r2, r1
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
   13d94:	9e03      	ldr	r6, [sp, #12]
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
   13d96:	4462      	add	r2, ip
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
   13d98:	4f50      	ldr	r7, [pc, #320]	; (13edc <mbedtls_internal_md5_process+0x6f0>)
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
   13d9a:	eb05 62b2 	add.w	r2, r5, r2, ror #26
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
   13d9e:	ea62 0301 	orn	r3, r2, r1
   13da2:	4437      	add	r7, r6
   13da4:	4427      	add	r7, r4
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
   13da6:	9e08      	ldr	r6, [sp, #32]
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
   13da8:	406b      	eors	r3, r5
   13daa:	443b      	add	r3, r7
   13dac:	eb02 53b3 	add.w	r3, r2, r3, ror #22
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
   13db0:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
   13db4:	ea63 0405 	orn	r4, r3, r5
   13db8:	f6a6 3683 	subw	r6, r6, #2947	; 0xb83
   13dbc:	440e      	add	r6, r1
   13dbe:	4054      	eors	r4, r2
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
   13dc0:	9f01      	ldr	r7, [sp, #4]
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
   13dc2:	4434      	add	r4, r6
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
   13dc4:	4e46      	ldr	r6, [pc, #280]	; (13ee0 <mbedtls_internal_md5_process+0x6f4>)
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
   13dc6:	eb03 4474 	add.w	r4, r3, r4, ror #17
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
   13dca:	ea64 0102 	orn	r1, r4, r2
   13dce:	443e      	add	r6, r7
   13dd0:	442e      	add	r6, r5
   13dd2:	4059      	eors	r1, r3
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
   13dd4:	9f06      	ldr	r7, [sp, #24]
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
   13dd6:	4431      	add	r1, r6
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
   13dd8:	4e42      	ldr	r6, [pc, #264]	; (13ee4 <mbedtls_internal_md5_process+0x6f8>)
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
   13dda:	eb04 21f1 	add.w	r1, r4, r1, ror #11
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
   13dde:	ea61 0503 	orn	r5, r1, r3
   13de2:	443e      	add	r6, r7
   13de4:	4416      	add	r6, r2
   13de6:	4065      	eors	r5, r4
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
   13de8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
   13dea:	4435      	add	r5, r6
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
   13dec:	4e3e      	ldr	r6, [pc, #248]	; (13ee8 <mbedtls_internal_md5_process+0x6fc>)
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
   13dee:	eb01 65b5 	add.w	r5, r1, r5, ror #26
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
   13df2:	ea65 0204 	orn	r2, r5, r4
   13df6:	443e      	add	r6, r7
   13df8:	441e      	add	r6, r3
   13dfa:	404a      	eors	r2, r1
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
   13dfc:	9f05      	ldr	r7, [sp, #20]
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
   13dfe:	4432      	add	r2, r6
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
   13e00:	4e3a      	ldr	r6, [pc, #232]	; (13eec <mbedtls_internal_md5_process+0x700>)
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
   13e02:	eb05 52b2 	add.w	r2, r5, r2, ror #22
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
   13e06:	ea62 0301 	orn	r3, r2, r1
   13e0a:	443e      	add	r6, r7
   13e0c:	4426      	add	r6, r4
   13e0e:	406b      	eors	r3, r5
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
   13e10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
   13e12:	4433      	add	r3, r6
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
   13e14:	4e36      	ldr	r6, [pc, #216]	; (13ef0 <mbedtls_internal_md5_process+0x704>)
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
   13e16:	eb02 4373 	add.w	r3, r2, r3, ror #17
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
   13e1a:	ea63 0405 	orn	r4, r3, r5
   13e1e:	443e      	add	r6, r7
   13e20:	440e      	add	r6, r1
   13e22:	4054      	eors	r4, r2
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
   13e24:	9f04      	ldr	r7, [sp, #16]
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
   13e26:	4434      	add	r4, r6
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
   13e28:	4e32      	ldr	r6, [pc, #200]	; (13ef4 <mbedtls_internal_md5_process+0x708>)
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
   13e2a:	eb03 24f4 	add.w	r4, r3, r4, ror #11
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
   13e2e:	ea64 0102 	orn	r1, r4, r2
   13e32:	443e      	add	r6, r7
   13e34:	442e      	add	r6, r5
   13e36:	4059      	eors	r1, r3
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
   13e38:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
   13e3a:	4431      	add	r1, r6
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
   13e3c:	4e2e      	ldr	r6, [pc, #184]	; (13ef8 <mbedtls_internal_md5_process+0x70c>)
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
   13e3e:	eb04 61b1 	add.w	r1, r4, r1, ror #26
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
   13e42:	ea61 0503 	orn	r5, r1, r3
   13e46:	443e      	add	r6, r7
   13e48:	4065      	eors	r5, r4
   13e4a:	4416      	add	r6, r2
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
   13e4c:	9f02      	ldr	r7, [sp, #8]
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
   13e4e:	19aa      	adds	r2, r5, r6
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
   13e50:	4e2a      	ldr	r6, [pc, #168]	; (13efc <mbedtls_internal_md5_process+0x710>)
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
   13e52:	eb01 52b2 	add.w	r2, r1, r2, ror #22
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
   13e56:	ea62 0504 	orn	r5, r2, r4
   13e5a:	443e      	add	r6, r7
   13e5c:	404d      	eors	r5, r1
   13e5e:	441e      	add	r6, r3
   13e60:	19ab      	adds	r3, r5, r6
   13e62:	eb02 4373 	add.w	r3, r2, r3, ror #17
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
   13e66:	911c      	str	r1, [sp, #112]	; 0x70
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
   13e68:	921f      	str	r2, [sp, #124]	; 0x7c
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
   13e6a:	931e      	str	r3, [sp, #120]	; 0x78
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
   13e6c:	4e24      	ldr	r6, [pc, #144]	; (13f00 <mbedtls_internal_md5_process+0x714>)
   13e6e:	9f07      	ldr	r7, [sp, #28]
   13e70:	ea63 0501 	orn	r5, r3, r1
   13e74:	443e      	add	r6, r7
   13e76:	4055      	eors	r5, r2
   13e78:	4426      	add	r6, r4
   13e7a:	19ac      	adds	r4, r5, r6

#undef F

    ctx->state[0] += local.A;
   13e7c:	6885      	ldr	r5, [r0, #8]
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
   13e7e:	eb03 24f4 	add.w	r4, r3, r4, ror #11
    ctx->state[0] += local.A;
   13e82:	4429      	add	r1, r5
   13e84:	6081      	str	r1, [r0, #8]
    ctx->state[1] += local.B;
    ctx->state[2] += local.C;
   13e86:	6901      	ldr	r1, [r0, #16]
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
   13e88:	941d      	str	r4, [sp, #116]	; 0x74
    ctx->state[2] += local.C;
   13e8a:	440b      	add	r3, r1
   13e8c:	6103      	str	r3, [r0, #16]
    ctx->state[3] += local.D;
   13e8e:	6943      	ldr	r3, [r0, #20]
    ctx->state[1] += local.B;
   13e90:	445c      	add	r4, fp
    ctx->state[3] += local.D;
   13e92:	441a      	add	r2, r3
    ctx->state[1] += local.B;
   13e94:	60c4      	str	r4, [r0, #12]
    ctx->state[3] += local.D;
   13e96:	6142      	str	r2, [r0, #20]

    /* Zeroise variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
   13e98:	2150      	movs	r1, #80	; 0x50
   13e9a:	a80c      	add	r0, sp, #48	; 0x30
   13e9c:	f007 ff06 	bl	1bcac <mbedtls_platform_zeroize>

    return( 0 );
}
   13ea0:	2000      	movs	r0, #0
   13ea2:	b021      	add	sp, #132	; 0x84
   13ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea8:	289b7ec6 	.word	0x289b7ec6
   13eac:	eaa127fa 	.word	0xeaa127fa
   13eb0:	d4ef3085 	.word	0xd4ef3085
   13eb4:	04881d05 	.word	0x04881d05
   13eb8:	d9d4d039 	.word	0xd9d4d039
   13ebc:	e6db99e5 	.word	0xe6db99e5
   13ec0:	1fa27cf8 	.word	0x1fa27cf8
   13ec4:	c4ac5665 	.word	0xc4ac5665
   13ec8:	f4292244 	.word	0xf4292244
   13ecc:	432aff97 	.word	0x432aff97
   13ed0:	ab9423a7 	.word	0xab9423a7
   13ed4:	fc93a039 	.word	0xfc93a039
   13ed8:	655b59c3 	.word	0x655b59c3
   13edc:	8f0ccc92 	.word	0x8f0ccc92
   13ee0:	85845dd1 	.word	0x85845dd1
   13ee4:	6fa87e4f 	.word	0x6fa87e4f
   13ee8:	fe2ce6e0 	.word	0xfe2ce6e0
   13eec:	a3014314 	.word	0xa3014314
   13ef0:	4e0811a1 	.word	0x4e0811a1
   13ef4:	f7537e82 	.word	0xf7537e82
   13ef8:	bd3af235 	.word	0xbd3af235
   13efc:	2ad7d2bb 	.word	0x2ad7d2bb
   13f00:	eb86d391 	.word	0xeb86d391

00013f04 <mbedtls_md5>:
 * output = MD5( input buffer )
 */
int mbedtls_md5( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[16] )
{
   13f04:	b570      	push	{r4, r5, r6, lr}
   13f06:	b096      	sub	sp, #88	; 0x58
   13f08:	4604      	mov	r4, r0
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
   13f0a:	4668      	mov	r0, sp
{
   13f0c:	460e      	mov	r6, r1
   13f0e:	4615      	mov	r5, r2
    mbedtls_md5_init( &ctx );
   13f10:	f00f fc8e 	bl	23830 <mbedtls_md5_init>
    ctx->total[0] = 0;
   13f14:	2300      	movs	r3, #0
    ctx->total[1] = 0;
   13f16:	e9cd 3300 	strd	r3, r3, [sp]
    ctx->state[0] = 0x67452301;
   13f1a:	4b11      	ldr	r3, [pc, #68]	; (13f60 <mbedtls_md5+0x5c>)

    if( ( ret = mbedtls_md5_starts( &ctx ) ) != 0 )
        goto exit;

    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
   13f1c:	4621      	mov	r1, r4
    ctx->state[0] = 0x67452301;
   13f1e:	9302      	str	r3, [sp, #8]
    ctx->state[1] = 0xEFCDAB89;
   13f20:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
   13f24:	9303      	str	r3, [sp, #12]
    ctx->state[2] = 0x98BADCFE;
   13f26:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
   13f2a:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
   13f2e:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
   13f32:	9304      	str	r3, [sp, #16]
    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
   13f34:	4632      	mov	r2, r6
    ctx->state[3] = 0x10325476;
   13f36:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
   13f3a:	4668      	mov	r0, sp
    ctx->state[3] = 0x10325476;
   13f3c:	9305      	str	r3, [sp, #20]
    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
   13f3e:	f00f fc7b 	bl	23838 <mbedtls_md5_update>
   13f42:	4604      	mov	r4, r0
   13f44:	b920      	cbnz	r0, 13f50 <mbedtls_md5+0x4c>
        goto exit;

    if( ( ret = mbedtls_md5_finish( &ctx, output ) ) != 0 )
   13f46:	4629      	mov	r1, r5
   13f48:	4668      	mov	r0, sp
   13f4a:	f00f fcae 	bl	238aa <mbedtls_md5_finish>
   13f4e:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
   13f50:	4668      	mov	r0, sp
   13f52:	2158      	movs	r1, #88	; 0x58
   13f54:	f007 feaa 	bl	1bcac <mbedtls_platform_zeroize>

exit:
    mbedtls_md5_free( &ctx );

    return( ret );
}
   13f58:	4620      	mov	r0, r4
   13f5a:	b016      	add	sp, #88	; 0x58
   13f5c:	bd70      	pop	{r4, r5, r6, pc}
   13f5e:	bf00      	nop
   13f60:	67452301 	.word	0x67452301

00013f64 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   13f64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13f68:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   13f6c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   13f70:	2a07      	cmp	r2, #7
   13f72:	d105      	bne.n	13f80 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
   13f74:	3b02      	subs	r3, #2
   13f76:	2b03      	cmp	r3, #3
   13f78:	d802      	bhi.n	13f80 <nrf53_errata_42+0x1c>
   13f7a:	4a02      	ldr	r2, [pc, #8]	; (13f84 <nrf53_errata_42+0x20>)
   13f7c:	5cd0      	ldrb	r0, [r2, r3]
   13f7e:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
   13f80:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
   13f82:	4770      	bx	lr
   13f84:	00036730 	.word	0x00036730

00013f88 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
   13f88:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
   13f8a:	f7ff ffeb 	bl	13f64 <nrf53_errata_42>
   13f8e:	b158      	cbz	r0, 13fa8 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
   13f90:	4b64      	ldr	r3, [pc, #400]	; (14124 <SystemInit+0x19c>)
   13f92:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
   13f96:	b93a      	cbnz	r2, 13fa8 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
   13f98:	210d      	movs	r1, #13
   13f9a:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
   13f9e:	2101      	movs	r1, #1
   13fa0:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
   13fa4:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
   13fa8:	2200      	movs	r2, #0
   13faa:	00d3      	lsls	r3, r2, #3
   13fac:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13fb0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   13fb4:	3101      	adds	r1, #1
   13fb6:	d007      	beq.n	13fc8 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   13fb8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13fbc:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   13fbe:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13fc2:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   13fc4:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13fc6:	d1f0      	bne.n	13faa <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
   13fc8:	f7ff ffcc 	bl	13f64 <nrf53_errata_42>
   13fcc:	2800      	cmp	r0, #0
   13fce:	f040 80a0 	bne.w	14112 <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
   13fd2:	f7ff ffc7 	bl	13f64 <nrf53_errata_42>
   13fd6:	b140      	cbz	r0, 13fea <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
   13fd8:	4b53      	ldr	r3, [pc, #332]	; (14128 <SystemInit+0x1a0>)
   13fda:	4a54      	ldr	r2, [pc, #336]	; (1412c <SystemInit+0x1a4>)
   13fdc:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
   13fe0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13fe4:	2201      	movs	r2, #1
   13fe6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   13fea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13fee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   13ff2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   13ff6:	2a07      	cmp	r2, #7
   13ff8:	d109      	bne.n	1400e <SystemInit+0x86>
                {
                    switch(var2)
   13ffa:	3b02      	subs	r3, #2
   13ffc:	2b03      	cmp	r3, #3
   13ffe:	d806      	bhi.n	1400e <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
   14000:	4a4b      	ldr	r2, [pc, #300]	; (14130 <SystemInit+0x1a8>)
   14002:	5cd3      	ldrb	r3, [r2, r3]
   14004:	b11b      	cbz	r3, 1400e <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
   14006:	2200      	movs	r2, #0
   14008:	4b4a      	ldr	r3, [pc, #296]	; (14134 <SystemInit+0x1ac>)
   1400a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
   1400e:	f7ff ffa9 	bl	13f64 <nrf53_errata_42>
   14012:	b150      	cbz	r0, 1402a <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
   14014:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14018:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1401c:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
   1401e:	bf42      	ittt	mi
   14020:	2200      	movmi	r2, #0
   14022:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
   14026:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1402a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1402e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   14032:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   14036:	2a07      	cmp	r2, #7
   14038:	d109      	bne.n	1404e <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
   1403a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1403e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14042:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
   14044:	bf44      	itt	mi
   14046:	f06f 0201 	mvnmi.w	r2, #1
   1404a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
   1404e:	f7ff ff89 	bl	13f64 <nrf53_errata_42>
   14052:	b118      	cbz	r0, 1405c <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
   14054:	2265      	movs	r2, #101	; 0x65
   14056:	4b33      	ldr	r3, [pc, #204]	; (14124 <SystemInit+0x19c>)
   14058:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1405c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14060:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   14064:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
   14068:	2a07      	cmp	r2, #7
   1406a:	d116      	bne.n	1409a <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
   1406c:	4b31      	ldr	r3, [pc, #196]	; (14134 <SystemInit+0x1ac>)
   1406e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
   14072:	2b00      	cmp	r3, #0
   14074:	da11      	bge.n	1409a <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
   14076:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1407a:	2203      	movs	r2, #3
   1407c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
   14080:	2201      	movs	r2, #1
   14082:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
   14084:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   14088:	2a00      	cmp	r2, #0
   1408a:	d0fb      	beq.n	14084 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
   1408c:	2200      	movs	r2, #0
   1408e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
   14092:	2201      	movs	r2, #1
   14094:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
   14096:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1409a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1409e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   140a2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   140a6:	2a07      	cmp	r2, #7
   140a8:	d123      	bne.n	140f2 <SystemInit+0x16a>
                {
                    switch(var2)
   140aa:	3b02      	subs	r3, #2
   140ac:	2b03      	cmp	r3, #3
   140ae:	d802      	bhi.n	140b6 <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
   140b0:	4a21      	ldr	r2, [pc, #132]	; (14138 <SystemInit+0x1b0>)
   140b2:	5cd3      	ldrb	r3, [r2, r3]
   140b4:	b1eb      	cbz	r3, 140f2 <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
   140b6:	227e      	movs	r2, #126	; 0x7e
   140b8:	4b1a      	ldr	r3, [pc, #104]	; (14124 <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
   140ba:	491b      	ldr	r1, [pc, #108]	; (14128 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
   140bc:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
   140c0:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
   140c4:	237f      	movs	r3, #127	; 0x7f
   140c6:	4a1d      	ldr	r2, [pc, #116]	; (1413c <SystemInit+0x1b4>)
   140c8:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
   140cc:	2300      	movs	r3, #0
   140ce:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
   140d2:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
   140d6:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
   140da:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
   140de:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
   140e2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
   140e6:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
   140ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   140ee:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
   140f2:	4a13      	ldr	r2, [pc, #76]	; (14140 <SystemInit+0x1b8>)
   140f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   140f8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   140fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
   14100:	4a10      	ldr	r2, [pc, #64]	; (14144 <SystemInit+0x1bc>)
   14102:	4b11      	ldr	r3, [pc, #68]	; (14148 <SystemInit+0x1c0>)
   14104:	6811      	ldr	r1, [r2, #0]
   14106:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
   1410a:	69d2      	ldr	r2, [r2, #28]
   1410c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   14110:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
   14112:	2229      	movs	r2, #41	; 0x29
   14114:	4b03      	ldr	r3, [pc, #12]	; (14124 <SystemInit+0x19c>)
   14116:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
   1411a:	2203      	movs	r2, #3
   1411c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
   14120:	e757      	b.n	13fd2 <SystemInit+0x4a>
   14122:	bf00      	nop
   14124:	50004000 	.word	0x50004000
   14128:	50039000 	.word	0x50039000
   1412c:	beef0044 	.word	0xbeef0044
   14130:	0003672c 	.word	0x0003672c
   14134:	50032000 	.word	0x50032000
   14138:	00036728 	.word	0x00036728
   1413c:	50002000 	.word	0x50002000
   14140:	e000ed00 	.word	0xe000ed00
   14144:	00ff8000 	.word	0x00ff8000
   14148:	50006000 	.word	0x50006000

0001414c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1414c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1414e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   14150:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   14152:	fab2 f382 	clz	r3, r2
   14156:	f1c3 031f 	rsb	r3, r3, #31
   1415a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1415c:	fa05 f403 	lsl.w	r4, r5, r3
   14160:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14164:	e8d0 6fef 	ldaex	r6, [r0]
   14168:	4296      	cmp	r6, r2
   1416a:	d104      	bne.n	14176 <nrfx_flag32_alloc+0x2a>
   1416c:	e8c0 4fec 	stlex	ip, r4, [r0]
   14170:	f1bc 0f00 	cmp.w	ip, #0
   14174:	d1f6      	bne.n	14164 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14176:	d1eb      	bne.n	14150 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   14178:	4801      	ldr	r0, [pc, #4]	; (14180 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1417a:	700b      	strb	r3, [r1, #0]
}
   1417c:	bd70      	pop	{r4, r5, r6, pc}
   1417e:	bf00      	nop
   14180:	0bad0000 	.word	0x0bad0000

00014184 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   14184:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   14186:	6803      	ldr	r3, [r0, #0]
   14188:	40cb      	lsrs	r3, r1
   1418a:	07db      	lsls	r3, r3, #31
   1418c:	d410      	bmi.n	141b0 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1418e:	2301      	movs	r3, #1
   14190:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   14192:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   14194:	ea43 0102 	orr.w	r1, r3, r2
   14198:	e8d0 4fef 	ldaex	r4, [r0]
   1419c:	4294      	cmp	r4, r2
   1419e:	d104      	bne.n	141aa <nrfx_flag32_free+0x26>
   141a0:	e8c0 1fec 	stlex	ip, r1, [r0]
   141a4:	f1bc 0f00 	cmp.w	ip, #0
   141a8:	d1f6      	bne.n	14198 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   141aa:	d1f2      	bne.n	14192 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   141ac:	4801      	ldr	r0, [pc, #4]	; (141b4 <nrfx_flag32_free+0x30>)
}
   141ae:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   141b0:	4801      	ldr	r0, [pc, #4]	; (141b8 <nrfx_flag32_free+0x34>)
   141b2:	e7fc      	b.n	141ae <nrfx_flag32_free+0x2a>
   141b4:	0bad0000 	.word	0x0bad0000
   141b8:	0bad0004 	.word	0x0bad0004

000141bc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   141bc:	4b04      	ldr	r3, [pc, #16]	; (141d0 <nrfx_clock_init+0x14>)
   141be:	791a      	ldrb	r2, [r3, #4]
   141c0:	b922      	cbnz	r2, 141cc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   141c2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   141c4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   141c6:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   141c8:	4802      	ldr	r0, [pc, #8]	; (141d4 <nrfx_clock_init+0x18>)
   141ca:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   141cc:	4802      	ldr	r0, [pc, #8]	; (141d8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   141ce:	4770      	bx	lr
   141d0:	20004794 	.word	0x20004794
   141d4:	0bad0000 	.word	0x0bad0000
   141d8:	0bad000c 	.word	0x0bad000c

000141dc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   141dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   141e0:	b510      	push	{r4, lr}
   141e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   141e6:	b152      	cbz	r2, 141fe <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   141e8:	2000      	movs	r0, #0
   141ea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   141ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   141f2:	2201      	movs	r2, #1
   141f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   141f8:	4b23      	ldr	r3, [pc, #140]	; (14288 <nrfx_power_clock_irq_handler+0xac>)
   141fa:	681b      	ldr	r3, [r3, #0]
   141fc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   141fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14202:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   14206:	b18a      	cbz	r2, 1422c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14208:	2200      	movs	r2, #0
   1420a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1420e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14212:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14216:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1421a:	f002 0203 	and.w	r2, r2, #3
   1421e:	2a01      	cmp	r2, #1
   14220:	f04f 0102 	mov.w	r1, #2
   14224:	d128      	bne.n	14278 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14226:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1422a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1422c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14230:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   14234:	b162      	cbz	r2, 14250 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14236:	2200      	movs	r2, #0
   14238:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1423c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   14240:	f44f 7280 	mov.w	r2, #256	; 0x100
   14244:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   14248:	4b0f      	ldr	r3, [pc, #60]	; (14288 <nrfx_power_clock_irq_handler+0xac>)
   1424a:	2004      	movs	r0, #4
   1424c:	681b      	ldr	r3, [r3, #0]
   1424e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14250:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14254:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   14258:	b1aa      	cbz	r2, 14286 <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1425a:	2200      	movs	r2, #0
   1425c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   14260:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   14264:	f44f 7200 	mov.w	r2, #512	; 0x200
   14268:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1426c:	4b06      	ldr	r3, [pc, #24]	; (14288 <nrfx_power_clock_irq_handler+0xac>)
   1426e:	2005      	movs	r0, #5
    }
#endif
}
   14270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   14274:	681b      	ldr	r3, [r3, #0]
   14276:	4718      	bx	r3
   14278:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1427c:	4b02      	ldr	r3, [pc, #8]	; (14288 <nrfx_power_clock_irq_handler+0xac>)
   1427e:	2001      	movs	r0, #1
   14280:	681b      	ldr	r3, [r3, #0]
   14282:	4798      	blx	r3
   14284:	e7d2      	b.n	1422c <nrfx_power_clock_irq_handler+0x50>
}
   14286:	bd10      	pop	{r4, pc}
   14288:	20004794 	.word	0x20004794

0001428c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1428c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1428e:	4801      	ldr	r0, [pc, #4]	; (14294 <nrfx_dppi_channel_alloc+0x8>)
   14290:	f7ff bf5c 	b.w	1414c <nrfx_flag32_alloc>
   14294:	200009e0 	.word	0x200009e0

00014298 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   14298:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1429a:	4a04      	ldr	r2, [pc, #16]	; (142ac <nrfx_dppi_channel_free+0x14>)
   1429c:	4083      	lsls	r3, r0
{
   1429e:	4601      	mov	r1, r0
   142a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   142a4:	4802      	ldr	r0, [pc, #8]	; (142b0 <nrfx_dppi_channel_free+0x18>)
   142a6:	f7ff bf6d 	b.w	14184 <nrfx_flag32_free>
   142aa:	bf00      	nop
   142ac:	50017000 	.word	0x50017000
   142b0:	200009e0 	.word	0x200009e0

000142b4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   142b4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   142b6:	f003 021f 	and.w	r2, r3, #31
   142ba:	6002      	str	r2, [r0, #0]
}
   142bc:	4a03      	ldr	r2, [pc, #12]	; (142cc <nrf_gpio_pin_port_decode+0x18>)
   142be:	4804      	ldr	r0, [pc, #16]	; (142d0 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   142c0:	095b      	lsrs	r3, r3, #5
}
   142c2:	2b01      	cmp	r3, #1
   142c4:	bf18      	it	ne
   142c6:	4610      	movne	r0, r2
   142c8:	4770      	bx	lr
   142ca:	bf00      	nop
   142cc:	50842500 	.word	0x50842500
   142d0:	50842800 	.word	0x50842800

000142d4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   142d4:	4b03      	ldr	r3, [pc, #12]	; (142e4 <pin_in_use_by_te+0x10>)
   142d6:	3008      	adds	r0, #8
   142d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   142dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   142e0:	4770      	bx	lr
   142e2:	bf00      	nop
   142e4:	200009e4 	.word	0x200009e4

000142e8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   142e8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   142ea:	4c0d      	ldr	r4, [pc, #52]	; (14320 <call_handler+0x38>)
   142ec:	f100 0308 	add.w	r3, r0, #8
   142f0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   142f4:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   142f6:	05da      	lsls	r2, r3, #23
{
   142f8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   142fa:	d507      	bpl.n	1430c <call_handler+0x24>
   142fc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   14300:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   14304:	6852      	ldr	r2, [r2, #4]
   14306:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1430a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1430c:	68a3      	ldr	r3, [r4, #8]
   1430e:	b12b      	cbz	r3, 1431c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14310:	4631      	mov	r1, r6
   14312:	4628      	mov	r0, r5
   14314:	68e2      	ldr	r2, [r4, #12]
    }
}
   14316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1431a:	4718      	bx	r3
}
   1431c:	bd70      	pop	{r4, r5, r6, pc}
   1431e:	bf00      	nop
   14320:	200009e4 	.word	0x200009e4

00014324 <release_handler>:
{
   14324:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14326:	4a12      	ldr	r2, [pc, #72]	; (14370 <release_handler+0x4c>)
   14328:	3008      	adds	r0, #8
   1432a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1432e:	05d9      	lsls	r1, r3, #23
   14330:	d51b      	bpl.n	1436a <release_handler+0x46>
   14332:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   14336:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1433a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1433e:	2000      	movs	r0, #0
   14340:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14344:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   14348:	f413 7f80 	tst.w	r3, #256	; 0x100
   1434c:	d003      	beq.n	14356 <release_handler+0x32>
   1434e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14352:	4299      	cmp	r1, r3
   14354:	d009      	beq.n	1436a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14356:	3001      	adds	r0, #1
   14358:	2830      	cmp	r0, #48	; 0x30
   1435a:	d1f3      	bne.n	14344 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1435c:	2300      	movs	r3, #0
   1435e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14362:	4804      	ldr	r0, [pc, #16]	; (14374 <release_handler+0x50>)
}
   14364:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14366:	f7ff bf0d 	b.w	14184 <nrfx_flag32_free>
}
   1436a:	bc10      	pop	{r4}
   1436c:	4770      	bx	lr
   1436e:	bf00      	nop
   14370:	200009e4 	.word	0x200009e4
   14374:	20000a58 	.word	0x20000a58

00014378 <pin_handler_trigger_uninit>:
{
   14378:	b538      	push	{r3, r4, r5, lr}
   1437a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1437c:	f7ff ffaa 	bl	142d4 <pin_in_use_by_te>
   14380:	4c0b      	ldr	r4, [pc, #44]	; (143b0 <pin_handler_trigger_uninit+0x38>)
   14382:	f102 0508 	add.w	r5, r2, #8
   14386:	b160      	cbz	r0, 143a2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   14388:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1438a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1438e:	0b5b      	lsrs	r3, r3, #13
   14390:	009b      	lsls	r3, r3, #2
   14392:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   14396:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   1439a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   1439e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   143a2:	4610      	mov	r0, r2
   143a4:	f7ff ffbe 	bl	14324 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   143a8:	2300      	movs	r3, #0
   143aa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   143ae:	bd38      	pop	{r3, r4, r5, pc}
   143b0:	200009e4 	.word	0x200009e4

000143b4 <nrfx_gpiote_input_configure>:
{
   143b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   143b8:	4604      	mov	r4, r0
   143ba:	4690      	mov	r8, r2
   143bc:	461d      	mov	r5, r3
    if (p_input_config)
   143be:	b301      	cbz	r1, 14402 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   143c0:	4e4f      	ldr	r6, [pc, #316]	; (14500 <nrfx_gpiote_input_configure+0x14c>)
   143c2:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   143c6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   143ca:	079b      	lsls	r3, r3, #30
   143cc:	d502      	bpl.n	143d4 <nrfx_gpiote_input_configure+0x20>
   143ce:	f7ff ff81 	bl	142d4 <pin_in_use_by_te>
   143d2:	bb28      	cbnz	r0, 14420 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   143d4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   143d6:	4620      	mov	r0, r4
   143d8:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   143dc:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   143e0:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   143e4:	f10d 020f 	add.w	r2, sp, #15
   143e8:	460b      	mov	r3, r1
   143ea:	f10d 010e 	add.w	r1, sp, #14
   143ee:	f00f fbeb 	bl	23bc8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   143f2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   143f6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   143fa:	f043 0301 	orr.w	r3, r3, #1
   143fe:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   14402:	f1b8 0f00 	cmp.w	r8, #0
   14406:	d02d      	beq.n	14464 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14408:	4e3d      	ldr	r6, [pc, #244]	; (14500 <nrfx_gpiote_input_configure+0x14c>)
   1440a:	f104 0708 	add.w	r7, r4, #8
   1440e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   14412:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   14416:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   14418:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   1441c:	d502      	bpl.n	14424 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   1441e:	b1cb      	cbz	r3, 14454 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   14420:	4838      	ldr	r0, [pc, #224]	; (14504 <nrfx_gpiote_input_configure+0x150>)
   14422:	e021      	b.n	14468 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14424:	f021 0120 	bic.w	r1, r1, #32
   14428:	04c9      	lsls	r1, r1, #19
   1442a:	0cc9      	lsrs	r1, r1, #19
   1442c:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   14430:	b183      	cbz	r3, 14454 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   14432:	2803      	cmp	r0, #3
   14434:	d8f4      	bhi.n	14420 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14436:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1443a:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1443e:	4662      	mov	r2, ip
   14440:	0092      	lsls	r2, r2, #2
   14442:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
   14446:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
   1444a:	b980      	cbnz	r0, 1446e <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   1444c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   14450:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14454:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   14458:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1445c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   14460:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   14464:	bb1d      	cbnz	r5, 144ae <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   14466:	4828      	ldr	r0, [pc, #160]	; (14508 <nrfx_gpiote_input_configure+0x154>)
}
   14468:	b004      	add	sp, #16
   1446a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1446e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14472:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   14476:	f023 0303 	bic.w	r3, r3, #3
   1447a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1447e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   14482:	f041 0120 	orr.w	r1, r1, #32
   14486:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1448a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1448e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14492:	0223      	lsls	r3, r4, #8
   14494:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   14498:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1449c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   144a0:	ea43 030e 	orr.w	r3, r3, lr
   144a4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   144a8:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   144ac:	e7d2      	b.n	14454 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   144ae:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   144b0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   144b4:	f7ff ff36 	bl	14324 <release_handler>
    if (!handler)
   144b8:	2e00      	cmp	r6, #0
   144ba:	d0d4      	beq.n	14466 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   144bc:	4d10      	ldr	r5, [pc, #64]	; (14500 <nrfx_gpiote_input_configure+0x14c>)
   144be:	e9d5 2300 	ldrd	r2, r3, [r5]
   144c2:	4296      	cmp	r6, r2
   144c4:	d101      	bne.n	144ca <nrfx_gpiote_input_configure+0x116>
   144c6:	429f      	cmp	r7, r3
   144c8:	d018      	beq.n	144fc <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   144ca:	4810      	ldr	r0, [pc, #64]	; (1450c <nrfx_gpiote_input_configure+0x158>)
   144cc:	f10d 010f 	add.w	r1, sp, #15
   144d0:	f7ff fe3c 	bl	1414c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   144d4:	4b0c      	ldr	r3, [pc, #48]	; (14508 <nrfx_gpiote_input_configure+0x154>)
   144d6:	4298      	cmp	r0, r3
   144d8:	d1c6      	bne.n	14468 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   144da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   144de:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   144e2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   144e4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   144e6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   144ea:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   144ee:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   144f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   144f6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   144fa:	e7b4      	b.n	14466 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   144fc:	2200      	movs	r2, #0
   144fe:	e7ee      	b.n	144de <nrfx_gpiote_input_configure+0x12a>
   14500:	200009e4 	.word	0x200009e4
   14504:	0bad0004 	.word	0x0bad0004
   14508:	0bad0000 	.word	0x0bad0000
   1450c:	20000a58 	.word	0x20000a58

00014510 <nrfx_gpiote_output_configure>:
{
   14510:	b5f0      	push	{r4, r5, r6, r7, lr}
   14512:	4604      	mov	r4, r0
   14514:	4615      	mov	r5, r2
   14516:	b085      	sub	sp, #20
    if (p_config)
   14518:	b319      	cbz	r1, 14562 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1451a:	4e34      	ldr	r6, [pc, #208]	; (145ec <nrfx_gpiote_output_configure+0xdc>)
   1451c:	f100 0708 	add.w	r7, r0, #8
   14520:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   14524:	0793      	lsls	r3, r2, #30
   14526:	d403      	bmi.n	14530 <nrfx_gpiote_output_configure+0x20>
   14528:	f7ff fed4 	bl	142d4 <pin_in_use_by_te>
   1452c:	2800      	cmp	r0, #0
   1452e:	d15a      	bne.n	145e6 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14530:	f012 0f1c 	tst.w	r2, #28
   14534:	d002      	beq.n	1453c <nrfx_gpiote_output_configure+0x2c>
   14536:	784b      	ldrb	r3, [r1, #1]
   14538:	2b01      	cmp	r3, #1
   1453a:	d054      	beq.n	145e6 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1453c:	2301      	movs	r3, #1
   1453e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   14542:	2300      	movs	r3, #0
   14544:	1c4a      	adds	r2, r1, #1
   14546:	e9cd 1300 	strd	r1, r3, [sp]
   1454a:	4620      	mov	r0, r4
   1454c:	1c8b      	adds	r3, r1, #2
   1454e:	f10d 010f 	add.w	r1, sp, #15
   14552:	f00f fb39 	bl	23bc8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   14556:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1455a:	f043 0303 	orr.w	r3, r3, #3
   1455e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   14562:	b915      	cbnz	r5, 1456a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   14564:	4822      	ldr	r0, [pc, #136]	; (145f0 <nrfx_gpiote_output_configure+0xe0>)
}
   14566:	b005      	add	sp, #20
   14568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1456a:	4e20      	ldr	r6, [pc, #128]	; (145ec <nrfx_gpiote_output_configure+0xdc>)
   1456c:	f104 0708 	add.w	r7, r4, #8
   14570:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   14574:	0783      	lsls	r3, r0, #30
   14576:	d536      	bpl.n	145e6 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   14578:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1457c:	2300      	movs	r3, #0
   1457e:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14580:	f020 0020 	bic.w	r0, r0, #32
   14584:	0089      	lsls	r1, r1, #2
   14586:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
   1458a:	04c0      	lsls	r0, r0, #19
   1458c:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
   14590:	0cc0      	lsrs	r0, r0, #19
   14592:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   14596:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1459a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1459e:	786a      	ldrb	r2, [r5, #1]
   145a0:	2a00      	cmp	r2, #0
   145a2:	d0df      	beq.n	14564 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   145a4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   145a8:	78ad      	ldrb	r5, [r5, #2]
   145aa:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   145ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   145b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   145b6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   145ba:	0223      	lsls	r3, r4, #8
   145bc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   145c0:	0412      	lsls	r2, r2, #16
   145c2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   145c6:	ea43 030e 	orr.w	r3, r3, lr
   145ca:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   145cc:	052a      	lsls	r2, r5, #20
   145ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   145d2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   145d6:	4313      	orrs	r3, r2
   145d8:	f040 0020 	orr.w	r0, r0, #32
   145dc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   145e0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   145e4:	e7be      	b.n	14564 <nrfx_gpiote_output_configure+0x54>
{
   145e6:	4803      	ldr	r0, [pc, #12]	; (145f4 <nrfx_gpiote_output_configure+0xe4>)
   145e8:	e7bd      	b.n	14566 <nrfx_gpiote_output_configure+0x56>
   145ea:	bf00      	nop
   145ec:	200009e4 	.word	0x200009e4
   145f0:	0bad0000 	.word	0x0bad0000
   145f4:	0bad0004 	.word	0x0bad0004

000145f8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   145f8:	4b01      	ldr	r3, [pc, #4]	; (14600 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   145fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   145fe:	4770      	bx	lr
   14600:	200009e4 	.word	0x200009e4

00014604 <nrfx_gpiote_channel_get>:
{
   14604:	b508      	push	{r3, lr}
   14606:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   14608:	f7ff fe64 	bl	142d4 <pin_in_use_by_te>
   1460c:	b138      	cbz	r0, 1461e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1460e:	4b05      	ldr	r3, [pc, #20]	; (14624 <nrfx_gpiote_channel_get+0x20>)
   14610:	3208      	adds	r2, #8
   14612:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   14616:	4804      	ldr	r0, [pc, #16]	; (14628 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14618:	0b5b      	lsrs	r3, r3, #13
   1461a:	700b      	strb	r3, [r1, #0]
}
   1461c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1461e:	4803      	ldr	r0, [pc, #12]	; (1462c <nrfx_gpiote_channel_get+0x28>)
   14620:	e7fc      	b.n	1461c <nrfx_gpiote_channel_get+0x18>
   14622:	bf00      	nop
   14624:	200009e4 	.word	0x200009e4
   14628:	0bad0000 	.word	0x0bad0000
   1462c:	0bad0004 	.word	0x0bad0004

00014630 <nrfx_gpiote_init>:
{
   14630:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14632:	4c0f      	ldr	r4, [pc, #60]	; (14670 <nrfx_gpiote_init+0x40>)
   14634:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   14638:	b9bd      	cbnz	r5, 1466a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1463a:	2260      	movs	r2, #96	; 0x60
   1463c:	4629      	mov	r1, r5
   1463e:	f104 0010 	add.w	r0, r4, #16
   14642:	f002 fec9 	bl	173d8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   14646:	200d      	movs	r0, #13
   14648:	f7f1 fdf0 	bl	622c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1464c:	4b09      	ldr	r3, [pc, #36]	; (14674 <nrfx_gpiote_init+0x44>)
    return err_code;
   1464e:	480a      	ldr	r0, [pc, #40]	; (14678 <nrfx_gpiote_init+0x48>)
   14650:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   14654:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   14658:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1465c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14660:	2301      	movs	r3, #1
   14662:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14666:	6763      	str	r3, [r4, #116]	; 0x74
}
   14668:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1466a:	4804      	ldr	r0, [pc, #16]	; (1467c <nrfx_gpiote_init+0x4c>)
   1466c:	e7fc      	b.n	14668 <nrfx_gpiote_init+0x38>
   1466e:	bf00      	nop
   14670:	200009e4 	.word	0x200009e4
   14674:	5000d000 	.word	0x5000d000
   14678:	0bad0000 	.word	0x0bad0000
   1467c:	0bad0005 	.word	0x0bad0005

00014680 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14680:	4b03      	ldr	r3, [pc, #12]	; (14690 <nrfx_gpiote_is_init+0x10>)
   14682:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   14686:	3800      	subs	r0, #0
   14688:	bf18      	it	ne
   1468a:	2001      	movne	r0, #1
   1468c:	4770      	bx	lr
   1468e:	bf00      	nop
   14690:	200009e4 	.word	0x200009e4

00014694 <nrfx_gpiote_channel_free>:
{
   14694:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14696:	4801      	ldr	r0, [pc, #4]	; (1469c <nrfx_gpiote_channel_free+0x8>)
   14698:	f7ff bd74 	b.w	14184 <nrfx_flag32_free>
   1469c:	20000a54 	.word	0x20000a54

000146a0 <nrfx_gpiote_channel_alloc>:
{
   146a0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   146a2:	4801      	ldr	r0, [pc, #4]	; (146a8 <nrfx_gpiote_channel_alloc+0x8>)
   146a4:	f7ff bd52 	b.w	1414c <nrfx_flag32_alloc>
   146a8:	20000a54 	.word	0x20000a54

000146ac <nrfx_gpiote_trigger_enable>:
{
   146ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   146ae:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   146b0:	f7ff fe10 	bl	142d4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   146b4:	4b1e      	ldr	r3, [pc, #120]	; (14730 <nrfx_gpiote_trigger_enable+0x84>)
   146b6:	f104 0208 	add.w	r2, r4, #8
   146ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   146be:	b1e8      	cbz	r0, 146fc <nrfx_gpiote_trigger_enable+0x50>
   146c0:	f013 0502 	ands.w	r5, r3, #2
   146c4:	d11a      	bne.n	146fc <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   146c6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   146c8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   146ca:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
   146ce:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
   146d2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   146d6:	6005      	str	r5, [r0, #0]
   146d8:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
   146dc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   146de:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   146e2:	f040 0001 	orr.w	r0, r0, #1
   146e6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   146ea:	b129      	cbz	r1, 146f8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   146ec:	2201      	movs	r2, #1
   146ee:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   146f2:	4a10      	ldr	r2, [pc, #64]	; (14734 <nrfx_gpiote_trigger_enable+0x88>)
   146f4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   146f8:	b003      	add	sp, #12
   146fa:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   146fc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   14700:	2b04      	cmp	r3, #4
   14702:	d011      	beq.n	14728 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   14704:	2b05      	cmp	r3, #5
   14706:	d011      	beq.n	1472c <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14708:	a801      	add	r0, sp, #4
   1470a:	9401      	str	r4, [sp, #4]
   1470c:	f7ff fdd2 	bl	142b4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   14710:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   14712:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   14714:	40d9      	lsrs	r1, r3
   14716:	f001 0101 	and.w	r1, r1, #1
   1471a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1471c:	4620      	mov	r0, r4
}
   1471e:	b003      	add	sp, #12
   14720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   14724:	f00f ba99 	b.w	23c5a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   14728:	2103      	movs	r1, #3
   1472a:	e7f7      	b.n	1471c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1472c:	2102      	movs	r1, #2
   1472e:	e7f5      	b.n	1471c <nrfx_gpiote_trigger_enable+0x70>
   14730:	200009e4 	.word	0x200009e4
   14734:	5000d000 	.word	0x5000d000

00014738 <nrfx_gpiote_trigger_disable>:
{
   14738:	b508      	push	{r3, lr}
   1473a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1473c:	f7ff fdca 	bl	142d4 <pin_in_use_by_te>
   14740:	b1c0      	cbz	r0, 14774 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14742:	4b0f      	ldr	r3, [pc, #60]	; (14780 <nrfx_gpiote_trigger_disable+0x48>)
   14744:	f102 0108 	add.w	r1, r2, #8
   14748:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1474c:	0799      	lsls	r1, r3, #30
   1474e:	d411      	bmi.n	14774 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   14750:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14752:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   14754:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   14756:	490b      	ldr	r1, [pc, #44]	; (14784 <nrfx_gpiote_trigger_disable+0x4c>)
   14758:	009b      	lsls	r3, r3, #2
   1475a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   1475e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14762:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   14766:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1476a:	f022 0203 	bic.w	r2, r2, #3
   1476e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   14772:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   14774:	2100      	movs	r1, #0
}
   14776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1477a:	4610      	mov	r0, r2
   1477c:	f00f ba6d 	b.w	23c5a <nrf_gpio_cfg_sense_set>
   14780:	200009e4 	.word	0x200009e4
   14784:	5000d000 	.word	0x5000d000

00014788 <nrfx_gpiote_pin_uninit>:
{
   14788:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1478a:	4b10      	ldr	r3, [pc, #64]	; (147cc <nrfx_gpiote_pin_uninit+0x44>)
   1478c:	f100 0208 	add.w	r2, r0, #8
   14790:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   14794:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   14796:	07db      	lsls	r3, r3, #31
   14798:	d516      	bpl.n	147c8 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1479a:	f7ff ffcd 	bl	14738 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1479e:	4620      	mov	r0, r4
   147a0:	f7ff fdea 	bl	14378 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   147a4:	a801      	add	r0, sp, #4
   147a6:	9401      	str	r4, [sp, #4]
   147a8:	f7ff fd84 	bl	142b4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   147ac:	9b01      	ldr	r3, [sp, #4]
   147ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   147b2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   147b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   147ba:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   147be:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   147c2:	4803      	ldr	r0, [pc, #12]	; (147d0 <nrfx_gpiote_pin_uninit+0x48>)
}
   147c4:	b002      	add	sp, #8
   147c6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   147c8:	4802      	ldr	r0, [pc, #8]	; (147d4 <nrfx_gpiote_pin_uninit+0x4c>)
   147ca:	e7fb      	b.n	147c4 <nrfx_gpiote_pin_uninit+0x3c>
   147cc:	200009e4 	.word	0x200009e4
   147d0:	0bad0000 	.word	0x0bad0000
   147d4:	0bad0004 	.word	0x0bad0004

000147d8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   147d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   147dc:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   147de:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   147e0:	4634      	mov	r4, r6
{
   147e2:	4b63      	ldr	r3, [pc, #396]	; (14970 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   147e4:	4863      	ldr	r0, [pc, #396]	; (14974 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   147e6:	4964      	ldr	r1, [pc, #400]	; (14978 <nrfx_gpiote_irq_handler+0x1a0>)
{
   147e8:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   147ea:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   147ec:	b135      	cbz	r5, 147fc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   147ee:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   147f2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   147f4:	bf1e      	ittt	ne
   147f6:	601c      	strne	r4, [r3, #0]
   147f8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   147fa:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   147fc:	3304      	adds	r3, #4
   147fe:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   14800:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   14804:	d1f1      	bne.n	147ea <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14806:	f8df a16c 	ldr.w	sl, [pc, #364]	; 14974 <nrfx_gpiote_irq_handler+0x19c>
   1480a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1480e:	2b00      	cmp	r3, #0
   14810:	f000 8091 	beq.w	14936 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   14814:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1497c <nrfx_gpiote_irq_handler+0x1a4>
   14818:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1481c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1481e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   14822:	4b57      	ldr	r3, [pc, #348]	; (14980 <nrfx_gpiote_irq_handler+0x1a8>)
   14824:	6a1a      	ldr	r2, [r3, #32]
   14826:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   14828:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1482a:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1482e:	f10d 0b10 	add.w	fp, sp, #16
   14832:	ea4f 1349 	mov.w	r3, r9, lsl #5
   14836:	9300      	str	r3, [sp, #0]
   14838:	e048      	b.n	148cc <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   1483a:	fa94 f4a4 	rbit	r4, r4
   1483e:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   14842:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14844:	4a4f      	ldr	r2, [pc, #316]	; (14984 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   14846:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14848:	f104 0308 	add.w	r3, r4, #8
   1484c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   14850:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   14852:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   14854:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   14858:	fa03 f202 	lsl.w	r2, r3, r2
   1485c:	f81b 3000 	ldrb.w	r3, [fp, r0]
   14860:	9403      	str	r4, [sp, #12]
   14862:	ea23 0302 	bic.w	r3, r3, r2
   14866:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1486a:	a803      	add	r0, sp, #12
   1486c:	f7ff fd22 	bl	142b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14870:	9b03      	ldr	r3, [sp, #12]
   14872:	08b9      	lsrs	r1, r7, #2
   14874:	3380      	adds	r3, #128	; 0x80
   14876:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1487a:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1487e:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14880:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   14882:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   14886:	d52b      	bpl.n	148e0 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   14888:	4620      	mov	r0, r4
   1488a:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1488c:	b2dd      	uxtb	r5, r3
   1488e:	f7ff fd2b 	bl	142e8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14892:	a803      	add	r0, sp, #12
   14894:	9403      	str	r4, [sp, #12]
   14896:	f7ff fd0d 	bl	142b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1489a:	9b03      	ldr	r3, [sp, #12]
   1489c:	3380      	adds	r3, #128	; 0x80
   1489e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   148a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   148a6:	429d      	cmp	r5, r3
   148a8:	d107      	bne.n	148ba <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   148aa:	2100      	movs	r1, #0
   148ac:	4620      	mov	r0, r4
   148ae:	f00f f9d4 	bl	23c5a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   148b2:	4629      	mov	r1, r5
   148b4:	4620      	mov	r0, r4
   148b6:	f00f f9d0 	bl	23c5a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   148ba:	a803      	add	r0, sp, #12
   148bc:	9403      	str	r4, [sp, #12]
   148be:	f7ff fcf9 	bl	142b4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   148c2:	2201      	movs	r2, #1
   148c4:	9b03      	ldr	r3, [sp, #12]
   148c6:	fa02 f303 	lsl.w	r3, r2, r3
   148ca:	6203      	str	r3, [r0, #32]
            while (latch[i])
   148cc:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   148d0:	2c00      	cmp	r4, #0
   148d2:	d1b2      	bne.n	1483a <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   148d4:	f1b9 0f00 	cmp.w	r9, #0
   148d8:	d11d      	bne.n	14916 <nrfx_gpiote_irq_handler+0x13e>
   148da:	f04f 0901 	mov.w	r9, #1
   148de:	e7a8      	b.n	14832 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   148e0:	2b02      	cmp	r3, #2
   148e2:	d10c      	bne.n	148fe <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   148e4:	2103      	movs	r1, #3
   148e6:	4620      	mov	r0, r4
   148e8:	f00f f9b7 	bl	23c5a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   148ec:	f005 0305 	and.w	r3, r5, #5
   148f0:	2b01      	cmp	r3, #1
   148f2:	d1e2      	bne.n	148ba <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   148f4:	4639      	mov	r1, r7
   148f6:	4620      	mov	r0, r4
   148f8:	f7ff fcf6 	bl	142e8 <call_handler>
   148fc:	e7dd      	b.n	148ba <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   148fe:	2102      	movs	r1, #2
   14900:	4620      	mov	r0, r4
   14902:	9301      	str	r3, [sp, #4]
   14904:	f00f f9a9 	bl	23c5a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   14908:	2d03      	cmp	r5, #3
   1490a:	d0f3      	beq.n	148f4 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1490c:	9b01      	ldr	r3, [sp, #4]
   1490e:	2b03      	cmp	r3, #3
   14910:	d1d3      	bne.n	148ba <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   14912:	2d02      	cmp	r5, #2
   14914:	e7ed      	b.n	148f2 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14916:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1491a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1491e:	f8d8 3020 	ldr.w	r3, [r8, #32]
   14922:	4917      	ldr	r1, [pc, #92]	; (14980 <nrfx_gpiote_irq_handler+0x1a8>)
   14924:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   14926:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1492a:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1492c:	4313      	orrs	r3, r2
   1492e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   14930:	620a      	str	r2, [r1, #32]
   14932:	f47f af7a 	bne.w	1482a <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   14936:	2401      	movs	r4, #1
    while (mask)
   14938:	b916      	cbnz	r6, 14940 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1493a:	b007      	add	sp, #28
   1493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   14940:	fa96 f3a6 	rbit	r3, r6
   14944:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   14948:	fa04 f203 	lsl.w	r2, r4, r3
   1494c:	009b      	lsls	r3, r3, #2
   1494e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   14952:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14956:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1495a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1495e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   14962:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   14966:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1496a:	f7ff fcbd 	bl	142e8 <call_handler>
   1496e:	e7e3      	b.n	14938 <nrfx_gpiote_irq_handler+0x160>
   14970:	5000d100 	.word	0x5000d100
   14974:	5000d000 	.word	0x5000d000
   14978:	5000d120 	.word	0x5000d120
   1497c:	50842500 	.word	0x50842500
   14980:	50842800 	.word	0x50842800
   14984:	200009e4 	.word	0x200009e4

00014988 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   14988:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1498a:	4c08      	ldr	r4, [pc, #32]	; (149ac <nrfx_ipc_init+0x24>)
{
   1498c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1498e:	7923      	ldrb	r3, [r4, #4]
{
   14990:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14992:	b943      	cbnz	r3, 149a6 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   14994:	202a      	movs	r0, #42	; 0x2a
   14996:	f7f1 fc49 	bl	622c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1499a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1499c:	4804      	ldr	r0, [pc, #16]	; (149b0 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1499e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   149a0:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   149a2:	60a5      	str	r5, [r4, #8]
}
   149a4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   149a6:	4803      	ldr	r0, [pc, #12]	; (149b4 <nrfx_ipc_init+0x2c>)
   149a8:	e7fc      	b.n	149a4 <nrfx_ipc_init+0x1c>
   149aa:	bf00      	nop
   149ac:	2000479c 	.word	0x2000479c
   149b0:	0bad0000 	.word	0x0bad0000
   149b4:	0bad000c 	.word	0x0bad000c

000149b8 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   149b8:	2300      	movs	r3, #0
{
   149ba:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   149bc:	4a0d      	ldr	r2, [pc, #52]	; (149f4 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   149be:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   149c2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   149c6:	3301      	adds	r3, #1
   149c8:	2b10      	cmp	r3, #16
   149ca:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   149ce:	d1f6      	bne.n	149be <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   149d0:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   149d2:	4a08      	ldr	r2, [pc, #32]	; (149f4 <nrfx_ipc_config_load+0x3c>)
   149d4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   149d8:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   149dc:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   149e0:	3301      	adds	r3, #1
   149e2:	2b10      	cmp	r3, #16
   149e4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   149e8:	d1f6      	bne.n	149d8 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   149ea:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   149ee:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   149f2:	bd30      	pop	{r4, r5, pc}
   149f4:	5002a000 	.word	0x5002a000

000149f8 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   149f8:	2301      	movs	r3, #1
   149fa:	4a02      	ldr	r2, [pc, #8]	; (14a04 <nrfx_ipc_receive_event_enable+0xc>)
   149fc:	4083      	lsls	r3, r0
   149fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14a02:	4770      	bx	lr
   14a04:	5002a000 	.word	0x5002a000

00014a08 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   14a08:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   14a0a:	4a02      	ldr	r2, [pc, #8]	; (14a14 <nrfx_ipc_receive_event_disable+0xc>)
   14a0c:	4083      	lsls	r3, r0
   14a0e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   14a12:	4770      	bx	lr
   14a14:	5002a000 	.word	0x5002a000

00014a18 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   14a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   14a1a:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a1c:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   14a1e:	4b0b      	ldr	r3, [pc, #44]	; (14a4c <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   14a20:	4d0b      	ldr	r5, [pc, #44]	; (14a50 <nrfx_ipc_irq_handler+0x38>)
   14a22:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   14a26:	b904      	cbnz	r4, 14a2a <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   14a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   14a2a:	fa94 f0a4 	rbit	r0, r4
   14a2e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   14a32:	fa06 f300 	lsl.w	r3, r6, r0
   14a36:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a3a:	4b06      	ldr	r3, [pc, #24]	; (14a54 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   14a3c:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a3e:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   14a40:	682b      	ldr	r3, [r5, #0]
   14a42:	2b00      	cmp	r3, #0
   14a44:	d0ef      	beq.n	14a26 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   14a46:	68a9      	ldr	r1, [r5, #8]
   14a48:	4798      	blx	r3
   14a4a:	e7ec      	b.n	14a26 <nrfx_ipc_irq_handler+0xe>
   14a4c:	5002a000 	.word	0x5002a000
   14a50:	2000479c 	.word	0x2000479c
   14a54:	5002a100 	.word	0x5002a100

00014a58 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   14a58:	b570      	push	{r4, r5, r6, lr}

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14a5a:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   14a5e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   14a62:	d168      	bne.n	14b36 <qspi_xfer+0xde>
   14a64:	0784      	lsls	r4, r0, #30
   14a66:	d166      	bne.n	14b36 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   14a68:	4d35      	ldr	r5, [pc, #212]	; (14b40 <qspi_xfer+0xe8>)
   14a6a:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   14a6e:	2c01      	cmp	r4, #1
   14a70:	d001      	beq.n	14a76 <qspi_xfer+0x1e>
   14a72:	429c      	cmp	r4, r3
   14a74:	d161      	bne.n	14b3a <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   14a76:	682c      	ldr	r4, [r5, #0]
   14a78:	bb04      	cbnz	r4, 14abc <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   14a7a:	2b02      	cmp	r3, #2
   14a7c:	4b31      	ldr	r3, [pc, #196]	; (14b44 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   14a7e:	bf0b      	itete	eq
   14a80:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   14a84:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   14a88:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   14a8c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   14a90:	bf0b      	itete	eq
   14a92:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   14a96:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   14a9a:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   14a9c:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a9e:	2100      	movs	r1, #0
   14aa0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14aa4:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
   14aa8:	2201      	movs	r2, #1
   14aaa:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   14aae:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ab0:	4a24      	ldr	r2, [pc, #144]	; (14b44 <qspi_xfer+0xec>)
   14ab2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   14ab6:	2b00      	cmp	r3, #0
   14ab8:	d0fb      	beq.n	14ab2 <qspi_xfer+0x5a>
   14aba:	e00d      	b.n	14ad8 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
   14abc:	68ae      	ldr	r6, [r5, #8]
   14abe:	4c21      	ldr	r4, [pc, #132]	; (14b44 <qspi_xfer+0xec>)
   14ac0:	b166      	cbz	r6, 14adc <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   14ac2:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   14ac4:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   14ac6:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   14ac8:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   14aca:	d12d      	bne.n	14b28 <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
   14acc:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   14ad0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   14ad4:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   14ad8:	481b      	ldr	r0, [pc, #108]	; (14b48 <qspi_xfer+0xf0>)
}
   14ada:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   14adc:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   14ade:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   14ae2:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   14ae4:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   14ae6:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   14ae8:	bf0c      	ite	eq
   14aea:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   14aee:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14af2:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   14af6:	bf0b      	itete	eq
   14af8:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   14afc:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   14b00:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   14b04:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   14b08:	bf08      	it	eq
   14b0a:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b0c:	490d      	ldr	r1, [pc, #52]	; (14b44 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
   14b0e:	bf18      	it	ne
   14b10:	2304      	movne	r3, #4
   14b12:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   14b16:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b18:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   14b1c:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   14b20:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b24:	601a      	str	r2, [r3, #0]
}
   14b26:	e7d7      	b.n	14ad8 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
   14b28:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   14b2c:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   14b30:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   14b34:	e7d0      	b.n	14ad8 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
   14b36:	4805      	ldr	r0, [pc, #20]	; (14b4c <qspi_xfer+0xf4>)
   14b38:	e7cf      	b.n	14ada <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
   14b3a:	4805      	ldr	r0, [pc, #20]	; (14b50 <qspi_xfer+0xf8>)
   14b3c:	e7cd      	b.n	14ada <qspi_xfer+0x82>
   14b3e:	bf00      	nop
   14b40:	200047a8 	.word	0x200047a8
   14b44:	5002b000 	.word	0x5002b000
   14b48:	0bad0000 	.word	0x0bad0000
   14b4c:	0bad000a 	.word	0x0bad000a
   14b50:	0bad000b 	.word	0x0bad000b

00014b54 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   14b54:	b538      	push	{r3, r4, r5, lr}
   14b56:	f24c 3450 	movw	r4, #50000	; 0xc350
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14b5a:	4d06      	ldr	r5, [pc, #24]	; (14b74 <qspi_ready_wait+0x20>)
   14b5c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   14b60:	b933      	cbnz	r3, 14b70 <qspi_ready_wait+0x1c>
   14b62:	200a      	movs	r0, #10
   14b64:	f00e fef8 	bl	23958 <nrfx_busy_wait>
   14b68:	3c01      	subs	r4, #1
   14b6a:	d1f7      	bne.n	14b5c <qspi_ready_wait+0x8>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   14b6c:	4802      	ldr	r0, [pc, #8]	; (14b78 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   14b6e:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   14b70:	4802      	ldr	r0, [pc, #8]	; (14b7c <qspi_ready_wait+0x28>)
   14b72:	e7fc      	b.n	14b6e <qspi_ready_wait+0x1a>
   14b74:	5002b000 	.word	0x5002b000
   14b78:	0bad0007 	.word	0x0bad0007
   14b7c:	0bad0000 	.word	0x0bad0000

00014b80 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   14b80:	4b08      	ldr	r3, [pc, #32]	; (14ba4 <qspi_event_xfer_handle.constprop.0+0x24>)
   14b82:	689a      	ldr	r2, [r3, #8]
   14b84:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   14b86:	691a      	ldr	r2, [r3, #16]
   14b88:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   14b8a:	699a      	ldr	r2, [r3, #24]
   14b8c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   14b8e:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   14b90:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   14b92:	b132      	cbz	r2, 14ba2 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   14b94:	695a      	ldr	r2, [r3, #20]
   14b96:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   14b98:	69da      	ldr	r2, [r3, #28]
   14b9a:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   14b9c:	2200      	movs	r2, #0
   14b9e:	60da      	str	r2, [r3, #12]
   14ba0:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   14ba2:	4770      	bx	lr
   14ba4:	200047a8 	.word	0x200047a8

00014ba8 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   14ba8:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
   14baa:	4a0a      	ldr	r2, [pc, #40]	; (14bd4 <nrf_gpio_cfg.constprop.0+0x2c>)
   14bac:	4c0a      	ldr	r4, [pc, #40]	; (14bd8 <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
   14bae:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   14bb2:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   14bb4:	2801      	cmp	r0, #1
   14bb6:	bf18      	it	ne
   14bb8:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   14bba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14bbe:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   14bc2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   14bc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   14bca:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   14bce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   14bd2:	bd10      	pop	{r4, pc}
   14bd4:	50842800 	.word	0x50842800
   14bd8:	50842500 	.word	0x50842500

00014bdc <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   14bdc:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   14bde:	4b0e      	ldr	r3, [pc, #56]	; (14c18 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   14be0:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   14be2:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   14be6:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   14bea:	2807      	cmp	r0, #7
   14bec:	d813      	bhi.n	14c16 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   14bee:	e8df f000 	tbb	[pc, r0]
   14bf2:	0f11      	.short	0x0f11
   14bf4:	080a0b0d 	.word	0x080a0b0d
   14bf8:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   14bfa:	0e10      	lsrs	r0, r2, #24
   14bfc:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   14bfe:	0c10      	lsrs	r0, r2, #16
   14c00:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   14c02:	0a10      	lsrs	r0, r2, #8
   14c04:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   14c06:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   14c08:	0e1a      	lsrs	r2, r3, #24
   14c0a:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   14c0c:	0c1a      	lsrs	r2, r3, #16
   14c0e:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   14c10:	0a1a      	lsrs	r2, r3, #8
   14c12:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   14c14:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   14c16:	bd10      	pop	{r4, pc}
   14c18:	5002b000 	.word	0x5002b000

00014c1c <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   14c1c:	3802      	subs	r0, #2
   14c1e:	2807      	cmp	r0, #7
   14c20:	d81f      	bhi.n	14c62 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   14c22:	e8df f000 	tbb	[pc, r0]
   14c26:	2729      	.short	0x2729
   14c28:	21231125 	.word	0x21231125
   14c2c:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   14c2e:	79cb      	ldrb	r3, [r1, #7]
   14c30:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   14c32:	798a      	ldrb	r2, [r1, #6]
   14c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   14c38:	794a      	ldrb	r2, [r1, #5]
   14c3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   14c3e:	790a      	ldrb	r2, [r1, #4]
   14c40:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   14c42:	4a0e      	ldr	r2, [pc, #56]	; (14c7c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   14c44:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   14c48:	78cb      	ldrb	r3, [r1, #3]
   14c4a:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   14c4c:	788a      	ldrb	r2, [r1, #2]
   14c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   14c52:	784a      	ldrb	r2, [r1, #1]
   14c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   14c58:	780a      	ldrb	r2, [r1, #0]
   14c5a:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   14c5c:	4a07      	ldr	r2, [pc, #28]	; (14c7c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   14c5e:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   14c62:	4770      	bx	lr
    switch (length)
   14c64:	2300      	movs	r3, #0
   14c66:	e7e4      	b.n	14c32 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   14c68:	2300      	movs	r3, #0
   14c6a:	e7e5      	b.n	14c38 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   14c6c:	2300      	movs	r3, #0
   14c6e:	e7e6      	b.n	14c3e <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   14c70:	2300      	movs	r3, #0
   14c72:	e7eb      	b.n	14c4c <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   14c74:	2300      	movs	r3, #0
   14c76:	e7ec      	b.n	14c52 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   14c78:	2300      	movs	r3, #0
   14c7a:	e7ed      	b.n	14c58 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   14c7c:	5002b000 	.word	0x5002b000

00014c80 <nrfx_qspi_init>:
{
   14c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   14c84:	4d6d      	ldr	r5, [pc, #436]	; (14e3c <nrfx_qspi_init+0x1bc>)
{
   14c86:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   14c88:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
   14c8c:	460e      	mov	r6, r1
   14c8e:	4617      	mov	r7, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   14c90:	2b00      	cmp	r3, #0
   14c92:	f040 80ce 	bne.w	14e32 <nrfx_qspi_init+0x1b2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   14c96:	7cc2      	ldrb	r2, [r0, #19]
   14c98:	b112      	cbz	r2, 14ca0 <nrfx_qspi_init+0x20>
   14c9a:	7d03      	ldrb	r3, [r0, #20]
   14c9c:	2b00      	cmp	r3, #0
   14c9e:	d16c      	bne.n	14d7a <nrfx_qspi_init+0xfa>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14ca0:	7920      	ldrb	r0, [r4, #4]
   14ca2:	28ff      	cmp	r0, #255	; 0xff
   14ca4:	f000 80c8 	beq.w	14e38 <nrfx_qspi_init+0x1b8>
   14ca8:	7963      	ldrb	r3, [r4, #5]
   14caa:	2bff      	cmp	r3, #255	; 0xff
   14cac:	f000 80c4 	beq.w	14e38 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14cb0:	79a3      	ldrb	r3, [r4, #6]
   14cb2:	2bff      	cmp	r3, #255	; 0xff
   14cb4:	f000 80c0 	beq.w	14e38 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   14cb8:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14cba:	29ff      	cmp	r1, #255	; 0xff
   14cbc:	f000 80bc 	beq.w	14e38 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   14cc0:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   14cc2:	f8df c17c 	ldr.w	ip, [pc, #380]	; 14e40 <nrfx_qspi_init+0x1c0>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   14cc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   14cca:	4563      	cmp	r3, ip
   14ccc:	f040 80b4 	bne.w	14e38 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   14cd0:	290e      	cmp	r1, #14
   14cd2:	f040 80b1 	bne.w	14e38 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   14cd6:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   14cd8:	2bff      	cmp	r3, #255	; 0xff
   14cda:	d002      	beq.n	14ce2 <nrfx_qspi_init+0x62>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   14cdc:	2b0f      	cmp	r3, #15
   14cde:	f040 80ab 	bne.w	14e38 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   14ce2:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   14ce4:	2bff      	cmp	r3, #255	; 0xff
   14ce6:	d002      	beq.n	14cee <nrfx_qspi_init+0x6e>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   14ce8:	2b10      	cmp	r3, #16
   14cea:	f040 80a5 	bne.w	14e38 <nrfx_qspi_init+0x1b8>
    if (!p_config->skip_gpio_cfg)
   14cee:	b9b2      	cbnz	r2, 14d1e <nrfx_qspi_init+0x9e>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   14cf0:	2103      	movs	r1, #3
   14cf2:	f7ff ff59 	bl	14ba8 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   14cf6:	7960      	ldrb	r0, [r4, #5]
   14cf8:	f7ff ff56 	bl	14ba8 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   14cfc:	79a0      	ldrb	r0, [r4, #6]
   14cfe:	f7ff ff53 	bl	14ba8 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   14d02:	79e0      	ldrb	r0, [r4, #7]
   14d04:	f7ff ff50 	bl	14ba8 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14d08:	7a20      	ldrb	r0, [r4, #8]
   14d0a:	28ff      	cmp	r0, #255	; 0xff
   14d0c:	d001      	beq.n	14d12 <nrfx_qspi_init+0x92>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   14d0e:	f7ff ff4b 	bl	14ba8 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14d12:	7a60      	ldrb	r0, [r4, #9]
   14d14:	28ff      	cmp	r0, #255	; 0xff
   14d16:	d002      	beq.n	14d1e <nrfx_qspi_init+0x9e>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   14d18:	2103      	movs	r1, #3
   14d1a:	f7ff ff45 	bl	14ba8 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   14d1e:	7d23      	ldrb	r3, [r4, #20]
   14d20:	bb5b      	cbnz	r3, 14d7a <nrfx_qspi_init+0xfa>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   14d22:	7923      	ldrb	r3, [r4, #4]
   14d24:	2bff      	cmp	r3, #255	; 0xff
   14d26:	bf14      	ite	ne
   14d28:	461a      	movne	r2, r3
   14d2a:	f04f 32ff 	moveq.w	r2, #4294967295
   14d2e:	4b45      	ldr	r3, [pc, #276]	; (14e44 <nrfx_qspi_init+0x1c4>)
   14d30:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   14d34:	7962      	ldrb	r2, [r4, #5]
   14d36:	2aff      	cmp	r2, #255	; 0xff
   14d38:	bf08      	it	eq
   14d3a:	f04f 32ff 	moveq.w	r2, #4294967295
   14d3e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   14d42:	79a2      	ldrb	r2, [r4, #6]
   14d44:	2aff      	cmp	r2, #255	; 0xff
   14d46:	bf08      	it	eq
   14d48:	f04f 32ff 	moveq.w	r2, #4294967295
   14d4c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   14d50:	79e2      	ldrb	r2, [r4, #7]
   14d52:	2aff      	cmp	r2, #255	; 0xff
   14d54:	bf08      	it	eq
   14d56:	f04f 32ff 	moveq.w	r2, #4294967295
   14d5a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   14d5e:	7a22      	ldrb	r2, [r4, #8]
   14d60:	2aff      	cmp	r2, #255	; 0xff
   14d62:	bf08      	it	eq
   14d64:	f04f 32ff 	moveq.w	r2, #4294967295
   14d68:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   14d6c:	7a62      	ldrb	r2, [r4, #9]
   14d6e:	2aff      	cmp	r2, #255	; 0xff
   14d70:	bf08      	it	eq
   14d72:	f04f 32ff 	moveq.w	r2, #4294967295
   14d76:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->INTENCLR = mask;
   14d7a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d7c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   14d7e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 14e44 <nrfx_qspi_init+0x1c4>
   14d82:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d86:	f8c8 2100 	str.w	r2, [r8, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d8a:	f8c8 3000 	str.w	r3, [r8]
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   14d8e:	f7ff fee1 	bl	14b54 <qspi_ready_wait>
   14d92:	4b2d      	ldr	r3, [pc, #180]	; (14e48 <nrfx_qspi_init+0x1c8>)
   14d94:	4298      	cmp	r0, r3
   14d96:	d04d      	beq.n	14e34 <nrfx_qspi_init+0x1b4>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   14d98:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   14d9a:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   14d9e:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   14da0:	7ae1      	ldrb	r1, [r4, #11]
    uint32_t config = p_config->readoc;
   14da2:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   14da4:	019b      	lsls	r3, r3, #6
   14da6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
   14daa:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   14dac:	7b62      	ldrb	r2, [r4, #13]
   14dae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p_reg->IFCONFIG0 = config;
   14db2:	f8c8 3544 	str.w	r3, [r8, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   14db6:	7c62      	ldrb	r2, [r4, #17]
    return p_reg->IFCONFIG0;
   14db8:	f8d8 3544 	ldr.w	r3, [r8, #1348]	; 0x544
   14dbc:	bba2      	cbnz	r2, 14e28 <nrfx_qspi_init+0x1a8>
        regval |= ((1 << 16) | (1 << 17));
   14dbe:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   14dc2:	4920      	ldr	r1, [pc, #128]	; (14e44 <nrfx_qspi_init+0x1c4>)
   14dc4:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   14dc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   14dcc:	f8c1 3640 	str.w	r3, [r1, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   14dd0:	f8d1 2600 	ldr.w	r2, [r1, #1536]	; 0x600
    config |= p_config->sck_delay;
   14dd4:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   14dd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    config |= p_config->sck_delay;
   14dde:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   14de0:	7be2      	ldrb	r2, [r4, #15]
   14de2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   14de6:	7c22      	ldrb	r2, [r4, #16]
   14de8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   14dec:	7c62      	ldrb	r2, [r4, #17]
   14dee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
   14df2:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   14df6:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   14df8:	e9c5 6700 	strd	r6, r7, [r5]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   14dfc:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    if (handler)
   14e00:	b116      	cbz	r6, 14e08 <nrfx_qspi_init+0x188>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   14e02:	202b      	movs	r0, #43	; 0x2b
   14e04:	f7f1 fa12 	bl	622c <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   14e08:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   14e0a:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   14e0c:	e9c5 1102 	strd	r1, r1, [r5, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   14e10:	4b0c      	ldr	r3, [pc, #48]	; (14e44 <nrfx_qspi_init+0x1c4>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   14e12:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
   14e16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e1a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e1e:	601a      	str	r2, [r3, #0]
}
   14e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
   14e24:	f7ff be96 	b.w	14b54 <qspi_ready_wait>
        regval &= ~(1 << 17);
   14e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   14e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14e30:	e7c7      	b.n	14dc2 <nrfx_qspi_init+0x142>
        return NRFX_ERROR_INVALID_STATE;
   14e32:	4806      	ldr	r0, [pc, #24]	; (14e4c <nrfx_qspi_init+0x1cc>)
}
   14e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14e38:	4805      	ldr	r0, [pc, #20]	; (14e50 <nrfx_qspi_init+0x1d0>)
   14e3a:	e7fb      	b.n	14e34 <nrfx_qspi_init+0x1b4>
   14e3c:	200047a8 	.word	0x200047a8
   14e40:	000d1211 	.word	0x000d1211
   14e44:	5002b000 	.word	0x5002b000
   14e48:	0bad0007 	.word	0x0bad0007
   14e4c:	0bad0005 	.word	0x0bad0005
   14e50:	0bad0004 	.word	0x0bad0004

00014e54 <nrfx_qspi_cinstr_xfer>:
{
   14e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e58:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   14e5a:	4a1f      	ldr	r2, [pc, #124]	; (14ed8 <nrfx_qspi_cinstr_xfer+0x84>)
{
   14e5c:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   14e5e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   14e62:	2a01      	cmp	r2, #1
   14e64:	d135      	bne.n	14ed2 <nrfx_qspi_cinstr_xfer+0x7e>
    if (p_tx_buffer)
   14e66:	b111      	cbz	r1, 14e6e <nrfx_qspi_cinstr_xfer+0x1a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   14e68:	7840      	ldrb	r0, [r0, #1]
   14e6a:	f7ff fed7 	bl	14c1c <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   14e6e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e70:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   14e72:	4e1a      	ldr	r6, [pc, #104]	; (14edc <nrfx_qspi_cinstr_xfer+0x88>)
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   14e74:	f8df 8068 	ldr.w	r8, [pc, #104]	; 14ee0 <nrfx_qspi_cinstr_xfer+0x8c>
   14e78:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e7c:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e80:	6033      	str	r3, [r6, #0]
   14e82:	f7ff fe67 	bl	14b54 <qspi_ready_wait>
   14e86:	4540      	cmp	r0, r8
   14e88:	d102      	bne.n	14e90 <nrfx_qspi_cinstr_xfer+0x3c>
            return NRFX_ERROR_TIMEOUT;
   14e8a:	4815      	ldr	r0, [pc, #84]	; (14ee0 <nrfx_qspi_cinstr_xfer+0x8c>)
}
   14e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e90:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   14e94:	78a3      	ldrb	r3, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   14e96:	7862      	ldrb	r2, [r4, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   14e98:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   14e9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   14e9e:	7822      	ldrb	r2, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   14ea0:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   14ea2:	78e2      	ldrb	r2, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   14ea4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   14ea8:	7922      	ldrb	r2, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   14eaa:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   14eae:	7962      	ldrb	r2, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   14eb0:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   14eb4:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   14eb8:	f7ff fe4c 	bl	14b54 <qspi_ready_wait>
   14ebc:	4540      	cmp	r0, r8
   14ebe:	d0e4      	beq.n	14e8a <nrfx_qspi_cinstr_xfer+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ec0:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    if (p_rx_buffer)
   14ec4:	b11d      	cbz	r5, 14ece <nrfx_qspi_cinstr_xfer+0x7a>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   14ec6:	4629      	mov	r1, r5
   14ec8:	7860      	ldrb	r0, [r4, #1]
   14eca:	f7ff fe87 	bl	14bdc <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   14ece:	4805      	ldr	r0, [pc, #20]	; (14ee4 <nrfx_qspi_cinstr_xfer+0x90>)
   14ed0:	e7dc      	b.n	14e8c <nrfx_qspi_cinstr_xfer+0x38>
        return NRFX_ERROR_BUSY;
   14ed2:	4805      	ldr	r0, [pc, #20]	; (14ee8 <nrfx_qspi_cinstr_xfer+0x94>)
   14ed4:	e7da      	b.n	14e8c <nrfx_qspi_cinstr_xfer+0x38>
   14ed6:	bf00      	nop
   14ed8:	200047a8 	.word	0x200047a8
   14edc:	5002b000 	.word	0x5002b000
   14ee0:	0bad0007 	.word	0x0bad0007
   14ee4:	0bad0000 	.word	0x0bad0000
   14ee8:	0bad000b 	.word	0x0bad000b

00014eec <nrfx_qspi_mem_busy_check>:
{
   14eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   14eee:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   14ef0:	4a0c      	ldr	r2, [pc, #48]	; (14f24 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   14ef2:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   14ef4:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   14ef6:	f10d 0207 	add.w	r2, sp, #7
   14efa:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   14efc:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   14f00:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   14f04:	f7ff ffa6 	bl	14e54 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   14f08:	4b07      	ldr	r3, [pc, #28]	; (14f28 <nrfx_qspi_mem_busy_check+0x3c>)
   14f0a:	4298      	cmp	r0, r3
   14f0c:	d106      	bne.n	14f1c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   14f0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   14f12:	f013 0f01 	tst.w	r3, #1
   14f16:	4b05      	ldr	r3, [pc, #20]	; (14f2c <nrfx_qspi_mem_busy_check+0x40>)
   14f18:	bf18      	it	ne
   14f1a:	4618      	movne	r0, r3
}
   14f1c:	b005      	add	sp, #20
   14f1e:	f85d fb04 	ldr.w	pc, [sp], #4
   14f22:	bf00      	nop
   14f24:	01000205 	.word	0x01000205
   14f28:	0bad0000 	.word	0x0bad0000
   14f2c:	0bad000b 	.word	0x0bad000b

00014f30 <nrfx_qspi_uninit>:
{
   14f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   14f34:	202b      	movs	r0, #43	; 0x2b
   14f36:	f7f1 f987 	bl	6248 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   14f3a:	4b21      	ldr	r3, [pc, #132]	; (14fc0 <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
   14f3c:	4e21      	ldr	r6, [pc, #132]	; (14fc4 <nrfx_qspi_uninit+0x94>)
   14f3e:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   14f42:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   14f46:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   14f4a:	bf04      	itt	eq
   14f4c:	4a1e      	ldreq	r2, [pc, #120]	; (14fc8 <nrfx_qspi_uninit+0x98>)
   14f4e:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   14f52:	2201      	movs	r2, #1
   14f54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f58:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   14f5a:	2200      	movs	r2, #0
   14f5c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14f60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   14f64:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   14f68:	bb22      	cbnz	r2, 14fb4 <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   14f6a:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   14f6e:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   14f72:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   14f74:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   14f78:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   14f7c:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   14f80:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   14f84:	f00e fe78 	bl	23c78 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   14f88:	fa5f f089 	uxtb.w	r0, r9
   14f8c:	f00e fe74 	bl	23c78 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   14f90:	fa5f f088 	uxtb.w	r0, r8
   14f94:	f00e fe70 	bl	23c78 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   14f98:	b2f8      	uxtb	r0, r7
   14f9a:	f00e fe6d 	bl	23c78 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14f9e:	b2e8      	uxtb	r0, r5
   14fa0:	28ff      	cmp	r0, #255	; 0xff
   14fa2:	b2e4      	uxtb	r4, r4
   14fa4:	d001      	beq.n	14faa <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
   14fa6:	f00e fe67 	bl	23c78 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14faa:	2cff      	cmp	r4, #255	; 0xff
   14fac:	d002      	beq.n	14fb4 <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
   14fae:	4620      	mov	r0, r4
   14fb0:	f00e fe62 	bl	23c78 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   14fb4:	2300      	movs	r3, #0
   14fb6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   14fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14fbe:	bf00      	nop
   14fc0:	5002b000 	.word	0x5002b000
   14fc4:	200047a8 	.word	0x200047a8
   14fc8:	00030100 	.word	0x00030100

00014fcc <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   14fcc:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14fce:	4b17      	ldr	r3, [pc, #92]	; (1502c <nrfx_qspi_irq_handler+0x60>)
   14fd0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   14fd4:	b1e2      	cbz	r2, 15010 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14fd6:	2200      	movs	r2, #0
    switch (m_cb.state)
   14fd8:	4c15      	ldr	r4, [pc, #84]	; (15030 <nrfx_qspi_irq_handler+0x64>)
   14fda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14fde:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   14fe2:	2a03      	cmp	r2, #3
   14fe4:	d015      	beq.n	15012 <nrfx_qspi_irq_handler+0x46>
   14fe6:	2a04      	cmp	r2, #4
   14fe8:	d015      	beq.n	15016 <nrfx_qspi_irq_handler+0x4a>
   14fea:	2a02      	cmp	r2, #2
   14fec:	d104      	bne.n	14ff8 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   14fee:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   14ff0:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   14ff4:	f7ff fdc4 	bl	14b80 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   14ff8:	68a3      	ldr	r3, [r4, #8]
   14ffa:	b913      	cbnz	r3, 15002 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   14ffc:	2301      	movs	r3, #1
   14ffe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   15002:	e9d4 3100 	ldrd	r3, r1, [r4]
   15006:	2000      	movs	r0, #0
   15008:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1500a:	2300      	movs	r3, #0
   1500c:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   15010:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   15012:	2302      	movs	r3, #2
   15014:	e7ec      	b.n	14ff0 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   15016:	2203      	movs	r2, #3
   15018:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1501c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   15020:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   15022:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   15026:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1502a:	e7e5      	b.n	14ff8 <nrfx_qspi_irq_handler+0x2c>
   1502c:	5002b000 	.word	0x5002b000
   15030:	200047a8 	.word	0x200047a8

00015034 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
   15034:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   15036:	4605      	mov	r5, r0
   15038:	b300      	cbz	r0, 1507c <z_impl_device_get_binding+0x48>
   1503a:	7804      	ldrb	r4, [r0, #0]
   1503c:	b13c      	cbz	r4, 1504e <z_impl_device_get_binding+0x1a>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1503e:	4c10      	ldr	r4, [pc, #64]	; (15080 <z_impl_device_get_binding+0x4c>)
   15040:	4e10      	ldr	r6, [pc, #64]	; (15084 <z_impl_device_get_binding+0x50>)
   15042:	42b4      	cmp	r4, r6
   15044:	d105      	bne.n	15052 <z_impl_device_get_binding+0x1e>
		if (z_device_is_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   15046:	4c0e      	ldr	r4, [pc, #56]	; (15080 <z_impl_device_get_binding+0x4c>)
   15048:	42b4      	cmp	r4, r6
   1504a:	d10b      	bne.n	15064 <z_impl_device_get_binding+0x30>
		return NULL;
   1504c:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1504e:	4620      	mov	r0, r4
   15050:	bd70      	pop	{r4, r5, r6, pc}
		if (z_device_is_ready(dev) && (dev->name == name)) {
   15052:	4620      	mov	r0, r4
   15054:	f00e fe1a 	bl	23c8c <z_device_is_ready>
   15058:	b110      	cbz	r0, 15060 <z_impl_device_get_binding+0x2c>
   1505a:	6823      	ldr	r3, [r4, #0]
   1505c:	42ab      	cmp	r3, r5
   1505e:	d0f6      	beq.n	1504e <z_impl_device_get_binding+0x1a>
	for (dev = __device_start; dev != __device_end; dev++) {
   15060:	3418      	adds	r4, #24
   15062:	e7ee      	b.n	15042 <z_impl_device_get_binding+0xe>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15064:	4620      	mov	r0, r4
   15066:	f00e fe11 	bl	23c8c <z_device_is_ready>
   1506a:	b128      	cbz	r0, 15078 <z_impl_device_get_binding+0x44>
   1506c:	4628      	mov	r0, r5
   1506e:	6821      	ldr	r1, [r4, #0]
   15070:	f7eb fde6 	bl	c40 <strcmp>
   15074:	2800      	cmp	r0, #0
   15076:	d0ea      	beq.n	1504e <z_impl_device_get_binding+0x1a>
	for (dev = __device_start; dev != __device_end; dev++) {
   15078:	3418      	adds	r4, #24
   1507a:	e7e5      	b.n	15048 <z_impl_device_get_binding+0x14>
		return NULL;
   1507c:	4604      	mov	r4, r0
   1507e:	e7e6      	b.n	1504e <z_impl_device_get_binding+0x1a>
   15080:	00024928 	.word	0x00024928
   15084:	000249e8 	.word	0x000249e8

00015088 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   15088:	4b01      	ldr	r3, [pc, #4]	; (15090 <z_impl_z_errno+0x8>)
   1508a:	6898      	ldr	r0, [r3, #8]
}
   1508c:	3064      	adds	r0, #100	; 0x64
   1508e:	4770      	bx	lr
   15090:	200047dc 	.word	0x200047dc

00015094 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15098:	b086      	sub	sp, #24
   1509a:	4605      	mov	r5, r0
   1509c:	460e      	mov	r6, r1
   1509e:	af00      	add	r7, sp, #0
	__asm__ volatile(
   150a0:	f04f 0320 	mov.w	r3, #32
   150a4:	f3ef 8811 	mrs	r8, BASEPRI
   150a8:	f383 8812 	msr	BASEPRI_MAX, r3
   150ac:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   150b0:	f001 f970 	bl	16394 <z_impl_z_current_get>
   150b4:	2d04      	cmp	r5, #4
   150b6:	bf98      	it	ls
   150b8:	4b2f      	ldrls	r3, [pc, #188]	; (15178 <z_fatal_error+0xe4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   150ba:	46e9      	mov	r9, sp
   150bc:	b08a      	sub	sp, #40	; 0x28
   150be:	4604      	mov	r4, r0
   150c0:	466a      	mov	r2, sp
   150c2:	bf94      	ite	ls
   150c4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   150c8:	4b2c      	ldrhi	r3, [pc, #176]	; (1517c <z_fatal_error+0xe8>)
   150ca:	61d3      	str	r3, [r2, #28]
   150cc:	f240 3301 	movw	r3, #769	; 0x301
   150d0:	f04f 0a00 	mov.w	sl, #0
   150d4:	8493      	strh	r3, [r2, #36]	; 0x24
   150d6:	492a      	ldr	r1, [pc, #168]	; (15180 <z_fatal_error+0xec>)
   150d8:	4b2a      	ldr	r3, [pc, #168]	; (15184 <z_fatal_error+0xf0>)
   150da:	e9c2 1505 	strd	r1, r5, [r2, #20]
   150de:	f8c2 a020 	str.w	sl, [r2, #32]
   150e2:	f842 3f10 	str.w	r3, [r2, #16]!
   150e6:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   150ea:	4653      	mov	r3, sl
   150ec:	4826      	ldr	r0, [pc, #152]	; (15188 <z_fatal_error+0xf4>)
   150ee:	f7ef fec9 	bl	4e84 <z_impl_z_log_msg_static_create>
   150f2:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   150f4:	b17e      	cbz	r6, 15116 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   150f6:	69f3      	ldr	r3, [r6, #28]
   150f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   150fc:	b15b      	cbz	r3, 15116 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   150fe:	4b23      	ldr	r3, [pc, #140]	; (1518c <z_fatal_error+0xf8>)
   15100:	617b      	str	r3, [r7, #20]
   15102:	2302      	movs	r3, #2
   15104:	613b      	str	r3, [r7, #16]
   15106:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1510a:	4653      	mov	r3, sl
   1510c:	481e      	ldr	r0, [pc, #120]	; (15188 <z_fatal_error+0xf4>)
   1510e:	f107 0210 	add.w	r2, r7, #16
   15112:	f7ef feb7 	bl	4e84 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   15116:	b12c      	cbz	r4, 15124 <z_fatal_error+0x90>
   15118:	4620      	mov	r0, r4
   1511a:	f00e fe8e 	bl	23e3a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1511e:	b108      	cbz	r0, 15124 <z_fatal_error+0x90>
   15120:	7803      	ldrb	r3, [r0, #0]
   15122:	b903      	cbnz	r3, 15126 <z_fatal_error+0x92>
		thread_name = "unknown";
   15124:	481a      	ldr	r0, [pc, #104]	; (15190 <z_fatal_error+0xfc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   15126:	46e9      	mov	r9, sp
   15128:	b08a      	sub	sp, #40	; 0x28
   1512a:	466a      	mov	r2, sp
   1512c:	4b19      	ldr	r3, [pc, #100]	; (15194 <z_fatal_error+0x100>)
   1512e:	61d0      	str	r0, [r2, #28]
   15130:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15134:	f240 3301 	movw	r3, #769	; 0x301
   15138:	8413      	strh	r3, [r2, #32]
   1513a:	4b17      	ldr	r3, [pc, #92]	; (15198 <z_fatal_error+0x104>)
   1513c:	f842 3f10 	str.w	r3, [r2, #16]!
   15140:	2300      	movs	r3, #0
   15142:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15146:	4810      	ldr	r0, [pc, #64]	; (15188 <z_fatal_error+0xf4>)
   15148:	f7ef fe9c 	bl	4e84 <z_impl_z_log_msg_static_create>
		thread_name_get(thread));

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
   1514c:	4622      	mov	r2, r4
   1514e:	46cd      	mov	sp, r9
   15150:	4631      	mov	r1, r6
   15152:	4628      	mov	r0, r5
   15154:	f7f1 ffb8 	bl	70c8 <coredump>
#endif

	k_sys_fatal_error_handler(reason, esf);
   15158:	4631      	mov	r1, r6
   1515a:	4628      	mov	r0, r5
   1515c:	f7f9 f85a 	bl	e214 <k_sys_fatal_error_handler>
	__asm__ volatile(
   15160:	f388 8811 	msr	BASEPRI, r8
   15164:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15168:	4620      	mov	r0, r4
   1516a:	f7f1 fd17 	bl	6b9c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1516e:	3718      	adds	r7, #24
   15170:	46bd      	mov	sp, r7
   15172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15176:	bf00      	nop
   15178:	00031194 	.word	0x00031194
   1517c:	00036755 	.word	0x00036755
   15180:	0003676b 	.word	0x0003676b
   15184:	01000005 	.word	0x01000005
   15188:	00024d68 	.word	0x00024d68
   1518c:	00036793 	.word	0x00036793
   15190:	00036763 	.word	0x00036763
   15194:	000367b4 	.word	0x000367b4
   15198:	01000004 	.word	0x01000004

0001519c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1519c:	4b10      	ldr	r3, [pc, #64]	; (151e0 <z_sys_init_run_level+0x44>)
{
   1519e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   151a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   151a4:	3001      	adds	r0, #1
   151a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   151aa:	42a6      	cmp	r6, r4
   151ac:	d800      	bhi.n	151b0 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   151ae:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   151b0:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   151b4:	b18d      	cbz	r5, 151da <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   151b6:	4628      	mov	r0, r5
   151b8:	4798      	blx	r3
			if (rc != 0) {
   151ba:	b138      	cbz	r0, 151cc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   151bc:	2800      	cmp	r0, #0
   151be:	bfb8      	it	lt
   151c0:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   151c2:	28ff      	cmp	r0, #255	; 0xff
   151c4:	bfa8      	it	ge
   151c6:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   151c8:	68eb      	ldr	r3, [r5, #12]
   151ca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   151cc:	68ea      	ldr	r2, [r5, #12]
   151ce:	7853      	ldrb	r3, [r2, #1]
   151d0:	f043 0301 	orr.w	r3, r3, #1
   151d4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   151d6:	3408      	adds	r4, #8
   151d8:	e7e7      	b.n	151aa <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   151da:	4798      	blx	r3
   151dc:	e7fb      	b.n	151d6 <z_sys_init_run_level+0x3a>
   151de:	bf00      	nop
   151e0:	000311a8 	.word	0x000311a8

000151e4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   151e4:	2201      	movs	r2, #1
{
   151e6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   151e8:	4b09      	ldr	r3, [pc, #36]	; (15210 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   151ea:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   151ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   151ee:	f7ff ffd5 	bl	1519c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   151f2:	f001 fc55 	bl	16aa0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   151f6:	2004      	movs	r0, #4
   151f8:	f7ff ffd0 	bl	1519c <z_sys_init_run_level>

	z_init_static_threads();
   151fc:	f000 f990 	bl	15520 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   15200:	f009 fa2a 	bl	1e658 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15204:	4a03      	ldr	r2, [pc, #12]	; (15214 <bg_thread_main+0x30>)
   15206:	7b13      	ldrb	r3, [r2, #12]
   15208:	f023 0301 	bic.w	r3, r3, #1
   1520c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1520e:	bd08      	pop	{r3, pc}
   15210:	2000554d 	.word	0x2000554d
   15214:	200028a8 	.word	0x200028a8

00015218 <z_bss_zero>:
{
   15218:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1521a:	4803      	ldr	r0, [pc, #12]	; (15228 <z_bss_zero+0x10>)
   1521c:	4a03      	ldr	r2, [pc, #12]	; (1522c <z_bss_zero+0x14>)
   1521e:	2100      	movs	r1, #0
   15220:	1a12      	subs	r2, r2, r0
   15222:	f00e fd3e 	bl	23ca2 <z_early_memset>
}
   15226:	bd08      	pop	{r3, pc}
   15228:	20001438 	.word	0x20001438
   1522c:	20005550 	.word	0x20005550

00015230 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   15230:	2300      	movs	r3, #0
   15232:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   15234:	b570      	push	{r4, r5, r6, lr}
   15236:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   15238:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1523c:	220f      	movs	r2, #15
   1523e:	9301      	str	r3, [sp, #4]
   15240:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15244:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   15246:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1524a:	4d0e      	ldr	r5, [pc, #56]	; (15284 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
   1524c:	4e0e      	ldr	r6, [pc, #56]	; (15288 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1524e:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
   15252:	490e      	ldr	r1, [pc, #56]	; (1528c <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
   15254:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   15258:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1525a:	fb02 1100 	mla	r1, r2, r0, r1
   1525e:	4b0c      	ldr	r3, [pc, #48]	; (15290 <z_init_cpu+0x60>)
   15260:	4630      	mov	r0, r6
   15262:	9500      	str	r5, [sp, #0]
   15264:	f000 f8f2 	bl	1544c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15268:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   1526a:	752c      	strb	r4, [r5, #20]
   1526c:	f023 0304 	bic.w	r3, r3, #4
   15270:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   15272:	4b08      	ldr	r3, [pc, #32]	; (15294 <z_init_cpu+0x64>)
   15274:	3401      	adds	r4, #1
   15276:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1527a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1527c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1527e:	b006      	add	sp, #24
   15280:	bd70      	pop	{r4, r5, r6, pc}
   15282:	bf00      	nop
   15284:	200047dc 	.word	0x200047dc
   15288:	20002828 	.word	0x20002828
   1528c:	2000be50 	.word	0x2000be50
   15290:	000155d9 	.word	0x000155d9
   15294:	2000b650 	.word	0x2000b650

00015298 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   15298:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1529a:	2000      	movs	r0, #0
{
   1529c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1529e:	f7ff ff7d 	bl	1519c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   152a2:	4b2f      	ldr	r3, [pc, #188]	; (15360 <z_cstart+0xc8>)
	uint32_t msp =
   152a4:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   152a8:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   152ac:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   152b0:	2400      	movs	r4, #0
   152b2:	23e0      	movs	r3, #224	; 0xe0
   152b4:	4d2b      	ldr	r5, [pc, #172]	; (15364 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   152b6:	4e2c      	ldr	r6, [pc, #176]	; (15368 <z_cstart+0xd0>)
   152b8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   152bc:	77ec      	strb	r4, [r5, #31]
   152be:	762c      	strb	r4, [r5, #24]
   152c0:	766c      	strb	r4, [r5, #25]
   152c2:	76ac      	strb	r4, [r5, #26]
   152c4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   152c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   152ca:	4f28      	ldr	r7, [pc, #160]	; (1536c <z_cstart+0xd4>)
   152cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   152d0:	626b      	str	r3, [r5, #36]	; 0x24
   152d2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   152d6:	f7f1 fbbf 	bl	6a58 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   152da:	f7f0 ff15 	bl	6108 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   152de:	f04f 33ff 	mov.w	r3, #4294967295
   152e2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   152e4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   152e6:	f7f1 fe39 	bl	6f5c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   152ea:	f7f1 fc9f 	bl	6c2c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   152ee:	f7ef fc59 	bl	4ba4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   152f2:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   152f6:	ad06      	add	r5, sp, #24
   152f8:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   152fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   152fe:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   15302:	f001 fbaf 	bl	16a64 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   15306:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15308:	f00e fcbf 	bl	23c8a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1530c:	2001      	movs	r0, #1
   1530e:	f7ff ff45 	bl	1519c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   15312:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   15314:	4d16      	ldr	r5, [pc, #88]	; (15370 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   15316:	f7ff ff41 	bl	1519c <z_sys_init_run_level>
	z_sched_init();
   1531a:	f000 ff7d 	bl	16218 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1531e:	4b15      	ldr	r3, [pc, #84]	; (15374 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   15320:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15322:	9305      	str	r3, [sp, #20]
   15324:	2301      	movs	r3, #1
   15326:	4914      	ldr	r1, [pc, #80]	; (15378 <z_cstart+0xe0>)
   15328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1532c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   15330:	4628      	mov	r0, r5
   15332:	463b      	mov	r3, r7
   15334:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15338:	9400      	str	r4, [sp, #0]
   1533a:	f000 f887 	bl	1544c <z_setup_new_thread>
   1533e:	4606      	mov	r6, r0
   15340:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   15342:	4628      	mov	r0, r5
   15344:	f022 0204 	bic.w	r2, r2, #4
   15348:	736a      	strb	r2, [r5, #13]
   1534a:	f00e ff9f 	bl	2428c <z_ready_thread>
	z_init_cpu(0);
   1534e:	4620      	mov	r0, r4
   15350:	f7ff ff6e 	bl	15230 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15354:	463a      	mov	r2, r7
   15356:	4631      	mov	r1, r6
   15358:	4628      	mov	r0, r5
   1535a:	f7f1 f83f 	bl	63dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1535e:	bf00      	nop
   15360:	2000b650 	.word	0x2000b650
   15364:	e000ed00 	.word	0xe000ed00
   15368:	200047dc 	.word	0x200047dc
   1536c:	000151e5 	.word	0x000151e5
   15370:	200028a8 	.word	0x200028a8
   15374:	00036816 	.word	0x00036816
   15378:	2000bf90 	.word	0x2000bf90

0001537c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   1537c:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1537e:	4c06      	ldr	r4, [pc, #24]	; (15398 <statics_init+0x1c>)
   15380:	4d06      	ldr	r5, [pc, #24]	; (1539c <statics_init+0x20>)
   15382:	42ac      	cmp	r4, r5
   15384:	d301      	bcc.n	1538a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   15386:	2000      	movs	r0, #0
   15388:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1538a:	4620      	mov	r0, r4
   1538c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15390:	f00e fc8b 	bl	23caa <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15394:	3414      	adds	r4, #20
   15396:	e7f4      	b.n	15382 <statics_init+0x6>
   15398:	200011d4 	.word	0x200011d4
   1539c:	200011e8 	.word	0x200011e8

000153a0 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   153a0:	2000      	movs	r0, #0
{
   153a2:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   153a4:	4c05      	ldr	r4, [pc, #20]	; (153bc <init_mem_slab_module+0x1c>)
   153a6:	4d06      	ldr	r5, [pc, #24]	; (153c0 <init_mem_slab_module+0x20>)
   153a8:	42ac      	cmp	r4, r5
   153aa:	d300      	bcc.n	153ae <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   153ac:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   153ae:	4620      	mov	r0, r4
   153b0:	f00e fced 	bl	23d8e <create_free_list>
		if (rc < 0) {
   153b4:	2800      	cmp	r0, #0
   153b6:	dbf9      	blt.n	153ac <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   153b8:	341c      	adds	r4, #28
   153ba:	e7f5      	b.n	153a8 <init_mem_slab_module+0x8>
   153bc:	20001180 	.word	0x20001180
   153c0:	200011d4 	.word	0x200011d4

000153c4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   153c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   153c6:	460c      	mov	r4, r1
	__asm__ volatile(
   153c8:	f04f 0520 	mov.w	r5, #32
   153cc:	f3ef 8111 	mrs	r1, BASEPRI
   153d0:	f385 8812 	msr	BASEPRI_MAX, r5
   153d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   153d8:	6945      	ldr	r5, [r0, #20]
   153da:	b15d      	cbz	r5, 153f4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   153dc:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   153de:	682b      	ldr	r3, [r5, #0]
   153e0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   153e2:	6983      	ldr	r3, [r0, #24]
   153e4:	3301      	adds	r3, #1
   153e6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   153e8:	2000      	movs	r0, #0
	__asm__ volatile(
   153ea:	f381 8811 	msr	BASEPRI, r1
   153ee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   153f2:	e011      	b.n	15418 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   153f4:	ea52 0603 	orrs.w	r6, r2, r3
   153f8:	d103      	bne.n	15402 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   153fa:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   153fe:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   15400:	e7f3      	b.n	153ea <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   15402:	e9cd 2300 	strd	r2, r3, [sp]
   15406:	4602      	mov	r2, r0
   15408:	3008      	adds	r0, #8
   1540a:	f000 fe0f 	bl	1602c <z_pend_curr>
		if (result == 0) {
   1540e:	b918      	cbnz	r0, 15418 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   15410:	4b02      	ldr	r3, [pc, #8]	; (1541c <k_mem_slab_alloc+0x58>)
   15412:	689b      	ldr	r3, [r3, #8]
   15414:	695b      	ldr	r3, [r3, #20]
   15416:	6023      	str	r3, [r4, #0]
}
   15418:	b002      	add	sp, #8
   1541a:	bd70      	pop	{r4, r5, r6, pc}
   1541c:	200047dc 	.word	0x200047dc

00015420 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   15420:	4b09      	ldr	r3, [pc, #36]	; (15448 <z_check_stack_sentinel+0x28>)
   15422:	689b      	ldr	r3, [r3, #8]
   15424:	7b5a      	ldrb	r2, [r3, #13]
   15426:	07d2      	lsls	r2, r2, #31
   15428:	d40d      	bmi.n	15446 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
   1542a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	if (*stack != STACK_SENTINEL) {
   1542c:	681a      	ldr	r2, [r3, #0]
   1542e:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   15432:	d008      	beq.n	15446 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   15434:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   15438:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   1543a:	4040      	eors	r0, r0
   1543c:	f380 8811 	msr	BASEPRI, r0
   15440:	f04f 0002 	mov.w	r0, #2
   15444:	df02      	svc	2
	}
}
   15446:	4770      	bx	lr
   15448:	200047dc 	.word	0x200047dc

0001544c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1544c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15450:	4698      	mov	r8, r3
   15452:	b085      	sub	sp, #20
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   15454:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   15458:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1545c:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   1545e:	460d      	mov	r5, r1
	thread_base->user_options = (uint8_t)options;
   15460:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15462:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   15464:	2700      	movs	r7, #0
	thread_base->thread_state = (uint8_t)initial_state;
   15466:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15468:	3207      	adds	r2, #7

	thread_base->prio = priority;
   1546a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1546c:	f022 0607 	bic.w	r6, r2, #7
{
   15470:	4604      	mov	r4, r0
	thread_base->prio = priority;
   15472:	7383      	strb	r3, [r0, #14]
   15474:	4632      	mov	r2, r6
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   15476:	e9c0 7706 	strd	r7, r7, [r0, #24]
	thread_base->pended_on = NULL;
   1547a:	6087      	str	r7, [r0, #8]

	thread_base->sched_locked = 0U;
   1547c:	73c7      	strb	r7, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
   1547e:	eb01 0906 	add.w	r9, r1, r6
   15482:	4628      	mov	r0, r5
   15484:	21aa      	movs	r1, #170	; 0xaa
   15486:	f001 ffa7 	bl	173d8 <memset>
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
   1548a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
   1548e:	602b      	str	r3, [r5, #0]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	new_thread->stack_info.size = stack_buf_size;
   15492:	e9c4 561a 	strd	r5, r6, [r4, #104]	; 0x68
	new_thread->stack_info.delta = delta;
   15496:	6727      	str	r7, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15498:	9302      	str	r3, [sp, #8]
   1549a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1549c:	464a      	mov	r2, r9
   1549e:	9301      	str	r3, [sp, #4]
   154a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154a2:	4629      	mov	r1, r5
   154a4:	9300      	str	r3, [sp, #0]
   154a6:	4620      	mov	r0, r4
   154a8:	4643      	mov	r3, r8
   154aa:	f7f0 ff7b 	bl	63a4 <arch_new_thread>
	if (!_current) {
   154ae:	4b05      	ldr	r3, [pc, #20]	; (154c4 <z_setup_new_thread+0x78>)
	new_thread->init_data = NULL;
   154b0:	6567      	str	r7, [r4, #84]	; 0x54
	if (!_current) {
   154b2:	689b      	ldr	r3, [r3, #8]
   154b4:	b103      	cbz	r3, 154b8 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   154b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   154b8:	4648      	mov	r0, r9
   154ba:	6763      	str	r3, [r4, #116]	; 0x74
   154bc:	b005      	add	sp, #20
   154be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   154c2:	bf00      	nop
   154c4:	200047dc 	.word	0x200047dc

000154c8 <z_impl_k_thread_create>:
{
   154c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   154ca:	2500      	movs	r5, #0
{
   154cc:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   154ce:	9505      	str	r5, [sp, #20]
   154d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   154d2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   154d6:	9504      	str	r5, [sp, #16]
   154d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   154da:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   154dc:	9503      	str	r5, [sp, #12]
   154de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   154e0:	9502      	str	r5, [sp, #8]
   154e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   154e4:	9501      	str	r5, [sp, #4]
   154e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   154e8:	9500      	str	r5, [sp, #0]
   154ea:	f7ff ffaf 	bl	1544c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   154ee:	f1b6 3fff 	cmp.w	r6, #4294967295
   154f2:	bf08      	it	eq
   154f4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   154f8:	d005      	beq.n	15506 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   154fa:	ea56 0307 	orrs.w	r3, r6, r7
   154fe:	d105      	bne.n	1550c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   15500:	4620      	mov	r0, r4
   15502:	f000 fe09 	bl	16118 <z_sched_start>
}
   15506:	4620      	mov	r0, r4
   15508:	b007      	add	sp, #28
   1550a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1550c:	463a      	mov	r2, r7
   1550e:	4633      	mov	r3, r6
   15510:	4902      	ldr	r1, [pc, #8]	; (1551c <z_impl_k_thread_create+0x54>)
   15512:	f104 0018 	add.w	r0, r4, #24
   15516:	f001 f87d 	bl	16614 <z_add_timeout>
   1551a:	e7f4      	b.n	15506 <z_impl_k_thread_create+0x3e>
   1551c:	00024315 	.word	0x00024315

00015520 <z_init_static_threads>:
{
   15520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15524:	4c29      	ldr	r4, [pc, #164]	; (155cc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   15526:	4d2a      	ldr	r5, [pc, #168]	; (155d0 <z_init_static_threads+0xb0>)
{
   15528:	b087      	sub	sp, #28
   1552a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1552c:	42ae      	cmp	r6, r5
   1552e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   15532:	d30f      	bcc.n	15554 <z_init_static_threads+0x34>
	k_sched_lock();
   15534:	f000 fe40 	bl	161b8 <k_sched_lock>
   15538:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1553c:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   15540:	4c22      	ldr	r4, [pc, #136]	; (155cc <z_init_static_threads+0xac>)
   15542:	f8df 9090 	ldr.w	r9, [pc, #144]	; 155d4 <z_init_static_threads+0xb4>
   15546:	42ac      	cmp	r4, r5
   15548:	d320      	bcc.n	1558c <z_init_static_threads+0x6c>
}
   1554a:	b007      	add	sp, #28
   1554c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   15550:	f000 be46 	b.w	161e0 <k_sched_unlock>
		z_setup_new_thread(
   15554:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15558:	9305      	str	r3, [sp, #20]
   1555a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1555e:	9304      	str	r3, [sp, #16]
   15560:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15564:	9303      	str	r3, [sp, #12]
   15566:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1556a:	9302      	str	r3, [sp, #8]
   1556c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15570:	9301      	str	r3, [sp, #4]
   15572:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15576:	9300      	str	r3, [sp, #0]
   15578:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1557c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   15580:	f7ff ff64 	bl	1544c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15584:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   15588:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1558a:	e7ce      	b.n	1552a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1558c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1558e:	1c5a      	adds	r2, r3, #1
   15590:	d00d      	beq.n	155ae <z_init_static_threads+0x8e>
   15592:	2100      	movs	r1, #0
   15594:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   15596:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1559a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1559e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   155a2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   155a6:	d104      	bne.n	155b2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   155a8:	4640      	mov	r0, r8
   155aa:	f000 fdb5 	bl	16118 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   155ae:	342c      	adds	r4, #44	; 0x2c
   155b0:	e7c9      	b.n	15546 <z_init_static_threads+0x26>
   155b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   155b6:	2300      	movs	r3, #0
   155b8:	f7eb fa0c 	bl	9d4 <__aeabi_uldivmod>
   155bc:	4602      	mov	r2, r0
   155be:	460b      	mov	r3, r1
   155c0:	f108 0018 	add.w	r0, r8, #24
   155c4:	4649      	mov	r1, r9
   155c6:	f001 f825 	bl	16614 <z_add_timeout>
   155ca:	e7f0      	b.n	155ae <z_init_static_threads+0x8e>
   155cc:	00024c10 	.word	0x00024c10
   155d0:	00024c10 	.word	0x00024c10
   155d4:	00024315 	.word	0x00024315

000155d8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   155d8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   155da:	4c0b      	ldr	r4, [pc, #44]	; (15608 <idle+0x30>)
	return !z_sys_post_kernel;
   155dc:	4d0b      	ldr	r5, [pc, #44]	; (1560c <idle+0x34>)
	__asm__ volatile(
   155de:	f04f 0220 	mov.w	r2, #32
   155e2:	f3ef 8311 	mrs	r3, BASEPRI
   155e6:	f382 8812 	msr	BASEPRI_MAX, r2
   155ea:	f3bf 8f6f 	isb	sy
   155ee:	f00e ff53 	bl	24498 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   155f2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   155f4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   155f6:	b913      	cbnz	r3, 155fe <idle+0x26>
	arch_cpu_idle();
   155f8:	f7f0 fd8c 	bl	6114 <arch_cpu_idle>
}
   155fc:	e7ef      	b.n	155de <idle+0x6>
   155fe:	f7ef ff97 	bl	5530 <pm_system_suspend>
   15602:	2800      	cmp	r0, #0
   15604:	d1eb      	bne.n	155de <idle+0x6>
   15606:	e7f7      	b.n	155f8 <idle+0x20>
   15608:	200047dc 	.word	0x200047dc
   1560c:	2000554d 	.word	0x2000554d

00015610 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   15610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15614:	4604      	mov	r4, r0
   15616:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   15618:	f100 0808 	add.w	r8, r0, #8
   1561c:	f04f 0120 	mov.w	r1, #32
   15620:	f3ef 8711 	mrs	r7, BASEPRI
   15624:	f381 8812 	msr	BASEPRI_MAX, r1
   15628:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   1562c:	6a05      	ldr	r5, [r0, #32]
   1562e:	68c1      	ldr	r1, [r0, #12]
   15630:	428d      	cmp	r5, r1
   15632:	d231      	bcs.n	15698 <z_impl_k_msgq_put+0x88>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   15634:	f00e fe89 	bl	2434a <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15638:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   1563a:	4605      	mov	r5, r0
   1563c:	68a2      	ldr	r2, [r4, #8]
   1563e:	b178      	cbz	r0, 15660 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15640:	2400      	movs	r4, #0
   15642:	6940      	ldr	r0, [r0, #20]
   15644:	f7eb fa86 	bl	b54 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   15648:	4628      	mov	r0, r5
   1564a:	67ec      	str	r4, [r5, #124]	; 0x7c
   1564c:	f00e fe1e 	bl	2428c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   15650:	4640      	mov	r0, r8
   15652:	4639      	mov	r1, r7
   15654:	f000 fd4e 	bl	160f4 <z_reschedule>
			return 0;
   15658:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1565a:	b002      	add	sp, #8
   1565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15660:	69e0      	ldr	r0, [r4, #28]
   15662:	f7eb fa77 	bl	b54 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   15666:	69e3      	ldr	r3, [r4, #28]
   15668:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1566a:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
   1566e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   15670:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   15672:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   15674:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   15676:	bf08      	it	eq
   15678:	6923      	ldreq	r3, [r4, #16]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1567a:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   1567e:	bf08      	it	eq
   15680:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   15682:	6a23      	ldr	r3, [r4, #32]
   15684:	3301      	adds	r3, #1
   15686:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   15688:	f00f f8ab 	bl	247e2 <z_handle_obj_poll_events>
		result = 0;
   1568c:	2000      	movs	r0, #0
	__asm__ volatile(
   1568e:	f387 8811 	msr	BASEPRI, r7
   15692:	f3bf 8f6f 	isb	sy
	return result;
   15696:	e7e0      	b.n	1565a <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15698:	ea52 0103 	orrs.w	r1, r2, r3
   1569c:	d00a      	beq.n	156b4 <z_impl_k_msgq_put+0xa4>
		_current->base.swap_data = (void *) data;
   1569e:	4907      	ldr	r1, [pc, #28]	; (156bc <z_impl_k_msgq_put+0xac>)
   156a0:	6889      	ldr	r1, [r1, #8]
   156a2:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   156a4:	e9cd 2300 	strd	r2, r3, [sp]
   156a8:	4639      	mov	r1, r7
   156aa:	4602      	mov	r2, r0
   156ac:	4640      	mov	r0, r8
   156ae:	f000 fcbd 	bl	1602c <z_pend_curr>
		return result;
   156b2:	e7d2      	b.n	1565a <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   156b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   156b8:	e7e9      	b.n	1568e <z_impl_k_msgq_put+0x7e>
   156ba:	bf00      	nop
   156bc:	200047dc 	.word	0x200047dc

000156c0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   156c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156c2:	4604      	mov	r4, r0
   156c4:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   156c6:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   156ca:	f04f 0120 	mov.w	r1, #32
   156ce:	f3ef 8611 	mrs	r6, BASEPRI
   156d2:	f381 8812 	msr	BASEPRI_MAX, r1
   156d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   156da:	6a21      	ldr	r1, [r4, #32]
   156dc:	2900      	cmp	r1, #0
   156de:	d031      	beq.n	15744 <z_impl_k_msgq_get+0x84>
   156e0:	68a2      	ldr	r2, [r4, #8]
   156e2:	69a1      	ldr	r1, [r4, #24]
   156e4:	f7eb fa36 	bl	b54 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   156e8:	69a3      	ldr	r3, [r4, #24]
   156ea:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   156ec:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   156ee:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   156f0:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   156f2:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   156f4:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   156f6:	bf04      	itt	eq
   156f8:	6923      	ldreq	r3, [r4, #16]
   156fa:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   156fc:	6a23      	ldr	r3, [r4, #32]
   156fe:	3b01      	subs	r3, #1
   15700:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   15702:	f00e fe22 	bl	2434a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   15706:	4605      	mov	r5, r0
   15708:	b360      	cbz	r0, 15764 <z_impl_k_msgq_get+0xa4>
   1570a:	6941      	ldr	r1, [r0, #20]
   1570c:	68a2      	ldr	r2, [r4, #8]
   1570e:	69e0      	ldr	r0, [r4, #28]
   15710:	f7eb fa20 	bl	b54 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   15714:	69e3      	ldr	r3, [r4, #28]
   15716:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   15718:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1571a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1571c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1571e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   15720:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   15722:	bf04      	itt	eq
   15724:	6923      	ldreq	r3, [r4, #16]
   15726:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   15728:	6a23      	ldr	r3, [r4, #32]
   1572a:	3301      	adds	r3, #1
   1572c:	6223      	str	r3, [r4, #32]
   1572e:	2400      	movs	r4, #0
   15730:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   15732:	f00e fdab 	bl	2428c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   15736:	4638      	mov	r0, r7
   15738:	4631      	mov	r1, r6
   1573a:	f000 fcdb 	bl	160f4 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   1573e:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   15740:	b003      	add	sp, #12
   15742:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15744:	ea52 0103 	orrs.w	r1, r2, r3
   15748:	d00a      	beq.n	15760 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   1574a:	4909      	ldr	r1, [pc, #36]	; (15770 <z_impl_k_msgq_get+0xb0>)
   1574c:	6889      	ldr	r1, [r1, #8]
   1574e:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   15750:	e9cd 2300 	strd	r2, r3, [sp]
   15754:	4631      	mov	r1, r6
   15756:	4622      	mov	r2, r4
   15758:	4638      	mov	r0, r7
   1575a:	f000 fc67 	bl	1602c <z_pend_curr>
		return result;
   1575e:	e7ef      	b.n	15740 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   15760:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   15764:	f386 8811 	msr	BASEPRI, r6
   15768:	f3bf 8f6f 	isb	sy
	return result;
   1576c:	e7e8      	b.n	15740 <z_impl_k_msgq_get+0x80>
   1576e:	bf00      	nop
   15770:	200047dc 	.word	0x200047dc

00015774 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   15774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15778:	4604      	mov	r4, r0
   1577a:	4617      	mov	r7, r2
   1577c:	461e      	mov	r6, r3
	__asm__ volatile(
   1577e:	f04f 0320 	mov.w	r3, #32
   15782:	f3ef 8811 	mrs	r8, BASEPRI
   15786:	f383 8812 	msr	BASEPRI_MAX, r3
   1578a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1578e:	68c3      	ldr	r3, [r0, #12]
   15790:	4a33      	ldr	r2, [pc, #204]	; (15860 <z_impl_k_mutex_lock+0xec>)
   15792:	b17b      	cbz	r3, 157b4 <z_impl_k_mutex_lock+0x40>
   15794:	6880      	ldr	r0, [r0, #8]
   15796:	6891      	ldr	r1, [r2, #8]
   15798:	4288      	cmp	r0, r1
   1579a:	d019      	beq.n	157d0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1579c:	ea57 0306 	orrs.w	r3, r7, r6
   157a0:	d118      	bne.n	157d4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   157a2:	f388 8811 	msr	BASEPRI, r8
   157a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   157aa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   157ae:	b002      	add	sp, #8
   157b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   157b4:	6891      	ldr	r1, [r2, #8]
   157b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   157ba:	3301      	adds	r3, #1
   157bc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   157be:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   157c0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   157c2:	60a3      	str	r3, [r4, #8]
   157c4:	f388 8811 	msr	BASEPRI, r8
   157c8:	f3bf 8f6f 	isb	sy
		return 0;
   157cc:	2000      	movs	r0, #0
   157ce:	e7ee      	b.n	157ae <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   157d0:	6921      	ldr	r1, [r4, #16]
   157d2:	e7f2      	b.n	157ba <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   157d4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   157d8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   157dc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   157e0:	4299      	cmp	r1, r3
   157e2:	bfa8      	it	ge
   157e4:	4619      	movge	r1, r3
   157e6:	4291      	cmp	r1, r2
   157e8:	bfb8      	it	lt
   157ea:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   157ec:	428b      	cmp	r3, r1
   157ee:	dd2e      	ble.n	1584e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   157f0:	f00e fb2e 	bl	23e50 <adjust_owner_prio.isra.0>
   157f4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   157f6:	4622      	mov	r2, r4
   157f8:	4641      	mov	r1, r8
   157fa:	e9cd 7600 	strd	r7, r6, [sp]
   157fe:	4819      	ldr	r0, [pc, #100]	; (15864 <z_impl_k_mutex_lock+0xf0>)
   15800:	f000 fc14 	bl	1602c <z_pend_curr>
	if (got_mutex == 0) {
   15804:	2800      	cmp	r0, #0
   15806:	d0e1      	beq.n	157cc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   15808:	f04f 0320 	mov.w	r3, #32
   1580c:	f3ef 8611 	mrs	r6, BASEPRI
   15810:	f383 8812 	msr	BASEPRI_MAX, r3
   15814:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   15818:	68a0      	ldr	r0, [r4, #8]
   1581a:	b1d0      	cbz	r0, 15852 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1581c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1581e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15820:	429c      	cmp	r4, r3
   15822:	d00a      	beq.n	1583a <z_impl_k_mutex_lock+0xc6>
   15824:	b14b      	cbz	r3, 1583a <z_impl_k_mutex_lock+0xc6>
   15826:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1582a:	4299      	cmp	r1, r3
   1582c:	bfa8      	it	ge
   1582e:	4619      	movge	r1, r3
   15830:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   15834:	4299      	cmp	r1, r3
   15836:	bfb8      	it	lt
   15838:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1583a:	f00e fb09 	bl	23e50 <adjust_owner_prio.isra.0>
   1583e:	b140      	cbz	r0, 15852 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   15840:	4631      	mov	r1, r6
   15842:	4808      	ldr	r0, [pc, #32]	; (15864 <z_impl_k_mutex_lock+0xf0>)
   15844:	f000 fc56 	bl	160f4 <z_reschedule>
	return -EAGAIN;
   15848:	f06f 000a 	mvn.w	r0, #10
   1584c:	e7af      	b.n	157ae <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1584e:	2500      	movs	r5, #0
   15850:	e7d1      	b.n	157f6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   15852:	2d00      	cmp	r5, #0
   15854:	d1f4      	bne.n	15840 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   15856:	f386 8811 	msr	BASEPRI, r6
   1585a:	f3bf 8f6f 	isb	sy
   1585e:	e7f3      	b.n	15848 <z_impl_k_mutex_lock+0xd4>
   15860:	200047dc 	.word	0x200047dc
   15864:	2000554e 	.word	0x2000554e

00015868 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   15868:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1586a:	6883      	ldr	r3, [r0, #8]
{
   1586c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1586e:	b36b      	cbz	r3, 158cc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   15870:	4a19      	ldr	r2, [pc, #100]	; (158d8 <z_impl_k_mutex_unlock+0x70>)
   15872:	6892      	ldr	r2, [r2, #8]
   15874:	4293      	cmp	r3, r2
   15876:	d12c      	bne.n	158d2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   15878:	68c3      	ldr	r3, [r0, #12]
   1587a:	2b01      	cmp	r3, #1
   1587c:	d903      	bls.n	15886 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1587e:	3b01      	subs	r3, #1
   15880:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   15882:	2000      	movs	r0, #0
}
   15884:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15886:	f04f 0320 	mov.w	r3, #32
   1588a:	f3ef 8511 	mrs	r5, BASEPRI
   1588e:	f383 8812 	msr	BASEPRI_MAX, r3
   15892:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   15896:	6901      	ldr	r1, [r0, #16]
   15898:	6880      	ldr	r0, [r0, #8]
   1589a:	f00e fad9 	bl	23e50 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1589e:	4620      	mov	r0, r4
   158a0:	f00e fd53 	bl	2434a <z_unpend_first_thread>
	mutex->owner = new_owner;
   158a4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   158a6:	b158      	cbz	r0, 158c0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   158a8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   158ac:	6122      	str	r2, [r4, #16]
   158ae:	2200      	movs	r2, #0
   158b0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   158b2:	f00e fceb 	bl	2428c <z_ready_thread>
		z_reschedule(&lock, key);
   158b6:	4629      	mov	r1, r5
   158b8:	4808      	ldr	r0, [pc, #32]	; (158dc <z_impl_k_mutex_unlock+0x74>)
   158ba:	f000 fc1b 	bl	160f4 <z_reschedule>
   158be:	e7e0      	b.n	15882 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   158c0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   158c2:	f385 8811 	msr	BASEPRI, r5
   158c6:	f3bf 8f6f 	isb	sy
   158ca:	e7da      	b.n	15882 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   158cc:	f06f 0015 	mvn.w	r0, #21
   158d0:	e7d8      	b.n	15884 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   158d2:	f04f 30ff 	mov.w	r0, #4294967295
   158d6:	e7d5      	b.n	15884 <z_impl_k_mutex_unlock+0x1c>
   158d8:	200047dc 	.word	0x200047dc
   158dc:	2000554e 	.word	0x2000554e

000158e0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   158e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   158e2:	4611      	mov	r1, r2
	__asm__ volatile(
   158e4:	f04f 0220 	mov.w	r2, #32
   158e8:	f3ef 8511 	mrs	r5, BASEPRI
   158ec:	f382 8812 	msr	BASEPRI_MAX, r2
   158f0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   158f4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   158f6:	b19c      	cbz	r4, 15920 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   158f8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   158fa:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   158fc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   15900:	4294      	cmp	r4, r2
	list->head = node;
   15902:	6003      	str	r3, [r0, #0]
	list->tail = node;
   15904:	bf08      	it	eq
   15906:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   15908:	2101      	movs	r1, #1
   1590a:	4620      	mov	r0, r4
   1590c:	f00e fb15 	bl	23f3a <z_queue_node_peek>
   15910:	4604      	mov	r4, r0
	__asm__ volatile(
   15912:	f385 8811 	msr	BASEPRI, r5
   15916:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1591a:	4620      	mov	r0, r4
   1591c:	b003      	add	sp, #12
   1591e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15920:	ea51 0203 	orrs.w	r2, r1, r3
   15924:	d0f5      	beq.n	15912 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15926:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1592a:	e9cd 1300 	strd	r1, r3, [sp]
   1592e:	4610      	mov	r0, r2
   15930:	4629      	mov	r1, r5
   15932:	f000 fb7b 	bl	1602c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   15936:	2800      	cmp	r0, #0
   15938:	d1ef      	bne.n	1591a <z_impl_k_queue_get+0x3a>
   1593a:	4b02      	ldr	r3, [pc, #8]	; (15944 <z_impl_k_queue_get+0x64>)
   1593c:	689b      	ldr	r3, [r3, #8]
   1593e:	695c      	ldr	r4, [r3, #20]
   15940:	e7eb      	b.n	1591a <z_impl_k_queue_get+0x3a>
   15942:	bf00      	nop
   15944:	200047dc 	.word	0x200047dc

00015948 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   15948:	b538      	push	{r3, r4, r5, lr}
   1594a:	4604      	mov	r4, r0
	__asm__ volatile(
   1594c:	f04f 0320 	mov.w	r3, #32
   15950:	f3ef 8511 	mrs	r5, BASEPRI
   15954:	f383 8812 	msr	BASEPRI_MAX, r3
   15958:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1595c:	f00e fcf5 	bl	2434a <z_unpend_first_thread>

	if (thread != NULL) {
   15960:	b148      	cbz	r0, 15976 <z_impl_k_sem_give+0x2e>
   15962:	2200      	movs	r2, #0
   15964:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15966:	f00e fc91 	bl	2428c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1596a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1596c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   15970:	4807      	ldr	r0, [pc, #28]	; (15990 <z_impl_k_sem_give+0x48>)
   15972:	f000 bbbf 	b.w	160f4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15976:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1597a:	429a      	cmp	r2, r3
   1597c:	bf18      	it	ne
   1597e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15980:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15982:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15984:	f104 0010 	add.w	r0, r4, #16
   15988:	f00e ff2b 	bl	247e2 <z_handle_obj_poll_events>
}
   1598c:	e7ed      	b.n	1596a <z_impl_k_sem_give+0x22>
   1598e:	bf00      	nop
   15990:	2000554e 	.word	0x2000554e

00015994 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15994:	b513      	push	{r0, r1, r4, lr}
   15996:	f04f 0420 	mov.w	r4, #32
   1599a:	f3ef 8111 	mrs	r1, BASEPRI
   1599e:	f384 8812 	msr	BASEPRI_MAX, r4
   159a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   159a6:	6884      	ldr	r4, [r0, #8]
   159a8:	b144      	cbz	r4, 159bc <z_impl_k_sem_take+0x28>
		sem->count--;
   159aa:	3c01      	subs	r4, #1
   159ac:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   159ae:	f381 8811 	msr	BASEPRI, r1
   159b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   159b6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   159b8:	b002      	add	sp, #8
   159ba:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   159bc:	ea52 0403 	orrs.w	r4, r2, r3
   159c0:	d106      	bne.n	159d0 <z_impl_k_sem_take+0x3c>
   159c2:	f381 8811 	msr	BASEPRI, r1
   159c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   159ca:	f06f 000f 	mvn.w	r0, #15
   159ce:	e7f3      	b.n	159b8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   159d0:	e9cd 2300 	strd	r2, r3, [sp]
   159d4:	4602      	mov	r2, r0
   159d6:	4802      	ldr	r0, [pc, #8]	; (159e0 <z_impl_k_sem_take+0x4c>)
   159d8:	f000 fb28 	bl	1602c <z_pend_curr>
	return ret;
   159dc:	e7ec      	b.n	159b8 <z_impl_k_sem_take+0x24>
   159de:	bf00      	nop
   159e0:	2000554e 	.word	0x2000554e

000159e4 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   159e4:	b570      	push	{r4, r5, r6, lr}
   159e6:	4604      	mov	r4, r0
	__asm__ volatile(
   159e8:	f04f 0320 	mov.w	r3, #32
   159ec:	f3ef 8511 	mrs	r5, BASEPRI
   159f0:	f383 8812 	msr	BASEPRI_MAX, r3
   159f4:	f3bf 8f6f 	isb	sy
   159f8:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   159fc:	4620      	mov	r0, r4
   159fe:	f00e fca4 	bl	2434a <z_unpend_first_thread>
		if (thread == NULL) {
   15a02:	b118      	cbz	r0, 15a0c <z_impl_k_sem_reset+0x28>
   15a04:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   15a06:	f00e fc41 	bl	2428c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   15a0a:	e7f7      	b.n	159fc <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   15a0c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15a0e:	2102      	movs	r1, #2
   15a10:	f104 0010 	add.w	r0, r4, #16
   15a14:	f00e fee5 	bl	247e2 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   15a18:	4629      	mov	r1, r5
}
   15a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   15a1e:	4801      	ldr	r0, [pc, #4]	; (15a24 <z_impl_k_sem_reset+0x40>)
   15a20:	f000 bb68 	b.w	160f4 <z_reschedule>
   15a24:	2000554e 	.word	0x2000554e

00015a28 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   15a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a2c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   15a2e:	f04f 38ff 	mov.w	r8, #4294967295
   15a32:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   15a36:	4e48      	ldr	r6, [pc, #288]	; (15b58 <work_queue_main+0x130>)
{
   15a38:	b085      	sub	sp, #20
   15a3a:	f04f 0320 	mov.w	r3, #32
   15a3e:	f3ef 8711 	mrs	r7, BASEPRI
   15a42:	f383 8812 	msr	BASEPRI_MAX, r3
   15a46:	f3bf 8f6f 	isb	sy
   15a4a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   15a4e:	b98d      	cbnz	r5, 15a74 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   15a50:	2102      	movs	r1, #2
   15a52:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15a56:	f00e fae4 	bl	24022 <flag_test_and_clear>
   15a5a:	2800      	cmp	r0, #0
   15a5c:	d143      	bne.n	15ae6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   15a5e:	2300      	movs	r3, #0
   15a60:	4639      	mov	r1, r7
   15a62:	e9cd 8900 	strd	r8, r9, [sp]
   15a66:	9302      	str	r3, [sp, #8]
   15a68:	f104 0288 	add.w	r2, r4, #136	; 0x88
   15a6c:	483b      	ldr	r0, [pc, #236]	; (15b5c <work_queue_main+0x134>)
   15a6e:	f000 fcf7 	bl	16460 <z_sched_wait>
			continue;
   15a72:	e7e2      	b.n	15a3a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15a74:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   15a78:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15a7a:	4295      	cmp	r5, r2
	list->head = node;
   15a7c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = node;
   15a80:	bf08      	it	eq
   15a82:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   15a86:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15a8a:	f043 0302 	orr.w	r3, r3, #2
   15a8e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   15a92:	68eb      	ldr	r3, [r5, #12]
   15a94:	f023 0304 	bic.w	r3, r3, #4
   15a98:	f043 0301 	orr.w	r3, r3, #1
   15a9c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   15a9e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   15aa0:	f387 8811 	msr	BASEPRI, r7
   15aa4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   15aa8:	4628      	mov	r0, r5
   15aaa:	4798      	blx	r3
	__asm__ volatile(
   15aac:	f04f 0320 	mov.w	r3, #32
   15ab0:	f3ef 8b11 	mrs	fp, BASEPRI
   15ab4:	f383 8812 	msr	BASEPRI_MAX, r3
   15ab8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   15abc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15abe:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   15ac0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15ac4:	d419      	bmi.n	15afa <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   15ac6:	60ea      	str	r2, [r5, #12]
   15ac8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15acc:	f023 0302 	bic.w	r3, r3, #2
   15ad0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   15ad4:	f38b 8811 	msr	BASEPRI, fp
   15ad8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   15adc:	05db      	lsls	r3, r3, #23
   15ade:	d4ac      	bmi.n	15a3a <work_queue_main+0x12>
	z_impl_k_yield();
   15ae0:	f000 fba2 	bl	16228 <z_impl_k_yield>
}
   15ae4:	e7a9      	b.n	15a3a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   15ae6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   15aea:	2200      	movs	r2, #0
   15aec:	2101      	movs	r1, #1
   15aee:	4628      	mov	r0, r5
   15af0:	f00e fc85 	bl	243fe <z_sched_wake>
   15af4:	2800      	cmp	r0, #0
   15af6:	d1f8      	bne.n	15aea <work_queue_main+0xc2>
   15af8:	e7b1      	b.n	15a5e <work_queue_main+0x36>
	return list->head;
   15afa:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   15afc:	f023 0303 	bic.w	r3, r3, #3
   15b00:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15b02:	2800      	cmp	r0, #0
   15b04:	d0e0      	beq.n	15ac8 <work_queue_main+0xa0>
	return node->next;
   15b06:	2700      	movs	r7, #0
	parent->next = child;
   15b08:	463b      	mov	r3, r7
	return node->next;
   15b0a:	f8d0 a000 	ldr.w	sl, [r0]
   15b0e:	2800      	cmp	r0, #0
   15b10:	d0da      	beq.n	15ac8 <work_queue_main+0xa0>
		if (wc->work == work) {
   15b12:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   15b14:	4601      	mov	r1, r0
		if (wc->work == work) {
   15b16:	4295      	cmp	r5, r2
   15b18:	d10c      	bne.n	15b34 <work_queue_main+0x10c>
   15b1a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   15b1c:	b99f      	cbnz	r7, 15b46 <work_queue_main+0x11e>
   15b1e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   15b20:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   15b22:	4282      	cmp	r2, r0
   15b24:	d100      	bne.n	15b28 <work_queue_main+0x100>
	list->tail = node;
   15b26:	6071      	str	r1, [r6, #4]
	parent->next = child;
   15b28:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   15b2c:	f7ff ff0c 	bl	15948 <z_impl_k_sem_give>
}
   15b30:	4639      	mov	r1, r7
   15b32:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15b34:	f1ba 0f00 	cmp.w	sl, #0
   15b38:	d00b      	beq.n	15b52 <work_queue_main+0x12a>
	return node->next;
   15b3a:	f8da 2000 	ldr.w	r2, [sl]
   15b3e:	4650      	mov	r0, sl
   15b40:	460f      	mov	r7, r1
   15b42:	4692      	mov	sl, r2
   15b44:	e7e3      	b.n	15b0e <work_queue_main+0xe6>
	parent->next = child;
   15b46:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   15b48:	6872      	ldr	r2, [r6, #4]
   15b4a:	4282      	cmp	r2, r0
	list->tail = node;
   15b4c:	bf08      	it	eq
   15b4e:	6077      	streq	r7, [r6, #4]
}
   15b50:	e7ea      	b.n	15b28 <work_queue_main+0x100>
   15b52:	4652      	mov	r2, sl
   15b54:	e7f3      	b.n	15b3e <work_queue_main+0x116>
   15b56:	bf00      	nop
   15b58:	20004804 	.word	0x20004804
   15b5c:	2000554e 	.word	0x2000554e

00015b60 <submit_to_queue_locked>:
{
   15b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   15b62:	68c3      	ldr	r3, [r0, #12]
{
   15b64:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15b66:	079a      	lsls	r2, r3, #30
{
   15b68:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15b6a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   15b6e:	d42c      	bmi.n	15bca <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   15b70:	075b      	lsls	r3, r3, #29
   15b72:	d41a      	bmi.n	15baa <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   15b74:	680b      	ldr	r3, [r1, #0]
   15b76:	b90b      	cbnz	r3, 15b7c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   15b78:	6883      	ldr	r3, [r0, #8]
   15b7a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   15b7c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   15b7e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   15b80:	bf42      	ittt	mi
   15b82:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   15b84:	2602      	movmi	r6, #2
			*queuep = work->queue;
   15b86:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   15b88:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   15b8a:	bf58      	it	pl
   15b8c:	2601      	movpl	r6, #1
	if (queue == NULL) {
   15b8e:	2d00      	cmp	r5, #0
   15b90:	d03a      	beq.n	15c08 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   15b92:	4b1f      	ldr	r3, [pc, #124]	; (15c10 <submit_to_queue_locked+0xb0>)
   15b94:	689b      	ldr	r3, [r3, #8]
   15b96:	42ab      	cmp	r3, r5
   15b98:	d00a      	beq.n	15bb0 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   15b9a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15b9e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   15ba0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15ba4:	d414      	bmi.n	15bd0 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   15ba6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   15baa:	2300      	movs	r3, #0
   15bac:	603b      	str	r3, [r7, #0]
	return ret;
   15bae:	e025      	b.n	15bfc <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   15bb0:	f00e f93a 	bl	23e28 <k_is_in_isr>
   15bb4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   15bb8:	2800      	cmp	r0, #0
   15bba:	d1f0      	bne.n	15b9e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15bbc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   15bbe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15bc2:	d5f0      	bpl.n	15ba6 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   15bc4:	b152      	cbz	r2, 15bdc <submit_to_queue_locked+0x7c>
   15bc6:	075b      	lsls	r3, r3, #29
   15bc8:	d408      	bmi.n	15bdc <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   15bca:	f06f 060f 	mvn.w	r6, #15
   15bce:	e7ec      	b.n	15baa <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   15bd0:	2a00      	cmp	r2, #0
   15bd2:	d1fa      	bne.n	15bca <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   15bd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   15bd8:	2b00      	cmp	r3, #0
   15bda:	d1f6      	bne.n	15bca <submit_to_queue_locked+0x6a>
	parent->next = child;
   15bdc:	2300      	movs	r3, #0
   15bde:	6023      	str	r3, [r4, #0]
	return list->tail;
   15be0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   15be4:	b963      	cbnz	r3, 15c00 <submit_to_queue_locked+0xa0>
	list->head = node;
   15be6:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   15bea:	4628      	mov	r0, r5
   15bec:	f00e fa33 	bl	24056 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   15bf0:	68e3      	ldr	r3, [r4, #12]
   15bf2:	f043 0304 	orr.w	r3, r3, #4
   15bf6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   15bf8:	683b      	ldr	r3, [r7, #0]
   15bfa:	60a3      	str	r3, [r4, #8]
}
   15bfc:	4630      	mov	r0, r6
   15bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   15c00:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15c02:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   15c06:	e7f0      	b.n	15bea <submit_to_queue_locked+0x8a>
		return -EINVAL;
   15c08:	f06f 0615 	mvn.w	r6, #21
   15c0c:	e7cd      	b.n	15baa <submit_to_queue_locked+0x4a>
   15c0e:	bf00      	nop
   15c10:	200047dc 	.word	0x200047dc

00015c14 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   15c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c16:	4604      	mov	r4, r0
	list->head = NULL;
   15c18:	2000      	movs	r0, #0
   15c1a:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   15c1c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   15c20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15c22:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   15c26:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   15c2a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   15c2e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   15c32:	b31d      	cbz	r5, 15c7c <k_work_queue_start+0x68>
   15c34:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   15c36:	2800      	cmp	r0, #0
   15c38:	f240 1001 	movw	r0, #257	; 0x101
   15c3c:	bf08      	it	eq
   15c3e:	2001      	moveq	r0, #1
	*flagp = flags;
   15c40:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15c44:	2000      	movs	r0, #0
   15c46:	f04f 36ff 	mov.w	r6, #4294967295
   15c4a:	f04f 37ff 	mov.w	r7, #4294967295
   15c4e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   15c52:	e9cd 0001 	strd	r0, r0, [sp, #4]
   15c56:	e9cd 6706 	strd	r6, r7, [sp, #24]
   15c5a:	4620      	mov	r0, r4
   15c5c:	4b08      	ldr	r3, [pc, #32]	; (15c80 <k_work_queue_start+0x6c>)
   15c5e:	9400      	str	r4, [sp, #0]
   15c60:	f7ff fc32 	bl	154c8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   15c64:	b125      	cbz	r5, 15c70 <k_work_queue_start+0x5c>
   15c66:	6829      	ldr	r1, [r5, #0]
   15c68:	b111      	cbz	r1, 15c70 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   15c6a:	4620      	mov	r0, r4
   15c6c:	f00e f8e2 	bl	23e34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   15c70:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   15c72:	b009      	add	sp, #36	; 0x24
   15c74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15c78:	f00e b8e1 	b.w	23e3e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   15c7c:	2001      	movs	r0, #1
   15c7e:	e7df      	b.n	15c40 <k_work_queue_start+0x2c>
   15c80:	00015a29 	.word	0x00015a29

00015c84 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   15c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15c86:	9001      	str	r0, [sp, #4]
   15c88:	4608      	mov	r0, r1
	__asm__ volatile(
   15c8a:	f04f 0120 	mov.w	r1, #32
   15c8e:	f3ef 8411 	mrs	r4, BASEPRI
   15c92:	f381 8812 	msr	BASEPRI_MAX, r1
   15c96:	f3bf 8f6f 	isb	sy
	return *flagp;
   15c9a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   15c9c:	f011 0f0e 	tst.w	r1, #14
   15ca0:	d116      	bne.n	15cd0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15ca2:	ea53 0502 	orrs.w	r5, r3, r2
   15ca6:	d108      	bne.n	15cba <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   15ca8:	a901      	add	r1, sp, #4
   15caa:	f7ff ff59 	bl	15b60 <submit_to_queue_locked>
	__asm__ volatile(
   15cae:	f384 8811 	msr	BASEPRI, r4
   15cb2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   15cb6:	b003      	add	sp, #12
   15cb8:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   15cba:	f041 0108 	orr.w	r1, r1, #8
   15cbe:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   15cc0:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15cc2:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   15cc4:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15cc6:	4903      	ldr	r1, [pc, #12]	; (15cd4 <k_work_schedule_for_queue+0x50>)
   15cc8:	f000 fca4 	bl	16614 <z_add_timeout>
	return ret;
   15ccc:	2001      	movs	r0, #1
   15cce:	e7ee      	b.n	15cae <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   15cd0:	2000      	movs	r0, #0
   15cd2:	e7ec      	b.n	15cae <k_work_schedule_for_queue+0x2a>
   15cd4:	000240cb 	.word	0x000240cb

00015cd8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   15cd8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   15cda:	4801      	ldr	r0, [pc, #4]	; (15ce0 <k_work_schedule+0x8>)
   15cdc:	f7ff bfd2 	b.w	15c84 <k_work_schedule_for_queue>
   15ce0:	20002948 	.word	0x20002948

00015ce4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   15ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15ce6:	460c      	mov	r4, r1
   15ce8:	4616      	mov	r6, r2
   15cea:	461d      	mov	r5, r3
   15cec:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   15cee:	f04f 0320 	mov.w	r3, #32
   15cf2:	f3ef 8711 	mrs	r7, BASEPRI
   15cf6:	f383 8812 	msr	BASEPRI_MAX, r3
   15cfa:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   15cfe:	4608      	mov	r0, r1
   15d00:	f00e f99a 	bl	24038 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15d04:	ea55 0306 	orrs.w	r3, r5, r6
   15d08:	d109      	bne.n	15d1e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   15d0a:	4620      	mov	r0, r4
   15d0c:	a901      	add	r1, sp, #4
   15d0e:	f7ff ff27 	bl	15b60 <submit_to_queue_locked>
	__asm__ volatile(
   15d12:	f387 8811 	msr	BASEPRI, r7
   15d16:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   15d1a:	b003      	add	sp, #12
   15d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   15d1e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15d20:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   15d24:	f043 0308 	orr.w	r3, r3, #8
   15d28:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   15d2a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15d2c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   15d2e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15d30:	4902      	ldr	r1, [pc, #8]	; (15d3c <k_work_reschedule_for_queue+0x58>)
   15d32:	462b      	mov	r3, r5
   15d34:	f000 fc6e 	bl	16614 <z_add_timeout>
	return ret;
   15d38:	2001      	movs	r0, #1
   15d3a:	e7ea      	b.n	15d12 <k_work_reschedule_for_queue+0x2e>
   15d3c:	000240cb 	.word	0x000240cb

00015d40 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   15d40:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   15d42:	4801      	ldr	r0, [pc, #4]	; (15d48 <k_work_reschedule+0x8>)
   15d44:	f7ff bfce 	b.w	15ce4 <k_work_reschedule_for_queue>
   15d48:	20002948 	.word	0x20002948

00015d4c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   15d4c:	89c3      	ldrh	r3, [r0, #14]
   15d4e:	2b7f      	cmp	r3, #127	; 0x7f
   15d50:	d812      	bhi.n	15d78 <sliceable+0x2c>
	int ret = slice_ticks;
   15d52:	4b0a      	ldr	r3, [pc, #40]	; (15d7c <sliceable+0x30>)
   15d54:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   15d56:	b163      	cbz	r3, 15d72 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   15d58:	4b09      	ldr	r3, [pc, #36]	; (15d80 <sliceable+0x34>)
   15d5a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   15d5e:	681b      	ldr	r3, [r3, #0]
   15d60:	429a      	cmp	r2, r3
   15d62:	db09      	blt.n	15d78 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   15d64:	7b43      	ldrb	r3, [r0, #13]
   15d66:	06db      	lsls	r3, r3, #27
   15d68:	d106      	bne.n	15d78 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   15d6a:	4b06      	ldr	r3, [pc, #24]	; (15d84 <sliceable+0x38>)
   15d6c:	1ac3      	subs	r3, r0, r3
   15d6e:	bf18      	it	ne
   15d70:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   15d72:	f003 0001 	and.w	r0, r3, #1
   15d76:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   15d78:	2300      	movs	r3, #0
   15d7a:	e7fa      	b.n	15d72 <sliceable+0x26>
   15d7c:	20004814 	.word	0x20004814
   15d80:	20004810 	.word	0x20004810
   15d84:	20002828 	.word	0x20002828

00015d88 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
   15d88:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   15d8a:	4b04      	ldr	r3, [pc, #16]	; (15d9c <slice_timeout+0x14>)
   15d8c:	1ac0      	subs	r0, r0, r3
   15d8e:	4b04      	ldr	r3, [pc, #16]	; (15da0 <slice_timeout+0x18>)
   15d90:	10c0      	asrs	r0, r0, #3
   15d92:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   15d94:	4b03      	ldr	r3, [pc, #12]	; (15da4 <slice_timeout+0x1c>)
   15d96:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   15d98:	4770      	bx	lr
   15d9a:	bf00      	nop
   15d9c:	20002928 	.word	0x20002928
   15da0:	aaaaaaab 	.word	0xaaaaaaab
   15da4:	2000554e 	.word	0x2000554e

00015da8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   15da8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   15daa:	4b0e      	ldr	r3, [pc, #56]	; (15de4 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   15dac:	4c0e      	ldr	r4, [pc, #56]	; (15de8 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   15dae:	7d1e      	ldrb	r6, [r3, #20]
{
   15db0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   15db2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15db6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   15dba:	4620      	mov	r0, r4
   15dbc:	f00e fb46 	bl	2444c <z_abort_timeout>
	slice_expired[cpu] = false;
   15dc0:	2200      	movs	r2, #0
   15dc2:	4b0a      	ldr	r3, [pc, #40]	; (15dec <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   15dc4:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   15dc6:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   15dc8:	f7ff ffc0 	bl	15d4c <sliceable>
   15dcc:	b148      	cbz	r0, 15de2 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   15dce:	4b08      	ldr	r3, [pc, #32]	; (15df0 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   15dd0:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   15dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   15dd6:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   15dd8:	4906      	ldr	r1, [pc, #24]	; (15df4 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   15dda:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   15ddc:	17d3      	asrs	r3, r2, #31
   15dde:	f000 bc19 	b.w	16614 <z_add_timeout>
}
   15de2:	bd70      	pop	{r4, r5, r6, pc}
   15de4:	200047dc 	.word	0x200047dc
   15de8:	20002928 	.word	0x20002928
   15dec:	2000554e 	.word	0x2000554e
   15df0:	20004814 	.word	0x20004814
   15df4:	00015d89 	.word	0x00015d89

00015df8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   15df8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   15dfa:	4d23      	ldr	r5, [pc, #140]	; (15e88 <update_cache+0x90>)
   15dfc:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15dfe:	f105 0220 	add.w	r2, r5, #32
   15e02:	4293      	cmp	r3, r2
	struct k_thread *mirqp = _current_cpu->metairq_preempted;
   15e04:	692c      	ldr	r4, [r5, #16]
   15e06:	d102      	bne.n	15e0e <update_cache+0x16>
	if (mirqp != NULL && (thread == NULL || !is_metairq(thread))) {
   15e08:	bb4c      	cbnz	r4, 15e5e <update_cache+0x66>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15e0a:	68ec      	ldr	r4, [r5, #12]
   15e0c:	e003      	b.n	15e16 <update_cache+0x1e>
	if (mirqp != NULL && (thread == NULL || !is_metairq(thread))) {
   15e0e:	bb2c      	cbnz	r4, 15e5c <update_cache+0x64>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15e10:	2b00      	cmp	r3, #0
   15e12:	d0fa      	beq.n	15e0a <update_cache+0x12>
{
   15e14:	461c      	mov	r4, r3
	if (z_is_thread_prevented_from_running(_current)) {
   15e16:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   15e18:	b958      	cbnz	r0, 15e32 <update_cache+0x3a>
	if (z_is_thread_prevented_from_running(_current)) {
   15e1a:	7b5a      	ldrb	r2, [r3, #13]
   15e1c:	06d2      	lsls	r2, r2, #27
   15e1e:	d108      	bne.n	15e32 <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15e20:	69a2      	ldr	r2, [r4, #24]
   15e22:	b932      	cbnz	r2, 15e32 <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   15e24:	89da      	ldrh	r2, [r3, #14]
   15e26:	2a7f      	cmp	r2, #127	; 0x7f
   15e28:	d903      	bls.n	15e32 <update_cache+0x3a>
   15e2a:	f994 200e 	ldrsb.w	r2, [r4, #14]
   15e2e:	320f      	adds	r2, #15
   15e30:	da12      	bge.n	15e58 <update_cache+0x60>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   15e32:	429c      	cmp	r4, r3
   15e34:	d002      	beq.n	15e3c <update_cache+0x44>
			z_reset_time_slice(thread);
   15e36:	4620      	mov	r0, r4
   15e38:	f7ff ffb6 	bl	15da8 <z_reset_time_slice>
	if (is_metairq(thread) && !is_metairq(_current) &&
   15e3c:	f994 300e 	ldrsb.w	r3, [r4, #14]
   15e40:	330f      	adds	r3, #15
   15e42:	da1c      	bge.n	15e7e <update_cache+0x86>
   15e44:	68ab      	ldr	r3, [r5, #8]
   15e46:	f993 200e 	ldrsb.w	r2, [r3, #14]
   15e4a:	320f      	adds	r2, #15
   15e4c:	db03      	blt.n	15e56 <update_cache+0x5e>
   15e4e:	89da      	ldrh	r2, [r3, #14]
   15e50:	2a7f      	cmp	r2, #127	; 0x7f
   15e52:	d900      	bls.n	15e56 <update_cache+0x5e>
		_current_cpu->metairq_preempted = NULL;
   15e54:	612b      	str	r3, [r5, #16]
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   15e56:	4623      	mov	r3, r4
   15e58:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   15e5a:	bd38      	pop	{r3, r4, r5, pc}
	if (mirqp != NULL && (thread == NULL || !is_metairq(thread))) {
   15e5c:	b92b      	cbnz	r3, 15e6a <update_cache+0x72>
		if (!z_is_thread_prevented_from_running(mirqp)) {
   15e5e:	7b63      	ldrb	r3, [r4, #13]
   15e60:	06db      	lsls	r3, r3, #27
   15e62:	d0d8      	beq.n	15e16 <update_cache+0x1e>
			_current_cpu->metairq_preempted = NULL;
   15e64:	2300      	movs	r3, #0
   15e66:	612b      	str	r3, [r5, #16]
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15e68:	e7cf      	b.n	15e0a <update_cache+0x12>
	if (mirqp != NULL && (thread == NULL || !is_metairq(thread))) {
   15e6a:	f993 200e 	ldrsb.w	r2, [r3, #14]
   15e6e:	320f      	adds	r2, #15
   15e70:	dbd0      	blt.n	15e14 <update_cache+0x1c>
		if (!z_is_thread_prevented_from_running(mirqp)) {
   15e72:	7b62      	ldrb	r2, [r4, #13]
   15e74:	06d1      	lsls	r1, r2, #27
   15e76:	d0ce      	beq.n	15e16 <update_cache+0x1e>
			_current_cpu->metairq_preempted = NULL;
   15e78:	2200      	movs	r2, #0
   15e7a:	612a      	str	r2, [r5, #16]
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15e7c:	e7ca      	b.n	15e14 <update_cache+0x1c>
	} else if (!is_metairq(thread) && !z_is_idle_thread_object(thread)) {
   15e7e:	4b03      	ldr	r3, [pc, #12]	; (15e8c <update_cache+0x94>)
   15e80:	429c      	cmp	r4, r3
   15e82:	d0e8      	beq.n	15e56 <update_cache+0x5e>
		_current_cpu->metairq_preempted = NULL;
   15e84:	2300      	movs	r3, #0
   15e86:	e7e5      	b.n	15e54 <update_cache+0x5c>
   15e88:	200047dc 	.word	0x200047dc
   15e8c:	20002828 	.word	0x20002828

00015e90 <move_thread_to_end_of_prio_q>:
{
   15e90:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   15e92:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   15e96:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15e98:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   15e9a:	7b43      	ldrb	r3, [r0, #13]
   15e9c:	da04      	bge.n	15ea8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15ea2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   15ea4:	f00e f9a6 	bl	241f4 <sys_dlist_remove>
	return list->head == list;
   15ea8:	4a15      	ldr	r2, [pc, #84]	; (15f00 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   15eaa:	7b4b      	ldrb	r3, [r1, #13]
   15eac:	4610      	mov	r0, r2
   15eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15eb2:	734b      	strb	r3, [r1, #13]
   15eb4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   15eb8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15eba:	4283      	cmp	r3, r0
   15ebc:	bf08      	it	eq
   15ebe:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15ec0:	b923      	cbnz	r3, 15ecc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   15ec2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   15ec6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   15ec8:	6251      	str	r1, [r2, #36]	; 0x24
}
   15eca:	e00c      	b.n	15ee6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   15ecc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   15ed0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   15ed4:	42b5      	cmp	r5, r6
   15ed6:	d00e      	beq.n	15ef6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15ed8:	42ae      	cmp	r6, r5
   15eda:	dd0c      	ble.n	15ef6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   15edc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   15ede:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   15ee2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   15ee4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   15ee6:	6890      	ldr	r0, [r2, #8]
}
   15ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   15eec:	1a43      	subs	r3, r0, r1
   15eee:	4258      	negs	r0, r3
   15ef0:	4158      	adcs	r0, r3
   15ef2:	f7ff bf81 	b.w	15df8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15ef6:	429c      	cmp	r4, r3
   15ef8:	d0e3      	beq.n	15ec2 <move_thread_to_end_of_prio_q+0x32>
   15efa:	681b      	ldr	r3, [r3, #0]
   15efc:	e7e0      	b.n	15ec0 <move_thread_to_end_of_prio_q+0x30>
   15efe:	bf00      	nop
   15f00:	200047dc 	.word	0x200047dc

00015f04 <ready_thread>:
{
   15f04:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   15f06:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15f0a:	7b42      	ldrb	r2, [r0, #13]
   15f0c:	2b00      	cmp	r3, #0
   15f0e:	db29      	blt.n	15f64 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15f10:	06d3      	lsls	r3, r2, #27
   15f12:	d127      	bne.n	15f64 <ready_thread+0x60>
	return node->next != NULL;
   15f14:	6983      	ldr	r3, [r0, #24]
   15f16:	bb2b      	cbnz	r3, 15f64 <ready_thread+0x60>
	return list->head == list;
   15f18:	4913      	ldr	r1, [pc, #76]	; (15f68 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   15f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15f1e:	7342      	strb	r2, [r0, #13]
   15f20:	460a      	mov	r2, r1
   15f22:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f26:	4294      	cmp	r4, r2
   15f28:	bf18      	it	ne
   15f2a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   15f2c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f2e:	b923      	cbnz	r3, 15f3a <ready_thread+0x36>
	node->prev = tail;
   15f30:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   15f34:	6020      	str	r0, [r4, #0]
	list->tail = node;
   15f36:	6248      	str	r0, [r1, #36]	; 0x24
}
   15f38:	e00c      	b.n	15f54 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   15f3a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15f3e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   15f42:	42b5      	cmp	r5, r6
   15f44:	d00a      	beq.n	15f5c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15f46:	42ae      	cmp	r6, r5
   15f48:	dd08      	ble.n	15f5c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   15f4a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15f4c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   15f50:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   15f52:	6058      	str	r0, [r3, #4]
		update_cache(0);
   15f54:	2000      	movs	r0, #0
}
   15f56:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   15f58:	f7ff bf4e 	b.w	15df8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15f5c:	42a3      	cmp	r3, r4
   15f5e:	d0e7      	beq.n	15f30 <ready_thread+0x2c>
   15f60:	681b      	ldr	r3, [r3, #0]
   15f62:	e7e4      	b.n	15f2e <ready_thread+0x2a>
}
   15f64:	bc70      	pop	{r4, r5, r6}
   15f66:	4770      	bx	lr
   15f68:	200047dc 	.word	0x200047dc

00015f6c <unready_thread>:
{
   15f6c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   15f6e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   15f72:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15f74:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   15f76:	7b43      	ldrb	r3, [r0, #13]
   15f78:	da04      	bge.n	15f84 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15f7e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15f80:	f00e f938 	bl	241f4 <sys_dlist_remove>
	update_cache(thread == _current);
   15f84:	4b04      	ldr	r3, [pc, #16]	; (15f98 <unready_thread+0x2c>)
   15f86:	6898      	ldr	r0, [r3, #8]
   15f88:	1a43      	subs	r3, r0, r1
   15f8a:	4258      	negs	r0, r3
   15f8c:	4158      	adcs	r0, r3
}
   15f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   15f92:	f7ff bf31 	b.w	15df8 <update_cache>
   15f96:	bf00      	nop
   15f98:	200047dc 	.word	0x200047dc

00015f9c <pend_locked>:
{
   15f9c:	b570      	push	{r4, r5, r6, lr}
   15f9e:	4615      	mov	r5, r2
   15fa0:	461c      	mov	r4, r3
   15fa2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   15fa4:	f00e f94a 	bl	2423c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15fa8:	f1b4 3fff 	cmp.w	r4, #4294967295
   15fac:	bf08      	it	eq
   15fae:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   15fb2:	d008      	beq.n	15fc6 <pend_locked+0x2a>
   15fb4:	462a      	mov	r2, r5
   15fb6:	4623      	mov	r3, r4
   15fb8:	f106 0018 	add.w	r0, r6, #24
   15fbc:	4902      	ldr	r1, [pc, #8]	; (15fc8 <pend_locked+0x2c>)
}
   15fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15fc2:	f000 bb27 	b.w	16614 <z_add_timeout>
   15fc6:	bd70      	pop	{r4, r5, r6, pc}
   15fc8:	00024315 	.word	0x00024315

00015fcc <z_time_slice>:
{
   15fcc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15fce:	f04f 0320 	mov.w	r3, #32
   15fd2:	f3ef 8511 	mrs	r5, BASEPRI
   15fd6:	f383 8812 	msr	BASEPRI_MAX, r3
   15fda:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   15fde:	4b10      	ldr	r3, [pc, #64]	; (16020 <z_time_slice+0x54>)
	if (pending_current == curr) {
   15fe0:	4a10      	ldr	r2, [pc, #64]	; (16024 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   15fe2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   15fe4:	6810      	ldr	r0, [r2, #0]
   15fe6:	42a0      	cmp	r0, r4
   15fe8:	d106      	bne.n	15ff8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   15fea:	f7ff fedd 	bl	15da8 <z_reset_time_slice>
	__asm__ volatile(
   15fee:	f385 8811 	msr	BASEPRI, r5
   15ff2:	f3bf 8f6f 	isb	sy
}
   15ff6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   15ff8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   15ffa:	7d1b      	ldrb	r3, [r3, #20]
	pending_current = NULL;
   15ffc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   15ffe:	4a0a      	ldr	r2, [pc, #40]	; (16028 <z_time_slice+0x5c>)
   16000:	5cd3      	ldrb	r3, [r2, r3]
   16002:	2b00      	cmp	r3, #0
   16004:	d0f3      	beq.n	15fee <z_time_slice+0x22>
   16006:	4620      	mov	r0, r4
   16008:	f7ff fea0 	bl	15d4c <sliceable>
   1600c:	2800      	cmp	r0, #0
   1600e:	d0ee      	beq.n	15fee <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   16010:	7b63      	ldrb	r3, [r4, #13]
   16012:	06db      	lsls	r3, r3, #27
   16014:	d102      	bne.n	1601c <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   16016:	4620      	mov	r0, r4
   16018:	f7ff ff3a 	bl	15e90 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   1601c:	4620      	mov	r0, r4
   1601e:	e7e4      	b.n	15fea <z_time_slice+0x1e>
   16020:	200047dc 	.word	0x200047dc
   16024:	2000480c 	.word	0x2000480c
   16028:	2000554e 	.word	0x2000554e

0001602c <z_pend_curr>:
{
   1602c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1602e:	480c      	ldr	r0, [pc, #48]	; (16060 <z_pend_curr+0x34>)
   16030:	4d0c      	ldr	r5, [pc, #48]	; (16064 <z_pend_curr+0x38>)
   16032:	6886      	ldr	r6, [r0, #8]
{
   16034:	460c      	mov	r4, r1
	pending_current = _current;
   16036:	602e      	str	r6, [r5, #0]
{
   16038:	4611      	mov	r1, r2
   1603a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1603e:	f04f 0620 	mov.w	r6, #32
   16042:	f3ef 8511 	mrs	r5, BASEPRI
   16046:	f386 8812 	msr	BASEPRI_MAX, r6
   1604a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1604e:	6880      	ldr	r0, [r0, #8]
   16050:	f7ff ffa4 	bl	15f9c <pend_locked>
	return z_swap_irqlock(key.key);
   16054:	4620      	mov	r0, r4
}
   16056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1605a:	f00e b8dd 	b.w	24218 <z_swap_irqlock>
   1605e:	bf00      	nop
   16060:	200047dc 	.word	0x200047dc
   16064:	2000480c 	.word	0x2000480c

00016068 <z_set_prio>:
{
   16068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1606a:	4604      	mov	r4, r0
   1606c:	f04f 0320 	mov.w	r3, #32
   16070:	f3ef 8611 	mrs	r6, BASEPRI
   16074:	f383 8812 	msr	BASEPRI_MAX, r3
   16078:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1607c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1607e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16080:	06da      	lsls	r2, r3, #27
   16082:	d119      	bne.n	160b8 <z_set_prio+0x50>
	return node->next != NULL;
   16084:	6985      	ldr	r5, [r0, #24]
   16086:	b9bd      	cbnz	r5, 160b8 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1608c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1608e:	f00e f8b1 	bl	241f4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   16092:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   16094:	4a16      	ldr	r2, [pc, #88]	; (160f0 <z_set_prio+0x88>)
   16096:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1609a:	7343      	strb	r3, [r0, #13]
   1609c:	4613      	mov	r3, r2
				thread->base.prio = prio;
   1609e:	7381      	strb	r1, [r0, #14]
   160a0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   160a4:	4298      	cmp	r0, r3
   160a6:	bf18      	it	ne
   160a8:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   160aa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   160ac:	b95d      	cbnz	r5, 160c6 <z_set_prio+0x5e>
	node->prev = tail;
   160ae:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   160b2:	6004      	str	r4, [r0, #0]
	list->tail = node;
   160b4:	6254      	str	r4, [r2, #36]	; 0x24
}
   160b6:	e011      	b.n	160dc <z_set_prio+0x74>
   160b8:	2000      	movs	r0, #0
			thread->base.prio = prio;
   160ba:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   160bc:	f386 8811 	msr	BASEPRI, r6
   160c0:	f3bf 8f6f 	isb	sy
}
   160c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   160c6:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   160ca:	42b9      	cmp	r1, r7
   160cc:	d00b      	beq.n	160e6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   160ce:	428f      	cmp	r7, r1
   160d0:	dd09      	ble.n	160e6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   160d2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   160d4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   160d8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   160da:	606c      	str	r4, [r5, #4]
			update_cache(1);
   160dc:	2001      	movs	r0, #1
   160de:	f7ff fe8b 	bl	15df8 <update_cache>
   160e2:	2001      	movs	r0, #1
   160e4:	e7ea      	b.n	160bc <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   160e6:	42a8      	cmp	r0, r5
   160e8:	d0e1      	beq.n	160ae <z_set_prio+0x46>
   160ea:	682d      	ldr	r5, [r5, #0]
   160ec:	e7de      	b.n	160ac <z_set_prio+0x44>
   160ee:	bf00      	nop
   160f0:	200047dc 	.word	0x200047dc

000160f4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   160f4:	b949      	cbnz	r1, 1610a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   160f6:	f3ef 8005 	mrs	r0, IPSR
   160fa:	b930      	cbnz	r0, 1610a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   160fc:	4b05      	ldr	r3, [pc, #20]	; (16114 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   160fe:	69da      	ldr	r2, [r3, #28]
   16100:	689b      	ldr	r3, [r3, #8]
   16102:	429a      	cmp	r2, r3
   16104:	d001      	beq.n	1610a <z_reschedule+0x16>
   16106:	f00e b887 	b.w	24218 <z_swap_irqlock>
   1610a:	f381 8811 	msr	BASEPRI, r1
   1610e:	f3bf 8f6f 	isb	sy
}
   16112:	4770      	bx	lr
   16114:	200047dc 	.word	0x200047dc

00016118 <z_sched_start>:
{
   16118:	b510      	push	{r4, lr}
	__asm__ volatile(
   1611a:	f04f 0220 	mov.w	r2, #32
   1611e:	f3ef 8411 	mrs	r4, BASEPRI
   16122:	f382 8812 	msr	BASEPRI_MAX, r2
   16126:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1612a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1612c:	0751      	lsls	r1, r2, #29
   1612e:	d404      	bmi.n	1613a <z_sched_start+0x22>
	__asm__ volatile(
   16130:	f384 8811 	msr	BASEPRI, r4
   16134:	f3bf 8f6f 	isb	sy
}
   16138:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1613a:	f022 0204 	bic.w	r2, r2, #4
   1613e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   16140:	f7ff fee0 	bl	15f04 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   16144:	4621      	mov	r1, r4
}
   16146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1614a:	4801      	ldr	r0, [pc, #4]	; (16150 <z_sched_start+0x38>)
   1614c:	f7ff bfd2 	b.w	160f4 <z_reschedule>
   16150:	2000554f 	.word	0x2000554f

00016154 <z_impl_k_thread_suspend>:
{
   16154:	b570      	push	{r4, r5, r6, lr}
   16156:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16158:	3018      	adds	r0, #24
   1615a:	f00e f977 	bl	2444c <z_abort_timeout>
	__asm__ volatile(
   1615e:	f04f 0320 	mov.w	r3, #32
   16162:	f3ef 8611 	mrs	r6, BASEPRI
   16166:	f383 8812 	msr	BASEPRI_MAX, r3
   1616a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1616e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   16172:	7b63      	ldrb	r3, [r4, #13]
   16174:	2a00      	cmp	r2, #0
   16176:	da05      	bge.n	16184 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   1617c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1617e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   16180:	f00e f838 	bl	241f4 <sys_dlist_remove>
		update_cache(thread == _current);
   16184:	4d0b      	ldr	r5, [pc, #44]	; (161b4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16186:	7b63      	ldrb	r3, [r4, #13]
   16188:	68a8      	ldr	r0, [r5, #8]
   1618a:	f043 0310 	orr.w	r3, r3, #16
   1618e:	7363      	strb	r3, [r4, #13]
   16190:	1b03      	subs	r3, r0, r4
   16192:	4258      	negs	r0, r3
   16194:	4158      	adcs	r0, r3
   16196:	f7ff fe2f 	bl	15df8 <update_cache>
	__asm__ volatile(
   1619a:	f386 8811 	msr	BASEPRI, r6
   1619e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   161a2:	68ab      	ldr	r3, [r5, #8]
   161a4:	42a3      	cmp	r3, r4
   161a6:	d103      	bne.n	161b0 <z_impl_k_thread_suspend+0x5c>
}
   161a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   161ac:	f00e b90d 	b.w	243ca <z_reschedule_unlocked>
}
   161b0:	bd70      	pop	{r4, r5, r6, pc}
   161b2:	bf00      	nop
   161b4:	200047dc 	.word	0x200047dc

000161b8 <k_sched_lock>:
	__asm__ volatile(
   161b8:	f04f 0320 	mov.w	r3, #32
   161bc:	f3ef 8111 	mrs	r1, BASEPRI
   161c0:	f383 8812 	msr	BASEPRI_MAX, r3
   161c4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   161c8:	4b04      	ldr	r3, [pc, #16]	; (161dc <k_sched_lock+0x24>)
   161ca:	689a      	ldr	r2, [r3, #8]
   161cc:	7bd3      	ldrb	r3, [r2, #15]
   161ce:	3b01      	subs	r3, #1
   161d0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   161d2:	f381 8811 	msr	BASEPRI, r1
   161d6:	f3bf 8f6f 	isb	sy
}
   161da:	4770      	bx	lr
   161dc:	200047dc 	.word	0x200047dc

000161e0 <k_sched_unlock>:
{
   161e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   161e2:	f04f 0320 	mov.w	r3, #32
   161e6:	f3ef 8411 	mrs	r4, BASEPRI
   161ea:	f383 8812 	msr	BASEPRI_MAX, r3
   161ee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   161f2:	4b08      	ldr	r3, [pc, #32]	; (16214 <k_sched_unlock+0x34>)
		update_cache(0);
   161f4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   161f6:	689a      	ldr	r2, [r3, #8]
   161f8:	7bd3      	ldrb	r3, [r2, #15]
   161fa:	3301      	adds	r3, #1
   161fc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   161fe:	f7ff fdfb 	bl	15df8 <update_cache>
	__asm__ volatile(
   16202:	f384 8811 	msr	BASEPRI, r4
   16206:	f3bf 8f6f 	isb	sy
}
   1620a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1620e:	f00e b8dc 	b.w	243ca <z_reschedule_unlocked>
   16212:	bf00      	nop
   16214:	200047dc 	.word	0x200047dc

00016218 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   16218:	4b02      	ldr	r3, [pc, #8]	; (16224 <z_sched_init+0xc>)
   1621a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1621e:	e9c3 2208 	strd	r2, r2, [r3, #32]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   16222:	4770      	bx	lr
   16224:	200047dc 	.word	0x200047dc

00016228 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   16228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1622a:	f04f 0320 	mov.w	r3, #32
   1622e:	f3ef 8511 	mrs	r5, BASEPRI
   16232:	f383 8812 	msr	BASEPRI_MAX, r3
   16236:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1623a:	4919      	ldr	r1, [pc, #100]	; (162a0 <z_impl_k_yield+0x78>)
   1623c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1623e:	7b43      	ldrb	r3, [r0, #13]
   16240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16244:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   16246:	f00d ffd5 	bl	241f4 <sys_dlist_remove>
	return list->head == list;
   1624a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   1624c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1624e:	7b5a      	ldrb	r2, [r3, #13]
   16250:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16254:	735a      	strb	r2, [r3, #13]
   16256:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   1625a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1625c:	4282      	cmp	r2, r0
   1625e:	bf08      	it	eq
   16260:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16262:	b922      	cbnz	r2, 1626e <z_impl_k_yield+0x46>
	node->prev = tail;
   16264:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   16268:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1626a:	624b      	str	r3, [r1, #36]	; 0x24
}
   1626c:	e00c      	b.n	16288 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1626e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   16272:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   16276:	42be      	cmp	r6, r7
   16278:	d00e      	beq.n	16298 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1627a:	42b7      	cmp	r7, r6
   1627c:	dd0c      	ble.n	16298 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1627e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   16280:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   16284:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   16286:	6053      	str	r3, [r2, #4]
	update_cache(1);
   16288:	2001      	movs	r0, #1
   1628a:	f7ff fdb5 	bl	15df8 <update_cache>
   1628e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   16290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16294:	f00d bfc0 	b.w	24218 <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   16298:	42a2      	cmp	r2, r4
   1629a:	d0e3      	beq.n	16264 <z_impl_k_yield+0x3c>
   1629c:	6812      	ldr	r2, [r2, #0]
   1629e:	e7e0      	b.n	16262 <z_impl_k_yield+0x3a>
   162a0:	200047dc 	.word	0x200047dc

000162a4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   162a4:	ea50 0301 	orrs.w	r3, r0, r1
{
   162a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162ac:	4605      	mov	r5, r0
   162ae:	460e      	mov	r6, r1
	if (ticks == 0) {
   162b0:	d103      	bne.n	162ba <z_tick_sleep+0x16>
	z_impl_k_yield();
   162b2:	f7ff ffb9 	bl	16228 <z_impl_k_yield>
		k_yield();
		return 0;
   162b6:	2000      	movs	r0, #0
   162b8:	e02c      	b.n	16314 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   162ba:	1c83      	adds	r3, r0, #2
   162bc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   162c0:	db2a      	blt.n	16318 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   162c2:	f00e f8f9 	bl	244b8 <sys_clock_tick_get_32>
   162c6:	182c      	adds	r4, r5, r0
   162c8:	f04f 0320 	mov.w	r3, #32
   162cc:	f3ef 8811 	mrs	r8, BASEPRI
   162d0:	f383 8812 	msr	BASEPRI_MAX, r3
   162d4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   162d8:	4f11      	ldr	r7, [pc, #68]	; (16320 <z_tick_sleep+0x7c>)
   162da:	4b12      	ldr	r3, [pc, #72]	; (16324 <z_tick_sleep+0x80>)
   162dc:	68b8      	ldr	r0, [r7, #8]
   162de:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   162e0:	f7ff fe44 	bl	15f6c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   162e4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   162e6:	4910      	ldr	r1, [pc, #64]	; (16328 <z_tick_sleep+0x84>)
   162e8:	462a      	mov	r2, r5
   162ea:	4633      	mov	r3, r6
   162ec:	3018      	adds	r0, #24
   162ee:	f000 f991 	bl	16614 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   162f2:	68ba      	ldr	r2, [r7, #8]
   162f4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   162f6:	7b53      	ldrb	r3, [r2, #13]
   162f8:	f043 0310 	orr.w	r3, r3, #16
   162fc:	7353      	strb	r3, [r2, #13]
   162fe:	f00d ff8b 	bl	24218 <z_swap_irqlock>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   16302:	f00e f8d9 	bl	244b8 <sys_clock_tick_get_32>
   16306:	1a20      	subs	r0, r4, r0
   16308:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1630c:	2801      	cmp	r0, #1
   1630e:	f173 0300 	sbcs.w	r3, r3, #0
   16312:	dbd0      	blt.n	162b6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   16314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   16318:	f06f 0401 	mvn.w	r4, #1
   1631c:	1a24      	subs	r4, r4, r0
   1631e:	e7d3      	b.n	162c8 <z_tick_sleep+0x24>
   16320:	200047dc 	.word	0x200047dc
   16324:	2000480c 	.word	0x2000480c
   16328:	00024315 	.word	0x00024315

0001632c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1632c:	f1b1 3fff 	cmp.w	r1, #4294967295
   16330:	bf08      	it	eq
   16332:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   16336:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16338:	d106      	bne.n	16348 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1633a:	4b08      	ldr	r3, [pc, #32]	; (1635c <z_impl_k_sleep+0x30>)
   1633c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1633e:	f7ff ff09 	bl	16154 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   16342:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   16346:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   16348:	f7ff ffac 	bl	162a4 <z_tick_sleep>
   1634c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16350:	fb80 0303 	smull	r0, r3, r0, r3
   16354:	0bc0      	lsrs	r0, r0, #15
   16356:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1635a:	e7f4      	b.n	16346 <z_impl_k_sleep+0x1a>
   1635c:	200047dc 	.word	0x200047dc

00016360 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   16360:	b538      	push	{r3, r4, r5, lr}
   16362:	2100      	movs	r1, #0
   16364:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   16368:	4c08      	ldr	r4, [pc, #32]	; (1638c <z_impl_k_usleep+0x2c>)
   1636a:	2300      	movs	r3, #0
   1636c:	fbc0 4105 	smlal	r4, r1, r0, r5
   16370:	4a07      	ldr	r2, [pc, #28]	; (16390 <z_impl_k_usleep+0x30>)
   16372:	4620      	mov	r0, r4
   16374:	f7ea fb2e 	bl	9d4 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   16378:	17c1      	asrs	r1, r0, #31
   1637a:	f7ff ff93 	bl	162a4 <z_tick_sleep>
   1637e:	4b04      	ldr	r3, [pc, #16]	; (16390 <z_impl_k_usleep+0x30>)
   16380:	fb80 0303 	smull	r0, r3, r0, r3
   16384:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   16386:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1638a:	bd38      	pop	{r3, r4, r5, pc}
   1638c:	000f423f 	.word	0x000f423f
   16390:	000f4240 	.word	0x000f4240

00016394 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   16394:	4b01      	ldr	r3, [pc, #4]	; (1639c <z_impl_z_current_get+0x8>)
   16396:	6898      	ldr	r0, [r3, #8]
   16398:	4770      	bx	lr
   1639a:	bf00      	nop
   1639c:	200047dc 	.word	0x200047dc

000163a0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   163a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163a4:	4604      	mov	r4, r0
   163a6:	f04f 0320 	mov.w	r3, #32
   163aa:	f3ef 8611 	mrs	r6, BASEPRI
   163ae:	f383 8812 	msr	BASEPRI_MAX, r3
   163b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   163b6:	7b03      	ldrb	r3, [r0, #12]
   163b8:	07d9      	lsls	r1, r3, #31
   163ba:	d50b      	bpl.n	163d4 <z_thread_abort+0x34>
	__asm__ volatile(
   163bc:	f386 8811 	msr	BASEPRI, r6
   163c0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   163c4:	4040      	eors	r0, r0
   163c6:	f380 8811 	msr	BASEPRI, r0
   163ca:	f04f 0004 	mov.w	r0, #4
   163ce:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   163d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   163d4:	7b43      	ldrb	r3, [r0, #13]
   163d6:	071a      	lsls	r2, r3, #28
   163d8:	d504      	bpl.n	163e4 <z_thread_abort+0x44>
   163da:	f386 8811 	msr	BASEPRI, r6
   163de:	f3bf 8f6f 	isb	sy
   163e2:	e7f5      	b.n	163d0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   163e4:	f023 0220 	bic.w	r2, r3, #32
   163e8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   163ec:	09d2      	lsrs	r2, r2, #7
   163ee:	d120      	bne.n	16432 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   163f0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   163f2:	68a3      	ldr	r3, [r4, #8]
   163f4:	b113      	cbz	r3, 163fc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   163f6:	4620      	mov	r0, r4
   163f8:	f00d ff04 	bl	24204 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   163fc:	f104 0018 	add.w	r0, r4, #24
   16400:	f00e f824 	bl	2444c <z_abort_timeout>
   16404:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16408:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1640c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1640e:	42bd      	cmp	r5, r7
   16410:	d000      	beq.n	16414 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16412:	b9b5      	cbnz	r5, 16442 <z_thread_abort+0xa2>
		update_cache(1);
   16414:	2001      	movs	r0, #1
   16416:	f7ff fcef 	bl	15df8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1641a:	4b10      	ldr	r3, [pc, #64]	; (1645c <z_thread_abort+0xbc>)
   1641c:	689b      	ldr	r3, [r3, #8]
   1641e:	42a3      	cmp	r3, r4
   16420:	d1db      	bne.n	163da <z_thread_abort+0x3a>
   16422:	f3ef 8305 	mrs	r3, IPSR
   16426:	2b00      	cmp	r3, #0
   16428:	d1d7      	bne.n	163da <z_thread_abort+0x3a>
   1642a:	4630      	mov	r0, r6
   1642c:	f00d fef4 	bl	24218 <z_swap_irqlock>
   16430:	e7d3      	b.n	163da <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16432:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   16436:	f043 0308 	orr.w	r3, r3, #8
   1643a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1643c:	f00d feda 	bl	241f4 <sys_dlist_remove>
}
   16440:	e7d7      	b.n	163f2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   16442:	4628      	mov	r0, r5
   16444:	f00d fede 	bl	24204 <unpend_thread_no_timeout>
   16448:	f105 0018 	add.w	r0, r5, #24
   1644c:	f00d fffe 	bl	2444c <z_abort_timeout>
		ready_thread(thread);
   16450:	4628      	mov	r0, r5
   16452:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   16456:	f7ff fd55 	bl	15f04 <ready_thread>
   1645a:	e7d7      	b.n	1640c <z_thread_abort+0x6c>
   1645c:	200047dc 	.word	0x200047dc

00016460 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   16460:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   16462:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   16466:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   16468:	e9cd 6700 	strd	r6, r7, [sp]
   1646c:	f7ff fdde 	bl	1602c <z_pend_curr>

	if (data != NULL) {
   16470:	b11c      	cbz	r4, 1647a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   16472:	4b03      	ldr	r3, [pc, #12]	; (16480 <z_sched_wait+0x20>)
   16474:	689b      	ldr	r3, [r3, #8]
   16476:	695b      	ldr	r3, [r3, #20]
   16478:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1647a:	b002      	add	sp, #8
   1647c:	bdd0      	pop	{r4, r6, r7, pc}
   1647e:	bf00      	nop
   16480:	200047dc 	.word	0x200047dc

00016484 <z_impl_k_condvar_signal>:
}
#include <syscalls/k_condvar_init_mrsh.c>
#endif

int z_impl_k_condvar_signal(struct k_condvar *condvar)
{
   16484:	b510      	push	{r4, lr}
	__asm__ volatile(
   16486:	f04f 0320 	mov.w	r3, #32
   1648a:	f3ef 8411 	mrs	r4, BASEPRI
   1648e:	f383 8812 	msr	BASEPRI_MAX, r3
   16492:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_condvar, signal, condvar);

	struct k_thread *thread = z_unpend_first_thread(&condvar->wait_q);
   16496:	f00d ff58 	bl	2434a <z_unpend_first_thread>

	if (thread != NULL) {
   1649a:	b148      	cbz	r0, 164b0 <z_impl_k_condvar_signal+0x2c>
   1649c:	2200      	movs	r2, #0
   1649e:	67c2      	str	r2, [r0, #124]	; 0x7c
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_condvar, signal, condvar, K_FOREVER);

		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   164a0:	f00d fef4 	bl	2428c <z_ready_thread>
		z_reschedule(&lock, key);
   164a4:	4621      	mov	r1, r4
   164a6:	4805      	ldr	r0, [pc, #20]	; (164bc <z_impl_k_condvar_signal+0x38>)
   164a8:	f7ff fe24 	bl	160f4 <z_reschedule>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_condvar, signal, condvar, 0);

	return 0;
}
   164ac:	2000      	movs	r0, #0
   164ae:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   164b0:	f384 8811 	msr	BASEPRI, r4
   164b4:	f3bf 8f6f 	isb	sy
   164b8:	e7f8      	b.n	164ac <z_impl_k_condvar_signal+0x28>
   164ba:	bf00      	nop
   164bc:	2000554f 	.word	0x2000554f

000164c0 <z_impl_k_condvar_wait>:
#include <syscalls/k_condvar_broadcast_mrsh.c>
#endif

int z_impl_k_condvar_wait(struct k_condvar *condvar, struct k_mutex *mutex,
			  k_timeout_t timeout)
{
   164c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   164c4:	4605      	mov	r5, r0
   164c6:	460c      	mov	r4, r1
   164c8:	4617      	mov	r7, r2
   164ca:	461e      	mov	r6, r3
	__asm__ volatile(
   164cc:	f04f 0320 	mov.w	r3, #32
   164d0:	f3ef 8811 	mrs	r8, BASEPRI
   164d4:	f383 8812 	msr	BASEPRI_MAX, r3
   164d8:	f3bf 8f6f 	isb	sy
	return z_impl_k_mutex_unlock(mutex);
   164dc:	4608      	mov	r0, r1
   164de:	f7ff f9c3 	bl	15868 <z_impl_k_mutex_unlock>
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_condvar, wait, condvar);

	key = k_spin_lock(&lock);
	k_mutex_unlock(mutex);

	ret = z_pend_curr(&lock, key, &condvar->wait_q, timeout);
   164e2:	462a      	mov	r2, r5
   164e4:	4641      	mov	r1, r8
   164e6:	e9cd 7600 	strd	r7, r6, [sp]
   164ea:	4807      	ldr	r0, [pc, #28]	; (16508 <z_impl_k_condvar_wait+0x48>)
   164ec:	f7ff fd9e 	bl	1602c <z_pend_curr>
   164f0:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   164f2:	f04f 32ff 	mov.w	r2, #4294967295
   164f6:	f04f 33ff 	mov.w	r3, #4294967295
   164fa:	4620      	mov	r0, r4
   164fc:	f7ff f93a 	bl	15774 <z_impl_k_mutex_lock>
	k_mutex_lock(mutex, K_FOREVER);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_condvar, wait, condvar, ret);

	return ret;
}
   16500:	4628      	mov	r0, r5
   16502:	b002      	add	sp, #8
   16504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16508:	2000554f 	.word	0x2000554f

0001650c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1650c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1650e:	4806      	ldr	r0, [pc, #24]	; (16528 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   16510:	4a06      	ldr	r2, [pc, #24]	; (1652c <z_data_copy+0x20>)
   16512:	4907      	ldr	r1, [pc, #28]	; (16530 <z_data_copy+0x24>)
   16514:	1a12      	subs	r2, r2, r0
   16516:	f00d fbc6 	bl	23ca6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1651a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1651e:	4a05      	ldr	r2, [pc, #20]	; (16534 <z_data_copy+0x28>)
   16520:	4905      	ldr	r1, [pc, #20]	; (16538 <z_data_copy+0x2c>)
   16522:	4806      	ldr	r0, [pc, #24]	; (1653c <z_data_copy+0x30>)
   16524:	f00d bbbf 	b.w	23ca6 <z_early_memcpy>
   16528:	20000000 	.word	0x20000000
   1652c:	20001434 	.word	0x20001434
   16530:	00036858 	.word	0x00036858
   16534:	00000000 	.word	0x00000000
   16538:	00036858 	.word	0x00036858
   1653c:	20000000 	.word	0x20000000

00016540 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16540:	4b03      	ldr	r3, [pc, #12]	; (16550 <elapsed+0x10>)
   16542:	681b      	ldr	r3, [r3, #0]
   16544:	b90b      	cbnz	r3, 1654a <elapsed+0xa>
   16546:	f7f7 be43 	b.w	e1d0 <sys_clock_elapsed>
}
   1654a:	2000      	movs	r0, #0
   1654c:	4770      	bx	lr
   1654e:	bf00      	nop
   16550:	20004818 	.word	0x20004818

00016554 <next_timeout>:

static int32_t next_timeout(void)
{
   16554:	b510      	push	{r4, lr}
	return list->head == list;
   16556:	4b0e      	ldr	r3, [pc, #56]	; (16590 <next_timeout+0x3c>)
   16558:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1655a:	429c      	cmp	r4, r3
   1655c:	d104      	bne.n	16568 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1655e:	f7ff ffef 	bl	16540 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   16562:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   16566:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   16568:	f7ff ffea 	bl	16540 <elapsed>
	if ((to == NULL) ||
   1656c:	2c00      	cmp	r4, #0
   1656e:	d0f8      	beq.n	16562 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   16570:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   16574:	1a1b      	subs	r3, r3, r0
   16576:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1657a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1657e:	f172 0100 	sbcs.w	r1, r2, #0
   16582:	daee      	bge.n	16562 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   16584:	2a00      	cmp	r2, #0
   16586:	bfac      	ite	ge
   16588:	4618      	movge	r0, r3
   1658a:	2000      	movlt	r0, #0
	return ret;
   1658c:	e7eb      	b.n	16566 <next_timeout+0x12>
   1658e:	bf00      	nop
   16590:	20000a60 	.word	0x20000a60

00016594 <remove_timeout>:
{
   16594:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16596:	b170      	cbz	r0, 165b6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   16598:	4b0b      	ldr	r3, [pc, #44]	; (165c8 <remove_timeout+0x34>)
   1659a:	685b      	ldr	r3, [r3, #4]
   1659c:	4298      	cmp	r0, r3
   1659e:	d00a      	beq.n	165b6 <remove_timeout+0x22>
   165a0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   165a2:	b143      	cbz	r3, 165b6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   165a4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   165a8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   165ac:	1912      	adds	r2, r2, r4
   165ae:	eb41 0105 	adc.w	r1, r1, r5
   165b2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   165b6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   165ba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   165bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   165be:	2300      	movs	r3, #0
	node->prev = NULL;
   165c0:	e9c0 3300 	strd	r3, r3, [r0]
}
   165c4:	bd30      	pop	{r4, r5, pc}
   165c6:	bf00      	nop
   165c8:	20000a60 	.word	0x20000a60

000165cc <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   165cc:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   165ce:	6804      	ldr	r4, [r0, #0]
   165d0:	b1d4      	cbz	r4, 16608 <timeout_rem+0x3c>
	return (node == list->tail) ? NULL : node->next;
   165d2:	2400      	movs	r4, #0
	return list->head == list;
   165d4:	4a0e      	ldr	r2, [pc, #56]	; (16610 <timeout_rem+0x44>)
	return (node == list->tail) ? NULL : node->next;
   165d6:	4625      	mov	r5, r4
	return list->head == list;
   165d8:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   165da:	6851      	ldr	r1, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   165dc:	4293      	cmp	r3, r2
   165de:	bf08      	it	eq
   165e0:	2300      	moveq	r3, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   165e2:	b933      	cbnz	r3, 165f2 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   165e4:	f7ff ffac 	bl	16540 <elapsed>
   165e8:	4603      	mov	r3, r0
   165ea:	1a20      	subs	r0, r4, r0
   165ec:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
   165f0:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   165f2:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   165f6:	18a4      	adds	r4, r4, r2
   165f8:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   165fc:	4283      	cmp	r3, r0
   165fe:	d0f1      	beq.n	165e4 <timeout_rem+0x18>
	return (node == list->tail) ? NULL : node->next;
   16600:	4299      	cmp	r1, r3
   16602:	d0ef      	beq.n	165e4 <timeout_rem+0x18>
   16604:	681b      	ldr	r3, [r3, #0]
   16606:	e7ec      	b.n	165e2 <timeout_rem+0x16>
		return 0;
   16608:	4620      	mov	r0, r4
   1660a:	4621      	mov	r1, r4
   1660c:	e7f0      	b.n	165f0 <timeout_rem+0x24>
   1660e:	bf00      	nop
   16610:	20000a60 	.word	0x20000a60

00016614 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16614:	f1b3 3fff 	cmp.w	r3, #4294967295
   16618:	bf08      	it	eq
   1661a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1661e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16620:	4604      	mov	r4, r0
   16622:	461d      	mov	r5, r3
   16624:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16626:	d05c      	beq.n	166e2 <z_add_timeout+0xce>
	to->fn = fn;
   16628:	6081      	str	r1, [r0, #8]
   1662a:	f04f 0320 	mov.w	r3, #32
   1662e:	f3ef 8711 	mrs	r7, BASEPRI
   16632:	f383 8812 	msr	BASEPRI_MAX, r3
   16636:	f3bf 8f6f 	isb	sy
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1663a:	3201      	adds	r2, #1
   1663c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   16640:	da24      	bge.n	1668c <z_add_timeout+0x78>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16642:	f06f 0301 	mvn.w	r3, #1
   16646:	492c      	ldr	r1, [pc, #176]	; (166f8 <z_add_timeout+0xe4>)
   16648:	e9d1 2000 	ldrd	r2, r0, [r1]
   1664c:	1a9b      	subs	r3, r3, r2
   1664e:	f04f 32ff 	mov.w	r2, #4294967295
   16652:	eb62 0000 	sbc.w	r0, r2, r0
   16656:	1b9e      	subs	r6, r3, r6
   16658:	eb60 0005 	sbc.w	r0, r0, r5
			to->dticks = MAX(1, ticks);
   1665c:	2e01      	cmp	r6, #1
   1665e:	f170 0300 	sbcs.w	r3, r0, #0
   16662:	da01      	bge.n	16668 <z_add_timeout+0x54>
   16664:	2601      	movs	r6, #1
   16666:	2000      	movs	r0, #0
   16668:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1666c:	4e23      	ldr	r6, [pc, #140]	; (166fc <z_add_timeout+0xe8>)
   1666e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   16672:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16674:	45b4      	cmp	ip, r6
   16676:	bf08      	it	eq
   16678:	f04f 0c00 	moveq.w	ip, #0
		for (t = first(); t != NULL; t = next(t)) {
   1667c:	f1bc 0f00 	cmp.w	ip, #0
   16680:	d10d      	bne.n	1669e <z_add_timeout+0x8a>
	node->prev = tail;
   16682:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   16686:	602c      	str	r4, [r5, #0]
	list->tail = node;
   16688:	6074      	str	r4, [r6, #4]
}
   1668a:	e01c      	b.n	166c6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1668c:	f7ff ff58 	bl	16540 <elapsed>
   16690:	3601      	adds	r6, #1
   16692:	f145 0500 	adc.w	r5, r5, #0
   16696:	1836      	adds	r6, r6, r0
   16698:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1669c:	e7e4      	b.n	16668 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1669e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   166a2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   166a6:	4293      	cmp	r3, r2
   166a8:	eb71 0e00 	sbcs.w	lr, r1, r0
   166ac:	da1a      	bge.n	166e4 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   166ae:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   166b0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   166b4:	eb60 0001 	sbc.w	r0, r0, r1
   166b8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   166bc:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   166c0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   166c2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   166c6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   166c8:	42b3      	cmp	r3, r6
   166ca:	d006      	beq.n	166da <z_add_timeout+0xc6>
		if (to == first()) {
   166cc:	429c      	cmp	r4, r3
   166ce:	d104      	bne.n	166da <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   166d0:	f7ff ff40 	bl	16554 <next_timeout>
   166d4:	2100      	movs	r1, #0
   166d6:	f7f7 fd49 	bl	e16c <sys_clock_set_timeout>
	__asm__ volatile(
   166da:	f387 8811 	msr	BASEPRI, r7
   166de:	f3bf 8f6f 	isb	sy
}
   166e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   166e4:	1a9b      	subs	r3, r3, r2
   166e6:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   166ea:	45ac      	cmp	ip, r5
   166ec:	e9c4 3104 	strd	r3, r1, [r4, #16]
   166f0:	d0c7      	beq.n	16682 <z_add_timeout+0x6e>
   166f2:	f8dc c000 	ldr.w	ip, [ip]
   166f6:	e7c1      	b.n	1667c <z_add_timeout+0x68>
   166f8:	20002940 	.word	0x20002940
   166fc:	20000a60 	.word	0x20000a60

00016700 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   16700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   16704:	f04f 0320 	mov.w	r3, #32
   16708:	f3ef 8c11 	mrs	ip, BASEPRI
   1670c:	f383 8812 	msr	BASEPRI_MAX, r3
   16710:	f3bf 8f6f 	isb	sy
	return list->head == list;
   16714:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 167c8 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   16718:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 167cc <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   1671c:	2400      	movs	r4, #0
	announce_remaining = ticks;
   1671e:	f8c9 0000 	str.w	r0, [r9]
   16722:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   16726:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16728:	4550      	cmp	r0, sl
   1672a:	bf08      	it	eq
   1672c:	2000      	moveq	r0, #0
		curr_tick += dt;
   1672e:	4f28      	ldr	r7, [pc, #160]	; (167d0 <sys_clock_announce+0xd0>)
   16730:	46e0      	mov	r8, ip
   16732:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   16736:	f8d9 3000 	ldr.w	r3, [r9]
   1673a:	b380      	cbz	r0, 1679e <sys_clock_announce+0x9e>
   1673c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   16740:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   16744:	42b3      	cmp	r3, r6
   16746:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   1674a:	da05      	bge.n	16758 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   1674c:	1af6      	subs	r6, r6, r3
   1674e:	eb6c 040e 	sbc.w	r4, ip, lr
   16752:	e9c0 6404 	strd	r6, r4, [r0, #16]
   16756:	e022      	b.n	1679e <sys_clock_announce+0x9e>
		curr_tick += dt;
   16758:	18b2      	adds	r2, r6, r2
   1675a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   1675e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   16762:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   16766:	f7ff ff15 	bl	16594 <remove_timeout>
	__asm__ volatile(
   1676a:	f388 8811 	msr	BASEPRI, r8
   1676e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   16772:	6883      	ldr	r3, [r0, #8]
   16774:	4798      	blx	r3
	__asm__ volatile(
   16776:	f04f 0320 	mov.w	r3, #32
   1677a:	f3ef 8811 	mrs	r8, BASEPRI
   1677e:	f383 8812 	msr	BASEPRI_MAX, r3
   16782:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   16786:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   1678a:	f8da 0000 	ldr.w	r0, [sl]
   1678e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16790:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   16792:	46c4      	mov	ip, r8
   16794:	f8c9 3000 	str.w	r3, [r9]
   16798:	d1ca      	bne.n	16730 <sys_clock_announce+0x30>
		curr_tick += dt;
   1679a:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1679e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   167a0:	189a      	adds	r2, r3, r2
   167a2:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
   167a6:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   167aa:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   167ae:	f7ff fed1 	bl	16554 <next_timeout>
   167b2:	4621      	mov	r1, r4
   167b4:	f7f7 fcda 	bl	e16c <sys_clock_set_timeout>
	__asm__ volatile(
   167b8:	f388 8811 	msr	BASEPRI, r8
   167bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   167c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   167c4:	f7ff bc02 	b.w	15fcc <z_time_slice>
   167c8:	20000a60 	.word	0x20000a60
   167cc:	20004818 	.word	0x20004818
   167d0:	20002940 	.word	0x20002940

000167d4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   167d4:	b510      	push	{r4, lr}
	__asm__ volatile(
   167d6:	f04f 0320 	mov.w	r3, #32
   167da:	f3ef 8411 	mrs	r4, BASEPRI
   167de:	f383 8812 	msr	BASEPRI_MAX, r3
   167e2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   167e6:	f7ff feab 	bl	16540 <elapsed>
   167ea:	4603      	mov	r3, r0
   167ec:	4a05      	ldr	r2, [pc, #20]	; (16804 <sys_clock_tick_get+0x30>)
   167ee:	e9d2 0100 	ldrd	r0, r1, [r2]
   167f2:	1818      	adds	r0, r3, r0
   167f4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   167f8:	f384 8811 	msr	BASEPRI, r4
   167fc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   16800:	bd10      	pop	{r4, pc}
   16802:	bf00      	nop
   16804:	20002940 	.word	0x20002940

00016808 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   16808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1680a:	4604      	mov	r4, r0
	__asm__ volatile(
   1680c:	f04f 0320 	mov.w	r3, #32
   16810:	f3ef 8711 	mrs	r7, BASEPRI
   16814:	f383 8812 	msr	BASEPRI_MAX, r3
   16818:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   1681c:	6802      	ldr	r2, [r0, #0]
   1681e:	b122      	cbz	r2, 1682a <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   16820:	f387 8811 	msr	BASEPRI, r7
   16824:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   16828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1682a:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   1682e:	1c58      	adds	r0, r3, #1
   16830:	f146 0100 	adc.w	r1, r6, #0
   16834:	2802      	cmp	r0, #2
   16836:	f171 0100 	sbcs.w	r1, r1, #0
   1683a:	d327      	bcc.n	1688c <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   1683c:	2b01      	cmp	r3, #1
   1683e:	f176 0100 	sbcs.w	r1, r6, #0
   16842:	bfbc      	itt	lt
   16844:	2301      	movlt	r3, #1
   16846:	4616      	movlt	r6, r2
   16848:	1e5d      	subs	r5, r3, #1
   1684a:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   1684e:	f00d fe37 	bl	244c0 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   16852:	3001      	adds	r0, #1
   16854:	f141 0100 	adc.w	r1, r1, #0
   16858:	1940      	adds	r0, r0, r5
   1685a:	eb46 0101 	adc.w	r1, r6, r1
   1685e:	2801      	cmp	r0, #1
   16860:	f171 0100 	sbcs.w	r1, r1, #0
   16864:	db3a      	blt.n	168dc <z_timer_expiration_handler+0xd4>
   16866:	f00d fe2b 	bl	244c0 <z_impl_k_uptime_ticks>
   1686a:	3001      	adds	r0, #1
   1686c:	f141 0100 	adc.w	r1, r1, #0
   16870:	f06f 0201 	mvn.w	r2, #1
   16874:	1940      	adds	r0, r0, r5
   16876:	eb46 0301 	adc.w	r3, r6, r1
   1687a:	f04f 31ff 	mov.w	r1, #4294967295
   1687e:	1a12      	subs	r2, r2, r0
   16880:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   16884:	4620      	mov	r0, r4
   16886:	4918      	ldr	r1, [pc, #96]	; (168e8 <z_timer_expiration_handler+0xe0>)
   16888:	f7ff fec4 	bl	16614 <z_add_timeout>
	timer->status += 1U;
   1688c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1688e:	3301      	adds	r3, #1
   16890:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   16892:	6a23      	ldr	r3, [r4, #32]
   16894:	b173      	cbz	r3, 168b4 <z_timer_expiration_handler+0xac>
   16896:	f387 8811 	msr	BASEPRI, r7
   1689a:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   1689e:	4620      	mov	r0, r4
   168a0:	6a23      	ldr	r3, [r4, #32]
   168a2:	4798      	blx	r3
	__asm__ volatile(
   168a4:	f04f 0320 	mov.w	r3, #32
   168a8:	f3ef 8711 	mrs	r7, BASEPRI
   168ac:	f383 8812 	msr	BASEPRI_MAX, r3
   168b0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   168b4:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   168b8:	42a5      	cmp	r5, r4
   168ba:	d0b1      	beq.n	16820 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   168bc:	2d00      	cmp	r5, #0
   168be:	d0af      	beq.n	16820 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   168c0:	4628      	mov	r0, r5
   168c2:	f00d fcf3 	bl	242ac <z_unpend_thread_no_timeout>
   168c6:	2300      	movs	r3, #0
   168c8:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   168ca:	f387 8811 	msr	BASEPRI, r7
   168ce:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   168d2:	4628      	mov	r0, r5
}
   168d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   168d8:	f00d bcd8 	b.w	2428c <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   168dc:	f06f 0201 	mvn.w	r2, #1
   168e0:	f04f 33ff 	mov.w	r3, #4294967295
   168e4:	e7ce      	b.n	16884 <z_timer_expiration_handler+0x7c>
   168e6:	bf00      	nop
   168e8:	00016809 	.word	0x00016809

000168ec <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   168ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   168f0:	bf08      	it	eq
   168f2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   168f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168fa:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   168fe:	4605      	mov	r5, r0
   16900:	461c      	mov	r4, r3
   16902:	4691      	mov	r9, r2
   16904:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   16906:	d01c      	beq.n	16942 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   16908:	1c53      	adds	r3, r2, #1
   1690a:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   1690e:	db09      	blt.n	16924 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   16910:	2a01      	cmp	r2, #1
   16912:	f174 0300 	sbcs.w	r3, r4, #0
   16916:	bfbc      	itt	lt
   16918:	2201      	movlt	r2, #1
   1691a:	2400      	movlt	r4, #0
   1691c:	f112 39ff 	adds.w	r9, r2, #4294967295
   16920:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   16924:	4628      	mov	r0, r5
   16926:	f00d fd91 	bl	2444c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1692a:	2300      	movs	r3, #0
	timer->period = period;
   1692c:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   16930:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   16932:	464a      	mov	r2, r9
   16934:	4643      	mov	r3, r8
   16936:	4628      	mov	r0, r5
		     duration);
}
   16938:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1693c:	4902      	ldr	r1, [pc, #8]	; (16948 <z_impl_k_timer_start+0x5c>)
   1693e:	f7ff be69 	b.w	16614 <z_add_timeout>
}
   16942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16946:	bf00      	nop
   16948:	00016809 	.word	0x00016809

0001694c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1694c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16950:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   16952:	4b29      	ldr	r3, [pc, #164]	; (169f8 <z_impl_k_poll+0xac>)
{
   16954:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   16956:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   16958:	2301      	movs	r3, #1
   1695a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1695e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   16962:	ea52 0305 	orrs.w	r3, r2, r5
   16966:	bf0c      	ite	eq
   16968:	2301      	moveq	r3, #1
   1696a:	2300      	movne	r3, #0
   1696c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   16970:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   16972:	f00d fe27 	bl	245c4 <register_events>
   16976:	4681      	mov	r9, r0
	__asm__ volatile(
   16978:	f04f 0320 	mov.w	r3, #32
   1697c:	f3ef 8a11 	mrs	sl, BASEPRI
   16980:	f383 8812 	msr	BASEPRI_MAX, r3
   16984:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   16988:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1698c:	b964      	cbnz	r4, 169a8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1698e:	4601      	mov	r1, r0
   16990:	4652      	mov	r2, sl
   16992:	4640      	mov	r0, r8
   16994:	f00d fee7 	bl	24766 <clear_event_registrations>
	__asm__ volatile(
   16998:	f38a 8811 	msr	BASEPRI, sl
   1699c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   169a0:	4620      	mov	r0, r4
   169a2:	b002      	add	sp, #8
   169a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   169a8:	2300      	movs	r3, #0
   169aa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   169ae:	ea56 0305 	orrs.w	r3, r6, r5
   169b2:	d106      	bne.n	169c2 <z_impl_k_poll+0x76>
   169b4:	f38a 8811 	msr	BASEPRI, sl
   169b8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   169bc:	f06f 040a 	mvn.w	r4, #10
   169c0:	e7ee      	b.n	169a0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   169c2:	4651      	mov	r1, sl
   169c4:	e9cd 6500 	strd	r6, r5, [sp]
   169c8:	4a0c      	ldr	r2, [pc, #48]	; (169fc <z_impl_k_poll+0xb0>)
   169ca:	480d      	ldr	r0, [pc, #52]	; (16a00 <z_impl_k_poll+0xb4>)
   169cc:	f7ff fb2e 	bl	1602c <z_pend_curr>
   169d0:	4604      	mov	r4, r0
	__asm__ volatile(
   169d2:	f04f 0320 	mov.w	r3, #32
   169d6:	f3ef 8511 	mrs	r5, BASEPRI
   169da:	f383 8812 	msr	BASEPRI_MAX, r3
   169de:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   169e2:	462a      	mov	r2, r5
   169e4:	4649      	mov	r1, r9
   169e6:	4640      	mov	r0, r8
   169e8:	f00d febd 	bl	24766 <clear_event_registrations>
	__asm__ volatile(
   169ec:	f385 8811 	msr	BASEPRI, r5
   169f0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   169f4:	e7d4      	b.n	169a0 <z_impl_k_poll+0x54>
   169f6:	bf00      	nop
   169f8:	200047dc 	.word	0x200047dc
   169fc:	20000a68 	.word	0x20000a68
   16a00:	2000554f 	.word	0x2000554f

00016a04 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   16a04:	b538      	push	{r3, r4, r5, lr}
   16a06:	4603      	mov	r3, r0
	__asm__ volatile(
   16a08:	f04f 0220 	mov.w	r2, #32
   16a0c:	f3ef 8511 	mrs	r5, BASEPRI
   16a10:	f382 8812 	msr	BASEPRI_MAX, r2
   16a14:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   16a18:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   16a1a:	2101      	movs	r1, #1
   16a1c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   16a1e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   16a20:	4283      	cmp	r3, r0
   16a22:	d106      	bne.n	16a32 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   16a24:	f385 8811 	msr	BASEPRI, r5
   16a28:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   16a2c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   16a2e:	4620      	mov	r0, r4
   16a30:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   16a32:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   16a36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16a38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16a3a:	2300      	movs	r3, #0
	node->prev = NULL;
   16a3c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16a40:	f00d fe37 	bl	246b2 <signal_poll_event>
	z_reschedule(&lock, key);
   16a44:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16a46:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   16a48:	4801      	ldr	r0, [pc, #4]	; (16a50 <z_impl_k_poll_signal_raise+0x4c>)
   16a4a:	f7ff fb53 	bl	160f4 <z_reschedule>
	return rc;
   16a4e:	e7ee      	b.n	16a2e <z_impl_k_poll_signal_raise+0x2a>
   16a50:	2000554f 	.word	0x2000554f

00016a54 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   16a54:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   16a56:	4601      	mov	r1, r0
   16a58:	4801      	ldr	r0, [pc, #4]	; (16a60 <k_aligned_alloc+0xc>)
   16a5a:	f00d bed0 	b.w	247fe <z_heap_aligned_alloc>
   16a5e:	bf00      	nop
   16a60:	200011d4 	.word	0x200011d4

00016a64 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   16a64:	4b01      	ldr	r3, [pc, #4]	; (16a6c <k_thread_system_pool_assign+0x8>)
   16a66:	6743      	str	r3, [r0, #116]	; 0x74
}
   16a68:	4770      	bx	lr
   16a6a:	bf00      	nop
   16a6c:	200011d4 	.word	0x200011d4

00016a70 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16a70:	b538      	push	{r3, r4, r5, lr}
   16a72:	4604      	mov	r4, r0
   16a74:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   16a76:	f00d f9d7 	bl	23e28 <k_is_in_isr>
   16a7a:	b920      	cbnz	r0, 16a86 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   16a7c:	4b06      	ldr	r3, [pc, #24]	; (16a98 <z_thread_aligned_alloc+0x28>)
   16a7e:	689b      	ldr	r3, [r3, #8]
   16a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   16a82:	b90b      	cbnz	r3, 16a88 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   16a84:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   16a86:	4b05      	ldr	r3, [pc, #20]	; (16a9c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   16a88:	462a      	mov	r2, r5
   16a8a:	4621      	mov	r1, r4
   16a8c:	4618      	mov	r0, r3
}
   16a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   16a92:	f00d beb4 	b.w	247fe <z_heap_aligned_alloc>
   16a96:	bf00      	nop
   16a98:	200047dc 	.word	0x200047dc
   16a9c:	200011d4 	.word	0x200011d4

00016aa0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   16aa0:	4801      	ldr	r0, [pc, #4]	; (16aa8 <boot_banner+0x8>)
   16aa2:	f007 be8e 	b.w	1e7c2 <printk>
   16aa6:	bf00      	nop
   16aa8:	0003681e 	.word	0x0003681e

00016aac <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   16aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   16aae:	2400      	movs	r4, #0
   16ab0:	4b08      	ldr	r3, [pc, #32]	; (16ad4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   16ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   16ab6:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   16ab8:	ab02      	add	r3, sp, #8
   16aba:	9300      	str	r3, [sp, #0]
   16abc:	4906      	ldr	r1, [pc, #24]	; (16ad8 <k_sys_work_q_init+0x2c>)
   16abe:	f04f 33ff 	mov.w	r3, #4294967295
   16ac2:	4806      	ldr	r0, [pc, #24]	; (16adc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   16ac4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   16ac8:	f7ff f8a4 	bl	15c14 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   16acc:	4620      	mov	r0, r4
   16ace:	b004      	add	sp, #16
   16ad0:	bd10      	pop	{r4, pc}
   16ad2:	bf00      	nop
   16ad4:	0003684c 	.word	0x0003684c
   16ad8:	20032790 	.word	0x20032790
   16adc:	20002948 	.word	0x20002948

00016ae0 <frexp>:
   16ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ae2:	f8df c05c 	ldr.w	ip, [pc, #92]	; 16b40 <frexp+0x60>
   16ae6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   16aea:	2700      	movs	r7, #0
   16aec:	4604      	mov	r4, r0
   16aee:	4563      	cmp	r3, ip
   16af0:	460d      	mov	r5, r1
   16af2:	6017      	str	r7, [r2, #0]
   16af4:	d821      	bhi.n	16b3a <frexp+0x5a>
   16af6:	4684      	mov	ip, r0
   16af8:	ea53 0c0c 	orrs.w	ip, r3, ip
   16afc:	d01d      	beq.n	16b3a <frexp+0x5a>
   16afe:	f8df c044 	ldr.w	ip, [pc, #68]	; 16b44 <frexp+0x64>
   16b02:	4616      	mov	r6, r2
   16b04:	460a      	mov	r2, r1
   16b06:	ea01 0c0c 	and.w	ip, r1, ip
   16b0a:	f1bc 0f00 	cmp.w	ip, #0
   16b0e:	d109      	bne.n	16b24 <frexp+0x44>
   16b10:	2200      	movs	r2, #0
   16b12:	4b0d      	ldr	r3, [pc, #52]	; (16b48 <frexp+0x68>)
   16b14:	f7e9 fcdc 	bl	4d0 <__aeabi_dmul>
   16b18:	f06f 0735 	mvn.w	r7, #53	; 0x35
   16b1c:	4604      	mov	r4, r0
   16b1e:	460a      	mov	r2, r1
   16b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   16b24:	151b      	asrs	r3, r3, #20
   16b26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   16b2a:	443b      	add	r3, r7
   16b2c:	6033      	str	r3, [r6, #0]
   16b2e:	4b07      	ldr	r3, [pc, #28]	; (16b4c <frexp+0x6c>)
   16b30:	4013      	ands	r3, r2
   16b32:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   16b36:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   16b3a:	4620      	mov	r0, r4
   16b3c:	4629      	mov	r1, r5
   16b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b40:	7fefffff 	.word	0x7fefffff
   16b44:	7ff00000 	.word	0x7ff00000
   16b48:	43500000 	.word	0x43500000
   16b4c:	800fffff 	.word	0x800fffff

00016b50 <ldexp>:
   16b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b52:	4604      	mov	r4, r0
   16b54:	460d      	mov	r5, r1
   16b56:	4617      	mov	r7, r2
   16b58:	f000 f826 	bl	16ba8 <finite>
   16b5c:	2200      	movs	r2, #0
   16b5e:	4606      	mov	r6, r0
   16b60:	2300      	movs	r3, #0
   16b62:	4620      	mov	r0, r4
   16b64:	4629      	mov	r1, r5
   16b66:	f7e9 ffc3 	bl	af0 <__aeabi_dcmpeq>
   16b6a:	b900      	cbnz	r0, 16b6e <ldexp+0x1e>
   16b6c:	b916      	cbnz	r6, 16b74 <ldexp+0x24>
   16b6e:	4620      	mov	r0, r4
   16b70:	4629      	mov	r1, r5
   16b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b74:	463a      	mov	r2, r7
   16b76:	4620      	mov	r0, r4
   16b78:	4629      	mov	r1, r5
   16b7a:	f7ea fbcd 	bl	1318 <scalbn>
   16b7e:	4604      	mov	r4, r0
   16b80:	460d      	mov	r5, r1
   16b82:	f000 f811 	bl	16ba8 <finite>
   16b86:	2200      	movs	r2, #0
   16b88:	4606      	mov	r6, r0
   16b8a:	2300      	movs	r3, #0
   16b8c:	4620      	mov	r0, r4
   16b8e:	4629      	mov	r1, r5
   16b90:	f7e9 ffae 	bl	af0 <__aeabi_dcmpeq>
   16b94:	b908      	cbnz	r0, 16b9a <ldexp+0x4a>
   16b96:	2e00      	cmp	r6, #0
   16b98:	d1e9      	bne.n	16b6e <ldexp+0x1e>
   16b9a:	f009 fa52 	bl	20042 <__errno>
   16b9e:	2322      	movs	r3, #34	; 0x22
   16ba0:	4629      	mov	r1, r5
   16ba2:	6003      	str	r3, [r0, #0]
   16ba4:	4620      	mov	r0, r4
   16ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016ba8 <finite>:
   16ba8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   16bac:	4b01      	ldr	r3, [pc, #4]	; (16bb4 <finite+0xc>)
   16bae:	4413      	add	r3, r2
   16bb0:	0fd8      	lsrs	r0, r3, #31
   16bb2:	4770      	bx	lr
   16bb4:	80100000 	.word	0x80100000

00016bb8 <_calloc_r>:
   16bb8:	b510      	push	{r4, lr}
   16bba:	fb02 f101 	mul.w	r1, r2, r1
   16bbe:	f000 f83b 	bl	16c38 <_malloc_r>
   16bc2:	4604      	mov	r4, r0
   16bc4:	b168      	cbz	r0, 16be2 <_calloc_r+0x2a>
   16bc6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   16bca:	f022 0203 	bic.w	r2, r2, #3
   16bce:	3a04      	subs	r2, #4
   16bd0:	2a24      	cmp	r2, #36	; 0x24
   16bd2:	d814      	bhi.n	16bfe <_calloc_r+0x46>
   16bd4:	2a13      	cmp	r2, #19
   16bd6:	d806      	bhi.n	16be6 <_calloc_r+0x2e>
   16bd8:	4602      	mov	r2, r0
   16bda:	2300      	movs	r3, #0
   16bdc:	6013      	str	r3, [r2, #0]
   16bde:	6053      	str	r3, [r2, #4]
   16be0:	6093      	str	r3, [r2, #8]
   16be2:	4620      	mov	r0, r4
   16be4:	bd10      	pop	{r4, pc}
   16be6:	2300      	movs	r3, #0
   16be8:	2a1b      	cmp	r2, #27
   16bea:	6003      	str	r3, [r0, #0]
   16bec:	6043      	str	r3, [r0, #4]
   16bee:	d90b      	bls.n	16c08 <_calloc_r+0x50>
   16bf0:	2a24      	cmp	r2, #36	; 0x24
   16bf2:	6083      	str	r3, [r0, #8]
   16bf4:	60c3      	str	r3, [r0, #12]
   16bf6:	d00a      	beq.n	16c0e <_calloc_r+0x56>
   16bf8:	f100 0210 	add.w	r2, r0, #16
   16bfc:	e7ed      	b.n	16bda <_calloc_r+0x22>
   16bfe:	2100      	movs	r1, #0
   16c00:	f000 fbea 	bl	173d8 <memset>
   16c04:	4620      	mov	r0, r4
   16c06:	bd10      	pop	{r4, pc}
   16c08:	f100 0208 	add.w	r2, r0, #8
   16c0c:	e7e5      	b.n	16bda <_calloc_r+0x22>
   16c0e:	f100 0218 	add.w	r2, r0, #24
   16c12:	6103      	str	r3, [r0, #16]
   16c14:	6143      	str	r3, [r0, #20]
   16c16:	e7e0      	b.n	16bda <_calloc_r+0x22>

00016c18 <malloc>:
   16c18:	4b02      	ldr	r3, [pc, #8]	; (16c24 <malloc+0xc>)
   16c1a:	4601      	mov	r1, r0
   16c1c:	6818      	ldr	r0, [r3, #0]
   16c1e:	f000 b80b 	b.w	16c38 <_malloc_r>
   16c22:	bf00      	nop
   16c24:	20000a70 	.word	0x20000a70

00016c28 <free>:
   16c28:	4b02      	ldr	r3, [pc, #8]	; (16c34 <free+0xc>)
   16c2a:	4601      	mov	r1, r0
   16c2c:	6818      	ldr	r0, [r3, #0]
   16c2e:	f002 bd67 	b.w	19700 <_free_r>
   16c32:	bf00      	nop
   16c34:	20000a70 	.word	0x20000a70

00016c38 <_malloc_r>:
   16c38:	f101 030b 	add.w	r3, r1, #11
   16c3c:	2b16      	cmp	r3, #22
   16c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c42:	4605      	mov	r5, r0
   16c44:	b083      	sub	sp, #12
   16c46:	d823      	bhi.n	16c90 <_malloc_r+0x58>
   16c48:	2910      	cmp	r1, #16
   16c4a:	f200 80ad 	bhi.w	16da8 <_malloc_r+0x170>
   16c4e:	f000 fc17 	bl	17480 <__malloc_lock>
   16c52:	2410      	movs	r4, #16
   16c54:	2218      	movs	r2, #24
   16c56:	2002      	movs	r0, #2
   16c58:	4ebf      	ldr	r6, [pc, #764]	; (16f58 <_malloc_r+0x320>)
   16c5a:	4432      	add	r2, r6
   16c5c:	6857      	ldr	r7, [r2, #4]
   16c5e:	f1a2 0108 	sub.w	r1, r2, #8
   16c62:	428f      	cmp	r7, r1
   16c64:	f000 810b 	beq.w	16e7e <_malloc_r+0x246>
   16c68:	687a      	ldr	r2, [r7, #4]
   16c6a:	4628      	mov	r0, r5
   16c6c:	f022 0203 	bic.w	r2, r2, #3
   16c70:	443a      	add	r2, r7
   16c72:	6853      	ldr	r3, [r2, #4]
   16c74:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   16c78:	f043 0301 	orr.w	r3, r3, #1
   16c7c:	3708      	adds	r7, #8
   16c7e:	60e1      	str	r1, [r4, #12]
   16c80:	608c      	str	r4, [r1, #8]
   16c82:	6053      	str	r3, [r2, #4]
   16c84:	f000 fc02 	bl	1748c <__malloc_unlock>
   16c88:	4638      	mov	r0, r7
   16c8a:	b003      	add	sp, #12
   16c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c90:	2b00      	cmp	r3, #0
   16c92:	f023 0407 	bic.w	r4, r3, #7
   16c96:	f2c0 8087 	blt.w	16da8 <_malloc_r+0x170>
   16c9a:	42a1      	cmp	r1, r4
   16c9c:	f200 8084 	bhi.w	16da8 <_malloc_r+0x170>
   16ca0:	f000 fbee 	bl	17480 <__malloc_lock>
   16ca4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   16ca8:	f0c0 8145 	bcc.w	16f36 <_malloc_r+0x2fe>
   16cac:	0a63      	lsrs	r3, r4, #9
   16cae:	d07f      	beq.n	16db0 <_malloc_r+0x178>
   16cb0:	2b04      	cmp	r3, #4
   16cb2:	f200 810b 	bhi.w	16ecc <_malloc_r+0x294>
   16cb6:	09a3      	lsrs	r3, r4, #6
   16cb8:	f103 0039 	add.w	r0, r3, #57	; 0x39
   16cbc:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   16cc0:	00c3      	lsls	r3, r0, #3
   16cc2:	4ea5      	ldr	r6, [pc, #660]	; (16f58 <_malloc_r+0x320>)
   16cc4:	4433      	add	r3, r6
   16cc6:	f1a3 0708 	sub.w	r7, r3, #8
   16cca:	685b      	ldr	r3, [r3, #4]
   16ccc:	429f      	cmp	r7, r3
   16cce:	d106      	bne.n	16cde <_malloc_r+0xa6>
   16cd0:	e00c      	b.n	16cec <_malloc_r+0xb4>
   16cd2:	2900      	cmp	r1, #0
   16cd4:	f280 80c1 	bge.w	16e5a <_malloc_r+0x222>
   16cd8:	68db      	ldr	r3, [r3, #12]
   16cda:	429f      	cmp	r7, r3
   16cdc:	d006      	beq.n	16cec <_malloc_r+0xb4>
   16cde:	685a      	ldr	r2, [r3, #4]
   16ce0:	f022 0203 	bic.w	r2, r2, #3
   16ce4:	1b11      	subs	r1, r2, r4
   16ce6:	290f      	cmp	r1, #15
   16ce8:	ddf3      	ble.n	16cd2 <_malloc_r+0x9a>
   16cea:	4660      	mov	r0, ip
   16cec:	f8df 826c 	ldr.w	r8, [pc, #620]	; 16f5c <_malloc_r+0x324>
   16cf0:	6933      	ldr	r3, [r6, #16]
   16cf2:	4543      	cmp	r3, r8
   16cf4:	f000 809d 	beq.w	16e32 <_malloc_r+0x1fa>
   16cf8:	685a      	ldr	r2, [r3, #4]
   16cfa:	f022 0c03 	bic.w	ip, r2, #3
   16cfe:	ebac 0204 	sub.w	r2, ip, r4
   16d02:	2a0f      	cmp	r2, #15
   16d04:	f300 8132 	bgt.w	16f6c <_malloc_r+0x334>
   16d08:	2a00      	cmp	r2, #0
   16d0a:	e9c6 8804 	strd	r8, r8, [r6, #16]
   16d0e:	f280 8116 	bge.w	16f3e <_malloc_r+0x306>
   16d12:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
   16d16:	f8d6 e004 	ldr.w	lr, [r6, #4]
   16d1a:	f080 80b6 	bcs.w	16e8a <_malloc_r+0x252>
   16d1e:	ea4f 02dc 	mov.w	r2, ip, lsr #3
   16d22:	2101      	movs	r1, #1
   16d24:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   16d28:	3201      	adds	r2, #1
   16d2a:	fa01 f10c 	lsl.w	r1, r1, ip
   16d2e:	f856 7032 	ldr.w	r7, [r6, r2, lsl #3]
   16d32:	ea4e 0e01 	orr.w	lr, lr, r1
   16d36:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
   16d3a:	3908      	subs	r1, #8
   16d3c:	f8c6 e004 	str.w	lr, [r6, #4]
   16d40:	e9c3 7102 	strd	r7, r1, [r3, #8]
   16d44:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
   16d48:	60fb      	str	r3, [r7, #12]
   16d4a:	1083      	asrs	r3, r0, #2
   16d4c:	f04f 0c01 	mov.w	ip, #1
   16d50:	fa0c fc03 	lsl.w	ip, ip, r3
   16d54:	45f4      	cmp	ip, lr
   16d56:	d831      	bhi.n	16dbc <_malloc_r+0x184>
   16d58:	ea1c 0f0e 	tst.w	ip, lr
   16d5c:	d107      	bne.n	16d6e <_malloc_r+0x136>
   16d5e:	f020 0003 	bic.w	r0, r0, #3
   16d62:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   16d66:	3004      	adds	r0, #4
   16d68:	ea1c 0f0e 	tst.w	ip, lr
   16d6c:	d0f9      	beq.n	16d62 <_malloc_r+0x12a>
   16d6e:	eb06 0ac0 	add.w	sl, r6, r0, lsl #3
   16d72:	4681      	mov	r9, r0
   16d74:	46d6      	mov	lr, sl
   16d76:	f8de 200c 	ldr.w	r2, [lr, #12]
   16d7a:	e00b      	b.n	16d94 <_malloc_r+0x15c>
   16d7c:	6851      	ldr	r1, [r2, #4]
   16d7e:	4613      	mov	r3, r2
   16d80:	68d2      	ldr	r2, [r2, #12]
   16d82:	f021 0103 	bic.w	r1, r1, #3
   16d86:	1b0f      	subs	r7, r1, r4
   16d88:	2f0f      	cmp	r7, #15
   16d8a:	f300 80ac 	bgt.w	16ee6 <_malloc_r+0x2ae>
   16d8e:	2f00      	cmp	r7, #0
   16d90:	f280 80c3 	bge.w	16f1a <_malloc_r+0x2e2>
   16d94:	4596      	cmp	lr, r2
   16d96:	d1f1      	bne.n	16d7c <_malloc_r+0x144>
   16d98:	f109 0901 	add.w	r9, r9, #1
   16d9c:	f10e 0e08 	add.w	lr, lr, #8
   16da0:	f019 0f03 	tst.w	r9, #3
   16da4:	d1e7      	bne.n	16d76 <_malloc_r+0x13e>
   16da6:	e129      	b.n	16ffc <_malloc_r+0x3c4>
   16da8:	230c      	movs	r3, #12
   16daa:	602b      	str	r3, [r5, #0]
   16dac:	2700      	movs	r7, #0
   16dae:	e76b      	b.n	16c88 <_malloc_r+0x50>
   16db0:	f44f 7300 	mov.w	r3, #512	; 0x200
   16db4:	2040      	movs	r0, #64	; 0x40
   16db6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   16dba:	e782      	b.n	16cc2 <_malloc_r+0x8a>
   16dbc:	68b7      	ldr	r7, [r6, #8]
   16dbe:	687b      	ldr	r3, [r7, #4]
   16dc0:	f023 0903 	bic.w	r9, r3, #3
   16dc4:	eba9 0304 	sub.w	r3, r9, r4
   16dc8:	2b0f      	cmp	r3, #15
   16dca:	dd01      	ble.n	16dd0 <_malloc_r+0x198>
   16dcc:	45a1      	cmp	r9, r4
   16dce:	d233      	bcs.n	16e38 <_malloc_r+0x200>
   16dd0:	4a63      	ldr	r2, [pc, #396]	; (16f60 <_malloc_r+0x328>)
   16dd2:	4b64      	ldr	r3, [pc, #400]	; (16f64 <_malloc_r+0x32c>)
   16dd4:	6811      	ldr	r1, [r2, #0]
   16dd6:	681b      	ldr	r3, [r3, #0]
   16dd8:	3101      	adds	r1, #1
   16dda:	eb04 0803 	add.w	r8, r4, r3
   16dde:	eb07 0309 	add.w	r3, r7, r9
   16de2:	f000 8171 	beq.w	170c8 <_malloc_r+0x490>
   16de6:	f241 010f 	movw	r1, #4111	; 0x100f
   16dea:	4441      	add	r1, r8
   16dec:	f8df 8178 	ldr.w	r8, [pc, #376]	; 16f68 <_malloc_r+0x330>
   16df0:	ea01 0808 	and.w	r8, r1, r8
   16df4:	4641      	mov	r1, r8
   16df6:	4628      	mov	r0, r5
   16df8:	9300      	str	r3, [sp, #0]
   16dfa:	f000 fb4d 	bl	17498 <_sbrk_r>
   16dfe:	f1b0 3fff 	cmp.w	r0, #4294967295
   16e02:	4682      	mov	sl, r0
   16e04:	9b00      	ldr	r3, [sp, #0]
   16e06:	4a56      	ldr	r2, [pc, #344]	; (16f60 <_malloc_r+0x328>)
   16e08:	d005      	beq.n	16e16 <_malloc_r+0x1de>
   16e0a:	4283      	cmp	r3, r0
   16e0c:	f240 80ca 	bls.w	16fa4 <_malloc_r+0x36c>
   16e10:	42b7      	cmp	r7, r6
   16e12:	f000 810c 	beq.w	1702e <_malloc_r+0x3f6>
   16e16:	68b7      	ldr	r7, [r6, #8]
   16e18:	687b      	ldr	r3, [r7, #4]
   16e1a:	f023 0803 	bic.w	r8, r3, #3
   16e1e:	eba8 0304 	sub.w	r3, r8, r4
   16e22:	2b0f      	cmp	r3, #15
   16e24:	dd01      	ble.n	16e2a <_malloc_r+0x1f2>
   16e26:	45a0      	cmp	r8, r4
   16e28:	d206      	bcs.n	16e38 <_malloc_r+0x200>
   16e2a:	4628      	mov	r0, r5
   16e2c:	f000 fb2e 	bl	1748c <__malloc_unlock>
   16e30:	e7bc      	b.n	16dac <_malloc_r+0x174>
   16e32:	f8d6 e004 	ldr.w	lr, [r6, #4]
   16e36:	e788      	b.n	16d4a <_malloc_r+0x112>
   16e38:	1939      	adds	r1, r7, r4
   16e3a:	f044 0401 	orr.w	r4, r4, #1
   16e3e:	f043 0301 	orr.w	r3, r3, #1
   16e42:	3708      	adds	r7, #8
   16e44:	f847 4c04 	str.w	r4, [r7, #-4]
   16e48:	4628      	mov	r0, r5
   16e4a:	60b1      	str	r1, [r6, #8]
   16e4c:	604b      	str	r3, [r1, #4]
   16e4e:	f000 fb1d 	bl	1748c <__malloc_unlock>
   16e52:	4638      	mov	r0, r7
   16e54:	b003      	add	sp, #12
   16e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e5a:	441a      	add	r2, r3
   16e5c:	f103 0708 	add.w	r7, r3, #8
   16e60:	4628      	mov	r0, r5
   16e62:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
   16e66:	6853      	ldr	r3, [r2, #4]
   16e68:	60f1      	str	r1, [r6, #12]
   16e6a:	f043 0301 	orr.w	r3, r3, #1
   16e6e:	608e      	str	r6, [r1, #8]
   16e70:	6053      	str	r3, [r2, #4]
   16e72:	f000 fb0b 	bl	1748c <__malloc_unlock>
   16e76:	4638      	mov	r0, r7
   16e78:	b003      	add	sp, #12
   16e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e7e:	68d7      	ldr	r7, [r2, #12]
   16e80:	42ba      	cmp	r2, r7
   16e82:	f47f aef1 	bne.w	16c68 <_malloc_r+0x30>
   16e86:	3002      	adds	r0, #2
   16e88:	e730      	b.n	16cec <_malloc_r+0xb4>
   16e8a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
   16e8e:	ea4f 215c 	mov.w	r1, ip, lsr #9
   16e92:	f0c0 8080 	bcc.w	16f96 <_malloc_r+0x35e>
   16e96:	2914      	cmp	r1, #20
   16e98:	f200 8132 	bhi.w	17100 <_malloc_r+0x4c8>
   16e9c:	f101 025c 	add.w	r2, r1, #92	; 0x5c
   16ea0:	315b      	adds	r1, #91	; 0x5b
   16ea2:	00d2      	lsls	r2, r2, #3
   16ea4:	18b7      	adds	r7, r6, r2
   16ea6:	58b2      	ldr	r2, [r6, r2]
   16ea8:	3f08      	subs	r7, #8
   16eaa:	4297      	cmp	r7, r2
   16eac:	d103      	bne.n	16eb6 <_malloc_r+0x27e>
   16eae:	e10e      	b.n	170ce <_malloc_r+0x496>
   16eb0:	6892      	ldr	r2, [r2, #8]
   16eb2:	4297      	cmp	r7, r2
   16eb4:	d004      	beq.n	16ec0 <_malloc_r+0x288>
   16eb6:	6851      	ldr	r1, [r2, #4]
   16eb8:	f021 0103 	bic.w	r1, r1, #3
   16ebc:	4561      	cmp	r1, ip
   16ebe:	d8f7      	bhi.n	16eb0 <_malloc_r+0x278>
   16ec0:	68d7      	ldr	r7, [r2, #12]
   16ec2:	e9c3 2702 	strd	r2, r7, [r3, #8]
   16ec6:	60bb      	str	r3, [r7, #8]
   16ec8:	60d3      	str	r3, [r2, #12]
   16eca:	e73e      	b.n	16d4a <_malloc_r+0x112>
   16ecc:	2b14      	cmp	r3, #20
   16ece:	f240 808a 	bls.w	16fe6 <_malloc_r+0x3ae>
   16ed2:	2b54      	cmp	r3, #84	; 0x54
   16ed4:	f200 811d 	bhi.w	17112 <_malloc_r+0x4da>
   16ed8:	0b23      	lsrs	r3, r4, #12
   16eda:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   16ede:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   16ee2:	00c3      	lsls	r3, r0, #3
   16ee4:	e6ed      	b.n	16cc2 <_malloc_r+0x8a>
   16ee6:	f8d3 c008 	ldr.w	ip, [r3, #8]
   16eea:	4628      	mov	r0, r5
   16eec:	191d      	adds	r5, r3, r4
   16eee:	f044 0401 	orr.w	r4, r4, #1
   16ef2:	605c      	str	r4, [r3, #4]
   16ef4:	f8cc 200c 	str.w	r2, [ip, #12]
   16ef8:	f8c2 c008 	str.w	ip, [r2, #8]
   16efc:	f047 0201 	orr.w	r2, r7, #1
   16f00:	e9c6 5504 	strd	r5, r5, [r6, #16]
   16f04:	f8c5 8008 	str.w	r8, [r5, #8]
   16f08:	f8c5 800c 	str.w	r8, [r5, #12]
   16f0c:	606a      	str	r2, [r5, #4]
   16f0e:	505f      	str	r7, [r3, r1]
   16f10:	f103 0708 	add.w	r7, r3, #8
   16f14:	f000 faba 	bl	1748c <__malloc_unlock>
   16f18:	e6b6      	b.n	16c88 <_malloc_r+0x50>
   16f1a:	4419      	add	r1, r3
   16f1c:	461f      	mov	r7, r3
   16f1e:	4628      	mov	r0, r5
   16f20:	684b      	ldr	r3, [r1, #4]
   16f22:	f043 0301 	orr.w	r3, r3, #1
   16f26:	604b      	str	r3, [r1, #4]
   16f28:	f857 3f08 	ldr.w	r3, [r7, #8]!
   16f2c:	60da      	str	r2, [r3, #12]
   16f2e:	6093      	str	r3, [r2, #8]
   16f30:	f000 faac 	bl	1748c <__malloc_unlock>
   16f34:	e6a8      	b.n	16c88 <_malloc_r+0x50>
   16f36:	08e0      	lsrs	r0, r4, #3
   16f38:	f104 0208 	add.w	r2, r4, #8
   16f3c:	e68c      	b.n	16c58 <_malloc_r+0x20>
   16f3e:	449c      	add	ip, r3
   16f40:	f103 0708 	add.w	r7, r3, #8
   16f44:	4628      	mov	r0, r5
   16f46:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16f4a:	f043 0301 	orr.w	r3, r3, #1
   16f4e:	f8cc 3004 	str.w	r3, [ip, #4]
   16f52:	f000 fa9b 	bl	1748c <__malloc_unlock>
   16f56:	e697      	b.n	16c88 <_malloc_r+0x50>
   16f58:	20000290 	.word	0x20000290
   16f5c:	20000298 	.word	0x20000298
   16f60:	20000a74 	.word	0x20000a74
   16f64:	2000484c 	.word	0x2000484c
   16f68:	fffff000 	.word	0xfffff000
   16f6c:	1919      	adds	r1, r3, r4
   16f6e:	f044 0401 	orr.w	r4, r4, #1
   16f72:	4628      	mov	r0, r5
   16f74:	f103 0708 	add.w	r7, r3, #8
   16f78:	605c      	str	r4, [r3, #4]
   16f7a:	f042 0401 	orr.w	r4, r2, #1
   16f7e:	e9c6 1104 	strd	r1, r1, [r6, #16]
   16f82:	f8c1 8008 	str.w	r8, [r1, #8]
   16f86:	f8c1 800c 	str.w	r8, [r1, #12]
   16f8a:	604c      	str	r4, [r1, #4]
   16f8c:	f843 200c 	str.w	r2, [r3, ip]
   16f90:	f000 fa7c 	bl	1748c <__malloc_unlock>
   16f94:	e678      	b.n	16c88 <_malloc_r+0x50>
   16f96:	ea4f 119c 	mov.w	r1, ip, lsr #6
   16f9a:	f101 0239 	add.w	r2, r1, #57	; 0x39
   16f9e:	3138      	adds	r1, #56	; 0x38
   16fa0:	00d2      	lsls	r2, r2, #3
   16fa2:	e77f      	b.n	16ea4 <_malloc_r+0x26c>
   16fa4:	f8df b204 	ldr.w	fp, [pc, #516]	; 171ac <_malloc_r+0x574>
   16fa8:	f8db 1000 	ldr.w	r1, [fp]
   16fac:	4441      	add	r1, r8
   16fae:	4608      	mov	r0, r1
   16fb0:	f8cb 1000 	str.w	r1, [fp]
   16fb4:	d142      	bne.n	1703c <_malloc_r+0x404>
   16fb6:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   16fba:	f1bc 0f00 	cmp.w	ip, #0
   16fbe:	d13d      	bne.n	1703c <_malloc_r+0x404>
   16fc0:	44c8      	add	r8, r9
   16fc2:	f8d6 a008 	ldr.w	sl, [r6, #8]
   16fc6:	f048 0301 	orr.w	r3, r8, #1
   16fca:	f8ca 3004 	str.w	r3, [sl, #4]
   16fce:	4a78      	ldr	r2, [pc, #480]	; (171b0 <_malloc_r+0x578>)
   16fd0:	4657      	mov	r7, sl
   16fd2:	6810      	ldr	r0, [r2, #0]
   16fd4:	4288      	cmp	r0, r1
   16fd6:	bf38      	it	cc
   16fd8:	6011      	strcc	r1, [r2, #0]
   16fda:	4a76      	ldr	r2, [pc, #472]	; (171b4 <_malloc_r+0x57c>)
   16fdc:	6810      	ldr	r0, [r2, #0]
   16fde:	4288      	cmp	r0, r1
   16fe0:	bf38      	it	cc
   16fe2:	6011      	strcc	r1, [r2, #0]
   16fe4:	e719      	b.n	16e1a <_malloc_r+0x1e2>
   16fe6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   16fea:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   16fee:	00c3      	lsls	r3, r0, #3
   16ff0:	e667      	b.n	16cc2 <_malloc_r+0x8a>
   16ff2:	f85a 3908 	ldr.w	r3, [sl], #-8
   16ff6:	4553      	cmp	r3, sl
   16ff8:	f040 80d6 	bne.w	171a8 <_malloc_r+0x570>
   16ffc:	f010 0f03 	tst.w	r0, #3
   17000:	f100 30ff 	add.w	r0, r0, #4294967295
   17004:	d1f5      	bne.n	16ff2 <_malloc_r+0x3ba>
   17006:	6873      	ldr	r3, [r6, #4]
   17008:	ea23 030c 	bic.w	r3, r3, ip
   1700c:	6073      	str	r3, [r6, #4]
   1700e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   17012:	f10c 32ff 	add.w	r2, ip, #4294967295
   17016:	429a      	cmp	r2, r3
   17018:	d304      	bcc.n	17024 <_malloc_r+0x3ec>
   1701a:	e6cf      	b.n	16dbc <_malloc_r+0x184>
   1701c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   17020:	f109 0904 	add.w	r9, r9, #4
   17024:	ea1c 0f03 	tst.w	ip, r3
   17028:	d0f8      	beq.n	1701c <_malloc_r+0x3e4>
   1702a:	4648      	mov	r0, r9
   1702c:	e69f      	b.n	16d6e <_malloc_r+0x136>
   1702e:	f8df b17c 	ldr.w	fp, [pc, #380]	; 171ac <_malloc_r+0x574>
   17032:	f8db 0000 	ldr.w	r0, [fp]
   17036:	4440      	add	r0, r8
   17038:	f8cb 0000 	str.w	r0, [fp]
   1703c:	6811      	ldr	r1, [r2, #0]
   1703e:	3101      	adds	r1, #1
   17040:	d071      	beq.n	17126 <_malloc_r+0x4ee>
   17042:	ebaa 0303 	sub.w	r3, sl, r3
   17046:	4403      	add	r3, r0
   17048:	f8cb 3000 	str.w	r3, [fp]
   1704c:	f01a 0307 	ands.w	r3, sl, #7
   17050:	d047      	beq.n	170e2 <_malloc_r+0x4aa>
   17052:	f1c3 0208 	rsb	r2, r3, #8
   17056:	4628      	mov	r0, r5
   17058:	9300      	str	r3, [sp, #0]
   1705a:	4492      	add	sl, r2
   1705c:	f241 0208 	movw	r2, #4104	; 0x1008
   17060:	44d0      	add	r8, sl
   17062:	1ad2      	subs	r2, r2, r3
   17064:	eba2 0108 	sub.w	r1, r2, r8
   17068:	f3c1 010b 	ubfx	r1, r1, #0, #12
   1706c:	9101      	str	r1, [sp, #4]
   1706e:	f000 fa13 	bl	17498 <_sbrk_r>
   17072:	1c42      	adds	r2, r0, #1
   17074:	9b00      	ldr	r3, [sp, #0]
   17076:	d072      	beq.n	1715e <_malloc_r+0x526>
   17078:	eba0 000a 	sub.w	r0, r0, sl
   1707c:	9901      	ldr	r1, [sp, #4]
   1707e:	eb00 0801 	add.w	r8, r0, r1
   17082:	f8db 2000 	ldr.w	r2, [fp]
   17086:	f048 0301 	orr.w	r3, r8, #1
   1708a:	42b7      	cmp	r7, r6
   1708c:	f8c6 a008 	str.w	sl, [r6, #8]
   17090:	4411      	add	r1, r2
   17092:	f8ca 3004 	str.w	r3, [sl, #4]
   17096:	f8cb 1000 	str.w	r1, [fp]
   1709a:	d098      	beq.n	16fce <_malloc_r+0x396>
   1709c:	f1b9 0f0f 	cmp.w	r9, #15
   170a0:	d944      	bls.n	1712c <_malloc_r+0x4f4>
   170a2:	687a      	ldr	r2, [r7, #4]
   170a4:	f1a9 030c 	sub.w	r3, r9, #12
   170a8:	2005      	movs	r0, #5
   170aa:	f023 0307 	bic.w	r3, r3, #7
   170ae:	f002 0201 	and.w	r2, r2, #1
   170b2:	431a      	orrs	r2, r3
   170b4:	2b0f      	cmp	r3, #15
   170b6:	607a      	str	r2, [r7, #4]
   170b8:	eb07 0203 	add.w	r2, r7, r3
   170bc:	6050      	str	r0, [r2, #4]
   170be:	6090      	str	r0, [r2, #8]
   170c0:	d853      	bhi.n	1716a <_malloc_r+0x532>
   170c2:	f8da 3004 	ldr.w	r3, [sl, #4]
   170c6:	e782      	b.n	16fce <_malloc_r+0x396>
   170c8:	f108 0810 	add.w	r8, r8, #16
   170cc:	e692      	b.n	16df4 <_malloc_r+0x1bc>
   170ce:	1089      	asrs	r1, r1, #2
   170d0:	f04f 0c01 	mov.w	ip, #1
   170d4:	fa0c f101 	lsl.w	r1, ip, r1
   170d8:	ea4e 0e01 	orr.w	lr, lr, r1
   170dc:	f8c6 e004 	str.w	lr, [r6, #4]
   170e0:	e6ef      	b.n	16ec2 <_malloc_r+0x28a>
   170e2:	eb0a 0108 	add.w	r1, sl, r8
   170e6:	4628      	mov	r0, r5
   170e8:	9300      	str	r3, [sp, #0]
   170ea:	4249      	negs	r1, r1
   170ec:	f3c1 010b 	ubfx	r1, r1, #0, #12
   170f0:	9101      	str	r1, [sp, #4]
   170f2:	f000 f9d1 	bl	17498 <_sbrk_r>
   170f6:	1c43      	adds	r3, r0, #1
   170f8:	9b00      	ldr	r3, [sp, #0]
   170fa:	d1bd      	bne.n	17078 <_malloc_r+0x440>
   170fc:	4619      	mov	r1, r3
   170fe:	e7c0      	b.n	17082 <_malloc_r+0x44a>
   17100:	2954      	cmp	r1, #84	; 0x54
   17102:	d817      	bhi.n	17134 <_malloc_r+0x4fc>
   17104:	ea4f 311c 	mov.w	r1, ip, lsr #12
   17108:	f101 026f 	add.w	r2, r1, #111	; 0x6f
   1710c:	316e      	adds	r1, #110	; 0x6e
   1710e:	00d2      	lsls	r2, r2, #3
   17110:	e6c8      	b.n	16ea4 <_malloc_r+0x26c>
   17112:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   17116:	d817      	bhi.n	17148 <_malloc_r+0x510>
   17118:	0be3      	lsrs	r3, r4, #15
   1711a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1711e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   17122:	00c3      	lsls	r3, r0, #3
   17124:	e5cd      	b.n	16cc2 <_malloc_r+0x8a>
   17126:	f8c2 a000 	str.w	sl, [r2]
   1712a:	e78f      	b.n	1704c <_malloc_r+0x414>
   1712c:	2301      	movs	r3, #1
   1712e:	f8ca 3004 	str.w	r3, [sl, #4]
   17132:	e67a      	b.n	16e2a <_malloc_r+0x1f2>
   17134:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   17138:	d821      	bhi.n	1717e <_malloc_r+0x546>
   1713a:	ea4f 31dc 	mov.w	r1, ip, lsr #15
   1713e:	f101 0278 	add.w	r2, r1, #120	; 0x78
   17142:	3177      	adds	r1, #119	; 0x77
   17144:	00d2      	lsls	r2, r2, #3
   17146:	e6ad      	b.n	16ea4 <_malloc_r+0x26c>
   17148:	f240 5254 	movw	r2, #1364	; 0x554
   1714c:	4293      	cmp	r3, r2
   1714e:	d821      	bhi.n	17194 <_malloc_r+0x55c>
   17150:	0ca3      	lsrs	r3, r4, #18
   17152:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   17156:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   1715a:	00c3      	lsls	r3, r0, #3
   1715c:	e5b1      	b.n	16cc2 <_malloc_r+0x8a>
   1715e:	3b08      	subs	r3, #8
   17160:	2100      	movs	r1, #0
   17162:	4498      	add	r8, r3
   17164:	eba8 080a 	sub.w	r8, r8, sl
   17168:	e78b      	b.n	17082 <_malloc_r+0x44a>
   1716a:	f107 0108 	add.w	r1, r7, #8
   1716e:	4628      	mov	r0, r5
   17170:	f002 fac6 	bl	19700 <_free_r>
   17174:	f8d6 a008 	ldr.w	sl, [r6, #8]
   17178:	f8db 1000 	ldr.w	r1, [fp]
   1717c:	e7a1      	b.n	170c2 <_malloc_r+0x48a>
   1717e:	f240 5254 	movw	r2, #1364	; 0x554
   17182:	4291      	cmp	r1, r2
   17184:	d80c      	bhi.n	171a0 <_malloc_r+0x568>
   17186:	ea4f 419c 	mov.w	r1, ip, lsr #18
   1718a:	f101 027d 	add.w	r2, r1, #125	; 0x7d
   1718e:	317c      	adds	r1, #124	; 0x7c
   17190:	00d2      	lsls	r2, r2, #3
   17192:	e687      	b.n	16ea4 <_malloc_r+0x26c>
   17194:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   17198:	207f      	movs	r0, #127	; 0x7f
   1719a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   1719e:	e590      	b.n	16cc2 <_malloc_r+0x8a>
   171a0:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
   171a4:	217e      	movs	r1, #126	; 0x7e
   171a6:	e67d      	b.n	16ea4 <_malloc_r+0x26c>
   171a8:	6873      	ldr	r3, [r6, #4]
   171aa:	e730      	b.n	1700e <_malloc_r+0x3d6>
   171ac:	2000481c 	.word	0x2000481c
   171b0:	20004848 	.word	0x20004848
   171b4:	20004844 	.word	0x20004844

000171b8 <memchr>:
   171b8:	fa5f fc81 	uxtb.w	ip, r1
   171bc:	0781      	lsls	r1, r0, #30
   171be:	d044      	beq.n	1724a <memchr+0x92>
   171c0:	4603      	mov	r3, r0
   171c2:	1e51      	subs	r1, r2, #1
   171c4:	b922      	cbnz	r2, 171d0 <memchr+0x18>
   171c6:	e009      	b.n	171dc <memchr+0x24>
   171c8:	079a      	lsls	r2, r3, #30
   171ca:	d009      	beq.n	171e0 <memchr+0x28>
   171cc:	3901      	subs	r1, #1
   171ce:	d305      	bcc.n	171dc <memchr+0x24>
   171d0:	4618      	mov	r0, r3
   171d2:	3301      	adds	r3, #1
   171d4:	7802      	ldrb	r2, [r0, #0]
   171d6:	4562      	cmp	r2, ip
   171d8:	d1f6      	bne.n	171c8 <memchr+0x10>
   171da:	4770      	bx	lr
   171dc:	2000      	movs	r0, #0
   171de:	4770      	bx	lr
   171e0:	4618      	mov	r0, r3
   171e2:	2903      	cmp	r1, #3
   171e4:	d80c      	bhi.n	17200 <memchr+0x48>
   171e6:	2900      	cmp	r1, #0
   171e8:	d0f8      	beq.n	171dc <memchr+0x24>
   171ea:	4603      	mov	r3, r0
   171ec:	4401      	add	r1, r0
   171ee:	e001      	b.n	171f4 <memchr+0x3c>
   171f0:	428b      	cmp	r3, r1
   171f2:	d0f3      	beq.n	171dc <memchr+0x24>
   171f4:	4618      	mov	r0, r3
   171f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   171fa:	4562      	cmp	r2, ip
   171fc:	d1f8      	bne.n	171f0 <memchr+0x38>
   171fe:	e7ec      	b.n	171da <memchr+0x22>
   17200:	b510      	push	{r4, lr}
   17202:	eb0c 240c 	add.w	r4, ip, ip, lsl #8
   17206:	4602      	mov	r2, r0
   17208:	eb04 4404 	add.w	r4, r4, r4, lsl #16
   1720c:	e002      	b.n	17214 <memchr+0x5c>
   1720e:	3904      	subs	r1, #4
   17210:	2903      	cmp	r1, #3
   17212:	d918      	bls.n	17246 <memchr+0x8e>
   17214:	4610      	mov	r0, r2
   17216:	f852 3b04 	ldr.w	r3, [r2], #4
   1721a:	4063      	eors	r3, r4
   1721c:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   17220:	ea2e 0303 	bic.w	r3, lr, r3
   17224:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17228:	d0f1      	beq.n	1720e <memchr+0x56>
   1722a:	b151      	cbz	r1, 17242 <memchr+0x8a>
   1722c:	4603      	mov	r3, r0
   1722e:	4401      	add	r1, r0
   17230:	e001      	b.n	17236 <memchr+0x7e>
   17232:	428b      	cmp	r3, r1
   17234:	d005      	beq.n	17242 <memchr+0x8a>
   17236:	4618      	mov	r0, r3
   17238:	f813 2b01 	ldrb.w	r2, [r3], #1
   1723c:	4562      	cmp	r2, ip
   1723e:	d1f8      	bne.n	17232 <memchr+0x7a>
   17240:	bd10      	pop	{r4, pc}
   17242:	2000      	movs	r0, #0
   17244:	bd10      	pop	{r4, pc}
   17246:	4610      	mov	r0, r2
   17248:	e7ef      	b.n	1722a <memchr+0x72>
   1724a:	4611      	mov	r1, r2
   1724c:	e7c9      	b.n	171e2 <memchr+0x2a>
   1724e:	bf00      	nop

00017250 <memcmp>:
   17250:	2a03      	cmp	r2, #3
   17252:	b570      	push	{r4, r5, r6, lr}
   17254:	d911      	bls.n	1727a <memcmp+0x2a>
   17256:	ea40 0301 	orr.w	r3, r0, r1
   1725a:	079b      	lsls	r3, r3, #30
   1725c:	d11e      	bne.n	1729c <memcmp+0x4c>
   1725e:	4604      	mov	r4, r0
   17260:	460b      	mov	r3, r1
   17262:	e002      	b.n	1726a <memcmp+0x1a>
   17264:	3a04      	subs	r2, #4
   17266:	2a03      	cmp	r2, #3
   17268:	d91c      	bls.n	172a4 <memcmp+0x54>
   1726a:	4619      	mov	r1, r3
   1726c:	4620      	mov	r0, r4
   1726e:	f853 5b04 	ldr.w	r5, [r3], #4
   17272:	f854 6b04 	ldr.w	r6, [r4], #4
   17276:	42ae      	cmp	r6, r5
   17278:	d0f4      	beq.n	17264 <memcmp+0x14>
   1727a:	1e54      	subs	r4, r2, #1
   1727c:	b1aa      	cbz	r2, 172aa <memcmp+0x5a>
   1727e:	1e42      	subs	r2, r0, #1
   17280:	3901      	subs	r1, #1
   17282:	e001      	b.n	17288 <memcmp+0x38>
   17284:	18c3      	adds	r3, r0, r3
   17286:	d00b      	beq.n	172a0 <memcmp+0x50>
   17288:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1728c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   17290:	1aa3      	subs	r3, r4, r2
   17292:	45e6      	cmp	lr, ip
   17294:	d0f6      	beq.n	17284 <memcmp+0x34>
   17296:	ebae 000c 	sub.w	r0, lr, ip
   1729a:	bd70      	pop	{r4, r5, r6, pc}
   1729c:	1e54      	subs	r4, r2, #1
   1729e:	e7ee      	b.n	1727e <memcmp+0x2e>
   172a0:	4618      	mov	r0, r3
   172a2:	bd70      	pop	{r4, r5, r6, pc}
   172a4:	4620      	mov	r0, r4
   172a6:	4619      	mov	r1, r3
   172a8:	e7e7      	b.n	1727a <memcmp+0x2a>
   172aa:	4610      	mov	r0, r2
   172ac:	bd70      	pop	{r4, r5, r6, pc}
   172ae:	bf00      	nop

000172b0 <__memcpy_chk>:
   172b0:	429a      	cmp	r2, r3
   172b2:	b508      	push	{r3, lr}
   172b4:	d80d      	bhi.n	172d2 <__memcpy_chk+0x22>
   172b6:	4281      	cmp	r1, r0
   172b8:	d804      	bhi.n	172c4 <__memcpy_chk+0x14>
   172ba:	188b      	adds	r3, r1, r2
   172bc:	4298      	cmp	r0, r3
   172be:	d308      	bcc.n	172d2 <__memcpy_chk+0x22>
   172c0:	4281      	cmp	r1, r0
   172c2:	d102      	bne.n	172ca <__memcpy_chk+0x1a>
   172c4:	1883      	adds	r3, r0, r2
   172c6:	4299      	cmp	r1, r3
   172c8:	d303      	bcc.n	172d2 <__memcpy_chk+0x22>
   172ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   172ce:	f7e9 bc41 	b.w	b54 <memcpy>
   172d2:	f7ef fea5 	bl	7020 <__chk_fail>
   172d6:	bf00      	nop

000172d8 <memmove>:
   172d8:	4288      	cmp	r0, r1
   172da:	d90e      	bls.n	172fa <memmove+0x22>
   172dc:	188b      	adds	r3, r1, r2
   172de:	4283      	cmp	r3, r0
   172e0:	d90b      	bls.n	172fa <memmove+0x22>
   172e2:	eb00 0c02 	add.w	ip, r0, r2
   172e6:	2a00      	cmp	r2, #0
   172e8:	d06e      	beq.n	173c8 <memmove+0xf0>
   172ea:	4662      	mov	r2, ip
   172ec:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   172f0:	4299      	cmp	r1, r3
   172f2:	f802 cd01 	strb.w	ip, [r2, #-1]!
   172f6:	d1f9      	bne.n	172ec <memmove+0x14>
   172f8:	4770      	bx	lr
   172fa:	2a0f      	cmp	r2, #15
   172fc:	d80f      	bhi.n	1731e <memmove+0x46>
   172fe:	4603      	mov	r3, r0
   17300:	f102 3cff 	add.w	ip, r2, #4294967295
   17304:	2a00      	cmp	r2, #0
   17306:	d05f      	beq.n	173c8 <memmove+0xf0>
   17308:	f10c 0c01 	add.w	ip, ip, #1
   1730c:	3b01      	subs	r3, #1
   1730e:	448c      	add	ip, r1
   17310:	f811 2b01 	ldrb.w	r2, [r1], #1
   17314:	4561      	cmp	r1, ip
   17316:	f803 2f01 	strb.w	r2, [r3, #1]!
   1731a:	d1f9      	bne.n	17310 <memmove+0x38>
   1731c:	4770      	bx	lr
   1731e:	ea40 0301 	orr.w	r3, r0, r1
   17322:	079b      	lsls	r3, r3, #30
   17324:	d151      	bne.n	173ca <memmove+0xf2>
   17326:	f1a2 0310 	sub.w	r3, r2, #16
   1732a:	f101 0c20 	add.w	ip, r1, #32
   1732e:	b570      	push	{r4, r5, r6, lr}
   17330:	f023 050f 	bic.w	r5, r3, #15
   17334:	f101 0e10 	add.w	lr, r1, #16
   17338:	f100 0410 	add.w	r4, r0, #16
   1733c:	091b      	lsrs	r3, r3, #4
   1733e:	44ac      	add	ip, r5
   17340:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   17344:	f10e 0e10 	add.w	lr, lr, #16
   17348:	3410      	adds	r4, #16
   1734a:	f844 5c20 	str.w	r5, [r4, #-32]
   1734e:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   17352:	f844 5c1c 	str.w	r5, [r4, #-28]
   17356:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   1735a:	f844 5c18 	str.w	r5, [r4, #-24]
   1735e:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   17362:	45e6      	cmp	lr, ip
   17364:	f844 5c14 	str.w	r5, [r4, #-20]
   17368:	d1ea      	bne.n	17340 <memmove+0x68>
   1736a:	3301      	adds	r3, #1
   1736c:	f012 0f0c 	tst.w	r2, #12
   17370:	f002 0c0f 	and.w	ip, r2, #15
   17374:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   17378:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   1737c:	d029      	beq.n	173d2 <memmove+0xfa>
   1737e:	f1ac 0c04 	sub.w	ip, ip, #4
   17382:	1f1c      	subs	r4, r3, #4
   17384:	468e      	mov	lr, r1
   17386:	f02c 0603 	bic.w	r6, ip, #3
   1738a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
   1738e:	441e      	add	r6, r3
   17390:	f85e 5b04 	ldr.w	r5, [lr], #4
   17394:	f844 5f04 	str.w	r5, [r4, #4]!
   17398:	42b4      	cmp	r4, r6
   1739a:	d1f9      	bne.n	17390 <memmove+0xb8>
   1739c:	f10c 0401 	add.w	r4, ip, #1
   173a0:	f002 0203 	and.w	r2, r2, #3
   173a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   173a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   173ac:	f102 3cff 	add.w	ip, r2, #4294967295
   173b0:	b14a      	cbz	r2, 173c6 <memmove+0xee>
   173b2:	f10c 0c01 	add.w	ip, ip, #1
   173b6:	3b01      	subs	r3, #1
   173b8:	448c      	add	ip, r1
   173ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   173be:	4561      	cmp	r1, ip
   173c0:	f803 2f01 	strb.w	r2, [r3, #1]!
   173c4:	d1f9      	bne.n	173ba <memmove+0xe2>
   173c6:	bd70      	pop	{r4, r5, r6, pc}
   173c8:	4770      	bx	lr
   173ca:	f102 3cff 	add.w	ip, r2, #4294967295
   173ce:	4603      	mov	r3, r0
   173d0:	e79a      	b.n	17308 <memmove+0x30>
   173d2:	4662      	mov	r2, ip
   173d4:	e7ea      	b.n	173ac <memmove+0xd4>
   173d6:	bf00      	nop

000173d8 <memset>:
   173d8:	b570      	push	{r4, r5, r6, lr}
   173da:	0786      	lsls	r6, r0, #30
   173dc:	d04a      	beq.n	17474 <memset+0x9c>
   173de:	1e54      	subs	r4, r2, #1
   173e0:	2a00      	cmp	r2, #0
   173e2:	d041      	beq.n	17468 <memset+0x90>
   173e4:	b2ca      	uxtb	r2, r1
   173e6:	4603      	mov	r3, r0
   173e8:	e001      	b.n	173ee <memset+0x16>
   173ea:	3c01      	subs	r4, #1
   173ec:	d33c      	bcc.n	17468 <memset+0x90>
   173ee:	f803 2b01 	strb.w	r2, [r3], #1
   173f2:	079d      	lsls	r5, r3, #30
   173f4:	d1f9      	bne.n	173ea <memset+0x12>
   173f6:	2c03      	cmp	r4, #3
   173f8:	d92f      	bls.n	1745a <memset+0x82>
   173fa:	b2cd      	uxtb	r5, r1
   173fc:	2c0f      	cmp	r4, #15
   173fe:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   17402:	eb05 4505 	add.w	r5, r5, r5, lsl #16
   17406:	d938      	bls.n	1747a <memset+0xa2>
   17408:	f1a4 0c10 	sub.w	ip, r4, #16
   1740c:	f103 0e10 	add.w	lr, r3, #16
   17410:	461a      	mov	r2, r3
   17412:	f02c 060f 	bic.w	r6, ip, #15
   17416:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   1741a:	44b6      	add	lr, r6
   1741c:	6015      	str	r5, [r2, #0]
   1741e:	3210      	adds	r2, #16
   17420:	f842 5c0c 	str.w	r5, [r2, #-12]
   17424:	f842 5c08 	str.w	r5, [r2, #-8]
   17428:	f842 5c04 	str.w	r5, [r2, #-4]
   1742c:	4572      	cmp	r2, lr
   1742e:	d1f5      	bne.n	1741c <memset+0x44>
   17430:	f10c 0201 	add.w	r2, ip, #1
   17434:	f014 0f0c 	tst.w	r4, #12
   17438:	f004 0c0f 	and.w	ip, r4, #15
   1743c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   17440:	d013      	beq.n	1746a <memset+0x92>
   17442:	f1ac 0304 	sub.w	r3, ip, #4
   17446:	f023 0303 	bic.w	r3, r3, #3
   1744a:	3304      	adds	r3, #4
   1744c:	4413      	add	r3, r2
   1744e:	f842 5b04 	str.w	r5, [r2], #4
   17452:	429a      	cmp	r2, r3
   17454:	d1fb      	bne.n	1744e <memset+0x76>
   17456:	f00c 0403 	and.w	r4, ip, #3
   1745a:	b12c      	cbz	r4, 17468 <memset+0x90>
   1745c:	b2c9      	uxtb	r1, r1
   1745e:	441c      	add	r4, r3
   17460:	f803 1b01 	strb.w	r1, [r3], #1
   17464:	429c      	cmp	r4, r3
   17466:	d1fb      	bne.n	17460 <memset+0x88>
   17468:	bd70      	pop	{r4, r5, r6, pc}
   1746a:	4664      	mov	r4, ip
   1746c:	4613      	mov	r3, r2
   1746e:	2c00      	cmp	r4, #0
   17470:	d1f4      	bne.n	1745c <memset+0x84>
   17472:	e7f9      	b.n	17468 <memset+0x90>
   17474:	4603      	mov	r3, r0
   17476:	4614      	mov	r4, r2
   17478:	e7bd      	b.n	173f6 <memset+0x1e>
   1747a:	461a      	mov	r2, r3
   1747c:	46a4      	mov	ip, r4
   1747e:	e7e0      	b.n	17442 <memset+0x6a>

00017480 <__malloc_lock>:
   17480:	4801      	ldr	r0, [pc, #4]	; (17488 <__malloc_lock+0x8>)
   17482:	f008 bdd6 	b.w	20032 <__retarget_lock_acquire_recursive>
   17486:	bf00      	nop
   17488:	200011e8 	.word	0x200011e8

0001748c <__malloc_unlock>:
   1748c:	4801      	ldr	r0, [pc, #4]	; (17494 <__malloc_unlock+0x8>)
   1748e:	f008 bdd6 	b.w	2003e <__retarget_lock_release_recursive>
   17492:	bf00      	nop
   17494:	200011e8 	.word	0x200011e8

00017498 <_sbrk_r>:
   17498:	b538      	push	{r3, r4, r5, lr}
   1749a:	2200      	movs	r2, #0
   1749c:	4d06      	ldr	r5, [pc, #24]	; (174b8 <_sbrk_r+0x20>)
   1749e:	4604      	mov	r4, r0
   174a0:	4608      	mov	r0, r1
   174a2:	602a      	str	r2, [r5, #0]
   174a4:	f7ef fda8 	bl	6ff8 <_sbrk>
   174a8:	1c43      	adds	r3, r0, #1
   174aa:	d000      	beq.n	174ae <_sbrk_r+0x16>
   174ac:	bd38      	pop	{r3, r4, r5, pc}
   174ae:	682b      	ldr	r3, [r5, #0]
   174b0:	2b00      	cmp	r3, #0
   174b2:	d0fb      	beq.n	174ac <_sbrk_r+0x14>
   174b4:	6023      	str	r3, [r4, #0]
   174b6:	bd38      	pop	{r3, r4, r5, pc}
   174b8:	20004850 	.word	0x20004850

000174bc <strchr>:
   174bc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   174c0:	4603      	mov	r3, r0
   174c2:	f000 0203 	and.w	r2, r0, #3
   174c6:	d039      	beq.n	1753c <strchr+0x80>
   174c8:	bb8a      	cbnz	r2, 1752e <strchr+0x72>
   174ca:	b510      	push	{r4, lr}
   174cc:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
   174d0:	6802      	ldr	r2, [r0, #0]
   174d2:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
   174d6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   174da:	ea8e 0402 	eor.w	r4, lr, r2
   174de:	ea23 0302 	bic.w	r3, r3, r2
   174e2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   174e6:	ea22 0204 	bic.w	r2, r2, r4
   174ea:	4313      	orrs	r3, r2
   174ec:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   174f0:	d10f      	bne.n	17512 <strchr+0x56>
   174f2:	f850 4f04 	ldr.w	r4, [r0, #4]!
   174f6:	ea84 0c0e 	eor.w	ip, r4, lr
   174fa:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   174fe:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
   17502:	ea23 0304 	bic.w	r3, r3, r4
   17506:	ea22 020c 	bic.w	r2, r2, ip
   1750a:	4313      	orrs	r3, r2
   1750c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17510:	d0ef      	beq.n	174f2 <strchr+0x36>
   17512:	7803      	ldrb	r3, [r0, #0]
   17514:	b923      	cbnz	r3, 17520 <strchr+0x64>
   17516:	e036      	b.n	17586 <strchr+0xca>
   17518:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1751c:	2b00      	cmp	r3, #0
   1751e:	d032      	beq.n	17586 <strchr+0xca>
   17520:	4299      	cmp	r1, r3
   17522:	d1f9      	bne.n	17518 <strchr+0x5c>
   17524:	bd10      	pop	{r4, pc}
   17526:	428a      	cmp	r2, r1
   17528:	d028      	beq.n	1757c <strchr+0xc0>
   1752a:	079a      	lsls	r2, r3, #30
   1752c:	d029      	beq.n	17582 <strchr+0xc6>
   1752e:	781a      	ldrb	r2, [r3, #0]
   17530:	4618      	mov	r0, r3
   17532:	3301      	adds	r3, #1
   17534:	2a00      	cmp	r2, #0
   17536:	d1f6      	bne.n	17526 <strchr+0x6a>
   17538:	4610      	mov	r0, r2
   1753a:	4770      	bx	lr
   1753c:	b9ca      	cbnz	r2, 17572 <strchr+0xb6>
   1753e:	6802      	ldr	r2, [r0, #0]
   17540:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   17544:	ea23 0302 	bic.w	r3, r3, r2
   17548:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1754c:	d108      	bne.n	17560 <strchr+0xa4>
   1754e:	f850 2f04 	ldr.w	r2, [r0, #4]!
   17552:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   17556:	ea23 0302 	bic.w	r3, r3, r2
   1755a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1755e:	d0f6      	beq.n	1754e <strchr+0x92>
   17560:	7803      	ldrb	r3, [r0, #0]
   17562:	b15b      	cbz	r3, 1757c <strchr+0xc0>
   17564:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   17568:	2b00      	cmp	r3, #0
   1756a:	d1fb      	bne.n	17564 <strchr+0xa8>
   1756c:	4770      	bx	lr
   1756e:	0799      	lsls	r1, r3, #30
   17570:	d005      	beq.n	1757e <strchr+0xc2>
   17572:	4618      	mov	r0, r3
   17574:	f813 2b01 	ldrb.w	r2, [r3], #1
   17578:	2a00      	cmp	r2, #0
   1757a:	d1f8      	bne.n	1756e <strchr+0xb2>
   1757c:	4770      	bx	lr
   1757e:	4618      	mov	r0, r3
   17580:	e7dd      	b.n	1753e <strchr+0x82>
   17582:	4618      	mov	r0, r3
   17584:	e7a1      	b.n	174ca <strchr+0xe>
   17586:	4618      	mov	r0, r3
   17588:	bd10      	pop	{r4, pc}
   1758a:	bf00      	nop

0001758c <strlen>:
   1758c:	f020 0103 	bic.w	r1, r0, #3
   17590:	f010 0003 	ands.w	r0, r0, #3
   17594:	f1c0 0000 	rsb	r0, r0, #0
   17598:	f851 3b04 	ldr.w	r3, [r1], #4
   1759c:	f100 0c04 	add.w	ip, r0, #4
   175a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   175a4:	f06f 0200 	mvn.w	r2, #0
   175a8:	bf1c      	itt	ne
   175aa:	fa22 f20c 	lsrne.w	r2, r2, ip
   175ae:	4313      	orrne	r3, r2
   175b0:	f04f 0c01 	mov.w	ip, #1
   175b4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   175b8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   175bc:	eba3 020c 	sub.w	r2, r3, ip
   175c0:	ea22 0203 	bic.w	r2, r2, r3
   175c4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   175c8:	bf04      	itt	eq
   175ca:	f851 3b04 	ldreq.w	r3, [r1], #4
   175ce:	3004      	addeq	r0, #4
   175d0:	d0f4      	beq.n	175bc <strlen+0x30>
   175d2:	f1c2 0100 	rsb	r1, r2, #0
   175d6:	ea02 0201 	and.w	r2, r2, r1
   175da:	fab2 f282 	clz	r2, r2
   175de:	f1c2 021f 	rsb	r2, r2, #31
   175e2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   175e6:	4770      	bx	lr

000175e8 <strncpy>:
   175e8:	ea40 0301 	orr.w	r3, r0, r1
   175ec:	079b      	lsls	r3, r3, #30
   175ee:	b510      	push	{r4, lr}
   175f0:	d101      	bne.n	175f6 <strncpy+0xe>
   175f2:	2a03      	cmp	r2, #3
   175f4:	d817      	bhi.n	17626 <strncpy+0x3e>
   175f6:	4684      	mov	ip, r0
   175f8:	f101 3eff 	add.w	lr, r1, #4294967295
   175fc:	e007      	b.n	1760e <strncpy+0x26>
   175fe:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   17602:	1e54      	subs	r4, r2, #1
   17604:	f803 1b01 	strb.w	r1, [r3], #1
   17608:	b129      	cbz	r1, 17616 <strncpy+0x2e>
   1760a:	4622      	mov	r2, r4
   1760c:	469c      	mov	ip, r3
   1760e:	4663      	mov	r3, ip
   17610:	2a00      	cmp	r2, #0
   17612:	d1f4      	bne.n	175fe <strncpy+0x16>
   17614:	bd10      	pop	{r4, pc}
   17616:	2c00      	cmp	r4, #0
   17618:	d0fc      	beq.n	17614 <strncpy+0x2c>
   1761a:	4494      	add	ip, r2
   1761c:	f803 1b01 	strb.w	r1, [r3], #1
   17620:	4563      	cmp	r3, ip
   17622:	d1fb      	bne.n	1761c <strncpy+0x34>
   17624:	bd10      	pop	{r4, pc}
   17626:	468e      	mov	lr, r1
   17628:	4684      	mov	ip, r0
   1762a:	f8de 4000 	ldr.w	r4, [lr]
   1762e:	4671      	mov	r1, lr
   17630:	f10e 0e04 	add.w	lr, lr, #4
   17634:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   17638:	ea23 0304 	bic.w	r3, r3, r4
   1763c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17640:	d1da      	bne.n	175f8 <strncpy+0x10>
   17642:	3a04      	subs	r2, #4
   17644:	f84c 4b04 	str.w	r4, [ip], #4
   17648:	2a03      	cmp	r2, #3
   1764a:	d8ee      	bhi.n	1762a <strncpy+0x42>
   1764c:	4671      	mov	r1, lr
   1764e:	e7d3      	b.n	175f8 <strncpy+0x10>

00017650 <strnlen>:
   17650:	b171      	cbz	r1, 17670 <strnlen+0x20>
   17652:	4603      	mov	r3, r0
   17654:	eb00 0c01 	add.w	ip, r0, r1
   17658:	e001      	b.n	1765e <strnlen+0xe>
   1765a:	4563      	cmp	r3, ip
   1765c:	d006      	beq.n	1766c <strnlen+0x1c>
   1765e:	461a      	mov	r2, r3
   17660:	3301      	adds	r3, #1
   17662:	7811      	ldrb	r1, [r2, #0]
   17664:	2900      	cmp	r1, #0
   17666:	d1f8      	bne.n	1765a <strnlen+0xa>
   17668:	1a10      	subs	r0, r2, r0
   1766a:	4770      	bx	lr
   1766c:	1a18      	subs	r0, r3, r0
   1766e:	4770      	bx	lr
   17670:	4608      	mov	r0, r1
   17672:	4770      	bx	lr

00017674 <strrchr>:
   17674:	b171      	cbz	r1, 17694 <strrchr+0x20>
   17676:	b538      	push	{r3, r4, r5, lr}
   17678:	4603      	mov	r3, r0
   1767a:	460c      	mov	r4, r1
   1767c:	2500      	movs	r5, #0
   1767e:	e001      	b.n	17684 <strrchr+0x10>
   17680:	1c43      	adds	r3, r0, #1
   17682:	4605      	mov	r5, r0
   17684:	4621      	mov	r1, r4
   17686:	4618      	mov	r0, r3
   17688:	f7ff ff18 	bl	174bc <strchr>
   1768c:	2800      	cmp	r0, #0
   1768e:	d1f7      	bne.n	17680 <strrchr+0xc>
   17690:	4628      	mov	r0, r5
   17692:	bd38      	pop	{r3, r4, r5, pc}
   17694:	f7ff bf12 	b.w	174bc <strchr>

00017698 <_strtol_l.part.0>:
   17698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1769c:	4682      	mov	sl, r0
   1769e:	468e      	mov	lr, r1
   176a0:	483c      	ldr	r0, [pc, #240]	; (17794 <_strtol_l.part.0+0xfc>)
   176a2:	4675      	mov	r5, lr
   176a4:	f81e bb01 	ldrb.w	fp, [lr], #1
   176a8:	f810 400b 	ldrb.w	r4, [r0, fp]
   176ac:	f014 0408 	ands.w	r4, r4, #8
   176b0:	d1f7      	bne.n	176a2 <_strtol_l.part.0+0xa>
   176b2:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   176b6:	d059      	beq.n	1776c <_strtol_l.part.0+0xd4>
   176b8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   176bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   176c0:	bf04      	itt	eq
   176c2:	f89e b000 	ldrbeq.w	fp, [lr]
   176c6:	f105 0e02 	addeq.w	lr, r5, #2
   176ca:	f033 0010 	bics.w	r0, r3, #16
   176ce:	d10e      	bne.n	176ee <_strtol_l.part.0+0x56>
   176d0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   176d4:	d003      	beq.n	176de <_strtol_l.part.0+0x46>
   176d6:	b953      	cbnz	r3, 176ee <_strtol_l.part.0+0x56>
   176d8:	230a      	movs	r3, #10
   176da:	461f      	mov	r7, r3
   176dc:	e008      	b.n	176f0 <_strtol_l.part.0+0x58>
   176de:	f89e 0000 	ldrb.w	r0, [lr]
   176e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   176e6:	2858      	cmp	r0, #88	; 0x58
   176e8:	d04d      	beq.n	17786 <_strtol_l.part.0+0xee>
   176ea:	b903      	cbnz	r3, 176ee <_strtol_l.part.0+0x56>
   176ec:	2308      	movs	r3, #8
   176ee:	461f      	mov	r7, r3
   176f0:	2500      	movs	r5, #0
   176f2:	fbb9 f6f7 	udiv	r6, r9, r7
   176f6:	4628      	mov	r0, r5
   176f8:	fb07 9816 	mls	r8, r7, r6, r9
   176fc:	e00e      	b.n	1771c <_strtol_l.part.0+0x84>
   176fe:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   17702:	4563      	cmp	r3, ip
   17704:	dd1d      	ble.n	17742 <_strtol_l.part.0+0xaa>
   17706:	2d00      	cmp	r5, #0
   17708:	db04      	blt.n	17714 <_strtol_l.part.0+0x7c>
   1770a:	4286      	cmp	r6, r0
   1770c:	d302      	bcc.n	17714 <_strtol_l.part.0+0x7c>
   1770e:	d121      	bne.n	17754 <_strtol_l.part.0+0xbc>
   17710:	45e0      	cmp	r8, ip
   17712:	da1f      	bge.n	17754 <_strtol_l.part.0+0xbc>
   17714:	f04f 35ff 	mov.w	r5, #4294967295
   17718:	f81e bb01 	ldrb.w	fp, [lr], #1
   1771c:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   17720:	f1bc 0f09 	cmp.w	ip, #9
   17724:	d9ed      	bls.n	17702 <_strtol_l.part.0+0x6a>
   17726:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   1772a:	f1bc 0f19 	cmp.w	ip, #25
   1772e:	d9e6      	bls.n	176fe <_strtol_l.part.0+0x66>
   17730:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   17734:	f1bc 0f19 	cmp.w	ip, #25
   17738:	d803      	bhi.n	17742 <_strtol_l.part.0+0xaa>
   1773a:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   1773e:	4563      	cmp	r3, ip
   17740:	dce1      	bgt.n	17706 <_strtol_l.part.0+0x6e>
   17742:	1c6b      	adds	r3, r5, #1
   17744:	d00a      	beq.n	1775c <_strtol_l.part.0+0xc4>
   17746:	b104      	cbz	r4, 1774a <_strtol_l.part.0+0xb2>
   17748:	4240      	negs	r0, r0
   1774a:	b10a      	cbz	r2, 17750 <_strtol_l.part.0+0xb8>
   1774c:	b9cd      	cbnz	r5, 17782 <_strtol_l.part.0+0xea>
   1774e:	6011      	str	r1, [r2, #0]
   17750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17754:	fb07 c000 	mla	r0, r7, r0, ip
   17758:	2501      	movs	r5, #1
   1775a:	e7dd      	b.n	17718 <_strtol_l.part.0+0x80>
   1775c:	2322      	movs	r3, #34	; 0x22
   1775e:	f8ca 3000 	str.w	r3, [sl]
   17762:	b15a      	cbz	r2, 1777c <_strtol_l.part.0+0xe4>
   17764:	f10e 31ff 	add.w	r1, lr, #4294967295
   17768:	4648      	mov	r0, r9
   1776a:	e7f0      	b.n	1774e <_strtol_l.part.0+0xb6>
   1776c:	f89e b000 	ldrb.w	fp, [lr]
   17770:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   17774:	f105 0e02 	add.w	lr, r5, #2
   17778:	2401      	movs	r4, #1
   1777a:	e7a6      	b.n	176ca <_strtol_l.part.0+0x32>
   1777c:	4648      	mov	r0, r9
   1777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17782:	4681      	mov	r9, r0
   17784:	e7ee      	b.n	17764 <_strtol_l.part.0+0xcc>
   17786:	2310      	movs	r3, #16
   17788:	f89e b001 	ldrb.w	fp, [lr, #1]
   1778c:	f10e 0e02 	add.w	lr, lr, #2
   17790:	461f      	mov	r7, r3
   17792:	e7ad      	b.n	176f0 <_strtol_l.part.0+0x58>
   17794:	000311c1 	.word	0x000311c1

00017798 <strtol>:
   17798:	b510      	push	{r4, lr}
   1779a:	2a24      	cmp	r2, #36	; 0x24
   1779c:	4c09      	ldr	r4, [pc, #36]	; (177c4 <strtol+0x2c>)
   1779e:	4613      	mov	r3, r2
   177a0:	6824      	ldr	r4, [r4, #0]
   177a2:	d808      	bhi.n	177b6 <strtol+0x1e>
   177a4:	2a01      	cmp	r2, #1
   177a6:	d006      	beq.n	177b6 <strtol+0x1e>
   177a8:	460a      	mov	r2, r1
   177aa:	4601      	mov	r1, r0
   177ac:	4620      	mov	r0, r4
   177ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   177b2:	f7ff bf71 	b.w	17698 <_strtol_l.part.0>
   177b6:	f008 fc44 	bl	20042 <__errno>
   177ba:	2316      	movs	r3, #22
   177bc:	6003      	str	r3, [r0, #0]
   177be:	2000      	movs	r0, #0
   177c0:	bd10      	pop	{r4, pc}
   177c2:	bf00      	nop
   177c4:	20000a70 	.word	0x20000a70

000177c8 <_svfprintf_r>:
   177c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177cc:	b0db      	sub	sp, #364	; 0x16c
   177ce:	460c      	mov	r4, r1
   177d0:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   177d4:	9310      	str	r3, [sp, #64]	; 0x40
   177d6:	900a      	str	r0, [sp, #40]	; 0x28
   177d8:	f002 f8b4 	bl	19944 <_localeconv_r>
   177dc:	6803      	ldr	r3, [r0, #0]
   177de:	4618      	mov	r0, r3
   177e0:	9319      	str	r3, [sp, #100]	; 0x64
   177e2:	f7ff fed3 	bl	1758c <strlen>
   177e6:	89a3      	ldrh	r3, [r4, #12]
   177e8:	9018      	str	r0, [sp, #96]	; 0x60
   177ea:	061f      	lsls	r7, r3, #24
   177ec:	d503      	bpl.n	177f6 <_svfprintf_r+0x2e>
   177ee:	6923      	ldr	r3, [r4, #16]
   177f0:	2b00      	cmp	r3, #0
   177f2:	f000 879d 	beq.w	18730 <_svfprintf_r+0xf68>
   177f6:	2300      	movs	r3, #0
   177f8:	2400      	movs	r4, #0
   177fa:	469e      	mov	lr, r3
   177fc:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
   17800:	ab31      	add	r3, sp, #196	; 0xc4
   17802:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
   17806:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   1780a:	469b      	mov	fp, r3
   1780c:	932e      	str	r3, [sp, #184]	; 0xb8
   1780e:	2300      	movs	r3, #0
   17810:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
   17814:	f8cd b01c 	str.w	fp, [sp, #28]
   17818:	e9cd ee1a 	strd	lr, lr, [sp, #104]	; 0x68
   1781c:	e9cd ee1c 	strd	lr, lr, [sp, #112]	; 0x70
   17820:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
   17824:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   17826:	7823      	ldrb	r3, [r4, #0]
   17828:	2b00      	cmp	r3, #0
   1782a:	f000 8161 	beq.w	17af0 <_svfprintf_r+0x328>
   1782e:	2b25      	cmp	r3, #37	; 0x25
   17830:	f000 815e 	beq.w	17af0 <_svfprintf_r+0x328>
   17834:	4625      	mov	r5, r4
   17836:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1783a:	b10b      	cbz	r3, 17840 <_svfprintf_r+0x78>
   1783c:	2b25      	cmp	r3, #37	; 0x25
   1783e:	d1f9      	bne.n	17834 <_svfprintf_r+0x6c>
   17840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17842:	1aa7      	subs	r7, r4, r2
   17844:	d013      	beq.n	1786e <_svfprintf_r+0xa6>
   17846:	9b07      	ldr	r3, [sp, #28]
   17848:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   1784a:	601a      	str	r2, [r3, #0]
   1784c:	461a      	mov	r2, r3
   1784e:	605f      	str	r7, [r3, #4]
   17850:	443e      	add	r6, r7
   17852:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17854:	9630      	str	r6, [sp, #192]	; 0xc0
   17856:	3301      	adds	r3, #1
   17858:	2b07      	cmp	r3, #7
   1785a:	932f      	str	r3, [sp, #188]	; 0xbc
   1785c:	f300 80a1 	bgt.w	179a2 <_svfprintf_r+0x1da>
   17860:	4613      	mov	r3, r2
   17862:	3308      	adds	r3, #8
   17864:	9307      	str	r3, [sp, #28]
   17866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17868:	443b      	add	r3, r7
   1786a:	930e      	str	r3, [sp, #56]	; 0x38
   1786c:	786b      	ldrb	r3, [r5, #1]
   1786e:	2b00      	cmp	r3, #0
   17870:	f001 811f 	beq.w	18ab2 <_svfprintf_r+0x12ea>
   17874:	2300      	movs	r3, #0
   17876:	1c65      	adds	r5, r4, #1
   17878:	f04f 37ff 	mov.w	r7, #4294967295
   1787c:	7864      	ldrb	r4, [r4, #1]
   1787e:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
   17882:	930d      	str	r3, [sp, #52]	; 0x34
   17884:	9306      	str	r3, [sp, #24]
   17886:	3501      	adds	r5, #1
   17888:	f1a4 0320 	sub.w	r3, r4, #32
   1788c:	2b5a      	cmp	r3, #90	; 0x5a
   1788e:	f200 80a8 	bhi.w	179e2 <_svfprintf_r+0x21a>
   17892:	e8df f013 	tbh	[pc, r3, lsl #1]
   17896:	02ce      	.short	0x02ce
   17898:	00a600a6 	.word	0x00a600a6
   1789c:	00a602c8 	.word	0x00a602c8
   178a0:	00a600a6 	.word	0x00a600a6
   178a4:	00a6006a 	.word	0x00a6006a
   178a8:	01dd00a6 	.word	0x01dd00a6
   178ac:	00a601f7 	.word	0x00a601f7
   178b0:	02b001e8 	.word	0x02b001e8
   178b4:	02aa00a6 	.word	0x02aa00a6
   178b8:	005b005b 	.word	0x005b005b
   178bc:	005b005b 	.word	0x005b005b
   178c0:	005b005b 	.word	0x005b005b
   178c4:	005b005b 	.word	0x005b005b
   178c8:	00a6005b 	.word	0x00a6005b
   178cc:	00a600a6 	.word	0x00a600a6
   178d0:	00a600a6 	.word	0x00a600a6
   178d4:	00a600a6 	.word	0x00a600a6
   178d8:	00a6012f 	.word	0x00a6012f
   178dc:	028f017a 	.word	0x028f017a
   178e0:	012f012f 	.word	0x012f012f
   178e4:	00a6012f 	.word	0x00a6012f
   178e8:	00a600a6 	.word	0x00a600a6
   178ec:	028100a6 	.word	0x028100a6
   178f0:	00a600a6 	.word	0x00a600a6
   178f4:	00a60254 	.word	0x00a60254
   178f8:	00a600a6 	.word	0x00a600a6
   178fc:	00a6018f 	.word	0x00a6018f
   17900:	00a6026d 	.word	0x00a6026d
   17904:	070600a6 	.word	0x070600a6
   17908:	00a600a6 	.word	0x00a600a6
   1790c:	00a600a6 	.word	0x00a600a6
   17910:	00a600a6 	.word	0x00a600a6
   17914:	00a600a6 	.word	0x00a600a6
   17918:	00a6012f 	.word	0x00a6012f
   1791c:	01b5017a 	.word	0x01b5017a
   17920:	012f012f 	.word	0x012f012f
   17924:	01ee012f 	.word	0x01ee012f
   17928:	008001b5 	.word	0x008001b5
   1792c:	020b00a6 	.word	0x020b00a6
   17930:	01fc00a6 	.word	0x01fc00a6
   17934:	02140702 	.word	0x02140702
   17938:	00a60080 	.word	0x00a60080
   1793c:	007e018f 	.word	0x007e018f
   17940:	00a606fc 	.word	0x00a606fc
   17944:	072d00a6 	.word	0x072d00a6
   17948:	007e00a6 	.word	0x007e00a6
   1794c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   17950:	2200      	movs	r2, #0
   17952:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   17956:	f815 4b01 	ldrb.w	r4, [r5], #1
   1795a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1795e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   17962:	2b09      	cmp	r3, #9
   17964:	d9f5      	bls.n	17952 <_svfprintf_r+0x18a>
   17966:	920d      	str	r2, [sp, #52]	; 0x34
   17968:	e78e      	b.n	17888 <_svfprintf_r+0xc0>
   1796a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1796c:	4630      	mov	r0, r6
   1796e:	f001 ffe9 	bl	19944 <_localeconv_r>
   17972:	6843      	ldr	r3, [r0, #4]
   17974:	4618      	mov	r0, r3
   17976:	931d      	str	r3, [sp, #116]	; 0x74
   17978:	f7ff fe08 	bl	1758c <strlen>
   1797c:	901c      	str	r0, [sp, #112]	; 0x70
   1797e:	4604      	mov	r4, r0
   17980:	4630      	mov	r0, r6
   17982:	f001 ffdf 	bl	19944 <_localeconv_r>
   17986:	6882      	ldr	r2, [r0, #8]
   17988:	921e      	str	r2, [sp, #120]	; 0x78
   1798a:	b114      	cbz	r4, 17992 <_svfprintf_r+0x1ca>
   1798c:	2a00      	cmp	r2, #0
   1798e:	f040 8672 	bne.w	18676 <_svfprintf_r+0xeae>
   17992:	782c      	ldrb	r4, [r5, #0]
   17994:	e777      	b.n	17886 <_svfprintf_r+0xbe>
   17996:	9b06      	ldr	r3, [sp, #24]
   17998:	782c      	ldrb	r4, [r5, #0]
   1799a:	f043 0320 	orr.w	r3, r3, #32
   1799e:	9306      	str	r3, [sp, #24]
   179a0:	e771      	b.n	17886 <_svfprintf_r+0xbe>
   179a2:	aa2e      	add	r2, sp, #184	; 0xb8
   179a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   179a8:	f002 fc32 	bl	1a210 <__ssprint_r>
   179ac:	b980      	cbnz	r0, 179d0 <_svfprintf_r+0x208>
   179ae:	ab31      	add	r3, sp, #196	; 0xc4
   179b0:	9307      	str	r3, [sp, #28]
   179b2:	e758      	b.n	17866 <_svfprintf_r+0x9e>
   179b4:	aa2e      	add	r2, sp, #184	; 0xb8
   179b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   179ba:	f002 fc29 	bl	1a210 <__ssprint_r>
   179be:	2800      	cmp	r0, #0
   179c0:	f000 8087 	beq.w	17ad2 <_svfprintf_r+0x30a>
   179c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   179c6:	b11b      	cbz	r3, 179d0 <_svfprintf_r+0x208>
   179c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   179ca:	980a      	ldr	r0, [sp, #40]	; 0x28
   179cc:	f001 fe98 	bl	19700 <_free_r>
   179d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   179d2:	899b      	ldrh	r3, [r3, #12]
   179d4:	065f      	lsls	r7, r3, #25
   179d6:	f101 82eb 	bmi.w	18fb0 <_svfprintf_r+0x17e8>
   179da:	980e      	ldr	r0, [sp, #56]	; 0x38
   179dc:	b05b      	add	sp, #364	; 0x16c
   179de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179e2:	9411      	str	r4, [sp, #68]	; 0x44
   179e4:	950c      	str	r5, [sp, #48]	; 0x30
   179e6:	2c00      	cmp	r4, #0
   179e8:	f001 8063 	beq.w	18ab2 <_svfprintf_r+0x12ea>
   179ec:	2200      	movs	r2, #0
   179ee:	2301      	movs	r3, #1
   179f0:	ad41      	add	r5, sp, #260	; 0x104
   179f2:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
   179f6:	4617      	mov	r7, r2
   179f8:	469b      	mov	fp, r3
   179fa:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
   179fe:	9308      	str	r3, [sp, #32]
   17a00:	920f      	str	r2, [sp, #60]	; 0x3c
   17a02:	9212      	str	r2, [sp, #72]	; 0x48
   17a04:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
   17a08:	9b06      	ldr	r3, [sp, #24]
   17a0a:	f013 0a02 	ands.w	sl, r3, #2
   17a0e:	d002      	beq.n	17a16 <_svfprintf_r+0x24e>
   17a10:	9b08      	ldr	r3, [sp, #32]
   17a12:	3302      	adds	r3, #2
   17a14:	9308      	str	r3, [sp, #32]
   17a16:	9b06      	ldr	r3, [sp, #24]
   17a18:	f013 0484 	ands.w	r4, r3, #132	; 0x84
   17a1c:	d105      	bne.n	17a2a <_svfprintf_r+0x262>
   17a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17a20:	9908      	ldr	r1, [sp, #32]
   17a22:	1a5e      	subs	r6, r3, r1
   17a24:	2e00      	cmp	r6, #0
   17a26:	f300 838f 	bgt.w	18148 <_svfprintf_r+0x980>
   17a2a:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   17a2c:	b17a      	cbz	r2, 17a4e <_svfprintf_r+0x286>
   17a2e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   17a30:	f10d 019b 	add.w	r1, sp, #155	; 0x9b
   17a34:	9b07      	ldr	r3, [sp, #28]
   17a36:	3601      	adds	r6, #1
   17a38:	3201      	adds	r2, #1
   17a3a:	6019      	str	r1, [r3, #0]
   17a3c:	2101      	movs	r1, #1
   17a3e:	2a07      	cmp	r2, #7
   17a40:	9630      	str	r6, [sp, #192]	; 0xc0
   17a42:	922f      	str	r2, [sp, #188]	; 0xbc
   17a44:	6059      	str	r1, [r3, #4]
   17a46:	f300 83bf 	bgt.w	181c8 <_svfprintf_r+0xa00>
   17a4a:	3308      	adds	r3, #8
   17a4c:	9307      	str	r3, [sp, #28]
   17a4e:	f1ba 0f00 	cmp.w	sl, #0
   17a52:	d00e      	beq.n	17a72 <_svfprintf_r+0x2aa>
   17a54:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   17a56:	a927      	add	r1, sp, #156	; 0x9c
   17a58:	9b07      	ldr	r3, [sp, #28]
   17a5a:	3602      	adds	r6, #2
   17a5c:	3201      	adds	r2, #1
   17a5e:	6019      	str	r1, [r3, #0]
   17a60:	2102      	movs	r1, #2
   17a62:	2a07      	cmp	r2, #7
   17a64:	9630      	str	r6, [sp, #192]	; 0xc0
   17a66:	922f      	str	r2, [sp, #188]	; 0xbc
   17a68:	6059      	str	r1, [r3, #4]
   17a6a:	f300 83b9 	bgt.w	181e0 <_svfprintf_r+0xa18>
   17a6e:	3308      	adds	r3, #8
   17a70:	9307      	str	r3, [sp, #28]
   17a72:	2c80      	cmp	r4, #128	; 0x80
   17a74:	f000 8247 	beq.w	17f06 <_svfprintf_r+0x73e>
   17a78:	eba7 070b 	sub.w	r7, r7, fp
   17a7c:	2f00      	cmp	r7, #0
   17a7e:	f300 828e 	bgt.w	17f9e <_svfprintf_r+0x7d6>
   17a82:	9b06      	ldr	r3, [sp, #24]
   17a84:	05db      	lsls	r3, r3, #23
   17a86:	f100 81de 	bmi.w	17e46 <_svfprintf_r+0x67e>
   17a8a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17a8c:	eb0b 0406 	add.w	r4, fp, r6
   17a90:	9a07      	ldr	r2, [sp, #28]
   17a92:	3301      	adds	r3, #1
   17a94:	9430      	str	r4, [sp, #192]	; 0xc0
   17a96:	6015      	str	r5, [r2, #0]
   17a98:	2b07      	cmp	r3, #7
   17a9a:	f8c2 b004 	str.w	fp, [r2, #4]
   17a9e:	932f      	str	r3, [sp, #188]	; 0xbc
   17aa0:	f300 82f7 	bgt.w	18092 <_svfprintf_r+0x8ca>
   17aa4:	4613      	mov	r3, r2
   17aa6:	3308      	adds	r3, #8
   17aa8:	9307      	str	r3, [sp, #28]
   17aaa:	9b06      	ldr	r3, [sp, #24]
   17aac:	075b      	lsls	r3, r3, #29
   17aae:	d505      	bpl.n	17abc <_svfprintf_r+0x2f4>
   17ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17ab2:	9a08      	ldr	r2, [sp, #32]
   17ab4:	1a9d      	subs	r5, r3, r2
   17ab6:	2d00      	cmp	r5, #0
   17ab8:	f300 839e 	bgt.w	181f8 <_svfprintf_r+0xa30>
   17abc:	9908      	ldr	r1, [sp, #32]
   17abe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   17ac2:	428a      	cmp	r2, r1
   17ac4:	bfac      	ite	ge
   17ac6:	189b      	addge	r3, r3, r2
   17ac8:	185b      	addlt	r3, r3, r1
   17aca:	930e      	str	r3, [sp, #56]	; 0x38
   17acc:	2c00      	cmp	r4, #0
   17ace:	f47f af71 	bne.w	179b4 <_svfprintf_r+0x1ec>
   17ad2:	2300      	movs	r3, #0
   17ad4:	932f      	str	r3, [sp, #188]	; 0xbc
   17ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17ad8:	b11b      	cbz	r3, 17ae2 <_svfprintf_r+0x31a>
   17ada:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17adc:	980a      	ldr	r0, [sp, #40]	; 0x28
   17ade:	f001 fe0f 	bl	19700 <_free_r>
   17ae2:	ab31      	add	r3, sp, #196	; 0xc4
   17ae4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   17ae6:	9307      	str	r3, [sp, #28]
   17ae8:	7823      	ldrb	r3, [r4, #0]
   17aea:	2b00      	cmp	r3, #0
   17aec:	f47f ae9f 	bne.w	1782e <_svfprintf_r+0x66>
   17af0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   17af2:	e6bc      	b.n	1786e <_svfprintf_r+0xa6>
   17af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17af6:	f04f 32ff 	mov.w	r2, #4294967295
   17afa:	9411      	str	r4, [sp, #68]	; 0x44
   17afc:	3307      	adds	r3, #7
   17afe:	950c      	str	r5, [sp, #48]	; 0x30
   17b00:	f023 0107 	bic.w	r1, r3, #7
   17b04:	4ba7      	ldr	r3, [pc, #668]	; (17da4 <_svfprintf_r+0x5dc>)
   17b06:	e8f1 4502 	ldrd	r4, r5, [r1], #8
   17b0a:	9110      	str	r1, [sp, #64]	; 0x40
   17b0c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   17b10:	9420      	str	r4, [sp, #128]	; 0x80
   17b12:	9121      	str	r1, [sp, #132]	; 0x84
   17b14:	e9dd 8920 	ldrd	r8, r9, [sp, #128]	; 0x80
   17b18:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   17b1c:	4640      	mov	r0, r8
   17b1e:	4649      	mov	r1, r9
   17b20:	f7e9 f96c 	bl	dfc <__aeabi_dcmpun>
   17b24:	2800      	cmp	r0, #0
   17b26:	f040 84fa 	bne.w	1851e <_svfprintf_r+0xd56>
   17b2a:	f04f 32ff 	mov.w	r2, #4294967295
   17b2e:	4b9d      	ldr	r3, [pc, #628]	; (17da4 <_svfprintf_r+0x5dc>)
   17b30:	4640      	mov	r0, r8
   17b32:	4649      	mov	r1, r9
   17b34:	f7e8 fff0 	bl	b18 <__aeabi_dcmple>
   17b38:	2800      	cmp	r0, #0
   17b3a:	f040 84f0 	bne.w	1851e <_svfprintf_r+0xd56>
   17b3e:	2200      	movs	r2, #0
   17b40:	2300      	movs	r3, #0
   17b42:	4620      	mov	r0, r4
   17b44:	4629      	mov	r1, r5
   17b46:	f7e8 ffdd 	bl	b04 <__aeabi_dcmplt>
   17b4a:	2800      	cmp	r0, #0
   17b4c:	f041 8092 	bne.w	18c74 <_svfprintf_r+0x14ac>
   17b50:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   17b54:	9b06      	ldr	r3, [sp, #24]
   17b56:	2100      	movs	r1, #0
   17b58:	4d93      	ldr	r5, [pc, #588]	; (17da8 <_svfprintf_r+0x5e0>)
   17b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17b5e:	910f      	str	r1, [sp, #60]	; 0x3c
   17b60:	9306      	str	r3, [sp, #24]
   17b62:	4b92      	ldr	r3, [pc, #584]	; (17dac <_svfprintf_r+0x5e4>)
   17b64:	9811      	ldr	r0, [sp, #68]	; 0x44
   17b66:	f04f 0b03 	mov.w	fp, #3
   17b6a:	460f      	mov	r7, r1
   17b6c:	9112      	str	r1, [sp, #72]	; 0x48
   17b6e:	2847      	cmp	r0, #71	; 0x47
   17b70:	bfc8      	it	gt
   17b72:	461d      	movgt	r5, r3
   17b74:	f8cd b020 	str.w	fp, [sp, #32]
   17b78:	e9cd 1114 	strd	r1, r1, [sp, #80]	; 0x50
   17b7c:	2a00      	cmp	r2, #0
   17b7e:	f43f af43 	beq.w	17a08 <_svfprintf_r+0x240>
   17b82:	9b08      	ldr	r3, [sp, #32]
   17b84:	3301      	adds	r3, #1
   17b86:	9308      	str	r3, [sp, #32]
   17b88:	e73e      	b.n	17a08 <_svfprintf_r+0x240>
   17b8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17b8c:	2200      	movs	r2, #0
   17b8e:	950c      	str	r5, [sp, #48]	; 0x30
   17b90:	ad41      	add	r5, sp, #260	; 0x104
   17b92:	f853 1b04 	ldr.w	r1, [r3], #4
   17b96:	4617      	mov	r7, r2
   17b98:	9411      	str	r4, [sp, #68]	; 0x44
   17b9a:	9310      	str	r3, [sp, #64]	; 0x40
   17b9c:	2301      	movs	r3, #1
   17b9e:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
   17ba2:	469b      	mov	fp, r3
   17ba4:	f88d 1104 	strb.w	r1, [sp, #260]	; 0x104
   17ba8:	9308      	str	r3, [sp, #32]
   17baa:	920f      	str	r2, [sp, #60]	; 0x3c
   17bac:	9215      	str	r2, [sp, #84]	; 0x54
   17bae:	9214      	str	r2, [sp, #80]	; 0x50
   17bb0:	9212      	str	r2, [sp, #72]	; 0x48
   17bb2:	e729      	b.n	17a08 <_svfprintf_r+0x240>
   17bb4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17bb6:	9411      	str	r4, [sp, #68]	; 0x44
   17bb8:	2400      	movs	r4, #0
   17bba:	950c      	str	r5, [sp, #48]	; 0x30
   17bbc:	f856 5b04 	ldr.w	r5, [r6], #4
   17bc0:	f88d 409b 	strb.w	r4, [sp, #155]	; 0x9b
   17bc4:	2d00      	cmp	r5, #0
   17bc6:	f000 8764 	beq.w	18a92 <_svfprintf_r+0x12ca>
   17bca:	1c7b      	adds	r3, r7, #1
   17bcc:	f000 85e4 	beq.w	18798 <_svfprintf_r+0xfd0>
   17bd0:	463a      	mov	r2, r7
   17bd2:	4621      	mov	r1, r4
   17bd4:	4628      	mov	r0, r5
   17bd6:	f7ff faef 	bl	171b8 <memchr>
   17bda:	900f      	str	r0, [sp, #60]	; 0x3c
   17bdc:	2800      	cmp	r0, #0
   17bde:	f001 8146 	beq.w	18e6e <_svfprintf_r+0x16a6>
   17be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17be4:	4627      	mov	r7, r4
   17be6:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   17bea:	eba3 0b05 	sub.w	fp, r3, r5
   17bee:	9610      	str	r6, [sp, #64]	; 0x40
   17bf0:	940f      	str	r4, [sp, #60]	; 0x3c
   17bf2:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
   17bf6:	9412      	str	r4, [sp, #72]	; 0x48
   17bf8:	9308      	str	r3, [sp, #32]
   17bfa:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
   17bfe:	e7bd      	b.n	17b7c <_svfprintf_r+0x3b4>
   17c00:	9b06      	ldr	r3, [sp, #24]
   17c02:	9411      	str	r4, [sp, #68]	; 0x44
   17c04:	069e      	lsls	r6, r3, #26
   17c06:	950c      	str	r5, [sp, #48]	; 0x30
   17c08:	f140 80de 	bpl.w	17dc8 <_svfprintf_r+0x600>
   17c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17c0e:	3307      	adds	r3, #7
   17c10:	f023 0307 	bic.w	r3, r3, #7
   17c14:	461a      	mov	r2, r3
   17c16:	6859      	ldr	r1, [r3, #4]
   17c18:	f852 3b08 	ldr.w	r3, [r2], #8
   17c1c:	9210      	str	r2, [sp, #64]	; 0x40
   17c1e:	460a      	mov	r2, r1
   17c20:	2900      	cmp	r1, #0
   17c22:	f2c0 843c 	blt.w	1849e <_svfprintf_r+0xcd6>
   17c26:	1c79      	adds	r1, r7, #1
   17c28:	f000 8324 	beq.w	18274 <_svfprintf_r+0xaac>
   17c2c:	9906      	ldr	r1, [sp, #24]
   17c2e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   17c32:	9106      	str	r1, [sp, #24]
   17c34:	2f00      	cmp	r7, #0
   17c36:	f040 831d 	bne.w	18274 <_svfprintf_r+0xaac>
   17c3a:	ea53 0102 	orrs.w	r1, r3, r2
   17c3e:	bf14      	ite	ne
   17c40:	2101      	movne	r1, #1
   17c42:	2100      	moveq	r1, #0
   17c44:	f040 8316 	bne.w	18274 <_svfprintf_r+0xaac>
   17c48:	460f      	mov	r7, r1
   17c4a:	ad5a      	add	r5, sp, #360	; 0x168
   17c4c:	468b      	mov	fp, r1
   17c4e:	e068      	b.n	17d22 <_svfprintf_r+0x55a>
   17c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17c52:	f853 2b04 	ldr.w	r2, [r3], #4
   17c56:	2a00      	cmp	r2, #0
   17c58:	920d      	str	r2, [sp, #52]	; 0x34
   17c5a:	f280 8442 	bge.w	184e2 <_svfprintf_r+0xd1a>
   17c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17c60:	9310      	str	r3, [sp, #64]	; 0x40
   17c62:	4252      	negs	r2, r2
   17c64:	920d      	str	r2, [sp, #52]	; 0x34
   17c66:	9b06      	ldr	r3, [sp, #24]
   17c68:	782c      	ldrb	r4, [r5, #0]
   17c6a:	f043 0304 	orr.w	r3, r3, #4
   17c6e:	9306      	str	r3, [sp, #24]
   17c70:	e609      	b.n	17886 <_svfprintf_r+0xbe>
   17c72:	782c      	ldrb	r4, [r5, #0]
   17c74:	9b06      	ldr	r3, [sp, #24]
   17c76:	2c68      	cmp	r4, #104	; 0x68
   17c78:	f000 8553 	beq.w	18722 <_svfprintf_r+0xf5a>
   17c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17c80:	9306      	str	r3, [sp, #24]
   17c82:	e600      	b.n	17886 <_svfprintf_r+0xbe>
   17c84:	232b      	movs	r3, #43	; 0x2b
   17c86:	782c      	ldrb	r4, [r5, #0]
   17c88:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
   17c8c:	e5fb      	b.n	17886 <_svfprintf_r+0xbe>
   17c8e:	9b06      	ldr	r3, [sp, #24]
   17c90:	950c      	str	r5, [sp, #48]	; 0x30
   17c92:	069c      	lsls	r4, r3, #26
   17c94:	f140 8431 	bpl.w	184fa <_svfprintf_r+0xd32>
   17c98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17c9c:	681b      	ldr	r3, [r3, #0]
   17c9e:	601a      	str	r2, [r3, #0]
   17ca0:	17d2      	asrs	r2, r2, #31
   17ca2:	605a      	str	r2, [r3, #4]
   17ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17ca6:	3304      	adds	r3, #4
   17ca8:	9310      	str	r3, [sp, #64]	; 0x40
   17caa:	e5bb      	b.n	17824 <_svfprintf_r+0x5c>
   17cac:	782c      	ldrb	r4, [r5, #0]
   17cae:	9b06      	ldr	r3, [sp, #24]
   17cb0:	2c6c      	cmp	r4, #108	; 0x6c
   17cb2:	f000 852f 	beq.w	18714 <_svfprintf_r+0xf4c>
   17cb6:	f043 0310 	orr.w	r3, r3, #16
   17cba:	9306      	str	r3, [sp, #24]
   17cbc:	e5e3      	b.n	17886 <_svfprintf_r+0xbe>
   17cbe:	9b06      	ldr	r3, [sp, #24]
   17cc0:	2078      	movs	r0, #120	; 0x78
   17cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17cc4:	f043 0902 	orr.w	r9, r3, #2
   17cc8:	f647 0330 	movw	r3, #30768	; 0x7830
   17ccc:	4938      	ldr	r1, [pc, #224]	; (17db0 <_svfprintf_r+0x5e8>)
   17cce:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
   17cd2:	f852 3b04 	ldr.w	r3, [r2], #4
   17cd6:	911a      	str	r1, [sp, #104]	; 0x68
   17cd8:	2102      	movs	r1, #2
   17cda:	9210      	str	r2, [sp, #64]	; 0x40
   17cdc:	2200      	movs	r2, #0
   17cde:	950c      	str	r5, [sp, #48]	; 0x30
   17ce0:	9011      	str	r0, [sp, #68]	; 0x44
   17ce2:	2000      	movs	r0, #0
   17ce4:	f88d 009b 	strb.w	r0, [sp, #155]	; 0x9b
   17ce8:	1c78      	adds	r0, r7, #1
   17cea:	f000 8191 	beq.w	18010 <_svfprintf_r+0x848>
   17cee:	f029 0080 	bic.w	r0, r9, #128	; 0x80
   17cf2:	9006      	str	r0, [sp, #24]
   17cf4:	ea53 0002 	orrs.w	r0, r3, r2
   17cf8:	f040 8188 	bne.w	1800c <_svfprintf_r+0x844>
   17cfc:	1e38      	subs	r0, r7, #0
   17cfe:	bf18      	it	ne
   17d00:	2001      	movne	r0, #1
   17d02:	2f00      	cmp	r7, #0
   17d04:	f040 8182 	bne.w	1800c <_svfprintf_r+0x844>
   17d08:	2900      	cmp	r1, #0
   17d0a:	f040 82af 	bne.w	1826c <_svfprintf_r+0xaa4>
   17d0e:	f019 0b01 	ands.w	fp, r9, #1
   17d12:	460f      	mov	r7, r1
   17d14:	f000 8361 	beq.w	183da <_svfprintf_r+0xc12>
   17d18:	2330      	movs	r3, #48	; 0x30
   17d1a:	f20d 1567 	addw	r5, sp, #359	; 0x167
   17d1e:	f88d 3167 	strb.w	r3, [sp, #359]	; 0x167
   17d22:	455f      	cmp	r7, fp
   17d24:	f04f 0300 	mov.w	r3, #0
   17d28:	4639      	mov	r1, r7
   17d2a:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   17d2e:	bfb8      	it	lt
   17d30:	4659      	movlt	r1, fp
   17d32:	930f      	str	r3, [sp, #60]	; 0x3c
   17d34:	9312      	str	r3, [sp, #72]	; 0x48
   17d36:	9108      	str	r1, [sp, #32]
   17d38:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
   17d3c:	e71e      	b.n	17b7c <_svfprintf_r+0x3b4>
   17d3e:	9b06      	ldr	r3, [sp, #24]
   17d40:	9411      	str	r4, [sp, #68]	; 0x44
   17d42:	f043 0310 	orr.w	r3, r3, #16
   17d46:	950c      	str	r5, [sp, #48]	; 0x30
   17d48:	9306      	str	r3, [sp, #24]
   17d4a:	9b06      	ldr	r3, [sp, #24]
   17d4c:	f013 0220 	ands.w	r2, r3, #32
   17d50:	f000 8394 	beq.w	1847c <_svfprintf_r+0xcb4>
   17d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17d56:	3307      	adds	r3, #7
   17d58:	f023 0307 	bic.w	r3, r3, #7
   17d5c:	4619      	mov	r1, r3
   17d5e:	685a      	ldr	r2, [r3, #4]
   17d60:	f851 3b08 	ldr.w	r3, [r1], #8
   17d64:	9110      	str	r1, [sp, #64]	; 0x40
   17d66:	9906      	ldr	r1, [sp, #24]
   17d68:	f421 6980 	bic.w	r9, r1, #1024	; 0x400
   17d6c:	2100      	movs	r1, #0
   17d6e:	e7b8      	b.n	17ce2 <_svfprintf_r+0x51a>
   17d70:	9b06      	ldr	r3, [sp, #24]
   17d72:	9411      	str	r4, [sp, #68]	; 0x44
   17d74:	f043 0910 	orr.w	r9, r3, #16
   17d78:	950c      	str	r5, [sp, #48]	; 0x30
   17d7a:	f019 0220 	ands.w	r2, r9, #32
   17d7e:	f000 8368 	beq.w	18452 <_svfprintf_r+0xc8a>
   17d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17d84:	2101      	movs	r1, #1
   17d86:	3307      	adds	r3, #7
   17d88:	f023 0307 	bic.w	r3, r3, #7
   17d8c:	4618      	mov	r0, r3
   17d8e:	685a      	ldr	r2, [r3, #4]
   17d90:	f850 3b08 	ldr.w	r3, [r0], #8
   17d94:	9010      	str	r0, [sp, #64]	; 0x40
   17d96:	e7a4      	b.n	17ce2 <_svfprintf_r+0x51a>
   17d98:	9b06      	ldr	r3, [sp, #24]
   17d9a:	782c      	ldrb	r4, [r5, #0]
   17d9c:	f043 0308 	orr.w	r3, r3, #8
   17da0:	9306      	str	r3, [sp, #24]
   17da2:	e570      	b.n	17886 <_svfprintf_r+0xbe>
   17da4:	7fefffff 	.word	0x7fefffff
   17da8:	000312c4 	.word	0x000312c4
   17dac:	000312c8 	.word	0x000312c8
   17db0:	000312d4 	.word	0x000312d4
   17db4:	9b06      	ldr	r3, [sp, #24]
   17db6:	9411      	str	r4, [sp, #68]	; 0x44
   17db8:	f043 0310 	orr.w	r3, r3, #16
   17dbc:	950c      	str	r5, [sp, #48]	; 0x30
   17dbe:	9306      	str	r3, [sp, #24]
   17dc0:	9b06      	ldr	r3, [sp, #24]
   17dc2:	069e      	lsls	r6, r3, #26
   17dc4:	f53f af22 	bmi.w	17c0c <_svfprintf_r+0x444>
   17dc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17dca:	f852 3b04 	ldr.w	r3, [r2], #4
   17dce:	9210      	str	r2, [sp, #64]	; 0x40
   17dd0:	9a06      	ldr	r2, [sp, #24]
   17dd2:	06d5      	lsls	r5, r2, #27
   17dd4:	f100 838d 	bmi.w	184f2 <_svfprintf_r+0xd2a>
   17dd8:	9a06      	ldr	r2, [sp, #24]
   17dda:	0654      	lsls	r4, r2, #25
   17ddc:	f140 8385 	bpl.w	184ea <_svfprintf_r+0xd22>
   17de0:	f343 32c0 	sbfx	r2, r3, #15, #1
   17de4:	b21b      	sxth	r3, r3
   17de6:	4611      	mov	r1, r2
   17de8:	e71a      	b.n	17c20 <_svfprintf_r+0x458>
   17dea:	9b06      	ldr	r3, [sp, #24]
   17dec:	782c      	ldrb	r4, [r5, #0]
   17dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17df2:	9306      	str	r3, [sp, #24]
   17df4:	e547      	b.n	17886 <_svfprintf_r+0xbe>
   17df6:	462a      	mov	r2, r5
   17df8:	f812 4b01 	ldrb.w	r4, [r2], #1
   17dfc:	2c2a      	cmp	r4, #42	; 0x2a
   17dfe:	f001 815e 	beq.w	190be <_svfprintf_r+0x18f6>
   17e02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   17e06:	4615      	mov	r5, r2
   17e08:	2700      	movs	r7, #0
   17e0a:	2b09      	cmp	r3, #9
   17e0c:	f63f ad3c 	bhi.w	17888 <_svfprintf_r+0xc0>
   17e10:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   17e14:	f815 4b01 	ldrb.w	r4, [r5], #1
   17e18:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   17e1c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   17e20:	2b09      	cmp	r3, #9
   17e22:	d9f5      	bls.n	17e10 <_svfprintf_r+0x648>
   17e24:	e530      	b.n	17888 <_svfprintf_r+0xc0>
   17e26:	9b06      	ldr	r3, [sp, #24]
   17e28:	782c      	ldrb	r4, [r5, #0]
   17e2a:	f043 0301 	orr.w	r3, r3, #1
   17e2e:	9306      	str	r3, [sp, #24]
   17e30:	e529      	b.n	17886 <_svfprintf_r+0xbe>
   17e32:	f89d 309b 	ldrb.w	r3, [sp, #155]	; 0x9b
   17e36:	782c      	ldrb	r4, [r5, #0]
   17e38:	2b00      	cmp	r3, #0
   17e3a:	f47f ad24 	bne.w	17886 <_svfprintf_r+0xbe>
   17e3e:	2320      	movs	r3, #32
   17e40:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
   17e44:	e51f      	b.n	17886 <_svfprintf_r+0xbe>
   17e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17e48:	2b65      	cmp	r3, #101	; 0x65
   17e4a:	f340 8133 	ble.w	180b4 <_svfprintf_r+0x8ec>
   17e4e:	2200      	movs	r2, #0
   17e50:	2300      	movs	r3, #0
   17e52:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   17e56:	f7e8 fe4b 	bl	af0 <__aeabi_dcmpeq>
   17e5a:	2800      	cmp	r0, #0
   17e5c:	f000 821b 	beq.w	18296 <_svfprintf_r+0xace>
   17e60:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17e62:	3601      	adds	r6, #1
   17e64:	4a91      	ldr	r2, [pc, #580]	; (180ac <_svfprintf_r+0x8e4>)
   17e66:	3301      	adds	r3, #1
   17e68:	9907      	ldr	r1, [sp, #28]
   17e6a:	9630      	str	r6, [sp, #192]	; 0xc0
   17e6c:	600a      	str	r2, [r1, #0]
   17e6e:	2b07      	cmp	r3, #7
   17e70:	f04f 0201 	mov.w	r2, #1
   17e74:	932f      	str	r3, [sp, #188]	; 0xbc
   17e76:	604a      	str	r2, [r1, #4]
   17e78:	f300 858d 	bgt.w	18996 <_svfprintf_r+0x11ce>
   17e7c:	460b      	mov	r3, r1
   17e7e:	3308      	adds	r3, #8
   17e80:	9307      	str	r3, [sp, #28]
   17e82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   17e84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17e86:	4293      	cmp	r3, r2
   17e88:	db04      	blt.n	17e94 <_svfprintf_r+0x6cc>
   17e8a:	9b06      	ldr	r3, [sp, #24]
   17e8c:	07df      	lsls	r7, r3, #31
   17e8e:	d401      	bmi.n	17e94 <_svfprintf_r+0x6cc>
   17e90:	4634      	mov	r4, r6
   17e92:	e60a      	b.n	17aaa <_svfprintf_r+0x2e2>
   17e94:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17e96:	9a07      	ldr	r2, [sp, #28]
   17e98:	9919      	ldr	r1, [sp, #100]	; 0x64
   17e9a:	199c      	adds	r4, r3, r6
   17e9c:	e9c2 1300 	strd	r1, r3, [r2]
   17ea0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17ea2:	9430      	str	r4, [sp, #192]	; 0xc0
   17ea4:	3301      	adds	r3, #1
   17ea6:	2b07      	cmp	r3, #7
   17ea8:	932f      	str	r3, [sp, #188]	; 0xbc
   17eaa:	f300 8426 	bgt.w	186fa <_svfprintf_r+0xf32>
   17eae:	4613      	mov	r3, r2
   17eb0:	3308      	adds	r3, #8
   17eb2:	9307      	str	r3, [sp, #28]
   17eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17eb6:	1e5d      	subs	r5, r3, #1
   17eb8:	2d00      	cmp	r5, #0
   17eba:	f77f adf6 	ble.w	17aaa <_svfprintf_r+0x2e2>
   17ebe:	2d10      	cmp	r5, #16
   17ec0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17ec2:	4e7b      	ldr	r6, [pc, #492]	; (180b0 <_svfprintf_r+0x8e8>)
   17ec4:	f340 80db 	ble.w	1807e <_svfprintf_r+0x8b6>
   17ec8:	2710      	movs	r7, #16
   17eca:	9a07      	ldr	r2, [sp, #28]
   17ecc:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   17ed0:	e003      	b.n	17eda <_svfprintf_r+0x712>
   17ed2:	3d10      	subs	r5, #16
   17ed4:	2d10      	cmp	r5, #16
   17ed6:	f340 80d1 	ble.w	1807c <_svfprintf_r+0x8b4>
   17eda:	3301      	adds	r3, #1
   17edc:	3410      	adds	r4, #16
   17ede:	2b07      	cmp	r3, #7
   17ee0:	e9c2 6700 	strd	r6, r7, [r2]
   17ee4:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   17ee8:	f102 0208 	add.w	r2, r2, #8
   17eec:	ddf1      	ble.n	17ed2 <_svfprintf_r+0x70a>
   17eee:	aa2e      	add	r2, sp, #184	; 0xb8
   17ef0:	4649      	mov	r1, r9
   17ef2:	4640      	mov	r0, r8
   17ef4:	f002 f98c 	bl	1a210 <__ssprint_r>
   17ef8:	2800      	cmp	r0, #0
   17efa:	f47f ad63 	bne.w	179c4 <_svfprintf_r+0x1fc>
   17efe:	aa31      	add	r2, sp, #196	; 0xc4
   17f00:	e9dd 342f 	ldrd	r3, r4, [sp, #188]	; 0xbc
   17f04:	e7e5      	b.n	17ed2 <_svfprintf_r+0x70a>
   17f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17f08:	9a08      	ldr	r2, [sp, #32]
   17f0a:	eba3 0802 	sub.w	r8, r3, r2
   17f0e:	f1b8 0f00 	cmp.w	r8, #0
   17f12:	f77f adb1 	ble.w	17a78 <_svfprintf_r+0x2b0>
   17f16:	f1b8 0f10 	cmp.w	r8, #16
   17f1a:	4632      	mov	r2, r6
   17f1c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17f1e:	4e64      	ldr	r6, [pc, #400]	; (180b0 <_svfprintf_r+0x8e8>)
   17f20:	dd29      	ble.n	17f76 <_svfprintf_r+0x7ae>
   17f22:	951f      	str	r5, [sp, #124]	; 0x7c
   17f24:	f04f 0910 	mov.w	r9, #16
   17f28:	9c07      	ldr	r4, [sp, #28]
   17f2a:	4619      	mov	r1, r3
   17f2c:	e9dd a50a 	ldrd	sl, r5, [sp, #40]	; 0x28
   17f30:	e004      	b.n	17f3c <_svfprintf_r+0x774>
   17f32:	f1a8 0810 	sub.w	r8, r8, #16
   17f36:	f1b8 0f10 	cmp.w	r8, #16
   17f3a:	dd19      	ble.n	17f70 <_svfprintf_r+0x7a8>
   17f3c:	3101      	adds	r1, #1
   17f3e:	3210      	adds	r2, #16
   17f40:	2907      	cmp	r1, #7
   17f42:	e9c4 6900 	strd	r6, r9, [r4]
   17f46:	e9cd 122f 	strd	r1, r2, [sp, #188]	; 0xbc
   17f4a:	f104 0408 	add.w	r4, r4, #8
   17f4e:	ddf0      	ble.n	17f32 <_svfprintf_r+0x76a>
   17f50:	aa2e      	add	r2, sp, #184	; 0xb8
   17f52:	4629      	mov	r1, r5
   17f54:	4650      	mov	r0, sl
   17f56:	ac31      	add	r4, sp, #196	; 0xc4
   17f58:	f002 f95a 	bl	1a210 <__ssprint_r>
   17f5c:	2800      	cmp	r0, #0
   17f5e:	f47f ad31 	bne.w	179c4 <_svfprintf_r+0x1fc>
   17f62:	f1a8 0810 	sub.w	r8, r8, #16
   17f66:	f1b8 0f10 	cmp.w	r8, #16
   17f6a:	e9dd 122f 	ldrd	r1, r2, [sp, #188]	; 0xbc
   17f6e:	dce5      	bgt.n	17f3c <_svfprintf_r+0x774>
   17f70:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   17f72:	460b      	mov	r3, r1
   17f74:	9407      	str	r4, [sp, #28]
   17f76:	9907      	ldr	r1, [sp, #28]
   17f78:	3301      	adds	r3, #1
   17f7a:	600e      	str	r6, [r1, #0]
   17f7c:	2b07      	cmp	r3, #7
   17f7e:	eb08 0602 	add.w	r6, r8, r2
   17f82:	f8c1 8004 	str.w	r8, [r1, #4]
   17f86:	e9cd 362f 	strd	r3, r6, [sp, #188]	; 0xbc
   17f8a:	f300 8563 	bgt.w	18a54 <_svfprintf_r+0x128c>
   17f8e:	460b      	mov	r3, r1
   17f90:	eba7 070b 	sub.w	r7, r7, fp
   17f94:	3308      	adds	r3, #8
   17f96:	2f00      	cmp	r7, #0
   17f98:	9307      	str	r3, [sp, #28]
   17f9a:	f77f ad72 	ble.w	17a82 <_svfprintf_r+0x2ba>
   17f9e:	2f10      	cmp	r7, #16
   17fa0:	4632      	mov	r2, r6
   17fa2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17fa4:	4e42      	ldr	r6, [pc, #264]	; (180b0 <_svfprintf_r+0x8e8>)
   17fa6:	dd22      	ble.n	17fee <_svfprintf_r+0x826>
   17fa8:	f04f 0910 	mov.w	r9, #16
   17fac:	9c07      	ldr	r4, [sp, #28]
   17fae:	e9dd 8a0a 	ldrd	r8, sl, [sp, #40]	; 0x28
   17fb2:	e002      	b.n	17fba <_svfprintf_r+0x7f2>
   17fb4:	3f10      	subs	r7, #16
   17fb6:	2f10      	cmp	r7, #16
   17fb8:	dd18      	ble.n	17fec <_svfprintf_r+0x824>
   17fba:	3301      	adds	r3, #1
   17fbc:	3210      	adds	r2, #16
   17fbe:	493c      	ldr	r1, [pc, #240]	; (180b0 <_svfprintf_r+0x8e8>)
   17fc0:	2b07      	cmp	r3, #7
   17fc2:	e9c4 1900 	strd	r1, r9, [r4]
   17fc6:	e9cd 322f 	strd	r3, r2, [sp, #188]	; 0xbc
   17fca:	f104 0408 	add.w	r4, r4, #8
   17fce:	ddf1      	ble.n	17fb4 <_svfprintf_r+0x7ec>
   17fd0:	aa2e      	add	r2, sp, #184	; 0xb8
   17fd2:	4651      	mov	r1, sl
   17fd4:	4640      	mov	r0, r8
   17fd6:	ac31      	add	r4, sp, #196	; 0xc4
   17fd8:	f002 f91a 	bl	1a210 <__ssprint_r>
   17fdc:	2800      	cmp	r0, #0
   17fde:	f47f acf1 	bne.w	179c4 <_svfprintf_r+0x1fc>
   17fe2:	3f10      	subs	r7, #16
   17fe4:	2f10      	cmp	r7, #16
   17fe6:	e9dd 322f 	ldrd	r3, r2, [sp, #188]	; 0xbc
   17fea:	dce6      	bgt.n	17fba <_svfprintf_r+0x7f2>
   17fec:	9407      	str	r4, [sp, #28]
   17fee:	9907      	ldr	r1, [sp, #28]
   17ff0:	3301      	adds	r3, #1
   17ff2:	600e      	str	r6, [r1, #0]
   17ff4:	2b07      	cmp	r3, #7
   17ff6:	eb07 0602 	add.w	r6, r7, r2
   17ffa:	604f      	str	r7, [r1, #4]
   17ffc:	e9cd 362f 	strd	r3, r6, [sp, #188]	; 0xbc
   18000:	f300 821a 	bgt.w	18438 <_svfprintf_r+0xc70>
   18004:	460b      	mov	r3, r1
   18006:	3308      	adds	r3, #8
   18008:	9307      	str	r3, [sp, #28]
   1800a:	e53a      	b.n	17a82 <_svfprintf_r+0x2ba>
   1800c:	f8dd 9018 	ldr.w	r9, [sp, #24]
   18010:	2901      	cmp	r1, #1
   18012:	f000 8131 	beq.w	18278 <_svfprintf_r+0xab0>
   18016:	2902      	cmp	r1, #2
   18018:	ad5a      	add	r5, sp, #360	; 0x168
   1801a:	d112      	bne.n	18042 <_svfprintf_r+0x87a>
   1801c:	981a      	ldr	r0, [sp, #104]	; 0x68
   1801e:	f003 010f 	and.w	r1, r3, #15
   18022:	091b      	lsrs	r3, r3, #4
   18024:	5c41      	ldrb	r1, [r0, r1]
   18026:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   1802a:	0912      	lsrs	r2, r2, #4
   1802c:	f805 1d01 	strb.w	r1, [r5, #-1]!
   18030:	ea53 0102 	orrs.w	r1, r3, r2
   18034:	d1f3      	bne.n	1801e <_svfprintf_r+0x856>
   18036:	ab5a      	add	r3, sp, #360	; 0x168
   18038:	f8cd 9018 	str.w	r9, [sp, #24]
   1803c:	eba3 0b05 	sub.w	fp, r3, r5
   18040:	e66f      	b.n	17d22 <_svfprintf_r+0x55a>
   18042:	f003 0107 	and.w	r1, r3, #7
   18046:	08db      	lsrs	r3, r3, #3
   18048:	4628      	mov	r0, r5
   1804a:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1804e:	3130      	adds	r1, #48	; 0x30
   18050:	08d2      	lsrs	r2, r2, #3
   18052:	f805 1d01 	strb.w	r1, [r5, #-1]!
   18056:	ea53 0402 	orrs.w	r4, r3, r2
   1805a:	d1f2      	bne.n	18042 <_svfprintf_r+0x87a>
   1805c:	2930      	cmp	r1, #48	; 0x30
   1805e:	d0ea      	beq.n	18036 <_svfprintf_r+0x86e>
   18060:	f019 0f01 	tst.w	r9, #1
   18064:	d0e7      	beq.n	18036 <_svfprintf_r+0x86e>
   18066:	2330      	movs	r3, #48	; 0x30
   18068:	3802      	subs	r0, #2
   1806a:	f8cd 9018 	str.w	r9, [sp, #24]
   1806e:	f805 3c01 	strb.w	r3, [r5, #-1]
   18072:	ab5a      	add	r3, sp, #360	; 0x168
   18074:	4605      	mov	r5, r0
   18076:	eba3 0b00 	sub.w	fp, r3, r0
   1807a:	e652      	b.n	17d22 <_svfprintf_r+0x55a>
   1807c:	9207      	str	r2, [sp, #28]
   1807e:	3301      	adds	r3, #1
   18080:	9a07      	ldr	r2, [sp, #28]
   18082:	442c      	add	r4, r5
   18084:	2b07      	cmp	r3, #7
   18086:	6016      	str	r6, [r2, #0]
   18088:	6055      	str	r5, [r2, #4]
   1808a:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   1808e:	f77f ad09 	ble.w	17aa4 <_svfprintf_r+0x2dc>
   18092:	aa2e      	add	r2, sp, #184	; 0xb8
   18094:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18098:	f002 f8ba 	bl	1a210 <__ssprint_r>
   1809c:	2800      	cmp	r0, #0
   1809e:	f47f ac91 	bne.w	179c4 <_svfprintf_r+0x1fc>
   180a2:	ab31      	add	r3, sp, #196	; 0xc4
   180a4:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   180a6:	9307      	str	r3, [sp, #28]
   180a8:	e4ff      	b.n	17aaa <_svfprintf_r+0x2e2>
   180aa:	bf00      	nop
   180ac:	00031304 	.word	0x00031304
   180b0:	00031308 	.word	0x00031308
   180b4:	9b07      	ldr	r3, [sp, #28]
   180b6:	f103 0708 	add.w	r7, r3, #8
   180ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   180bc:	2b01      	cmp	r3, #1
   180be:	f340 816d 	ble.w	1839c <_svfprintf_r+0xbd4>
   180c2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   180c4:	3601      	adds	r6, #1
   180c6:	9907      	ldr	r1, [sp, #28]
   180c8:	2201      	movs	r2, #1
   180ca:	3301      	adds	r3, #1
   180cc:	9630      	str	r6, [sp, #192]	; 0xc0
   180ce:	600d      	str	r5, [r1, #0]
   180d0:	2b07      	cmp	r3, #7
   180d2:	932f      	str	r3, [sp, #188]	; 0xbc
   180d4:	604a      	str	r2, [r1, #4]
   180d6:	f300 81ec 	bgt.w	184b2 <_svfprintf_r+0xcea>
   180da:	f103 0801 	add.w	r8, r3, #1
   180de:	9a18      	ldr	r2, [sp, #96]	; 0x60
   180e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   180e2:	1994      	adds	r4, r2, r6
   180e4:	f1b8 0f07 	cmp.w	r8, #7
   180e8:	e9c7 3200 	strd	r3, r2, [r7]
   180ec:	e9cd 842f 	strd	r8, r4, [sp, #188]	; 0xbc
   180f0:	f300 81eb 	bgt.w	184ca <_svfprintf_r+0xd02>
   180f4:	3708      	adds	r7, #8
   180f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   180f8:	2200      	movs	r2, #0
   180fa:	f103 39ff 	add.w	r9, r3, #4294967295
   180fe:	2300      	movs	r3, #0
   18100:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   18104:	f7e8 fcf4 	bl	af0 <__aeabi_dcmpeq>
   18108:	2800      	cmp	r0, #0
   1810a:	f040 8168 	bne.w	183de <_svfprintf_r+0xc16>
   1810e:	f108 0801 	add.w	r8, r8, #1
   18112:	3501      	adds	r5, #1
   18114:	444c      	add	r4, r9
   18116:	f8c7 9004 	str.w	r9, [r7, #4]
   1811a:	f1b8 0f07 	cmp.w	r8, #7
   1811e:	603d      	str	r5, [r7, #0]
   18120:	e9cd 842f 	strd	r8, r4, [sp, #188]	; 0xbc
   18124:	f300 814d 	bgt.w	183c2 <_svfprintf_r+0xbfa>
   18128:	3708      	adds	r7, #8
   1812a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1812c:	f108 0301 	add.w	r3, r8, #1
   18130:	4414      	add	r4, r2
   18132:	607a      	str	r2, [r7, #4]
   18134:	2b07      	cmp	r3, #7
   18136:	aa2a      	add	r2, sp, #168	; 0xa8
   18138:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   1813c:	603a      	str	r2, [r7, #0]
   1813e:	dca8      	bgt.n	18092 <_svfprintf_r+0x8ca>
   18140:	f107 0308 	add.w	r3, r7, #8
   18144:	9307      	str	r3, [sp, #28]
   18146:	e4b0      	b.n	17aaa <_svfprintf_r+0x2e2>
   18148:	2e10      	cmp	r6, #16
   1814a:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 183f8 <_svfprintf_r+0xc30>
   1814e:	e9dd 212f 	ldrd	r2, r1, [sp, #188]	; 0xbc
   18152:	dd29      	ble.n	181a8 <_svfprintf_r+0x9e0>
   18154:	4643      	mov	r3, r8
   18156:	941f      	str	r4, [sp, #124]	; 0x7c
   18158:	46b8      	mov	r8, r7
   1815a:	f04f 0910 	mov.w	r9, #16
   1815e:	462f      	mov	r7, r5
   18160:	9c07      	ldr	r4, [sp, #28]
   18162:	461d      	mov	r5, r3
   18164:	e002      	b.n	1816c <_svfprintf_r+0x9a4>
   18166:	3e10      	subs	r6, #16
   18168:	2e10      	cmp	r6, #16
   1816a:	dd17      	ble.n	1819c <_svfprintf_r+0x9d4>
   1816c:	3201      	adds	r2, #1
   1816e:	3110      	adds	r1, #16
   18170:	2a07      	cmp	r2, #7
   18172:	e9c4 5900 	strd	r5, r9, [r4]
   18176:	e9cd 212f 	strd	r2, r1, [sp, #188]	; 0xbc
   1817a:	f104 0408 	add.w	r4, r4, #8
   1817e:	ddf2      	ble.n	18166 <_svfprintf_r+0x99e>
   18180:	aa2e      	add	r2, sp, #184	; 0xb8
   18182:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18184:	980a      	ldr	r0, [sp, #40]	; 0x28
   18186:	ac31      	add	r4, sp, #196	; 0xc4
   18188:	f002 f842 	bl	1a210 <__ssprint_r>
   1818c:	2800      	cmp	r0, #0
   1818e:	f47f ac19 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18192:	3e10      	subs	r6, #16
   18194:	2e10      	cmp	r6, #16
   18196:	e9dd 212f 	ldrd	r2, r1, [sp, #188]	; 0xbc
   1819a:	dce7      	bgt.n	1816c <_svfprintf_r+0x9a4>
   1819c:	462b      	mov	r3, r5
   1819e:	9407      	str	r4, [sp, #28]
   181a0:	463d      	mov	r5, r7
   181a2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   181a4:	4647      	mov	r7, r8
   181a6:	4698      	mov	r8, r3
   181a8:	3201      	adds	r2, #1
   181aa:	9b07      	ldr	r3, [sp, #28]
   181ac:	4431      	add	r1, r6
   181ae:	2a07      	cmp	r2, #7
   181b0:	f8c3 8000 	str.w	r8, [r3]
   181b4:	605e      	str	r6, [r3, #4]
   181b6:	9130      	str	r1, [sp, #192]	; 0xc0
   181b8:	922f      	str	r2, [sp, #188]	; 0xbc
   181ba:	f300 839b 	bgt.w	188f4 <_svfprintf_r+0x112c>
   181be:	3308      	adds	r3, #8
   181c0:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   181c4:	9307      	str	r3, [sp, #28]
   181c6:	e430      	b.n	17a2a <_svfprintf_r+0x262>
   181c8:	aa2e      	add	r2, sp, #184	; 0xb8
   181ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   181ce:	f002 f81f 	bl	1a210 <__ssprint_r>
   181d2:	2800      	cmp	r0, #0
   181d4:	f47f abf6 	bne.w	179c4 <_svfprintf_r+0x1fc>
   181d8:	ab31      	add	r3, sp, #196	; 0xc4
   181da:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   181dc:	9307      	str	r3, [sp, #28]
   181de:	e436      	b.n	17a4e <_svfprintf_r+0x286>
   181e0:	aa2e      	add	r2, sp, #184	; 0xb8
   181e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   181e6:	f002 f813 	bl	1a210 <__ssprint_r>
   181ea:	2800      	cmp	r0, #0
   181ec:	f47f abea 	bne.w	179c4 <_svfprintf_r+0x1fc>
   181f0:	ab31      	add	r3, sp, #196	; 0xc4
   181f2:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   181f4:	9307      	str	r3, [sp, #28]
   181f6:	e43c      	b.n	17a72 <_svfprintf_r+0x2aa>
   181f8:	2d10      	cmp	r5, #16
   181fa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   181fc:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 183f8 <_svfprintf_r+0xc30>
   18200:	dd20      	ble.n	18244 <_svfprintf_r+0xa7c>
   18202:	2710      	movs	r7, #16
   18204:	9e07      	ldr	r6, [sp, #28]
   18206:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
   1820a:	e002      	b.n	18212 <_svfprintf_r+0xa4a>
   1820c:	3d10      	subs	r5, #16
   1820e:	2d10      	cmp	r5, #16
   18210:	dd17      	ble.n	18242 <_svfprintf_r+0xa7a>
   18212:	3301      	adds	r3, #1
   18214:	3410      	adds	r4, #16
   18216:	2b07      	cmp	r3, #7
   18218:	e9c6 8700 	strd	r8, r7, [r6]
   1821c:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   18220:	f106 0608 	add.w	r6, r6, #8
   18224:	ddf2      	ble.n	1820c <_svfprintf_r+0xa44>
   18226:	aa2e      	add	r2, sp, #184	; 0xb8
   18228:	4651      	mov	r1, sl
   1822a:	4648      	mov	r0, r9
   1822c:	ae31      	add	r6, sp, #196	; 0xc4
   1822e:	f001 ffef 	bl	1a210 <__ssprint_r>
   18232:	2800      	cmp	r0, #0
   18234:	f47f abc6 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18238:	3d10      	subs	r5, #16
   1823a:	2d10      	cmp	r5, #16
   1823c:	e9dd 342f 	ldrd	r3, r4, [sp, #188]	; 0xbc
   18240:	dce7      	bgt.n	18212 <_svfprintf_r+0xa4a>
   18242:	9607      	str	r6, [sp, #28]
   18244:	3301      	adds	r3, #1
   18246:	9a07      	ldr	r2, [sp, #28]
   18248:	442c      	add	r4, r5
   1824a:	2b07      	cmp	r3, #7
   1824c:	e9c2 8500 	strd	r8, r5, [r2]
   18250:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   18254:	f77f ac32 	ble.w	17abc <_svfprintf_r+0x2f4>
   18258:	aa2e      	add	r2, sp, #184	; 0xb8
   1825a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1825e:	f001 ffd7 	bl	1a210 <__ssprint_r>
   18262:	2800      	cmp	r0, #0
   18264:	f47f abae 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18268:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   1826a:	e427      	b.n	17abc <_svfprintf_r+0x2f4>
   1826c:	4607      	mov	r7, r0
   1826e:	ad5a      	add	r5, sp, #360	; 0x168
   18270:	4683      	mov	fp, r0
   18272:	e556      	b.n	17d22 <_svfprintf_r+0x55a>
   18274:	f8dd 9018 	ldr.w	r9, [sp, #24]
   18278:	2b0a      	cmp	r3, #10
   1827a:	f172 0100 	sbcs.w	r1, r2, #0
   1827e:	f080 8397 	bcs.w	189b0 <_svfprintf_r+0x11e8>
   18282:	3330      	adds	r3, #48	; 0x30
   18284:	f04f 0b01 	mov.w	fp, #1
   18288:	f20d 1567 	addw	r5, sp, #359	; 0x167
   1828c:	f8cd 9018 	str.w	r9, [sp, #24]
   18290:	f88d 3167 	strb.w	r3, [sp, #359]	; 0x167
   18294:	e545      	b.n	17d22 <_svfprintf_r+0x55a>
   18296:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   18298:	2a00      	cmp	r2, #0
   1829a:	f340 8339 	ble.w	18910 <_svfprintf_r+0x1148>
   1829e:	e9dd 7312 	ldrd	r7, r3, [sp, #72]	; 0x48
   182a2:	429f      	cmp	r7, r3
   182a4:	eb05 0a03 	add.w	sl, r5, r3
   182a8:	bfa8      	it	ge
   182aa:	461f      	movge	r7, r3
   182ac:	2f00      	cmp	r7, #0
   182ae:	dd0d      	ble.n	182cc <_svfprintf_r+0xb04>
   182b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   182b2:	443e      	add	r6, r7
   182b4:	9a07      	ldr	r2, [sp, #28]
   182b6:	3301      	adds	r3, #1
   182b8:	9630      	str	r6, [sp, #192]	; 0xc0
   182ba:	6015      	str	r5, [r2, #0]
   182bc:	2b07      	cmp	r3, #7
   182be:	6057      	str	r7, [r2, #4]
   182c0:	932f      	str	r3, [sp, #188]	; 0xbc
   182c2:	f300 858c 	bgt.w	18dde <_svfprintf_r+0x1616>
   182c6:	4613      	mov	r3, r2
   182c8:	3308      	adds	r3, #8
   182ca:	9307      	str	r3, [sp, #28]
   182cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
   182ce:	2f00      	cmp	r7, #0
   182d0:	bfa8      	it	ge
   182d2:	1be4      	subge	r4, r4, r7
   182d4:	2c00      	cmp	r4, #0
   182d6:	f300 823a 	bgt.w	1874e <_svfprintf_r+0xf86>
   182da:	9b06      	ldr	r3, [sp, #24]
   182dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   182e0:	0558      	lsls	r0, r3, #21
   182e2:	44a9      	add	r9, r5
   182e4:	f100 8269 	bmi.w	187ba <_svfprintf_r+0xff2>
   182e8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   182ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   182ec:	429d      	cmp	r5, r3
   182ee:	db03      	blt.n	182f8 <_svfprintf_r+0xb30>
   182f0:	9a06      	ldr	r2, [sp, #24]
   182f2:	07d1      	lsls	r1, r2, #31
   182f4:	f140 84e0 	bpl.w	18cb8 <_svfprintf_r+0x14f0>
   182f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   182fa:	9a07      	ldr	r2, [sp, #28]
   182fc:	9919      	ldr	r1, [sp, #100]	; 0x64
   182fe:	199c      	adds	r4, r3, r6
   18300:	e9c2 1300 	strd	r1, r3, [r2]
   18304:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18306:	9430      	str	r4, [sp, #192]	; 0xc0
   18308:	3301      	adds	r3, #1
   1830a:	2b07      	cmp	r3, #7
   1830c:	932f      	str	r3, [sp, #188]	; 0xbc
   1830e:	f300 85a0 	bgt.w	18e52 <_svfprintf_r+0x168a>
   18312:	4613      	mov	r3, r2
   18314:	3308      	adds	r3, #8
   18316:	9307      	str	r3, [sp, #28]
   18318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1831a:	ebaa 0709 	sub.w	r7, sl, r9
   1831e:	1b5d      	subs	r5, r3, r5
   18320:	42af      	cmp	r7, r5
   18322:	bfa8      	it	ge
   18324:	462f      	movge	r7, r5
   18326:	2f00      	cmp	r7, #0
   18328:	dd0e      	ble.n	18348 <_svfprintf_r+0xb80>
   1832a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1832c:	443c      	add	r4, r7
   1832e:	9a07      	ldr	r2, [sp, #28]
   18330:	3301      	adds	r3, #1
   18332:	9430      	str	r4, [sp, #192]	; 0xc0
   18334:	f8c2 9000 	str.w	r9, [r2]
   18338:	2b07      	cmp	r3, #7
   1833a:	6057      	str	r7, [r2, #4]
   1833c:	932f      	str	r3, [sp, #188]	; 0xbc
   1833e:	f300 85b1 	bgt.w	18ea4 <_svfprintf_r+0x16dc>
   18342:	4613      	mov	r3, r2
   18344:	3308      	adds	r3, #8
   18346:	9307      	str	r3, [sp, #28]
   18348:	2f00      	cmp	r7, #0
   1834a:	bfa8      	it	ge
   1834c:	1bed      	subge	r5, r5, r7
   1834e:	2d00      	cmp	r5, #0
   18350:	f77f abab 	ble.w	17aaa <_svfprintf_r+0x2e2>
   18354:	2d10      	cmp	r5, #16
   18356:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18358:	4e28      	ldr	r6, [pc, #160]	; (183fc <_svfprintf_r+0xc34>)
   1835a:	f77f ae90 	ble.w	1807e <_svfprintf_r+0x8b6>
   1835e:	2710      	movs	r7, #16
   18360:	9a07      	ldr	r2, [sp, #28]
   18362:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   18366:	e003      	b.n	18370 <_svfprintf_r+0xba8>
   18368:	3d10      	subs	r5, #16
   1836a:	2d10      	cmp	r5, #16
   1836c:	f77f ae86 	ble.w	1807c <_svfprintf_r+0x8b4>
   18370:	3301      	adds	r3, #1
   18372:	3410      	adds	r4, #16
   18374:	2b07      	cmp	r3, #7
   18376:	e9c2 6700 	strd	r6, r7, [r2]
   1837a:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   1837e:	f102 0208 	add.w	r2, r2, #8
   18382:	ddf1      	ble.n	18368 <_svfprintf_r+0xba0>
   18384:	aa2e      	add	r2, sp, #184	; 0xb8
   18386:	4649      	mov	r1, r9
   18388:	4640      	mov	r0, r8
   1838a:	f001 ff41 	bl	1a210 <__ssprint_r>
   1838e:	2800      	cmp	r0, #0
   18390:	f47f ab18 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18394:	aa31      	add	r2, sp, #196	; 0xc4
   18396:	e9dd 342f 	ldrd	r3, r4, [sp, #188]	; 0xbc
   1839a:	e7e5      	b.n	18368 <_svfprintf_r+0xba0>
   1839c:	9b06      	ldr	r3, [sp, #24]
   1839e:	07da      	lsls	r2, r3, #31
   183a0:	f53f ae8f 	bmi.w	180c2 <_svfprintf_r+0x8fa>
   183a4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   183a6:	1c74      	adds	r4, r6, #1
   183a8:	9a07      	ldr	r2, [sp, #28]
   183aa:	f103 0801 	add.w	r8, r3, #1
   183ae:	2301      	movs	r3, #1
   183b0:	6015      	str	r5, [r2, #0]
   183b2:	f1b8 0f07 	cmp.w	r8, #7
   183b6:	9430      	str	r4, [sp, #192]	; 0xc0
   183b8:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
   183bc:	6053      	str	r3, [r2, #4]
   183be:	f77f aeb4 	ble.w	1812a <_svfprintf_r+0x962>
   183c2:	aa2e      	add	r2, sp, #184	; 0xb8
   183c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   183c8:	f001 ff22 	bl	1a210 <__ssprint_r>
   183cc:	2800      	cmp	r0, #0
   183ce:	f47f aaf9 	bne.w	179c4 <_svfprintf_r+0x1fc>
   183d2:	af31      	add	r7, sp, #196	; 0xc4
   183d4:	e9dd 842f 	ldrd	r8, r4, [sp, #188]	; 0xbc
   183d8:	e6a7      	b.n	1812a <_svfprintf_r+0x962>
   183da:	ad5a      	add	r5, sp, #360	; 0x168
   183dc:	e4a1      	b.n	17d22 <_svfprintf_r+0x55a>
   183de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   183e0:	2b01      	cmp	r3, #1
   183e2:	f77f aea2 	ble.w	1812a <_svfprintf_r+0x962>
   183e6:	2b11      	cmp	r3, #17
   183e8:	4e04      	ldr	r6, [pc, #16]	; (183fc <_svfprintf_r+0xc34>)
   183ea:	f340 8370 	ble.w	18ace <_svfprintf_r+0x1306>
   183ee:	4643      	mov	r3, r8
   183f0:	2510      	movs	r5, #16
   183f2:	e9dd 8a0a 	ldrd	r8, sl, [sp, #40]	; 0x28
   183f6:	e009      	b.n	1840c <_svfprintf_r+0xc44>
   183f8:	00031318 	.word	0x00031318
   183fc:	00031308 	.word	0x00031308
   18400:	f1a9 0910 	sub.w	r9, r9, #16
   18404:	f1b9 0f10 	cmp.w	r9, #16
   18408:	f340 8360 	ble.w	18acc <_svfprintf_r+0x1304>
   1840c:	3301      	adds	r3, #1
   1840e:	3410      	adds	r4, #16
   18410:	2b07      	cmp	r3, #7
   18412:	e9c7 6500 	strd	r6, r5, [r7]
   18416:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   1841a:	f107 0708 	add.w	r7, r7, #8
   1841e:	ddef      	ble.n	18400 <_svfprintf_r+0xc38>
   18420:	aa2e      	add	r2, sp, #184	; 0xb8
   18422:	4651      	mov	r1, sl
   18424:	4640      	mov	r0, r8
   18426:	f001 fef3 	bl	1a210 <__ssprint_r>
   1842a:	2800      	cmp	r0, #0
   1842c:	f47f aaca 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18430:	af31      	add	r7, sp, #196	; 0xc4
   18432:	e9dd 342f 	ldrd	r3, r4, [sp, #188]	; 0xbc
   18436:	e7e3      	b.n	18400 <_svfprintf_r+0xc38>
   18438:	aa2e      	add	r2, sp, #184	; 0xb8
   1843a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1843e:	f001 fee7 	bl	1a210 <__ssprint_r>
   18442:	2800      	cmp	r0, #0
   18444:	f47f aabe 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18448:	ab31      	add	r3, sp, #196	; 0xc4
   1844a:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   1844c:	9307      	str	r3, [sp, #28]
   1844e:	f7ff bb18 	b.w	17a82 <_svfprintf_r+0x2ba>
   18452:	9910      	ldr	r1, [sp, #64]	; 0x40
   18454:	f851 3b04 	ldr.w	r3, [r1], #4
   18458:	9110      	str	r1, [sp, #64]	; 0x40
   1845a:	f019 0110 	ands.w	r1, r9, #16
   1845e:	d10b      	bne.n	18478 <_svfprintf_r+0xcb0>
   18460:	f019 0040 	ands.w	r0, r9, #64	; 0x40
   18464:	d003      	beq.n	1846e <_svfprintf_r+0xca6>
   18466:	460a      	mov	r2, r1
   18468:	b29b      	uxth	r3, r3
   1846a:	2101      	movs	r1, #1
   1846c:	e439      	b.n	17ce2 <_svfprintf_r+0x51a>
   1846e:	f419 7200 	ands.w	r2, r9, #512	; 0x200
   18472:	d001      	beq.n	18478 <_svfprintf_r+0xcb0>
   18474:	b2db      	uxtb	r3, r3
   18476:	4602      	mov	r2, r0
   18478:	2101      	movs	r1, #1
   1847a:	e432      	b.n	17ce2 <_svfprintf_r+0x51a>
   1847c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1847e:	f851 3b04 	ldr.w	r3, [r1], #4
   18482:	9110      	str	r1, [sp, #64]	; 0x40
   18484:	9906      	ldr	r1, [sp, #24]
   18486:	f011 0110 	ands.w	r1, r1, #16
   1848a:	f47f ac6c 	bne.w	17d66 <_svfprintf_r+0x59e>
   1848e:	9a06      	ldr	r2, [sp, #24]
   18490:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   18494:	f000 8330 	beq.w	18af8 <_svfprintf_r+0x1330>
   18498:	b29b      	uxth	r3, r3
   1849a:	460a      	mov	r2, r1
   1849c:	e463      	b.n	17d66 <_svfprintf_r+0x59e>
   1849e:	425b      	negs	r3, r3
   184a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
   184a4:	f04f 002d 	mov.w	r0, #45	; 0x2d
   184a8:	f04f 0101 	mov.w	r1, #1
   184ac:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   184b0:	e418      	b.n	17ce4 <_svfprintf_r+0x51c>
   184b2:	aa2e      	add	r2, sp, #184	; 0xb8
   184b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   184b8:	f001 feaa 	bl	1a210 <__ssprint_r>
   184bc:	2800      	cmp	r0, #0
   184be:	f47f aa81 	bne.w	179c4 <_svfprintf_r+0x1fc>
   184c2:	af31      	add	r7, sp, #196	; 0xc4
   184c4:	e9dd 362f 	ldrd	r3, r6, [sp, #188]	; 0xbc
   184c8:	e607      	b.n	180da <_svfprintf_r+0x912>
   184ca:	aa2e      	add	r2, sp, #184	; 0xb8
   184cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   184d0:	f001 fe9e 	bl	1a210 <__ssprint_r>
   184d4:	2800      	cmp	r0, #0
   184d6:	f47f aa75 	bne.w	179c4 <_svfprintf_r+0x1fc>
   184da:	af31      	add	r7, sp, #196	; 0xc4
   184dc:	e9dd 842f 	ldrd	r8, r4, [sp, #188]	; 0xbc
   184e0:	e609      	b.n	180f6 <_svfprintf_r+0x92e>
   184e2:	782c      	ldrb	r4, [r5, #0]
   184e4:	9310      	str	r3, [sp, #64]	; 0x40
   184e6:	f7ff b9ce 	b.w	17886 <_svfprintf_r+0xbe>
   184ea:	9a06      	ldr	r2, [sp, #24]
   184ec:	0590      	lsls	r0, r2, #22
   184ee:	f100 83f2 	bmi.w	18cd6 <_svfprintf_r+0x150e>
   184f2:	17da      	asrs	r2, r3, #31
   184f4:	4611      	mov	r1, r2
   184f6:	f7ff bb93 	b.w	17c20 <_svfprintf_r+0x458>
   184fa:	9b06      	ldr	r3, [sp, #24]
   184fc:	06d8      	lsls	r0, r3, #27
   184fe:	f100 82c2 	bmi.w	18a86 <_svfprintf_r+0x12be>
   18502:	9b06      	ldr	r3, [sp, #24]
   18504:	0659      	lsls	r1, r3, #25
   18506:	f100 83e0 	bmi.w	18cca <_svfprintf_r+0x1502>
   1850a:	9b06      	ldr	r3, [sp, #24]
   1850c:	059a      	lsls	r2, r3, #22
   1850e:	f140 82ba 	bpl.w	18a86 <_svfprintf_r+0x12be>
   18512:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18516:	681b      	ldr	r3, [r3, #0]
   18518:	701a      	strb	r2, [r3, #0]
   1851a:	f7ff bbc3 	b.w	17ca4 <_svfprintf_r+0x4dc>
   1851e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   18522:	4602      	mov	r2, r0
   18524:	460b      	mov	r3, r1
   18526:	f7e8 fc69 	bl	dfc <__aeabi_dcmpun>
   1852a:	2800      	cmp	r0, #0
   1852c:	f040 8581 	bne.w	19032 <_svfprintf_r+0x186a>
   18530:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18532:	f023 0820 	bic.w	r8, r3, #32
   18536:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
   1853a:	f040 82ed 	bne.w	18b18 <_svfprintf_r+0x1350>
   1853e:	2b61      	cmp	r3, #97	; 0x61
   18540:	f04f 0330 	mov.w	r3, #48	; 0x30
   18544:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
   18548:	bf0c      	ite	eq
   1854a:	2378      	moveq	r3, #120	; 0x78
   1854c:	2358      	movne	r3, #88	; 0x58
   1854e:	2f63      	cmp	r7, #99	; 0x63
   18550:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
   18554:	f300 83c5 	bgt.w	18ce2 <_svfprintf_r+0x151a>
   18558:	ad41      	add	r5, sp, #260	; 0x104
   1855a:	900f      	str	r0, [sp, #60]	; 0x3c
   1855c:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	; 0x58
   18560:	2a00      	cmp	r2, #0
   18562:	f280 84d1 	bge.w	18f08 <_svfprintf_r+0x1740>
   18566:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1856a:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
   1856e:	9324      	str	r3, [sp, #144]	; 0x90
   18570:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   18574:	9325      	str	r3, [sp, #148]	; 0x94
   18576:	aa28      	add	r2, sp, #160	; 0xa0
   18578:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
   1857c:	f7fe fab0 	bl	16ae0 <frexp>
   18580:	2200      	movs	r2, #0
   18582:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   18586:	f7e7 ffa3 	bl	4d0 <__aeabi_dmul>
   1858a:	4602      	mov	r2, r0
   1858c:	460b      	mov	r3, r1
   1858e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   18592:	2200      	movs	r2, #0
   18594:	2300      	movs	r3, #0
   18596:	f7e8 faab 	bl	af0 <__aeabi_dcmpeq>
   1859a:	b108      	cbz	r0, 185a0 <_svfprintf_r+0xdd8>
   1859c:	2301      	movs	r3, #1
   1859e:	9328      	str	r3, [sp, #160]	; 0xa0
   185a0:	4aaa      	ldr	r2, [pc, #680]	; (1884c <_svfprintf_r+0x1084>)
   185a2:	f107 38ff 	add.w	r8, r7, #4294967295
   185a6:	4baa      	ldr	r3, [pc, #680]	; (18850 <_svfprintf_r+0x1088>)
   185a8:	462f      	mov	r7, r5
   185aa:	9911      	ldr	r1, [sp, #68]	; 0x44
   185ac:	9513      	str	r5, [sp, #76]	; 0x4c
   185ae:	2961      	cmp	r1, #97	; 0x61
   185b0:	bf18      	it	ne
   185b2:	461a      	movne	r2, r3
   185b4:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   185b8:	9212      	str	r2, [sp, #72]	; 0x48
   185ba:	f8cd a020 	str.w	sl, [sp, #32]
   185be:	4692      	mov	sl, r2
   185c0:	e005      	b.n	185ce <_svfprintf_r+0xe06>
   185c2:	2200      	movs	r2, #0
   185c4:	2300      	movs	r3, #0
   185c6:	f7e8 fa93 	bl	af0 <__aeabi_dcmpeq>
   185ca:	b9f8      	cbnz	r0, 1860c <_svfprintf_r+0xe44>
   185cc:	46c8      	mov	r8, r9
   185ce:	2200      	movs	r2, #0
   185d0:	4ba0      	ldr	r3, [pc, #640]	; (18854 <_svfprintf_r+0x108c>)
   185d2:	4620      	mov	r0, r4
   185d4:	4629      	mov	r1, r5
   185d6:	f7e7 ff7b 	bl	4d0 <__aeabi_dmul>
   185da:	460d      	mov	r5, r1
   185dc:	4604      	mov	r4, r0
   185de:	f7e8 fc23 	bl	e28 <__aeabi_d2iz>
   185e2:	4606      	mov	r6, r0
   185e4:	f7e7 ff0a 	bl	3fc <__aeabi_i2d>
   185e8:	460b      	mov	r3, r1
   185ea:	4602      	mov	r2, r0
   185ec:	4629      	mov	r1, r5
   185ee:	4620      	mov	r0, r4
   185f0:	f7e7 fdb6 	bl	160 <__aeabi_dsub>
   185f4:	f81a 3006 	ldrb.w	r3, [sl, r6]
   185f8:	f1b8 3fff 	cmp.w	r8, #4294967295
   185fc:	46bb      	mov	fp, r7
   185fe:	f108 39ff 	add.w	r9, r8, #4294967295
   18602:	4604      	mov	r4, r0
   18604:	460d      	mov	r5, r1
   18606:	f807 3b01 	strb.w	r3, [r7], #1
   1860a:	d1da      	bne.n	185c2 <_svfprintf_r+0xdfa>
   1860c:	4620      	mov	r0, r4
   1860e:	4629      	mov	r1, r5
   18610:	2200      	movs	r2, #0
   18612:	4b91      	ldr	r3, [pc, #580]	; (18858 <_svfprintf_r+0x1090>)
   18614:	f8dd a020 	ldr.w	sl, [sp, #32]
   18618:	465c      	mov	r4, fp
   1861a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1861c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   18620:	f7e8 fa8e 	bl	b40 <__aeabi_dcmpgt>
   18624:	2800      	cmp	r0, #0
   18626:	f040 8517 	bne.w	19058 <_svfprintf_r+0x1890>
   1862a:	2200      	movs	r2, #0
   1862c:	4b8a      	ldr	r3, [pc, #552]	; (18858 <_svfprintf_r+0x1090>)
   1862e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   18632:	f7e8 fa5d 	bl	af0 <__aeabi_dcmpeq>
   18636:	b110      	cbz	r0, 1863e <_svfprintf_r+0xe76>
   18638:	07f2      	lsls	r2, r6, #31
   1863a:	f100 850d 	bmi.w	19058 <_svfprintf_r+0x1890>
   1863e:	f1b8 0f00 	cmp.w	r8, #0
   18642:	f2c0 8521 	blt.w	19088 <_svfprintf_r+0x18c0>
   18646:	f108 0301 	add.w	r3, r8, #1
   1864a:	2230      	movs	r2, #48	; 0x30
   1864c:	443b      	add	r3, r7
   1864e:	f807 2b01 	strb.w	r2, [r7], #1
   18652:	42bb      	cmp	r3, r7
   18654:	d1fb      	bne.n	1864e <_svfprintf_r+0xe86>
   18656:	1b5b      	subs	r3, r3, r5
   18658:	9313      	str	r3, [sp, #76]	; 0x4c
   1865a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1865c:	9312      	str	r3, [sp, #72]	; 0x48
   1865e:	9b06      	ldr	r3, [sp, #24]
   18660:	2101      	movs	r1, #1
   18662:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18664:	f043 0302 	orr.w	r3, r3, #2
   18668:	320f      	adds	r2, #15
   1866a:	9306      	str	r3, [sp, #24]
   1866c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1866e:	b2d2      	uxtb	r2, r2
   18670:	3b01      	subs	r3, #1
   18672:	9328      	str	r3, [sp, #160]	; 0xa0
   18674:	e2ab      	b.n	18bce <_svfprintf_r+0x1406>
   18676:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   18678:	782c      	ldrb	r4, [r5, #0]
   1867a:	781b      	ldrb	r3, [r3, #0]
   1867c:	2b00      	cmp	r3, #0
   1867e:	f43f a902 	beq.w	17886 <_svfprintf_r+0xbe>
   18682:	9b06      	ldr	r3, [sp, #24]
   18684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   18688:	9306      	str	r3, [sp, #24]
   1868a:	f7ff b8fc 	b.w	17886 <_svfprintf_r+0xbe>
   1868e:	f8dd 9018 	ldr.w	r9, [sp, #24]
   18692:	9411      	str	r4, [sp, #68]	; 0x44
   18694:	950c      	str	r5, [sp, #48]	; 0x30
   18696:	f7ff bb70 	b.w	17d7a <_svfprintf_r+0x5b2>
   1869a:	9411      	str	r4, [sp, #68]	; 0x44
   1869c:	950c      	str	r5, [sp, #48]	; 0x30
   1869e:	f7ff bb54 	b.w	17d4a <_svfprintf_r+0x582>
   186a2:	4b6b      	ldr	r3, [pc, #428]	; (18850 <_svfprintf_r+0x1088>)
   186a4:	9411      	str	r4, [sp, #68]	; 0x44
   186a6:	950c      	str	r5, [sp, #48]	; 0x30
   186a8:	931a      	str	r3, [sp, #104]	; 0x68
   186aa:	9b06      	ldr	r3, [sp, #24]
   186ac:	f013 0220 	ands.w	r2, r3, #32
   186b0:	f000 80d6 	beq.w	18860 <_svfprintf_r+0x1098>
   186b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   186b6:	3307      	adds	r3, #7
   186b8:	f023 0307 	bic.w	r3, r3, #7
   186bc:	4619      	mov	r1, r3
   186be:	685a      	ldr	r2, [r3, #4]
   186c0:	f851 3b08 	ldr.w	r3, [r1], #8
   186c4:	9110      	str	r1, [sp, #64]	; 0x40
   186c6:	ea53 0102 	orrs.w	r1, r3, r2
   186ca:	d00b      	beq.n	186e4 <_svfprintf_r+0xf1c>
   186cc:	9906      	ldr	r1, [sp, #24]
   186ce:	07cc      	lsls	r4, r1, #31
   186d0:	d508      	bpl.n	186e4 <_svfprintf_r+0xf1c>
   186d2:	f041 0102 	orr.w	r1, r1, #2
   186d6:	9106      	str	r1, [sp, #24]
   186d8:	9911      	ldr	r1, [sp, #68]	; 0x44
   186da:	f88d 109d 	strb.w	r1, [sp, #157]	; 0x9d
   186de:	2130      	movs	r1, #48	; 0x30
   186e0:	f88d 109c 	strb.w	r1, [sp, #156]	; 0x9c
   186e4:	9906      	ldr	r1, [sp, #24]
   186e6:	f421 6980 	bic.w	r9, r1, #1024	; 0x400
   186ea:	2102      	movs	r1, #2
   186ec:	f7ff baf9 	b.w	17ce2 <_svfprintf_r+0x51a>
   186f0:	4b56      	ldr	r3, [pc, #344]	; (1884c <_svfprintf_r+0x1084>)
   186f2:	9411      	str	r4, [sp, #68]	; 0x44
   186f4:	950c      	str	r5, [sp, #48]	; 0x30
   186f6:	931a      	str	r3, [sp, #104]	; 0x68
   186f8:	e7d7      	b.n	186aa <_svfprintf_r+0xee2>
   186fa:	aa2e      	add	r2, sp, #184	; 0xb8
   186fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18700:	f001 fd86 	bl	1a210 <__ssprint_r>
   18704:	2800      	cmp	r0, #0
   18706:	f47f a95d 	bne.w	179c4 <_svfprintf_r+0x1fc>
   1870a:	ab31      	add	r3, sp, #196	; 0xc4
   1870c:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   1870e:	9307      	str	r3, [sp, #28]
   18710:	f7ff bbd0 	b.w	17eb4 <_svfprintf_r+0x6ec>
   18714:	f043 0320 	orr.w	r3, r3, #32
   18718:	786c      	ldrb	r4, [r5, #1]
   1871a:	3501      	adds	r5, #1
   1871c:	9306      	str	r3, [sp, #24]
   1871e:	f7ff b8b2 	b.w	17886 <_svfprintf_r+0xbe>
   18722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18726:	786c      	ldrb	r4, [r5, #1]
   18728:	3501      	adds	r5, #1
   1872a:	9306      	str	r3, [sp, #24]
   1872c:	f7ff b8ab 	b.w	17886 <_svfprintf_r+0xbe>
   18730:	2140      	movs	r1, #64	; 0x40
   18732:	980a      	ldr	r0, [sp, #40]	; 0x28
   18734:	f7fe fa80 	bl	16c38 <_malloc_r>
   18738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1873a:	6018      	str	r0, [r3, #0]
   1873c:	6118      	str	r0, [r3, #16]
   1873e:	2800      	cmp	r0, #0
   18740:	f000 8433 	beq.w	18faa <_svfprintf_r+0x17e2>
   18744:	2340      	movs	r3, #64	; 0x40
   18746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18748:	6153      	str	r3, [r2, #20]
   1874a:	f7ff b854 	b.w	177f6 <_svfprintf_r+0x2e>
   1874e:	2c10      	cmp	r4, #16
   18750:	4632      	mov	r2, r6
   18752:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18754:	4e41      	ldr	r6, [pc, #260]	; (1885c <_svfprintf_r+0x1094>)
   18756:	f340 8293 	ble.w	18c80 <_svfprintf_r+0x14b8>
   1875a:	2710      	movs	r7, #16
   1875c:	9907      	ldr	r1, [sp, #28]
   1875e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   18762:	e003      	b.n	1876c <_svfprintf_r+0xfa4>
   18764:	3c10      	subs	r4, #16
   18766:	2c10      	cmp	r4, #16
   18768:	f340 8289 	ble.w	18c7e <_svfprintf_r+0x14b6>
   1876c:	3301      	adds	r3, #1
   1876e:	3210      	adds	r2, #16
   18770:	2b07      	cmp	r3, #7
   18772:	e9c1 6700 	strd	r6, r7, [r1]
   18776:	e9cd 322f 	strd	r3, r2, [sp, #188]	; 0xbc
   1877a:	f101 0108 	add.w	r1, r1, #8
   1877e:	ddf1      	ble.n	18764 <_svfprintf_r+0xf9c>
   18780:	aa2e      	add	r2, sp, #184	; 0xb8
   18782:	4649      	mov	r1, r9
   18784:	4640      	mov	r0, r8
   18786:	f001 fd43 	bl	1a210 <__ssprint_r>
   1878a:	2800      	cmp	r0, #0
   1878c:	f47f a91a 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18790:	a931      	add	r1, sp, #196	; 0xc4
   18792:	e9dd 322f 	ldrd	r3, r2, [sp, #188]	; 0xbc
   18796:	e7e5      	b.n	18764 <_svfprintf_r+0xf9c>
   18798:	4628      	mov	r0, r5
   1879a:	9610      	str	r6, [sp, #64]	; 0x40
   1879c:	f7fe fef6 	bl	1758c <strlen>
   187a0:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   187a4:	4627      	mov	r7, r4
   187a6:	4683      	mov	fp, r0
   187a8:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   187ac:	940f      	str	r4, [sp, #60]	; 0x3c
   187ae:	9415      	str	r4, [sp, #84]	; 0x54
   187b0:	9308      	str	r3, [sp, #32]
   187b2:	9414      	str	r4, [sp, #80]	; 0x50
   187b4:	9412      	str	r4, [sp, #72]	; 0x48
   187b6:	f7ff b9e1 	b.w	17b7c <_svfprintf_r+0x3b4>
   187ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   187bc:	2b00      	cmp	r3, #0
   187be:	dc06      	bgt.n	187ce <_svfprintf_r+0x1006>
   187c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   187c2:	2b00      	cmp	r3, #0
   187c4:	dc03      	bgt.n	187ce <_svfprintf_r+0x1006>
   187c6:	45d1      	cmp	r9, sl
   187c8:	bf28      	it	cs
   187ca:	46d1      	movcs	r9, sl
   187cc:	e58c      	b.n	182e8 <_svfprintf_r+0xb20>
   187ce:	4630      	mov	r0, r6
   187d0:	4f22      	ldr	r7, [pc, #136]	; (1885c <_svfprintf_r+0x1094>)
   187d2:	f04f 0810 	mov.w	r8, #16
   187d6:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   187da:	9a07      	ldr	r2, [sp, #28]
   187dc:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   187de:	f1bb 0f00 	cmp.w	fp, #0
   187e2:	d04e      	beq.n	18882 <_svfprintf_r+0x10ba>
   187e4:	f10b 3bff 	add.w	fp, fp, #4294967295
   187e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   187ea:	991d      	ldr	r1, [sp, #116]	; 0x74
   187ec:	4418      	add	r0, r3
   187ee:	e9c2 1300 	strd	r1, r3, [r2]
   187f2:	992f      	ldr	r1, [sp, #188]	; 0xbc
   187f4:	9030      	str	r0, [sp, #192]	; 0xc0
   187f6:	3101      	adds	r1, #1
   187f8:	2907      	cmp	r1, #7
   187fa:	912f      	str	r1, [sp, #188]	; 0xbc
   187fc:	f300 80c0 	bgt.w	18980 <_svfprintf_r+0x11b8>
   18800:	3208      	adds	r2, #8
   18802:	ebaa 0509 	sub.w	r5, sl, r9
   18806:	7831      	ldrb	r1, [r6, #0]
   18808:	428d      	cmp	r5, r1
   1880a:	bfa8      	it	ge
   1880c:	460d      	movge	r5, r1
   1880e:	2d00      	cmp	r5, #0
   18810:	dd0b      	ble.n	1882a <_svfprintf_r+0x1062>
   18812:	992f      	ldr	r1, [sp, #188]	; 0xbc
   18814:	4428      	add	r0, r5
   18816:	3101      	adds	r1, #1
   18818:	9030      	str	r0, [sp, #192]	; 0xc0
   1881a:	2907      	cmp	r1, #7
   1881c:	912f      	str	r1, [sp, #188]	; 0xbc
   1881e:	e9c2 9500 	strd	r9, r5, [r2]
   18822:	f300 8124 	bgt.w	18a6e <_svfprintf_r+0x12a6>
   18826:	3208      	adds	r2, #8
   18828:	7831      	ldrb	r1, [r6, #0]
   1882a:	2d00      	cmp	r5, #0
   1882c:	bfac      	ite	ge
   1882e:	1b4c      	subge	r4, r1, r5
   18830:	460c      	movlt	r4, r1
   18832:	2c00      	cmp	r4, #0
   18834:	dc2a      	bgt.n	1888c <_svfprintf_r+0x10c4>
   18836:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18838:	4489      	add	r9, r1
   1883a:	2b00      	cmp	r3, #0
   1883c:	dccf      	bgt.n	187de <_svfprintf_r+0x1016>
   1883e:	f1bb 0f00 	cmp.w	fp, #0
   18842:	dccc      	bgt.n	187de <_svfprintf_r+0x1016>
   18844:	961e      	str	r6, [sp, #120]	; 0x78
   18846:	4606      	mov	r6, r0
   18848:	9207      	str	r2, [sp, #28]
   1884a:	e7bc      	b.n	187c6 <_svfprintf_r+0xffe>
   1884c:	000312d4 	.word	0x000312d4
   18850:	000312e8 	.word	0x000312e8
   18854:	40300000 	.word	0x40300000
   18858:	3fe00000 	.word	0x3fe00000
   1885c:	00031308 	.word	0x00031308
   18860:	9910      	ldr	r1, [sp, #64]	; 0x40
   18862:	f851 3b04 	ldr.w	r3, [r1], #4
   18866:	9110      	str	r1, [sp, #64]	; 0x40
   18868:	9906      	ldr	r1, [sp, #24]
   1886a:	f011 0110 	ands.w	r1, r1, #16
   1886e:	f47f af2a 	bne.w	186c6 <_svfprintf_r+0xefe>
   18872:	9a06      	ldr	r2, [sp, #24]
   18874:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   18878:	f000 8136 	beq.w	18ae8 <_svfprintf_r+0x1320>
   1887c:	b29b      	uxth	r3, r3
   1887e:	460a      	mov	r2, r1
   18880:	e721      	b.n	186c6 <_svfprintf_r+0xefe>
   18882:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18884:	3e01      	subs	r6, #1
   18886:	3b01      	subs	r3, #1
   18888:	9314      	str	r3, [sp, #80]	; 0x50
   1888a:	e7ad      	b.n	187e8 <_svfprintf_r+0x1020>
   1888c:	2c10      	cmp	r4, #16
   1888e:	992f      	ldr	r1, [sp, #188]	; 0xbc
   18890:	f340 842f 	ble.w	190f2 <_svfprintf_r+0x192a>
   18894:	4625      	mov	r5, r4
   18896:	9607      	str	r6, [sp, #28]
   18898:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1889a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1889c:	9711      	str	r7, [sp, #68]	; 0x44
   1889e:	e002      	b.n	188a6 <_svfprintf_r+0x10de>
   188a0:	3d10      	subs	r5, #16
   188a2:	2d10      	cmp	r5, #16
   188a4:	dd17      	ble.n	188d6 <_svfprintf_r+0x110e>
   188a6:	3101      	adds	r1, #1
   188a8:	3010      	adds	r0, #16
   188aa:	2907      	cmp	r1, #7
   188ac:	e9c2 7800 	strd	r7, r8, [r2]
   188b0:	e9cd 102f 	strd	r1, r0, [sp, #188]	; 0xbc
   188b4:	f102 0208 	add.w	r2, r2, #8
   188b8:	ddf2      	ble.n	188a0 <_svfprintf_r+0x10d8>
   188ba:	aa2e      	add	r2, sp, #184	; 0xb8
   188bc:	4621      	mov	r1, r4
   188be:	4630      	mov	r0, r6
   188c0:	f001 fca6 	bl	1a210 <__ssprint_r>
   188c4:	2800      	cmp	r0, #0
   188c6:	f47f a87d 	bne.w	179c4 <_svfprintf_r+0x1fc>
   188ca:	3d10      	subs	r5, #16
   188cc:	aa31      	add	r2, sp, #196	; 0xc4
   188ce:	2d10      	cmp	r5, #16
   188d0:	e9dd 102f 	ldrd	r1, r0, [sp, #188]	; 0xbc
   188d4:	dce7      	bgt.n	188a6 <_svfprintf_r+0x10de>
   188d6:	462c      	mov	r4, r5
   188d8:	9e07      	ldr	r6, [sp, #28]
   188da:	9d11      	ldr	r5, [sp, #68]	; 0x44
   188dc:	3101      	adds	r1, #1
   188de:	4420      	add	r0, r4
   188e0:	6015      	str	r5, [r2, #0]
   188e2:	2907      	cmp	r1, #7
   188e4:	6054      	str	r4, [r2, #4]
   188e6:	e9cd 102f 	strd	r1, r0, [sp, #188]	; 0xbc
   188ea:	f300 82a6 	bgt.w	18e3a <_svfprintf_r+0x1672>
   188ee:	3208      	adds	r2, #8
   188f0:	7831      	ldrb	r1, [r6, #0]
   188f2:	e7a0      	b.n	18836 <_svfprintf_r+0x106e>
   188f4:	aa2e      	add	r2, sp, #184	; 0xb8
   188f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   188fa:	f001 fc89 	bl	1a210 <__ssprint_r>
   188fe:	2800      	cmp	r0, #0
   18900:	f47f a860 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18904:	ab31      	add	r3, sp, #196	; 0xc4
   18906:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   1890a:	9307      	str	r3, [sp, #28]
   1890c:	f7ff b88d 	b.w	17a2a <_svfprintf_r+0x262>
   18910:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18912:	1c74      	adds	r4, r6, #1
   18914:	497d      	ldr	r1, [pc, #500]	; (18b0c <_svfprintf_r+0x1344>)
   18916:	3301      	adds	r3, #1
   18918:	9807      	ldr	r0, [sp, #28]
   1891a:	9430      	str	r4, [sp, #192]	; 0xc0
   1891c:	6001      	str	r1, [r0, #0]
   1891e:	2b07      	cmp	r3, #7
   18920:	f04f 0101 	mov.w	r1, #1
   18924:	932f      	str	r3, [sp, #188]	; 0xbc
   18926:	6041      	str	r1, [r0, #4]
   18928:	f300 81b9 	bgt.w	18c9e <_svfprintf_r+0x14d6>
   1892c:	4603      	mov	r3, r0
   1892e:	3308      	adds	r3, #8
   18930:	9307      	str	r3, [sp, #28]
   18932:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18934:	4313      	orrs	r3, r2
   18936:	f000 826d 	beq.w	18e14 <_svfprintf_r+0x164c>
   1893a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1893c:	9807      	ldr	r0, [sp, #28]
   1893e:	1919      	adds	r1, r3, r4
   18940:	9c19      	ldr	r4, [sp, #100]	; 0x64
   18942:	e9c0 4300 	strd	r4, r3, [r0]
   18946:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18948:	9130      	str	r1, [sp, #192]	; 0xc0
   1894a:	3301      	adds	r3, #1
   1894c:	2b07      	cmp	r3, #7
   1894e:	932f      	str	r3, [sp, #188]	; 0xbc
   18950:	f300 8252 	bgt.w	18df8 <_svfprintf_r+0x1630>
   18954:	f100 0b08 	add.w	fp, r0, #8
   18958:	2a00      	cmp	r2, #0
   1895a:	f2c0 82b3 	blt.w	18ec4 <_svfprintf_r+0x16fc>
   1895e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18960:	3301      	adds	r3, #1
   18962:	f8cb 5000 	str.w	r5, [fp]
   18966:	1854      	adds	r4, r2, r1
   18968:	2b07      	cmp	r3, #7
   1896a:	f8cb 2004 	str.w	r2, [fp, #4]
   1896e:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
   18972:	f73f ab8e 	bgt.w	18092 <_svfprintf_r+0x8ca>
   18976:	f10b 0308 	add.w	r3, fp, #8
   1897a:	9307      	str	r3, [sp, #28]
   1897c:	f7ff b895 	b.w	17aaa <_svfprintf_r+0x2e2>
   18980:	aa2e      	add	r2, sp, #184	; 0xb8
   18982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18986:	f001 fc43 	bl	1a210 <__ssprint_r>
   1898a:	2800      	cmp	r0, #0
   1898c:	f47f a81a 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18990:	aa31      	add	r2, sp, #196	; 0xc4
   18992:	9830      	ldr	r0, [sp, #192]	; 0xc0
   18994:	e735      	b.n	18802 <_svfprintf_r+0x103a>
   18996:	aa2e      	add	r2, sp, #184	; 0xb8
   18998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1899c:	f001 fc38 	bl	1a210 <__ssprint_r>
   189a0:	2800      	cmp	r0, #0
   189a2:	f47f a80f 	bne.w	179c4 <_svfprintf_r+0x1fc>
   189a6:	ab31      	add	r3, sp, #196	; 0xc4
   189a8:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   189aa:	9307      	str	r3, [sp, #28]
   189ac:	f7ff ba69 	b.w	17e82 <_svfprintf_r+0x6ba>
   189b0:	9706      	str	r7, [sp, #24]
   189b2:	f409 6480 	and.w	r4, r9, #1024	; 0x400
   189b6:	f04f 0e00 	mov.w	lr, #0
   189ba:	f50d 7cb4 	add.w	ip, sp, #360	; 0x168
   189be:	f8df a150 	ldr.w	sl, [pc, #336]	; 18b10 <_svfprintf_r+0x1348>
   189c2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   189c4:	e006      	b.n	189d4 <_svfprintf_r+0x120c>
   189c6:	2b0a      	cmp	r3, #10
   189c8:	f172 0200 	sbcs.w	r2, r2, #0
   189cc:	d337      	bcc.n	18a3e <_svfprintf_r+0x1276>
   189ce:	4643      	mov	r3, r8
   189d0:	4632      	mov	r2, r6
   189d2:	46ac      	mov	ip, r5
   189d4:	1898      	adds	r0, r3, r2
   189d6:	f04f 0b05 	mov.w	fp, #5
   189da:	f10e 0e01 	add.w	lr, lr, #1
   189de:	f10c 35ff 	add.w	r5, ip, #4294967295
   189e2:	f140 0000 	adc.w	r0, r0, #0
   189e6:	fbaa 1600 	umull	r1, r6, sl, r0
   189ea:	f026 0103 	bic.w	r1, r6, #3
   189ee:	eb01 0196 	add.w	r1, r1, r6, lsr #2
   189f2:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   189f6:	1a40      	subs	r0, r0, r1
   189f8:	1a19      	subs	r1, r3, r0
   189fa:	f162 0800 	sbc.w	r8, r2, #0
   189fe:	fb06 f601 	mul.w	r6, r6, r1
   18a02:	fb0a 6608 	mla	r6, sl, r8, r6
   18a06:	fba1 810a 	umull	r8, r1, r1, sl
   18a0a:	440e      	add	r6, r1
   18a0c:	f008 0101 	and.w	r1, r8, #1
   18a10:	ea4f 0858 	mov.w	r8, r8, lsr #1
   18a14:	fba1 1b0b 	umull	r1, fp, r1, fp
   18a18:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
   18a1c:	1809      	adds	r1, r1, r0
   18a1e:	0876      	lsrs	r6, r6, #1
   18a20:	3130      	adds	r1, #48	; 0x30
   18a22:	f80c 1c01 	strb.w	r1, [ip, #-1]
   18a26:	2c00      	cmp	r4, #0
   18a28:	d0cd      	beq.n	189c6 <_svfprintf_r+0x11fe>
   18a2a:	7839      	ldrb	r1, [r7, #0]
   18a2c:	4571      	cmp	r1, lr
   18a2e:	d1ca      	bne.n	189c6 <_svfprintf_r+0x11fe>
   18a30:	29ff      	cmp	r1, #255	; 0xff
   18a32:	d0c8      	beq.n	189c6 <_svfprintf_r+0x11fe>
   18a34:	2b0a      	cmp	r3, #10
   18a36:	f172 0200 	sbcs.w	r2, r2, #0
   18a3a:	f080 8223 	bcs.w	18e84 <_svfprintf_r+0x16bc>
   18a3e:	ab5a      	add	r3, sp, #360	; 0x168
   18a40:	971e      	str	r7, [sp, #120]	; 0x78
   18a42:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
   18a46:	9f06      	ldr	r7, [sp, #24]
   18a48:	eba3 0b05 	sub.w	fp, r3, r5
   18a4c:	f8cd 9018 	str.w	r9, [sp, #24]
   18a50:	f7ff b967 	b.w	17d22 <_svfprintf_r+0x55a>
   18a54:	aa2e      	add	r2, sp, #184	; 0xb8
   18a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18a5a:	f001 fbd9 	bl	1a210 <__ssprint_r>
   18a5e:	2800      	cmp	r0, #0
   18a60:	f47e afb0 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18a64:	ab31      	add	r3, sp, #196	; 0xc4
   18a66:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   18a68:	9307      	str	r3, [sp, #28]
   18a6a:	f7ff b805 	b.w	17a78 <_svfprintf_r+0x2b0>
   18a6e:	aa2e      	add	r2, sp, #184	; 0xb8
   18a70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18a74:	f001 fbcc 	bl	1a210 <__ssprint_r>
   18a78:	2800      	cmp	r0, #0
   18a7a:	f47e afa3 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18a7e:	7831      	ldrb	r1, [r6, #0]
   18a80:	aa31      	add	r2, sp, #196	; 0xc4
   18a82:	9830      	ldr	r0, [sp, #192]	; 0xc0
   18a84:	e6d1      	b.n	1882a <_svfprintf_r+0x1062>
   18a86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18a8a:	681b      	ldr	r3, [r3, #0]
   18a8c:	601a      	str	r2, [r3, #0]
   18a8e:	f7ff b909 	b.w	17ca4 <_svfprintf_r+0x4dc>
   18a92:	2f06      	cmp	r7, #6
   18a94:	463b      	mov	r3, r7
   18a96:	462a      	mov	r2, r5
   18a98:	462f      	mov	r7, r5
   18a9a:	bf28      	it	cs
   18a9c:	2306      	movcs	r3, #6
   18a9e:	950f      	str	r5, [sp, #60]	; 0x3c
   18aa0:	9512      	str	r5, [sp, #72]	; 0x48
   18aa2:	469b      	mov	fp, r3
   18aa4:	9308      	str	r3, [sp, #32]
   18aa6:	9610      	str	r6, [sp, #64]	; 0x40
   18aa8:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
   18aac:	4d19      	ldr	r5, [pc, #100]	; (18b14 <_svfprintf_r+0x134c>)
   18aae:	f7ff b865 	b.w	17b7c <_svfprintf_r+0x3b4>
   18ab2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   18ab4:	2b00      	cmp	r3, #0
   18ab6:	f43e af8b 	beq.w	179d0 <_svfprintf_r+0x208>
   18aba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   18abc:	aa2e      	add	r2, sp, #184	; 0xb8
   18abe:	980a      	ldr	r0, [sp, #40]	; 0x28
   18ac0:	4621      	mov	r1, r4
   18ac2:	f001 fba5 	bl	1a210 <__ssprint_r>
   18ac6:	89a3      	ldrh	r3, [r4, #12]
   18ac8:	f7fe bf84 	b.w	179d4 <_svfprintf_r+0x20c>
   18acc:	4698      	mov	r8, r3
   18ace:	f108 0801 	add.w	r8, r8, #1
   18ad2:	444c      	add	r4, r9
   18ad4:	603e      	str	r6, [r7, #0]
   18ad6:	f1b8 0f07 	cmp.w	r8, #7
   18ada:	f8c7 9004 	str.w	r9, [r7, #4]
   18ade:	e9cd 842f 	strd	r8, r4, [sp, #188]	; 0xbc
   18ae2:	f77f ab21 	ble.w	18128 <_svfprintf_r+0x960>
   18ae6:	e46c      	b.n	183c2 <_svfprintf_r+0xbfa>
   18ae8:	9a06      	ldr	r2, [sp, #24]
   18aea:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   18aee:	f43f adea 	beq.w	186c6 <_svfprintf_r+0xefe>
   18af2:	b2db      	uxtb	r3, r3
   18af4:	4602      	mov	r2, r0
   18af6:	e5e6      	b.n	186c6 <_svfprintf_r+0xefe>
   18af8:	9a06      	ldr	r2, [sp, #24]
   18afa:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   18afe:	f43f a932 	beq.w	17d66 <_svfprintf_r+0x59e>
   18b02:	b2db      	uxtb	r3, r3
   18b04:	4602      	mov	r2, r0
   18b06:	f7ff b92e 	b.w	17d66 <_svfprintf_r+0x59e>
   18b0a:	bf00      	nop
   18b0c:	00031304 	.word	0x00031304
   18b10:	cccccccd 	.word	0xcccccccd
   18b14:	000312fc 	.word	0x000312fc
   18b18:	1c79      	adds	r1, r7, #1
   18b1a:	f000 80ec 	beq.w	18cf6 <_svfprintf_r+0x152e>
   18b1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   18b22:	d102      	bne.n	18b2a <_svfprintf_r+0x1362>
   18b24:	2f00      	cmp	r7, #0
   18b26:	bf08      	it	eq
   18b28:	2701      	moveq	r7, #1
   18b2a:	9806      	ldr	r0, [sp, #24]
   18b2c:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	; 0x58
   18b30:	f440 7480 	orr.w	r4, r0, #256	; 0x100
   18b34:	2a00      	cmp	r2, #0
   18b36:	f2c0 824a 	blt.w	18fce <_svfprintf_r+0x1806>
   18b3a:	f04f 0a00 	mov.w	sl, #0
   18b3e:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
   18b42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   18b46:	f000 810a 	beq.w	18d5e <_svfprintf_r+0x1596>
   18b4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   18b4e:	f040 81ec 	bne.w	18f2a <_svfprintf_r+0x1762>
   18b52:	1c7b      	adds	r3, r7, #1
   18b54:	980a      	ldr	r0, [sp, #40]	; 0x28
   18b56:	461e      	mov	r6, r3
   18b58:	9313      	str	r3, [sp, #76]	; 0x4c
   18b5a:	9301      	str	r3, [sp, #4]
   18b5c:	ab2c      	add	r3, sp, #176	; 0xb0
   18b5e:	9304      	str	r3, [sp, #16]
   18b60:	ab29      	add	r3, sp, #164	; 0xa4
   18b62:	9303      	str	r3, [sp, #12]
   18b64:	ab28      	add	r3, sp, #160	; 0xa0
   18b66:	9302      	str	r3, [sp, #8]
   18b68:	2302      	movs	r3, #2
   18b6a:	9300      	str	r3, [sp, #0]
   18b6c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
   18b70:	f7e8 fc46 	bl	1400 <_dtoa_r>
   18b74:	2200      	movs	r2, #0
   18b76:	4605      	mov	r5, r0
   18b78:	1986      	adds	r6, r0, r6
   18b7a:	2300      	movs	r3, #0
   18b7c:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   18b80:	f7e7 ffb6 	bl	af0 <__aeabi_dcmpeq>
   18b84:	2800      	cmp	r0, #0
   18b86:	f040 82d2 	bne.w	1912e <_svfprintf_r+0x1966>
   18b8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18b8c:	42b3      	cmp	r3, r6
   18b8e:	d206      	bcs.n	18b9e <_svfprintf_r+0x13d6>
   18b90:	2130      	movs	r1, #48	; 0x30
   18b92:	1c5a      	adds	r2, r3, #1
   18b94:	922c      	str	r2, [sp, #176]	; 0xb0
   18b96:	7019      	strb	r1, [r3, #0]
   18b98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18b9a:	429e      	cmp	r6, r3
   18b9c:	d8f9      	bhi.n	18b92 <_svfprintf_r+0x13ca>
   18b9e:	1b5b      	subs	r3, r3, r5
   18ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   18ba4:	9313      	str	r3, [sp, #76]	; 0x4c
   18ba6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   18ba8:	9312      	str	r3, [sp, #72]	; 0x48
   18baa:	f040 82c9 	bne.w	19140 <_svfprintf_r+0x1978>
   18bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18bb0:	429f      	cmp	r7, r3
   18bb2:	db02      	blt.n	18bba <_svfprintf_r+0x13f2>
   18bb4:	3303      	adds	r3, #3
   18bb6:	f280 80b3 	bge.w	18d20 <_svfprintf_r+0x1558>
   18bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18bbc:	3b02      	subs	r3, #2
   18bbe:	9311      	str	r3, [sp, #68]	; 0x44
   18bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18bc2:	2100      	movs	r1, #0
   18bc4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   18bc8:	3b01      	subs	r3, #1
   18bca:	910f      	str	r1, [sp, #60]	; 0x3c
   18bcc:	9328      	str	r3, [sp, #160]	; 0xa0
   18bce:	2b00      	cmp	r3, #0
   18bd0:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
   18bd4:	f2c0 81f6 	blt.w	18fc4 <_svfprintf_r+0x17fc>
   18bd8:	222b      	movs	r2, #43	; 0x2b
   18bda:	2b09      	cmp	r3, #9
   18bdc:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
   18be0:	f340 81d4 	ble.w	18f8c <_svfprintf_r+0x17c4>
   18be4:	f10d 0eb7 	add.w	lr, sp, #183	; 0xb7
   18be8:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 18ea0 <_svfprintf_r+0x16d8>
   18bec:	4676      	mov	r6, lr
   18bee:	fbac 2103 	umull	r2, r1, ip, r3
   18bf2:	461c      	mov	r4, r3
   18bf4:	4630      	mov	r0, r6
   18bf6:	3e01      	subs	r6, #1
   18bf8:	08c9      	lsrs	r1, r1, #3
   18bfa:	2c63      	cmp	r4, #99	; 0x63
   18bfc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   18c00:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   18c04:	460b      	mov	r3, r1
   18c06:	f102 0230 	add.w	r2, r2, #48	; 0x30
   18c0a:	f800 2c01 	strb.w	r2, [r0, #-1]
   18c0e:	dcee      	bgt.n	18bee <_svfprintf_r+0x1426>
   18c10:	3330      	adds	r3, #48	; 0x30
   18c12:	f806 3c01 	strb.w	r3, [r6, #-1]
   18c16:	1e83      	subs	r3, r0, #2
   18c18:	4573      	cmp	r3, lr
   18c1a:	f080 828e 	bcs.w	1913a <_svfprintf_r+0x1972>
   18c1e:	f10d 02a9 	add.w	r2, sp, #169	; 0xa9
   18c22:	f813 1b01 	ldrb.w	r1, [r3], #1
   18c26:	4573      	cmp	r3, lr
   18c28:	f802 1f01 	strb.w	r1, [r2, #1]!
   18c2c:	d1f9      	bne.n	18c22 <_svfprintf_r+0x145a>
   18c2e:	ab5a      	add	r3, sp, #360	; 0x168
   18c30:	1a18      	subs	r0, r3, r0
   18c32:	f1a0 03ad 	sub.w	r3, r0, #173	; 0xad
   18c36:	931b      	str	r3, [sp, #108]	; 0x6c
   18c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18c3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   18c3c:	2b01      	cmp	r3, #1
   18c3e:	eb03 0b02 	add.w	fp, r3, r2
   18c42:	f340 81ba 	ble.w	18fba <_svfprintf_r+0x17f2>
   18c46:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18c48:	449b      	add	fp, r3
   18c4a:	9b06      	ldr	r3, [sp, #24]
   18c4c:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
   18c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   18c54:	9208      	str	r2, [sp, #32]
   18c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18c5a:	9306      	str	r3, [sp, #24]
   18c5c:	2300      	movs	r3, #0
   18c5e:	9315      	str	r3, [sp, #84]	; 0x54
   18c60:	9314      	str	r3, [sp, #80]	; 0x50
   18c62:	9312      	str	r3, [sp, #72]	; 0x48
   18c64:	f1ba 0f00 	cmp.w	sl, #0
   18c68:	d154      	bne.n	18d14 <_svfprintf_r+0x154c>
   18c6a:	4657      	mov	r7, sl
   18c6c:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   18c70:	f7fe bf84 	b.w	17b7c <_svfprintf_r+0x3b4>
   18c74:	222d      	movs	r2, #45	; 0x2d
   18c76:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
   18c7a:	f7fe bf6b 	b.w	17b54 <_svfprintf_r+0x38c>
   18c7e:	9107      	str	r1, [sp, #28]
   18c80:	9907      	ldr	r1, [sp, #28]
   18c82:	3301      	adds	r3, #1
   18c84:	600e      	str	r6, [r1, #0]
   18c86:	2b07      	cmp	r3, #7
   18c88:	eb04 0602 	add.w	r6, r4, r2
   18c8c:	604c      	str	r4, [r1, #4]
   18c8e:	e9cd 362f 	strd	r3, r6, [sp, #188]	; 0xbc
   18c92:	dc32      	bgt.n	18cfa <_svfprintf_r+0x1532>
   18c94:	460b      	mov	r3, r1
   18c96:	3308      	adds	r3, #8
   18c98:	9307      	str	r3, [sp, #28]
   18c9a:	f7ff bb1e 	b.w	182da <_svfprintf_r+0xb12>
   18c9e:	aa2e      	add	r2, sp, #184	; 0xb8
   18ca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18ca4:	f001 fab4 	bl	1a210 <__ssprint_r>
   18ca8:	2800      	cmp	r0, #0
   18caa:	f47e ae8b 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18cae:	ab31      	add	r3, sp, #196	; 0xc4
   18cb0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   18cb2:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   18cb4:	9307      	str	r3, [sp, #28]
   18cb6:	e63c      	b.n	18932 <_svfprintf_r+0x116a>
   18cb8:	ebaa 0709 	sub.w	r7, sl, r9
   18cbc:	1b5d      	subs	r5, r3, r5
   18cbe:	4634      	mov	r4, r6
   18cc0:	42af      	cmp	r7, r5
   18cc2:	bfa8      	it	ge
   18cc4:	462f      	movge	r7, r5
   18cc6:	f7ff bb3f 	b.w	18348 <_svfprintf_r+0xb80>
   18cca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18cce:	681b      	ldr	r3, [r3, #0]
   18cd0:	801a      	strh	r2, [r3, #0]
   18cd2:	f7fe bfe7 	b.w	17ca4 <_svfprintf_r+0x4dc>
   18cd6:	f343 12c0 	sbfx	r2, r3, #7, #1
   18cda:	b25b      	sxtb	r3, r3
   18cdc:	4611      	mov	r1, r2
   18cde:	f7fe bf9f 	b.w	17c20 <_svfprintf_r+0x458>
   18ce2:	1c79      	adds	r1, r7, #1
   18ce4:	980a      	ldr	r0, [sp, #40]	; 0x28
   18ce6:	f7fd ffa7 	bl	16c38 <_malloc_r>
   18cea:	4605      	mov	r5, r0
   18cec:	2800      	cmp	r0, #0
   18cee:	f000 8230 	beq.w	19152 <_svfprintf_r+0x198a>
   18cf2:	900f      	str	r0, [sp, #60]	; 0x3c
   18cf4:	e432      	b.n	1855c <_svfprintf_r+0xd94>
   18cf6:	2706      	movs	r7, #6
   18cf8:	e717      	b.n	18b2a <_svfprintf_r+0x1362>
   18cfa:	aa2e      	add	r2, sp, #184	; 0xb8
   18cfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18d00:	f001 fa86 	bl	1a210 <__ssprint_r>
   18d04:	2800      	cmp	r0, #0
   18d06:	f47e ae5d 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18d0a:	ab31      	add	r3, sp, #196	; 0xc4
   18d0c:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   18d0e:	9307      	str	r3, [sp, #28]
   18d10:	f7ff bae3 	b.w	182da <_svfprintf_r+0xb12>
   18d14:	222d      	movs	r2, #45	; 0x2d
   18d16:	2700      	movs	r7, #0
   18d18:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
   18d1c:	f7fe bf31 	b.w	17b82 <_svfprintf_r+0x3ba>
   18d20:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   18d24:	4293      	cmp	r3, r2
   18d26:	f300 80f5 	bgt.w	18f14 <_svfprintf_r+0x174c>
   18d2a:	9b06      	ldr	r3, [sp, #24]
   18d2c:	07df      	lsls	r7, r3, #31
   18d2e:	f140 8190 	bpl.w	19052 <_svfprintf_r+0x188a>
   18d32:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18d34:	9a18      	ldr	r2, [sp, #96]	; 0x60
   18d36:	eb03 0b02 	add.w	fp, r3, r2
   18d3a:	9b06      	ldr	r3, [sp, #24]
   18d3c:	055e      	lsls	r6, r3, #21
   18d3e:	d503      	bpl.n	18d48 <_svfprintf_r+0x1580>
   18d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18d42:	2b00      	cmp	r3, #0
   18d44:	f300 814c 	bgt.w	18fe0 <_svfprintf_r+0x1818>
   18d48:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
   18d4c:	9308      	str	r3, [sp, #32]
   18d4e:	2367      	movs	r3, #103	; 0x67
   18d50:	9311      	str	r3, [sp, #68]	; 0x44
   18d52:	2300      	movs	r3, #0
   18d54:	9406      	str	r4, [sp, #24]
   18d56:	930f      	str	r3, [sp, #60]	; 0x3c
   18d58:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
   18d5c:	e782      	b.n	18c64 <_svfprintf_r+0x149c>
   18d5e:	ab2c      	add	r3, sp, #176	; 0xb0
   18d60:	980a      	ldr	r0, [sp, #40]	; 0x28
   18d62:	9701      	str	r7, [sp, #4]
   18d64:	9304      	str	r3, [sp, #16]
   18d66:	ab29      	add	r3, sp, #164	; 0xa4
   18d68:	9303      	str	r3, [sp, #12]
   18d6a:	ab28      	add	r3, sp, #160	; 0xa0
   18d6c:	9302      	str	r3, [sp, #8]
   18d6e:	2303      	movs	r3, #3
   18d70:	9300      	str	r3, [sp, #0]
   18d72:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
   18d76:	f7e8 fb43 	bl	1400 <_dtoa_r>
   18d7a:	7803      	ldrb	r3, [r0, #0]
   18d7c:	4605      	mov	r5, r0
   18d7e:	2b30      	cmp	r3, #48	; 0x30
   18d80:	d108      	bne.n	18d94 <_svfprintf_r+0x15cc>
   18d82:	2200      	movs	r2, #0
   18d84:	2300      	movs	r3, #0
   18d86:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   18d8a:	f7e7 feb1 	bl	af0 <__aeabi_dcmpeq>
   18d8e:	2800      	cmp	r0, #0
   18d90:	f000 81a3 	beq.w	190da <_svfprintf_r+0x1912>
   18d94:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   18d96:	2200      	movs	r2, #0
   18d98:	2300      	movs	r3, #0
   18d9a:	443e      	add	r6, r7
   18d9c:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   18da0:	f7e7 fea6 	bl	af0 <__aeabi_dcmpeq>
   18da4:	2800      	cmp	r0, #0
   18da6:	f000 8185 	beq.w	190b4 <_svfprintf_r+0x18ec>
   18daa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   18dac:	9613      	str	r6, [sp, #76]	; 0x4c
   18dae:	9a06      	ldr	r2, [sp, #24]
   18db0:	2b00      	cmp	r3, #0
   18db2:	f002 0201 	and.w	r2, r2, #1
   18db6:	9312      	str	r3, [sp, #72]	; 0x48
   18db8:	ea42 0207 	orr.w	r2, r2, r7
   18dbc:	f340 8191 	ble.w	190e2 <_svfprintf_r+0x191a>
   18dc0:	2a00      	cmp	r2, #0
   18dc2:	f040 8170 	bne.w	190a6 <_svfprintf_r+0x18de>
   18dc6:	2366      	movs	r3, #102	; 0x66
   18dc8:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   18dcc:	9311      	str	r3, [sp, #68]	; 0x44
   18dce:	9b06      	ldr	r3, [sp, #24]
   18dd0:	055e      	lsls	r6, r3, #21
   18dd2:	f100 8107 	bmi.w	18fe4 <_svfprintf_r+0x181c>
   18dd6:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
   18dda:	9308      	str	r3, [sp, #32]
   18ddc:	e7b9      	b.n	18d52 <_svfprintf_r+0x158a>
   18dde:	aa2e      	add	r2, sp, #184	; 0xb8
   18de0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18de4:	f001 fa14 	bl	1a210 <__ssprint_r>
   18de8:	2800      	cmp	r0, #0
   18dea:	f47e adeb 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18dee:	ab31      	add	r3, sp, #196	; 0xc4
   18df0:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   18df2:	9307      	str	r3, [sp, #28]
   18df4:	f7ff ba6a 	b.w	182cc <_svfprintf_r+0xb04>
   18df8:	aa2e      	add	r2, sp, #184	; 0xb8
   18dfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18dfe:	f001 fa07 	bl	1a210 <__ssprint_r>
   18e02:	2800      	cmp	r0, #0
   18e04:	f47e adde 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18e08:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   18e0a:	f10d 0bc4 	add.w	fp, sp, #196	; 0xc4
   18e0e:	e9dd 312f 	ldrd	r3, r1, [sp, #188]	; 0xbc
   18e12:	e5a1      	b.n	18958 <_svfprintf_r+0x1190>
   18e14:	9b06      	ldr	r3, [sp, #24]
   18e16:	07de      	lsls	r6, r3, #31
   18e18:	f57e ae47 	bpl.w	17aaa <_svfprintf_r+0x2e2>
   18e1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18e1e:	9a07      	ldr	r2, [sp, #28]
   18e20:	9819      	ldr	r0, [sp, #100]	; 0x64
   18e22:	1919      	adds	r1, r3, r4
   18e24:	e9c2 0300 	strd	r0, r3, [r2]
   18e28:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18e2a:	9130      	str	r1, [sp, #192]	; 0xc0
   18e2c:	3301      	adds	r3, #1
   18e2e:	2b07      	cmp	r3, #7
   18e30:	932f      	str	r3, [sp, #188]	; 0xbc
   18e32:	dce1      	bgt.n	18df8 <_svfprintf_r+0x1630>
   18e34:	f102 0b08 	add.w	fp, r2, #8
   18e38:	e591      	b.n	1895e <_svfprintf_r+0x1196>
   18e3a:	aa2e      	add	r2, sp, #184	; 0xb8
   18e3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18e40:	f001 f9e6 	bl	1a210 <__ssprint_r>
   18e44:	2800      	cmp	r0, #0
   18e46:	f47e adbd 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18e4a:	7831      	ldrb	r1, [r6, #0]
   18e4c:	aa31      	add	r2, sp, #196	; 0xc4
   18e4e:	9830      	ldr	r0, [sp, #192]	; 0xc0
   18e50:	e4f1      	b.n	18836 <_svfprintf_r+0x106e>
   18e52:	aa2e      	add	r2, sp, #184	; 0xb8
   18e54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18e58:	f001 f9da 	bl	1a210 <__ssprint_r>
   18e5c:	2800      	cmp	r0, #0
   18e5e:	f47e adb1 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18e62:	ab31      	add	r3, sp, #196	; 0xc4
   18e64:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   18e66:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   18e68:	9307      	str	r3, [sp, #28]
   18e6a:	f7ff ba55 	b.w	18318 <_svfprintf_r+0xb50>
   18e6e:	46bb      	mov	fp, r7
   18e70:	9708      	str	r7, [sp, #32]
   18e72:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   18e76:	4607      	mov	r7, r0
   18e78:	9610      	str	r6, [sp, #64]	; 0x40
   18e7a:	9012      	str	r0, [sp, #72]	; 0x48
   18e7c:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
   18e80:	f7fe be7c 	b.w	17b7c <_svfprintf_r+0x3b4>
   18e84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18e86:	991d      	ldr	r1, [sp, #116]	; 0x74
   18e88:	1aed      	subs	r5, r5, r3
   18e8a:	461a      	mov	r2, r3
   18e8c:	4628      	mov	r0, r5
   18e8e:	f7fe fbab 	bl	175e8 <strncpy>
   18e92:	787b      	ldrb	r3, [r7, #1]
   18e94:	b103      	cbz	r3, 18e98 <_svfprintf_r+0x16d0>
   18e96:	3701      	adds	r7, #1
   18e98:	f04f 0e00 	mov.w	lr, #0
   18e9c:	e597      	b.n	189ce <_svfprintf_r+0x1206>
   18e9e:	bf00      	nop
   18ea0:	cccccccd 	.word	0xcccccccd
   18ea4:	aa2e      	add	r2, sp, #184	; 0xb8
   18ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18eaa:	f001 f9b1 	bl	1a210 <__ssprint_r>
   18eae:	2800      	cmp	r0, #0
   18eb0:	f47e ad88 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18eb6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   18eb8:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   18eba:	1b5d      	subs	r5, r3, r5
   18ebc:	ab31      	add	r3, sp, #196	; 0xc4
   18ebe:	9307      	str	r3, [sp, #28]
   18ec0:	f7ff ba42 	b.w	18348 <_svfprintf_r+0xb80>
   18ec4:	4257      	negs	r7, r2
   18ec6:	3210      	adds	r2, #16
   18ec8:	4ea6      	ldr	r6, [pc, #664]	; (19164 <_svfprintf_r+0x199c>)
   18eca:	da51      	bge.n	18f70 <_svfprintf_r+0x17a8>
   18ecc:	2410      	movs	r4, #16
   18ece:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   18ed2:	e002      	b.n	18eda <_svfprintf_r+0x1712>
   18ed4:	3f10      	subs	r7, #16
   18ed6:	2f10      	cmp	r7, #16
   18ed8:	dd4a      	ble.n	18f70 <_svfprintf_r+0x17a8>
   18eda:	3301      	adds	r3, #1
   18edc:	3110      	adds	r1, #16
   18ede:	2b07      	cmp	r3, #7
   18ee0:	e9cb 6400 	strd	r6, r4, [fp]
   18ee4:	e9cd 312f 	strd	r3, r1, [sp, #188]	; 0xbc
   18ee8:	f10b 0b08 	add.w	fp, fp, #8
   18eec:	ddf2      	ble.n	18ed4 <_svfprintf_r+0x170c>
   18eee:	aa2e      	add	r2, sp, #184	; 0xb8
   18ef0:	4649      	mov	r1, r9
   18ef2:	4640      	mov	r0, r8
   18ef4:	f001 f98c 	bl	1a210 <__ssprint_r>
   18ef8:	2800      	cmp	r0, #0
   18efa:	f47e ad63 	bne.w	179c4 <_svfprintf_r+0x1fc>
   18efe:	f10d 0bc4 	add.w	fp, sp, #196	; 0xc4
   18f02:	e9dd 312f 	ldrd	r3, r1, [sp, #188]	; 0xbc
   18f06:	e7e5      	b.n	18ed4 <_svfprintf_r+0x170c>
   18f08:	f04f 0a00 	mov.w	sl, #0
   18f0c:	e9cd 1224 	strd	r1, r2, [sp, #144]	; 0x90
   18f10:	f7ff bb31 	b.w	18576 <_svfprintf_r+0xdae>
   18f14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18f16:	9a18      	ldr	r2, [sp, #96]	; 0x60
   18f18:	eb03 0b02 	add.w	fp, r3, r2
   18f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18f1e:	2b00      	cmp	r3, #0
   18f20:	f340 80b8 	ble.w	19094 <_svfprintf_r+0x18cc>
   18f24:	2367      	movs	r3, #103	; 0x67
   18f26:	9311      	str	r3, [sp, #68]	; 0x44
   18f28:	e751      	b.n	18dce <_svfprintf_r+0x1606>
   18f2a:	ab2c      	add	r3, sp, #176	; 0xb0
   18f2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   18f2e:	9701      	str	r7, [sp, #4]
   18f30:	9304      	str	r3, [sp, #16]
   18f32:	ab29      	add	r3, sp, #164	; 0xa4
   18f34:	9303      	str	r3, [sp, #12]
   18f36:	ab28      	add	r3, sp, #160	; 0xa0
   18f38:	9302      	str	r3, [sp, #8]
   18f3a:	2302      	movs	r3, #2
   18f3c:	9300      	str	r3, [sp, #0]
   18f3e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
   18f42:	f7e8 fa5d 	bl	1400 <_dtoa_r>
   18f46:	9b06      	ldr	r3, [sp, #24]
   18f48:	4605      	mov	r5, r0
   18f4a:	07d8      	lsls	r0, r3, #31
   18f4c:	d50a      	bpl.n	18f64 <_svfprintf_r+0x179c>
   18f4e:	2200      	movs	r2, #0
   18f50:	2300      	movs	r3, #0
   18f52:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   18f56:	f7e7 fdcb 	bl	af0 <__aeabi_dcmpeq>
   18f5a:	2800      	cmp	r0, #0
   18f5c:	f040 80b9 	bne.w	190d2 <_svfprintf_r+0x190a>
   18f60:	19ee      	adds	r6, r5, r7
   18f62:	e612      	b.n	18b8a <_svfprintf_r+0x13c2>
   18f64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18f66:	1b5b      	subs	r3, r3, r5
   18f68:	9313      	str	r3, [sp, #76]	; 0x4c
   18f6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   18f6c:	9312      	str	r3, [sp, #72]	; 0x48
   18f6e:	e61e      	b.n	18bae <_svfprintf_r+0x13e6>
   18f70:	3301      	adds	r3, #1
   18f72:	4439      	add	r1, r7
   18f74:	f8cb 6000 	str.w	r6, [fp]
   18f78:	2b07      	cmp	r3, #7
   18f7a:	f8cb 7004 	str.w	r7, [fp, #4]
   18f7e:	e9cd 312f 	strd	r3, r1, [sp, #188]	; 0xbc
   18f82:	f300 80b9 	bgt.w	190f8 <_svfprintf_r+0x1930>
   18f86:	f10b 0b08 	add.w	fp, fp, #8
   18f8a:	e4e8      	b.n	1895e <_svfprintf_r+0x1196>
   18f8c:	2900      	cmp	r1, #0
   18f8e:	f040 8093 	bne.w	190b8 <_svfprintf_r+0x18f0>
   18f92:	2230      	movs	r2, #48	; 0x30
   18f94:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
   18f98:	f10d 02ab 	add.w	r2, sp, #171	; 0xab
   18f9c:	3330      	adds	r3, #48	; 0x30
   18f9e:	f802 3b01 	strb.w	r3, [r2], #1
   18fa2:	ab2a      	add	r3, sp, #168	; 0xa8
   18fa4:	1ad3      	subs	r3, r2, r3
   18fa6:	931b      	str	r3, [sp, #108]	; 0x6c
   18fa8:	e646      	b.n	18c38 <_svfprintf_r+0x1470>
   18faa:	230c      	movs	r3, #12
   18fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18fae:	6013      	str	r3, [r2, #0]
   18fb0:	f04f 33ff 	mov.w	r3, #4294967295
   18fb4:	930e      	str	r3, [sp, #56]	; 0x38
   18fb6:	f7fe bd10 	b.w	179da <_svfprintf_r+0x212>
   18fba:	9b06      	ldr	r3, [sp, #24]
   18fbc:	07db      	lsls	r3, r3, #31
   18fbe:	f57f ae44 	bpl.w	18c4a <_svfprintf_r+0x1482>
   18fc2:	e640      	b.n	18c46 <_svfprintf_r+0x147e>
   18fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18fc6:	222d      	movs	r2, #45	; 0x2d
   18fc8:	f1c3 0301 	rsb	r3, r3, #1
   18fcc:	e605      	b.n	18bda <_svfprintf_r+0x1412>
   18fce:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   18fd2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   18fd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   18fda:	9222      	str	r2, [sp, #136]	; 0x88
   18fdc:	9323      	str	r3, [sp, #140]	; 0x8c
   18fde:	e5b0      	b.n	18b42 <_svfprintf_r+0x137a>
   18fe0:	2367      	movs	r3, #103	; 0x67
   18fe2:	9311      	str	r3, [sp, #68]	; 0x44
   18fe4:	991e      	ldr	r1, [sp, #120]	; 0x78
   18fe6:	780b      	ldrb	r3, [r1, #0]
   18fe8:	2bff      	cmp	r3, #255	; 0xff
   18fea:	f000 80ae 	beq.w	1914a <_svfprintf_r+0x1982>
   18fee:	2000      	movs	r0, #0
   18ff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18ff2:	4606      	mov	r6, r0
   18ff4:	e003      	b.n	18ffe <_svfprintf_r+0x1836>
   18ff6:	3601      	adds	r6, #1
   18ff8:	3101      	adds	r1, #1
   18ffa:	2bff      	cmp	r3, #255	; 0xff
   18ffc:	d008      	beq.n	19010 <_svfprintf_r+0x1848>
   18ffe:	429a      	cmp	r2, r3
   19000:	dd06      	ble.n	19010 <_svfprintf_r+0x1848>
   19002:	1ad2      	subs	r2, r2, r3
   19004:	784b      	ldrb	r3, [r1, #1]
   19006:	2b00      	cmp	r3, #0
   19008:	d1f5      	bne.n	18ff6 <_svfprintf_r+0x182e>
   1900a:	780b      	ldrb	r3, [r1, #0]
   1900c:	3001      	adds	r0, #1
   1900e:	e7f4      	b.n	18ffa <_svfprintf_r+0x1832>
   19010:	9212      	str	r2, [sp, #72]	; 0x48
   19012:	9015      	str	r0, [sp, #84]	; 0x54
   19014:	911e      	str	r1, [sp, #120]	; 0x78
   19016:	9614      	str	r6, [sp, #80]	; 0x50
   19018:	9406      	str	r4, [sp, #24]
   1901a:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
   1901e:	4413      	add	r3, r2
   19020:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   19022:	fb02 bb03 	mla	fp, r2, r3, fp
   19026:	2300      	movs	r3, #0
   19028:	930f      	str	r3, [sp, #60]	; 0x3c
   1902a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
   1902e:	9308      	str	r3, [sp, #32]
   19030:	e618      	b.n	18c64 <_svfprintf_r+0x149c>
   19032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19034:	2b00      	cmp	r3, #0
   19036:	db6c      	blt.n	19112 <_svfprintf_r+0x194a>
   19038:	f89d 209b 	ldrb.w	r2, [sp, #155]	; 0x9b
   1903c:	9b06      	ldr	r3, [sp, #24]
   1903e:	4d4a      	ldr	r5, [pc, #296]	; (19168 <_svfprintf_r+0x19a0>)
   19040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19044:	9306      	str	r3, [sp, #24]
   19046:	2300      	movs	r3, #0
   19048:	4619      	mov	r1, r3
   1904a:	930f      	str	r3, [sp, #60]	; 0x3c
   1904c:	4b47      	ldr	r3, [pc, #284]	; (1916c <_svfprintf_r+0x19a4>)
   1904e:	f7fe bd89 	b.w	17b64 <_svfprintf_r+0x39c>
   19052:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   19056:	e670      	b.n	18d3a <_svfprintf_r+0x1572>
   19058:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1905a:	463a      	mov	r2, r7
   1905c:	942c      	str	r4, [sp, #176]	; 0xb0
   1905e:	7bd9      	ldrb	r1, [r3, #15]
   19060:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   19064:	4299      	cmp	r1, r3
   19066:	d109      	bne.n	1907c <_svfprintf_r+0x18b4>
   19068:	2030      	movs	r0, #48	; 0x30
   1906a:	f802 0c01 	strb.w	r0, [r2, #-1]
   1906e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   19070:	1e53      	subs	r3, r2, #1
   19072:	932c      	str	r3, [sp, #176]	; 0xb0
   19074:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   19078:	4299      	cmp	r1, r3
   1907a:	d0f6      	beq.n	1906a <_svfprintf_r+0x18a2>
   1907c:	2b39      	cmp	r3, #57	; 0x39
   1907e:	d059      	beq.n	19134 <_svfprintf_r+0x196c>
   19080:	3301      	adds	r3, #1
   19082:	b2db      	uxtb	r3, r3
   19084:	f802 3c01 	strb.w	r3, [r2, #-1]
   19088:	1b7b      	subs	r3, r7, r5
   1908a:	9313      	str	r3, [sp, #76]	; 0x4c
   1908c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1908e:	9312      	str	r3, [sp, #72]	; 0x48
   19090:	f7ff bae5 	b.w	1865e <_svfprintf_r+0xe96>
   19094:	f1c3 0301 	rsb	r3, r3, #1
   19098:	449b      	add	fp, r3
   1909a:	2367      	movs	r3, #103	; 0x67
   1909c:	9311      	str	r3, [sp, #68]	; 0x44
   1909e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
   190a2:	9308      	str	r3, [sp, #32]
   190a4:	e655      	b.n	18d52 <_svfprintf_r+0x158a>
   190a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   190a8:	4413      	add	r3, r2
   190aa:	eb03 0b07 	add.w	fp, r3, r7
   190ae:	2366      	movs	r3, #102	; 0x66
   190b0:	9311      	str	r3, [sp, #68]	; 0x44
   190b2:	e68c      	b.n	18dce <_svfprintf_r+0x1606>
   190b4:	442e      	add	r6, r5
   190b6:	e568      	b.n	18b8a <_svfprintf_r+0x13c2>
   190b8:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
   190bc:	e76e      	b.n	18f9c <_svfprintf_r+0x17d4>
   190be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   190c0:	786c      	ldrb	r4, [r5, #1]
   190c2:	4615      	mov	r5, r2
   190c4:	f853 7b04 	ldr.w	r7, [r3], #4
   190c8:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   190cc:	9310      	str	r3, [sp, #64]	; 0x40
   190ce:	f7fe bbda 	b.w	17886 <_svfprintf_r+0xbe>
   190d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   190d4:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
   190d8:	e569      	b.n	18bae <_svfprintf_r+0x13e6>
   190da:	f1c7 0601 	rsb	r6, r7, #1
   190de:	9628      	str	r6, [sp, #160]	; 0xa0
   190e0:	e659      	b.n	18d96 <_svfprintf_r+0x15ce>
   190e2:	b9d2      	cbnz	r2, 1911a <_svfprintf_r+0x1952>
   190e4:	f04f 0b01 	mov.w	fp, #1
   190e8:	2366      	movs	r3, #102	; 0x66
   190ea:	f8cd b020 	str.w	fp, [sp, #32]
   190ee:	9311      	str	r3, [sp, #68]	; 0x44
   190f0:	e62f      	b.n	18d52 <_svfprintf_r+0x158a>
   190f2:	4d1c      	ldr	r5, [pc, #112]	; (19164 <_svfprintf_r+0x199c>)
   190f4:	f7ff bbf2 	b.w	188dc <_svfprintf_r+0x1114>
   190f8:	aa2e      	add	r2, sp, #184	; 0xb8
   190fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   190fe:	f001 f887 	bl	1a210 <__ssprint_r>
   19102:	2800      	cmp	r0, #0
   19104:	f47e ac5e 	bne.w	179c4 <_svfprintf_r+0x1fc>
   19108:	f10d 0bc4 	add.w	fp, sp, #196	; 0xc4
   1910c:	e9dd 312f 	ldrd	r3, r1, [sp, #188]	; 0xbc
   19110:	e425      	b.n	1895e <_svfprintf_r+0x1196>
   19112:	222d      	movs	r2, #45	; 0x2d
   19114:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
   19118:	e790      	b.n	1903c <_svfprintf_r+0x1874>
   1911a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1911c:	3301      	adds	r3, #1
   1911e:	eb03 0b07 	add.w	fp, r3, r7
   19122:	2366      	movs	r3, #102	; 0x66
   19124:	9311      	str	r3, [sp, #68]	; 0x44
   19126:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
   1912a:	9308      	str	r3, [sp, #32]
   1912c:	e611      	b.n	18d52 <_svfprintf_r+0x158a>
   1912e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   19130:	9312      	str	r3, [sp, #72]	; 0x48
   19132:	e545      	b.n	18bc0 <_svfprintf_r+0x13f8>
   19134:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19136:	7a9b      	ldrb	r3, [r3, #10]
   19138:	e7a4      	b.n	19084 <_svfprintf_r+0x18bc>
   1913a:	2302      	movs	r3, #2
   1913c:	931b      	str	r3, [sp, #108]	; 0x6c
   1913e:	e57b      	b.n	18c38 <_svfprintf_r+0x1470>
   19140:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   19144:	f43f ae33 	beq.w	18dae <_svfprintf_r+0x15e6>
   19148:	e53a      	b.n	18bc0 <_svfprintf_r+0x13f8>
   1914a:	2300      	movs	r3, #0
   1914c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
   19150:	e762      	b.n	19018 <_svfprintf_r+0x1850>
   19152:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19154:	898b      	ldrh	r3, [r1, #12]
   19156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   1915a:	4613      	mov	r3, r2
   1915c:	818a      	strh	r2, [r1, #12]
   1915e:	f7fe bc39 	b.w	179d4 <_svfprintf_r+0x20c>
   19162:	bf00      	nop
   19164:	00031308 	.word	0x00031308
   19168:	000312cc 	.word	0x000312cc
   1916c:	000312d0 	.word	0x000312d0

00019170 <vsnprintf>:
   19170:	b510      	push	{r4, lr}
   19172:	2900      	cmp	r1, #0
   19174:	4c19      	ldr	r4, [pc, #100]	; (191dc <vsnprintf+0x6c>)
   19176:	b09a      	sub	sp, #104	; 0x68
   19178:	6824      	ldr	r4, [r4, #0]
   1917a:	db2a      	blt.n	191d2 <vsnprintf+0x62>
   1917c:	9000      	str	r0, [sp, #0]
   1917e:	9004      	str	r0, [sp, #16]
   19180:	f44f 7002 	mov.w	r0, #520	; 0x208
   19184:	f8ad 000c 	strh.w	r0, [sp, #12]
   19188:	d013      	beq.n	191b2 <vsnprintf+0x42>
   1918a:	3901      	subs	r1, #1
   1918c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   19190:	9102      	str	r1, [sp, #8]
   19192:	9105      	str	r1, [sp, #20]
   19194:	4669      	mov	r1, sp
   19196:	f8ad 000e 	strh.w	r0, [sp, #14]
   1919a:	4620      	mov	r0, r4
   1919c:	f7fe fb14 	bl	177c8 <_svfprintf_r>
   191a0:	1c42      	adds	r2, r0, #1
   191a2:	da01      	bge.n	191a8 <vsnprintf+0x38>
   191a4:	238b      	movs	r3, #139	; 0x8b
   191a6:	6023      	str	r3, [r4, #0]
   191a8:	9b00      	ldr	r3, [sp, #0]
   191aa:	2200      	movs	r2, #0
   191ac:	701a      	strb	r2, [r3, #0]
   191ae:	b01a      	add	sp, #104	; 0x68
   191b0:	bd10      	pop	{r4, pc}
   191b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   191b6:	9102      	str	r1, [sp, #8]
   191b8:	9105      	str	r1, [sp, #20]
   191ba:	4669      	mov	r1, sp
   191bc:	f8ad 000e 	strh.w	r0, [sp, #14]
   191c0:	4620      	mov	r0, r4
   191c2:	f7fe fb01 	bl	177c8 <_svfprintf_r>
   191c6:	1c43      	adds	r3, r0, #1
   191c8:	da01      	bge.n	191ce <vsnprintf+0x5e>
   191ca:	238b      	movs	r3, #139	; 0x8b
   191cc:	6023      	str	r3, [r4, #0]
   191ce:	b01a      	add	sp, #104	; 0x68
   191d0:	bd10      	pop	{r4, pc}
   191d2:	238b      	movs	r3, #139	; 0x8b
   191d4:	f04f 30ff 	mov.w	r0, #4294967295
   191d8:	6023      	str	r3, [r4, #0]
   191da:	e7f8      	b.n	191ce <vsnprintf+0x5e>
   191dc:	20000a70 	.word	0x20000a70

000191e0 <__swsetup_r>:
   191e0:	b538      	push	{r3, r4, r5, lr}
   191e2:	4b2f      	ldr	r3, [pc, #188]	; (192a0 <__swsetup_r+0xc0>)
   191e4:	4605      	mov	r5, r0
   191e6:	460c      	mov	r4, r1
   191e8:	681b      	ldr	r3, [r3, #0]
   191ea:	b10b      	cbz	r3, 191f0 <__swsetup_r+0x10>
   191ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   191ee:	b1d2      	cbz	r2, 19226 <__swsetup_r+0x46>
   191f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   191f4:	0718      	lsls	r0, r3, #28
   191f6:	d51d      	bpl.n	19234 <__swsetup_r+0x54>
   191f8:	6922      	ldr	r2, [r4, #16]
   191fa:	b32a      	cbz	r2, 19248 <__swsetup_r+0x68>
   191fc:	f013 0101 	ands.w	r1, r3, #1
   19200:	d007      	beq.n	19212 <__swsetup_r+0x32>
   19202:	6961      	ldr	r1, [r4, #20]
   19204:	2000      	movs	r0, #0
   19206:	4249      	negs	r1, r1
   19208:	60a0      	str	r0, [r4, #8]
   1920a:	61a1      	str	r1, [r4, #24]
   1920c:	b13a      	cbz	r2, 1921e <__swsetup_r+0x3e>
   1920e:	2000      	movs	r0, #0
   19210:	bd38      	pop	{r3, r4, r5, pc}
   19212:	0798      	lsls	r0, r3, #30
   19214:	bf58      	it	pl
   19216:	6961      	ldrpl	r1, [r4, #20]
   19218:	60a1      	str	r1, [r4, #8]
   1921a:	2a00      	cmp	r2, #0
   1921c:	d1f7      	bne.n	1920e <__swsetup_r+0x2e>
   1921e:	0619      	lsls	r1, r3, #24
   19220:	d43b      	bmi.n	1929a <__swsetup_r+0xba>
   19222:	4610      	mov	r0, r2
   19224:	bd38      	pop	{r3, r4, r5, pc}
   19226:	4618      	mov	r0, r3
   19228:	f000 f994 	bl	19554 <__sinit>
   1922c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19230:	0718      	lsls	r0, r3, #28
   19232:	d4e1      	bmi.n	191f8 <__swsetup_r+0x18>
   19234:	06d9      	lsls	r1, r3, #27
   19236:	d528      	bpl.n	1928a <__swsetup_r+0xaa>
   19238:	075a      	lsls	r2, r3, #29
   1923a:	d412      	bmi.n	19262 <__swsetup_r+0x82>
   1923c:	6922      	ldr	r2, [r4, #16]
   1923e:	f043 0308 	orr.w	r3, r3, #8
   19242:	81a3      	strh	r3, [r4, #12]
   19244:	2a00      	cmp	r2, #0
   19246:	d1d9      	bne.n	191fc <__swsetup_r+0x1c>
   19248:	f403 7120 	and.w	r1, r3, #640	; 0x280
   1924c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   19250:	d0d4      	beq.n	191fc <__swsetup_r+0x1c>
   19252:	4621      	mov	r1, r4
   19254:	4628      	mov	r0, r5
   19256:	f000 fb79 	bl	1994c <__smakebuf_r>
   1925a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1925e:	6922      	ldr	r2, [r4, #16]
   19260:	e7cc      	b.n	191fc <__swsetup_r+0x1c>
   19262:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19264:	b151      	cbz	r1, 1927c <__swsetup_r+0x9c>
   19266:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1926a:	4291      	cmp	r1, r2
   1926c:	d004      	beq.n	19278 <__swsetup_r+0x98>
   1926e:	4628      	mov	r0, r5
   19270:	f000 fa46 	bl	19700 <_free_r>
   19274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19278:	2200      	movs	r2, #0
   1927a:	6322      	str	r2, [r4, #48]	; 0x30
   1927c:	2100      	movs	r1, #0
   1927e:	6922      	ldr	r2, [r4, #16]
   19280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   19284:	e9c4 2100 	strd	r2, r1, [r4]
   19288:	e7d9      	b.n	1923e <__swsetup_r+0x5e>
   1928a:	2209      	movs	r2, #9
   1928c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19290:	602a      	str	r2, [r5, #0]
   19292:	f04f 30ff 	mov.w	r0, #4294967295
   19296:	81a3      	strh	r3, [r4, #12]
   19298:	bd38      	pop	{r3, r4, r5, pc}
   1929a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1929e:	e7f8      	b.n	19292 <__swsetup_r+0xb2>
   192a0:	20000a70 	.word	0x20000a70

000192a4 <quorem>:
   192a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192a8:	6903      	ldr	r3, [r0, #16]
   192aa:	b085      	sub	sp, #20
   192ac:	690c      	ldr	r4, [r1, #16]
   192ae:	42a3      	cmp	r3, r4
   192b0:	f2c0 8090 	blt.w	193d4 <quorem+0x130>
   192b4:	3c01      	subs	r4, #1
   192b6:	f101 0514 	add.w	r5, r1, #20
   192ba:	f100 0814 	add.w	r8, r0, #20
   192be:	4681      	mov	r9, r0
   192c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   192c4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   192c8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   192cc:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   192d0:	3301      	adds	r3, #1
   192d2:	eb08 0b84 	add.w	fp, r8, r4, lsl #2
   192d6:	429a      	cmp	r2, r3
   192d8:	fbb2 f6f3 	udiv	r6, r2, r3
   192dc:	d342      	bcc.n	19364 <quorem+0xc0>
   192de:	2000      	movs	r0, #0
   192e0:	46aa      	mov	sl, r5
   192e2:	46c6      	mov	lr, r8
   192e4:	f8cd 800c 	str.w	r8, [sp, #12]
   192e8:	4603      	mov	r3, r0
   192ea:	4688      	mov	r8, r1
   192ec:	e9cd c501 	strd	ip, r5, [sp, #4]
   192f0:	4605      	mov	r5, r0
   192f2:	f85a 2b04 	ldr.w	r2, [sl], #4
   192f6:	f8de 1000 	ldr.w	r1, [lr]
   192fa:	b290      	uxth	r0, r2
   192fc:	4557      	cmp	r7, sl
   192fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   19302:	fb06 5000 	mla	r0, r6, r0, r5
   19306:	b28a      	uxth	r2, r1
   19308:	ea4f 4510 	mov.w	r5, r0, lsr #16
   1930c:	b280      	uxth	r0, r0
   1930e:	fb06 550c 	mla	r5, r6, ip, r5
   19312:	eba2 0200 	sub.w	r2, r2, r0
   19316:	441a      	add	r2, r3
   19318:	b2ab      	uxth	r3, r5
   1931a:	ea4f 4515 	mov.w	r5, r5, lsr #16
   1931e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   19322:	b292      	uxth	r2, r2
   19324:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   19328:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1932c:	ea4f 4323 	mov.w	r3, r3, asr #16
   19330:	f84e 2b04 	str.w	r2, [lr], #4
   19334:	d2dd      	bcs.n	192f2 <quorem+0x4e>
   19336:	4641      	mov	r1, r8
   19338:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1933c:	e9dd c501 	ldrd	ip, r5, [sp, #4]
   19340:	f858 300c 	ldr.w	r3, [r8, ip]
   19344:	b973      	cbnz	r3, 19364 <quorem+0xc0>
   19346:	f1ab 0b04 	sub.w	fp, fp, #4
   1934a:	45d8      	cmp	r8, fp
   1934c:	d304      	bcc.n	19358 <quorem+0xb4>
   1934e:	e007      	b.n	19360 <quorem+0xbc>
   19350:	45d8      	cmp	r8, fp
   19352:	f104 34ff 	add.w	r4, r4, #4294967295
   19356:	d203      	bcs.n	19360 <quorem+0xbc>
   19358:	f85b 3904 	ldr.w	r3, [fp], #-4
   1935c:	2b00      	cmp	r3, #0
   1935e:	d0f7      	beq.n	19350 <quorem+0xac>
   19360:	f8c9 4010 	str.w	r4, [r9, #16]
   19364:	4648      	mov	r0, r9
   19366:	f000 fdd9 	bl	19f1c <__mcmp>
   1936a:	2800      	cmp	r0, #0
   1936c:	db2e      	blt.n	193cc <quorem+0x128>
   1936e:	2200      	movs	r2, #0
   19370:	4641      	mov	r1, r8
   19372:	4694      	mov	ip, r2
   19374:	f855 0b04 	ldr.w	r0, [r5], #4
   19378:	680b      	ldr	r3, [r1, #0]
   1937a:	fa1f fe80 	uxth.w	lr, r0
   1937e:	42af      	cmp	r7, r5
   19380:	b29a      	uxth	r2, r3
   19382:	ea4f 4010 	mov.w	r0, r0, lsr #16
   19386:	eba2 020e 	sub.w	r2, r2, lr
   1938a:	4462      	add	r2, ip
   1938c:	ebc0 4022 	rsb	r0, r0, r2, asr #16
   19390:	b292      	uxth	r2, r2
   19392:	eb00 4013 	add.w	r0, r0, r3, lsr #16
   19396:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   1939a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1939e:	f841 2b04 	str.w	r2, [r1], #4
   193a2:	d2e7      	bcs.n	19374 <quorem+0xd0>
   193a4:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   193a8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   193ac:	b96a      	cbnz	r2, 193ca <quorem+0x126>
   193ae:	3b04      	subs	r3, #4
   193b0:	4598      	cmp	r8, r3
   193b2:	d304      	bcc.n	193be <quorem+0x11a>
   193b4:	e007      	b.n	193c6 <quorem+0x122>
   193b6:	4598      	cmp	r8, r3
   193b8:	f104 34ff 	add.w	r4, r4, #4294967295
   193bc:	d203      	bcs.n	193c6 <quorem+0x122>
   193be:	f853 2904 	ldr.w	r2, [r3], #-4
   193c2:	2a00      	cmp	r2, #0
   193c4:	d0f7      	beq.n	193b6 <quorem+0x112>
   193c6:	f8c9 4010 	str.w	r4, [r9, #16]
   193ca:	3601      	adds	r6, #1
   193cc:	4630      	mov	r0, r6
   193ce:	b005      	add	sp, #20
   193d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193d4:	2000      	movs	r0, #0
   193d6:	b005      	add	sp, #20
   193d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000193dc <__sflush_r>:
   193dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193de:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   193e2:	4607      	mov	r7, r0
   193e4:	460c      	mov	r4, r1
   193e6:	0718      	lsls	r0, r3, #28
   193e8:	d439      	bmi.n	1945e <__sflush_r+0x82>
   193ea:	684a      	ldr	r2, [r1, #4]
   193ec:	2a00      	cmp	r2, #0
   193ee:	dd52      	ble.n	19496 <__sflush_r+0xba>
   193f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   193f2:	2d00      	cmp	r5, #0
   193f4:	d031      	beq.n	1945a <__sflush_r+0x7e>
   193f6:	2200      	movs	r2, #0
   193f8:	683e      	ldr	r6, [r7, #0]
   193fa:	69e1      	ldr	r1, [r4, #28]
   193fc:	603a      	str	r2, [r7, #0]
   193fe:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   19402:	d154      	bne.n	194ae <__sflush_r+0xd2>
   19404:	2301      	movs	r3, #1
   19406:	4638      	mov	r0, r7
   19408:	47a8      	blx	r5
   1940a:	1c41      	adds	r1, r0, #1
   1940c:	4602      	mov	r2, r0
   1940e:	d05d      	beq.n	194cc <__sflush_r+0xf0>
   19410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19414:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   19416:	69e1      	ldr	r1, [r4, #28]
   19418:	075b      	lsls	r3, r3, #29
   1941a:	d505      	bpl.n	19428 <__sflush_r+0x4c>
   1941c:	6863      	ldr	r3, [r4, #4]
   1941e:	1ad2      	subs	r2, r2, r3
   19420:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19422:	b10b      	cbz	r3, 19428 <__sflush_r+0x4c>
   19424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   19426:	1ad2      	subs	r2, r2, r3
   19428:	2300      	movs	r3, #0
   1942a:	4638      	mov	r0, r7
   1942c:	47a8      	blx	r5
   1942e:	1c45      	adds	r5, r0, #1
   19430:	d03f      	beq.n	194b2 <__sflush_r+0xd6>
   19432:	2300      	movs	r3, #0
   19434:	6063      	str	r3, [r4, #4]
   19436:	6923      	ldr	r3, [r4, #16]
   19438:	6023      	str	r3, [r4, #0]
   1943a:	89a3      	ldrh	r3, [r4, #12]
   1943c:	04d9      	lsls	r1, r3, #19
   1943e:	d500      	bpl.n	19442 <__sflush_r+0x66>
   19440:	6520      	str	r0, [r4, #80]	; 0x50
   19442:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19444:	603e      	str	r6, [r7, #0]
   19446:	b141      	cbz	r1, 1945a <__sflush_r+0x7e>
   19448:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1944c:	4299      	cmp	r1, r3
   1944e:	d002      	beq.n	19456 <__sflush_r+0x7a>
   19450:	4638      	mov	r0, r7
   19452:	f000 f955 	bl	19700 <_free_r>
   19456:	2300      	movs	r3, #0
   19458:	6323      	str	r3, [r4, #48]	; 0x30
   1945a:	2000      	movs	r0, #0
   1945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1945e:	690e      	ldr	r6, [r1, #16]
   19460:	2e00      	cmp	r6, #0
   19462:	d0fa      	beq.n	1945a <__sflush_r+0x7e>
   19464:	079b      	lsls	r3, r3, #30
   19466:	680d      	ldr	r5, [r1, #0]
   19468:	600e      	str	r6, [r1, #0]
   1946a:	bf0c      	ite	eq
   1946c:	694b      	ldreq	r3, [r1, #20]
   1946e:	2300      	movne	r3, #0
   19470:	1bad      	subs	r5, r5, r6
   19472:	608b      	str	r3, [r1, #8]
   19474:	e00c      	b.n	19490 <__sflush_r+0xb4>
   19476:	462b      	mov	r3, r5
   19478:	4632      	mov	r2, r6
   1947a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   1947e:	4638      	mov	r0, r7
   19480:	69e1      	ldr	r1, [r4, #28]
   19482:	47e0      	blx	ip
   19484:	f1b0 0c00 	subs.w	ip, r0, #0
   19488:	eba5 050c 	sub.w	r5, r5, ip
   1948c:	4466      	add	r6, ip
   1948e:	dd06      	ble.n	1949e <__sflush_r+0xc2>
   19490:	2d00      	cmp	r5, #0
   19492:	dcf0      	bgt.n	19476 <__sflush_r+0x9a>
   19494:	e7e1      	b.n	1945a <__sflush_r+0x7e>
   19496:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   19498:	2a00      	cmp	r2, #0
   1949a:	dca9      	bgt.n	193f0 <__sflush_r+0x14>
   1949c:	e7dd      	b.n	1945a <__sflush_r+0x7e>
   1949e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   194a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   194a6:	f04f 30ff 	mov.w	r0, #4294967295
   194aa:	81a3      	strh	r3, [r4, #12]
   194ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   194ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
   194b0:	e7b2      	b.n	19418 <__sflush_r+0x3c>
   194b2:	683a      	ldr	r2, [r7, #0]
   194b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   194b8:	b18a      	cbz	r2, 194de <__sflush_r+0x102>
   194ba:	2a1d      	cmp	r2, #29
   194bc:	d001      	beq.n	194c2 <__sflush_r+0xe6>
   194be:	2a16      	cmp	r2, #22
   194c0:	d1ef      	bne.n	194a2 <__sflush_r+0xc6>
   194c2:	2200      	movs	r2, #0
   194c4:	6923      	ldr	r3, [r4, #16]
   194c6:	e9c4 3200 	strd	r3, r2, [r4]
   194ca:	e7ba      	b.n	19442 <__sflush_r+0x66>
   194cc:	683b      	ldr	r3, [r7, #0]
   194ce:	2b00      	cmp	r3, #0
   194d0:	d09e      	beq.n	19410 <__sflush_r+0x34>
   194d2:	2b1d      	cmp	r3, #29
   194d4:	d001      	beq.n	194da <__sflush_r+0xfe>
   194d6:	2b16      	cmp	r3, #22
   194d8:	d1e1      	bne.n	1949e <__sflush_r+0xc2>
   194da:	603e      	str	r6, [r7, #0]
   194dc:	e7bd      	b.n	1945a <__sflush_r+0x7e>
   194de:	6062      	str	r2, [r4, #4]
   194e0:	6922      	ldr	r2, [r4, #16]
   194e2:	6022      	str	r2, [r4, #0]
   194e4:	04da      	lsls	r2, r3, #19
   194e6:	d4ab      	bmi.n	19440 <__sflush_r+0x64>
   194e8:	e7ab      	b.n	19442 <__sflush_r+0x66>
   194ea:	bf00      	nop

000194ec <_fflush_r>:
   194ec:	b538      	push	{r3, r4, r5, lr}
   194ee:	4605      	mov	r5, r0
   194f0:	460c      	mov	r4, r1
   194f2:	b108      	cbz	r0, 194f8 <_fflush_r+0xc>
   194f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   194f6:	b1a3      	cbz	r3, 19522 <_fflush_r+0x36>
   194f8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   194fc:	b1b8      	cbz	r0, 1952e <_fflush_r+0x42>
   194fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19500:	07db      	lsls	r3, r3, #31
   19502:	d401      	bmi.n	19508 <_fflush_r+0x1c>
   19504:	0581      	lsls	r1, r0, #22
   19506:	d515      	bpl.n	19534 <_fflush_r+0x48>
   19508:	4628      	mov	r0, r5
   1950a:	4621      	mov	r1, r4
   1950c:	f7ff ff66 	bl	193dc <__sflush_r>
   19510:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19512:	4605      	mov	r5, r0
   19514:	07da      	lsls	r2, r3, #31
   19516:	d402      	bmi.n	1951e <_fflush_r+0x32>
   19518:	89a3      	ldrh	r3, [r4, #12]
   1951a:	059b      	lsls	r3, r3, #22
   1951c:	d50e      	bpl.n	1953c <_fflush_r+0x50>
   1951e:	4628      	mov	r0, r5
   19520:	bd38      	pop	{r3, r4, r5, pc}
   19522:	f000 f817 	bl	19554 <__sinit>
   19526:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1952a:	2800      	cmp	r0, #0
   1952c:	d1e7      	bne.n	194fe <_fflush_r+0x12>
   1952e:	4605      	mov	r5, r0
   19530:	4628      	mov	r0, r5
   19532:	bd38      	pop	{r3, r4, r5, pc}
   19534:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19536:	f006 fd7c 	bl	20032 <__retarget_lock_acquire_recursive>
   1953a:	e7e5      	b.n	19508 <_fflush_r+0x1c>
   1953c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1953e:	f006 fd7e 	bl	2003e <__retarget_lock_release_recursive>
   19542:	4628      	mov	r0, r5
   19544:	bd38      	pop	{r3, r4, r5, pc}
   19546:	bf00      	nop

00019548 <_cleanup_r>:
   19548:	4901      	ldr	r1, [pc, #4]	; (19550 <_cleanup_r+0x8>)
   1954a:	f000 b9d7 	b.w	198fc <_fwalk_reent>
   1954e:	bf00      	nop
   19550:	000194ed 	.word	0x000194ed

00019554 <__sinit>:
   19554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19558:	4682      	mov	sl, r0
   1955a:	483a      	ldr	r0, [pc, #232]	; (19644 <__sinit+0xf0>)
   1955c:	f006 fd69 	bl	20032 <__retarget_lock_acquire_recursive>
   19560:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   19564:	2c00      	cmp	r4, #0
   19566:	d168      	bne.n	1963a <__sinit+0xe6>
   19568:	4a37      	ldr	r2, [pc, #220]	; (19648 <__sinit+0xf4>)
   1956a:	2303      	movs	r3, #3
   1956c:	f8da 5004 	ldr.w	r5, [sl, #4]
   19570:	4621      	mov	r1, r4
   19572:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
   19576:	f50a 72ac 	add.w	r2, sl, #344	; 0x158
   1957a:	f8ca 3150 	str.w	r3, [sl, #336]	; 0x150
   1957e:	2304      	movs	r3, #4
   19580:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1964c <__sinit+0xf8>
   19584:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   19588:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 19650 <__sinit+0xfc>
   1958c:	4f31      	ldr	r7, [pc, #196]	; (19654 <__sinit+0x100>)
   1958e:	4e32      	ldr	r6, [pc, #200]	; (19658 <__sinit+0x104>)
   19590:	f8ca 2154 	str.w	r2, [sl, #340]	; 0x154
   19594:	2208      	movs	r2, #8
   19596:	f8ca 414c 	str.w	r4, [sl, #332]	; 0x14c
   1959a:	60eb      	str	r3, [r5, #12]
   1959c:	60ac      	str	r4, [r5, #8]
   1959e:	666c      	str	r4, [r5, #100]	; 0x64
   195a0:	61ac      	str	r4, [r5, #24]
   195a2:	e9c5 4400 	strd	r4, r4, [r5]
   195a6:	e9c5 4404 	strd	r4, r4, [r5, #16]
   195aa:	f7fd ff15 	bl	173d8 <memset>
   195ae:	f105 0058 	add.w	r0, r5, #88	; 0x58
   195b2:	62ee      	str	r6, [r5, #44]	; 0x2c
   195b4:	e9c5 5907 	strd	r5, r9, [r5, #28]
   195b8:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   195bc:	f006 fd2d 	bl	2001a <__retarget_lock_init_recursive>
   195c0:	f8da 5008 	ldr.w	r5, [sl, #8]
   195c4:	4b25      	ldr	r3, [pc, #148]	; (1965c <__sinit+0x108>)
   195c6:	4621      	mov	r1, r4
   195c8:	2208      	movs	r2, #8
   195ca:	60ac      	str	r4, [r5, #8]
   195cc:	60eb      	str	r3, [r5, #12]
   195ce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   195d2:	666c      	str	r4, [r5, #100]	; 0x64
   195d4:	61ac      	str	r4, [r5, #24]
   195d6:	e9c5 4400 	strd	r4, r4, [r5]
   195da:	e9c5 4404 	strd	r4, r4, [r5, #16]
   195de:	f7fd fefb 	bl	173d8 <memset>
   195e2:	f105 0058 	add.w	r0, r5, #88	; 0x58
   195e6:	62ee      	str	r6, [r5, #44]	; 0x2c
   195e8:	e9c5 5907 	strd	r5, r9, [r5, #28]
   195ec:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   195f0:	f006 fd13 	bl	2001a <__retarget_lock_init_recursive>
   195f4:	f8da 500c 	ldr.w	r5, [sl, #12]
   195f8:	4b19      	ldr	r3, [pc, #100]	; (19660 <__sinit+0x10c>)
   195fa:	4621      	mov	r1, r4
   195fc:	2208      	movs	r2, #8
   195fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   19602:	60eb      	str	r3, [r5, #12]
   19604:	60ac      	str	r4, [r5, #8]
   19606:	666c      	str	r4, [r5, #100]	; 0x64
   19608:	61ac      	str	r4, [r5, #24]
   1960a:	e9c5 4400 	strd	r4, r4, [r5]
   1960e:	e9c5 4404 	strd	r4, r4, [r5, #16]
   19612:	f7fd fee1 	bl	173d8 <memset>
   19616:	f105 0058 	add.w	r0, r5, #88	; 0x58
   1961a:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   1961e:	e9c5 5907 	strd	r5, r9, [r5, #28]
   19622:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   19626:	f006 fcf8 	bl	2001a <__retarget_lock_init_recursive>
   1962a:	2301      	movs	r3, #1
   1962c:	4805      	ldr	r0, [pc, #20]	; (19644 <__sinit+0xf0>)
   1962e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   19632:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19636:	f006 bd02 	b.w	2003e <__retarget_lock_release_recursive>
   1963a:	4802      	ldr	r0, [pc, #8]	; (19644 <__sinit+0xf0>)
   1963c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19640:	f006 bcfd 	b.w	2003e <__retarget_lock_release_recursive>
   19644:	200011fc 	.word	0x200011fc
   19648:	00019549 	.word	0x00019549
   1964c:	0001a17d 	.word	0x0001a17d
   19650:	0001a1a1 	.word	0x0001a1a1
   19654:	0001a1e1 	.word	0x0001a1e1
   19658:	0001a209 	.word	0x0001a209
   1965c:	00010009 	.word	0x00010009
   19660:	00020012 	.word	0x00020012

00019664 <_malloc_trim_r>:
   19664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19666:	4f22      	ldr	r7, [pc, #136]	; (196f0 <_malloc_trim_r+0x8c>)
   19668:	460c      	mov	r4, r1
   1966a:	4606      	mov	r6, r0
   1966c:	f7fd ff08 	bl	17480 <__malloc_lock>
   19670:	68bb      	ldr	r3, [r7, #8]
   19672:	685d      	ldr	r5, [r3, #4]
   19674:	f025 0503 	bic.w	r5, r5, #3
   19678:	f605 73ef 	addw	r3, r5, #4079	; 0xfef
   1967c:	1b19      	subs	r1, r3, r4
   1967e:	4c1d      	ldr	r4, [pc, #116]	; (196f4 <_malloc_trim_r+0x90>)
   19680:	400c      	ands	r4, r1
   19682:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
   19686:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1968a:	db07      	blt.n	1969c <_malloc_trim_r+0x38>
   1968c:	2100      	movs	r1, #0
   1968e:	4630      	mov	r0, r6
   19690:	f7fd ff02 	bl	17498 <_sbrk_r>
   19694:	68bb      	ldr	r3, [r7, #8]
   19696:	442b      	add	r3, r5
   19698:	4298      	cmp	r0, r3
   1969a:	d004      	beq.n	196a6 <_malloc_trim_r+0x42>
   1969c:	4630      	mov	r0, r6
   1969e:	f7fd fef5 	bl	1748c <__malloc_unlock>
   196a2:	2000      	movs	r0, #0
   196a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196a6:	4261      	negs	r1, r4
   196a8:	4630      	mov	r0, r6
   196aa:	f7fd fef5 	bl	17498 <_sbrk_r>
   196ae:	3001      	adds	r0, #1
   196b0:	d00d      	beq.n	196ce <_malloc_trim_r+0x6a>
   196b2:	1b2d      	subs	r5, r5, r4
   196b4:	4a10      	ldr	r2, [pc, #64]	; (196f8 <_malloc_trim_r+0x94>)
   196b6:	68bb      	ldr	r3, [r7, #8]
   196b8:	4630      	mov	r0, r6
   196ba:	f045 0501 	orr.w	r5, r5, #1
   196be:	605d      	str	r5, [r3, #4]
   196c0:	6813      	ldr	r3, [r2, #0]
   196c2:	1b1b      	subs	r3, r3, r4
   196c4:	6013      	str	r3, [r2, #0]
   196c6:	f7fd fee1 	bl	1748c <__malloc_unlock>
   196ca:	2001      	movs	r0, #1
   196cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196ce:	2100      	movs	r1, #0
   196d0:	4630      	mov	r0, r6
   196d2:	f7fd fee1 	bl	17498 <_sbrk_r>
   196d6:	68ba      	ldr	r2, [r7, #8]
   196d8:	1a83      	subs	r3, r0, r2
   196da:	2b0f      	cmp	r3, #15
   196dc:	ddde      	ble.n	1969c <_malloc_trim_r+0x38>
   196de:	f043 0301 	orr.w	r3, r3, #1
   196e2:	4905      	ldr	r1, [pc, #20]	; (196f8 <_malloc_trim_r+0x94>)
   196e4:	6053      	str	r3, [r2, #4]
   196e6:	4b05      	ldr	r3, [pc, #20]	; (196fc <_malloc_trim_r+0x98>)
   196e8:	681b      	ldr	r3, [r3, #0]
   196ea:	1ac0      	subs	r0, r0, r3
   196ec:	6008      	str	r0, [r1, #0]
   196ee:	e7d5      	b.n	1969c <_malloc_trim_r+0x38>
   196f0:	20000290 	.word	0x20000290
   196f4:	fffff000 	.word	0xfffff000
   196f8:	2000481c 	.word	0x2000481c
   196fc:	20000a74 	.word	0x20000a74

00019700 <_free_r>:
   19700:	2900      	cmp	r1, #0
   19702:	d07c      	beq.n	197fe <_free_r+0xfe>
   19704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19706:	460c      	mov	r4, r1
   19708:	4606      	mov	r6, r0
   1970a:	f7fd feb9 	bl	17480 <__malloc_lock>
   1970e:	4f78      	ldr	r7, [pc, #480]	; (198f0 <_free_r+0x1f0>)
   19710:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19714:	f1a4 0508 	sub.w	r5, r4, #8
   19718:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1971c:	f023 0101 	bic.w	r1, r3, #1
   19720:	1868      	adds	r0, r5, r1
   19722:	6842      	ldr	r2, [r0, #4]
   19724:	4584      	cmp	ip, r0
   19726:	f022 0203 	bic.w	r2, r2, #3
   1972a:	f000 8083 	beq.w	19834 <_free_r+0x134>
   1972e:	07db      	lsls	r3, r3, #31
   19730:	eb00 0c02 	add.w	ip, r0, r2
   19734:	6042      	str	r2, [r0, #4]
   19736:	d433      	bmi.n	197a0 <_free_r+0xa0>
   19738:	f854 4c08 	ldr.w	r4, [r4, #-8]
   1973c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   19740:	f107 0c08 	add.w	ip, r7, #8
   19744:	1b2d      	subs	r5, r5, r4
   19746:	4421      	add	r1, r4
   19748:	f003 0301 	and.w	r3, r3, #1
   1974c:	68ac      	ldr	r4, [r5, #8]
   1974e:	4564      	cmp	r4, ip
   19750:	d064      	beq.n	1981c <_free_r+0x11c>
   19752:	f8d5 e00c 	ldr.w	lr, [r5, #12]
   19756:	f8c4 e00c 	str.w	lr, [r4, #12]
   1975a:	f8ce 4008 	str.w	r4, [lr, #8]
   1975e:	2b00      	cmp	r3, #0
   19760:	f000 8081 	beq.w	19866 <_free_r+0x166>
   19764:	f041 0301 	orr.w	r3, r1, #1
   19768:	606b      	str	r3, [r5, #4]
   1976a:	6001      	str	r1, [r0, #0]
   1976c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   19770:	d222      	bcs.n	197b8 <_free_r+0xb8>
   19772:	08cb      	lsrs	r3, r1, #3
   19774:	2201      	movs	r2, #1
   19776:	0949      	lsrs	r1, r1, #5
   19778:	3301      	adds	r3, #1
   1977a:	408a      	lsls	r2, r1
   1977c:	6879      	ldr	r1, [r7, #4]
   1977e:	430a      	orrs	r2, r1
   19780:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   19784:	607a      	str	r2, [r7, #4]
   19786:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1978a:	3a08      	subs	r2, #8
   1978c:	e9c5 1202 	strd	r1, r2, [r5, #8]
   19790:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   19794:	60cd      	str	r5, [r1, #12]
   19796:	4630      	mov	r0, r6
   19798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1979c:	f7fd be76 	b.w	1748c <__malloc_unlock>
   197a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   197a4:	07db      	lsls	r3, r3, #31
   197a6:	d52b      	bpl.n	19800 <_free_r+0x100>
   197a8:	f041 0301 	orr.w	r3, r1, #1
   197ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   197b0:	f844 3c04 	str.w	r3, [r4, #-4]
   197b4:	6001      	str	r1, [r0, #0]
   197b6:	d3dc      	bcc.n	19772 <_free_r+0x72>
   197b8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   197bc:	ea4f 2351 	mov.w	r3, r1, lsr #9
   197c0:	d253      	bcs.n	1986a <_free_r+0x16a>
   197c2:	098b      	lsrs	r3, r1, #6
   197c4:	f103 0039 	add.w	r0, r3, #57	; 0x39
   197c8:	f103 0238 	add.w	r2, r3, #56	; 0x38
   197cc:	00c3      	lsls	r3, r0, #3
   197ce:	18f8      	adds	r0, r7, r3
   197d0:	58fb      	ldr	r3, [r7, r3]
   197d2:	3808      	subs	r0, #8
   197d4:	4298      	cmp	r0, r3
   197d6:	d103      	bne.n	197e0 <_free_r+0xe0>
   197d8:	e063      	b.n	198a2 <_free_r+0x1a2>
   197da:	689b      	ldr	r3, [r3, #8]
   197dc:	4298      	cmp	r0, r3
   197de:	d004      	beq.n	197ea <_free_r+0xea>
   197e0:	685a      	ldr	r2, [r3, #4]
   197e2:	f022 0203 	bic.w	r2, r2, #3
   197e6:	428a      	cmp	r2, r1
   197e8:	d8f7      	bhi.n	197da <_free_r+0xda>
   197ea:	68d8      	ldr	r0, [r3, #12]
   197ec:	e9c5 3002 	strd	r3, r0, [r5, #8]
   197f0:	6085      	str	r5, [r0, #8]
   197f2:	4630      	mov	r0, r6
   197f4:	60dd      	str	r5, [r3, #12]
   197f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   197fa:	f7fd be47 	b.w	1748c <__malloc_unlock>
   197fe:	4770      	bx	lr
   19800:	4411      	add	r1, r2
   19802:	f107 0c08 	add.w	ip, r7, #8
   19806:	6883      	ldr	r3, [r0, #8]
   19808:	4563      	cmp	r3, ip
   1980a:	d03f      	beq.n	1988c <_free_r+0x18c>
   1980c:	68c2      	ldr	r2, [r0, #12]
   1980e:	60da      	str	r2, [r3, #12]
   19810:	6093      	str	r3, [r2, #8]
   19812:	f041 0301 	orr.w	r3, r1, #1
   19816:	606b      	str	r3, [r5, #4]
   19818:	5069      	str	r1, [r5, r1]
   1981a:	e7a7      	b.n	1976c <_free_r+0x6c>
   1981c:	2b00      	cmp	r3, #0
   1981e:	d161      	bne.n	198e4 <_free_r+0x1e4>
   19820:	440a      	add	r2, r1
   19822:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   19826:	60cb      	str	r3, [r1, #12]
   19828:	6099      	str	r1, [r3, #8]
   1982a:	f042 0301 	orr.w	r3, r2, #1
   1982e:	606b      	str	r3, [r5, #4]
   19830:	50aa      	str	r2, [r5, r2]
   19832:	e7b0      	b.n	19796 <_free_r+0x96>
   19834:	440a      	add	r2, r1
   19836:	07d9      	lsls	r1, r3, #31
   19838:	d407      	bmi.n	1984a <_free_r+0x14a>
   1983a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1983e:	1aed      	subs	r5, r5, r3
   19840:	441a      	add	r2, r3
   19842:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
   19846:	60cb      	str	r3, [r1, #12]
   19848:	6099      	str	r1, [r3, #8]
   1984a:	f042 0301 	orr.w	r3, r2, #1
   1984e:	606b      	str	r3, [r5, #4]
   19850:	4b28      	ldr	r3, [pc, #160]	; (198f4 <_free_r+0x1f4>)
   19852:	60bd      	str	r5, [r7, #8]
   19854:	681b      	ldr	r3, [r3, #0]
   19856:	4293      	cmp	r3, r2
   19858:	d89d      	bhi.n	19796 <_free_r+0x96>
   1985a:	4b27      	ldr	r3, [pc, #156]	; (198f8 <_free_r+0x1f8>)
   1985c:	4630      	mov	r0, r6
   1985e:	6819      	ldr	r1, [r3, #0]
   19860:	f7ff ff00 	bl	19664 <_malloc_trim_r>
   19864:	e797      	b.n	19796 <_free_r+0x96>
   19866:	4411      	add	r1, r2
   19868:	e7cd      	b.n	19806 <_free_r+0x106>
   1986a:	2b14      	cmp	r3, #20
   1986c:	d908      	bls.n	19880 <_free_r+0x180>
   1986e:	2b54      	cmp	r3, #84	; 0x54
   19870:	d81f      	bhi.n	198b2 <_free_r+0x1b2>
   19872:	0b0b      	lsrs	r3, r1, #12
   19874:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   19878:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1987c:	00c3      	lsls	r3, r0, #3
   1987e:	e7a6      	b.n	197ce <_free_r+0xce>
   19880:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   19884:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   19888:	00c3      	lsls	r3, r0, #3
   1988a:	e7a0      	b.n	197ce <_free_r+0xce>
   1988c:	f041 0301 	orr.w	r3, r1, #1
   19890:	613d      	str	r5, [r7, #16]
   19892:	617d      	str	r5, [r7, #20]
   19894:	f8c5 c008 	str.w	ip, [r5, #8]
   19898:	f8c5 c00c 	str.w	ip, [r5, #12]
   1989c:	606b      	str	r3, [r5, #4]
   1989e:	5069      	str	r1, [r5, r1]
   198a0:	e779      	b.n	19796 <_free_r+0x96>
   198a2:	2101      	movs	r1, #1
   198a4:	1092      	asrs	r2, r2, #2
   198a6:	fa01 f202 	lsl.w	r2, r1, r2
   198aa:	6879      	ldr	r1, [r7, #4]
   198ac:	430a      	orrs	r2, r1
   198ae:	607a      	str	r2, [r7, #4]
   198b0:	e79c      	b.n	197ec <_free_r+0xec>
   198b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   198b6:	d806      	bhi.n	198c6 <_free_r+0x1c6>
   198b8:	0bcb      	lsrs	r3, r1, #15
   198ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
   198be:	f103 0277 	add.w	r2, r3, #119	; 0x77
   198c2:	00c3      	lsls	r3, r0, #3
   198c4:	e783      	b.n	197ce <_free_r+0xce>
   198c6:	f240 5254 	movw	r2, #1364	; 0x554
   198ca:	4293      	cmp	r3, r2
   198cc:	d806      	bhi.n	198dc <_free_r+0x1dc>
   198ce:	0c8b      	lsrs	r3, r1, #18
   198d0:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   198d4:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   198d8:	00c3      	lsls	r3, r0, #3
   198da:	e778      	b.n	197ce <_free_r+0xce>
   198dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   198e0:	227e      	movs	r2, #126	; 0x7e
   198e2:	e774      	b.n	197ce <_free_r+0xce>
   198e4:	f041 0301 	orr.w	r3, r1, #1
   198e8:	606b      	str	r3, [r5, #4]
   198ea:	6001      	str	r1, [r0, #0]
   198ec:	e753      	b.n	19796 <_free_r+0x96>
   198ee:	bf00      	nop
   198f0:	20000290 	.word	0x20000290
   198f4:	20000a78 	.word	0x20000a78
   198f8:	2000484c 	.word	0x2000484c

000198fc <_fwalk_reent>:
   198fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19900:	f04f 0900 	mov.w	r9, #0
   19904:	4606      	mov	r6, r0
   19906:	4688      	mov	r8, r1
   19908:	f500 77a6 	add.w	r7, r0, #332	; 0x14c
   1990c:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   19910:	3d01      	subs	r5, #1
   19912:	d410      	bmi.n	19936 <_fwalk_reent+0x3a>
   19914:	89a3      	ldrh	r3, [r4, #12]
   19916:	3d01      	subs	r5, #1
   19918:	2b01      	cmp	r3, #1
   1991a:	d908      	bls.n	1992e <_fwalk_reent+0x32>
   1991c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   19920:	4621      	mov	r1, r4
   19922:	4630      	mov	r0, r6
   19924:	3301      	adds	r3, #1
   19926:	d002      	beq.n	1992e <_fwalk_reent+0x32>
   19928:	47c0      	blx	r8
   1992a:	ea49 0900 	orr.w	r9, r9, r0
   1992e:	1c6b      	adds	r3, r5, #1
   19930:	f104 0468 	add.w	r4, r4, #104	; 0x68
   19934:	d1ee      	bne.n	19914 <_fwalk_reent+0x18>
   19936:	683f      	ldr	r7, [r7, #0]
   19938:	2f00      	cmp	r7, #0
   1993a:	d1e7      	bne.n	1990c <_fwalk_reent+0x10>
   1993c:	4648      	mov	r0, r9
   1993e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19942:	bf00      	nop

00019944 <_localeconv_r>:
   19944:	4800      	ldr	r0, [pc, #0]	; (19948 <_localeconv_r+0x4>)
   19946:	4770      	bx	lr
   19948:	20000b6c 	.word	0x20000b6c

0001994c <__smakebuf_r>:
   1994c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   19950:	b5f0      	push	{r4, r5, r6, r7, lr}
   19952:	460c      	mov	r4, r1
   19954:	0799      	lsls	r1, r3, #30
   19956:	b097      	sub	sp, #92	; 0x5c
   19958:	d507      	bpl.n	1996a <__smakebuf_r+0x1e>
   1995a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1995e:	2201      	movs	r2, #1
   19960:	6023      	str	r3, [r4, #0]
   19962:	e9c4 3204 	strd	r3, r2, [r4, #16]
   19966:	b017      	add	sp, #92	; 0x5c
   19968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1996a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1996e:	4605      	mov	r5, r0
   19970:	2900      	cmp	r1, #0
   19972:	db2e      	blt.n	199d2 <__smakebuf_r+0x86>
   19974:	466a      	mov	r2, sp
   19976:	f001 fc41 	bl	1b1fc <_fstat_r>
   1997a:	2800      	cmp	r0, #0
   1997c:	db27      	blt.n	199ce <__smakebuf_r+0x82>
   1997e:	9e01      	ldr	r6, [sp, #4]
   19980:	f44f 6780 	mov.w	r7, #1024	; 0x400
   19984:	4628      	mov	r0, r5
   19986:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
   1998a:	4639      	mov	r1, r7
   1998c:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   19990:	fab6 f686 	clz	r6, r6
   19994:	0976      	lsrs	r6, r6, #5
   19996:	f7fd f94f 	bl	16c38 <_malloc_r>
   1999a:	b340      	cbz	r0, 199ee <__smakebuf_r+0xa2>
   1999c:	89a3      	ldrh	r3, [r4, #12]
   1999e:	4a1c      	ldr	r2, [pc, #112]	; (19a10 <__smakebuf_r+0xc4>)
   199a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   199a4:	63ea      	str	r2, [r5, #60]	; 0x3c
   199a6:	81a3      	strh	r3, [r4, #12]
   199a8:	6020      	str	r0, [r4, #0]
   199aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
   199ae:	2e00      	cmp	r6, #0
   199b0:	d0d9      	beq.n	19966 <__smakebuf_r+0x1a>
   199b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   199b6:	4628      	mov	r0, r5
   199b8:	f001 fdb2 	bl	1b520 <_isatty_r>
   199bc:	2800      	cmp	r0, #0
   199be:	d0d2      	beq.n	19966 <__smakebuf_r+0x1a>
   199c0:	89a3      	ldrh	r3, [r4, #12]
   199c2:	f023 0303 	bic.w	r3, r3, #3
   199c6:	f043 0301 	orr.w	r3, r3, #1
   199ca:	81a3      	strh	r3, [r4, #12]
   199cc:	e7cb      	b.n	19966 <__smakebuf_r+0x1a>
   199ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   199d2:	f013 0f80 	tst.w	r3, #128	; 0x80
   199d6:	4628      	mov	r0, r5
   199d8:	f04f 0600 	mov.w	r6, #0
   199dc:	bf0c      	ite	eq
   199de:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   199e2:	2740      	movne	r7, #64	; 0x40
   199e4:	4639      	mov	r1, r7
   199e6:	f7fd f927 	bl	16c38 <_malloc_r>
   199ea:	2800      	cmp	r0, #0
   199ec:	d1d6      	bne.n	1999c <__smakebuf_r+0x50>
   199ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   199f2:	059a      	lsls	r2, r3, #22
   199f4:	d4b7      	bmi.n	19966 <__smakebuf_r+0x1a>
   199f6:	f023 0303 	bic.w	r3, r3, #3
   199fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   199fe:	2101      	movs	r1, #1
   19a00:	f043 0302 	orr.w	r3, r3, #2
   19a04:	6022      	str	r2, [r4, #0]
   19a06:	e9c4 2104 	strd	r2, r1, [r4, #16]
   19a0a:	81a3      	strh	r3, [r4, #12]
   19a0c:	e7ab      	b.n	19966 <__smakebuf_r+0x1a>
   19a0e:	bf00      	nop
   19a10:	00019549 	.word	0x00019549

00019a14 <_Balloc>:
   19a14:	b538      	push	{r3, r4, r5, lr}
   19a16:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19a18:	4605      	mov	r5, r0
   19a1a:	460c      	mov	r4, r1
   19a1c:	b14b      	cbz	r3, 19a32 <_Balloc+0x1e>
   19a1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   19a22:	b180      	cbz	r0, 19a46 <_Balloc+0x32>
   19a24:	6802      	ldr	r2, [r0, #0]
   19a26:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   19a2a:	2300      	movs	r3, #0
   19a2c:	60c3      	str	r3, [r0, #12]
   19a2e:	6103      	str	r3, [r0, #16]
   19a30:	bd38      	pop	{r3, r4, r5, pc}
   19a32:	2221      	movs	r2, #33	; 0x21
   19a34:	2104      	movs	r1, #4
   19a36:	f7fd f8bf 	bl	16bb8 <_calloc_r>
   19a3a:	4603      	mov	r3, r0
   19a3c:	64e8      	str	r0, [r5, #76]	; 0x4c
   19a3e:	2800      	cmp	r0, #0
   19a40:	d1ed      	bne.n	19a1e <_Balloc+0xa>
   19a42:	2000      	movs	r0, #0
   19a44:	bd38      	pop	{r3, r4, r5, pc}
   19a46:	2101      	movs	r1, #1
   19a48:	4628      	mov	r0, r5
   19a4a:	fa01 f504 	lsl.w	r5, r1, r4
   19a4e:	1d6a      	adds	r2, r5, #5
   19a50:	0092      	lsls	r2, r2, #2
   19a52:	f7fd f8b1 	bl	16bb8 <_calloc_r>
   19a56:	2800      	cmp	r0, #0
   19a58:	d0f3      	beq.n	19a42 <_Balloc+0x2e>
   19a5a:	e9c0 4501 	strd	r4, r5, [r0, #4]
   19a5e:	e7e4      	b.n	19a2a <_Balloc+0x16>

00019a60 <_Bfree>:
   19a60:	b131      	cbz	r1, 19a70 <_Bfree+0x10>
   19a62:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19a64:	684a      	ldr	r2, [r1, #4]
   19a66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   19a6a:	6008      	str	r0, [r1, #0]
   19a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   19a70:	4770      	bx	lr
   19a72:	bf00      	nop

00019a74 <__multadd>:
   19a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a78:	4607      	mov	r7, r0
   19a7a:	460e      	mov	r6, r1
   19a7c:	461c      	mov	r4, r3
   19a7e:	690d      	ldr	r5, [r1, #16]
   19a80:	f101 0e14 	add.w	lr, r1, #20
   19a84:	2000      	movs	r0, #0
   19a86:	f8de 1000 	ldr.w	r1, [lr]
   19a8a:	3001      	adds	r0, #1
   19a8c:	b28b      	uxth	r3, r1
   19a8e:	4285      	cmp	r5, r0
   19a90:	ea4f 4111 	mov.w	r1, r1, lsr #16
   19a94:	fb02 4303 	mla	r3, r2, r3, r4
   19a98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   19a9c:	b29b      	uxth	r3, r3
   19a9e:	fb02 cc01 	mla	ip, r2, r1, ip
   19aa2:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   19aa6:	ea4f 441c 	mov.w	r4, ip, lsr #16
   19aaa:	f84e 3b04 	str.w	r3, [lr], #4
   19aae:	dcea      	bgt.n	19a86 <__multadd+0x12>
   19ab0:	b13c      	cbz	r4, 19ac2 <__multadd+0x4e>
   19ab2:	68b3      	ldr	r3, [r6, #8]
   19ab4:	42ab      	cmp	r3, r5
   19ab6:	dd07      	ble.n	19ac8 <__multadd+0x54>
   19ab8:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   19abc:	3501      	adds	r5, #1
   19abe:	615c      	str	r4, [r3, #20]
   19ac0:	6135      	str	r5, [r6, #16]
   19ac2:	4630      	mov	r0, r6
   19ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ac8:	6871      	ldr	r1, [r6, #4]
   19aca:	4638      	mov	r0, r7
   19acc:	3101      	adds	r1, #1
   19ace:	f7ff ffa1 	bl	19a14 <_Balloc>
   19ad2:	4680      	mov	r8, r0
   19ad4:	b1a8      	cbz	r0, 19b02 <__multadd+0x8e>
   19ad6:	6932      	ldr	r2, [r6, #16]
   19ad8:	f106 010c 	add.w	r1, r6, #12
   19adc:	300c      	adds	r0, #12
   19ade:	3202      	adds	r2, #2
   19ae0:	0092      	lsls	r2, r2, #2
   19ae2:	f7e7 f837 	bl	b54 <memcpy>
   19ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19ae8:	6872      	ldr	r2, [r6, #4]
   19aea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   19aee:	6031      	str	r1, [r6, #0]
   19af0:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   19af4:	4646      	mov	r6, r8
   19af6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   19afa:	3501      	adds	r5, #1
   19afc:	615c      	str	r4, [r3, #20]
   19afe:	6135      	str	r5, [r6, #16]
   19b00:	e7df      	b.n	19ac2 <__multadd+0x4e>
   19b02:	4602      	mov	r2, r0
   19b04:	4b02      	ldr	r3, [pc, #8]	; (19b10 <__multadd+0x9c>)
   19b06:	21b5      	movs	r1, #181	; 0xb5
   19b08:	4802      	ldr	r0, [pc, #8]	; (19b14 <__multadd+0xa0>)
   19b0a:	f001 fb33 	bl	1b174 <__assert_func>
   19b0e:	bf00      	nop
   19b10:	00031338 	.word	0x00031338
   19b14:	000313bc 	.word	0x000313bc

00019b18 <__hi0bits>:
   19b18:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   19b1c:	4603      	mov	r3, r0
   19b1e:	d218      	bcs.n	19b52 <__hi0bits+0x3a>
   19b20:	0403      	lsls	r3, r0, #16
   19b22:	2010      	movs	r0, #16
   19b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   19b28:	d201      	bcs.n	19b2e <__hi0bits+0x16>
   19b2a:	3008      	adds	r0, #8
   19b2c:	021b      	lsls	r3, r3, #8
   19b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   19b32:	d201      	bcs.n	19b38 <__hi0bits+0x20>
   19b34:	3004      	adds	r0, #4
   19b36:	011b      	lsls	r3, r3, #4
   19b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   19b3c:	d303      	bcc.n	19b46 <__hi0bits+0x2e>
   19b3e:	2b00      	cmp	r3, #0
   19b40:	db06      	blt.n	19b50 <__hi0bits+0x38>
   19b42:	3001      	adds	r0, #1
   19b44:	4770      	bx	lr
   19b46:	009b      	lsls	r3, r3, #2
   19b48:	d405      	bmi.n	19b56 <__hi0bits+0x3e>
   19b4a:	005b      	lsls	r3, r3, #1
   19b4c:	d405      	bmi.n	19b5a <__hi0bits+0x42>
   19b4e:	2020      	movs	r0, #32
   19b50:	4770      	bx	lr
   19b52:	2000      	movs	r0, #0
   19b54:	e7e6      	b.n	19b24 <__hi0bits+0xc>
   19b56:	3002      	adds	r0, #2
   19b58:	4770      	bx	lr
   19b5a:	3003      	adds	r0, #3
   19b5c:	4770      	bx	lr
   19b5e:	bf00      	nop

00019b60 <__lo0bits>:
   19b60:	6803      	ldr	r3, [r0, #0]
   19b62:	4601      	mov	r1, r0
   19b64:	f013 0207 	ands.w	r2, r3, #7
   19b68:	d007      	beq.n	19b7a <__lo0bits+0x1a>
   19b6a:	07da      	lsls	r2, r3, #31
   19b6c:	d41f      	bmi.n	19bae <__lo0bits+0x4e>
   19b6e:	0798      	lsls	r0, r3, #30
   19b70:	d521      	bpl.n	19bb6 <__lo0bits+0x56>
   19b72:	085b      	lsrs	r3, r3, #1
   19b74:	2001      	movs	r0, #1
   19b76:	600b      	str	r3, [r1, #0]
   19b78:	4770      	bx	lr
   19b7a:	b298      	uxth	r0, r3
   19b7c:	b1a0      	cbz	r0, 19ba8 <__lo0bits+0x48>
   19b7e:	4610      	mov	r0, r2
   19b80:	b2da      	uxtb	r2, r3
   19b82:	b90a      	cbnz	r2, 19b88 <__lo0bits+0x28>
   19b84:	3008      	adds	r0, #8
   19b86:	0a1b      	lsrs	r3, r3, #8
   19b88:	071a      	lsls	r2, r3, #28
   19b8a:	d101      	bne.n	19b90 <__lo0bits+0x30>
   19b8c:	3004      	adds	r0, #4
   19b8e:	091b      	lsrs	r3, r3, #4
   19b90:	079a      	lsls	r2, r3, #30
   19b92:	d101      	bne.n	19b98 <__lo0bits+0x38>
   19b94:	3002      	adds	r0, #2
   19b96:	089b      	lsrs	r3, r3, #2
   19b98:	07da      	lsls	r2, r3, #31
   19b9a:	d403      	bmi.n	19ba4 <__lo0bits+0x44>
   19b9c:	085b      	lsrs	r3, r3, #1
   19b9e:	f100 0001 	add.w	r0, r0, #1
   19ba2:	d006      	beq.n	19bb2 <__lo0bits+0x52>
   19ba4:	600b      	str	r3, [r1, #0]
   19ba6:	4770      	bx	lr
   19ba8:	0c1b      	lsrs	r3, r3, #16
   19baa:	2010      	movs	r0, #16
   19bac:	e7e8      	b.n	19b80 <__lo0bits+0x20>
   19bae:	2000      	movs	r0, #0
   19bb0:	4770      	bx	lr
   19bb2:	2020      	movs	r0, #32
   19bb4:	4770      	bx	lr
   19bb6:	089b      	lsrs	r3, r3, #2
   19bb8:	2002      	movs	r0, #2
   19bba:	600b      	str	r3, [r1, #0]
   19bbc:	4770      	bx	lr
   19bbe:	bf00      	nop

00019bc0 <__i2b>:
   19bc0:	b538      	push	{r3, r4, r5, lr}
   19bc2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19bc4:	4604      	mov	r4, r0
   19bc6:	460d      	mov	r5, r1
   19bc8:	b14b      	cbz	r3, 19bde <__i2b+0x1e>
   19bca:	6858      	ldr	r0, [r3, #4]
   19bcc:	b1b0      	cbz	r0, 19bfc <__i2b+0x3c>
   19bce:	6802      	ldr	r2, [r0, #0]
   19bd0:	605a      	str	r2, [r3, #4]
   19bd2:	2200      	movs	r2, #0
   19bd4:	2301      	movs	r3, #1
   19bd6:	6145      	str	r5, [r0, #20]
   19bd8:	60c2      	str	r2, [r0, #12]
   19bda:	6103      	str	r3, [r0, #16]
   19bdc:	bd38      	pop	{r3, r4, r5, pc}
   19bde:	2221      	movs	r2, #33	; 0x21
   19be0:	2104      	movs	r1, #4
   19be2:	f7fc ffe9 	bl	16bb8 <_calloc_r>
   19be6:	4603      	mov	r3, r0
   19be8:	64e0      	str	r0, [r4, #76]	; 0x4c
   19bea:	2800      	cmp	r0, #0
   19bec:	d1ed      	bne.n	19bca <__i2b+0xa>
   19bee:	4b09      	ldr	r3, [pc, #36]	; (19c14 <__i2b+0x54>)
   19bf0:	2200      	movs	r2, #0
   19bf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   19bf6:	4808      	ldr	r0, [pc, #32]	; (19c18 <__i2b+0x58>)
   19bf8:	f001 fabc 	bl	1b174 <__assert_func>
   19bfc:	221c      	movs	r2, #28
   19bfe:	2101      	movs	r1, #1
   19c00:	4620      	mov	r0, r4
   19c02:	f7fc ffd9 	bl	16bb8 <_calloc_r>
   19c06:	2800      	cmp	r0, #0
   19c08:	d0f1      	beq.n	19bee <__i2b+0x2e>
   19c0a:	2201      	movs	r2, #1
   19c0c:	2302      	movs	r3, #2
   19c0e:	6042      	str	r2, [r0, #4]
   19c10:	6083      	str	r3, [r0, #8]
   19c12:	e7de      	b.n	19bd2 <__i2b+0x12>
   19c14:	00031338 	.word	0x00031338
   19c18:	000313bc 	.word	0x000313bc

00019c1c <__multiply>:
   19c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c20:	f8d1 8010 	ldr.w	r8, [r1, #16]
   19c24:	b085      	sub	sp, #20
   19c26:	6915      	ldr	r5, [r2, #16]
   19c28:	460e      	mov	r6, r1
   19c2a:	4692      	mov	sl, r2
   19c2c:	45a8      	cmp	r8, r5
   19c2e:	db05      	blt.n	19c3c <__multiply+0x20>
   19c30:	462a      	mov	r2, r5
   19c32:	4653      	mov	r3, sl
   19c34:	4645      	mov	r5, r8
   19c36:	468a      	mov	sl, r1
   19c38:	4690      	mov	r8, r2
   19c3a:	461e      	mov	r6, r3
   19c3c:	eb05 0408 	add.w	r4, r5, r8
   19c40:	e9da 1301 	ldrd	r1, r3, [sl, #4]
   19c44:	42a3      	cmp	r3, r4
   19c46:	bfb8      	it	lt
   19c48:	3101      	addlt	r1, #1
   19c4a:	f7ff fee3 	bl	19a14 <_Balloc>
   19c4e:	2800      	cmp	r0, #0
   19c50:	f000 808b 	beq.w	19d6a <__multiply+0x14e>
   19c54:	f100 0714 	add.w	r7, r0, #20
   19c58:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
   19c5c:	4577      	cmp	r7, lr
   19c5e:	d205      	bcs.n	19c6c <__multiply+0x50>
   19c60:	463b      	mov	r3, r7
   19c62:	2200      	movs	r2, #0
   19c64:	f843 2b04 	str.w	r2, [r3], #4
   19c68:	459e      	cmp	lr, r3
   19c6a:	d8fb      	bhi.n	19c64 <__multiply+0x48>
   19c6c:	3614      	adds	r6, #20
   19c6e:	f10a 0914 	add.w	r9, sl, #20
   19c72:	eb06 0888 	add.w	r8, r6, r8, lsl #2
   19c76:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   19c7a:	4546      	cmp	r6, r8
   19c7c:	d268      	bcs.n	19d50 <__multiply+0x134>
   19c7e:	eba5 030a 	sub.w	r3, r5, sl
   19c82:	f10a 0a15 	add.w	sl, sl, #21
   19c86:	f8cd e008 	str.w	lr, [sp, #8]
   19c8a:	46ae      	mov	lr, r5
   19c8c:	3b15      	subs	r3, #21
   19c8e:	9403      	str	r4, [sp, #12]
   19c90:	f023 0303 	bic.w	r3, r3, #3
   19c94:	3304      	adds	r3, #4
   19c96:	4555      	cmp	r5, sl
   19c98:	bf2c      	ite	cs
   19c9a:	469b      	movcs	fp, r3
   19c9c:	f04f 0b04 	movcc.w	fp, #4
   19ca0:	4682      	mov	sl, r0
   19ca2:	e005      	b.n	19cb0 <__multiply+0x94>
   19ca4:	0c09      	lsrs	r1, r1, #16
   19ca6:	d12c      	bne.n	19d02 <__multiply+0xe6>
   19ca8:	45b0      	cmp	r8, r6
   19caa:	f107 0704 	add.w	r7, r7, #4
   19cae:	d94c      	bls.n	19d4a <__multiply+0x12e>
   19cb0:	f856 1b04 	ldr.w	r1, [r6], #4
   19cb4:	b28d      	uxth	r5, r1
   19cb6:	2d00      	cmp	r5, #0
   19cb8:	d0f4      	beq.n	19ca4 <__multiply+0x88>
   19cba:	46cc      	mov	ip, r9
   19cbc:	463c      	mov	r4, r7
   19cbe:	2300      	movs	r3, #0
   19cc0:	9601      	str	r6, [sp, #4]
   19cc2:	f85c 0b04 	ldr.w	r0, [ip], #4
   19cc6:	6821      	ldr	r1, [r4, #0]
   19cc8:	b286      	uxth	r6, r0
   19cca:	45e6      	cmp	lr, ip
   19ccc:	b28a      	uxth	r2, r1
   19cce:	ea4f 4010 	mov.w	r0, r0, lsr #16
   19cd2:	fb05 2206 	mla	r2, r5, r6, r2
   19cd6:	ea4f 4111 	mov.w	r1, r1, lsr #16
   19cda:	441a      	add	r2, r3
   19cdc:	fb05 1100 	mla	r1, r5, r0, r1
   19ce0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   19ce4:	b292      	uxth	r2, r2
   19ce6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   19cea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19cee:	f844 2b04 	str.w	r2, [r4], #4
   19cf2:	d8e6      	bhi.n	19cc2 <__multiply+0xa6>
   19cf4:	9e01      	ldr	r6, [sp, #4]
   19cf6:	f847 300b 	str.w	r3, [r7, fp]
   19cfa:	f856 1c04 	ldr.w	r1, [r6, #-4]
   19cfe:	0c09      	lsrs	r1, r1, #16
   19d00:	d0d2      	beq.n	19ca8 <__multiply+0x8c>
   19d02:	683b      	ldr	r3, [r7, #0]
   19d04:	2200      	movs	r2, #0
   19d06:	4648      	mov	r0, r9
   19d08:	463d      	mov	r5, r7
   19d0a:	461c      	mov	r4, r3
   19d0c:	4694      	mov	ip, r2
   19d0e:	8802      	ldrh	r2, [r0, #0]
   19d10:	b29b      	uxth	r3, r3
   19d12:	fb01 c202 	mla	r2, r1, r2, ip
   19d16:	eb02 4214 	add.w	r2, r2, r4, lsr #16
   19d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   19d1e:	f845 3b04 	str.w	r3, [r5], #4
   19d22:	f850 3b04 	ldr.w	r3, [r0], #4
   19d26:	682c      	ldr	r4, [r5, #0]
   19d28:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   19d2c:	4586      	cmp	lr, r0
   19d2e:	b2a3      	uxth	r3, r4
   19d30:	fb01 330c 	mla	r3, r1, ip, r3
   19d34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   19d38:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   19d3c:	d8e7      	bhi.n	19d0e <__multiply+0xf2>
   19d3e:	45b0      	cmp	r8, r6
   19d40:	f847 300b 	str.w	r3, [r7, fp]
   19d44:	f107 0704 	add.w	r7, r7, #4
   19d48:	d8b2      	bhi.n	19cb0 <__multiply+0x94>
   19d4a:	4650      	mov	r0, sl
   19d4c:	e9dd e402 	ldrd	lr, r4, [sp, #8]
   19d50:	2c00      	cmp	r4, #0
   19d52:	dc02      	bgt.n	19d5a <__multiply+0x13e>
   19d54:	e005      	b.n	19d62 <__multiply+0x146>
   19d56:	3c01      	subs	r4, #1
   19d58:	d003      	beq.n	19d62 <__multiply+0x146>
   19d5a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   19d5e:	2b00      	cmp	r3, #0
   19d60:	d0f9      	beq.n	19d56 <__multiply+0x13a>
   19d62:	6104      	str	r4, [r0, #16]
   19d64:	b005      	add	sp, #20
   19d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d6a:	4602      	mov	r2, r0
   19d6c:	4b02      	ldr	r3, [pc, #8]	; (19d78 <__multiply+0x15c>)
   19d6e:	f240 115d 	movw	r1, #349	; 0x15d
   19d72:	4802      	ldr	r0, [pc, #8]	; (19d7c <__multiply+0x160>)
   19d74:	f001 f9fe 	bl	1b174 <__assert_func>
   19d78:	00031338 	.word	0x00031338
   19d7c:	000313bc 	.word	0x000313bc

00019d80 <__pow5mult>:
   19d80:	f012 0303 	ands.w	r3, r2, #3
   19d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d88:	4614      	mov	r4, r2
   19d8a:	4607      	mov	r7, r0
   19d8c:	d12c      	bne.n	19de8 <__pow5mult+0x68>
   19d8e:	460d      	mov	r5, r1
   19d90:	10a4      	asrs	r4, r4, #2
   19d92:	d01c      	beq.n	19dce <__pow5mult+0x4e>
   19d94:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   19d96:	b386      	cbz	r6, 19dfa <__pow5mult+0x7a>
   19d98:	07e3      	lsls	r3, r4, #31
   19d9a:	f04f 0800 	mov.w	r8, #0
   19d9e:	d406      	bmi.n	19dae <__pow5mult+0x2e>
   19da0:	1064      	asrs	r4, r4, #1
   19da2:	d014      	beq.n	19dce <__pow5mult+0x4e>
   19da4:	6830      	ldr	r0, [r6, #0]
   19da6:	b1a8      	cbz	r0, 19dd4 <__pow5mult+0x54>
   19da8:	4606      	mov	r6, r0
   19daa:	07e3      	lsls	r3, r4, #31
   19dac:	d5f8      	bpl.n	19da0 <__pow5mult+0x20>
   19dae:	4632      	mov	r2, r6
   19db0:	4629      	mov	r1, r5
   19db2:	4638      	mov	r0, r7
   19db4:	f7ff ff32 	bl	19c1c <__multiply>
   19db8:	b135      	cbz	r5, 19dc8 <__pow5mult+0x48>
   19dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19dbc:	6869      	ldr	r1, [r5, #4]
   19dbe:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   19dc2:	602a      	str	r2, [r5, #0]
   19dc4:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   19dc8:	1064      	asrs	r4, r4, #1
   19dca:	4605      	mov	r5, r0
   19dcc:	d1ea      	bne.n	19da4 <__pow5mult+0x24>
   19dce:	4628      	mov	r0, r5
   19dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19dd4:	4632      	mov	r2, r6
   19dd6:	4631      	mov	r1, r6
   19dd8:	4638      	mov	r0, r7
   19dda:	f7ff ff1f 	bl	19c1c <__multiply>
   19dde:	6030      	str	r0, [r6, #0]
   19de0:	4606      	mov	r6, r0
   19de2:	f8c0 8000 	str.w	r8, [r0]
   19de6:	e7e0      	b.n	19daa <__pow5mult+0x2a>
   19de8:	3b01      	subs	r3, #1
   19dea:	4a0f      	ldr	r2, [pc, #60]	; (19e28 <__pow5mult+0xa8>)
   19dec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   19df0:	2300      	movs	r3, #0
   19df2:	f7ff fe3f 	bl	19a74 <__multadd>
   19df6:	4605      	mov	r5, r0
   19df8:	e7ca      	b.n	19d90 <__pow5mult+0x10>
   19dfa:	2101      	movs	r1, #1
   19dfc:	4638      	mov	r0, r7
   19dfe:	f7ff fe09 	bl	19a14 <_Balloc>
   19e02:	4606      	mov	r6, r0
   19e04:	b140      	cbz	r0, 19e18 <__pow5mult+0x98>
   19e06:	2301      	movs	r3, #1
   19e08:	f240 2271 	movw	r2, #625	; 0x271
   19e0c:	e9c0 3204 	strd	r3, r2, [r0, #16]
   19e10:	2300      	movs	r3, #0
   19e12:	64b8      	str	r0, [r7, #72]	; 0x48
   19e14:	6003      	str	r3, [r0, #0]
   19e16:	e7bf      	b.n	19d98 <__pow5mult+0x18>
   19e18:	4602      	mov	r2, r0
   19e1a:	4b04      	ldr	r3, [pc, #16]	; (19e2c <__pow5mult+0xac>)
   19e1c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   19e20:	4803      	ldr	r0, [pc, #12]	; (19e30 <__pow5mult+0xb0>)
   19e22:	f001 f9a7 	bl	1b174 <__assert_func>
   19e26:	bf00      	nop
   19e28:	0003142c 	.word	0x0003142c
   19e2c:	00031338 	.word	0x00031338
   19e30:	000313bc 	.word	0x000313bc

00019e34 <__lshift>:
   19e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e38:	460c      	mov	r4, r1
   19e3a:	4690      	mov	r8, r2
   19e3c:	4606      	mov	r6, r0
   19e3e:	ea4f 1962 	mov.w	r9, r2, asr #5
   19e42:	6927      	ldr	r7, [r4, #16]
   19e44:	68a3      	ldr	r3, [r4, #8]
   19e46:	eb07 1762 	add.w	r7, r7, r2, asr #5
   19e4a:	6849      	ldr	r1, [r1, #4]
   19e4c:	1c7d      	adds	r5, r7, #1
   19e4e:	429d      	cmp	r5, r3
   19e50:	dd03      	ble.n	19e5a <__lshift+0x26>
   19e52:	005b      	lsls	r3, r3, #1
   19e54:	3101      	adds	r1, #1
   19e56:	429d      	cmp	r5, r3
   19e58:	dcfb      	bgt.n	19e52 <__lshift+0x1e>
   19e5a:	4630      	mov	r0, r6
   19e5c:	f7ff fdda 	bl	19a14 <_Balloc>
   19e60:	2800      	cmp	r0, #0
   19e62:	d050      	beq.n	19f06 <__lshift+0xd2>
   19e64:	f1b9 0f00 	cmp.w	r9, #0
   19e68:	f100 0c14 	add.w	ip, r0, #20
   19e6c:	dd0e      	ble.n	19e8c <__lshift+0x58>
   19e6e:	f109 0205 	add.w	r2, r9, #5
   19e72:	4663      	mov	r3, ip
   19e74:	2100      	movs	r1, #0
   19e76:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   19e7a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   19e7e:	f843 1b04 	str.w	r1, [r3], #4
   19e82:	4293      	cmp	r3, r2
   19e84:	d1fb      	bne.n	19e7e <__lshift+0x4a>
   19e86:	f1ae 0314 	sub.w	r3, lr, #20
   19e8a:	449c      	add	ip, r3
   19e8c:	f104 0314 	add.w	r3, r4, #20
   19e90:	6921      	ldr	r1, [r4, #16]
   19e92:	f018 081f 	ands.w	r8, r8, #31
   19e96:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   19e9a:	d02b      	beq.n	19ef4 <__lshift+0xc0>
   19e9c:	f1c8 0920 	rsb	r9, r8, #32
   19ea0:	46e6      	mov	lr, ip
   19ea2:	f04f 0a00 	mov.w	sl, #0
   19ea6:	681a      	ldr	r2, [r3, #0]
   19ea8:	fa02 f208 	lsl.w	r2, r2, r8
   19eac:	ea42 020a 	orr.w	r2, r2, sl
   19eb0:	f84e 2b04 	str.w	r2, [lr], #4
   19eb4:	f853 2b04 	ldr.w	r2, [r3], #4
   19eb8:	4299      	cmp	r1, r3
   19eba:	fa22 fa09 	lsr.w	sl, r2, r9
   19ebe:	d8f2      	bhi.n	19ea6 <__lshift+0x72>
   19ec0:	1b0b      	subs	r3, r1, r4
   19ec2:	f104 0215 	add.w	r2, r4, #21
   19ec6:	3b15      	subs	r3, #21
   19ec8:	f023 0303 	bic.w	r3, r3, #3
   19ecc:	3304      	adds	r3, #4
   19ece:	4291      	cmp	r1, r2
   19ed0:	bf38      	it	cc
   19ed2:	2304      	movcc	r3, #4
   19ed4:	f84c a003 	str.w	sl, [ip, r3]
   19ed8:	f1ba 0f00 	cmp.w	sl, #0
   19edc:	d100      	bne.n	19ee0 <__lshift+0xac>
   19ede:	463d      	mov	r5, r7
   19ee0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   19ee2:	6862      	ldr	r2, [r4, #4]
   19ee4:	6105      	str	r5, [r0, #16]
   19ee6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   19eea:	6021      	str	r1, [r4, #0]
   19eec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   19ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ef4:	f1ac 0c04 	sub.w	ip, ip, #4
   19ef8:	f853 2b04 	ldr.w	r2, [r3], #4
   19efc:	4299      	cmp	r1, r3
   19efe:	f84c 2f04 	str.w	r2, [ip, #4]!
   19f02:	d8f9      	bhi.n	19ef8 <__lshift+0xc4>
   19f04:	e7eb      	b.n	19ede <__lshift+0xaa>
   19f06:	4602      	mov	r2, r0
   19f08:	4b02      	ldr	r3, [pc, #8]	; (19f14 <__lshift+0xe0>)
   19f0a:	f240 11d9 	movw	r1, #473	; 0x1d9
   19f0e:	4802      	ldr	r0, [pc, #8]	; (19f18 <__lshift+0xe4>)
   19f10:	f001 f930 	bl	1b174 <__assert_func>
   19f14:	00031338 	.word	0x00031338
   19f18:	000313bc 	.word	0x000313bc

00019f1c <__mcmp>:
   19f1c:	4684      	mov	ip, r0
   19f1e:	690b      	ldr	r3, [r1, #16]
   19f20:	6900      	ldr	r0, [r0, #16]
   19f22:	1ac0      	subs	r0, r0, r3
   19f24:	d115      	bne.n	19f52 <__mcmp+0x36>
   19f26:	f10c 0c14 	add.w	ip, ip, #20
   19f2a:	3114      	adds	r1, #20
   19f2c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   19f30:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   19f34:	b410      	push	{r4}
   19f36:	e001      	b.n	19f3c <__mcmp+0x20>
   19f38:	4594      	cmp	ip, r2
   19f3a:	d208      	bcs.n	19f4e <__mcmp+0x32>
   19f3c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   19f40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   19f44:	428c      	cmp	r4, r1
   19f46:	d0f7      	beq.n	19f38 <__mcmp+0x1c>
   19f48:	d204      	bcs.n	19f54 <__mcmp+0x38>
   19f4a:	f04f 30ff 	mov.w	r0, #4294967295
   19f4e:	bc10      	pop	{r4}
   19f50:	4770      	bx	lr
   19f52:	4770      	bx	lr
   19f54:	2001      	movs	r0, #1
   19f56:	bc10      	pop	{r4}
   19f58:	4770      	bx	lr
   19f5a:	bf00      	nop

00019f5c <__mdiff>:
   19f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f60:	6913      	ldr	r3, [r2, #16]
   19f62:	b083      	sub	sp, #12
   19f64:	690f      	ldr	r7, [r1, #16]
   19f66:	460d      	mov	r5, r1
   19f68:	4690      	mov	r8, r2
   19f6a:	1aff      	subs	r7, r7, r3
   19f6c:	2f00      	cmp	r7, #0
   19f6e:	d115      	bne.n	19f9c <__mdiff+0x40>
   19f70:	f101 0614 	add.w	r6, r1, #20
   19f74:	3214      	adds	r2, #20
   19f76:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   19f7a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   19f7e:	e001      	b.n	19f84 <__mdiff+0x28>
   19f80:	429e      	cmp	r6, r3
   19f82:	d276      	bcs.n	1a072 <__mdiff+0x116>
   19f84:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   19f88:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   19f8c:	428c      	cmp	r4, r1
   19f8e:	d0f7      	beq.n	19f80 <__mdiff+0x24>
   19f90:	d206      	bcs.n	19fa0 <__mdiff+0x44>
   19f92:	462b      	mov	r3, r5
   19f94:	2701      	movs	r7, #1
   19f96:	4645      	mov	r5, r8
   19f98:	4698      	mov	r8, r3
   19f9a:	e001      	b.n	19fa0 <__mdiff+0x44>
   19f9c:	dbf9      	blt.n	19f92 <__mdiff+0x36>
   19f9e:	2700      	movs	r7, #0
   19fa0:	6869      	ldr	r1, [r5, #4]
   19fa2:	f7ff fd37 	bl	19a14 <_Balloc>
   19fa6:	2800      	cmp	r0, #0
   19fa8:	d075      	beq.n	1a096 <__mdiff+0x13a>
   19faa:	692e      	ldr	r6, [r5, #16]
   19fac:	f105 0b14 	add.w	fp, r5, #20
   19fb0:	f108 0e14 	add.w	lr, r8, #20
   19fb4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   19fb8:	f100 0a14 	add.w	sl, r0, #20
   19fbc:	60c7      	str	r7, [r0, #12]
   19fbe:	f105 0110 	add.w	r1, r5, #16
   19fc2:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   19fc6:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
   19fca:	f04f 0c00 	mov.w	ip, #0
   19fce:	4657      	mov	r7, sl
   19fd0:	f8cd b004 	str.w	fp, [sp, #4]
   19fd4:	f85e 4b04 	ldr.w	r4, [lr], #4
   19fd8:	f851 5f04 	ldr.w	r5, [r1, #4]!
   19fdc:	fa1f fb84 	uxth.w	fp, r4
   19fe0:	45f1      	cmp	r9, lr
   19fe2:	b2ab      	uxth	r3, r5
   19fe4:	ea4f 4414 	mov.w	r4, r4, lsr #16
   19fe8:	eba3 030b 	sub.w	r3, r3, fp
   19fec:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   19ff0:	4463      	add	r3, ip
   19ff2:	eb04 4423 	add.w	r4, r4, r3, asr #16
   19ff6:	b29b      	uxth	r3, r3
   19ff8:	ea4f 4c24 	mov.w	ip, r4, asr #16
   19ffc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1a000:	f847 3b04 	str.w	r3, [r7], #4
   1a004:	d8e6      	bhi.n	19fd4 <__mdiff+0x78>
   1a006:	eba9 0508 	sub.w	r5, r9, r8
   1a00a:	f108 0815 	add.w	r8, r8, #21
   1a00e:	f8dd b004 	ldr.w	fp, [sp, #4]
   1a012:	3d15      	subs	r5, #21
   1a014:	08ad      	lsrs	r5, r5, #2
   1a016:	1c69      	adds	r1, r5, #1
   1a018:	0089      	lsls	r1, r1, #2
   1a01a:	45c1      	cmp	r9, r8
   1a01c:	bf38      	it	cc
   1a01e:	2104      	movcc	r1, #4
   1a020:	eb0b 0401 	add.w	r4, fp, r1
   1a024:	4451      	add	r1, sl
   1a026:	42a2      	cmp	r2, r4
   1a028:	d92e      	bls.n	1a088 <__mdiff+0x12c>
   1a02a:	460f      	mov	r7, r1
   1a02c:	4625      	mov	r5, r4
   1a02e:	f855 3b04 	ldr.w	r3, [r5], #4
   1a032:	fa1f f883 	uxth.w	r8, r3
   1a036:	42aa      	cmp	r2, r5
   1a038:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   1a03c:	4463      	add	r3, ip
   1a03e:	44c4      	add	ip, r8
   1a040:	b29b      	uxth	r3, r3
   1a042:	eb0e 4c2c 	add.w	ip, lr, ip, asr #16
   1a046:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1a04a:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   1a04e:	f847 3b04 	str.w	r3, [r7], #4
   1a052:	d8ec      	bhi.n	1a02e <__mdiff+0xd2>
   1a054:	3a01      	subs	r2, #1
   1a056:	1b12      	subs	r2, r2, r4
   1a058:	f022 0203 	bic.w	r2, r2, #3
   1a05c:	4411      	add	r1, r2
   1a05e:	b923      	cbnz	r3, 1a06a <__mdiff+0x10e>
   1a060:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1a064:	3e01      	subs	r6, #1
   1a066:	2b00      	cmp	r3, #0
   1a068:	d0fa      	beq.n	1a060 <__mdiff+0x104>
   1a06a:	6106      	str	r6, [r0, #16]
   1a06c:	b003      	add	sp, #12
   1a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a072:	2100      	movs	r1, #0
   1a074:	f7ff fcce 	bl	19a14 <_Balloc>
   1a078:	b1a0      	cbz	r0, 1a0a4 <__mdiff+0x148>
   1a07a:	2201      	movs	r2, #1
   1a07c:	2300      	movs	r3, #0
   1a07e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   1a082:	b003      	add	sp, #12
   1a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a088:	00ad      	lsls	r5, r5, #2
   1a08a:	45c1      	cmp	r9, r8
   1a08c:	bf38      	it	cc
   1a08e:	2500      	movcc	r5, #0
   1a090:	eb0a 0105 	add.w	r1, sl, r5
   1a094:	e7e3      	b.n	1a05e <__mdiff+0x102>
   1a096:	4602      	mov	r2, r0
   1a098:	4b06      	ldr	r3, [pc, #24]	; (1a0b4 <__mdiff+0x158>)
   1a09a:	f44f 7110 	mov.w	r1, #576	; 0x240
   1a09e:	4806      	ldr	r0, [pc, #24]	; (1a0b8 <__mdiff+0x15c>)
   1a0a0:	f001 f868 	bl	1b174 <__assert_func>
   1a0a4:	4602      	mov	r2, r0
   1a0a6:	4b03      	ldr	r3, [pc, #12]	; (1a0b4 <__mdiff+0x158>)
   1a0a8:	f240 2132 	movw	r1, #562	; 0x232
   1a0ac:	4802      	ldr	r0, [pc, #8]	; (1a0b8 <__mdiff+0x15c>)
   1a0ae:	f001 f861 	bl	1b174 <__assert_func>
   1a0b2:	bf00      	nop
   1a0b4:	00031338 	.word	0x00031338
   1a0b8:	000313bc 	.word	0x000313bc

0001a0bc <__d2b>:
   1a0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0be:	2101      	movs	r1, #1
   1a0c0:	b083      	sub	sp, #12
   1a0c2:	4616      	mov	r6, r2
   1a0c4:	461f      	mov	r7, r3
   1a0c6:	f7ff fca5 	bl	19a14 <_Balloc>
   1a0ca:	4605      	mov	r5, r0
   1a0cc:	2800      	cmp	r0, #0
   1a0ce:	d049      	beq.n	1a164 <__d2b+0xa8>
   1a0d0:	f3c7 540a 	ubfx	r4, r7, #20, #11
   1a0d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1a0d8:	b10c      	cbz	r4, 1a0de <__d2b+0x22>
   1a0da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a0de:	2e00      	cmp	r6, #0
   1a0e0:	9301      	str	r3, [sp, #4]
   1a0e2:	d115      	bne.n	1a110 <__d2b+0x54>
   1a0e4:	a801      	add	r0, sp, #4
   1a0e6:	2601      	movs	r6, #1
   1a0e8:	f7ff fd3a 	bl	19b60 <__lo0bits>
   1a0ec:	9a01      	ldr	r2, [sp, #4]
   1a0ee:	f100 0320 	add.w	r3, r0, #32
   1a0f2:	612e      	str	r6, [r5, #16]
   1a0f4:	616a      	str	r2, [r5, #20]
   1a0f6:	b31c      	cbz	r4, 1a140 <__d2b+0x84>
   1a0f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   1a0fc:	f1c3 0035 	rsb	r0, r3, #53	; 0x35
   1a100:	441c      	add	r4, r3
   1a102:	9b08      	ldr	r3, [sp, #32]
   1a104:	601c      	str	r4, [r3, #0]
   1a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a108:	6018      	str	r0, [r3, #0]
   1a10a:	4628      	mov	r0, r5
   1a10c:	b003      	add	sp, #12
   1a10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a110:	4668      	mov	r0, sp
   1a112:	9600      	str	r6, [sp, #0]
   1a114:	f7ff fd24 	bl	19b60 <__lo0bits>
   1a118:	9a01      	ldr	r2, [sp, #4]
   1a11a:	4603      	mov	r3, r0
   1a11c:	b300      	cbz	r0, 1a160 <__d2b+0xa4>
   1a11e:	f1c0 0120 	rsb	r1, r0, #32
   1a122:	fa02 f101 	lsl.w	r1, r2, r1
   1a126:	40c2      	lsrs	r2, r0
   1a128:	9800      	ldr	r0, [sp, #0]
   1a12a:	9201      	str	r2, [sp, #4]
   1a12c:	4301      	orrs	r1, r0
   1a12e:	2a00      	cmp	r2, #0
   1a130:	bf0c      	ite	eq
   1a132:	2601      	moveq	r6, #1
   1a134:	2602      	movne	r6, #2
   1a136:	e9c5 1205 	strd	r1, r2, [r5, #20]
   1a13a:	612e      	str	r6, [r5, #16]
   1a13c:	2c00      	cmp	r4, #0
   1a13e:	d1db      	bne.n	1a0f8 <__d2b+0x3c>
   1a140:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   1a144:	eb05 0286 	add.w	r2, r5, r6, lsl #2
   1a148:	9908      	ldr	r1, [sp, #32]
   1a14a:	6910      	ldr	r0, [r2, #16]
   1a14c:	600b      	str	r3, [r1, #0]
   1a14e:	f7ff fce3 	bl	19b18 <__hi0bits>
   1a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a154:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
   1a158:	6018      	str	r0, [r3, #0]
   1a15a:	4628      	mov	r0, r5
   1a15c:	b003      	add	sp, #12
   1a15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a160:	9900      	ldr	r1, [sp, #0]
   1a162:	e7e4      	b.n	1a12e <__d2b+0x72>
   1a164:	4602      	mov	r2, r0
   1a166:	4b03      	ldr	r3, [pc, #12]	; (1a174 <__d2b+0xb8>)
   1a168:	f240 310a 	movw	r1, #778	; 0x30a
   1a16c:	4802      	ldr	r0, [pc, #8]	; (1a178 <__d2b+0xbc>)
   1a16e:	f001 f801 	bl	1b174 <__assert_func>
   1a172:	bf00      	nop
   1a174:	00031338 	.word	0x00031338
   1a178:	000313bc 	.word	0x000313bc

0001a17c <__sread>:
   1a17c:	b510      	push	{r4, lr}
   1a17e:	460c      	mov	r4, r1
   1a180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1a184:	f001 fa0a 	bl	1b59c <_read_r>
   1a188:	2800      	cmp	r0, #0
   1a18a:	db03      	blt.n	1a194 <__sread+0x18>
   1a18c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1a18e:	4403      	add	r3, r0
   1a190:	6523      	str	r3, [r4, #80]	; 0x50
   1a192:	bd10      	pop	{r4, pc}
   1a194:	89a3      	ldrh	r3, [r4, #12]
   1a196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1a19a:	81a3      	strh	r3, [r4, #12]
   1a19c:	bd10      	pop	{r4, pc}
   1a19e:	bf00      	nop

0001a1a0 <__swrite>:
   1a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1a4:	460c      	mov	r4, r1
   1a1a6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1a1aa:	461f      	mov	r7, r3
   1a1ac:	4605      	mov	r5, r0
   1a1ae:	05cb      	lsls	r3, r1, #23
   1a1b0:	4616      	mov	r6, r2
   1a1b2:	d40b      	bmi.n	1a1cc <__swrite+0x2c>
   1a1b4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1a1b8:	463b      	mov	r3, r7
   1a1ba:	4632      	mov	r2, r6
   1a1bc:	4628      	mov	r0, r5
   1a1be:	81a1      	strh	r1, [r4, #12]
   1a1c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1a1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a1c8:	f000 bfbe 	b.w	1b148 <_write_r>
   1a1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1a1d0:	2302      	movs	r3, #2
   1a1d2:	2200      	movs	r2, #0
   1a1d4:	f001 f9b6 	bl	1b544 <_lseek_r>
   1a1d8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   1a1dc:	e7ea      	b.n	1a1b4 <__swrite+0x14>
   1a1de:	bf00      	nop

0001a1e0 <__sseek>:
   1a1e0:	b510      	push	{r4, lr}
   1a1e2:	460c      	mov	r4, r1
   1a1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1a1e8:	f001 f9ac 	bl	1b544 <_lseek_r>
   1a1ec:	1c42      	adds	r2, r0, #1
   1a1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a1f2:	d004      	beq.n	1a1fe <__sseek+0x1e>
   1a1f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1a1f8:	6520      	str	r0, [r4, #80]	; 0x50
   1a1fa:	81a3      	strh	r3, [r4, #12]
   1a1fc:	bd10      	pop	{r4, pc}
   1a1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1a202:	81a3      	strh	r3, [r4, #12]
   1a204:	bd10      	pop	{r4, pc}
   1a206:	bf00      	nop

0001a208 <__sclose>:
   1a208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1a20c:	f000 bfd0 	b.w	1b1b0 <_close_r>

0001a210 <__ssprint_r>:
   1a210:	6893      	ldr	r3, [r2, #8]
   1a212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a216:	4692      	mov	sl, r2
   1a218:	b083      	sub	sp, #12
   1a21a:	6817      	ldr	r7, [r2, #0]
   1a21c:	2b00      	cmp	r3, #0
   1a21e:	d075      	beq.n	1a30c <__ssprint_r+0xfc>
   1a220:	f04f 0b00 	mov.w	fp, #0
   1a224:	4681      	mov	r9, r0
   1a226:	460c      	mov	r4, r1
   1a228:	688b      	ldr	r3, [r1, #8]
   1a22a:	680a      	ldr	r2, [r1, #0]
   1a22c:	465d      	mov	r5, fp
   1a22e:	e047      	b.n	1a2c0 <__ssprint_r+0xb0>
   1a230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a234:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1a238:	d02e      	beq.n	1a298 <__ssprint_r+0x88>
   1a23a:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   1a23e:	eb16 0646 	adds.w	r6, r6, r6, lsl #1
   1a242:	eba2 0801 	sub.w	r8, r2, r1
   1a246:	bf48      	it	mi
   1a248:	3601      	addmi	r6, #1
   1a24a:	f108 0001 	add.w	r0, r8, #1
   1a24e:	1076      	asrs	r6, r6, #1
   1a250:	4428      	add	r0, r5
   1a252:	42b0      	cmp	r0, r6
   1a254:	4632      	mov	r2, r6
   1a256:	d901      	bls.n	1a25c <__ssprint_r+0x4c>
   1a258:	4606      	mov	r6, r0
   1a25a:	4602      	mov	r2, r0
   1a25c:	055b      	lsls	r3, r3, #21
   1a25e:	d539      	bpl.n	1a2d4 <__ssprint_r+0xc4>
   1a260:	4611      	mov	r1, r2
   1a262:	4648      	mov	r0, r9
   1a264:	f7fc fce8 	bl	16c38 <_malloc_r>
   1a268:	9001      	str	r0, [sp, #4]
   1a26a:	2800      	cmp	r0, #0
   1a26c:	d03c      	beq.n	1a2e8 <__ssprint_r+0xd8>
   1a26e:	4642      	mov	r2, r8
   1a270:	6921      	ldr	r1, [r4, #16]
   1a272:	f7e6 fc6f 	bl	b54 <memcpy>
   1a276:	89a2      	ldrh	r2, [r4, #12]
   1a278:	9b01      	ldr	r3, [sp, #4]
   1a27a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1a27e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a282:	81a2      	strh	r2, [r4, #12]
   1a284:	eba6 0208 	sub.w	r2, r6, r8
   1a288:	eb03 0008 	add.w	r0, r3, r8
   1a28c:	6166      	str	r6, [r4, #20]
   1a28e:	46a8      	mov	r8, r5
   1a290:	462e      	mov	r6, r5
   1a292:	60a2      	str	r2, [r4, #8]
   1a294:	6123      	str	r3, [r4, #16]
   1a296:	6020      	str	r0, [r4, #0]
   1a298:	4632      	mov	r2, r6
   1a29a:	4659      	mov	r1, fp
   1a29c:	f7fd f81c 	bl	172d8 <memmove>
   1a2a0:	f8da 1008 	ldr.w	r1, [sl, #8]
   1a2a4:	68a3      	ldr	r3, [r4, #8]
   1a2a6:	6822      	ldr	r2, [r4, #0]
   1a2a8:	1b49      	subs	r1, r1, r5
   1a2aa:	eba3 0308 	sub.w	r3, r3, r8
   1a2ae:	4432      	add	r2, r6
   1a2b0:	60a3      	str	r3, [r4, #8]
   1a2b2:	6022      	str	r2, [r4, #0]
   1a2b4:	f8ca 1008 	str.w	r1, [sl, #8]
   1a2b8:	b341      	cbz	r1, 1a30c <__ssprint_r+0xfc>
   1a2ba:	e9d7 b500 	ldrd	fp, r5, [r7]
   1a2be:	3708      	adds	r7, #8
   1a2c0:	4698      	mov	r8, r3
   1a2c2:	4610      	mov	r0, r2
   1a2c4:	2d00      	cmp	r5, #0
   1a2c6:	d0f8      	beq.n	1a2ba <__ssprint_r+0xaa>
   1a2c8:	429d      	cmp	r5, r3
   1a2ca:	461e      	mov	r6, r3
   1a2cc:	d2b0      	bcs.n	1a230 <__ssprint_r+0x20>
   1a2ce:	46a8      	mov	r8, r5
   1a2d0:	462e      	mov	r6, r5
   1a2d2:	e7e1      	b.n	1a298 <__ssprint_r+0x88>
   1a2d4:	4648      	mov	r0, r9
   1a2d6:	f001 f977 	bl	1b5c8 <_realloc_r>
   1a2da:	4603      	mov	r3, r0
   1a2dc:	2800      	cmp	r0, #0
   1a2de:	d1d1      	bne.n	1a284 <__ssprint_r+0x74>
   1a2e0:	6921      	ldr	r1, [r4, #16]
   1a2e2:	4648      	mov	r0, r9
   1a2e4:	f7ff fa0c 	bl	19700 <_free_r>
   1a2e8:	89a3      	ldrh	r3, [r4, #12]
   1a2ea:	220c      	movs	r2, #12
   1a2ec:	f04f 30ff 	mov.w	r0, #4294967295
   1a2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a2f4:	f8c9 2000 	str.w	r2, [r9]
   1a2f8:	2200      	movs	r2, #0
   1a2fa:	81a3      	strh	r3, [r4, #12]
   1a2fc:	2300      	movs	r3, #0
   1a2fe:	f8ca 2008 	str.w	r2, [sl, #8]
   1a302:	f8ca 3004 	str.w	r3, [sl, #4]
   1a306:	b003      	add	sp, #12
   1a308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a30c:	2000      	movs	r0, #0
   1a30e:	2300      	movs	r3, #0
   1a310:	f8ca 3004 	str.w	r3, [sl, #4]
   1a314:	b003      	add	sp, #12
   1a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a31a:	bf00      	nop

0001a31c <_vfiprintf_r>:
   1a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a320:	b0bd      	sub	sp, #244	; 0xf4
   1a322:	461c      	mov	r4, r3
   1a324:	4691      	mov	r9, r2
   1a326:	9104      	str	r1, [sp, #16]
   1a328:	9307      	str	r3, [sp, #28]
   1a32a:	9005      	str	r0, [sp, #20]
   1a32c:	b118      	cbz	r0, 1a336 <_vfiprintf_r+0x1a>
   1a32e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a330:	2b00      	cmp	r3, #0
   1a332:	f000 8289 	beq.w	1a848 <_vfiprintf_r+0x52c>
   1a336:	9a04      	ldr	r2, [sp, #16]
   1a338:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1a33a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
   1a33e:	07db      	lsls	r3, r3, #31
   1a340:	d402      	bmi.n	1a348 <_vfiprintf_r+0x2c>
   1a342:	0597      	lsls	r7, r2, #22
   1a344:	f140 8543 	bpl.w	1adce <_vfiprintf_r+0xab2>
   1a348:	0716      	lsls	r6, r2, #28
   1a34a:	f140 8110 	bpl.w	1a56e <_vfiprintf_r+0x252>
   1a34e:	9b04      	ldr	r3, [sp, #16]
   1a350:	691b      	ldr	r3, [r3, #16]
   1a352:	2b00      	cmp	r3, #0
   1a354:	f000 810b 	beq.w	1a56e <_vfiprintf_r+0x252>
   1a358:	f002 031a 	and.w	r3, r2, #26
   1a35c:	2b0a      	cmp	r3, #10
   1a35e:	f000 8115 	beq.w	1a58c <_vfiprintf_r+0x270>
   1a362:	ab13      	add	r3, sp, #76	; 0x4c
   1a364:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1a368:	9310      	str	r3, [sp, #64]	; 0x40
   1a36a:	2300      	movs	r3, #0
   1a36c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1a370:	9309      	str	r3, [sp, #36]	; 0x24
   1a372:	930a      	str	r3, [sp, #40]	; 0x28
   1a374:	9306      	str	r3, [sp, #24]
   1a376:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1a37a:	f899 3000 	ldrb.w	r3, [r9]
   1a37e:	464c      	mov	r4, r9
   1a380:	b1db      	cbz	r3, 1a3ba <_vfiprintf_r+0x9e>
   1a382:	2b25      	cmp	r3, #37	; 0x25
   1a384:	d019      	beq.n	1a3ba <_vfiprintf_r+0x9e>
   1a386:	4625      	mov	r5, r4
   1a388:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1a38c:	b10b      	cbz	r3, 1a392 <_vfiprintf_r+0x76>
   1a38e:	2b25      	cmp	r3, #37	; 0x25
   1a390:	d1f9      	bne.n	1a386 <_vfiprintf_r+0x6a>
   1a392:	ebb4 0609 	subs.w	r6, r4, r9
   1a396:	d010      	beq.n	1a3ba <_vfiprintf_r+0x9e>
   1a398:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a39a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a39c:	3301      	adds	r3, #1
   1a39e:	4432      	add	r2, r6
   1a3a0:	2b07      	cmp	r3, #7
   1a3a2:	9311      	str	r3, [sp, #68]	; 0x44
   1a3a4:	9212      	str	r2, [sp, #72]	; 0x48
   1a3a6:	e9ca 9600 	strd	r9, r6, [sl]
   1a3aa:	f300 8149 	bgt.w	1a640 <_vfiprintf_r+0x324>
   1a3ae:	f10a 0a08 	add.w	sl, sl, #8
   1a3b2:	9b06      	ldr	r3, [sp, #24]
   1a3b4:	4433      	add	r3, r6
   1a3b6:	9306      	str	r3, [sp, #24]
   1a3b8:	786b      	ldrb	r3, [r5, #1]
   1a3ba:	2b00      	cmp	r3, #0
   1a3bc:	f000 8603 	beq.w	1afc6 <_vfiprintf_r+0xcaa>
   1a3c0:	f04f 0300 	mov.w	r3, #0
   1a3c4:	f04f 0b00 	mov.w	fp, #0
   1a3c8:	f104 0901 	add.w	r9, r4, #1
   1a3cc:	7861      	ldrb	r1, [r4, #1]
   1a3ce:	f04f 38ff 	mov.w	r8, #4294967295
   1a3d2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1a3d6:	f8cd b004 	str.w	fp, [sp, #4]
   1a3da:	f109 0901 	add.w	r9, r9, #1
   1a3de:	f1a1 0320 	sub.w	r3, r1, #32
   1a3e2:	2b5a      	cmp	r3, #90	; 0x5a
   1a3e4:	f200 8149 	bhi.w	1a67a <_vfiprintf_r+0x35e>
   1a3e8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a3ec:	014702eb 	.word	0x014702eb
   1a3f0:	02e40147 	.word	0x02e40147
   1a3f4:	01470147 	.word	0x01470147
   1a3f8:	006a0147 	.word	0x006a0147
   1a3fc:	01470147 	.word	0x01470147
   1a400:	02d302d9 	.word	0x02d302d9
   1a404:	01230147 	.word	0x01230147
   1a408:	014702ba 	.word	0x014702ba
   1a40c:	005b02b3 	.word	0x005b02b3
   1a410:	005b005b 	.word	0x005b005b
   1a414:	005b005b 	.word	0x005b005b
   1a418:	005b005b 	.word	0x005b005b
   1a41c:	005b005b 	.word	0x005b005b
   1a420:	01470147 	.word	0x01470147
   1a424:	01470147 	.word	0x01470147
   1a428:	01470147 	.word	0x01470147
   1a42c:	01470147 	.word	0x01470147
   1a430:	02200147 	.word	0x02200147
   1a434:	01470088 	.word	0x01470088
   1a438:	01470147 	.word	0x01470147
   1a43c:	01470147 	.word	0x01470147
   1a440:	01470147 	.word	0x01470147
   1a444:	01470147 	.word	0x01470147
   1a448:	00e50147 	.word	0x00e50147
   1a44c:	01470147 	.word	0x01470147
   1a450:	02040147 	.word	0x02040147
   1a454:	02570147 	.word	0x02570147
   1a458:	01470147 	.word	0x01470147
   1a45c:	014704fb 	.word	0x014704fb
   1a460:	01470147 	.word	0x01470147
   1a464:	01470147 	.word	0x01470147
   1a468:	01470147 	.word	0x01470147
   1a46c:	01470147 	.word	0x01470147
   1a470:	02200147 	.word	0x02200147
   1a474:	0147008c 	.word	0x0147008c
   1a478:	01470147 	.word	0x01470147
   1a47c:	008c02f6 	.word	0x008c02f6
   1a480:	01470081 	.word	0x01470081
   1a484:	01470300 	.word	0x01470300
   1a488:	00e902a5 	.word	0x00e902a5
   1a48c:	0081028d 	.word	0x0081028d
   1a490:	02040147 	.word	0x02040147
   1a494:	04f9007e 	.word	0x04f9007e
   1a498:	01470147 	.word	0x01470147
   1a49c:	0147051c 	.word	0x0147051c
   1a4a0:	007e      	.short	0x007e
   1a4a2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1a4a6:	f04f 0b00 	mov.w	fp, #0
   1a4aa:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   1a4ae:	f819 1b01 	ldrb.w	r1, [r9], #1
   1a4b2:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
   1a4b6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1a4ba:	2b09      	cmp	r3, #9
   1a4bc:	d9f5      	bls.n	1a4aa <_vfiprintf_r+0x18e>
   1a4be:	e78e      	b.n	1a3de <_vfiprintf_r+0xc2>
   1a4c0:	9d05      	ldr	r5, [sp, #20]
   1a4c2:	4628      	mov	r0, r5
   1a4c4:	f7ff fa3e 	bl	19944 <_localeconv_r>
   1a4c8:	6843      	ldr	r3, [r0, #4]
   1a4ca:	4618      	mov	r0, r3
   1a4cc:	930c      	str	r3, [sp, #48]	; 0x30
   1a4ce:	f7fd f85d 	bl	1758c <strlen>
   1a4d2:	900d      	str	r0, [sp, #52]	; 0x34
   1a4d4:	4604      	mov	r4, r0
   1a4d6:	4628      	mov	r0, r5
   1a4d8:	f7ff fa34 	bl	19944 <_localeconv_r>
   1a4dc:	6882      	ldr	r2, [r0, #8]
   1a4de:	920a      	str	r2, [sp, #40]	; 0x28
   1a4e0:	b114      	cbz	r4, 1a4e8 <_vfiprintf_r+0x1cc>
   1a4e2:	2a00      	cmp	r2, #0
   1a4e4:	f040 8455 	bne.w	1ad92 <_vfiprintf_r+0xa76>
   1a4e8:	f899 1000 	ldrb.w	r1, [r9]
   1a4ec:	e775      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a4ee:	9b01      	ldr	r3, [sp, #4]
   1a4f0:	f899 1000 	ldrb.w	r1, [r9]
   1a4f4:	f043 0320 	orr.w	r3, r3, #32
   1a4f8:	9301      	str	r3, [sp, #4]
   1a4fa:	e76e      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a4fc:	9b01      	ldr	r3, [sp, #4]
   1a4fe:	f043 0310 	orr.w	r3, r3, #16
   1a502:	9301      	str	r3, [sp, #4]
   1a504:	9b01      	ldr	r3, [sp, #4]
   1a506:	069f      	lsls	r7, r3, #26
   1a508:	f140 8165 	bpl.w	1a7d6 <_vfiprintf_r+0x4ba>
   1a50c:	9b07      	ldr	r3, [sp, #28]
   1a50e:	3307      	adds	r3, #7
   1a510:	f023 0307 	bic.w	r3, r3, #7
   1a514:	461a      	mov	r2, r3
   1a516:	6859      	ldr	r1, [r3, #4]
   1a518:	f852 3b08 	ldr.w	r3, [r2], #8
   1a51c:	9207      	str	r2, [sp, #28]
   1a51e:	460a      	mov	r2, r1
   1a520:	2900      	cmp	r1, #0
   1a522:	f2c0 819d 	blt.w	1a860 <_vfiprintf_r+0x544>
   1a526:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a52a:	f000 81a7 	beq.w	1a87c <_vfiprintf_r+0x560>
   1a52e:	9901      	ldr	r1, [sp, #4]
   1a530:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   1a534:	9101      	str	r1, [sp, #4]
   1a536:	f1b8 0f00 	cmp.w	r8, #0
   1a53a:	f040 819f 	bne.w	1a87c <_vfiprintf_r+0x560>
   1a53e:	ea53 0102 	orrs.w	r1, r3, r2
   1a542:	bf14      	ite	ne
   1a544:	2101      	movne	r1, #1
   1a546:	2100      	moveq	r1, #0
   1a548:	f040 8198 	bne.w	1a87c <_vfiprintf_r+0x560>
   1a54c:	4688      	mov	r8, r1
   1a54e:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1a552:	ad3c      	add	r5, sp, #240	; 0xf0
   1a554:	9103      	str	r1, [sp, #12]
   1a556:	9a03      	ldr	r2, [sp, #12]
   1a558:	4542      	cmp	r2, r8
   1a55a:	bfb8      	it	lt
   1a55c:	4642      	movlt	r2, r8
   1a55e:	9202      	str	r2, [sp, #8]
   1a560:	2b00      	cmp	r3, #0
   1a562:	f000 8098 	beq.w	1a696 <_vfiprintf_r+0x37a>
   1a566:	4613      	mov	r3, r2
   1a568:	3301      	adds	r3, #1
   1a56a:	9302      	str	r3, [sp, #8]
   1a56c:	e093      	b.n	1a696 <_vfiprintf_r+0x37a>
   1a56e:	9d04      	ldr	r5, [sp, #16]
   1a570:	9805      	ldr	r0, [sp, #20]
   1a572:	4629      	mov	r1, r5
   1a574:	f7fe fe34 	bl	191e0 <__swsetup_r>
   1a578:	2800      	cmp	r0, #0
   1a57a:	f040 8581 	bne.w	1b080 <_vfiprintf_r+0xd64>
   1a57e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   1a582:	f002 031a 	and.w	r3, r2, #26
   1a586:	2b0a      	cmp	r3, #10
   1a588:	f47f aeeb 	bne.w	1a362 <_vfiprintf_r+0x46>
   1a58c:	9904      	ldr	r1, [sp, #16]
   1a58e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1a592:	2b00      	cmp	r3, #0
   1a594:	f6ff aee5 	blt.w	1a362 <_vfiprintf_r+0x46>
   1a598:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1a59a:	07d8      	lsls	r0, r3, #31
   1a59c:	d402      	bmi.n	1a5a4 <_vfiprintf_r+0x288>
   1a59e:	0593      	lsls	r3, r2, #22
   1a5a0:	f140 854a 	bpl.w	1b038 <_vfiprintf_r+0xd1c>
   1a5a4:	4623      	mov	r3, r4
   1a5a6:	464a      	mov	r2, r9
   1a5a8:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1a5ac:	b03d      	add	sp, #244	; 0xf4
   1a5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5b2:	f000 bd89 	b.w	1b0c8 <__sbprintf>
   1a5b6:	9b01      	ldr	r3, [sp, #4]
   1a5b8:	f043 0310 	orr.w	r3, r3, #16
   1a5bc:	9301      	str	r3, [sp, #4]
   1a5be:	9b01      	ldr	r3, [sp, #4]
   1a5c0:	f013 0220 	ands.w	r2, r3, #32
   1a5c4:	f000 80f6 	beq.w	1a7b4 <_vfiprintf_r+0x498>
   1a5c8:	9b07      	ldr	r3, [sp, #28]
   1a5ca:	3307      	adds	r3, #7
   1a5cc:	f023 0307 	bic.w	r3, r3, #7
   1a5d0:	4619      	mov	r1, r3
   1a5d2:	685a      	ldr	r2, [r3, #4]
   1a5d4:	f851 3b08 	ldr.w	r3, [r1], #8
   1a5d8:	9107      	str	r1, [sp, #28]
   1a5da:	9901      	ldr	r1, [sp, #4]
   1a5dc:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a5e0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   1a5e4:	9101      	str	r1, [sp, #4]
   1a5e6:	f04f 0100 	mov.w	r1, #0
   1a5ea:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   1a5ee:	f040 83b5 	bne.w	1ad5c <_vfiprintf_r+0xa40>
   1a5f2:	ad3c      	add	r5, sp, #240	; 0xf0
   1a5f4:	f003 0107 	and.w	r1, r3, #7
   1a5f8:	08db      	lsrs	r3, r3, #3
   1a5fa:	4628      	mov	r0, r5
   1a5fc:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1a600:	3130      	adds	r1, #48	; 0x30
   1a602:	08d2      	lsrs	r2, r2, #3
   1a604:	f805 1d01 	strb.w	r1, [r5, #-1]!
   1a608:	ea53 0402 	orrs.w	r4, r3, r2
   1a60c:	d1f2      	bne.n	1a5f4 <_vfiprintf_r+0x2d8>
   1a60e:	2930      	cmp	r1, #48	; 0x30
   1a610:	d003      	beq.n	1a61a <_vfiprintf_r+0x2fe>
   1a612:	9b01      	ldr	r3, [sp, #4]
   1a614:	07de      	lsls	r6, r3, #31
   1a616:	f100 83b3 	bmi.w	1ad80 <_vfiprintf_r+0xa64>
   1a61a:	ab3c      	add	r3, sp, #240	; 0xf0
   1a61c:	1b5b      	subs	r3, r3, r5
   1a61e:	9303      	str	r3, [sp, #12]
   1a620:	9b03      	ldr	r3, [sp, #12]
   1a622:	4543      	cmp	r3, r8
   1a624:	bfb8      	it	lt
   1a626:	4643      	movlt	r3, r8
   1a628:	9302      	str	r3, [sp, #8]
   1a62a:	e034      	b.n	1a696 <_vfiprintf_r+0x37a>
   1a62c:	f1cb 0b00 	rsb	fp, fp, #0
   1a630:	9307      	str	r3, [sp, #28]
   1a632:	9b01      	ldr	r3, [sp, #4]
   1a634:	f899 1000 	ldrb.w	r1, [r9]
   1a638:	f043 0304 	orr.w	r3, r3, #4
   1a63c:	9301      	str	r3, [sp, #4]
   1a63e:	e6cc      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a640:	b91a      	cbnz	r2, 1a64a <_vfiprintf_r+0x32e>
   1a642:	9211      	str	r2, [sp, #68]	; 0x44
   1a644:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1a648:	e6b3      	b.n	1a3b2 <_vfiprintf_r+0x96>
   1a64a:	aa10      	add	r2, sp, #64	; 0x40
   1a64c:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1a650:	f000 fdea 	bl	1b228 <__sfvwrite_r>
   1a654:	2300      	movs	r3, #0
   1a656:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1a65a:	2800      	cmp	r0, #0
   1a65c:	d0f2      	beq.n	1a644 <_vfiprintf_r+0x328>
   1a65e:	9b04      	ldr	r3, [sp, #16]
   1a660:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1a662:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1a666:	07d0      	lsls	r0, r2, #31
   1a668:	f140 809a 	bpl.w	1a7a0 <_vfiprintf_r+0x484>
   1a66c:	065a      	lsls	r2, r3, #25
   1a66e:	f100 8513 	bmi.w	1b098 <_vfiprintf_r+0xd7c>
   1a672:	9806      	ldr	r0, [sp, #24]
   1a674:	b03d      	add	sp, #244	; 0xf4
   1a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a67a:	2900      	cmp	r1, #0
   1a67c:	f000 84a3 	beq.w	1afc6 <_vfiprintf_r+0xcaa>
   1a680:	2300      	movs	r3, #0
   1a682:	ad23      	add	r5, sp, #140	; 0x8c
   1a684:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
   1a688:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1a68c:	2301      	movs	r3, #1
   1a68e:	9302      	str	r3, [sp, #8]
   1a690:	9303      	str	r3, [sp, #12]
   1a692:	f04f 0800 	mov.w	r8, #0
   1a696:	9b01      	ldr	r3, [sp, #4]
   1a698:	f013 0602 	ands.w	r6, r3, #2
   1a69c:	d002      	beq.n	1a6a4 <_vfiprintf_r+0x388>
   1a69e:	9b02      	ldr	r3, [sp, #8]
   1a6a0:	3302      	adds	r3, #2
   1a6a2:	9302      	str	r3, [sp, #8]
   1a6a4:	9b01      	ldr	r3, [sp, #4]
   1a6a6:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
   1a6aa:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1a6ae:	f102 0101 	add.w	r1, r2, #1
   1a6b2:	9308      	str	r3, [sp, #32]
   1a6b4:	468c      	mov	ip, r1
   1a6b6:	d105      	bne.n	1a6c4 <_vfiprintf_r+0x3a8>
   1a6b8:	9b02      	ldr	r3, [sp, #8]
   1a6ba:	ebab 0403 	sub.w	r4, fp, r3
   1a6be:	2c00      	cmp	r4, #0
   1a6c0:	f300 82b6 	bgt.w	1ac30 <_vfiprintf_r+0x914>
   1a6c4:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   1a6c8:	2900      	cmp	r1, #0
   1a6ca:	f000 81af 	beq.w	1aa2c <_vfiprintf_r+0x710>
   1a6ce:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   1a6d2:	3001      	adds	r0, #1
   1a6d4:	f1bc 0f07 	cmp.w	ip, #7
   1a6d8:	f8ca 2000 	str.w	r2, [sl]
   1a6dc:	f04f 0201 	mov.w	r2, #1
   1a6e0:	e9cd c011 	strd	ip, r0, [sp, #68]	; 0x44
   1a6e4:	f8ca 2004 	str.w	r2, [sl, #4]
   1a6e8:	f340 819b 	ble.w	1aa22 <_vfiprintf_r+0x706>
   1a6ec:	b148      	cbz	r0, 1a702 <_vfiprintf_r+0x3e6>
   1a6ee:	aa10      	add	r2, sp, #64	; 0x40
   1a6f0:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1a6f4:	f000 fd98 	bl	1b228 <__sfvwrite_r>
   1a6f8:	2200      	movs	r2, #0
   1a6fa:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
   1a6fe:	2800      	cmp	r0, #0
   1a700:	d1ad      	bne.n	1a65e <_vfiprintf_r+0x342>
   1a702:	2e00      	cmp	r6, #0
   1a704:	f000 81a6 	beq.w	1aa54 <_vfiprintf_r+0x738>
   1a708:	2002      	movs	r0, #2
   1a70a:	ab0f      	add	r3, sp, #60	; 0x3c
   1a70c:	f04f 0c01 	mov.w	ip, #1
   1a710:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1a714:	9014      	str	r0, [sp, #80]	; 0x50
   1a716:	9313      	str	r3, [sp, #76]	; 0x4c
   1a718:	4662      	mov	r2, ip
   1a71a:	f10a 0a08 	add.w	sl, sl, #8
   1a71e:	f10c 0c01 	add.w	ip, ip, #1
   1a722:	9b08      	ldr	r3, [sp, #32]
   1a724:	2b80      	cmp	r3, #128	; 0x80
   1a726:	f000 819f 	beq.w	1aa68 <_vfiprintf_r+0x74c>
   1a72a:	9b03      	ldr	r3, [sp, #12]
   1a72c:	eba8 0703 	sub.w	r7, r8, r3
   1a730:	2f00      	cmp	r7, #0
   1a732:	f300 821d 	bgt.w	1ab70 <_vfiprintf_r+0x854>
   1a736:	9b03      	ldr	r3, [sp, #12]
   1a738:	f1bc 0f07 	cmp.w	ip, #7
   1a73c:	f8ca 5000 	str.w	r5, [sl]
   1a740:	4418      	add	r0, r3
   1a742:	f8ca 3004 	str.w	r3, [sl, #4]
   1a746:	e9cd c011 	strd	ip, r0, [sp, #68]	; 0x44
   1a74a:	f340 81d9 	ble.w	1ab00 <_vfiprintf_r+0x7e4>
   1a74e:	2800      	cmp	r0, #0
   1a750:	f040 8262 	bne.w	1ac18 <_vfiprintf_r+0x8fc>
   1a754:	9011      	str	r0, [sp, #68]	; 0x44
   1a756:	9b01      	ldr	r3, [sp, #4]
   1a758:	075b      	lsls	r3, r3, #29
   1a75a:	f140 823f 	bpl.w	1abdc <_vfiprintf_r+0x8c0>
   1a75e:	9b02      	ldr	r3, [sp, #8]
   1a760:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1a764:	9812      	ldr	r0, [sp, #72]	; 0x48
   1a766:	ebab 0403 	sub.w	r4, fp, r3
   1a76a:	2c00      	cmp	r4, #0
   1a76c:	f300 81d4 	bgt.w	1ab18 <_vfiprintf_r+0x7fc>
   1a770:	9b06      	ldr	r3, [sp, #24]
   1a772:	9a02      	ldr	r2, [sp, #8]
   1a774:	4593      	cmp	fp, r2
   1a776:	bfac      	ite	ge
   1a778:	445b      	addge	r3, fp
   1a77a:	189b      	addlt	r3, r3, r2
   1a77c:	9306      	str	r3, [sp, #24]
   1a77e:	b150      	cbz	r0, 1a796 <_vfiprintf_r+0x47a>
   1a780:	aa10      	add	r2, sp, #64	; 0x40
   1a782:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1a786:	f000 fd4f 	bl	1b228 <__sfvwrite_r>
   1a78a:	2300      	movs	r3, #0
   1a78c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1a790:	2800      	cmp	r0, #0
   1a792:	f47f af64 	bne.w	1a65e <_vfiprintf_r+0x342>
   1a796:	2300      	movs	r3, #0
   1a798:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1a79c:	9311      	str	r3, [sp, #68]	; 0x44
   1a79e:	e5ec      	b.n	1a37a <_vfiprintf_r+0x5e>
   1a7a0:	0599      	lsls	r1, r3, #22
   1a7a2:	f53f af63 	bmi.w	1a66c <_vfiprintf_r+0x350>
   1a7a6:	9c04      	ldr	r4, [sp, #16]
   1a7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a7aa:	f005 fc48 	bl	2003e <__retarget_lock_release_recursive>
   1a7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a7b2:	e75b      	b.n	1a66c <_vfiprintf_r+0x350>
   1a7b4:	9907      	ldr	r1, [sp, #28]
   1a7b6:	f851 3b04 	ldr.w	r3, [r1], #4
   1a7ba:	9107      	str	r1, [sp, #28]
   1a7bc:	9901      	ldr	r1, [sp, #4]
   1a7be:	f011 0110 	ands.w	r1, r1, #16
   1a7c2:	f47f af0a 	bne.w	1a5da <_vfiprintf_r+0x2be>
   1a7c6:	9a01      	ldr	r2, [sp, #4]
   1a7c8:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   1a7cc:	f000 8411 	beq.w	1aff2 <_vfiprintf_r+0xcd6>
   1a7d0:	b29b      	uxth	r3, r3
   1a7d2:	460a      	mov	r2, r1
   1a7d4:	e701      	b.n	1a5da <_vfiprintf_r+0x2be>
   1a7d6:	9a07      	ldr	r2, [sp, #28]
   1a7d8:	f852 3b04 	ldr.w	r3, [r2], #4
   1a7dc:	9207      	str	r2, [sp, #28]
   1a7de:	9a01      	ldr	r2, [sp, #4]
   1a7e0:	06d6      	lsls	r6, r2, #27
   1a7e2:	d438      	bmi.n	1a856 <_vfiprintf_r+0x53a>
   1a7e4:	9a01      	ldr	r2, [sp, #4]
   1a7e6:	0655      	lsls	r5, r2, #25
   1a7e8:	d531      	bpl.n	1a84e <_vfiprintf_r+0x532>
   1a7ea:	f343 32c0 	sbfx	r2, r3, #15, #1
   1a7ee:	b21b      	sxth	r3, r3
   1a7f0:	4611      	mov	r1, r2
   1a7f2:	e695      	b.n	1a520 <_vfiprintf_r+0x204>
   1a7f4:	9c07      	ldr	r4, [sp, #28]
   1a7f6:	2600      	movs	r6, #0
   1a7f8:	f854 5b04 	ldr.w	r5, [r4], #4
   1a7fc:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
   1a800:	2d00      	cmp	r5, #0
   1a802:	f000 83d6 	beq.w	1afb2 <_vfiprintf_r+0xc96>
   1a806:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a80a:	f000 8345 	beq.w	1ae98 <_vfiprintf_r+0xb7c>
   1a80e:	4642      	mov	r2, r8
   1a810:	4631      	mov	r1, r6
   1a812:	4628      	mov	r0, r5
   1a814:	f7fc fcd0 	bl	171b8 <memchr>
   1a818:	2800      	cmp	r0, #0
   1a81a:	f000 8414 	beq.w	1b046 <_vfiprintf_r+0xd2a>
   1a81e:	1b43      	subs	r3, r0, r5
   1a820:	46b0      	mov	r8, r6
   1a822:	9407      	str	r4, [sp, #28]
   1a824:	9303      	str	r3, [sp, #12]
   1a826:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1a82a:	e694      	b.n	1a556 <_vfiprintf_r+0x23a>
   1a82c:	9b07      	ldr	r3, [sp, #28]
   1a82e:	2200      	movs	r2, #0
   1a830:	ad23      	add	r5, sp, #140	; 0x8c
   1a832:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   1a836:	f853 2b04 	ldr.w	r2, [r3], #4
   1a83a:	9307      	str	r3, [sp, #28]
   1a83c:	2301      	movs	r3, #1
   1a83e:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
   1a842:	9302      	str	r3, [sp, #8]
   1a844:	9303      	str	r3, [sp, #12]
   1a846:	e724      	b.n	1a692 <_vfiprintf_r+0x376>
   1a848:	f7fe fe84 	bl	19554 <__sinit>
   1a84c:	e573      	b.n	1a336 <_vfiprintf_r+0x1a>
   1a84e:	9a01      	ldr	r2, [sp, #4]
   1a850:	0594      	lsls	r4, r2, #22
   1a852:	f100 83e6 	bmi.w	1b022 <_vfiprintf_r+0xd06>
   1a856:	17da      	asrs	r2, r3, #31
   1a858:	4611      	mov	r1, r2
   1a85a:	2900      	cmp	r1, #0
   1a85c:	f6bf ae63 	bge.w	1a526 <_vfiprintf_r+0x20a>
   1a860:	425b      	negs	r3, r3
   1a862:	f04f 012d 	mov.w	r1, #45	; 0x2d
   1a866:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1a86a:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a86e:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   1a872:	d003      	beq.n	1a87c <_vfiprintf_r+0x560>
   1a874:	9901      	ldr	r1, [sp, #4]
   1a876:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   1a87a:	9101      	str	r1, [sp, #4]
   1a87c:	2b0a      	cmp	r3, #10
   1a87e:	f172 0100 	sbcs.w	r1, r2, #0
   1a882:	f080 8325 	bcs.w	1aed0 <_vfiprintf_r+0xbb4>
   1a886:	3330      	adds	r3, #48	; 0x30
   1a888:	2201      	movs	r2, #1
   1a88a:	f10d 05ef 	add.w	r5, sp, #239	; 0xef
   1a88e:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   1a892:	9203      	str	r2, [sp, #12]
   1a894:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1a898:	e65d      	b.n	1a556 <_vfiprintf_r+0x23a>
   1a89a:	9b01      	ldr	r3, [sp, #4]
   1a89c:	f043 0010 	orr.w	r0, r3, #16
   1a8a0:	f010 0220 	ands.w	r2, r0, #32
   1a8a4:	f000 824b 	beq.w	1ad3e <_vfiprintf_r+0xa22>
   1a8a8:	9b07      	ldr	r3, [sp, #28]
   1a8aa:	3307      	adds	r3, #7
   1a8ac:	f023 0307 	bic.w	r3, r3, #7
   1a8b0:	4619      	mov	r1, r3
   1a8b2:	685a      	ldr	r2, [r3, #4]
   1a8b4:	f851 3b08 	ldr.w	r3, [r1], #8
   1a8b8:	9107      	str	r1, [sp, #28]
   1a8ba:	2100      	movs	r1, #0
   1a8bc:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a8c0:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   1a8c4:	f000 83bd 	beq.w	1b042 <_vfiprintf_r+0xd26>
   1a8c8:	2101      	movs	r1, #1
   1a8ca:	f020 0480 	bic.w	r4, r0, #128	; 0x80
   1a8ce:	9401      	str	r4, [sp, #4]
   1a8d0:	ea53 0402 	orrs.w	r4, r3, r2
   1a8d4:	f040 81f7 	bne.w	1acc6 <_vfiprintf_r+0x9aa>
   1a8d8:	f1b8 0400 	subs.w	r4, r8, #0
   1a8dc:	bf18      	it	ne
   1a8de:	2401      	movne	r4, #1
   1a8e0:	f1b8 0f00 	cmp.w	r8, #0
   1a8e4:	f040 81ef 	bne.w	1acc6 <_vfiprintf_r+0x9aa>
   1a8e8:	2900      	cmp	r1, #0
   1a8ea:	f040 8203 	bne.w	1acf4 <_vfiprintf_r+0x9d8>
   1a8ee:	f010 0301 	ands.w	r3, r0, #1
   1a8f2:	4688      	mov	r8, r1
   1a8f4:	9303      	str	r3, [sp, #12]
   1a8f6:	f000 820d 	beq.w	1ad14 <_vfiprintf_r+0x9f8>
   1a8fa:	2330      	movs	r3, #48	; 0x30
   1a8fc:	f10d 05ef 	add.w	r5, sp, #239	; 0xef
   1a900:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   1a904:	e68c      	b.n	1a620 <_vfiprintf_r+0x304>
   1a906:	9b01      	ldr	r3, [sp, #4]
   1a908:	9a07      	ldr	r2, [sp, #28]
   1a90a:	f043 0002 	orr.w	r0, r3, #2
   1a90e:	f647 0330 	movw	r3, #30768	; 0x7830
   1a912:	49be      	ldr	r1, [pc, #760]	; (1ac0c <_vfiprintf_r+0x8f0>)
   1a914:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   1a918:	f852 3b04 	ldr.w	r3, [r2], #4
   1a91c:	9109      	str	r1, [sp, #36]	; 0x24
   1a91e:	9207      	str	r2, [sp, #28]
   1a920:	2200      	movs	r2, #0
   1a922:	f04f 0100 	mov.w	r1, #0
   1a926:	f1b8 3fff 	cmp.w	r8, #4294967295
   1a92a:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   1a92e:	f000 81d1 	beq.w	1acd4 <_vfiprintf_r+0x9b8>
   1a932:	2102      	movs	r1, #2
   1a934:	e7c9      	b.n	1a8ca <_vfiprintf_r+0x5ae>
   1a936:	9b01      	ldr	r3, [sp, #4]
   1a938:	0698      	lsls	r0, r3, #26
   1a93a:	f140 8237 	bpl.w	1adac <_vfiprintf_r+0xa90>
   1a93e:	9b07      	ldr	r3, [sp, #28]
   1a940:	9a06      	ldr	r2, [sp, #24]
   1a942:	681b      	ldr	r3, [r3, #0]
   1a944:	601a      	str	r2, [r3, #0]
   1a946:	17d2      	asrs	r2, r2, #31
   1a948:	605a      	str	r2, [r3, #4]
   1a94a:	9b07      	ldr	r3, [sp, #28]
   1a94c:	3304      	adds	r3, #4
   1a94e:	9307      	str	r3, [sp, #28]
   1a950:	e513      	b.n	1a37a <_vfiprintf_r+0x5e>
   1a952:	9b01      	ldr	r3, [sp, #4]
   1a954:	f899 1000 	ldrb.w	r1, [r9]
   1a958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a95c:	9301      	str	r3, [sp, #4]
   1a95e:	e53c      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a960:	464a      	mov	r2, r9
   1a962:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a966:	292a      	cmp	r1, #42	; 0x2a
   1a968:	f000 839b 	beq.w	1b0a2 <_vfiprintf_r+0xd86>
   1a96c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1a970:	4691      	mov	r9, r2
   1a972:	f04f 0800 	mov.w	r8, #0
   1a976:	2b09      	cmp	r3, #9
   1a978:	f63f ad31 	bhi.w	1a3de <_vfiprintf_r+0xc2>
   1a97c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a980:	f819 1b01 	ldrb.w	r1, [r9], #1
   1a984:	eb03 0848 	add.w	r8, r3, r8, lsl #1
   1a988:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1a98c:	2b09      	cmp	r3, #9
   1a98e:	d9f5      	bls.n	1a97c <_vfiprintf_r+0x660>
   1a990:	e525      	b.n	1a3de <_vfiprintf_r+0xc2>
   1a992:	232b      	movs	r3, #43	; 0x2b
   1a994:	f899 1000 	ldrb.w	r1, [r9]
   1a998:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1a99c:	e51d      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a99e:	9b07      	ldr	r3, [sp, #28]
   1a9a0:	f853 bb04 	ldr.w	fp, [r3], #4
   1a9a4:	f1bb 0f00 	cmp.w	fp, #0
   1a9a8:	f6ff ae40 	blt.w	1a62c <_vfiprintf_r+0x310>
   1a9ac:	f899 1000 	ldrb.w	r1, [r9]
   1a9b0:	9307      	str	r3, [sp, #28]
   1a9b2:	e512      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a9b4:	9b01      	ldr	r3, [sp, #4]
   1a9b6:	f899 1000 	ldrb.w	r1, [r9]
   1a9ba:	f043 0301 	orr.w	r3, r3, #1
   1a9be:	9301      	str	r3, [sp, #4]
   1a9c0:	e50b      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a9c2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1a9c6:	f899 1000 	ldrb.w	r1, [r9]
   1a9ca:	2b00      	cmp	r3, #0
   1a9cc:	f47f ad05 	bne.w	1a3da <_vfiprintf_r+0xbe>
   1a9d0:	2320      	movs	r3, #32
   1a9d2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1a9d6:	e500      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a9d8:	f899 1000 	ldrb.w	r1, [r9]
   1a9dc:	9b01      	ldr	r3, [sp, #4]
   1a9de:	2968      	cmp	r1, #104	; 0x68
   1a9e0:	f000 82d9 	beq.w	1af96 <_vfiprintf_r+0xc7a>
   1a9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a9e8:	9301      	str	r3, [sp, #4]
   1a9ea:	e4f6      	b.n	1a3da <_vfiprintf_r+0xbe>
   1a9ec:	f899 1000 	ldrb.w	r1, [r9]
   1a9f0:	9b01      	ldr	r3, [sp, #4]
   1a9f2:	296c      	cmp	r1, #108	; 0x6c
   1a9f4:	f000 82c6 	beq.w	1af84 <_vfiprintf_r+0xc68>
   1a9f8:	f043 0310 	orr.w	r3, r3, #16
   1a9fc:	9301      	str	r3, [sp, #4]
   1a9fe:	e4ec      	b.n	1a3da <_vfiprintf_r+0xbe>
   1aa00:	2800      	cmp	r0, #0
   1aa02:	f040 822b 	bne.w	1ae5c <_vfiprintf_r+0xb40>
   1aa06:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1aa0a:	2a00      	cmp	r2, #0
   1aa0c:	f000 8220 	beq.w	1ae50 <_vfiprintf_r+0xb34>
   1aa10:	2201      	movs	r2, #1
   1aa12:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1aa16:	4694      	mov	ip, r2
   1aa18:	9214      	str	r2, [sp, #80]	; 0x50
   1aa1a:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   1aa1e:	4660      	mov	r0, ip
   1aa20:	9213      	str	r2, [sp, #76]	; 0x4c
   1aa22:	4662      	mov	r2, ip
   1aa24:	f10a 0a08 	add.w	sl, sl, #8
   1aa28:	f10c 0c01 	add.w	ip, ip, #1
   1aa2c:	2e00      	cmp	r6, #0
   1aa2e:	f43f ae78 	beq.w	1a722 <_vfiprintf_r+0x406>
   1aa32:	ab0f      	add	r3, sp, #60	; 0x3c
   1aa34:	3002      	adds	r0, #2
   1aa36:	f1bc 0f07 	cmp.w	ip, #7
   1aa3a:	f8ca 3000 	str.w	r3, [sl]
   1aa3e:	f04f 0302 	mov.w	r3, #2
   1aa42:	e9cd c011 	strd	ip, r0, [sp, #68]	; 0x44
   1aa46:	f8ca 3004 	str.w	r3, [sl, #4]
   1aa4a:	f77f ae65 	ble.w	1a718 <_vfiprintf_r+0x3fc>
   1aa4e:	2800      	cmp	r0, #0
   1aa50:	f040 8154 	bne.w	1acfc <_vfiprintf_r+0x9e0>
   1aa54:	9b08      	ldr	r3, [sp, #32]
   1aa56:	2200      	movs	r2, #0
   1aa58:	f04f 0c01 	mov.w	ip, #1
   1aa5c:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1aa60:	2b80      	cmp	r3, #128	; 0x80
   1aa62:	4610      	mov	r0, r2
   1aa64:	f47f ae61 	bne.w	1a72a <_vfiprintf_r+0x40e>
   1aa68:	9b02      	ldr	r3, [sp, #8]
   1aa6a:	ebab 0703 	sub.w	r7, fp, r3
   1aa6e:	2f00      	cmp	r7, #0
   1aa70:	f77f ae5b 	ble.w	1a72a <_vfiprintf_r+0x40e>
   1aa74:	2f10      	cmp	r7, #16
   1aa76:	f340 8300 	ble.w	1b07a <_vfiprintf_r+0xd5e>
   1aa7a:	4c65      	ldr	r4, [pc, #404]	; (1ac10 <_vfiprintf_r+0x8f4>)
   1aa7c:	46d4      	mov	ip, sl
   1aa7e:	2600      	movs	r6, #0
   1aa80:	46ca      	mov	sl, r9
   1aa82:	46c1      	mov	r9, r8
   1aa84:	46a8      	mov	r8, r5
   1aa86:	4625      	mov	r5, r4
   1aa88:	9c05      	ldr	r4, [sp, #20]
   1aa8a:	e009      	b.n	1aaa0 <_vfiprintf_r+0x784>
   1aa8c:	2200      	movs	r2, #0
   1aa8e:	f04f 0e01 	mov.w	lr, #1
   1aa92:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   1aa96:	4610      	mov	r0, r2
   1aa98:	3f10      	subs	r7, #16
   1aa9a:	2f10      	cmp	r7, #16
   1aa9c:	f340 813c 	ble.w	1ad18 <_vfiprintf_r+0x9fc>
   1aaa0:	1c51      	adds	r1, r2, #1
   1aaa2:	3010      	adds	r0, #16
   1aaa4:	2310      	movs	r3, #16
   1aaa6:	f102 0e02 	add.w	lr, r2, #2
   1aaaa:	2907      	cmp	r1, #7
   1aaac:	f8cc 5000 	str.w	r5, [ip]
   1aab0:	f8cc 3004 	str.w	r3, [ip, #4]
   1aab4:	460a      	mov	r2, r1
   1aab6:	f10c 0c08 	add.w	ip, ip, #8
   1aaba:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
   1aabe:	ddeb      	ble.n	1aa98 <_vfiprintf_r+0x77c>
   1aac0:	aa10      	add	r2, sp, #64	; 0x40
   1aac2:	2800      	cmp	r0, #0
   1aac4:	d0e2      	beq.n	1aa8c <_vfiprintf_r+0x770>
   1aac6:	9904      	ldr	r1, [sp, #16]
   1aac8:	4620      	mov	r0, r4
   1aaca:	f000 fbad 	bl	1b228 <__sfvwrite_r>
   1aace:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
   1aad2:	2800      	cmp	r0, #0
   1aad4:	d0da      	beq.n	1aa8c <_vfiprintf_r+0x770>
   1aad6:	e5c2      	b.n	1a65e <_vfiprintf_r+0x342>
   1aad8:	b150      	cbz	r0, 1aaf0 <_vfiprintf_r+0x7d4>
   1aada:	aa10      	add	r2, sp, #64	; 0x40
   1aadc:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1aae0:	f000 fba2 	bl	1b228 <__sfvwrite_r>
   1aae4:	2300      	movs	r3, #0
   1aae6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1aaea:	2800      	cmp	r0, #0
   1aaec:	f47f adb7 	bne.w	1a65e <_vfiprintf_r+0x342>
   1aaf0:	9803      	ldr	r0, [sp, #12]
   1aaf2:	2301      	movs	r3, #1
   1aaf4:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1aaf8:	9513      	str	r5, [sp, #76]	; 0x4c
   1aafa:	9014      	str	r0, [sp, #80]	; 0x50
   1aafc:	9012      	str	r0, [sp, #72]	; 0x48
   1aafe:	9311      	str	r3, [sp, #68]	; 0x44
   1ab00:	9b01      	ldr	r3, [sp, #4]
   1ab02:	075c      	lsls	r4, r3, #29
   1ab04:	f57f ae34 	bpl.w	1a770 <_vfiprintf_r+0x454>
   1ab08:	9b02      	ldr	r3, [sp, #8]
   1ab0a:	f10a 0a08 	add.w	sl, sl, #8
   1ab0e:	ebab 0403 	sub.w	r4, fp, r3
   1ab12:	2c00      	cmp	r4, #0
   1ab14:	f77f ae2c 	ble.w	1a770 <_vfiprintf_r+0x454>
   1ab18:	2c10      	cmp	r4, #16
   1ab1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ab1c:	f340 82aa 	ble.w	1b074 <_vfiprintf_r+0xd58>
   1ab20:	4f3c      	ldr	r7, [pc, #240]	; (1ac14 <_vfiprintf_r+0x8f8>)
   1ab22:	2510      	movs	r5, #16
   1ab24:	2600      	movs	r6, #0
   1ab26:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1ab2a:	e008      	b.n	1ab3e <_vfiprintf_r+0x822>
   1ab2c:	2200      	movs	r2, #0
   1ab2e:	f04f 0c01 	mov.w	ip, #1
   1ab32:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1ab36:	4610      	mov	r0, r2
   1ab38:	3c10      	subs	r4, #16
   1ab3a:	2c10      	cmp	r4, #16
   1ab3c:	dd42      	ble.n	1abc4 <_vfiprintf_r+0x8a8>
   1ab3e:	1c51      	adds	r1, r2, #1
   1ab40:	3010      	adds	r0, #16
   1ab42:	f102 0c02 	add.w	ip, r2, #2
   1ab46:	2907      	cmp	r1, #7
   1ab48:	460a      	mov	r2, r1
   1ab4a:	e9ca 7500 	strd	r7, r5, [sl]
   1ab4e:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
   1ab52:	f10a 0a08 	add.w	sl, sl, #8
   1ab56:	ddef      	ble.n	1ab38 <_vfiprintf_r+0x81c>
   1ab58:	aa10      	add	r2, sp, #64	; 0x40
   1ab5a:	2800      	cmp	r0, #0
   1ab5c:	d0e6      	beq.n	1ab2c <_vfiprintf_r+0x810>
   1ab5e:	9904      	ldr	r1, [sp, #16]
   1ab60:	4640      	mov	r0, r8
   1ab62:	f000 fb61 	bl	1b228 <__sfvwrite_r>
   1ab66:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
   1ab6a:	2800      	cmp	r0, #0
   1ab6c:	d0de      	beq.n	1ab2c <_vfiprintf_r+0x810>
   1ab6e:	e576      	b.n	1a65e <_vfiprintf_r+0x342>
   1ab70:	4c27      	ldr	r4, [pc, #156]	; (1ac10 <_vfiprintf_r+0x8f4>)
   1ab72:	2f10      	cmp	r7, #16
   1ab74:	dd3a      	ble.n	1abec <_vfiprintf_r+0x8d0>
   1ab76:	f04f 0810 	mov.w	r8, #16
   1ab7a:	9e04      	ldr	r6, [sp, #16]
   1ab7c:	e008      	b.n	1ab90 <_vfiprintf_r+0x874>
   1ab7e:	2200      	movs	r2, #0
   1ab80:	f04f 0c01 	mov.w	ip, #1
   1ab84:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1ab88:	4610      	mov	r0, r2
   1ab8a:	3f10      	subs	r7, #16
   1ab8c:	2f10      	cmp	r7, #16
   1ab8e:	dd2d      	ble.n	1abec <_vfiprintf_r+0x8d0>
   1ab90:	1c51      	adds	r1, r2, #1
   1ab92:	3010      	adds	r0, #16
   1ab94:	f102 0c02 	add.w	ip, r2, #2
   1ab98:	2907      	cmp	r1, #7
   1ab9a:	460a      	mov	r2, r1
   1ab9c:	e9ca 4800 	strd	r4, r8, [sl]
   1aba0:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
   1aba4:	f10a 0a08 	add.w	sl, sl, #8
   1aba8:	ddef      	ble.n	1ab8a <_vfiprintf_r+0x86e>
   1abaa:	aa10      	add	r2, sp, #64	; 0x40
   1abac:	4631      	mov	r1, r6
   1abae:	2800      	cmp	r0, #0
   1abb0:	d0e5      	beq.n	1ab7e <_vfiprintf_r+0x862>
   1abb2:	9805      	ldr	r0, [sp, #20]
   1abb4:	f000 fb38 	bl	1b228 <__sfvwrite_r>
   1abb8:	2300      	movs	r3, #0
   1abba:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1abbe:	2800      	cmp	r0, #0
   1abc0:	d0dd      	beq.n	1ab7e <_vfiprintf_r+0x862>
   1abc2:	e54c      	b.n	1a65e <_vfiprintf_r+0x342>
   1abc4:	4661      	mov	r1, ip
   1abc6:	4420      	add	r0, r4
   1abc8:	2907      	cmp	r1, #7
   1abca:	e9ca 7400 	strd	r7, r4, [sl]
   1abce:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
   1abd2:	f77f adcd 	ble.w	1a770 <_vfiprintf_r+0x454>
   1abd6:	2800      	cmp	r0, #0
   1abd8:	f040 8151 	bne.w	1ae7e <_vfiprintf_r+0xb62>
   1abdc:	9b06      	ldr	r3, [sp, #24]
   1abde:	9a02      	ldr	r2, [sp, #8]
   1abe0:	4593      	cmp	fp, r2
   1abe2:	bfac      	ite	ge
   1abe4:	445b      	addge	r3, fp
   1abe6:	189b      	addlt	r3, r3, r2
   1abe8:	9306      	str	r3, [sp, #24]
   1abea:	e5d4      	b.n	1a796 <_vfiprintf_r+0x47a>
   1abec:	4438      	add	r0, r7
   1abee:	f1bc 0f07 	cmp.w	ip, #7
   1abf2:	f8ca 4000 	str.w	r4, [sl]
   1abf6:	f8ca 7004 	str.w	r7, [sl, #4]
   1abfa:	e9cd c011 	strd	ip, r0, [sp, #68]	; 0x44
   1abfe:	f73f af6b 	bgt.w	1aad8 <_vfiprintf_r+0x7bc>
   1ac02:	f10a 0a08 	add.w	sl, sl, #8
   1ac06:	f10c 0c01 	add.w	ip, ip, #1
   1ac0a:	e594      	b.n	1a736 <_vfiprintf_r+0x41a>
   1ac0c:	000312d4 	.word	0x000312d4
   1ac10:	00031438 	.word	0x00031438
   1ac14:	00031448 	.word	0x00031448
   1ac18:	aa10      	add	r2, sp, #64	; 0x40
   1ac1a:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1ac1e:	f000 fb03 	bl	1b228 <__sfvwrite_r>
   1ac22:	2300      	movs	r3, #0
   1ac24:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1ac28:	2800      	cmp	r0, #0
   1ac2a:	f43f ad94 	beq.w	1a756 <_vfiprintf_r+0x43a>
   1ac2e:	e516      	b.n	1a65e <_vfiprintf_r+0x342>
   1ac30:	2c10      	cmp	r4, #16
   1ac32:	f340 8210 	ble.w	1b056 <_vfiprintf_r+0xd3a>
   1ac36:	46d4      	mov	ip, sl
   1ac38:	950b      	str	r5, [sp, #44]	; 0x2c
   1ac3a:	46ca      	mov	sl, r9
   1ac3c:	4faa      	ldr	r7, [pc, #680]	; (1aee8 <_vfiprintf_r+0xbcc>)
   1ac3e:	46c1      	mov	r9, r8
   1ac40:	2310      	movs	r3, #16
   1ac42:	46b0      	mov	r8, r6
   1ac44:	9d08      	ldr	r5, [sp, #32]
   1ac46:	9e04      	ldr	r6, [sp, #16]
   1ac48:	e005      	b.n	1ac56 <_vfiprintf_r+0x93a>
   1ac4a:	3c10      	subs	r4, #16
   1ac4c:	460a      	mov	r2, r1
   1ac4e:	2c10      	cmp	r4, #16
   1ac50:	f102 0101 	add.w	r1, r2, #1
   1ac54:	dd18      	ble.n	1ac88 <_vfiprintf_r+0x96c>
   1ac56:	3010      	adds	r0, #16
   1ac58:	2907      	cmp	r1, #7
   1ac5a:	f102 0e02 	add.w	lr, r2, #2
   1ac5e:	e9cc 7300 	strd	r7, r3, [ip]
   1ac62:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
   1ac66:	f10c 0c08 	add.w	ip, ip, #8
   1ac6a:	ddee      	ble.n	1ac4a <_vfiprintf_r+0x92e>
   1ac6c:	aa10      	add	r2, sp, #64	; 0x40
   1ac6e:	4631      	mov	r1, r6
   1ac70:	bb00      	cbnz	r0, 1acb4 <_vfiprintf_r+0x998>
   1ac72:	3c10      	subs	r4, #16
   1ac74:	2200      	movs	r2, #0
   1ac76:	f04f 0e01 	mov.w	lr, #1
   1ac7a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   1ac7e:	2c10      	cmp	r4, #16
   1ac80:	4610      	mov	r0, r2
   1ac82:	f102 0101 	add.w	r1, r2, #1
   1ac86:	dce6      	bgt.n	1ac56 <_vfiprintf_r+0x93a>
   1ac88:	4646      	mov	r6, r8
   1ac8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1ac8c:	46c8      	mov	r8, r9
   1ac8e:	46d1      	mov	r9, sl
   1ac90:	46e2      	mov	sl, ip
   1ac92:	4420      	add	r0, r4
   1ac94:	f1be 0f07 	cmp.w	lr, #7
   1ac98:	f8ca 7000 	str.w	r7, [sl]
   1ac9c:	f8ca 4004 	str.w	r4, [sl, #4]
   1aca0:	e9cd e011 	strd	lr, r0, [sp, #68]	; 0x44
   1aca4:	f73f aeac 	bgt.w	1aa00 <_vfiprintf_r+0x6e4>
   1aca8:	f10a 0a08 	add.w	sl, sl, #8
   1acac:	f10e 0c01 	add.w	ip, lr, #1
   1acb0:	4672      	mov	r2, lr
   1acb2:	e507      	b.n	1a6c4 <_vfiprintf_r+0x3a8>
   1acb4:	9805      	ldr	r0, [sp, #20]
   1acb6:	f000 fab7 	bl	1b228 <__sfvwrite_r>
   1acba:	2310      	movs	r3, #16
   1acbc:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
   1acc0:	2800      	cmp	r0, #0
   1acc2:	d0d6      	beq.n	1ac72 <_vfiprintf_r+0x956>
   1acc4:	e4cb      	b.n	1a65e <_vfiprintf_r+0x342>
   1acc6:	2901      	cmp	r1, #1
   1acc8:	f43f add8 	beq.w	1a87c <_vfiprintf_r+0x560>
   1accc:	2902      	cmp	r1, #2
   1acce:	f47f ac90 	bne.w	1a5f2 <_vfiprintf_r+0x2d6>
   1acd2:	9801      	ldr	r0, [sp, #4]
   1acd4:	ad3c      	add	r5, sp, #240	; 0xf0
   1acd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1acd8:	f003 010f 	and.w	r1, r3, #15
   1acdc:	091b      	lsrs	r3, r3, #4
   1acde:	5c61      	ldrb	r1, [r4, r1]
   1ace0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   1ace4:	0912      	lsrs	r2, r2, #4
   1ace6:	f805 1d01 	strb.w	r1, [r5, #-1]!
   1acea:	ea53 0102 	orrs.w	r1, r3, r2
   1acee:	d1f3      	bne.n	1acd8 <_vfiprintf_r+0x9bc>
   1acf0:	9001      	str	r0, [sp, #4]
   1acf2:	e492      	b.n	1a61a <_vfiprintf_r+0x2fe>
   1acf4:	46a0      	mov	r8, r4
   1acf6:	ad3c      	add	r5, sp, #240	; 0xf0
   1acf8:	9403      	str	r4, [sp, #12]
   1acfa:	e491      	b.n	1a620 <_vfiprintf_r+0x304>
   1acfc:	aa10      	add	r2, sp, #64	; 0x40
   1acfe:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1ad02:	f000 fa91 	bl	1b228 <__sfvwrite_r>
   1ad06:	2300      	movs	r3, #0
   1ad08:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1ad0c:	2800      	cmp	r0, #0
   1ad0e:	f43f aea1 	beq.w	1aa54 <_vfiprintf_r+0x738>
   1ad12:	e4a4      	b.n	1a65e <_vfiprintf_r+0x342>
   1ad14:	ad3c      	add	r5, sp, #240	; 0xf0
   1ad16:	e483      	b.n	1a620 <_vfiprintf_r+0x304>
   1ad18:	462c      	mov	r4, r5
   1ad1a:	4671      	mov	r1, lr
   1ad1c:	4645      	mov	r5, r8
   1ad1e:	46c8      	mov	r8, r9
   1ad20:	46d1      	mov	r9, sl
   1ad22:	46e2      	mov	sl, ip
   1ad24:	4438      	add	r0, r7
   1ad26:	2907      	cmp	r1, #7
   1ad28:	e9ca 4700 	strd	r4, r7, [sl]
   1ad2c:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
   1ad30:	dc16      	bgt.n	1ad60 <_vfiprintf_r+0xa44>
   1ad32:	f10a 0a08 	add.w	sl, sl, #8
   1ad36:	f101 0c01 	add.w	ip, r1, #1
   1ad3a:	460a      	mov	r2, r1
   1ad3c:	e4f5      	b.n	1a72a <_vfiprintf_r+0x40e>
   1ad3e:	9907      	ldr	r1, [sp, #28]
   1ad40:	f851 3b04 	ldr.w	r3, [r1], #4
   1ad44:	9107      	str	r1, [sp, #28]
   1ad46:	f010 0110 	ands.w	r1, r0, #16
   1ad4a:	f47f adb6 	bne.w	1a8ba <_vfiprintf_r+0x59e>
   1ad4e:	f010 0440 	ands.w	r4, r0, #64	; 0x40
   1ad52:	f000 813f 	beq.w	1afd4 <_vfiprintf_r+0xcb8>
   1ad56:	b29b      	uxth	r3, r3
   1ad58:	460a      	mov	r2, r1
   1ad5a:	e5ae      	b.n	1a8ba <_vfiprintf_r+0x59e>
   1ad5c:	9801      	ldr	r0, [sp, #4]
   1ad5e:	e5b4      	b.n	1a8ca <_vfiprintf_r+0x5ae>
   1ad60:	2800      	cmp	r0, #0
   1ad62:	f040 80a3 	bne.w	1aeac <_vfiprintf_r+0xb90>
   1ad66:	9b03      	ldr	r3, [sp, #12]
   1ad68:	eba8 0703 	sub.w	r7, r8, r3
   1ad6c:	2f00      	cmp	r7, #0
   1ad6e:	f77f aebf 	ble.w	1aaf0 <_vfiprintf_r+0x7d4>
   1ad72:	2200      	movs	r2, #0
   1ad74:	f04f 0c01 	mov.w	ip, #1
   1ad78:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1ad7c:	4610      	mov	r0, r2
   1ad7e:	e6f8      	b.n	1ab72 <_vfiprintf_r+0x856>
   1ad80:	2330      	movs	r3, #48	; 0x30
   1ad82:	3802      	subs	r0, #2
   1ad84:	f805 3c01 	strb.w	r3, [r5, #-1]
   1ad88:	ab3c      	add	r3, sp, #240	; 0xf0
   1ad8a:	4605      	mov	r5, r0
   1ad8c:	1a1b      	subs	r3, r3, r0
   1ad8e:	9303      	str	r3, [sp, #12]
   1ad90:	e446      	b.n	1a620 <_vfiprintf_r+0x304>
   1ad92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad94:	f899 1000 	ldrb.w	r1, [r9]
   1ad98:	781b      	ldrb	r3, [r3, #0]
   1ad9a:	2b00      	cmp	r3, #0
   1ad9c:	f43f ab1d 	beq.w	1a3da <_vfiprintf_r+0xbe>
   1ada0:	9b01      	ldr	r3, [sp, #4]
   1ada2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ada6:	9301      	str	r3, [sp, #4]
   1ada8:	f7ff bb17 	b.w	1a3da <_vfiprintf_r+0xbe>
   1adac:	9b01      	ldr	r3, [sp, #4]
   1adae:	06d9      	lsls	r1, r3, #27
   1adb0:	f100 80fa 	bmi.w	1afa8 <_vfiprintf_r+0xc8c>
   1adb4:	9b01      	ldr	r3, [sp, #4]
   1adb6:	065a      	lsls	r2, r3, #25
   1adb8:	f100 8139 	bmi.w	1b02e <_vfiprintf_r+0xd12>
   1adbc:	9b01      	ldr	r3, [sp, #4]
   1adbe:	059b      	lsls	r3, r3, #22
   1adc0:	f140 80f2 	bpl.w	1afa8 <_vfiprintf_r+0xc8c>
   1adc4:	9b07      	ldr	r3, [sp, #28]
   1adc6:	9a06      	ldr	r2, [sp, #24]
   1adc8:	681b      	ldr	r3, [r3, #0]
   1adca:	701a      	strb	r2, [r3, #0]
   1adcc:	e5bd      	b.n	1a94a <_vfiprintf_r+0x62e>
   1adce:	9d04      	ldr	r5, [sp, #16]
   1add0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1add2:	f005 f92e 	bl	20032 <__retarget_lock_acquire_recursive>
   1add6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   1adda:	f7ff bab5 	b.w	1a348 <_vfiprintf_r+0x2c>
   1adde:	9801      	ldr	r0, [sp, #4]
   1ade0:	e55e      	b.n	1a8a0 <_vfiprintf_r+0x584>
   1ade2:	4b42      	ldr	r3, [pc, #264]	; (1aeec <_vfiprintf_r+0xbd0>)
   1ade4:	9309      	str	r3, [sp, #36]	; 0x24
   1ade6:	9b01      	ldr	r3, [sp, #4]
   1ade8:	f013 0220 	ands.w	r2, r3, #32
   1adec:	d020      	beq.n	1ae30 <_vfiprintf_r+0xb14>
   1adee:	9b07      	ldr	r3, [sp, #28]
   1adf0:	3307      	adds	r3, #7
   1adf2:	f023 0307 	bic.w	r3, r3, #7
   1adf6:	4618      	mov	r0, r3
   1adf8:	685a      	ldr	r2, [r3, #4]
   1adfa:	f850 3b08 	ldr.w	r3, [r0], #8
   1adfe:	9007      	str	r0, [sp, #28]
   1ae00:	ea53 0002 	orrs.w	r0, r3, r2
   1ae04:	d00a      	beq.n	1ae1c <_vfiprintf_r+0xb00>
   1ae06:	9801      	ldr	r0, [sp, #4]
   1ae08:	07c7      	lsls	r7, r0, #31
   1ae0a:	d507      	bpl.n	1ae1c <_vfiprintf_r+0xb00>
   1ae0c:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
   1ae10:	f040 0102 	orr.w	r1, r0, #2
   1ae14:	9101      	str	r1, [sp, #4]
   1ae16:	2130      	movs	r1, #48	; 0x30
   1ae18:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
   1ae1c:	9901      	ldr	r1, [sp, #4]
   1ae1e:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
   1ae22:	e57e      	b.n	1a922 <_vfiprintf_r+0x606>
   1ae24:	4b32      	ldr	r3, [pc, #200]	; (1aef0 <_vfiprintf_r+0xbd4>)
   1ae26:	9309      	str	r3, [sp, #36]	; 0x24
   1ae28:	9b01      	ldr	r3, [sp, #4]
   1ae2a:	f013 0220 	ands.w	r2, r3, #32
   1ae2e:	d1de      	bne.n	1adee <_vfiprintf_r+0xad2>
   1ae30:	9807      	ldr	r0, [sp, #28]
   1ae32:	f850 3b04 	ldr.w	r3, [r0], #4
   1ae36:	9007      	str	r0, [sp, #28]
   1ae38:	9801      	ldr	r0, [sp, #4]
   1ae3a:	f010 0010 	ands.w	r0, r0, #16
   1ae3e:	d1df      	bne.n	1ae00 <_vfiprintf_r+0xae4>
   1ae40:	9a01      	ldr	r2, [sp, #4]
   1ae42:	f012 0440 	ands.w	r4, r2, #64	; 0x40
   1ae46:	f000 80cc 	beq.w	1afe2 <_vfiprintf_r+0xcc6>
   1ae4a:	b29b      	uxth	r3, r3
   1ae4c:	4602      	mov	r2, r0
   1ae4e:	e7d7      	b.n	1ae00 <_vfiprintf_r+0xae4>
   1ae50:	f04f 0c01 	mov.w	ip, #1
   1ae54:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
   1ae58:	4610      	mov	r0, r2
   1ae5a:	e5e7      	b.n	1aa2c <_vfiprintf_r+0x710>
   1ae5c:	aa10      	add	r2, sp, #64	; 0x40
   1ae5e:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1ae62:	f000 f9e1 	bl	1b228 <__sfvwrite_r>
   1ae66:	2200      	movs	r2, #0
   1ae68:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
   1ae6c:	2800      	cmp	r0, #0
   1ae6e:	f47f abf6 	bne.w	1a65e <_vfiprintf_r+0x342>
   1ae72:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1ae76:	2a00      	cmp	r2, #0
   1ae78:	f47f adca 	bne.w	1aa10 <_vfiprintf_r+0x6f4>
   1ae7c:	e7e8      	b.n	1ae50 <_vfiprintf_r+0xb34>
   1ae7e:	aa10      	add	r2, sp, #64	; 0x40
   1ae80:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1ae84:	f000 f9d0 	bl	1b228 <__sfvwrite_r>
   1ae88:	2300      	movs	r3, #0
   1ae8a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1ae8e:	2800      	cmp	r0, #0
   1ae90:	f43f aea4 	beq.w	1abdc <_vfiprintf_r+0x8c0>
   1ae94:	f7ff bbe3 	b.w	1a65e <_vfiprintf_r+0x342>
   1ae98:	4628      	mov	r0, r5
   1ae9a:	9407      	str	r4, [sp, #28]
   1ae9c:	46b0      	mov	r8, r6
   1ae9e:	f7fc fb75 	bl	1758c <strlen>
   1aea2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1aea6:	9003      	str	r0, [sp, #12]
   1aea8:	f7ff bb55 	b.w	1a556 <_vfiprintf_r+0x23a>
   1aeac:	aa10      	add	r2, sp, #64	; 0x40
   1aeae:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1aeb2:	f000 f9b9 	bl	1b228 <__sfvwrite_r>
   1aeb6:	2300      	movs	r3, #0
   1aeb8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1aebc:	2800      	cmp	r0, #0
   1aebe:	f47f abce 	bne.w	1a65e <_vfiprintf_r+0x342>
   1aec2:	9b03      	ldr	r3, [sp, #12]
   1aec4:	eba8 0703 	sub.w	r7, r8, r3
   1aec8:	2f00      	cmp	r7, #0
   1aeca:	f77f ae11 	ble.w	1aaf0 <_vfiprintf_r+0x7d4>
   1aece:	e750      	b.n	1ad72 <_vfiprintf_r+0xa56>
   1aed0:	9901      	ldr	r1, [sp, #4]
   1aed2:	f04f 0e00 	mov.w	lr, #0
   1aed6:	f10d 0cf0 	add.w	ip, sp, #240	; 0xf0
   1aeda:	f401 6780 	and.w	r7, r1, #1024	; 0x400
   1aede:	e9cd b802 	strd	fp, r8, [sp, #8]
   1aee2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1aee6:	e00c      	b.n	1af02 <_vfiprintf_r+0xbe6>
   1aee8:	00031448 	.word	0x00031448
   1aeec:	000312e8 	.word	0x000312e8
   1aef0:	000312d4 	.word	0x000312d4
   1aef4:	2b0a      	cmp	r3, #10
   1aef6:	f172 0200 	sbcs.w	r2, r2, #0
   1aefa:	d338      	bcc.n	1af6e <_vfiprintf_r+0xc52>
   1aefc:	4633      	mov	r3, r6
   1aefe:	4622      	mov	r2, r4
   1af00:	46ac      	mov	ip, r5
   1af02:	1898      	adds	r0, r3, r2
   1af04:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 1b0b8 <_vfiprintf_r+0xd9c>
   1af08:	f10e 0e01 	add.w	lr, lr, #1
   1af0c:	f10c 35ff 	add.w	r5, ip, #4294967295
   1af10:	f140 0000 	adc.w	r0, r0, #0
   1af14:	fbab 1400 	umull	r1, r4, fp, r0
   1af18:	f024 0103 	bic.w	r1, r4, #3
   1af1c:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1af20:	f04f 34cc 	mov.w	r4, #3435973836	; 0xcccccccc
   1af24:	1a40      	subs	r0, r0, r1
   1af26:	1a19      	subs	r1, r3, r0
   1af28:	f162 0600 	sbc.w	r6, r2, #0
   1af2c:	fb04 f401 	mul.w	r4, r4, r1
   1af30:	fb0b 4406 	mla	r4, fp, r6, r4
   1af34:	fba1 610b 	umull	r6, r1, r1, fp
   1af38:	f04f 0b05 	mov.w	fp, #5
   1af3c:	440c      	add	r4, r1
   1af3e:	f006 0101 	and.w	r1, r6, #1
   1af42:	0876      	lsrs	r6, r6, #1
   1af44:	fba1 1b0b 	umull	r1, fp, r1, fp
   1af48:	ea46 76c4 	orr.w	r6, r6, r4, lsl #31
   1af4c:	1809      	adds	r1, r1, r0
   1af4e:	0864      	lsrs	r4, r4, #1
   1af50:	3130      	adds	r1, #48	; 0x30
   1af52:	f80c 1c01 	strb.w	r1, [ip, #-1]
   1af56:	2f00      	cmp	r7, #0
   1af58:	d0cc      	beq.n	1aef4 <_vfiprintf_r+0xbd8>
   1af5a:	f898 1000 	ldrb.w	r1, [r8]
   1af5e:	29ff      	cmp	r1, #255	; 0xff
   1af60:	d0c8      	beq.n	1aef4 <_vfiprintf_r+0xbd8>
   1af62:	4571      	cmp	r1, lr
   1af64:	d1c6      	bne.n	1aef4 <_vfiprintf_r+0xbd8>
   1af66:	2b0a      	cmp	r3, #10
   1af68:	f172 0200 	sbcs.w	r2, r2, #0
   1af6c:	d24a      	bcs.n	1b004 <_vfiprintf_r+0xce8>
   1af6e:	ab3c      	add	r3, sp, #240	; 0xf0
   1af70:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1af74:	1b5b      	subs	r3, r3, r5
   1af76:	e9dd b802 	ldrd	fp, r8, [sp, #8]
   1af7a:	9303      	str	r3, [sp, #12]
   1af7c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1af80:	f7ff bae9 	b.w	1a556 <_vfiprintf_r+0x23a>
   1af84:	f043 0320 	orr.w	r3, r3, #32
   1af88:	f899 1001 	ldrb.w	r1, [r9, #1]
   1af8c:	f109 0901 	add.w	r9, r9, #1
   1af90:	9301      	str	r3, [sp, #4]
   1af92:	f7ff ba22 	b.w	1a3da <_vfiprintf_r+0xbe>
   1af96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1af9a:	f899 1001 	ldrb.w	r1, [r9, #1]
   1af9e:	f109 0901 	add.w	r9, r9, #1
   1afa2:	9301      	str	r3, [sp, #4]
   1afa4:	f7ff ba19 	b.w	1a3da <_vfiprintf_r+0xbe>
   1afa8:	9b07      	ldr	r3, [sp, #28]
   1afaa:	9a06      	ldr	r2, [sp, #24]
   1afac:	681b      	ldr	r3, [r3, #0]
   1afae:	601a      	str	r2, [r3, #0]
   1afb0:	e4cb      	b.n	1a94a <_vfiprintf_r+0x62e>
   1afb2:	4643      	mov	r3, r8
   1afb4:	4d41      	ldr	r5, [pc, #260]	; (1b0bc <_vfiprintf_r+0xda0>)
   1afb6:	9407      	str	r4, [sp, #28]
   1afb8:	2b06      	cmp	r3, #6
   1afba:	bf28      	it	cs
   1afbc:	2306      	movcs	r3, #6
   1afbe:	9303      	str	r3, [sp, #12]
   1afc0:	9302      	str	r3, [sp, #8]
   1afc2:	f7ff bb66 	b.w	1a692 <_vfiprintf_r+0x376>
   1afc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1afc8:	2b00      	cmp	r3, #0
   1afca:	d147      	bne.n	1b05c <_vfiprintf_r+0xd40>
   1afcc:	2300      	movs	r3, #0
   1afce:	9311      	str	r3, [sp, #68]	; 0x44
   1afd0:	f7ff bb45 	b.w	1a65e <_vfiprintf_r+0x342>
   1afd4:	f410 7200 	ands.w	r2, r0, #512	; 0x200
   1afd8:	f43f ac6f 	beq.w	1a8ba <_vfiprintf_r+0x59e>
   1afdc:	b2db      	uxtb	r3, r3
   1afde:	4622      	mov	r2, r4
   1afe0:	e46b      	b.n	1a8ba <_vfiprintf_r+0x59e>
   1afe2:	9a01      	ldr	r2, [sp, #4]
   1afe4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   1afe8:	f43f af0a 	beq.w	1ae00 <_vfiprintf_r+0xae4>
   1afec:	b2db      	uxtb	r3, r3
   1afee:	4622      	mov	r2, r4
   1aff0:	e706      	b.n	1ae00 <_vfiprintf_r+0xae4>
   1aff2:	9a01      	ldr	r2, [sp, #4]
   1aff4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   1aff8:	f43f aaef 	beq.w	1a5da <_vfiprintf_r+0x2be>
   1affc:	b2db      	uxtb	r3, r3
   1affe:	4602      	mov	r2, r0
   1b000:	f7ff baeb 	b.w	1a5da <_vfiprintf_r+0x2be>
   1b004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b006:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b008:	1aed      	subs	r5, r5, r3
   1b00a:	461a      	mov	r2, r3
   1b00c:	4628      	mov	r0, r5
   1b00e:	f7fc faeb 	bl	175e8 <strncpy>
   1b012:	f898 3001 	ldrb.w	r3, [r8, #1]
   1b016:	b10b      	cbz	r3, 1b01c <_vfiprintf_r+0xd00>
   1b018:	f108 0801 	add.w	r8, r8, #1
   1b01c:	f04f 0e00 	mov.w	lr, #0
   1b020:	e76c      	b.n	1aefc <_vfiprintf_r+0xbe0>
   1b022:	f343 12c0 	sbfx	r2, r3, #7, #1
   1b026:	b25b      	sxtb	r3, r3
   1b028:	4611      	mov	r1, r2
   1b02a:	f7ff ba79 	b.w	1a520 <_vfiprintf_r+0x204>
   1b02e:	9b07      	ldr	r3, [sp, #28]
   1b030:	9a06      	ldr	r2, [sp, #24]
   1b032:	681b      	ldr	r3, [r3, #0]
   1b034:	801a      	strh	r2, [r3, #0]
   1b036:	e488      	b.n	1a94a <_vfiprintf_r+0x62e>
   1b038:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1b03a:	f005 f800 	bl	2003e <__retarget_lock_release_recursive>
   1b03e:	f7ff bab1 	b.w	1a5a4 <_vfiprintf_r+0x288>
   1b042:	9001      	str	r0, [sp, #4]
   1b044:	e41a      	b.n	1a87c <_vfiprintf_r+0x560>
   1b046:	f8cd 800c 	str.w	r8, [sp, #12]
   1b04a:	4680      	mov	r8, r0
   1b04c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1b050:	9407      	str	r4, [sp, #28]
   1b052:	f7ff ba80 	b.w	1a556 <_vfiprintf_r+0x23a>
   1b056:	468e      	mov	lr, r1
   1b058:	4f19      	ldr	r7, [pc, #100]	; (1b0c0 <_vfiprintf_r+0xda4>)
   1b05a:	e61a      	b.n	1ac92 <_vfiprintf_r+0x976>
   1b05c:	aa10      	add	r2, sp, #64	; 0x40
   1b05e:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
   1b062:	f000 f8e1 	bl	1b228 <__sfvwrite_r>
   1b066:	2300      	movs	r3, #0
   1b068:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   1b06c:	2800      	cmp	r0, #0
   1b06e:	d0ad      	beq.n	1afcc <_vfiprintf_r+0xcb0>
   1b070:	f7ff baf5 	b.w	1a65e <_vfiprintf_r+0x342>
   1b074:	1c51      	adds	r1, r2, #1
   1b076:	4f12      	ldr	r7, [pc, #72]	; (1b0c0 <_vfiprintf_r+0xda4>)
   1b078:	e5a5      	b.n	1abc6 <_vfiprintf_r+0x8aa>
   1b07a:	4661      	mov	r1, ip
   1b07c:	4c11      	ldr	r4, [pc, #68]	; (1b0c4 <_vfiprintf_r+0xda8>)
   1b07e:	e651      	b.n	1ad24 <_vfiprintf_r+0xa08>
   1b080:	9b04      	ldr	r3, [sp, #16]
   1b082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1b084:	07dd      	lsls	r5, r3, #31
   1b086:	d407      	bmi.n	1b098 <_vfiprintf_r+0xd7c>
   1b088:	9b04      	ldr	r3, [sp, #16]
   1b08a:	899b      	ldrh	r3, [r3, #12]
   1b08c:	059c      	lsls	r4, r3, #22
   1b08e:	d403      	bmi.n	1b098 <_vfiprintf_r+0xd7c>
   1b090:	9b04      	ldr	r3, [sp, #16]
   1b092:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b094:	f004 ffd3 	bl	2003e <__retarget_lock_release_recursive>
   1b098:	f04f 33ff 	mov.w	r3, #4294967295
   1b09c:	9306      	str	r3, [sp, #24]
   1b09e:	f7ff bae8 	b.w	1a672 <_vfiprintf_r+0x356>
   1b0a2:	9b07      	ldr	r3, [sp, #28]
   1b0a4:	f899 1001 	ldrb.w	r1, [r9, #1]
   1b0a8:	4691      	mov	r9, r2
   1b0aa:	f853 2b04 	ldr.w	r2, [r3], #4
   1b0ae:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
   1b0b2:	9307      	str	r3, [sp, #28]
   1b0b4:	f7ff b991 	b.w	1a3da <_vfiprintf_r+0xbe>
   1b0b8:	cccccccd 	.word	0xcccccccd
   1b0bc:	000312fc 	.word	0x000312fc
   1b0c0:	00031448 	.word	0x00031448
   1b0c4:	00031438 	.word	0x00031438

0001b0c8 <__sbprintf>:
   1b0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0ca:	461f      	mov	r7, r3
   1b0cc:	898b      	ldrh	r3, [r1, #12]
   1b0ce:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   1b0d2:	4615      	mov	r5, r2
   1b0d4:	f023 0302 	bic.w	r3, r3, #2
   1b0d8:	4606      	mov	r6, r0
   1b0da:	a816      	add	r0, sp, #88	; 0x58
   1b0dc:	460c      	mov	r4, r1
   1b0de:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b0e2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1b0e4:	9319      	str	r3, [sp, #100]	; 0x64
   1b0e6:	89cb      	ldrh	r3, [r1, #14]
   1b0e8:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b0ec:	69cb      	ldr	r3, [r1, #28]
   1b0ee:	9307      	str	r3, [sp, #28]
   1b0f0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1b0f2:	9309      	str	r3, [sp, #36]	; 0x24
   1b0f4:	ab1a      	add	r3, sp, #104	; 0x68
   1b0f6:	9300      	str	r3, [sp, #0]
   1b0f8:	9304      	str	r3, [sp, #16]
   1b0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1b0fe:	9302      	str	r3, [sp, #8]
   1b100:	9305      	str	r3, [sp, #20]
   1b102:	2300      	movs	r3, #0
   1b104:	9306      	str	r3, [sp, #24]
   1b106:	f004 ff88 	bl	2001a <__retarget_lock_init_recursive>
   1b10a:	462a      	mov	r2, r5
   1b10c:	463b      	mov	r3, r7
   1b10e:	4669      	mov	r1, sp
   1b110:	4630      	mov	r0, r6
   1b112:	f7ff f903 	bl	1a31c <_vfiprintf_r>
   1b116:	1e05      	subs	r5, r0, #0
   1b118:	db07      	blt.n	1b12a <__sbprintf+0x62>
   1b11a:	4669      	mov	r1, sp
   1b11c:	4630      	mov	r0, r6
   1b11e:	f7fe f9e5 	bl	194ec <_fflush_r>
   1b122:	2800      	cmp	r0, #0
   1b124:	bf18      	it	ne
   1b126:	f04f 35ff 	movne.w	r5, #4294967295
   1b12a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1b12e:	065b      	lsls	r3, r3, #25
   1b130:	d503      	bpl.n	1b13a <__sbprintf+0x72>
   1b132:	89a3      	ldrh	r3, [r4, #12]
   1b134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b138:	81a3      	strh	r3, [r4, #12]
   1b13a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b13c:	f004 ff77 	bl	2002e <__retarget_lock_close_recursive>
   1b140:	4628      	mov	r0, r5
   1b142:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   1b146:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b148 <_write_r>:
   1b148:	b538      	push	{r3, r4, r5, lr}
   1b14a:	460c      	mov	r4, r1
   1b14c:	4684      	mov	ip, r0
   1b14e:	4611      	mov	r1, r2
   1b150:	4d07      	ldr	r5, [pc, #28]	; (1b170 <_write_r+0x28>)
   1b152:	461a      	mov	r2, r3
   1b154:	2300      	movs	r3, #0
   1b156:	4620      	mov	r0, r4
   1b158:	4664      	mov	r4, ip
   1b15a:	602b      	str	r3, [r5, #0]
   1b15c:	f7e8 fd08 	bl	3b70 <_write>
   1b160:	1c43      	adds	r3, r0, #1
   1b162:	d000      	beq.n	1b166 <_write_r+0x1e>
   1b164:	bd38      	pop	{r3, r4, r5, pc}
   1b166:	682b      	ldr	r3, [r5, #0]
   1b168:	2b00      	cmp	r3, #0
   1b16a:	d0fb      	beq.n	1b164 <_write_r+0x1c>
   1b16c:	6023      	str	r3, [r4, #0]
   1b16e:	bd38      	pop	{r3, r4, r5, pc}
   1b170:	20004850 	.word	0x20004850

0001b174 <__assert_func>:
   1b174:	4d0a      	ldr	r5, [pc, #40]	; (1b1a0 <__assert_func+0x2c>)
   1b176:	4614      	mov	r4, r2
   1b178:	461a      	mov	r2, r3
   1b17a:	4603      	mov	r3, r0
   1b17c:	682e      	ldr	r6, [r5, #0]
   1b17e:	460d      	mov	r5, r1
   1b180:	b500      	push	{lr}
   1b182:	68f0      	ldr	r0, [r6, #12]
   1b184:	b085      	sub	sp, #20
   1b186:	b144      	cbz	r4, 1b19a <__assert_func+0x26>
   1b188:	4906      	ldr	r1, [pc, #24]	; (1b1a4 <__assert_func+0x30>)
   1b18a:	9500      	str	r5, [sp, #0]
   1b18c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1b190:	4905      	ldr	r1, [pc, #20]	; (1b1a8 <__assert_func+0x34>)
   1b192:	f000 f81f 	bl	1b1d4 <fiprintf>
   1b196:	f000 fbdd 	bl	1b954 <abort>
   1b19a:	4904      	ldr	r1, [pc, #16]	; (1b1ac <__assert_func+0x38>)
   1b19c:	460c      	mov	r4, r1
   1b19e:	e7f4      	b.n	1b18a <__assert_func+0x16>
   1b1a0:	20000a70 	.word	0x20000a70
   1b1a4:	00031458 	.word	0x00031458
   1b1a8:	00031468 	.word	0x00031468
   1b1ac:	00031568 	.word	0x00031568

0001b1b0 <_close_r>:
   1b1b0:	b538      	push	{r3, r4, r5, lr}
   1b1b2:	2200      	movs	r2, #0
   1b1b4:	4d06      	ldr	r5, [pc, #24]	; (1b1d0 <_close_r+0x20>)
   1b1b6:	4604      	mov	r4, r0
   1b1b8:	4608      	mov	r0, r1
   1b1ba:	602a      	str	r2, [r5, #0]
   1b1bc:	f7e8 fd00 	bl	3bc0 <_close>
   1b1c0:	1c43      	adds	r3, r0, #1
   1b1c2:	d000      	beq.n	1b1c6 <_close_r+0x16>
   1b1c4:	bd38      	pop	{r3, r4, r5, pc}
   1b1c6:	682b      	ldr	r3, [r5, #0]
   1b1c8:	2b00      	cmp	r3, #0
   1b1ca:	d0fb      	beq.n	1b1c4 <_close_r+0x14>
   1b1cc:	6023      	str	r3, [r4, #0]
   1b1ce:	bd38      	pop	{r3, r4, r5, pc}
   1b1d0:	20004850 	.word	0x20004850

0001b1d4 <fiprintf>:
   1b1d4:	b40e      	push	{r1, r2, r3}
   1b1d6:	b510      	push	{r4, lr}
   1b1d8:	b083      	sub	sp, #12
   1b1da:	4c07      	ldr	r4, [pc, #28]	; (1b1f8 <fiprintf+0x24>)
   1b1dc:	4601      	mov	r1, r0
   1b1de:	ab05      	add	r3, sp, #20
   1b1e0:	6820      	ldr	r0, [r4, #0]
   1b1e2:	f853 2b04 	ldr.w	r2, [r3], #4
   1b1e6:	9301      	str	r3, [sp, #4]
   1b1e8:	f7ff f898 	bl	1a31c <_vfiprintf_r>
   1b1ec:	b003      	add	sp, #12
   1b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b1f2:	b003      	add	sp, #12
   1b1f4:	4770      	bx	lr
   1b1f6:	bf00      	nop
   1b1f8:	20000a70 	.word	0x20000a70

0001b1fc <_fstat_r>:
   1b1fc:	b570      	push	{r4, r5, r6, lr}
   1b1fe:	460c      	mov	r4, r1
   1b200:	4603      	mov	r3, r0
   1b202:	4d08      	ldr	r5, [pc, #32]	; (1b224 <_fstat_r+0x28>)
   1b204:	2600      	movs	r6, #0
   1b206:	4620      	mov	r0, r4
   1b208:	4611      	mov	r1, r2
   1b20a:	461c      	mov	r4, r3
   1b20c:	602e      	str	r6, [r5, #0]
   1b20e:	f004 feff 	bl	20010 <_fstat>
   1b212:	1c43      	adds	r3, r0, #1
   1b214:	d000      	beq.n	1b218 <_fstat_r+0x1c>
   1b216:	bd70      	pop	{r4, r5, r6, pc}
   1b218:	682b      	ldr	r3, [r5, #0]
   1b21a:	2b00      	cmp	r3, #0
   1b21c:	d0fb      	beq.n	1b216 <_fstat_r+0x1a>
   1b21e:	6023      	str	r3, [r4, #0]
   1b220:	bd70      	pop	{r4, r5, r6, pc}
   1b222:	bf00      	nop
   1b224:	20004850 	.word	0x20004850

0001b228 <__sfvwrite_r>:
   1b228:	6893      	ldr	r3, [r2, #8]
   1b22a:	2b00      	cmp	r3, #0
   1b22c:	f000 80f7 	beq.w	1b41e <__sfvwrite_r+0x1f6>
   1b230:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   1b234:	f01c 0f08 	tst.w	ip, #8
   1b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b23c:	4690      	mov	r8, r2
   1b23e:	b083      	sub	sp, #12
   1b240:	4681      	mov	r9, r0
   1b242:	460c      	mov	r4, r1
   1b244:	d031      	beq.n	1b2aa <__sfvwrite_r+0x82>
   1b246:	690b      	ldr	r3, [r1, #16]
   1b248:	b37b      	cbz	r3, 1b2aa <__sfvwrite_r+0x82>
   1b24a:	f01c 0702 	ands.w	r7, ip, #2
   1b24e:	f8d8 6000 	ldr.w	r6, [r8]
   1b252:	d038      	beq.n	1b2c6 <__sfvwrite_r+0x9e>
   1b254:	2700      	movs	r7, #0
   1b256:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   1b25a:	69e1      	ldr	r1, [r4, #28]
   1b25c:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 1b51c <__sfvwrite_r+0x2f4>
   1b260:	463d      	mov	r5, r7
   1b262:	4555      	cmp	r5, sl
   1b264:	462b      	mov	r3, r5
   1b266:	463a      	mov	r2, r7
   1b268:	4648      	mov	r0, r9
   1b26a:	bf28      	it	cs
   1b26c:	4653      	movcs	r3, sl
   1b26e:	b1c5      	cbz	r5, 1b2a2 <__sfvwrite_r+0x7a>
   1b270:	47d8      	blx	fp
   1b272:	2800      	cmp	r0, #0
   1b274:	f340 80c9 	ble.w	1b40a <__sfvwrite_r+0x1e2>
   1b278:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b27c:	4407      	add	r7, r0
   1b27e:	1a2d      	subs	r5, r5, r0
   1b280:	1a1b      	subs	r3, r3, r0
   1b282:	f8c8 3008 	str.w	r3, [r8, #8]
   1b286:	2b00      	cmp	r3, #0
   1b288:	f000 80b5 	beq.w	1b3f6 <__sfvwrite_r+0x1ce>
   1b28c:	4555      	cmp	r5, sl
   1b28e:	462b      	mov	r3, r5
   1b290:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   1b294:	463a      	mov	r2, r7
   1b296:	69e1      	ldr	r1, [r4, #28]
   1b298:	bf28      	it	cs
   1b29a:	4653      	movcs	r3, sl
   1b29c:	4648      	mov	r0, r9
   1b29e:	2d00      	cmp	r5, #0
   1b2a0:	d1e6      	bne.n	1b270 <__sfvwrite_r+0x48>
   1b2a2:	e9d6 7500 	ldrd	r7, r5, [r6]
   1b2a6:	3608      	adds	r6, #8
   1b2a8:	e7db      	b.n	1b262 <__sfvwrite_r+0x3a>
   1b2aa:	4621      	mov	r1, r4
   1b2ac:	4648      	mov	r0, r9
   1b2ae:	f7fd ff97 	bl	191e0 <__swsetup_r>
   1b2b2:	2800      	cmp	r0, #0
   1b2b4:	f040 80ae 	bne.w	1b414 <__sfvwrite_r+0x1ec>
   1b2b8:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   1b2bc:	f8d8 6000 	ldr.w	r6, [r8]
   1b2c0:	f01c 0702 	ands.w	r7, ip, #2
   1b2c4:	d1c6      	bne.n	1b254 <__sfvwrite_r+0x2c>
   1b2c6:	f01c 0a01 	ands.w	sl, ip, #1
   1b2ca:	d164      	bne.n	1b396 <__sfvwrite_r+0x16e>
   1b2cc:	6823      	ldr	r3, [r4, #0]
   1b2ce:	4657      	mov	r7, sl
   1b2d0:	68a1      	ldr	r1, [r4, #8]
   1b2d2:	4618      	mov	r0, r3
   1b2d4:	468b      	mov	fp, r1
   1b2d6:	2f00      	cmp	r7, #0
   1b2d8:	d059      	beq.n	1b38e <__sfvwrite_r+0x166>
   1b2da:	f41c 7f00 	tst.w	ip, #512	; 0x200
   1b2de:	f000 80b2 	beq.w	1b446 <__sfvwrite_r+0x21e>
   1b2e2:	42b9      	cmp	r1, r7
   1b2e4:	460a      	mov	r2, r1
   1b2e6:	f200 80de 	bhi.w	1b4a6 <__sfvwrite_r+0x27e>
   1b2ea:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   1b2ee:	d030      	beq.n	1b352 <__sfvwrite_r+0x12a>
   1b2f0:	6921      	ldr	r1, [r4, #16]
   1b2f2:	1a5d      	subs	r5, r3, r1
   1b2f4:	6963      	ldr	r3, [r4, #20]
   1b2f6:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
   1b2fa:	bf48      	it	mi
   1b2fc:	3301      	addmi	r3, #1
   1b2fe:	ea4f 0b63 	mov.w	fp, r3, asr #1
   1b302:	1c6b      	adds	r3, r5, #1
   1b304:	443b      	add	r3, r7
   1b306:	465a      	mov	r2, fp
   1b308:	455b      	cmp	r3, fp
   1b30a:	d901      	bls.n	1b310 <__sfvwrite_r+0xe8>
   1b30c:	469b      	mov	fp, r3
   1b30e:	461a      	mov	r2, r3
   1b310:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   1b314:	f000 80e6 	beq.w	1b4e4 <__sfvwrite_r+0x2bc>
   1b318:	4611      	mov	r1, r2
   1b31a:	4648      	mov	r0, r9
   1b31c:	f7fb fc8c 	bl	16c38 <_malloc_r>
   1b320:	2800      	cmp	r0, #0
   1b322:	f000 80f5 	beq.w	1b510 <__sfvwrite_r+0x2e8>
   1b326:	462a      	mov	r2, r5
   1b328:	6921      	ldr	r1, [r4, #16]
   1b32a:	9001      	str	r0, [sp, #4]
   1b32c:	f7e5 fc12 	bl	b54 <memcpy>
   1b330:	89a2      	ldrh	r2, [r4, #12]
   1b332:	9b01      	ldr	r3, [sp, #4]
   1b334:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1b338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1b33c:	81a2      	strh	r2, [r4, #12]
   1b33e:	1958      	adds	r0, r3, r5
   1b340:	f8c4 b014 	str.w	fp, [r4, #20]
   1b344:	ebab 0505 	sub.w	r5, fp, r5
   1b348:	463a      	mov	r2, r7
   1b34a:	46bb      	mov	fp, r7
   1b34c:	6123      	str	r3, [r4, #16]
   1b34e:	60a5      	str	r5, [r4, #8]
   1b350:	6020      	str	r0, [r4, #0]
   1b352:	4651      	mov	r1, sl
   1b354:	9201      	str	r2, [sp, #4]
   1b356:	f7fb ffbf 	bl	172d8 <memmove>
   1b35a:	68a1      	ldr	r1, [r4, #8]
   1b35c:	6823      	ldr	r3, [r4, #0]
   1b35e:	463d      	mov	r5, r7
   1b360:	9a01      	ldr	r2, [sp, #4]
   1b362:	eba1 010b 	sub.w	r1, r1, fp
   1b366:	2700      	movs	r7, #0
   1b368:	441a      	add	r2, r3
   1b36a:	60a1      	str	r1, [r4, #8]
   1b36c:	6022      	str	r2, [r4, #0]
   1b36e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b372:	44aa      	add	sl, r5
   1b374:	1b5b      	subs	r3, r3, r5
   1b376:	f8c8 3008 	str.w	r3, [r8, #8]
   1b37a:	2b00      	cmp	r3, #0
   1b37c:	d03b      	beq.n	1b3f6 <__sfvwrite_r+0x1ce>
   1b37e:	6823      	ldr	r3, [r4, #0]
   1b380:	68a1      	ldr	r1, [r4, #8]
   1b382:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   1b386:	4618      	mov	r0, r3
   1b388:	468b      	mov	fp, r1
   1b38a:	2f00      	cmp	r7, #0
   1b38c:	d1a5      	bne.n	1b2da <__sfvwrite_r+0xb2>
   1b38e:	e9d6 a700 	ldrd	sl, r7, [r6]
   1b392:	3608      	adds	r6, #8
   1b394:	e79d      	b.n	1b2d2 <__sfvwrite_r+0xaa>
   1b396:	4638      	mov	r0, r7
   1b398:	46bb      	mov	fp, r7
   1b39a:	463d      	mov	r5, r7
   1b39c:	2d00      	cmp	r5, #0
   1b39e:	d040      	beq.n	1b422 <__sfvwrite_r+0x1fa>
   1b3a0:	2800      	cmp	r0, #0
   1b3a2:	d045      	beq.n	1b430 <__sfvwrite_r+0x208>
   1b3a4:	463a      	mov	r2, r7
   1b3a6:	68a1      	ldr	r1, [r4, #8]
   1b3a8:	42aa      	cmp	r2, r5
   1b3aa:	6963      	ldr	r3, [r4, #20]
   1b3ac:	6820      	ldr	r0, [r4, #0]
   1b3ae:	bf28      	it	cs
   1b3b0:	462a      	movcs	r2, r5
   1b3b2:	eb03 0a01 	add.w	sl, r3, r1
   1b3b6:	6921      	ldr	r1, [r4, #16]
   1b3b8:	4288      	cmp	r0, r1
   1b3ba:	d902      	bls.n	1b3c2 <__sfvwrite_r+0x19a>
   1b3bc:	4552      	cmp	r2, sl
   1b3be:	f300 8082 	bgt.w	1b4c6 <__sfvwrite_r+0x29e>
   1b3c2:	4293      	cmp	r3, r2
   1b3c4:	dc72      	bgt.n	1b4ac <__sfvwrite_r+0x284>
   1b3c6:	465a      	mov	r2, fp
   1b3c8:	69e1      	ldr	r1, [r4, #28]
   1b3ca:	4648      	mov	r0, r9
   1b3cc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   1b3d0:	47e0      	blx	ip
   1b3d2:	f1b0 0a00 	subs.w	sl, r0, #0
   1b3d6:	dd18      	ble.n	1b40a <__sfvwrite_r+0x1e2>
   1b3d8:	ebb7 070a 	subs.w	r7, r7, sl
   1b3dc:	d00f      	beq.n	1b3fe <__sfvwrite_r+0x1d6>
   1b3de:	2001      	movs	r0, #1
   1b3e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b3e4:	44d3      	add	fp, sl
   1b3e6:	eba5 050a 	sub.w	r5, r5, sl
   1b3ea:	eba3 030a 	sub.w	r3, r3, sl
   1b3ee:	f8c8 3008 	str.w	r3, [r8, #8]
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d1d2      	bne.n	1b39c <__sfvwrite_r+0x174>
   1b3f6:	2000      	movs	r0, #0
   1b3f8:	b003      	add	sp, #12
   1b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3fe:	4621      	mov	r1, r4
   1b400:	4648      	mov	r0, r9
   1b402:	f7fe f873 	bl	194ec <_fflush_r>
   1b406:	2800      	cmp	r0, #0
   1b408:	d0ea      	beq.n	1b3e0 <__sfvwrite_r+0x1b8>
   1b40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b412:	81a3      	strh	r3, [r4, #12]
   1b414:	f04f 30ff 	mov.w	r0, #4294967295
   1b418:	b003      	add	sp, #12
   1b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b41e:	2000      	movs	r0, #0
   1b420:	4770      	bx	lr
   1b422:	6875      	ldr	r5, [r6, #4]
   1b424:	4633      	mov	r3, r6
   1b426:	3608      	adds	r6, #8
   1b428:	2d00      	cmp	r5, #0
   1b42a:	d0fa      	beq.n	1b422 <__sfvwrite_r+0x1fa>
   1b42c:	f8d3 b000 	ldr.w	fp, [r3]
   1b430:	462a      	mov	r2, r5
   1b432:	210a      	movs	r1, #10
   1b434:	4658      	mov	r0, fp
   1b436:	f7fb febf 	bl	171b8 <memchr>
   1b43a:	2800      	cmp	r0, #0
   1b43c:	d065      	beq.n	1b50a <__sfvwrite_r+0x2e2>
   1b43e:	3001      	adds	r0, #1
   1b440:	eba0 070b 	sub.w	r7, r0, fp
   1b444:	e7ae      	b.n	1b3a4 <__sfvwrite_r+0x17c>
   1b446:	6922      	ldr	r2, [r4, #16]
   1b448:	429a      	cmp	r2, r3
   1b44a:	d314      	bcc.n	1b476 <__sfvwrite_r+0x24e>
   1b44c:	6962      	ldr	r2, [r4, #20]
   1b44e:	42ba      	cmp	r2, r7
   1b450:	d811      	bhi.n	1b476 <__sfvwrite_r+0x24e>
   1b452:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1b456:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1b458:	69e1      	ldr	r1, [r4, #28]
   1b45a:	4648      	mov	r0, r9
   1b45c:	42bb      	cmp	r3, r7
   1b45e:	bf28      	it	cs
   1b460:	463b      	movcs	r3, r7
   1b462:	fb93 f3f2 	sdiv	r3, r3, r2
   1b466:	fb02 f303 	mul.w	r3, r2, r3
   1b46a:	4652      	mov	r2, sl
   1b46c:	47a8      	blx	r5
   1b46e:	1e05      	subs	r5, r0, #0
   1b470:	ddcb      	ble.n	1b40a <__sfvwrite_r+0x1e2>
   1b472:	1b7f      	subs	r7, r7, r5
   1b474:	e77b      	b.n	1b36e <__sfvwrite_r+0x146>
   1b476:	42b9      	cmp	r1, r7
   1b478:	4618      	mov	r0, r3
   1b47a:	bf28      	it	cs
   1b47c:	4639      	movcs	r1, r7
   1b47e:	460d      	mov	r5, r1
   1b480:	4651      	mov	r1, sl
   1b482:	462a      	mov	r2, r5
   1b484:	f7fb ff28 	bl	172d8 <memmove>
   1b488:	68a1      	ldr	r1, [r4, #8]
   1b48a:	6823      	ldr	r3, [r4, #0]
   1b48c:	1b49      	subs	r1, r1, r5
   1b48e:	442b      	add	r3, r5
   1b490:	60a1      	str	r1, [r4, #8]
   1b492:	6023      	str	r3, [r4, #0]
   1b494:	2900      	cmp	r1, #0
   1b496:	d1ec      	bne.n	1b472 <__sfvwrite_r+0x24a>
   1b498:	4621      	mov	r1, r4
   1b49a:	4648      	mov	r0, r9
   1b49c:	f7fe f826 	bl	194ec <_fflush_r>
   1b4a0:	2800      	cmp	r0, #0
   1b4a2:	d0e6      	beq.n	1b472 <__sfvwrite_r+0x24a>
   1b4a4:	e7b1      	b.n	1b40a <__sfvwrite_r+0x1e2>
   1b4a6:	46bb      	mov	fp, r7
   1b4a8:	463a      	mov	r2, r7
   1b4aa:	e752      	b.n	1b352 <__sfvwrite_r+0x12a>
   1b4ac:	4659      	mov	r1, fp
   1b4ae:	9201      	str	r2, [sp, #4]
   1b4b0:	f7fb ff12 	bl	172d8 <memmove>
   1b4b4:	9a01      	ldr	r2, [sp, #4]
   1b4b6:	68a3      	ldr	r3, [r4, #8]
   1b4b8:	4692      	mov	sl, r2
   1b4ba:	1a9b      	subs	r3, r3, r2
   1b4bc:	60a3      	str	r3, [r4, #8]
   1b4be:	6823      	ldr	r3, [r4, #0]
   1b4c0:	4413      	add	r3, r2
   1b4c2:	6023      	str	r3, [r4, #0]
   1b4c4:	e788      	b.n	1b3d8 <__sfvwrite_r+0x1b0>
   1b4c6:	4659      	mov	r1, fp
   1b4c8:	4652      	mov	r2, sl
   1b4ca:	f7fb ff05 	bl	172d8 <memmove>
   1b4ce:	6823      	ldr	r3, [r4, #0]
   1b4d0:	4621      	mov	r1, r4
   1b4d2:	4648      	mov	r0, r9
   1b4d4:	4453      	add	r3, sl
   1b4d6:	6023      	str	r3, [r4, #0]
   1b4d8:	f7fe f808 	bl	194ec <_fflush_r>
   1b4dc:	2800      	cmp	r0, #0
   1b4de:	f43f af7b 	beq.w	1b3d8 <__sfvwrite_r+0x1b0>
   1b4e2:	e792      	b.n	1b40a <__sfvwrite_r+0x1e2>
   1b4e4:	4648      	mov	r0, r9
   1b4e6:	f000 f86f 	bl	1b5c8 <_realloc_r>
   1b4ea:	4603      	mov	r3, r0
   1b4ec:	2800      	cmp	r0, #0
   1b4ee:	f47f af26 	bne.w	1b33e <__sfvwrite_r+0x116>
   1b4f2:	6921      	ldr	r1, [r4, #16]
   1b4f4:	4648      	mov	r0, r9
   1b4f6:	f7fe f903 	bl	19700 <_free_r>
   1b4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b4fe:	220c      	movs	r2, #12
   1b500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1b504:	f8c9 2000 	str.w	r2, [r9]
   1b508:	e781      	b.n	1b40e <__sfvwrite_r+0x1e6>
   1b50a:	1c6a      	adds	r2, r5, #1
   1b50c:	4617      	mov	r7, r2
   1b50e:	e74a      	b.n	1b3a6 <__sfvwrite_r+0x17e>
   1b510:	220c      	movs	r2, #12
   1b512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b516:	f8c9 2000 	str.w	r2, [r9]
   1b51a:	e778      	b.n	1b40e <__sfvwrite_r+0x1e6>
   1b51c:	7ffffc00 	.word	0x7ffffc00

0001b520 <_isatty_r>:
   1b520:	b538      	push	{r3, r4, r5, lr}
   1b522:	2200      	movs	r2, #0
   1b524:	4d06      	ldr	r5, [pc, #24]	; (1b540 <_isatty_r+0x20>)
   1b526:	4604      	mov	r4, r0
   1b528:	4608      	mov	r0, r1
   1b52a:	602a      	str	r2, [r5, #0]
   1b52c:	f004 fd67 	bl	1fffe <_isatty>
   1b530:	1c43      	adds	r3, r0, #1
   1b532:	d000      	beq.n	1b536 <_isatty_r+0x16>
   1b534:	bd38      	pop	{r3, r4, r5, pc}
   1b536:	682b      	ldr	r3, [r5, #0]
   1b538:	2b00      	cmp	r3, #0
   1b53a:	d0fb      	beq.n	1b534 <_isatty_r+0x14>
   1b53c:	6023      	str	r3, [r4, #0]
   1b53e:	bd38      	pop	{r3, r4, r5, pc}
   1b540:	20004850 	.word	0x20004850

0001b544 <_lseek_r>:
   1b544:	b538      	push	{r3, r4, r5, lr}
   1b546:	460c      	mov	r4, r1
   1b548:	4684      	mov	ip, r0
   1b54a:	4611      	mov	r1, r2
   1b54c:	4d07      	ldr	r5, [pc, #28]	; (1b56c <_lseek_r+0x28>)
   1b54e:	461a      	mov	r2, r3
   1b550:	2300      	movs	r3, #0
   1b552:	4620      	mov	r0, r4
   1b554:	4664      	mov	r4, ip
   1b556:	602b      	str	r3, [r5, #0]
   1b558:	f7e8 fb58 	bl	3c0c <_lseek>
   1b55c:	1c43      	adds	r3, r0, #1
   1b55e:	d000      	beq.n	1b562 <_lseek_r+0x1e>
   1b560:	bd38      	pop	{r3, r4, r5, pc}
   1b562:	682b      	ldr	r3, [r5, #0]
   1b564:	2b00      	cmp	r3, #0
   1b566:	d0fb      	beq.n	1b560 <_lseek_r+0x1c>
   1b568:	6023      	str	r3, [r4, #0]
   1b56a:	bd38      	pop	{r3, r4, r5, pc}
   1b56c:	20004850 	.word	0x20004850

0001b570 <__ascii_mbtowc>:
   1b570:	b082      	sub	sp, #8
   1b572:	b149      	cbz	r1, 1b588 <__ascii_mbtowc+0x18>
   1b574:	b15a      	cbz	r2, 1b58e <__ascii_mbtowc+0x1e>
   1b576:	b16b      	cbz	r3, 1b594 <__ascii_mbtowc+0x24>
   1b578:	7813      	ldrb	r3, [r2, #0]
   1b57a:	600b      	str	r3, [r1, #0]
   1b57c:	7812      	ldrb	r2, [r2, #0]
   1b57e:	1e10      	subs	r0, r2, #0
   1b580:	bf18      	it	ne
   1b582:	2001      	movne	r0, #1
   1b584:	b002      	add	sp, #8
   1b586:	4770      	bx	lr
   1b588:	a901      	add	r1, sp, #4
   1b58a:	2a00      	cmp	r2, #0
   1b58c:	d1f3      	bne.n	1b576 <__ascii_mbtowc+0x6>
   1b58e:	4610      	mov	r0, r2
   1b590:	b002      	add	sp, #8
   1b592:	4770      	bx	lr
   1b594:	f06f 0001 	mvn.w	r0, #1
   1b598:	e7f4      	b.n	1b584 <__ascii_mbtowc+0x14>
   1b59a:	bf00      	nop

0001b59c <_read_r>:
   1b59c:	b538      	push	{r3, r4, r5, lr}
   1b59e:	460c      	mov	r4, r1
   1b5a0:	4684      	mov	ip, r0
   1b5a2:	4611      	mov	r1, r2
   1b5a4:	4d07      	ldr	r5, [pc, #28]	; (1b5c4 <_read_r+0x28>)
   1b5a6:	461a      	mov	r2, r3
   1b5a8:	2300      	movs	r3, #0
   1b5aa:	4620      	mov	r0, r4
   1b5ac:	4664      	mov	r4, ip
   1b5ae:	602b      	str	r3, [r5, #0]
   1b5b0:	f7e8 fab6 	bl	3b20 <_read>
   1b5b4:	1c43      	adds	r3, r0, #1
   1b5b6:	d000      	beq.n	1b5ba <_read_r+0x1e>
   1b5b8:	bd38      	pop	{r3, r4, r5, pc}
   1b5ba:	682b      	ldr	r3, [r5, #0]
   1b5bc:	2b00      	cmp	r3, #0
   1b5be:	d0fb      	beq.n	1b5b8 <_read_r+0x1c>
   1b5c0:	6023      	str	r3, [r4, #0]
   1b5c2:	bd38      	pop	{r3, r4, r5, pc}
   1b5c4:	20004850 	.word	0x20004850

0001b5c8 <_realloc_r>:
   1b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5cc:	4616      	mov	r6, r2
   1b5ce:	b083      	sub	sp, #12
   1b5d0:	2900      	cmp	r1, #0
   1b5d2:	f000 809e 	beq.w	1b712 <_realloc_r+0x14a>
   1b5d6:	460c      	mov	r4, r1
   1b5d8:	f106 050b 	add.w	r5, r6, #11
   1b5dc:	4680      	mov	r8, r0
   1b5de:	f7fb ff4f 	bl	17480 <__malloc_lock>
   1b5e2:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1b5e6:	2d16      	cmp	r5, #22
   1b5e8:	f1a4 0908 	sub.w	r9, r4, #8
   1b5ec:	f020 0703 	bic.w	r7, r0, #3
   1b5f0:	d862      	bhi.n	1b6b8 <_realloc_r+0xf0>
   1b5f2:	2210      	movs	r2, #16
   1b5f4:	2300      	movs	r3, #0
   1b5f6:	4615      	mov	r5, r2
   1b5f8:	42b5      	cmp	r5, r6
   1b5fa:	f0c0 80a2 	bcc.w	1b742 <_realloc_r+0x17a>
   1b5fe:	2b00      	cmp	r3, #0
   1b600:	f040 809f 	bne.w	1b742 <_realloc_r+0x17a>
   1b604:	4297      	cmp	r7, r2
   1b606:	da61      	bge.n	1b6cc <_realloc_r+0x104>
   1b608:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 1b904 <_realloc_r+0x33c>
   1b60c:	eb09 0107 	add.w	r1, r9, r7
   1b610:	f8db 3008 	ldr.w	r3, [fp, #8]
   1b614:	f8d1 c004 	ldr.w	ip, [r1, #4]
   1b618:	428b      	cmp	r3, r1
   1b61a:	f000 8097 	beq.w	1b74c <_realloc_r+0x184>
   1b61e:	f02c 0301 	bic.w	r3, ip, #1
   1b622:	440b      	add	r3, r1
   1b624:	685b      	ldr	r3, [r3, #4]
   1b626:	07db      	lsls	r3, r3, #31
   1b628:	d468      	bmi.n	1b6fc <_realloc_r+0x134>
   1b62a:	f02c 0c03 	bic.w	ip, ip, #3
   1b62e:	eb07 030c 	add.w	r3, r7, ip
   1b632:	4293      	cmp	r3, r2
   1b634:	da45      	bge.n	1b6c2 <_realloc_r+0xfa>
   1b636:	07c0      	lsls	r0, r0, #31
   1b638:	d412      	bmi.n	1b660 <_realloc_r+0x98>
   1b63a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b63e:	eba9 0a03 	sub.w	sl, r9, r3
   1b642:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b646:	f023 0003 	bic.w	r0, r3, #3
   1b64a:	4484      	add	ip, r0
   1b64c:	eb0c 0b07 	add.w	fp, ip, r7
   1b650:	455a      	cmp	r2, fp
   1b652:	f340 80fe 	ble.w	1b852 <_realloc_r+0x28a>
   1b656:	eb07 0b00 	add.w	fp, r7, r0
   1b65a:	455a      	cmp	r2, fp
   1b65c:	f340 80d4 	ble.w	1b808 <_realloc_r+0x240>
   1b660:	4631      	mov	r1, r6
   1b662:	4640      	mov	r0, r8
   1b664:	f7fb fae8 	bl	16c38 <_malloc_r>
   1b668:	4606      	mov	r6, r0
   1b66a:	2800      	cmp	r0, #0
   1b66c:	f000 8129 	beq.w	1b8c2 <_realloc_r+0x2fa>
   1b670:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b674:	f1a0 0208 	sub.w	r2, r0, #8
   1b678:	f023 0301 	bic.w	r3, r3, #1
   1b67c:	444b      	add	r3, r9
   1b67e:	4293      	cmp	r3, r2
   1b680:	f000 80b1 	beq.w	1b7e6 <_realloc_r+0x21e>
   1b684:	1f3a      	subs	r2, r7, #4
   1b686:	2a24      	cmp	r2, #36	; 0x24
   1b688:	f200 80df 	bhi.w	1b84a <_realloc_r+0x282>
   1b68c:	2a13      	cmp	r2, #19
   1b68e:	f200 80b0 	bhi.w	1b7f2 <_realloc_r+0x22a>
   1b692:	4603      	mov	r3, r0
   1b694:	4622      	mov	r2, r4
   1b696:	6811      	ldr	r1, [r2, #0]
   1b698:	6019      	str	r1, [r3, #0]
   1b69a:	6851      	ldr	r1, [r2, #4]
   1b69c:	6059      	str	r1, [r3, #4]
   1b69e:	6892      	ldr	r2, [r2, #8]
   1b6a0:	609a      	str	r2, [r3, #8]
   1b6a2:	4621      	mov	r1, r4
   1b6a4:	4640      	mov	r0, r8
   1b6a6:	f7fe f82b 	bl	19700 <_free_r>
   1b6aa:	4640      	mov	r0, r8
   1b6ac:	f7fb feee 	bl	1748c <__malloc_unlock>
   1b6b0:	4630      	mov	r0, r6
   1b6b2:	b003      	add	sp, #12
   1b6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6b8:	f025 0507 	bic.w	r5, r5, #7
   1b6bc:	462a      	mov	r2, r5
   1b6be:	0feb      	lsrs	r3, r5, #31
   1b6c0:	e79a      	b.n	1b5f8 <_realloc_r+0x30>
   1b6c2:	461f      	mov	r7, r3
   1b6c4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1b6c8:	60d3      	str	r3, [r2, #12]
   1b6ca:	609a      	str	r2, [r3, #8]
   1b6cc:	1b78      	subs	r0, r7, r5
   1b6ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b6d2:	eb09 0207 	add.w	r2, r9, r7
   1b6d6:	280f      	cmp	r0, #15
   1b6d8:	f003 0301 	and.w	r3, r3, #1
   1b6dc:	d81f      	bhi.n	1b71e <_realloc_r+0x156>
   1b6de:	433b      	orrs	r3, r7
   1b6e0:	f8c9 3004 	str.w	r3, [r9, #4]
   1b6e4:	6853      	ldr	r3, [r2, #4]
   1b6e6:	f043 0301 	orr.w	r3, r3, #1
   1b6ea:	6053      	str	r3, [r2, #4]
   1b6ec:	4640      	mov	r0, r8
   1b6ee:	4626      	mov	r6, r4
   1b6f0:	f7fb fecc 	bl	1748c <__malloc_unlock>
   1b6f4:	4630      	mov	r0, r6
   1b6f6:	b003      	add	sp, #12
   1b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6fc:	07c1      	lsls	r1, r0, #31
   1b6fe:	d4af      	bmi.n	1b660 <_realloc_r+0x98>
   1b700:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b704:	eba9 0a03 	sub.w	sl, r9, r3
   1b708:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b70c:	f023 0003 	bic.w	r0, r3, #3
   1b710:	e7a1      	b.n	1b656 <_realloc_r+0x8e>
   1b712:	4611      	mov	r1, r2
   1b714:	b003      	add	sp, #12
   1b716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b71a:	f7fb ba8d 	b.w	16c38 <_malloc_r>
   1b71e:	432b      	orrs	r3, r5
   1b720:	eb09 0105 	add.w	r1, r9, r5
   1b724:	f040 0001 	orr.w	r0, r0, #1
   1b728:	f8c9 3004 	str.w	r3, [r9, #4]
   1b72c:	3108      	adds	r1, #8
   1b72e:	f841 0c04 	str.w	r0, [r1, #-4]
   1b732:	4640      	mov	r0, r8
   1b734:	6853      	ldr	r3, [r2, #4]
   1b736:	f043 0301 	orr.w	r3, r3, #1
   1b73a:	6053      	str	r3, [r2, #4]
   1b73c:	f7fd ffe0 	bl	19700 <_free_r>
   1b740:	e7d4      	b.n	1b6ec <_realloc_r+0x124>
   1b742:	230c      	movs	r3, #12
   1b744:	f8c8 3000 	str.w	r3, [r8]
   1b748:	2600      	movs	r6, #0
   1b74a:	e7d3      	b.n	1b6f4 <_realloc_r+0x12c>
   1b74c:	f02c 0c03 	bic.w	ip, ip, #3
   1b750:	f105 0110 	add.w	r1, r5, #16
   1b754:	eb0c 0307 	add.w	r3, ip, r7
   1b758:	428b      	cmp	r3, r1
   1b75a:	f280 8092 	bge.w	1b882 <_realloc_r+0x2ba>
   1b75e:	07c3      	lsls	r3, r0, #31
   1b760:	f53f af7e 	bmi.w	1b660 <_realloc_r+0x98>
   1b764:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b768:	eba9 0a03 	sub.w	sl, r9, r3
   1b76c:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b770:	f023 0003 	bic.w	r0, r3, #3
   1b774:	4484      	add	ip, r0
   1b776:	eb0c 0307 	add.w	r3, ip, r7
   1b77a:	4299      	cmp	r1, r3
   1b77c:	f73f af6b 	bgt.w	1b656 <_realloc_r+0x8e>
   1b780:	1f3a      	subs	r2, r7, #4
   1b782:	4656      	mov	r6, sl
   1b784:	f8da 100c 	ldr.w	r1, [sl, #12]
   1b788:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1b78c:	2a24      	cmp	r2, #36	; 0x24
   1b78e:	60c1      	str	r1, [r0, #12]
   1b790:	6088      	str	r0, [r1, #8]
   1b792:	f200 80b0 	bhi.w	1b8f6 <_realloc_r+0x32e>
   1b796:	2a13      	cmp	r2, #19
   1b798:	f240 80ab 	bls.w	1b8f2 <_realloc_r+0x32a>
   1b79c:	6821      	ldr	r1, [r4, #0]
   1b79e:	2a1b      	cmp	r2, #27
   1b7a0:	f8ca 1008 	str.w	r1, [sl, #8]
   1b7a4:	6861      	ldr	r1, [r4, #4]
   1b7a6:	f8ca 100c 	str.w	r1, [sl, #12]
   1b7aa:	f200 80ad 	bhi.w	1b908 <_realloc_r+0x340>
   1b7ae:	3408      	adds	r4, #8
   1b7b0:	f10a 0210 	add.w	r2, sl, #16
   1b7b4:	6821      	ldr	r1, [r4, #0]
   1b7b6:	6011      	str	r1, [r2, #0]
   1b7b8:	6861      	ldr	r1, [r4, #4]
   1b7ba:	6051      	str	r1, [r2, #4]
   1b7bc:	68a1      	ldr	r1, [r4, #8]
   1b7be:	6091      	str	r1, [r2, #8]
   1b7c0:	1b5b      	subs	r3, r3, r5
   1b7c2:	eb0a 0205 	add.w	r2, sl, r5
   1b7c6:	4640      	mov	r0, r8
   1b7c8:	f043 0301 	orr.w	r3, r3, #1
   1b7cc:	f8cb 2008 	str.w	r2, [fp, #8]
   1b7d0:	6053      	str	r3, [r2, #4]
   1b7d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b7d6:	f003 0301 	and.w	r3, r3, #1
   1b7da:	432b      	orrs	r3, r5
   1b7dc:	f8ca 3004 	str.w	r3, [sl, #4]
   1b7e0:	f7fb fe54 	bl	1748c <__malloc_unlock>
   1b7e4:	e786      	b.n	1b6f4 <_realloc_r+0x12c>
   1b7e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1b7ea:	f023 0303 	bic.w	r3, r3, #3
   1b7ee:	441f      	add	r7, r3
   1b7f0:	e76c      	b.n	1b6cc <_realloc_r+0x104>
   1b7f2:	6823      	ldr	r3, [r4, #0]
   1b7f4:	2a1b      	cmp	r2, #27
   1b7f6:	6003      	str	r3, [r0, #0]
   1b7f8:	6863      	ldr	r3, [r4, #4]
   1b7fa:	6043      	str	r3, [r0, #4]
   1b7fc:	d836      	bhi.n	1b86c <_realloc_r+0x2a4>
   1b7fe:	f104 0208 	add.w	r2, r4, #8
   1b802:	f100 0308 	add.w	r3, r0, #8
   1b806:	e746      	b.n	1b696 <_realloc_r+0xce>
   1b808:	1f3a      	subs	r2, r7, #4
   1b80a:	4656      	mov	r6, sl
   1b80c:	f8da 300c 	ldr.w	r3, [sl, #12]
   1b810:	2a24      	cmp	r2, #36	; 0x24
   1b812:	f856 1f08 	ldr.w	r1, [r6, #8]!
   1b816:	60cb      	str	r3, [r1, #12]
   1b818:	6099      	str	r1, [r3, #8]
   1b81a:	d822      	bhi.n	1b862 <_realloc_r+0x29a>
   1b81c:	2a13      	cmp	r2, #19
   1b81e:	d91e      	bls.n	1b85e <_realloc_r+0x296>
   1b820:	6823      	ldr	r3, [r4, #0]
   1b822:	2a1b      	cmp	r2, #27
   1b824:	f8ca 3008 	str.w	r3, [sl, #8]
   1b828:	6863      	ldr	r3, [r4, #4]
   1b82a:	f8ca 300c 	str.w	r3, [sl, #12]
   1b82e:	d83c      	bhi.n	1b8aa <_realloc_r+0x2e2>
   1b830:	3408      	adds	r4, #8
   1b832:	f10a 0310 	add.w	r3, sl, #16
   1b836:	6822      	ldr	r2, [r4, #0]
   1b838:	601a      	str	r2, [r3, #0]
   1b83a:	6862      	ldr	r2, [r4, #4]
   1b83c:	605a      	str	r2, [r3, #4]
   1b83e:	68a2      	ldr	r2, [r4, #8]
   1b840:	609a      	str	r2, [r3, #8]
   1b842:	4634      	mov	r4, r6
   1b844:	465f      	mov	r7, fp
   1b846:	46d1      	mov	r9, sl
   1b848:	e740      	b.n	1b6cc <_realloc_r+0x104>
   1b84a:	4621      	mov	r1, r4
   1b84c:	f7fb fd44 	bl	172d8 <memmove>
   1b850:	e727      	b.n	1b6a2 <_realloc_r+0xda>
   1b852:	e9d1 1302 	ldrd	r1, r3, [r1, #8]
   1b856:	1f3a      	subs	r2, r7, #4
   1b858:	60cb      	str	r3, [r1, #12]
   1b85a:	6099      	str	r1, [r3, #8]
   1b85c:	e7d5      	b.n	1b80a <_realloc_r+0x242>
   1b85e:	4633      	mov	r3, r6
   1b860:	e7e9      	b.n	1b836 <_realloc_r+0x26e>
   1b862:	4621      	mov	r1, r4
   1b864:	4630      	mov	r0, r6
   1b866:	f7fb fd37 	bl	172d8 <memmove>
   1b86a:	e7ea      	b.n	1b842 <_realloc_r+0x27a>
   1b86c:	68a3      	ldr	r3, [r4, #8]
   1b86e:	2a24      	cmp	r2, #36	; 0x24
   1b870:	6083      	str	r3, [r0, #8]
   1b872:	68e3      	ldr	r3, [r4, #12]
   1b874:	60c3      	str	r3, [r0, #12]
   1b876:	d028      	beq.n	1b8ca <_realloc_r+0x302>
   1b878:	f104 0210 	add.w	r2, r4, #16
   1b87c:	f100 0310 	add.w	r3, r0, #16
   1b880:	e709      	b.n	1b696 <_realloc_r+0xce>
   1b882:	1b5b      	subs	r3, r3, r5
   1b884:	eb09 0205 	add.w	r2, r9, r5
   1b888:	4640      	mov	r0, r8
   1b88a:	4626      	mov	r6, r4
   1b88c:	f043 0301 	orr.w	r3, r3, #1
   1b890:	f8cb 2008 	str.w	r2, [fp, #8]
   1b894:	6053      	str	r3, [r2, #4]
   1b896:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b89a:	f003 0301 	and.w	r3, r3, #1
   1b89e:	432b      	orrs	r3, r5
   1b8a0:	f844 3c04 	str.w	r3, [r4, #-4]
   1b8a4:	f7fb fdf2 	bl	1748c <__malloc_unlock>
   1b8a8:	e724      	b.n	1b6f4 <_realloc_r+0x12c>
   1b8aa:	68a3      	ldr	r3, [r4, #8]
   1b8ac:	2a24      	cmp	r2, #36	; 0x24
   1b8ae:	f8ca 3010 	str.w	r3, [sl, #16]
   1b8b2:	68e3      	ldr	r3, [r4, #12]
   1b8b4:	f8ca 3014 	str.w	r3, [sl, #20]
   1b8b8:	d010      	beq.n	1b8dc <_realloc_r+0x314>
   1b8ba:	3410      	adds	r4, #16
   1b8bc:	f10a 0318 	add.w	r3, sl, #24
   1b8c0:	e7b9      	b.n	1b836 <_realloc_r+0x26e>
   1b8c2:	4640      	mov	r0, r8
   1b8c4:	f7fb fde2 	bl	1748c <__malloc_unlock>
   1b8c8:	e73e      	b.n	1b748 <_realloc_r+0x180>
   1b8ca:	6923      	ldr	r3, [r4, #16]
   1b8cc:	f104 0218 	add.w	r2, r4, #24
   1b8d0:	6103      	str	r3, [r0, #16]
   1b8d2:	6963      	ldr	r3, [r4, #20]
   1b8d4:	6143      	str	r3, [r0, #20]
   1b8d6:	f100 0318 	add.w	r3, r0, #24
   1b8da:	e6dc      	b.n	1b696 <_realloc_r+0xce>
   1b8dc:	6923      	ldr	r3, [r4, #16]
   1b8de:	3418      	adds	r4, #24
   1b8e0:	f8ca 3018 	str.w	r3, [sl, #24]
   1b8e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b8e8:	f8ca 301c 	str.w	r3, [sl, #28]
   1b8ec:	f10a 0320 	add.w	r3, sl, #32
   1b8f0:	e7a1      	b.n	1b836 <_realloc_r+0x26e>
   1b8f2:	4632      	mov	r2, r6
   1b8f4:	e75e      	b.n	1b7b4 <_realloc_r+0x1ec>
   1b8f6:	4621      	mov	r1, r4
   1b8f8:	4630      	mov	r0, r6
   1b8fa:	9301      	str	r3, [sp, #4]
   1b8fc:	f7fb fcec 	bl	172d8 <memmove>
   1b900:	9b01      	ldr	r3, [sp, #4]
   1b902:	e75d      	b.n	1b7c0 <_realloc_r+0x1f8>
   1b904:	20000290 	.word	0x20000290
   1b908:	68a1      	ldr	r1, [r4, #8]
   1b90a:	2a24      	cmp	r2, #36	; 0x24
   1b90c:	f8ca 1010 	str.w	r1, [sl, #16]
   1b910:	68e1      	ldr	r1, [r4, #12]
   1b912:	f8ca 1014 	str.w	r1, [sl, #20]
   1b916:	d003      	beq.n	1b920 <_realloc_r+0x358>
   1b918:	3410      	adds	r4, #16
   1b91a:	f10a 0218 	add.w	r2, sl, #24
   1b91e:	e749      	b.n	1b7b4 <_realloc_r+0x1ec>
   1b920:	6922      	ldr	r2, [r4, #16]
   1b922:	3418      	adds	r4, #24
   1b924:	f8ca 2018 	str.w	r2, [sl, #24]
   1b928:	f854 2c04 	ldr.w	r2, [r4, #-4]
   1b92c:	f8ca 201c 	str.w	r2, [sl, #28]
   1b930:	f10a 0220 	add.w	r2, sl, #32
   1b934:	e73e      	b.n	1b7b4 <_realloc_r+0x1ec>
   1b936:	bf00      	nop

0001b938 <__ascii_wctomb>:
   1b938:	4603      	mov	r3, r0
   1b93a:	b149      	cbz	r1, 1b950 <__ascii_wctomb+0x18>
   1b93c:	2aff      	cmp	r2, #255	; 0xff
   1b93e:	d802      	bhi.n	1b946 <__ascii_wctomb+0xe>
   1b940:	2001      	movs	r0, #1
   1b942:	700a      	strb	r2, [r1, #0]
   1b944:	4770      	bx	lr
   1b946:	228a      	movs	r2, #138	; 0x8a
   1b948:	f04f 30ff 	mov.w	r0, #4294967295
   1b94c:	601a      	str	r2, [r3, #0]
   1b94e:	4770      	bx	lr
   1b950:	4608      	mov	r0, r1
   1b952:	4770      	bx	lr

0001b954 <abort>:
   1b954:	2006      	movs	r0, #6
   1b956:	b508      	push	{r3, lr}
   1b958:	f000 f804 	bl	1b964 <raise>
   1b95c:	2001      	movs	r0, #1
   1b95e:	f7eb fb41 	bl	6fe4 <_exit>
   1b962:	bf00      	nop

0001b964 <raise>:
   1b964:	b538      	push	{r3, r4, r5, lr}
   1b966:	281f      	cmp	r0, #31
   1b968:	4b13      	ldr	r3, [pc, #76]	; (1b9b8 <raise+0x54>)
   1b96a:	681d      	ldr	r5, [r3, #0]
   1b96c:	d81e      	bhi.n	1b9ac <raise+0x48>
   1b96e:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
   1b972:	4604      	mov	r4, r0
   1b974:	b162      	cbz	r2, 1b990 <raise+0x2c>
   1b976:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1b97a:	b14b      	cbz	r3, 1b990 <raise+0x2c>
   1b97c:	2b01      	cmp	r3, #1
   1b97e:	d005      	beq.n	1b98c <raise+0x28>
   1b980:	1c59      	adds	r1, r3, #1
   1b982:	d00f      	beq.n	1b9a4 <raise+0x40>
   1b984:	2100      	movs	r1, #0
   1b986:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
   1b98a:	4798      	blx	r3
   1b98c:	2000      	movs	r0, #0
   1b98e:	bd38      	pop	{r3, r4, r5, pc}
   1b990:	4628      	mov	r0, r5
   1b992:	f000 f829 	bl	1b9e8 <_getpid_r>
   1b996:	4622      	mov	r2, r4
   1b998:	4601      	mov	r1, r0
   1b99a:	4628      	mov	r0, r5
   1b99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b9a0:	f000 b80c 	b.w	1b9bc <_kill_r>
   1b9a4:	2316      	movs	r3, #22
   1b9a6:	2001      	movs	r0, #1
   1b9a8:	602b      	str	r3, [r5, #0]
   1b9aa:	bd38      	pop	{r3, r4, r5, pc}
   1b9ac:	2316      	movs	r3, #22
   1b9ae:	f04f 30ff 	mov.w	r0, #4294967295
   1b9b2:	602b      	str	r3, [r5, #0]
   1b9b4:	bd38      	pop	{r3, r4, r5, pc}
   1b9b6:	bf00      	nop
   1b9b8:	20000a70 	.word	0x20000a70

0001b9bc <_kill_r>:
   1b9bc:	b570      	push	{r4, r5, r6, lr}
   1b9be:	460c      	mov	r4, r1
   1b9c0:	4603      	mov	r3, r0
   1b9c2:	4d08      	ldr	r5, [pc, #32]	; (1b9e4 <_kill_r+0x28>)
   1b9c4:	2600      	movs	r6, #0
   1b9c6:	4620      	mov	r0, r4
   1b9c8:	4611      	mov	r1, r2
   1b9ca:	461c      	mov	r4, r3
   1b9cc:	602e      	str	r6, [r5, #0]
   1b9ce:	f004 fb1b 	bl	20008 <_kill>
   1b9d2:	1c43      	adds	r3, r0, #1
   1b9d4:	d000      	beq.n	1b9d8 <_kill_r+0x1c>
   1b9d6:	bd70      	pop	{r4, r5, r6, pc}
   1b9d8:	682b      	ldr	r3, [r5, #0]
   1b9da:	2b00      	cmp	r3, #0
   1b9dc:	d0fb      	beq.n	1b9d6 <_kill_r+0x1a>
   1b9de:	6023      	str	r3, [r4, #0]
   1b9e0:	bd70      	pop	{r4, r5, r6, pc}
   1b9e2:	bf00      	nop
   1b9e4:	20004850 	.word	0x20004850

0001b9e8 <_getpid_r>:
   1b9e8:	f004 bb10 	b.w	2000c <_getpid>

0001b9ec <nrf_cc3xx_platform_init>:
   1b9ec:	b510      	push	{r4, lr}
   1b9ee:	4c0c      	ldr	r4, [pc, #48]	; (1ba20 <nrf_cc3xx_platform_init+0x34>)
   1b9f0:	6823      	ldr	r3, [r4, #0]
   1b9f2:	b113      	cbz	r3, 1b9fa <nrf_cc3xx_platform_init+0xe>
   1b9f4:	4b0b      	ldr	r3, [pc, #44]	; (1ba24 <nrf_cc3xx_platform_init+0x38>)
   1b9f6:	681b      	ldr	r3, [r3, #0]
   1b9f8:	b92b      	cbnz	r3, 1ba06 <nrf_cc3xx_platform_init+0x1a>
   1b9fa:	f000 fe5f 	bl	1c6bc <CC_LibInit>
   1b9fe:	b930      	cbnz	r0, 1ba0e <nrf_cc3xx_platform_init+0x22>
   1ba00:	2201      	movs	r2, #1
   1ba02:	4b08      	ldr	r3, [pc, #32]	; (1ba24 <nrf_cc3xx_platform_init+0x38>)
   1ba04:	601a      	str	r2, [r3, #0]
   1ba06:	2301      	movs	r3, #1
   1ba08:	6023      	str	r3, [r4, #0]
   1ba0a:	2000      	movs	r0, #0
   1ba0c:	bd10      	pop	{r4, pc}
   1ba0e:	3801      	subs	r0, #1
   1ba10:	2807      	cmp	r0, #7
   1ba12:	d901      	bls.n	1ba18 <nrf_cc3xx_platform_init+0x2c>
   1ba14:	4804      	ldr	r0, [pc, #16]	; (1ba28 <nrf_cc3xx_platform_init+0x3c>)
   1ba16:	bd10      	pop	{r4, pc}
   1ba18:	4b04      	ldr	r3, [pc, #16]	; (1ba2c <nrf_cc3xx_platform_init+0x40>)
   1ba1a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ba1e:	bd10      	pop	{r4, pc}
   1ba20:	20004858 	.word	0x20004858
   1ba24:	20004854 	.word	0x20004854
   1ba28:	ffff8ffe 	.word	0xffff8ffe
   1ba2c:	000314a8 	.word	0x000314a8

0001ba30 <nrf_cc3xx_platform_abort>:
   1ba30:	f3bf 8f4f 	dsb	sy
   1ba34:	4905      	ldr	r1, [pc, #20]	; (1ba4c <nrf_cc3xx_platform_abort+0x1c>)
   1ba36:	4b06      	ldr	r3, [pc, #24]	; (1ba50 <nrf_cc3xx_platform_abort+0x20>)
   1ba38:	68ca      	ldr	r2, [r1, #12]
   1ba3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ba3e:	4313      	orrs	r3, r2
   1ba40:	60cb      	str	r3, [r1, #12]
   1ba42:	f3bf 8f4f 	dsb	sy
   1ba46:	bf00      	nop
   1ba48:	e7fd      	b.n	1ba46 <nrf_cc3xx_platform_abort+0x16>
   1ba4a:	bf00      	nop
   1ba4c:	e000ed00 	.word	0xe000ed00
   1ba50:	05fa0004 	.word	0x05fa0004

0001ba54 <CC_PalAbort>:
   1ba54:	b430      	push	{r4, r5}
   1ba56:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1ba5a:	2500      	movs	r5, #0
   1ba5c:	4b0b      	ldr	r3, [pc, #44]	; (1ba8c <CC_PalAbort+0x38>)
   1ba5e:	4c0c      	ldr	r4, [pc, #48]	; (1ba90 <CC_PalAbort+0x3c>)
   1ba60:	490c      	ldr	r1, [pc, #48]	; (1ba94 <CC_PalAbort+0x40>)
   1ba62:	6849      	ldr	r1, [r1, #4]
   1ba64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1ba68:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1ba6c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1ba70:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1ba74:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1ba78:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
   1ba7c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
   1ba80:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   1ba84:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
   1ba88:	bc30      	pop	{r4, r5}
   1ba8a:	4708      	bx	r1
   1ba8c:	50845000 	.word	0x50845000
   1ba90:	50844000 	.word	0x50844000
   1ba94:	20000be8 	.word	0x20000be8

0001ba98 <nrf_cc3xx_platform_set_abort>:
   1ba98:	4b02      	ldr	r3, [pc, #8]	; (1baa4 <nrf_cc3xx_platform_set_abort+0xc>)
   1ba9a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1ba9e:	e9c3 1200 	strd	r1, r2, [r3]
   1baa2:	4770      	bx	lr
   1baa4:	20000be8 	.word	0x20000be8

0001baa8 <nrf_cc3xx_platform_ctr_drbg_init>:
   1baa8:	4b14      	ldr	r3, [pc, #80]	; (1bafc <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   1baaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1baae:	2800      	cmp	r0, #0
   1bab0:	bf14      	ite	ne
   1bab2:	4604      	movne	r4, r0
   1bab4:	461c      	moveq	r4, r3
   1bab6:	4f12      	ldr	r7, [pc, #72]	; (1bb00 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1bab8:	6823      	ldr	r3, [r4, #0]
   1baba:	b083      	sub	sp, #12
   1babc:	42bb      	cmp	r3, r7
   1babe:	d019      	beq.n	1baf4 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   1bac0:	4616      	mov	r6, r2
   1bac2:	460d      	mov	r5, r1
   1bac4:	4620      	mov	r0, r4
   1bac6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1baca:	f104 0904 	add.w	r9, r4, #4
   1bace:	f000 f8ed 	bl	1bcac <mbedtls_platform_zeroize>
   1bad2:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1bad6:	4648      	mov	r0, r9
   1bad8:	f000 fcd0 	bl	1c47c <cc_mbedtls_entropy_init>
   1badc:	4640      	mov	r0, r8
   1bade:	f000 faf3 	bl	1c0c8 <cc_mbedtls_ctr_drbg_init>
   1bae2:	462b      	mov	r3, r5
   1bae4:	464a      	mov	r2, r9
   1bae6:	4640      	mov	r0, r8
   1bae8:	4906      	ldr	r1, [pc, #24]	; (1bb04 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1baea:	9600      	str	r6, [sp, #0]
   1baec:	f000 fb02 	bl	1c0f4 <cc_mbedtls_ctr_drbg_seed>
   1baf0:	b908      	cbnz	r0, 1baf6 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1baf2:	6027      	str	r7, [r4, #0]
   1baf4:	2000      	movs	r0, #0
   1baf6:	b003      	add	sp, #12
   1baf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bafc:	2000485c 	.word	0x2000485c
   1bb00:	5ac9bca5 	.word	0x5ac9bca5
   1bb04:	0001c501 	.word	0x0001c501

0001bb08 <nrf_cc3xx_platform_ctr_drbg_get>:
   1bb08:	b570      	push	{r4, r5, r6, lr}
   1bb0a:	4c0d      	ldr	r4, [pc, #52]	; (1bb40 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1bb0c:	461d      	mov	r5, r3
   1bb0e:	2800      	cmp	r0, #0
   1bb10:	bf14      	ite	ne
   1bb12:	4606      	movne	r6, r0
   1bb14:	4626      	moveq	r6, r4
   1bb16:	4b0b      	ldr	r3, [pc, #44]	; (1bb44 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1bb18:	6830      	ldr	r0, [r6, #0]
   1bb1a:	b082      	sub	sp, #8
   1bb1c:	4298      	cmp	r0, r3
   1bb1e:	d10d      	bne.n	1bb3c <nrf_cc3xx_platform_ctr_drbg_get+0x34>
   1bb20:	f506 708e 	add.w	r0, r6, #284	; 0x11c
   1bb24:	2600      	movs	r6, #0
   1bb26:	4633      	mov	r3, r6
   1bb28:	9600      	str	r6, [sp, #0]
   1bb2a:	4614      	mov	r4, r2
   1bb2c:	f000 fb32 	bl	1c194 <cc_mbedtls_ctr_drbg_random_with_add>
   1bb30:	2800      	cmp	r0, #0
   1bb32:	bf18      	it	ne
   1bb34:	4634      	movne	r4, r6
   1bb36:	602c      	str	r4, [r5, #0]
   1bb38:	b002      	add	sp, #8
   1bb3a:	bd70      	pop	{r4, r5, r6, pc}
   1bb3c:	4802      	ldr	r0, [pc, #8]	; (1bb48 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1bb3e:	e7fb      	b.n	1bb38 <nrf_cc3xx_platform_ctr_drbg_get+0x30>
   1bb40:	2000485c 	.word	0x2000485c
   1bb44:	5ac9bca5 	.word	0x5ac9bca5
   1bb48:	ffff8fe8 	.word	0xffff8fe8

0001bb4c <mutex_free>:
   1bb4c:	b510      	push	{r4, lr}
   1bb4e:	4604      	mov	r4, r0
   1bb50:	b150      	cbz	r0, 1bb68 <mutex_free+0x1c>
   1bb52:	6863      	ldr	r3, [r4, #4]
   1bb54:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1bb58:	d005      	beq.n	1bb66 <mutex_free+0x1a>
   1bb5a:	4a06      	ldr	r2, [pc, #24]	; (1bb74 <mutex_free+0x28>)
   1bb5c:	4293      	cmp	r3, r2
   1bb5e:	d002      	beq.n	1bb66 <mutex_free+0x1a>
   1bb60:	2300      	movs	r3, #0
   1bb62:	6062      	str	r2, [r4, #4]
   1bb64:	6023      	str	r3, [r4, #0]
   1bb66:	bd10      	pop	{r4, pc}
   1bb68:	4b03      	ldr	r3, [pc, #12]	; (1bb78 <mutex_free+0x2c>)
   1bb6a:	4804      	ldr	r0, [pc, #16]	; (1bb7c <mutex_free+0x30>)
   1bb6c:	685b      	ldr	r3, [r3, #4]
   1bb6e:	4798      	blx	r3
   1bb70:	e7ef      	b.n	1bb52 <mutex_free+0x6>
   1bb72:	bf00      	nop
   1bb74:	a95c5f2c 	.word	0xa95c5f2c
   1bb78:	20000be8 	.word	0x20000be8
   1bb7c:	000314c8 	.word	0x000314c8

0001bb80 <mutex_lock>:
   1bb80:	b1c8      	cbz	r0, 1bbb6 <mutex_lock+0x36>
   1bb82:	6843      	ldr	r3, [r0, #4]
   1bb84:	4a0d      	ldr	r2, [pc, #52]	; (1bbbc <mutex_lock+0x3c>)
   1bb86:	4293      	cmp	r3, r2
   1bb88:	d013      	beq.n	1bbb2 <mutex_lock+0x32>
   1bb8a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1bb8e:	d00e      	beq.n	1bbae <mutex_lock+0x2e>
   1bb90:	2301      	movs	r3, #1
   1bb92:	e850 2f00 	ldrex	r2, [r0]
   1bb96:	4619      	mov	r1, r3
   1bb98:	e840 1c00 	strex	ip, r1, [r0]
   1bb9c:	f09c 0f00 	teq	ip, #0
   1bba0:	d1f7      	bne.n	1bb92 <mutex_lock+0x12>
   1bba2:	2a01      	cmp	r2, #1
   1bba4:	d0f5      	beq.n	1bb92 <mutex_lock+0x12>
   1bba6:	f3bf 8f5f 	dmb	sy
   1bbaa:	2000      	movs	r0, #0
   1bbac:	4770      	bx	lr
   1bbae:	4804      	ldr	r0, [pc, #16]	; (1bbc0 <mutex_lock+0x40>)
   1bbb0:	4770      	bx	lr
   1bbb2:	4804      	ldr	r0, [pc, #16]	; (1bbc4 <mutex_lock+0x44>)
   1bbb4:	4770      	bx	lr
   1bbb6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1bbba:	4770      	bx	lr
   1bbbc:	a95c5f2c 	.word	0xa95c5f2c
   1bbc0:	ffff8fe9 	.word	0xffff8fe9
   1bbc4:	ffff8fea 	.word	0xffff8fea

0001bbc8 <mutex_unlock>:
   1bbc8:	4603      	mov	r3, r0
   1bbca:	b180      	cbz	r0, 1bbee <mutex_unlock+0x26>
   1bbcc:	6842      	ldr	r2, [r0, #4]
   1bbce:	4909      	ldr	r1, [pc, #36]	; (1bbf4 <mutex_unlock+0x2c>)
   1bbd0:	428a      	cmp	r2, r1
   1bbd2:	d00a      	beq.n	1bbea <mutex_unlock+0x22>
   1bbd4:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
   1bbd8:	d005      	beq.n	1bbe6 <mutex_unlock+0x1e>
   1bbda:	f3bf 8f5f 	dmb	sy
   1bbde:	2200      	movs	r2, #0
   1bbe0:	4610      	mov	r0, r2
   1bbe2:	601a      	str	r2, [r3, #0]
   1bbe4:	4770      	bx	lr
   1bbe6:	4804      	ldr	r0, [pc, #16]	; (1bbf8 <mutex_unlock+0x30>)
   1bbe8:	4770      	bx	lr
   1bbea:	4804      	ldr	r0, [pc, #16]	; (1bbfc <mutex_unlock+0x34>)
   1bbec:	4770      	bx	lr
   1bbee:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1bbf2:	4770      	bx	lr
   1bbf4:	a95c5f2c 	.word	0xa95c5f2c
   1bbf8:	ffff8fe9 	.word	0xffff8fe9
   1bbfc:	ffff8fea 	.word	0xffff8fea

0001bc00 <mutex_init>:
   1bc00:	b510      	push	{r4, lr}
   1bc02:	4604      	mov	r4, r0
   1bc04:	b120      	cbz	r0, 1bc10 <mutex_init+0x10>
   1bc06:	2300      	movs	r3, #0
   1bc08:	4a03      	ldr	r2, [pc, #12]	; (1bc18 <mutex_init+0x18>)
   1bc0a:	6023      	str	r3, [r4, #0]
   1bc0c:	6062      	str	r2, [r4, #4]
   1bc0e:	bd10      	pop	{r4, pc}
   1bc10:	4802      	ldr	r0, [pc, #8]	; (1bc1c <mutex_init+0x1c>)
   1bc12:	f7ff ff1f 	bl	1ba54 <CC_PalAbort>
   1bc16:	e7f6      	b.n	1bc06 <mutex_init+0x6>
   1bc18:	3a00003a 	.word	0x3a00003a
   1bc1c:	000314f0 	.word	0x000314f0

0001bc20 <nrf_cc3xx_platform_set_mutexes>:
   1bc20:	b570      	push	{r4, r5, r6, lr}
   1bc22:	4c19      	ldr	r4, [pc, #100]	; (1bc88 <nrf_cc3xx_platform_set_mutexes+0x68>)
   1bc24:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1bc28:	6806      	ldr	r6, [r0, #0]
   1bc2a:	f8c4 c004 	str.w	ip, [r4, #4]
   1bc2e:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1bc32:	68c0      	ldr	r0, [r0, #12]
   1bc34:	f8c4 c008 	str.w	ip, [r4, #8]
   1bc38:	60e0      	str	r0, [r4, #12]
   1bc3a:	6026      	str	r6, [r4, #0]
   1bc3c:	6808      	ldr	r0, [r1, #0]
   1bc3e:	4b13      	ldr	r3, [pc, #76]	; (1bc8c <nrf_cc3xx_platform_set_mutexes+0x6c>)
   1bc40:	4d13      	ldr	r5, [pc, #76]	; (1bc90 <nrf_cc3xx_platform_set_mutexes+0x70>)
   1bc42:	6018      	str	r0, [r3, #0]
   1bc44:	6848      	ldr	r0, [r1, #4]
   1bc46:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1bc4a:	6058      	str	r0, [r3, #4]
   1bc4c:	6888      	ldr	r0, [r1, #8]
   1bc4e:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
   1bc52:	6098      	str	r0, [r3, #8]
   1bc54:	68c8      	ldr	r0, [r1, #12]
   1bc56:	6909      	ldr	r1, [r1, #16]
   1bc58:	60d8      	str	r0, [r3, #12]
   1bc5a:	6119      	str	r1, [r3, #16]
   1bc5c:	d012      	beq.n	1bc84 <nrf_cc3xx_platform_set_mutexes+0x64>
   1bc5e:	2300      	movs	r3, #0
   1bc60:	4a0c      	ldr	r2, [pc, #48]	; (1bc94 <nrf_cc3xx_platform_set_mutexes+0x74>)
   1bc62:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1bc66:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
   1bc6a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   1bc6e:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
   1bc72:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
   1bc76:	47b0      	blx	r6
   1bc78:	6823      	ldr	r3, [r4, #0]
   1bc7a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1bc7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bc82:	4718      	bx	r3
   1bc84:	bd70      	pop	{r4, r5, r6, pc}
   1bc86:	bf00      	nop
   1bc88:	20000c04 	.word	0x20000c04
   1bc8c:	20000bf0 	.word	0x20000bf0
   1bc90:	2000485c 	.word	0x2000485c
   1bc94:	a95c5f2c 	.word	0xa95c5f2c

0001bc98 <mbedtls_zeroize_internal>:
   1bc98:	b138      	cbz	r0, 1bcaa <mbedtls_zeroize_internal+0x12>
   1bc9a:	b131      	cbz	r1, 1bcaa <mbedtls_zeroize_internal+0x12>
   1bc9c:	2200      	movs	r2, #0
   1bc9e:	4401      	add	r1, r0
   1bca0:	4603      	mov	r3, r0
   1bca2:	3001      	adds	r0, #1
   1bca4:	4281      	cmp	r1, r0
   1bca6:	701a      	strb	r2, [r3, #0]
   1bca8:	d1fa      	bne.n	1bca0 <mbedtls_zeroize_internal+0x8>
   1bcaa:	4770      	bx	lr

0001bcac <mbedtls_platform_zeroize>:
   1bcac:	b138      	cbz	r0, 1bcbe <mbedtls_platform_zeroize+0x12>
   1bcae:	b131      	cbz	r1, 1bcbe <mbedtls_platform_zeroize+0x12>
   1bcb0:	2200      	movs	r2, #0
   1bcb2:	4401      	add	r1, r0
   1bcb4:	4603      	mov	r3, r0
   1bcb6:	3001      	adds	r0, #1
   1bcb8:	4288      	cmp	r0, r1
   1bcba:	701a      	strb	r2, [r3, #0]
   1bcbc:	d1fa      	bne.n	1bcb4 <mbedtls_platform_zeroize+0x8>
   1bcbe:	4770      	bx	lr

0001bcc0 <block_cipher_df>:
   1bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcc4:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1bcc8:	b0bd      	sub	sp, #244	; 0xf4
   1bcca:	f200 80da 	bhi.w	1be82 <block_cipher_df+0x1c2>
   1bcce:	460c      	mov	r4, r1
   1bcd0:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 1be88 <block_cipher_df+0x1c8>
   1bcd4:	4615      	mov	r5, r2
   1bcd6:	2100      	movs	r1, #0
   1bcd8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1bcdc:	4682      	mov	sl, r0
   1bcde:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
   1bce2:	4648      	mov	r0, r9
   1bce4:	f7fb fb78 	bl	173d8 <memset>
   1bce8:	4640      	mov	r0, r8
   1bcea:	f001 f959 	bl	1cfa0 <cc_mbedtls_aes_init>
   1bcee:	2330      	movs	r3, #48	; 0x30
   1bcf0:	4621      	mov	r1, r4
   1bcf2:	2400      	movs	r4, #0
   1bcf4:	f889 3017 	strb.w	r3, [r9, #23]
   1bcf8:	f109 0618 	add.w	r6, r9, #24
   1bcfc:	ba6b      	rev16	r3, r5
   1bcfe:	462a      	mov	r2, r5
   1bd00:	f8a9 3012 	strh.w	r3, [r9, #18]
   1bd04:	4630      	mov	r0, r6
   1bd06:	f8a9 4010 	strh.w	r4, [r9, #16]
   1bd0a:	f7e4 ff23 	bl	b54 <memcpy>
   1bd0e:	2280      	movs	r2, #128	; 0x80
   1bd10:	4623      	mov	r3, r4
   1bd12:	5572      	strb	r2, [r6, r5]
   1bd14:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   1bd18:	f801 3f01 	strb.w	r3, [r1, #1]!
   1bd1c:	3301      	adds	r3, #1
   1bd1e:	2b20      	cmp	r3, #32
   1bd20:	d1fa      	bne.n	1bd18 <block_cipher_df+0x58>
   1bd22:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bd26:	4640      	mov	r0, r8
   1bd28:	a90b      	add	r1, sp, #44	; 0x2c
   1bd2a:	f001 f94f 	bl	1cfcc <cc_mbedtls_aes_setkey_enc>
   1bd2e:	4683      	mov	fp, r0
   1bd30:	2800      	cmp	r0, #0
   1bd32:	f040 80a3 	bne.w	1be7c <block_cipher_df+0x1bc>
   1bd36:	f105 0319 	add.w	r3, r5, #25
   1bd3a:	ad13      	add	r5, sp, #76	; 0x4c
   1bd3c:	462f      	mov	r7, r5
   1bd3e:	ae07      	add	r6, sp, #28
   1bd40:	9302      	str	r3, [sp, #8]
   1bd42:	f8cd a00c 	str.w	sl, [sp, #12]
   1bd46:	9601      	str	r6, [sp, #4]
   1bd48:	9504      	str	r5, [sp, #16]
   1bd4a:	2210      	movs	r2, #16
   1bd4c:	2100      	movs	r1, #0
   1bd4e:	9801      	ldr	r0, [sp, #4]
   1bd50:	f7fb fb42 	bl	173d8 <memset>
   1bd54:	f8df a134 	ldr.w	sl, [pc, #308]	; 1be8c <block_cipher_df+0x1cc>
   1bd58:	f8dd b008 	ldr.w	fp, [sp, #8]
   1bd5c:	9705      	str	r7, [sp, #20]
   1bd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bd60:	f85a 4c04 	ldr.w	r4, [sl, #-4]
   1bd64:	9f08      	ldr	r7, [sp, #32]
   1bd66:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bd68:	9907      	ldr	r1, [sp, #28]
   1bd6a:	f85a 0c10 	ldr.w	r0, [sl, #-16]
   1bd6e:	f85a 6c0c 	ldr.w	r6, [sl, #-12]
   1bd72:	f85a 5c08 	ldr.w	r5, [sl, #-8]
   1bd76:	405c      	eors	r4, r3
   1bd78:	9b01      	ldr	r3, [sp, #4]
   1bd7a:	407e      	eors	r6, r7
   1bd7c:	4055      	eors	r5, r2
   1bd7e:	ea81 0700 	eor.w	r7, r1, r0
   1bd82:	461a      	mov	r2, r3
   1bd84:	2101      	movs	r1, #1
   1bd86:	4640      	mov	r0, r8
   1bd88:	e9cd 7607 	strd	r7, r6, [sp, #28]
   1bd8c:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
   1bd90:	f001 f93e 	bl	1d010 <cc_mbedtls_aes_crypt_ecb>
   1bd94:	f1bb 0f10 	cmp.w	fp, #16
   1bd98:	bf94      	ite	ls
   1bd9a:	ebab 0b0b 	subls.w	fp, fp, fp
   1bd9e:	f1ab 0b10 	subhi.w	fp, fp, #16
   1bda2:	f10a 0a10 	add.w	sl, sl, #16
   1bda6:	2800      	cmp	r0, #0
   1bda8:	d147      	bne.n	1be3a <block_cipher_df+0x17a>
   1bdaa:	f1bb 0f00 	cmp.w	fp, #0
   1bdae:	d1d6      	bne.n	1bd5e <block_cipher_df+0x9e>
   1bdb0:	9f05      	ldr	r7, [sp, #20]
   1bdb2:	2210      	movs	r2, #16
   1bdb4:	4638      	mov	r0, r7
   1bdb6:	9901      	ldr	r1, [sp, #4]
   1bdb8:	f7e4 fecc 	bl	b54 <memcpy>
   1bdbc:	f899 3003 	ldrb.w	r3, [r9, #3]
   1bdc0:	3710      	adds	r7, #16
   1bdc2:	3301      	adds	r3, #1
   1bdc4:	4547      	cmp	r7, r8
   1bdc6:	f889 3003 	strb.w	r3, [r9, #3]
   1bdca:	d1be      	bne.n	1bd4a <block_cipher_df+0x8a>
   1bdcc:	9d04      	ldr	r5, [sp, #16]
   1bdce:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bdd2:	4629      	mov	r1, r5
   1bdd4:	4640      	mov	r0, r8
   1bdd6:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1bdda:	9e01      	ldr	r6, [sp, #4]
   1bddc:	f001 f8f6 	bl	1cfcc <cc_mbedtls_aes_setkey_enc>
   1bde0:	4683      	mov	fp, r0
   1bde2:	bb78      	cbnz	r0, 1be44 <block_cipher_df+0x184>
   1bde4:	4654      	mov	r4, sl
   1bde6:	f10a 0730 	add.w	r7, sl, #48	; 0x30
   1bdea:	ab1b      	add	r3, sp, #108	; 0x6c
   1bdec:	461a      	mov	r2, r3
   1bdee:	2101      	movs	r1, #1
   1bdf0:	4640      	mov	r0, r8
   1bdf2:	f001 f90d 	bl	1d010 <cc_mbedtls_aes_crypt_ecb>
   1bdf6:	4683      	mov	fp, r0
   1bdf8:	bb20      	cbnz	r0, 1be44 <block_cipher_df+0x184>
   1bdfa:	2210      	movs	r2, #16
   1bdfc:	4620      	mov	r0, r4
   1bdfe:	a91b      	add	r1, sp, #108	; 0x6c
   1be00:	4414      	add	r4, r2
   1be02:	f7e4 fea7 	bl	b54 <memcpy>
   1be06:	42a7      	cmp	r7, r4
   1be08:	d1ef      	bne.n	1bdea <block_cipher_df+0x12a>
   1be0a:	4640      	mov	r0, r8
   1be0c:	f001 f8d8 	bl	1cfc0 <cc_mbedtls_aes_free>
   1be10:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1be14:	481c      	ldr	r0, [pc, #112]	; (1be88 <block_cipher_df+0x1c8>)
   1be16:	f7ff ff49 	bl	1bcac <mbedtls_platform_zeroize>
   1be1a:	4628      	mov	r0, r5
   1be1c:	2130      	movs	r1, #48	; 0x30
   1be1e:	f7ff ff45 	bl	1bcac <mbedtls_platform_zeroize>
   1be22:	a80b      	add	r0, sp, #44	; 0x2c
   1be24:	2120      	movs	r1, #32
   1be26:	f7ff ff41 	bl	1bcac <mbedtls_platform_zeroize>
   1be2a:	4630      	mov	r0, r6
   1be2c:	2110      	movs	r1, #16
   1be2e:	f7ff ff3d 	bl	1bcac <mbedtls_platform_zeroize>
   1be32:	4658      	mov	r0, fp
   1be34:	b03d      	add	sp, #244	; 0xf4
   1be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be3a:	4683      	mov	fp, r0
   1be3c:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1be40:	9e01      	ldr	r6, [sp, #4]
   1be42:	9d04      	ldr	r5, [sp, #16]
   1be44:	4640      	mov	r0, r8
   1be46:	f001 f8bb 	bl	1cfc0 <cc_mbedtls_aes_free>
   1be4a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1be4e:	480e      	ldr	r0, [pc, #56]	; (1be88 <block_cipher_df+0x1c8>)
   1be50:	f7ff ff2c 	bl	1bcac <mbedtls_platform_zeroize>
   1be54:	4628      	mov	r0, r5
   1be56:	2130      	movs	r1, #48	; 0x30
   1be58:	f7ff ff28 	bl	1bcac <mbedtls_platform_zeroize>
   1be5c:	2120      	movs	r1, #32
   1be5e:	a80b      	add	r0, sp, #44	; 0x2c
   1be60:	f7ff ff24 	bl	1bcac <mbedtls_platform_zeroize>
   1be64:	2110      	movs	r1, #16
   1be66:	4630      	mov	r0, r6
   1be68:	f7ff ff20 	bl	1bcac <mbedtls_platform_zeroize>
   1be6c:	2130      	movs	r1, #48	; 0x30
   1be6e:	4650      	mov	r0, sl
   1be70:	f7ff ff1c 	bl	1bcac <mbedtls_platform_zeroize>
   1be74:	4658      	mov	r0, fp
   1be76:	b03d      	add	sp, #244	; 0xf4
   1be78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be7c:	ad13      	add	r5, sp, #76	; 0x4c
   1be7e:	ae07      	add	r6, sp, #28
   1be80:	e7e0      	b.n	1be44 <block_cipher_df+0x184>
   1be82:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1be86:	e7f5      	b.n	1be74 <block_cipher_df+0x1b4>
   1be88:	20004a2c 	.word	0x20004a2c
   1be8c:	20004a3c 	.word	0x20004a3c

0001be90 <ctr_drbg_update_internal>:
   1be90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be94:	b08c      	sub	sp, #48	; 0x30
   1be96:	4604      	mov	r4, r0
   1be98:	460d      	mov	r5, r1
   1be9a:	2230      	movs	r2, #48	; 0x30
   1be9c:	2100      	movs	r1, #0
   1be9e:	4668      	mov	r0, sp
   1bea0:	466f      	mov	r7, sp
   1bea2:	f7fb fa99 	bl	173d8 <memset>
   1bea6:	f104 0620 	add.w	r6, r4, #32
   1beaa:	7be2      	ldrb	r2, [r4, #15]
   1beac:	3201      	adds	r2, #1
   1beae:	b2d2      	uxtb	r2, r2
   1beb0:	73e2      	strb	r2, [r4, #15]
   1beb2:	2a00      	cmp	r2, #0
   1beb4:	d14d      	bne.n	1bf52 <ctr_drbg_update_internal+0xc2>
   1beb6:	7ba2      	ldrb	r2, [r4, #14]
   1beb8:	3201      	adds	r2, #1
   1beba:	b2d2      	uxtb	r2, r2
   1bebc:	73a2      	strb	r2, [r4, #14]
   1bebe:	2a00      	cmp	r2, #0
   1bec0:	d147      	bne.n	1bf52 <ctr_drbg_update_internal+0xc2>
   1bec2:	7b63      	ldrb	r3, [r4, #13]
   1bec4:	3301      	adds	r3, #1
   1bec6:	b2db      	uxtb	r3, r3
   1bec8:	7363      	strb	r3, [r4, #13]
   1beca:	2b00      	cmp	r3, #0
   1becc:	d141      	bne.n	1bf52 <ctr_drbg_update_internal+0xc2>
   1bece:	7b23      	ldrb	r3, [r4, #12]
   1bed0:	3301      	adds	r3, #1
   1bed2:	b2db      	uxtb	r3, r3
   1bed4:	7323      	strb	r3, [r4, #12]
   1bed6:	2b00      	cmp	r3, #0
   1bed8:	d13b      	bne.n	1bf52 <ctr_drbg_update_internal+0xc2>
   1beda:	7ae3      	ldrb	r3, [r4, #11]
   1bedc:	3301      	adds	r3, #1
   1bede:	b2db      	uxtb	r3, r3
   1bee0:	72e3      	strb	r3, [r4, #11]
   1bee2:	2b00      	cmp	r3, #0
   1bee4:	d135      	bne.n	1bf52 <ctr_drbg_update_internal+0xc2>
   1bee6:	7aa3      	ldrb	r3, [r4, #10]
   1bee8:	3301      	adds	r3, #1
   1beea:	b2db      	uxtb	r3, r3
   1beec:	72a3      	strb	r3, [r4, #10]
   1beee:	2b00      	cmp	r3, #0
   1bef0:	d12f      	bne.n	1bf52 <ctr_drbg_update_internal+0xc2>
   1bef2:	7a63      	ldrb	r3, [r4, #9]
   1bef4:	3301      	adds	r3, #1
   1bef6:	b2db      	uxtb	r3, r3
   1bef8:	7263      	strb	r3, [r4, #9]
   1befa:	bb53      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1befc:	7a23      	ldrb	r3, [r4, #8]
   1befe:	3301      	adds	r3, #1
   1bf00:	b2db      	uxtb	r3, r3
   1bf02:	7223      	strb	r3, [r4, #8]
   1bf04:	bb2b      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf06:	79e3      	ldrb	r3, [r4, #7]
   1bf08:	3301      	adds	r3, #1
   1bf0a:	b2db      	uxtb	r3, r3
   1bf0c:	71e3      	strb	r3, [r4, #7]
   1bf0e:	bb03      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf10:	79a3      	ldrb	r3, [r4, #6]
   1bf12:	3301      	adds	r3, #1
   1bf14:	b2db      	uxtb	r3, r3
   1bf16:	71a3      	strb	r3, [r4, #6]
   1bf18:	b9db      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf1a:	7963      	ldrb	r3, [r4, #5]
   1bf1c:	3301      	adds	r3, #1
   1bf1e:	b2db      	uxtb	r3, r3
   1bf20:	7163      	strb	r3, [r4, #5]
   1bf22:	b9b3      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf24:	7923      	ldrb	r3, [r4, #4]
   1bf26:	3301      	adds	r3, #1
   1bf28:	b2db      	uxtb	r3, r3
   1bf2a:	7123      	strb	r3, [r4, #4]
   1bf2c:	b98b      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf2e:	78e3      	ldrb	r3, [r4, #3]
   1bf30:	3301      	adds	r3, #1
   1bf32:	b2db      	uxtb	r3, r3
   1bf34:	70e3      	strb	r3, [r4, #3]
   1bf36:	b963      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf38:	78a3      	ldrb	r3, [r4, #2]
   1bf3a:	3301      	adds	r3, #1
   1bf3c:	b2db      	uxtb	r3, r3
   1bf3e:	70a3      	strb	r3, [r4, #2]
   1bf40:	b93b      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf42:	7863      	ldrb	r3, [r4, #1]
   1bf44:	3301      	adds	r3, #1
   1bf46:	b2db      	uxtb	r3, r3
   1bf48:	7063      	strb	r3, [r4, #1]
   1bf4a:	b913      	cbnz	r3, 1bf52 <ctr_drbg_update_internal+0xc2>
   1bf4c:	7823      	ldrb	r3, [r4, #0]
   1bf4e:	3301      	adds	r3, #1
   1bf50:	7023      	strb	r3, [r4, #0]
   1bf52:	463b      	mov	r3, r7
   1bf54:	4622      	mov	r2, r4
   1bf56:	2101      	movs	r1, #1
   1bf58:	4630      	mov	r0, r6
   1bf5a:	f001 f859 	bl	1d010 <cc_mbedtls_aes_crypt_ecb>
   1bf5e:	4680      	mov	r8, r0
   1bf60:	2800      	cmp	r0, #0
   1bf62:	d141      	bne.n	1bfe8 <ctr_drbg_update_internal+0x158>
   1bf64:	3710      	adds	r7, #16
   1bf66:	ab0c      	add	r3, sp, #48	; 0x30
   1bf68:	429f      	cmp	r7, r3
   1bf6a:	d19e      	bne.n	1beaa <ctr_drbg_update_internal+0x1a>
   1bf6c:	9a02      	ldr	r2, [sp, #8]
   1bf6e:	68ab      	ldr	r3, [r5, #8]
   1bf70:	9903      	ldr	r1, [sp, #12]
   1bf72:	4053      	eors	r3, r2
   1bf74:	9302      	str	r3, [sp, #8]
   1bf76:	4630      	mov	r0, r6
   1bf78:	68ee      	ldr	r6, [r5, #12]
   1bf7a:	f8d5 8020 	ldr.w	r8, [r5, #32]
   1bf7e:	404e      	eors	r6, r1
   1bf80:	9603      	str	r6, [sp, #12]
   1bf82:	9904      	ldr	r1, [sp, #16]
   1bf84:	692e      	ldr	r6, [r5, #16]
   1bf86:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
   1bf8a:	404e      	eors	r6, r1
   1bf8c:	9604      	str	r6, [sp, #16]
   1bf8e:	696e      	ldr	r6, [r5, #20]
   1bf90:	9905      	ldr	r1, [sp, #20]
   1bf92:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1bf94:	404e      	eors	r6, r1
   1bf96:	9605      	str	r6, [sp, #20]
   1bf98:	9906      	ldr	r1, [sp, #24]
   1bf9a:	69ae      	ldr	r6, [r5, #24]
   1bf9c:	9b00      	ldr	r3, [sp, #0]
   1bf9e:	404e      	eors	r6, r1
   1bfa0:	9606      	str	r6, [sp, #24]
   1bfa2:	69ee      	ldr	r6, [r5, #28]
   1bfa4:	9907      	ldr	r1, [sp, #28]
   1bfa6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bfaa:	404e      	eors	r6, r1
   1bfac:	9607      	str	r6, [sp, #28]
   1bfae:	9e08      	ldr	r6, [sp, #32]
   1bfb0:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
   1bfb4:	ea88 0806 	eor.w	r8, r8, r6
   1bfb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1bfba:	ea8e 0e06 	eor.w	lr, lr, r6
   1bfbe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1bfc0:	ea8c 0106 	eor.w	r1, ip, r6
   1bfc4:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   1bfc6:	407e      	eors	r6, r7
   1bfc8:	682f      	ldr	r7, [r5, #0]
   1bfca:	407b      	eors	r3, r7
   1bfcc:	9300      	str	r3, [sp, #0]
   1bfce:	686b      	ldr	r3, [r5, #4]
   1bfd0:	9d01      	ldr	r5, [sp, #4]
   1bfd2:	406b      	eors	r3, r5
   1bfd4:	9301      	str	r3, [sp, #4]
   1bfd6:	e9cd 8e08 	strd	r8, lr, [sp, #32]
   1bfda:	e9cd 160a 	strd	r1, r6, [sp, #40]	; 0x28
   1bfde:	4669      	mov	r1, sp
   1bfe0:	f000 fff4 	bl	1cfcc <cc_mbedtls_aes_setkey_enc>
   1bfe4:	4680      	mov	r8, r0
   1bfe6:	b138      	cbz	r0, 1bff8 <ctr_drbg_update_internal+0x168>
   1bfe8:	4668      	mov	r0, sp
   1bfea:	2130      	movs	r1, #48	; 0x30
   1bfec:	f7ff fe5e 	bl	1bcac <mbedtls_platform_zeroize>
   1bff0:	4640      	mov	r0, r8
   1bff2:	b00c      	add	sp, #48	; 0x30
   1bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bff8:	2210      	movs	r2, #16
   1bffa:	4620      	mov	r0, r4
   1bffc:	a908      	add	r1, sp, #32
   1bffe:	f7e4 fda9 	bl	b54 <memcpy>
   1c002:	e7f1      	b.n	1bfe8 <ctr_drbg_update_internal+0x158>

0001c004 <mbedtls_ctr_drbg_reseed_internal>:
   1c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c008:	461d      	mov	r5, r3
   1c00a:	6983      	ldr	r3, [r0, #24]
   1c00c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   1c010:	d852      	bhi.n	1c0b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c012:	4616      	mov	r6, r2
   1c014:	f5c3 72c0 	rsb	r2, r3, #384	; 0x180
   1c018:	42aa      	cmp	r2, r5
   1c01a:	d34d      	bcc.n	1c0b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c01c:	f5c5 72c0 	rsb	r2, r5, #384	; 0x180
   1c020:	1ad3      	subs	r3, r2, r3
   1c022:	42b3      	cmp	r3, r6
   1c024:	d348      	bcc.n	1c0b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c026:	4604      	mov	r4, r0
   1c028:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1c0c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1c02c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1c030:	460f      	mov	r7, r1
   1c032:	4648      	mov	r0, r9
   1c034:	2100      	movs	r1, #0
   1c036:	f7fb f9cf 	bl	173d8 <memset>
   1c03a:	4649      	mov	r1, r9
   1c03c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1c040:	69a2      	ldr	r2, [r4, #24]
   1c042:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1c046:	4798      	blx	r3
   1c048:	2800      	cmp	r0, #0
   1c04a:	d138      	bne.n	1c0be <mbedtls_ctr_drbg_reseed_internal+0xba>
   1c04c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1c050:	b13d      	cbz	r5, 1c062 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1c052:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1c056:	462a      	mov	r2, r5
   1c058:	eb09 0108 	add.w	r1, r9, r8
   1c05c:	4798      	blx	r3
   1c05e:	bb70      	cbnz	r0, 1c0be <mbedtls_ctr_drbg_reseed_internal+0xba>
   1c060:	44a8      	add	r8, r5
   1c062:	b107      	cbz	r7, 1c066 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1c064:	b9c6      	cbnz	r6, 1c098 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1c066:	4917      	ldr	r1, [pc, #92]	; (1c0c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c068:	4642      	mov	r2, r8
   1c06a:	4608      	mov	r0, r1
   1c06c:	f7ff fe28 	bl	1bcc0 <block_cipher_df>
   1c070:	4605      	mov	r5, r0
   1c072:	b138      	cbz	r0, 1c084 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1c074:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1c078:	4812      	ldr	r0, [pc, #72]	; (1c0c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c07a:	f7ff fe17 	bl	1bcac <mbedtls_platform_zeroize>
   1c07e:	4628      	mov	r0, r5
   1c080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c084:	4620      	mov	r0, r4
   1c086:	490f      	ldr	r1, [pc, #60]	; (1c0c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c088:	f7ff ff02 	bl	1be90 <ctr_drbg_update_internal>
   1c08c:	4605      	mov	r5, r0
   1c08e:	2800      	cmp	r0, #0
   1c090:	d1f0      	bne.n	1c074 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1c092:	2301      	movs	r3, #1
   1c094:	6123      	str	r3, [r4, #16]
   1c096:	e7ed      	b.n	1c074 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1c098:	4639      	mov	r1, r7
   1c09a:	4632      	mov	r2, r6
   1c09c:	eb09 0008 	add.w	r0, r9, r8
   1c0a0:	f7e4 fd58 	bl	b54 <memcpy>
   1c0a4:	4907      	ldr	r1, [pc, #28]	; (1c0c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1c0a6:	44b0      	add	r8, r6
   1c0a8:	4642      	mov	r2, r8
   1c0aa:	4608      	mov	r0, r1
   1c0ac:	f7ff fe08 	bl	1bcc0 <block_cipher_df>
   1c0b0:	4605      	mov	r5, r0
   1c0b2:	2800      	cmp	r0, #0
   1c0b4:	d1de      	bne.n	1c074 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1c0b6:	e7e5      	b.n	1c084 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1c0b8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1c0bc:	e7df      	b.n	1c07e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1c0be:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1c0c2:	e7dc      	b.n	1c07e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1c0c4:	20004bcc 	.word	0x20004bcc

0001c0c8 <cc_mbedtls_ctr_drbg_init>:
   1c0c8:	b510      	push	{r4, lr}
   1c0ca:	22a4      	movs	r2, #164	; 0xa4
   1c0cc:	2100      	movs	r1, #0
   1c0ce:	4604      	mov	r4, r0
   1c0d0:	f7fb f982 	bl	173d8 <memset>
   1c0d4:	f04f 31ff 	mov.w	r1, #4294967295
   1c0d8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1c0dc:	4b04      	ldr	r3, [pc, #16]	; (1c0f0 <cc_mbedtls_ctr_drbg_init+0x28>)
   1c0de:	6121      	str	r1, [r4, #16]
   1c0e0:	61e2      	str	r2, [r4, #28]
   1c0e2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1c0e6:	681b      	ldr	r3, [r3, #0]
   1c0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c0ec:	4718      	bx	r3
   1c0ee:	bf00      	nop
   1c0f0:	20000c54 	.word	0x20000c54

0001c0f4 <cc_mbedtls_ctr_drbg_seed>:
   1c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c0f8:	4605      	mov	r5, r0
   1c0fa:	b088      	sub	sp, #32
   1c0fc:	460f      	mov	r7, r1
   1c0fe:	4616      	mov	r6, r2
   1c100:	2100      	movs	r1, #0
   1c102:	2220      	movs	r2, #32
   1c104:	4668      	mov	r0, sp
   1c106:	4698      	mov	r8, r3
   1c108:	f7fb f966 	bl	173d8 <memset>
   1c10c:	4b1f      	ldr	r3, [pc, #124]	; (1c18c <cc_mbedtls_ctr_drbg_seed+0x98>)
   1c10e:	f105 099c 	add.w	r9, r5, #156	; 0x9c
   1c112:	4648      	mov	r0, r9
   1c114:	681b      	ldr	r3, [r3, #0]
   1c116:	4798      	blx	r3
   1c118:	4604      	mov	r4, r0
   1c11a:	b118      	cbz	r0, 1c124 <cc_mbedtls_ctr_drbg_seed+0x30>
   1c11c:	4620      	mov	r0, r4
   1c11e:	b008      	add	sp, #32
   1c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c124:	f105 0a20 	add.w	sl, r5, #32
   1c128:	4650      	mov	r0, sl
   1c12a:	f000 ff39 	bl	1cfa0 <cc_mbedtls_aes_init>
   1c12e:	69aa      	ldr	r2, [r5, #24]
   1c130:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1c134:	b9f2      	cbnz	r2, 1c174 <cc_mbedtls_ctr_drbg_seed+0x80>
   1c136:	2320      	movs	r3, #32
   1c138:	692e      	ldr	r6, [r5, #16]
   1c13a:	61ab      	str	r3, [r5, #24]
   1c13c:	2e00      	cmp	r6, #0
   1c13e:	db22      	blt.n	1c186 <cc_mbedtls_ctr_drbg_seed+0x92>
   1c140:	4669      	mov	r1, sp
   1c142:	4650      	mov	r0, sl
   1c144:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c148:	f000 ff40 	bl	1cfcc <cc_mbedtls_aes_setkey_enc>
   1c14c:	4604      	mov	r4, r0
   1c14e:	b930      	cbnz	r0, 1c15e <cc_mbedtls_ctr_drbg_seed+0x6a>
   1c150:	4633      	mov	r3, r6
   1c152:	4641      	mov	r1, r8
   1c154:	4628      	mov	r0, r5
   1c156:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c158:	f7ff ff54 	bl	1c004 <mbedtls_ctr_drbg_reseed_internal>
   1c15c:	4604      	mov	r4, r0
   1c15e:	4b0c      	ldr	r3, [pc, #48]	; (1c190 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   1c160:	4648      	mov	r0, r9
   1c162:	681b      	ldr	r3, [r3, #0]
   1c164:	4798      	blx	r3
   1c166:	2800      	cmp	r0, #0
   1c168:	bf18      	it	ne
   1c16a:	4604      	movne	r4, r0
   1c16c:	4620      	mov	r0, r4
   1c16e:	b008      	add	sp, #32
   1c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c174:	692e      	ldr	r6, [r5, #16]
   1c176:	2e00      	cmp	r6, #0
   1c178:	dae2      	bge.n	1c140 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1c17a:	2a2f      	cmp	r2, #47	; 0x2f
   1c17c:	bf96      	itet	ls
   1c17e:	3201      	addls	r2, #1
   1c180:	4626      	movhi	r6, r4
   1c182:	0856      	lsrls	r6, r2, #1
   1c184:	e7dc      	b.n	1c140 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1c186:	2610      	movs	r6, #16
   1c188:	e7da      	b.n	1c140 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1c18a:	bf00      	nop
   1c18c:	20000c50 	.word	0x20000c50
   1c190:	20000c4c 	.word	0x20000c4c

0001c194 <cc_mbedtls_ctr_drbg_random_with_add>:
   1c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c198:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1c19c:	b091      	sub	sp, #68	; 0x44
   1c19e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1c1a0:	f200 80e3 	bhi.w	1c36a <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1c1a4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1c1a8:	f200 80dc 	bhi.w	1c364 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1c1ac:	4604      	mov	r4, r0
   1c1ae:	4615      	mov	r5, r2
   1c1b0:	460e      	mov	r6, r1
   1c1b2:	2230      	movs	r2, #48	; 0x30
   1c1b4:	2100      	movs	r1, #0
   1c1b6:	a804      	add	r0, sp, #16
   1c1b8:	4698      	mov	r8, r3
   1c1ba:	f7fb f90d 	bl	173d8 <memset>
   1c1be:	4b6c      	ldr	r3, [pc, #432]	; (1c370 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1c1c0:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1c1c4:	4648      	mov	r0, r9
   1c1c6:	681b      	ldr	r3, [r3, #0]
   1c1c8:	4798      	blx	r3
   1c1ca:	4683      	mov	fp, r0
   1c1cc:	2800      	cmp	r0, #0
   1c1ce:	f040 8092 	bne.w	1c2f6 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1c1d2:	6922      	ldr	r2, [r4, #16]
   1c1d4:	69e3      	ldr	r3, [r4, #28]
   1c1d6:	429a      	cmp	r2, r3
   1c1d8:	f300 8091 	bgt.w	1c2fe <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1c1dc:	6963      	ldr	r3, [r4, #20]
   1c1de:	2b00      	cmp	r3, #0
   1c1e0:	f040 808d 	bne.w	1c2fe <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1c1e4:	2f00      	cmp	r7, #0
   1c1e6:	f040 80a9 	bne.w	1c33c <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1c1ea:	f8df a188 	ldr.w	sl, [pc, #392]	; 1c374 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1c1ee:	466f      	mov	r7, sp
   1c1f0:	2d00      	cmp	r5, #0
   1c1f2:	f000 8098 	beq.w	1c326 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1c1f6:	466f      	mov	r7, sp
   1c1f8:	f104 0820 	add.w	r8, r4, #32
   1c1fc:	e00e      	b.n	1c21c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1c1fe:	2d10      	cmp	r5, #16
   1c200:	46ab      	mov	fp, r5
   1c202:	bf28      	it	cs
   1c204:	f04f 0b10 	movcs.w	fp, #16
   1c208:	4630      	mov	r0, r6
   1c20a:	4639      	mov	r1, r7
   1c20c:	465a      	mov	r2, fp
   1c20e:	f7e4 fca1 	bl	b54 <memcpy>
   1c212:	ebb5 050b 	subs.w	r5, r5, fp
   1c216:	445e      	add	r6, fp
   1c218:	f000 8085 	beq.w	1c326 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1c21c:	7be3      	ldrb	r3, [r4, #15]
   1c21e:	3301      	adds	r3, #1
   1c220:	b2db      	uxtb	r3, r3
   1c222:	73e3      	strb	r3, [r4, #15]
   1c224:	2b00      	cmp	r3, #0
   1c226:	d14d      	bne.n	1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c228:	7ba3      	ldrb	r3, [r4, #14]
   1c22a:	3301      	adds	r3, #1
   1c22c:	b2db      	uxtb	r3, r3
   1c22e:	73a3      	strb	r3, [r4, #14]
   1c230:	2b00      	cmp	r3, #0
   1c232:	d147      	bne.n	1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c234:	7b63      	ldrb	r3, [r4, #13]
   1c236:	3301      	adds	r3, #1
   1c238:	b2db      	uxtb	r3, r3
   1c23a:	7363      	strb	r3, [r4, #13]
   1c23c:	2b00      	cmp	r3, #0
   1c23e:	d141      	bne.n	1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c240:	7b23      	ldrb	r3, [r4, #12]
   1c242:	3301      	adds	r3, #1
   1c244:	b2db      	uxtb	r3, r3
   1c246:	7323      	strb	r3, [r4, #12]
   1c248:	2b00      	cmp	r3, #0
   1c24a:	d13b      	bne.n	1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c24c:	7ae3      	ldrb	r3, [r4, #11]
   1c24e:	3301      	adds	r3, #1
   1c250:	b2db      	uxtb	r3, r3
   1c252:	72e3      	strb	r3, [r4, #11]
   1c254:	2b00      	cmp	r3, #0
   1c256:	d135      	bne.n	1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c258:	7aa3      	ldrb	r3, [r4, #10]
   1c25a:	3301      	adds	r3, #1
   1c25c:	b2db      	uxtb	r3, r3
   1c25e:	72a3      	strb	r3, [r4, #10]
   1c260:	2b00      	cmp	r3, #0
   1c262:	d12f      	bne.n	1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c264:	7a63      	ldrb	r3, [r4, #9]
   1c266:	3301      	adds	r3, #1
   1c268:	b2db      	uxtb	r3, r3
   1c26a:	7263      	strb	r3, [r4, #9]
   1c26c:	bb53      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c26e:	7a23      	ldrb	r3, [r4, #8]
   1c270:	3301      	adds	r3, #1
   1c272:	b2db      	uxtb	r3, r3
   1c274:	7223      	strb	r3, [r4, #8]
   1c276:	bb2b      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c278:	79e3      	ldrb	r3, [r4, #7]
   1c27a:	3301      	adds	r3, #1
   1c27c:	b2db      	uxtb	r3, r3
   1c27e:	71e3      	strb	r3, [r4, #7]
   1c280:	bb03      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c282:	79a3      	ldrb	r3, [r4, #6]
   1c284:	3301      	adds	r3, #1
   1c286:	b2db      	uxtb	r3, r3
   1c288:	71a3      	strb	r3, [r4, #6]
   1c28a:	b9db      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c28c:	7963      	ldrb	r3, [r4, #5]
   1c28e:	3301      	adds	r3, #1
   1c290:	b2db      	uxtb	r3, r3
   1c292:	7163      	strb	r3, [r4, #5]
   1c294:	b9b3      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c296:	7923      	ldrb	r3, [r4, #4]
   1c298:	3301      	adds	r3, #1
   1c29a:	b2db      	uxtb	r3, r3
   1c29c:	7123      	strb	r3, [r4, #4]
   1c29e:	b98b      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c2a0:	78e3      	ldrb	r3, [r4, #3]
   1c2a2:	3301      	adds	r3, #1
   1c2a4:	b2db      	uxtb	r3, r3
   1c2a6:	70e3      	strb	r3, [r4, #3]
   1c2a8:	b963      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c2aa:	78a3      	ldrb	r3, [r4, #2]
   1c2ac:	3301      	adds	r3, #1
   1c2ae:	b2db      	uxtb	r3, r3
   1c2b0:	70a3      	strb	r3, [r4, #2]
   1c2b2:	b93b      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c2b4:	7863      	ldrb	r3, [r4, #1]
   1c2b6:	3301      	adds	r3, #1
   1c2b8:	b2db      	uxtb	r3, r3
   1c2ba:	7063      	strb	r3, [r4, #1]
   1c2bc:	b913      	cbnz	r3, 1c2c4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1c2be:	7823      	ldrb	r3, [r4, #0]
   1c2c0:	3301      	adds	r3, #1
   1c2c2:	7023      	strb	r3, [r4, #0]
   1c2c4:	463b      	mov	r3, r7
   1c2c6:	4622      	mov	r2, r4
   1c2c8:	2101      	movs	r1, #1
   1c2ca:	4640      	mov	r0, r8
   1c2cc:	f000 fea0 	bl	1d010 <cc_mbedtls_aes_crypt_ecb>
   1c2d0:	4683      	mov	fp, r0
   1c2d2:	2800      	cmp	r0, #0
   1c2d4:	d093      	beq.n	1c1fe <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1c2d6:	f8da 3000 	ldr.w	r3, [sl]
   1c2da:	4648      	mov	r0, r9
   1c2dc:	4798      	blx	r3
   1c2de:	4603      	mov	r3, r0
   1c2e0:	2130      	movs	r1, #48	; 0x30
   1c2e2:	a804      	add	r0, sp, #16
   1c2e4:	2b00      	cmp	r3, #0
   1c2e6:	bf18      	it	ne
   1c2e8:	469b      	movne	fp, r3
   1c2ea:	f7ff fcdf 	bl	1bcac <mbedtls_platform_zeroize>
   1c2ee:	2110      	movs	r1, #16
   1c2f0:	4638      	mov	r0, r7
   1c2f2:	f7ff fcdb 	bl	1bcac <mbedtls_platform_zeroize>
   1c2f6:	4658      	mov	r0, fp
   1c2f8:	b011      	add	sp, #68	; 0x44
   1c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2fe:	463a      	mov	r2, r7
   1c300:	4641      	mov	r1, r8
   1c302:	2300      	movs	r3, #0
   1c304:	4620      	mov	r0, r4
   1c306:	f7ff fe7d 	bl	1c004 <mbedtls_ctr_drbg_reseed_internal>
   1c30a:	f8df a068 	ldr.w	sl, [pc, #104]	; 1c374 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1c30e:	2800      	cmp	r0, #0
   1c310:	f43f af6d 	beq.w	1c1ee <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1c314:	4648      	mov	r0, r9
   1c316:	f8da 3000 	ldr.w	r3, [sl]
   1c31a:	4798      	blx	r3
   1c31c:	4683      	mov	fp, r0
   1c31e:	2800      	cmp	r0, #0
   1c320:	f43f af65 	beq.w	1c1ee <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1c324:	e7e7      	b.n	1c2f6 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1c326:	4620      	mov	r0, r4
   1c328:	a904      	add	r1, sp, #16
   1c32a:	f7ff fdb1 	bl	1be90 <ctr_drbg_update_internal>
   1c32e:	4683      	mov	fp, r0
   1c330:	2800      	cmp	r0, #0
   1c332:	d1d0      	bne.n	1c2d6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1c334:	6923      	ldr	r3, [r4, #16]
   1c336:	3301      	adds	r3, #1
   1c338:	6123      	str	r3, [r4, #16]
   1c33a:	e7cc      	b.n	1c2d6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1c33c:	463a      	mov	r2, r7
   1c33e:	4641      	mov	r1, r8
   1c340:	a804      	add	r0, sp, #16
   1c342:	f7ff fcbd 	bl	1bcc0 <block_cipher_df>
   1c346:	4683      	mov	fp, r0
   1c348:	b118      	cbz	r0, 1c352 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1c34a:	466f      	mov	r7, sp
   1c34c:	f8df a024 	ldr.w	sl, [pc, #36]	; 1c374 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1c350:	e7c1      	b.n	1c2d6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1c352:	4620      	mov	r0, r4
   1c354:	a904      	add	r1, sp, #16
   1c356:	f7ff fd9b 	bl	1be90 <ctr_drbg_update_internal>
   1c35a:	4683      	mov	fp, r0
   1c35c:	2800      	cmp	r0, #0
   1c35e:	f43f af44 	beq.w	1c1ea <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1c362:	e7f2      	b.n	1c34a <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1c364:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1c368:	e7c5      	b.n	1c2f6 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1c36a:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1c36e:	e7c2      	b.n	1c2f6 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1c370:	20000c50 	.word	0x20000c50
   1c374:	20000c4c 	.word	0x20000c4c

0001c378 <entropy_update>:
   1c378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c37c:	2b20      	cmp	r3, #32
   1c37e:	461d      	mov	r5, r3
   1c380:	4606      	mov	r6, r0
   1c382:	4688      	mov	r8, r1
   1c384:	4691      	mov	r9, r2
   1c386:	b08b      	sub	sp, #44	; 0x2c
   1c388:	d826      	bhi.n	1c3d8 <entropy_update+0x60>
   1c38a:	b2db      	uxtb	r3, r3
   1c38c:	af02      	add	r7, sp, #8
   1c38e:	f88d 8004 	strb.w	r8, [sp, #4]
   1c392:	46b0      	mov	r8, r6
   1c394:	f858 1b04 	ldr.w	r1, [r8], #4
   1c398:	f88d 3005 	strb.w	r3, [sp, #5]
   1c39c:	b921      	cbnz	r1, 1c3a8 <entropy_update+0x30>
   1c39e:	4640      	mov	r0, r8
   1c3a0:	f000 fe78 	bl	1d094 <cc_mbedtls_sha256_starts>
   1c3a4:	4604      	mov	r4, r0
   1c3a6:	b940      	cbnz	r0, 1c3ba <entropy_update+0x42>
   1c3a8:	2301      	movs	r3, #1
   1c3aa:	2202      	movs	r2, #2
   1c3ac:	4640      	mov	r0, r8
   1c3ae:	6033      	str	r3, [r6, #0]
   1c3b0:	a901      	add	r1, sp, #4
   1c3b2:	f000 fe83 	bl	1d0bc <cc_mbedtls_sha256_update>
   1c3b6:	4604      	mov	r4, r0
   1c3b8:	b138      	cbz	r0, 1c3ca <entropy_update+0x52>
   1c3ba:	4638      	mov	r0, r7
   1c3bc:	2120      	movs	r1, #32
   1c3be:	f7ff fc75 	bl	1bcac <mbedtls_platform_zeroize>
   1c3c2:	4620      	mov	r0, r4
   1c3c4:	b00b      	add	sp, #44	; 0x2c
   1c3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c3ca:	462a      	mov	r2, r5
   1c3cc:	4649      	mov	r1, r9
   1c3ce:	4640      	mov	r0, r8
   1c3d0:	f000 fe74 	bl	1d0bc <cc_mbedtls_sha256_update>
   1c3d4:	4604      	mov	r4, r0
   1c3d6:	e7f0      	b.n	1c3ba <entropy_update+0x42>
   1c3d8:	af02      	add	r7, sp, #8
   1c3da:	4619      	mov	r1, r3
   1c3dc:	4610      	mov	r0, r2
   1c3de:	2300      	movs	r3, #0
   1c3e0:	463a      	mov	r2, r7
   1c3e2:	f000 fff1 	bl	1d3c8 <cc_mbedtls_sha256>
   1c3e6:	4604      	mov	r4, r0
   1c3e8:	2800      	cmp	r0, #0
   1c3ea:	d1e6      	bne.n	1c3ba <entropy_update+0x42>
   1c3ec:	2320      	movs	r3, #32
   1c3ee:	46b9      	mov	r9, r7
   1c3f0:	461d      	mov	r5, r3
   1c3f2:	e7cc      	b.n	1c38e <entropy_update+0x16>

0001c3f4 <entropy_gather_internal.part.0>:
   1c3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3f8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1c3fc:	b0a6      	sub	sp, #152	; 0x98
   1c3fe:	2b00      	cmp	r3, #0
   1c400:	bfd8      	it	le
   1c402:	ae02      	addle	r6, sp, #8
   1c404:	dd31      	ble.n	1c46a <entropy_gather_internal.part.0+0x76>
   1c406:	4605      	mov	r5, r0
   1c408:	2700      	movs	r7, #0
   1c40a:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1c40e:	ae02      	add	r6, sp, #8
   1c410:	f1a4 0801 	sub.w	r8, r4, #1
   1c414:	2290      	movs	r2, #144	; 0x90
   1c416:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1c41a:	4631      	mov	r1, r6
   1c41c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1c420:	ab01      	add	r3, sp, #4
   1c422:	9701      	str	r7, [sp, #4]
   1c424:	fab8 f888 	clz	r8, r8
   1c428:	47a0      	blx	r4
   1c42a:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1c42e:	4604      	mov	r4, r0
   1c430:	b920      	cbnz	r0, 1c43c <entropy_gather_internal.part.0+0x48>
   1c432:	9b01      	ldr	r3, [sp, #4]
   1c434:	b953      	cbnz	r3, 1c44c <entropy_gather_internal.part.0+0x58>
   1c436:	f1b8 0f00 	cmp.w	r8, #0
   1c43a:	d016      	beq.n	1c46a <entropy_gather_internal.part.0+0x76>
   1c43c:	4630      	mov	r0, r6
   1c43e:	2190      	movs	r1, #144	; 0x90
   1c440:	f7ff fc34 	bl	1bcac <mbedtls_platform_zeroize>
   1c444:	4620      	mov	r0, r4
   1c446:	b026      	add	sp, #152	; 0x98
   1c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c44c:	4601      	mov	r1, r0
   1c44e:	4632      	mov	r2, r6
   1c450:	4628      	mov	r0, r5
   1c452:	f7ff ff91 	bl	1c378 <entropy_update>
   1c456:	b958      	cbnz	r0, 1c470 <entropy_gather_internal.part.0+0x7c>
   1c458:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1c45c:	9a01      	ldr	r2, [sp, #4]
   1c45e:	4413      	add	r3, r2
   1c460:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1c464:	f1b8 0f00 	cmp.w	r8, #0
   1c468:	d1e8      	bne.n	1c43c <entropy_gather_internal.part.0+0x48>
   1c46a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1c46e:	e7e5      	b.n	1c43c <entropy_gather_internal.part.0+0x48>
   1c470:	4604      	mov	r4, r0
   1c472:	4620      	mov	r0, r4
   1c474:	b026      	add	sp, #152	; 0x98
   1c476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c47a:	bf00      	nop

0001c47c <cc_mbedtls_entropy_init>:
   1c47c:	b570      	push	{r4, r5, r6, lr}
   1c47e:	2500      	movs	r5, #0
   1c480:	4604      	mov	r4, r0
   1c482:	2214      	movs	r2, #20
   1c484:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1c488:	4629      	mov	r1, r5
   1c48a:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1c48e:	30fc      	adds	r0, #252	; 0xfc
   1c490:	f7fa ffa2 	bl	173d8 <memset>
   1c494:	2208      	movs	r2, #8
   1c496:	4629      	mov	r1, r5
   1c498:	4630      	mov	r0, r6
   1c49a:	f7fa ff9d 	bl	173d8 <memset>
   1c49e:	4b14      	ldr	r3, [pc, #80]	; (1c4f0 <cc_mbedtls_entropy_init+0x74>)
   1c4a0:	4630      	mov	r0, r6
   1c4a2:	681b      	ldr	r3, [r3, #0]
   1c4a4:	4798      	blx	r3
   1c4a6:	4620      	mov	r0, r4
   1c4a8:	f840 5b04 	str.w	r5, [r0], #4
   1c4ac:	f000 fdd8 	bl	1d060 <cc_mbedtls_sha256_init>
   1c4b0:	4b10      	ldr	r3, [pc, #64]	; (1c4f4 <cc_mbedtls_entropy_init+0x78>)
   1c4b2:	4630      	mov	r0, r6
   1c4b4:	681b      	ldr	r3, [r3, #0]
   1c4b6:	4798      	blx	r3
   1c4b8:	b9c8      	cbnz	r0, 1c4ee <cc_mbedtls_entropy_init+0x72>
   1c4ba:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1c4be:	42ab      	cmp	r3, r5
   1c4c0:	dc0f      	bgt.n	1c4e2 <cc_mbedtls_entropy_init+0x66>
   1c4c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1c4c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1c4ca:	2120      	movs	r1, #32
   1c4cc:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1c4d0:	2001      	movs	r0, #1
   1c4d2:	e9c2 1042 	strd	r1, r0, [r2, #264]	; 0x108
   1c4d6:	4908      	ldr	r1, [pc, #32]	; (1c4f8 <cc_mbedtls_entropy_init+0x7c>)
   1c4d8:	3301      	adds	r3, #1
   1c4da:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1c4de:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1c4e2:	4b06      	ldr	r3, [pc, #24]	; (1c4fc <cc_mbedtls_entropy_init+0x80>)
   1c4e4:	4630      	mov	r0, r6
   1c4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c4ea:	681b      	ldr	r3, [r3, #0]
   1c4ec:	4718      	bx	r3
   1c4ee:	bd70      	pop	{r4, r5, r6, pc}
   1c4f0:	20000c54 	.word	0x20000c54
   1c4f4:	20000c50 	.word	0x20000c50
   1c4f8:	0001ce9d 	.word	0x0001ce9d
   1c4fc:	20000c4c 	.word	0x20000c4c

0001c500 <cc_mbedtls_entropy_func>:
   1c500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c504:	2a20      	cmp	r2, #32
   1c506:	b088      	sub	sp, #32
   1c508:	d87a      	bhi.n	1c600 <cc_mbedtls_entropy_func+0x100>
   1c50a:	4b3f      	ldr	r3, [pc, #252]	; (1c608 <cc_mbedtls_entropy_func+0x108>)
   1c50c:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1c510:	4604      	mov	r4, r0
   1c512:	681b      	ldr	r3, [r3, #0]
   1c514:	4648      	mov	r0, r9
   1c516:	4617      	mov	r7, r2
   1c518:	4688      	mov	r8, r1
   1c51a:	4798      	blx	r3
   1c51c:	4605      	mov	r5, r0
   1c51e:	b9f8      	cbnz	r0, 1c560 <cc_mbedtls_entropy_func+0x60>
   1c520:	f240 1601 	movw	r6, #257	; 0x101
   1c524:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1c528:	2b00      	cmp	r3, #0
   1c52a:	d065      	beq.n	1c5f8 <cc_mbedtls_entropy_func+0xf8>
   1c52c:	4620      	mov	r0, r4
   1c52e:	f7ff ff61 	bl	1c3f4 <entropy_gather_internal.part.0>
   1c532:	4605      	mov	r5, r0
   1c534:	b938      	cbnz	r0, 1c546 <cc_mbedtls_entropy_func+0x46>
   1c536:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1c53a:	2b00      	cmp	r3, #0
   1c53c:	dc14      	bgt.n	1c568 <cc_mbedtls_entropy_func+0x68>
   1c53e:	3e01      	subs	r6, #1
   1c540:	d1f2      	bne.n	1c528 <cc_mbedtls_entropy_func+0x28>
   1c542:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1c546:	466e      	mov	r6, sp
   1c548:	2120      	movs	r1, #32
   1c54a:	4630      	mov	r0, r6
   1c54c:	f7ff fbae 	bl	1bcac <mbedtls_platform_zeroize>
   1c550:	4b2e      	ldr	r3, [pc, #184]	; (1c60c <cc_mbedtls_entropy_func+0x10c>)
   1c552:	4648      	mov	r0, r9
   1c554:	681b      	ldr	r3, [r3, #0]
   1c556:	4798      	blx	r3
   1c558:	2800      	cmp	r0, #0
   1c55a:	bf18      	it	ne
   1c55c:	f06f 051d 	mvnne.w	r5, #29
   1c560:	4628      	mov	r0, r5
   1c562:	b008      	add	sp, #32
   1c564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c568:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   1c56c:	4293      	cmp	r3, r2
   1c56e:	d303      	bcc.n	1c578 <cc_mbedtls_entropy_func+0x78>
   1c570:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c574:	2a01      	cmp	r2, #1
   1c576:	d002      	beq.n	1c57e <cc_mbedtls_entropy_func+0x7e>
   1c578:	3e01      	subs	r6, #1
   1c57a:	d1d7      	bne.n	1c52c <cc_mbedtls_entropy_func+0x2c>
   1c57c:	e7e1      	b.n	1c542 <cc_mbedtls_entropy_func+0x42>
   1c57e:	2b1f      	cmp	r3, #31
   1c580:	d9fa      	bls.n	1c578 <cc_mbedtls_entropy_func+0x78>
   1c582:	466e      	mov	r6, sp
   1c584:	4601      	mov	r1, r0
   1c586:	2220      	movs	r2, #32
   1c588:	4630      	mov	r0, r6
   1c58a:	f104 0a04 	add.w	sl, r4, #4
   1c58e:	f7fa ff23 	bl	173d8 <memset>
   1c592:	4631      	mov	r1, r6
   1c594:	4650      	mov	r0, sl
   1c596:	f000 fdbb 	bl	1d110 <cc_mbedtls_sha256_finish>
   1c59a:	4605      	mov	r5, r0
   1c59c:	2800      	cmp	r0, #0
   1c59e:	d1d3      	bne.n	1c548 <cc_mbedtls_entropy_func+0x48>
   1c5a0:	4650      	mov	r0, sl
   1c5a2:	f000 fd71 	bl	1d088 <cc_mbedtls_sha256_free>
   1c5a6:	4650      	mov	r0, sl
   1c5a8:	f000 fd5a 	bl	1d060 <cc_mbedtls_sha256_init>
   1c5ac:	4629      	mov	r1, r5
   1c5ae:	4650      	mov	r0, sl
   1c5b0:	f000 fd70 	bl	1d094 <cc_mbedtls_sha256_starts>
   1c5b4:	4605      	mov	r5, r0
   1c5b6:	2800      	cmp	r0, #0
   1c5b8:	d1c6      	bne.n	1c548 <cc_mbedtls_entropy_func+0x48>
   1c5ba:	4650      	mov	r0, sl
   1c5bc:	2220      	movs	r2, #32
   1c5be:	4631      	mov	r1, r6
   1c5c0:	f000 fd7c 	bl	1d0bc <cc_mbedtls_sha256_update>
   1c5c4:	4605      	mov	r5, r0
   1c5c6:	2800      	cmp	r0, #0
   1c5c8:	d1be      	bne.n	1c548 <cc_mbedtls_entropy_func+0x48>
   1c5ca:	4603      	mov	r3, r0
   1c5cc:	4632      	mov	r2, r6
   1c5ce:	2120      	movs	r1, #32
   1c5d0:	4630      	mov	r0, r6
   1c5d2:	f000 fef9 	bl	1d3c8 <cc_mbedtls_sha256>
   1c5d6:	4605      	mov	r5, r0
   1c5d8:	2800      	cmp	r0, #0
   1c5da:	d1b5      	bne.n	1c548 <cc_mbedtls_entropy_func+0x48>
   1c5dc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1c5e0:	463a      	mov	r2, r7
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	bfc8      	it	gt
   1c5e6:	2300      	movgt	r3, #0
   1c5e8:	4640      	mov	r0, r8
   1c5ea:	4631      	mov	r1, r6
   1c5ec:	bfc8      	it	gt
   1c5ee:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1c5f2:	f7e4 faaf 	bl	b54 <memcpy>
   1c5f6:	e7a7      	b.n	1c548 <cc_mbedtls_entropy_func+0x48>
   1c5f8:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1c5fc:	466e      	mov	r6, sp
   1c5fe:	e7a3      	b.n	1c548 <cc_mbedtls_entropy_func+0x48>
   1c600:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1c604:	e7ac      	b.n	1c560 <cc_mbedtls_entropy_func+0x60>
   1c606:	bf00      	nop
   1c608:	20000c50 	.word	0x20000c50
   1c60c:	20000c4c 	.word	0x20000c4c

0001c610 <RndStartupTest.constprop.0>:
   1c610:	2100      	movs	r1, #0
   1c612:	b530      	push	{r4, r5, lr}
   1c614:	b08d      	sub	sp, #52	; 0x34
   1c616:	2228      	movs	r2, #40	; 0x28
   1c618:	a802      	add	r0, sp, #8
   1c61a:	9101      	str	r1, [sp, #4]
   1c61c:	f7fa fedc 	bl	173d8 <memset>
   1c620:	a802      	add	r0, sp, #8
   1c622:	f000 fef9 	bl	1d418 <RNG_PLAT_SetUserRngParameters>
   1c626:	4604      	mov	r4, r0
   1c628:	b110      	cbz	r0, 1c630 <RndStartupTest.constprop.0+0x20>
   1c62a:	4620      	mov	r0, r4
   1c62c:	b00d      	add	sp, #52	; 0x34
   1c62e:	bd30      	pop	{r4, r5, pc}
   1c630:	4d1b      	ldr	r5, [pc, #108]	; (1c6a0 <RndStartupTest.constprop.0+0x90>)
   1c632:	f04f 31ff 	mov.w	r1, #4294967295
   1c636:	6828      	ldr	r0, [r5, #0]
   1c638:	f000 f934 	bl	1c8a4 <CC_PalMutexLock>
   1c63c:	bb60      	cbnz	r0, 1c698 <RndStartupTest.constprop.0+0x88>
   1c63e:	4b19      	ldr	r3, [pc, #100]	; (1c6a4 <RndStartupTest.constprop.0+0x94>)
   1c640:	f8d3 0e34 	ldr.w	r0, [r3, #3636]	; 0xe34
   1c644:	f010 0001 	ands.w	r0, r0, #1
   1c648:	d117      	bne.n	1c67a <RndStartupTest.constprop.0+0x6a>
   1c64a:	f000 f95b 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1c64e:	b9f8      	cbnz	r0, 1c690 <RndStartupTest.constprop.0+0x80>
   1c650:	4a15      	ldr	r2, [pc, #84]	; (1c6a8 <RndStartupTest.constprop.0+0x98>)
   1c652:	a902      	add	r1, sp, #8
   1c654:	a801      	add	r0, sp, #4
   1c656:	f000 fc13 	bl	1ce80 <LLF_RND_RunTrngStartupTest>
   1c65a:	4604      	mov	r4, r0
   1c65c:	2001      	movs	r0, #1
   1c65e:	f000 f951 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1c662:	b988      	cbnz	r0, 1c688 <RndStartupTest.constprop.0+0x78>
   1c664:	6828      	ldr	r0, [r5, #0]
   1c666:	f000 f925 	bl	1c8b4 <CC_PalMutexUnlock>
   1c66a:	2800      	cmp	r0, #0
   1c66c:	d0dd      	beq.n	1c62a <RndStartupTest.constprop.0+0x1a>
   1c66e:	480f      	ldr	r0, [pc, #60]	; (1c6ac <RndStartupTest.constprop.0+0x9c>)
   1c670:	f7ff f9f0 	bl	1ba54 <CC_PalAbort>
   1c674:	4620      	mov	r0, r4
   1c676:	b00d      	add	sp, #52	; 0x34
   1c678:	bd30      	pop	{r4, r5, pc}
   1c67a:	6828      	ldr	r0, [r5, #0]
   1c67c:	2405      	movs	r4, #5
   1c67e:	f000 f919 	bl	1c8b4 <CC_PalMutexUnlock>
   1c682:	2800      	cmp	r0, #0
   1c684:	d0d1      	beq.n	1c62a <RndStartupTest.constprop.0+0x1a>
   1c686:	e7f2      	b.n	1c66e <RndStartupTest.constprop.0+0x5e>
   1c688:	4809      	ldr	r0, [pc, #36]	; (1c6b0 <RndStartupTest.constprop.0+0xa0>)
   1c68a:	f7ff f9e3 	bl	1ba54 <CC_PalAbort>
   1c68e:	e7e9      	b.n	1c664 <RndStartupTest.constprop.0+0x54>
   1c690:	4808      	ldr	r0, [pc, #32]	; (1c6b4 <RndStartupTest.constprop.0+0xa4>)
   1c692:	f7ff f9df 	bl	1ba54 <CC_PalAbort>
   1c696:	e7db      	b.n	1c650 <RndStartupTest.constprop.0+0x40>
   1c698:	4807      	ldr	r0, [pc, #28]	; (1c6b8 <RndStartupTest.constprop.0+0xa8>)
   1c69a:	f7ff f9db 	bl	1ba54 <CC_PalAbort>
   1c69e:	e7ce      	b.n	1c63e <RndStartupTest.constprop.0+0x2e>
   1c6a0:	20000c38 	.word	0x20000c38
   1c6a4:	50846000 	.word	0x50846000
   1c6a8:	20004d4c 	.word	0x20004d4c
   1c6ac:	0003156c 	.word	0x0003156c
   1c6b0:	0003154c 	.word	0x0003154c
   1c6b4:	0003152c 	.word	0x0003152c
   1c6b8:	00031514 	.word	0x00031514

0001c6bc <CC_LibInit>:
   1c6bc:	b530      	push	{r4, r5, lr}
   1c6be:	b083      	sub	sp, #12
   1c6c0:	f000 f836 	bl	1c730 <CC_HalInit>
   1c6c4:	b978      	cbnz	r0, 1c6e6 <CC_LibInit+0x2a>
   1c6c6:	f000 f855 	bl	1c774 <CC_PalInit>
   1c6ca:	b990      	cbnz	r0, 1c6f2 <CC_LibInit+0x36>
   1c6cc:	4b14      	ldr	r3, [pc, #80]	; (1c720 <CC_LibInit+0x64>)
   1c6ce:	f8c3 0a0c 	str.w	r0, [r3, #2572]	; 0xa0c
   1c6d2:	f7ff ff9d 	bl	1c610 <RndStartupTest.constprop.0>
   1c6d6:	4604      	mov	r4, r0
   1c6d8:	b9f8      	cbnz	r0, 1c71a <CC_LibInit+0x5e>
   1c6da:	4d12      	ldr	r5, [pc, #72]	; (1c724 <CC_LibInit+0x68>)
   1c6dc:	682b      	ldr	r3, [r5, #0]
   1c6de:	b163      	cbz	r3, 1c6fa <CC_LibInit+0x3e>
   1c6e0:	4620      	mov	r0, r4
   1c6e2:	b003      	add	sp, #12
   1c6e4:	bd30      	pop	{r4, r5, pc}
   1c6e6:	2403      	movs	r4, #3
   1c6e8:	f000 f872 	bl	1c7d0 <CC_PalTerminate>
   1c6ec:	4620      	mov	r0, r4
   1c6ee:	b003      	add	sp, #12
   1c6f0:	bd30      	pop	{r4, r5, pc}
   1c6f2:	2404      	movs	r4, #4
   1c6f4:	4620      	mov	r0, r4
   1c6f6:	b003      	add	sp, #12
   1c6f8:	bd30      	pop	{r4, r5, pc}
   1c6fa:	4602      	mov	r2, r0
   1c6fc:	4601      	mov	r1, r0
   1c6fe:	f7ff f9d3 	bl	1baa8 <nrf_cc3xx_platform_ctr_drbg_init>
   1c702:	b950      	cbnz	r0, 1c71a <CC_LibInit+0x5e>
   1c704:	2268      	movs	r2, #104	; 0x68
   1c706:	4908      	ldr	r1, [pc, #32]	; (1c728 <CC_LibInit+0x6c>)
   1c708:	ab01      	add	r3, sp, #4
   1c70a:	f7ff f9fd 	bl	1bb08 <nrf_cc3xx_platform_ctr_drbg_get>
   1c70e:	b920      	cbnz	r0, 1c71a <CC_LibInit+0x5e>
   1c710:	4620      	mov	r0, r4
   1c712:	4b06      	ldr	r3, [pc, #24]	; (1c72c <CC_LibInit+0x70>)
   1c714:	602b      	str	r3, [r5, #0]
   1c716:	b003      	add	sp, #12
   1c718:	bd30      	pop	{r4, r5, pc}
   1c71a:	2405      	movs	r4, #5
   1c71c:	e7e0      	b.n	1c6e0 <CC_LibInit+0x24>
   1c71e:	bf00      	nop
   1c720:	50845000 	.word	0x50845000
   1c724:	20004f6c 	.word	0x20004f6c
   1c728:	20004f70 	.word	0x20004f70
   1c72c:	5a5aea5a 	.word	0x5a5aea5a

0001c730 <CC_HalInit>:
   1c730:	2000      	movs	r0, #0
   1c732:	4770      	bx	lr

0001c734 <CC_HalClearInterruptBit>:
   1c734:	0543      	lsls	r3, r0, #21
   1c736:	d504      	bpl.n	1c742 <CC_HalClearInterruptBit+0xe>
   1c738:	f04f 32ff 	mov.w	r2, #4294967295
   1c73c:	4b03      	ldr	r3, [pc, #12]	; (1c74c <CC_HalClearInterruptBit+0x18>)
   1c73e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1c742:	4b02      	ldr	r3, [pc, #8]	; (1c74c <CC_HalClearInterruptBit+0x18>)
   1c744:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   1c748:	4770      	bx	lr
   1c74a:	bf00      	nop
   1c74c:	50845000 	.word	0x50845000

0001c750 <CC_HalMaskInterrupt>:
   1c750:	4b01      	ldr	r3, [pc, #4]	; (1c758 <CC_HalMaskInterrupt+0x8>)
   1c752:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1c756:	4770      	bx	lr
   1c758:	50845000 	.word	0x50845000

0001c75c <CC_HalWaitInterrupt>:
   1c75c:	b108      	cbz	r0, 1c762 <CC_HalWaitInterrupt+0x6>
   1c75e:	f000 b871 	b.w	1c844 <CC_PalWaitInterrupt>
   1c762:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1c766:	4770      	bx	lr

0001c768 <CC_HalWaitInterruptRND>:
   1c768:	b108      	cbz	r0, 1c76e <CC_HalWaitInterruptRND+0x6>
   1c76a:	f000 b84f 	b.w	1c80c <CC_PalWaitInterruptRND>
   1c76e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1c772:	4770      	bx	lr

0001c774 <CC_PalInit>:
   1c774:	b510      	push	{r4, lr}
   1c776:	4811      	ldr	r0, [pc, #68]	; (1c7bc <CC_PalInit+0x48>)
   1c778:	f000 f880 	bl	1c87c <CC_PalMutexCreate>
   1c77c:	b100      	cbz	r0, 1c780 <CC_PalInit+0xc>
   1c77e:	bd10      	pop	{r4, pc}
   1c780:	480f      	ldr	r0, [pc, #60]	; (1c7c0 <CC_PalInit+0x4c>)
   1c782:	f000 f87b 	bl	1c87c <CC_PalMutexCreate>
   1c786:	2800      	cmp	r0, #0
   1c788:	d1f9      	bne.n	1c77e <CC_PalInit+0xa>
   1c78a:	4c0e      	ldr	r4, [pc, #56]	; (1c7c4 <CC_PalInit+0x50>)
   1c78c:	4620      	mov	r0, r4
   1c78e:	f000 f875 	bl	1c87c <CC_PalMutexCreate>
   1c792:	2800      	cmp	r0, #0
   1c794:	d1f3      	bne.n	1c77e <CC_PalInit+0xa>
   1c796:	4b0c      	ldr	r3, [pc, #48]	; (1c7c8 <CC_PalInit+0x54>)
   1c798:	480c      	ldr	r0, [pc, #48]	; (1c7cc <CC_PalInit+0x58>)
   1c79a:	601c      	str	r4, [r3, #0]
   1c79c:	f000 f86e 	bl	1c87c <CC_PalMutexCreate>
   1c7a0:	4601      	mov	r1, r0
   1c7a2:	2800      	cmp	r0, #0
   1c7a4:	d1eb      	bne.n	1c77e <CC_PalInit+0xa>
   1c7a6:	f000 f82d 	bl	1c804 <CC_PalDmaInit>
   1c7aa:	4604      	mov	r4, r0
   1c7ac:	b108      	cbz	r0, 1c7b2 <CC_PalInit+0x3e>
   1c7ae:	4620      	mov	r0, r4
   1c7b0:	bd10      	pop	{r4, pc}
   1c7b2:	f000 f889 	bl	1c8c8 <CC_PalPowerSaveModeInit>
   1c7b6:	4620      	mov	r0, r4
   1c7b8:	e7fa      	b.n	1c7b0 <CC_PalInit+0x3c>
   1c7ba:	bf00      	nop
   1c7bc:	20000c48 	.word	0x20000c48
   1c7c0:	20000c44 	.word	0x20000c44
   1c7c4:	20000c40 	.word	0x20000c40
   1c7c8:	20000c38 	.word	0x20000c38
   1c7cc:	20000c3c 	.word	0x20000c3c

0001c7d0 <CC_PalTerminate>:
   1c7d0:	b508      	push	{r3, lr}
   1c7d2:	4808      	ldr	r0, [pc, #32]	; (1c7f4 <CC_PalTerminate+0x24>)
   1c7d4:	f000 f85c 	bl	1c890 <CC_PalMutexDestroy>
   1c7d8:	4807      	ldr	r0, [pc, #28]	; (1c7f8 <CC_PalTerminate+0x28>)
   1c7da:	f000 f859 	bl	1c890 <CC_PalMutexDestroy>
   1c7de:	4807      	ldr	r0, [pc, #28]	; (1c7fc <CC_PalTerminate+0x2c>)
   1c7e0:	f000 f856 	bl	1c890 <CC_PalMutexDestroy>
   1c7e4:	4806      	ldr	r0, [pc, #24]	; (1c800 <CC_PalTerminate+0x30>)
   1c7e6:	f000 f853 	bl	1c890 <CC_PalMutexDestroy>
   1c7ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c7ee:	f000 b80b 	b.w	1c808 <CC_PalDmaTerminate>
   1c7f2:	bf00      	nop
   1c7f4:	20000c48 	.word	0x20000c48
   1c7f8:	20000c44 	.word	0x20000c44
   1c7fc:	20000c40 	.word	0x20000c40
   1c800:	20000c3c 	.word	0x20000c3c

0001c804 <CC_PalDmaInit>:
   1c804:	2000      	movs	r0, #0
   1c806:	4770      	bx	lr

0001c808 <CC_PalDmaTerminate>:
   1c808:	4770      	bx	lr
   1c80a:	bf00      	nop

0001c80c <CC_PalWaitInterruptRND>:
   1c80c:	b410      	push	{r4}
   1c80e:	4602      	mov	r2, r0
   1c810:	4c0b      	ldr	r4, [pc, #44]	; (1c840 <CC_PalWaitInterruptRND+0x34>)
   1c812:	e001      	b.n	1c818 <CC_PalWaitInterruptRND+0xc>
   1c814:	4213      	tst	r3, r2
   1c816:	d107      	bne.n	1c828 <CC_PalWaitInterruptRND+0x1c>
   1c818:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1c81c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   1c820:	d0f8      	beq.n	1c814 <CC_PalWaitInterruptRND+0x8>
   1c822:	2001      	movs	r0, #1
   1c824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1c828:	b129      	cbz	r1, 1c836 <CC_PalWaitInterruptRND+0x2a>
   1c82a:	4b05      	ldr	r3, [pc, #20]	; (1c840 <CC_PalWaitInterruptRND+0x34>)
   1c82c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
   1c830:	600c      	str	r4, [r1, #0]
   1c832:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1c836:	4b02      	ldr	r3, [pc, #8]	; (1c840 <CC_PalWaitInterruptRND+0x34>)
   1c838:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1c83c:	bc10      	pop	{r4}
   1c83e:	4770      	bx	lr
   1c840:	50845000 	.word	0x50845000

0001c844 <CC_PalWaitInterrupt>:
   1c844:	4602      	mov	r2, r0
   1c846:	4908      	ldr	r1, [pc, #32]	; (1c868 <CC_PalWaitInterrupt+0x24>)
   1c848:	e001      	b.n	1c84e <CC_PalWaitInterrupt+0xa>
   1c84a:	421a      	tst	r2, r3
   1c84c:	d107      	bne.n	1c85e <CC_PalWaitInterrupt+0x1a>
   1c84e:	f8d1 3a00 	ldr.w	r3, [r1, #2560]	; 0xa00
   1c852:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   1c856:	d0f8      	beq.n	1c84a <CC_PalWaitInterrupt+0x6>
   1c858:	2001      	movs	r0, #1
   1c85a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1c85e:	4b02      	ldr	r3, [pc, #8]	; (1c868 <CC_PalWaitInterrupt+0x24>)
   1c860:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1c864:	4770      	bx	lr
   1c866:	bf00      	nop
   1c868:	50845000 	.word	0x50845000

0001c86c <CC_PalMemCopyPlat>:
   1c86c:	f7fa bd34 	b.w	172d8 <memmove>

0001c870 <CC_PalMemSetPlat>:
   1c870:	f7fa bdb2 	b.w	173d8 <memset>

0001c874 <CC_PalMemSetZeroPlat>:
   1c874:	460a      	mov	r2, r1
   1c876:	2100      	movs	r1, #0
   1c878:	f7fa bdae 	b.w	173d8 <memset>

0001c87c <CC_PalMutexCreate>:
   1c87c:	b508      	push	{r3, lr}
   1c87e:	4b03      	ldr	r3, [pc, #12]	; (1c88c <CC_PalMutexCreate+0x10>)
   1c880:	6802      	ldr	r2, [r0, #0]
   1c882:	681b      	ldr	r3, [r3, #0]
   1c884:	6810      	ldr	r0, [r2, #0]
   1c886:	4798      	blx	r3
   1c888:	2000      	movs	r0, #0
   1c88a:	bd08      	pop	{r3, pc}
   1c88c:	20000c04 	.word	0x20000c04

0001c890 <CC_PalMutexDestroy>:
   1c890:	b508      	push	{r3, lr}
   1c892:	4b03      	ldr	r3, [pc, #12]	; (1c8a0 <CC_PalMutexDestroy+0x10>)
   1c894:	6802      	ldr	r2, [r0, #0]
   1c896:	685b      	ldr	r3, [r3, #4]
   1c898:	6810      	ldr	r0, [r2, #0]
   1c89a:	4798      	blx	r3
   1c89c:	2000      	movs	r0, #0
   1c89e:	bd08      	pop	{r3, pc}
   1c8a0:	20000c04 	.word	0x20000c04

0001c8a4 <CC_PalMutexLock>:
   1c8a4:	4b02      	ldr	r3, [pc, #8]	; (1c8b0 <CC_PalMutexLock+0xc>)
   1c8a6:	6802      	ldr	r2, [r0, #0]
   1c8a8:	689b      	ldr	r3, [r3, #8]
   1c8aa:	6810      	ldr	r0, [r2, #0]
   1c8ac:	4718      	bx	r3
   1c8ae:	bf00      	nop
   1c8b0:	20000c04 	.word	0x20000c04

0001c8b4 <CC_PalMutexUnlock>:
   1c8b4:	b508      	push	{r3, lr}
   1c8b6:	4b03      	ldr	r3, [pc, #12]	; (1c8c4 <CC_PalMutexUnlock+0x10>)
   1c8b8:	6802      	ldr	r2, [r0, #0]
   1c8ba:	68db      	ldr	r3, [r3, #12]
   1c8bc:	6810      	ldr	r0, [r2, #0]
   1c8be:	4798      	blx	r3
   1c8c0:	2000      	movs	r0, #0
   1c8c2:	bd08      	pop	{r3, pc}
   1c8c4:	20000c04 	.word	0x20000c04

0001c8c8 <CC_PalPowerSaveModeInit>:
   1c8c8:	b570      	push	{r4, r5, r6, lr}
   1c8ca:	4c09      	ldr	r4, [pc, #36]	; (1c8f0 <CC_PalPowerSaveModeInit+0x28>)
   1c8cc:	4d09      	ldr	r5, [pc, #36]	; (1c8f4 <CC_PalPowerSaveModeInit+0x2c>)
   1c8ce:	6920      	ldr	r0, [r4, #16]
   1c8d0:	68ab      	ldr	r3, [r5, #8]
   1c8d2:	4798      	blx	r3
   1c8d4:	b118      	cbz	r0, 1c8de <CC_PalPowerSaveModeInit+0x16>
   1c8d6:	4b08      	ldr	r3, [pc, #32]	; (1c8f8 <CC_PalPowerSaveModeInit+0x30>)
   1c8d8:	4808      	ldr	r0, [pc, #32]	; (1c8fc <CC_PalPowerSaveModeInit+0x34>)
   1c8da:	685b      	ldr	r3, [r3, #4]
   1c8dc:	4798      	blx	r3
   1c8de:	2100      	movs	r1, #0
   1c8e0:	4a07      	ldr	r2, [pc, #28]	; (1c900 <CC_PalPowerSaveModeInit+0x38>)
   1c8e2:	68eb      	ldr	r3, [r5, #12]
   1c8e4:	6011      	str	r1, [r2, #0]
   1c8e6:	6920      	ldr	r0, [r4, #16]
   1c8e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c8ec:	4718      	bx	r3
   1c8ee:	bf00      	nop
   1c8f0:	20000bf0 	.word	0x20000bf0
   1c8f4:	20000c04 	.word	0x20000c04
   1c8f8:	20000be8 	.word	0x20000be8
   1c8fc:	00031584 	.word	0x00031584
   1c900:	20004fd8 	.word	0x20004fd8

0001c904 <CC_PalPowerSaveModeSelect>:
   1c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c906:	4d1a      	ldr	r5, [pc, #104]	; (1c970 <CC_PalPowerSaveModeSelect+0x6c>)
   1c908:	4e1a      	ldr	r6, [pc, #104]	; (1c974 <CC_PalPowerSaveModeSelect+0x70>)
   1c90a:	4604      	mov	r4, r0
   1c90c:	68b2      	ldr	r2, [r6, #8]
   1c90e:	6928      	ldr	r0, [r5, #16]
   1c910:	4790      	blx	r2
   1c912:	b9e8      	cbnz	r0, 1c950 <CC_PalPowerSaveModeSelect+0x4c>
   1c914:	4f18      	ldr	r7, [pc, #96]	; (1c978 <CC_PalPowerSaveModeSelect+0x74>)
   1c916:	683b      	ldr	r3, [r7, #0]
   1c918:	b14c      	cbz	r4, 1c92e <CC_PalPowerSaveModeSelect+0x2a>
   1c91a:	b1a3      	cbz	r3, 1c946 <CC_PalPowerSaveModeSelect+0x42>
   1c91c:	2b01      	cmp	r3, #1
   1c91e:	d019      	beq.n	1c954 <CC_PalPowerSaveModeSelect+0x50>
   1c920:	3b01      	subs	r3, #1
   1c922:	603b      	str	r3, [r7, #0]
   1c924:	6928      	ldr	r0, [r5, #16]
   1c926:	68f3      	ldr	r3, [r6, #12]
   1c928:	4798      	blx	r3
   1c92a:	2000      	movs	r0, #0
   1c92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c92e:	b943      	cbnz	r3, 1c942 <CC_PalPowerSaveModeSelect+0x3e>
   1c930:	2101      	movs	r1, #1
   1c932:	4a12      	ldr	r2, [pc, #72]	; (1c97c <CC_PalPowerSaveModeSelect+0x78>)
   1c934:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1c938:	4911      	ldr	r1, [pc, #68]	; (1c980 <CC_PalPowerSaveModeSelect+0x7c>)
   1c93a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   1c93e:	2a00      	cmp	r2, #0
   1c940:	d1fb      	bne.n	1c93a <CC_PalPowerSaveModeSelect+0x36>
   1c942:	3301      	adds	r3, #1
   1c944:	603b      	str	r3, [r7, #0]
   1c946:	68f3      	ldr	r3, [r6, #12]
   1c948:	6928      	ldr	r0, [r5, #16]
   1c94a:	4798      	blx	r3
   1c94c:	2000      	movs	r0, #0
   1c94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c950:	480c      	ldr	r0, [pc, #48]	; (1c984 <CC_PalPowerSaveModeSelect+0x80>)
   1c952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c954:	4a0a      	ldr	r2, [pc, #40]	; (1c980 <CC_PalPowerSaveModeSelect+0x7c>)
   1c956:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1c95a:	2b00      	cmp	r3, #0
   1c95c:	d1fb      	bne.n	1c956 <CC_PalPowerSaveModeSelect+0x52>
   1c95e:	4a07      	ldr	r2, [pc, #28]	; (1c97c <CC_PalPowerSaveModeSelect+0x78>)
   1c960:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1c964:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1c968:	f7ff fef2 	bl	1c750 <CC_HalMaskInterrupt>
   1c96c:	683b      	ldr	r3, [r7, #0]
   1c96e:	e7d7      	b.n	1c920 <CC_PalPowerSaveModeSelect+0x1c>
   1c970:	20000bf0 	.word	0x20000bf0
   1c974:	20000c04 	.word	0x20000c04
   1c978:	20004fd8 	.word	0x20004fd8
   1c97c:	50844000 	.word	0x50844000
   1c980:	50845000 	.word	0x50845000
   1c984:	ffff8fe9 	.word	0xffff8fe9

0001c988 <mutex_init>:
   1c988:	4b01      	ldr	r3, [pc, #4]	; (1c990 <mutex_init+0x8>)
   1c98a:	681b      	ldr	r3, [r3, #0]
   1c98c:	4718      	bx	r3
   1c98e:	bf00      	nop
   1c990:	20000c04 	.word	0x20000c04

0001c994 <mutex_lock>:
   1c994:	4b01      	ldr	r3, [pc, #4]	; (1c99c <mutex_lock+0x8>)
   1c996:	689b      	ldr	r3, [r3, #8]
   1c998:	4718      	bx	r3
   1c99a:	bf00      	nop
   1c99c:	20000c04 	.word	0x20000c04

0001c9a0 <mutex_unlock>:
   1c9a0:	4b01      	ldr	r3, [pc, #4]	; (1c9a8 <mutex_unlock+0x8>)
   1c9a2:	68db      	ldr	r3, [r3, #12]
   1c9a4:	4718      	bx	r3
   1c9a6:	bf00      	nop
   1c9a8:	20000c04 	.word	0x20000c04

0001c9ac <startTrngHW>:
   1c9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9b0:	2800      	cmp	r0, #0
   1c9b2:	d073      	beq.n	1ca9c <startTrngHW+0xf0>
   1c9b4:	460c      	mov	r4, r1
   1c9b6:	2900      	cmp	r1, #0
   1c9b8:	d070      	beq.n	1ca9c <startTrngHW+0xf0>
   1c9ba:	461d      	mov	r5, r3
   1c9bc:	2b00      	cmp	r3, #0
   1c9be:	d06d      	beq.n	1ca9c <startTrngHW+0xf0>
   1c9c0:	4607      	mov	r7, r0
   1c9c2:	b11a      	cbz	r2, 1c9cc <startTrngHW+0x20>
   1c9c4:	2201      	movs	r2, #1
   1c9c6:	2300      	movs	r3, #0
   1c9c8:	602a      	str	r2, [r5, #0]
   1c9ca:	6003      	str	r3, [r0, #0]
   1c9cc:	682b      	ldr	r3, [r5, #0]
   1c9ce:	2b00      	cmp	r3, #0
   1c9d0:	d05f      	beq.n	1ca92 <startTrngHW+0xe6>
   1c9d2:	4629      	mov	r1, r5
   1c9d4:	4620      	mov	r0, r4
   1c9d6:	f000 fdd9 	bl	1d58c <LLF_RND_GetFastestRosc>
   1c9da:	4680      	mov	r8, r0
   1c9dc:	2800      	cmp	r0, #0
   1c9de:	d15a      	bne.n	1ca96 <startTrngHW+0xea>
   1c9e0:	4621      	mov	r1, r4
   1c9e2:	6828      	ldr	r0, [r5, #0]
   1c9e4:	f000 fdb8 	bl	1d558 <LLF_RND_GetRoscSampleCnt>
   1c9e8:	4680      	mov	r8, r0
   1c9ea:	2800      	cmp	r0, #0
   1c9ec:	d153      	bne.n	1ca96 <startTrngHW+0xea>
   1c9ee:	6828      	ldr	r0, [r5, #0]
   1c9f0:	2808      	cmp	r0, #8
   1c9f2:	d067      	beq.n	1cac4 <startTrngHW+0x118>
   1c9f4:	2804      	cmp	r0, #4
   1c9f6:	d067      	beq.n	1cac8 <startTrngHW+0x11c>
   1c9f8:	f1a0 0002 	sub.w	r0, r0, #2
   1c9fc:	fab0 f080 	clz	r0, r0
   1ca00:	0940      	lsrs	r0, r0, #5
   1ca02:	2101      	movs	r1, #1
   1ca04:	4e31      	ldr	r6, [pc, #196]	; (1cacc <startTrngHW+0x120>)
   1ca06:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   1ca0a:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   1ca0e:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   1ca12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca14:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   1ca18:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   1ca1c:	4293      	cmp	r3, r2
   1ca1e:	d1f6      	bne.n	1ca0e <startTrngHW+0x62>
   1ca20:	2300      	movs	r3, #0
   1ca22:	f8c6 312c 	str.w	r3, [r6, #300]	; 0x12c
   1ca26:	f04f 33ff 	mov.w	r3, #4294967295
   1ca2a:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   1ca2e:	f06f 031b 	mvn.w	r3, #27
   1ca32:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   1ca36:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
   1ca3a:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1ca3e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1ca42:	f7ff fe85 	bl	1c750 <CC_HalMaskInterrupt>
   1ca46:	230a      	movs	r3, #10
   1ca48:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   1ca4c:	9b06      	ldr	r3, [sp, #24]
   1ca4e:	2b01      	cmp	r3, #1
   1ca50:	d029      	beq.n	1caa6 <startTrngHW+0xfa>
   1ca52:	6923      	ldr	r3, [r4, #16]
   1ca54:	4a1e      	ldr	r2, [pc, #120]	; (1cad0 <startTrngHW+0x124>)
   1ca56:	fba2 2303 	umull	r2, r3, r2, r3
   1ca5a:	091b      	lsrs	r3, r3, #4
   1ca5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ca5e:	4640      	mov	r0, r8
   1ca60:	fb02 f303 	mul.w	r3, r2, r3
   1ca64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ca68:	4a18      	ldr	r2, [pc, #96]	; (1cacc <startTrngHW+0x120>)
   1ca6a:	03db      	lsls	r3, r3, #15
   1ca6c:	099b      	lsrs	r3, r3, #6
   1ca6e:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   1ca72:	2301      	movs	r3, #1
   1ca74:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   1ca78:	683b      	ldr	r3, [r7, #0]
   1ca7a:	682a      	ldr	r2, [r5, #0]
   1ca7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ca80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1ca84:	603b      	str	r3, [r7, #0]
   1ca86:	682a      	ldr	r2, [r5, #0]
   1ca88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ca8c:	603b      	str	r3, [r7, #0]
   1ca8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ca92:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1cad4 <startTrngHW+0x128>
   1ca96:	4640      	mov	r0, r8
   1ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ca9c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1cad8 <startTrngHW+0x12c>
   1caa0:	4640      	mov	r0, r8
   1caa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1caa6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1caaa:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   1caae:	3201      	adds	r2, #1
   1cab0:	d006      	beq.n	1cac0 <startTrngHW+0x114>
   1cab2:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1cab6:	4a06      	ldr	r2, [pc, #24]	; (1cad0 <startTrngHW+0x124>)
   1cab8:	fba2 2303 	umull	r2, r3, r2, r3
   1cabc:	091b      	lsrs	r3, r3, #4
   1cabe:	e7cd      	b.n	1ca5c <startTrngHW+0xb0>
   1cac0:	2316      	movs	r3, #22
   1cac2:	e7cb      	b.n	1ca5c <startTrngHW+0xb0>
   1cac4:	2003      	movs	r0, #3
   1cac6:	e79c      	b.n	1ca02 <startTrngHW+0x56>
   1cac8:	2002      	movs	r0, #2
   1caca:	e79a      	b.n	1ca02 <startTrngHW+0x56>
   1cacc:	50845000 	.word	0x50845000
   1cad0:	aaaaaaab 	.word	0xaaaaaaab
   1cad4:	00f10c31 	.word	0x00f10c31
   1cad8:	00f10c35 	.word	0x00f10c35

0001cadc <LLF_RND_RepetitionCounterTest>:
   1cadc:	b358      	cbz	r0, 1cb36 <LLF_RND_RepetitionCounterTest+0x5a>
   1cade:	1e4b      	subs	r3, r1, #1
   1cae0:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   1cae4:	d227      	bcs.n	1cb36 <LLF_RND_RepetitionCounterTest+0x5a>
   1cae6:	b530      	push	{r4, r5, lr}
   1cae8:	f04f 0e00 	mov.w	lr, #0
   1caec:	00cd      	lsls	r5, r1, #3
   1caee:	4674      	mov	r4, lr
   1caf0:	4671      	mov	r1, lr
   1caf2:	094b      	lsrs	r3, r1, #5
   1caf4:	f001 0c1f 	and.w	ip, r1, #31
   1caf8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1cafc:	f1bc 0f1f 	cmp.w	ip, #31
   1cb00:	fa23 f30c 	lsr.w	r3, r3, ip
   1cb04:	d006      	beq.n	1cb14 <LLF_RND_RepetitionCounterTest+0x38>
   1cb06:	f003 0301 	and.w	r3, r3, #1
   1cb0a:	b919      	cbnz	r1, 1cb14 <LLF_RND_RepetitionCounterTest+0x38>
   1cb0c:	2101      	movs	r1, #1
   1cb0e:	461c      	mov	r4, r3
   1cb10:	468e      	mov	lr, r1
   1cb12:	e7ee      	b.n	1caf2 <LLF_RND_RepetitionCounterTest+0x16>
   1cb14:	429c      	cmp	r4, r3
   1cb16:	f101 0101 	add.w	r1, r1, #1
   1cb1a:	d006      	beq.n	1cb2a <LLF_RND_RepetitionCounterTest+0x4e>
   1cb1c:	461c      	mov	r4, r3
   1cb1e:	f04f 0e01 	mov.w	lr, #1
   1cb22:	42a9      	cmp	r1, r5
   1cb24:	d1e5      	bne.n	1caf2 <LLF_RND_RepetitionCounterTest+0x16>
   1cb26:	2000      	movs	r0, #0
   1cb28:	bd30      	pop	{r4, r5, pc}
   1cb2a:	f10e 0e01 	add.w	lr, lr, #1
   1cb2e:	4596      	cmp	lr, r2
   1cb30:	d1f7      	bne.n	1cb22 <LLF_RND_RepetitionCounterTest+0x46>
   1cb32:	4802      	ldr	r0, [pc, #8]	; (1cb3c <LLF_RND_RepetitionCounterTest+0x60>)
   1cb34:	bd30      	pop	{r4, r5, pc}
   1cb36:	4801      	ldr	r0, [pc, #4]	; (1cb3c <LLF_RND_RepetitionCounterTest+0x60>)
   1cb38:	4770      	bx	lr
   1cb3a:	bf00      	nop
   1cb3c:	00f10c36 	.word	0x00f10c36

0001cb40 <LLF_RND_AdaptiveProportionTest>:
   1cb40:	b3c0      	cbz	r0, 1cbb4 <LLF_RND_AdaptiveProportionTest+0x74>
   1cb42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb46:	1e4c      	subs	r4, r1, #1
   1cb48:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1cb4c:	d21d      	bcs.n	1cb8a <LLF_RND_AdaptiveProportionTest+0x4a>
   1cb4e:	b1e3      	cbz	r3, 1cb8a <LLF_RND_AdaptiveProportionTest+0x4a>
   1cb50:	b1da      	cbz	r2, 1cb8a <LLF_RND_AdaptiveProportionTest+0x4a>
   1cb52:	2500      	movs	r5, #0
   1cb54:	462e      	mov	r6, r5
   1cb56:	46a8      	mov	r8, r5
   1cb58:	462c      	mov	r4, r5
   1cb5a:	00cf      	lsls	r7, r1, #3
   1cb5c:	f103 39ff 	add.w	r9, r3, #4294967295
   1cb60:	ea4f 1c54 	mov.w	ip, r4, lsr #5
   1cb64:	f004 0e1f 	and.w	lr, r4, #31
   1cb68:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
   1cb6c:	f1be 0f1f 	cmp.w	lr, #31
   1cb70:	fa21 fc0e 	lsr.w	ip, r1, lr
   1cb74:	d00c      	beq.n	1cb90 <LLF_RND_AdaptiveProportionTest+0x50>
   1cb76:	f00c 0c01 	and.w	ip, ip, #1
   1cb7a:	b94c      	cbnz	r4, 1cb90 <LLF_RND_AdaptiveProportionTest+0x50>
   1cb7c:	2601      	movs	r6, #1
   1cb7e:	46e0      	mov	r8, ip
   1cb80:	4634      	mov	r4, r6
   1cb82:	4635      	mov	r5, r6
   1cb84:	e7ec      	b.n	1cb60 <LLF_RND_AdaptiveProportionTest+0x20>
   1cb86:	4296      	cmp	r6, r2
   1cb88:	d916      	bls.n	1cbb8 <LLF_RND_AdaptiveProportionTest+0x78>
   1cb8a:	480c      	ldr	r0, [pc, #48]	; (1cbbc <LLF_RND_AdaptiveProportionTest+0x7c>)
   1cb8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cb90:	42ab      	cmp	r3, r5
   1cb92:	d00b      	beq.n	1cbac <LLF_RND_AdaptiveProportionTest+0x6c>
   1cb94:	45c4      	cmp	ip, r8
   1cb96:	bf08      	it	eq
   1cb98:	3601      	addeq	r6, #1
   1cb9a:	45a9      	cmp	r9, r5
   1cb9c:	d0f3      	beq.n	1cb86 <LLF_RND_AdaptiveProportionTest+0x46>
   1cb9e:	3501      	adds	r5, #1
   1cba0:	3401      	adds	r4, #1
   1cba2:	42bc      	cmp	r4, r7
   1cba4:	d1dc      	bne.n	1cb60 <LLF_RND_AdaptiveProportionTest+0x20>
   1cba6:	2000      	movs	r0, #0
   1cba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cbac:	2501      	movs	r5, #1
   1cbae:	46e0      	mov	r8, ip
   1cbb0:	462e      	mov	r6, r5
   1cbb2:	e7f5      	b.n	1cba0 <LLF_RND_AdaptiveProportionTest+0x60>
   1cbb4:	4801      	ldr	r0, [pc, #4]	; (1cbbc <LLF_RND_AdaptiveProportionTest+0x7c>)
   1cbb6:	4770      	bx	lr
   1cbb8:	461d      	mov	r5, r3
   1cbba:	e7f1      	b.n	1cba0 <LLF_RND_AdaptiveProportionTest+0x60>
   1cbbc:	00f10c37 	.word	0x00f10c37

0001cbc0 <getTrngSource>:
   1cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbc4:	b08f      	sub	sp, #60	; 0x3c
   1cbc6:	4682      	mov	sl, r0
   1cbc8:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
   1cbcc:	460d      	mov	r5, r1
   1cbce:	2e00      	cmp	r6, #0
   1cbd0:	d16e      	bne.n	1ccb0 <getTrngSource+0xf0>
   1cbd2:	6909      	ldr	r1, [r1, #16]
   1cbd4:	9104      	str	r1, [sp, #16]
   1cbd6:	601c      	str	r4, [r3, #0]
   1cbd8:	2300      	movs	r3, #0
   1cbda:	9918      	ldr	r1, [sp, #96]	; 0x60
   1cbdc:	600b      	str	r3, [r1, #0]
   1cbde:	2a00      	cmp	r2, #0
   1cbe0:	f000 8128 	beq.w	1ce34 <getTrngSource+0x274>
   1cbe4:	4b99      	ldr	r3, [pc, #612]	; (1ce4c <getTrngSource+0x28c>)
   1cbe6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1cbe8:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1cbec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1cbf0:	429a      	cmp	r2, r3
   1cbf2:	d169      	bne.n	1ccc8 <getTrngSource+0x108>
   1cbf4:	290a      	cmp	r1, #10
   1cbf6:	d167      	bne.n	1ccc8 <getTrngSource+0x108>
   1cbf8:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1cbfc:	9306      	str	r3, [sp, #24]
   1cbfe:	f104 0308 	add.w	r3, r4, #8
   1cc02:	9305      	str	r3, [sp, #20]
   1cc04:	2304      	movs	r3, #4
   1cc06:	9a04      	ldr	r2, [sp, #16]
   1cc08:	9303      	str	r3, [sp, #12]
   1cc0a:	4b91      	ldr	r3, [pc, #580]	; (1ce50 <getTrngSource+0x290>)
   1cc0c:	4c8f      	ldr	r4, [pc, #572]	; (1ce4c <getTrngSource+0x28c>)
   1cc0e:	fba3 3b02 	umull	r3, fp, r3, r2
   1cc12:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
   1cc16:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   1cc1a:	eba2 0b4b 	sub.w	fp, r2, fp, lsl #1
   1cc1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1cc20:	9e04      	ldr	r6, [sp, #16]
   1cc22:	601e      	str	r6, [r3, #0]
   1cc24:	2e00      	cmp	r6, #0
   1cc26:	f000 80e5 	beq.w	1cdf4 <getTrngSource+0x234>
   1cc2a:	2700      	movs	r7, #0
   1cc2c:	f000 fcbe 	bl	1d5ac <LLF_RND_TurnOffTrng>
   1cc30:	9707      	str	r7, [sp, #28]
   1cc32:	f1ba 0f00 	cmp.w	sl, #0
   1cc36:	f000 80d0 	beq.w	1cdda <getTrngSource+0x21a>
   1cc3a:	f04f 0901 	mov.w	r9, #1
   1cc3e:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1cc42:	2d00      	cmp	r5, #0
   1cc44:	f000 80c9 	beq.w	1cdda <getTrngSource+0x21a>
   1cc48:	9b06      	ldr	r3, [sp, #24]
   1cc4a:	2b00      	cmp	r3, #0
   1cc4c:	d03e      	beq.n	1cccc <getTrngSource+0x10c>
   1cc4e:	4628      	mov	r0, r5
   1cc50:	a906      	add	r1, sp, #24
   1cc52:	f000 fc9b 	bl	1d58c <LLF_RND_GetFastestRosc>
   1cc56:	2800      	cmp	r0, #0
   1cc58:	d03a      	beq.n	1ccd0 <getTrngSource+0x110>
   1cc5a:	4b7e      	ldr	r3, [pc, #504]	; (1ce54 <getTrngSource+0x294>)
   1cc5c:	4298      	cmp	r0, r3
   1cc5e:	d020      	beq.n	1cca2 <getTrngSource+0xe2>
   1cc60:	9b06      	ldr	r3, [sp, #24]
   1cc62:	2b08      	cmp	r3, #8
   1cc64:	f000 80e0 	beq.w	1ce28 <getTrngSource+0x268>
   1cc68:	2200      	movs	r2, #0
   1cc6a:	005b      	lsls	r3, r3, #1
   1cc6c:	9306      	str	r3, [sp, #24]
   1cc6e:	4629      	mov	r1, r5
   1cc70:	ab06      	add	r3, sp, #24
   1cc72:	4650      	mov	r0, sl
   1cc74:	9200      	str	r2, [sp, #0]
   1cc76:	f7ff fe99 	bl	1c9ac <startTrngHW>
   1cc7a:	4b77      	ldr	r3, [pc, #476]	; (1ce58 <getTrngSource+0x298>)
   1cc7c:	4298      	cmp	r0, r3
   1cc7e:	f000 80cf 	beq.w	1ce20 <getTrngSource+0x260>
   1cc82:	b970      	cbnz	r0, 1cca2 <getTrngSource+0xe2>
   1cc84:	f8da 2000 	ldr.w	r2, [sl]
   1cc88:	0a13      	lsrs	r3, r2, #8
   1cc8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1cc8e:	4313      	orrs	r3, r2
   1cc90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1cc94:	f8ca 3000 	str.w	r3, [sl]
   1cc98:	9b03      	ldr	r3, [sp, #12]
   1cc9a:	3b01      	subs	r3, #1
   1cc9c:	9303      	str	r3, [sp, #12]
   1cc9e:	d1be      	bne.n	1cc1e <getTrngSource+0x5e>
   1cca0:	2000      	movs	r0, #0
   1cca2:	9003      	str	r0, [sp, #12]
   1cca4:	f000 fc82 	bl	1d5ac <LLF_RND_TurnOffTrng>
   1cca8:	9803      	ldr	r0, [sp, #12]
   1ccaa:	b00f      	add	sp, #60	; 0x3c
   1ccac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccb0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   1ccb4:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1ccb8:	3001      	adds	r0, #1
   1ccba:	bf0c      	ite	eq
   1ccbc:	f44f 7104 	moveq.w	r1, #528	; 0x210
   1ccc0:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
   1ccc4:	9104      	str	r1, [sp, #16]
   1ccc6:	e786      	b.n	1cbd6 <getTrngSource+0x16>
   1ccc8:	4864      	ldr	r0, [pc, #400]	; (1ce5c <getTrngSource+0x29c>)
   1ccca:	e7ea      	b.n	1cca2 <getTrngSource+0xe2>
   1cccc:	4862      	ldr	r0, [pc, #392]	; (1ce58 <getTrngSource+0x298>)
   1ccce:	e7c4      	b.n	1cc5a <getTrngSource+0x9a>
   1ccd0:	4629      	mov	r1, r5
   1ccd2:	9806      	ldr	r0, [sp, #24]
   1ccd4:	f000 fc40 	bl	1d558 <LLF_RND_GetRoscSampleCnt>
   1ccd8:	2800      	cmp	r0, #0
   1ccda:	d1be      	bne.n	1cc5a <getTrngSource+0x9a>
   1ccdc:	9b06      	ldr	r3, [sp, #24]
   1ccde:	2b08      	cmp	r3, #8
   1cce0:	f000 80a4 	beq.w	1ce2c <getTrngSource+0x26c>
   1cce4:	2b04      	cmp	r3, #4
   1cce6:	f000 80a3 	beq.w	1ce30 <getTrngSource+0x270>
   1ccea:	f1a3 0302 	sub.w	r3, r3, #2
   1ccee:	fab3 f383 	clz	r3, r3
   1ccf2:	095b      	lsrs	r3, r3, #5
   1ccf4:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1ccf8:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1ccfc:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1cd00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1cd02:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
   1cd06:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
   1cd0a:	428a      	cmp	r2, r1
   1cd0c:	d1f6      	bne.n	1ccfc <getTrngSource+0x13c>
   1cd0e:	2200      	movs	r2, #0
   1cd10:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
   1cd14:	f04f 32ff 	mov.w	r2, #4294967295
   1cd18:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
   1cd1c:	f06f 021b 	mvn.w	r2, #27
   1cd20:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1cd24:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1cd28:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1cd2c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1cd30:	f7ff fd0e 	bl	1c750 <CC_HalMaskInterrupt>
   1cd34:	230a      	movs	r3, #10
   1cd36:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1cd3a:	692b      	ldr	r3, [r5, #16]
   1cd3c:	4a44      	ldr	r2, [pc, #272]	; (1ce50 <getTrngSource+0x290>)
   1cd3e:	fba2 1303 	umull	r1, r3, r2, r3
   1cd42:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1cd44:	091b      	lsrs	r3, r3, #4
   1cd46:	fb01 f303 	mul.w	r3, r1, r3
   1cd4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cd4e:	03db      	lsls	r3, r3, #15
   1cd50:	099b      	lsrs	r3, r3, #6
   1cd52:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1cd56:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1cd5a:	9806      	ldr	r0, [sp, #24]
   1cd5c:	f8da 3000 	ldr.w	r3, [sl]
   1cd60:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
   1cd64:	0203      	lsls	r3, r0, #8
   1cd66:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   1cd6a:	430b      	orrs	r3, r1
   1cd6c:	f8ca 3000 	str.w	r3, [sl]
   1cd70:	a807      	add	r0, sp, #28
   1cd72:	f000 fbe1 	bl	1d538 <LLF_RND_WaitRngInterrupt>
   1cd76:	9b07      	ldr	r3, [sp, #28]
   1cd78:	4a35      	ldr	r2, [pc, #212]	; (1ce50 <getTrngSource+0x290>)
   1cd7a:	f003 031a 	and.w	r3, r3, #26
   1cd7e:	4303      	orrs	r3, r0
   1cd80:	f47f af6e 	bne.w	1cc60 <getTrngSource+0xa0>
   1cd84:	fba2 3206 	umull	r3, r2, r2, r6
   1cd88:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1cd8c:	ebb7 0f92 	cmp.w	r7, r2, lsr #2
   1cd90:	9308      	str	r3, [sp, #32]
   1cd92:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1cd96:	9309      	str	r3, [sp, #36]	; 0x24
   1cd98:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1cd9c:	930a      	str	r3, [sp, #40]	; 0x28
   1cd9e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1cda2:	930b      	str	r3, [sp, #44]	; 0x2c
   1cda4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cda8:	930c      	str	r3, [sp, #48]	; 0x30
   1cdaa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cdae:	930d      	str	r3, [sp, #52]	; 0x34
   1cdb0:	d102      	bne.n	1cdb8 <getTrngSource+0x1f8>
   1cdb2:	f1bb 0f00 	cmp.w	fp, #0
   1cdb6:	d112      	bne.n	1cdde <getTrngSource+0x21e>
   1cdb8:	4640      	mov	r0, r8
   1cdba:	2218      	movs	r2, #24
   1cdbc:	a908      	add	r1, sp, #32
   1cdbe:	3e18      	subs	r6, #24
   1cdc0:	f7ff fd54 	bl	1c86c <CC_PalMemCopyPlat>
   1cdc4:	f108 0818 	add.w	r8, r8, #24
   1cdc8:	3701      	adds	r7, #1
   1cdca:	b19e      	cbz	r6, 1cdf4 <getTrngSource+0x234>
   1cdcc:	f000 fbee 	bl	1d5ac <LLF_RND_TurnOffTrng>
   1cdd0:	2300      	movs	r3, #0
   1cdd2:	9307      	str	r3, [sp, #28]
   1cdd4:	2d00      	cmp	r5, #0
   1cdd6:	f47f af37 	bne.w	1cc48 <getTrngSource+0x88>
   1cdda:	4821      	ldr	r0, [pc, #132]	; (1ce60 <getTrngSource+0x2a0>)
   1cddc:	e73d      	b.n	1cc5a <getTrngSource+0x9a>
   1cdde:	4640      	mov	r0, r8
   1cde0:	465a      	mov	r2, fp
   1cde2:	a908      	add	r1, sp, #32
   1cde4:	eba6 060b 	sub.w	r6, r6, fp
   1cde8:	f7ff fd40 	bl	1c86c <CC_PalMemCopyPlat>
   1cdec:	44d8      	add	r8, fp
   1cdee:	3701      	adds	r7, #1
   1cdf0:	2e00      	cmp	r6, #0
   1cdf2:	d1eb      	bne.n	1cdcc <getTrngSource+0x20c>
   1cdf4:	9f04      	ldr	r7, [sp, #16]
   1cdf6:	9e05      	ldr	r6, [sp, #20]
   1cdf8:	696a      	ldr	r2, [r5, #20]
   1cdfa:	4639      	mov	r1, r7
   1cdfc:	4630      	mov	r0, r6
   1cdfe:	f7ff fe6d 	bl	1cadc <LLF_RND_RepetitionCounterTest>
   1ce02:	69aa      	ldr	r2, [r5, #24]
   1ce04:	b940      	cbnz	r0, 1ce18 <getTrngSource+0x258>
   1ce06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1ce0a:	4639      	mov	r1, r7
   1ce0c:	4630      	mov	r0, r6
   1ce0e:	f7ff fe97 	bl	1cb40 <LLF_RND_AdaptiveProportionTest>
   1ce12:	2800      	cmp	r0, #0
   1ce14:	f43f af44 	beq.w	1cca0 <getTrngSource+0xe0>
   1ce18:	2300      	movs	r3, #0
   1ce1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1ce1c:	6013      	str	r3, [r2, #0]
   1ce1e:	e71c      	b.n	1cc5a <getTrngSource+0x9a>
   1ce20:	6a2b      	ldr	r3, [r5, #32]
   1ce22:	2b00      	cmp	r3, #0
   1ce24:	f43f af3d 	beq.w	1cca2 <getTrngSource+0xe2>
   1ce28:	480e      	ldr	r0, [pc, #56]	; (1ce64 <getTrngSource+0x2a4>)
   1ce2a:	e73a      	b.n	1cca2 <getTrngSource+0xe2>
   1ce2c:	2303      	movs	r3, #3
   1ce2e:	e761      	b.n	1ccf4 <getTrngSource+0x134>
   1ce30:	2302      	movs	r3, #2
   1ce32:	e75f      	b.n	1ccf4 <getTrngSource+0x134>
   1ce34:	2201      	movs	r2, #1
   1ce36:	4629      	mov	r1, r5
   1ce38:	4650      	mov	r0, sl
   1ce3a:	9600      	str	r6, [sp, #0]
   1ce3c:	ab06      	add	r3, sp, #24
   1ce3e:	f7ff fdb5 	bl	1c9ac <startTrngHW>
   1ce42:	2800      	cmp	r0, #0
   1ce44:	f43f aedb 	beq.w	1cbfe <getTrngSource+0x3e>
   1ce48:	e72b      	b.n	1cca2 <getTrngSource+0xe2>
   1ce4a:	bf00      	nop
   1ce4c:	50845000 	.word	0x50845000
   1ce50:	aaaaaaab 	.word	0xaaaaaaab
   1ce54:	00f10c02 	.word	0x00f10c02
   1ce58:	00f10c31 	.word	0x00f10c31
   1ce5c:	00f10c30 	.word	0x00f10c30
   1ce60:	00f10c35 	.word	0x00f10c35
   1ce64:	00f10c32 	.word	0x00f10c32

0001ce68 <LLF_RND_GetTrngSource>:
   1ce68:	b410      	push	{r4}
   1ce6a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1ce6e:	9401      	str	r4, [sp, #4]
   1ce70:	2400      	movs	r4, #0
   1ce72:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1ce76:	e9cd c402 	strd	ip, r4, [sp, #8]
   1ce7a:	bc10      	pop	{r4}
   1ce7c:	f7ff bea0 	b.w	1cbc0 <getTrngSource>

0001ce80 <LLF_RND_RunTrngStartupTest>:
   1ce80:	b530      	push	{r4, r5, lr}
   1ce82:	4615      	mov	r5, r2
   1ce84:	2401      	movs	r4, #1
   1ce86:	b087      	sub	sp, #28
   1ce88:	ab05      	add	r3, sp, #20
   1ce8a:	9300      	str	r3, [sp, #0]
   1ce8c:	2200      	movs	r2, #0
   1ce8e:	e9cd 5401 	strd	r5, r4, [sp, #4]
   1ce92:	ab04      	add	r3, sp, #16
   1ce94:	f7ff fe94 	bl	1cbc0 <getTrngSource>
   1ce98:	b007      	add	sp, #28
   1ce9a:	bd30      	pop	{r4, r5, pc}

0001ce9c <mbedtls_hardware_poll>:
   1ce9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce9e:	b087      	sub	sp, #28
   1cea0:	2900      	cmp	r1, #0
   1cea2:	d067      	beq.n	1cf74 <mbedtls_hardware_poll+0xd8>
   1cea4:	461e      	mov	r6, r3
   1cea6:	2b00      	cmp	r3, #0
   1cea8:	d064      	beq.n	1cf74 <mbedtls_hardware_poll+0xd8>
   1ceaa:	4614      	mov	r4, r2
   1ceac:	2a00      	cmp	r2, #0
   1ceae:	d061      	beq.n	1cf74 <mbedtls_hardware_poll+0xd8>
   1ceb0:	4f32      	ldr	r7, [pc, #200]	; (1cf7c <mbedtls_hardware_poll+0xe0>)
   1ceb2:	460d      	mov	r5, r1
   1ceb4:	6838      	ldr	r0, [r7, #0]
   1ceb6:	f04f 31ff 	mov.w	r1, #4294967295
   1ceba:	f7ff fcf3 	bl	1c8a4 <CC_PalMutexLock>
   1cebe:	2800      	cmp	r0, #0
   1cec0:	d13d      	bne.n	1cf3e <mbedtls_hardware_poll+0xa2>
   1cec2:	4b2f      	ldr	r3, [pc, #188]	; (1cf80 <mbedtls_hardware_poll+0xe4>)
   1cec4:	f8d3 0e34 	ldr.w	r0, [r3, #3636]	; 0xe34
   1cec8:	f010 0001 	ands.w	r0, r0, #1
   1cecc:	d015      	beq.n	1cefa <mbedtls_hardware_poll+0x5e>
   1cece:	f04f 35ff 	mov.w	r5, #4294967295
   1ced2:	f44f 7108 	mov.w	r1, #544	; 0x220
   1ced6:	482b      	ldr	r0, [pc, #172]	; (1cf84 <mbedtls_hardware_poll+0xe8>)
   1ced8:	f7fe fede 	bl	1bc98 <mbedtls_zeroize_internal>
   1cedc:	2104      	movs	r1, #4
   1cede:	482a      	ldr	r0, [pc, #168]	; (1cf88 <mbedtls_hardware_poll+0xec>)
   1cee0:	f7fe feda 	bl	1bc98 <mbedtls_zeroize_internal>
   1cee4:	4829      	ldr	r0, [pc, #164]	; (1cf8c <mbedtls_hardware_poll+0xf0>)
   1cee6:	2128      	movs	r1, #40	; 0x28
   1cee8:	f7fe fed6 	bl	1bc98 <mbedtls_zeroize_internal>
   1ceec:	6838      	ldr	r0, [r7, #0]
   1ceee:	f7ff fce1 	bl	1c8b4 <CC_PalMutexUnlock>
   1cef2:	bb40      	cbnz	r0, 1cf46 <mbedtls_hardware_poll+0xaa>
   1cef4:	4628      	mov	r0, r5
   1cef6:	b007      	add	sp, #28
   1cef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cefa:	f7ff fd03 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1cefe:	2800      	cmp	r0, #0
   1cf00:	d134      	bne.n	1cf6c <mbedtls_hardware_poll+0xd0>
   1cf02:	4822      	ldr	r0, [pc, #136]	; (1cf8c <mbedtls_hardware_poll+0xf0>)
   1cf04:	f000 fa88 	bl	1d418 <RNG_PLAT_SetUserRngParameters>
   1cf08:	b970      	cbnz	r0, 1cf28 <mbedtls_hardware_poll+0x8c>
   1cf0a:	4a1e      	ldr	r2, [pc, #120]	; (1cf84 <mbedtls_hardware_poll+0xe8>)
   1cf0c:	4603      	mov	r3, r0
   1cf0e:	9202      	str	r2, [sp, #8]
   1cf10:	aa05      	add	r2, sp, #20
   1cf12:	9201      	str	r2, [sp, #4]
   1cf14:	aa04      	add	r2, sp, #16
   1cf16:	9003      	str	r0, [sp, #12]
   1cf18:	9200      	str	r2, [sp, #0]
   1cf1a:	491c      	ldr	r1, [pc, #112]	; (1cf8c <mbedtls_hardware_poll+0xf0>)
   1cf1c:	4602      	mov	r2, r0
   1cf1e:	481a      	ldr	r0, [pc, #104]	; (1cf88 <mbedtls_hardware_poll+0xec>)
   1cf20:	f7ff ffa2 	bl	1ce68 <LLF_RND_GetTrngSource>
   1cf24:	4603      	mov	r3, r0
   1cf26:	b1a0      	cbz	r0, 1cf52 <mbedtls_hardware_poll+0xb6>
   1cf28:	f04f 35ff 	mov.w	r5, #4294967295
   1cf2c:	2001      	movs	r0, #1
   1cf2e:	f7ff fce9 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1cf32:	2800      	cmp	r0, #0
   1cf34:	d0cd      	beq.n	1ced2 <mbedtls_hardware_poll+0x36>
   1cf36:	4816      	ldr	r0, [pc, #88]	; (1cf90 <mbedtls_hardware_poll+0xf4>)
   1cf38:	f7fe fd8c 	bl	1ba54 <CC_PalAbort>
   1cf3c:	e7c9      	b.n	1ced2 <mbedtls_hardware_poll+0x36>
   1cf3e:	4815      	ldr	r0, [pc, #84]	; (1cf94 <mbedtls_hardware_poll+0xf8>)
   1cf40:	f7fe fd88 	bl	1ba54 <CC_PalAbort>
   1cf44:	e7bd      	b.n	1cec2 <mbedtls_hardware_poll+0x26>
   1cf46:	4814      	ldr	r0, [pc, #80]	; (1cf98 <mbedtls_hardware_poll+0xfc>)
   1cf48:	f7fe fd84 	bl	1ba54 <CC_PalAbort>
   1cf4c:	4628      	mov	r0, r5
   1cf4e:	b007      	add	sp, #28
   1cf50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cf52:	4628      	mov	r0, r5
   1cf54:	461d      	mov	r5, r3
   1cf56:	9b05      	ldr	r3, [sp, #20]
   1cf58:	4622      	mov	r2, r4
   1cf5a:	429c      	cmp	r4, r3
   1cf5c:	bf28      	it	cs
   1cf5e:	461a      	movcs	r2, r3
   1cf60:	9904      	ldr	r1, [sp, #16]
   1cf62:	6032      	str	r2, [r6, #0]
   1cf64:	3108      	adds	r1, #8
   1cf66:	f7ff fc81 	bl	1c86c <CC_PalMemCopyPlat>
   1cf6a:	e7df      	b.n	1cf2c <mbedtls_hardware_poll+0x90>
   1cf6c:	480b      	ldr	r0, [pc, #44]	; (1cf9c <mbedtls_hardware_poll+0x100>)
   1cf6e:	f7fe fd71 	bl	1ba54 <CC_PalAbort>
   1cf72:	e7c6      	b.n	1cf02 <mbedtls_hardware_poll+0x66>
   1cf74:	f04f 35ff 	mov.w	r5, #4294967295
   1cf78:	e7bc      	b.n	1cef4 <mbedtls_hardware_poll+0x58>
   1cf7a:	bf00      	nop
   1cf7c:	20000c38 	.word	0x20000c38
   1cf80:	50846000 	.word	0x50846000
   1cf84:	20005008 	.word	0x20005008
   1cf88:	20004fdc 	.word	0x20004fdc
   1cf8c:	20004fe0 	.word	0x20004fe0
   1cf90:	0003154c 	.word	0x0003154c
   1cf94:	00031514 	.word	0x00031514
   1cf98:	000315a4 	.word	0x000315a4
   1cf9c:	0003152c 	.word	0x0003152c

0001cfa0 <cc_mbedtls_aes_init>:
   1cfa0:	b510      	push	{r4, lr}
   1cfa2:	4604      	mov	r4, r0
   1cfa4:	b130      	cbz	r0, 1cfb4 <cc_mbedtls_aes_init+0x14>
   1cfa6:	2200      	movs	r2, #0
   1cfa8:	2301      	movs	r3, #1
   1cfaa:	6562      	str	r2, [r4, #84]	; 0x54
   1cfac:	65a2      	str	r2, [r4, #88]	; 0x58
   1cfae:	65e3      	str	r3, [r4, #92]	; 0x5c
   1cfb0:	6623      	str	r3, [r4, #96]	; 0x60
   1cfb2:	bd10      	pop	{r4, pc}
   1cfb4:	4801      	ldr	r0, [pc, #4]	; (1cfbc <cc_mbedtls_aes_init+0x1c>)
   1cfb6:	f7fe fd4d 	bl	1ba54 <CC_PalAbort>
   1cfba:	e7f4      	b.n	1cfa6 <cc_mbedtls_aes_init+0x6>
   1cfbc:	000315bc 	.word	0x000315bc

0001cfc0 <cc_mbedtls_aes_free>:
   1cfc0:	b118      	cbz	r0, 1cfca <cc_mbedtls_aes_free+0xa>
   1cfc2:	2274      	movs	r2, #116	; 0x74
   1cfc4:	2100      	movs	r1, #0
   1cfc6:	f7ff bc53 	b.w	1c870 <CC_PalMemSetPlat>
   1cfca:	4770      	bx	lr

0001cfcc <cc_mbedtls_aes_setkey_enc>:
   1cfcc:	b1c8      	cbz	r0, 1d002 <cc_mbedtls_aes_setkey_enc+0x36>
   1cfce:	b1d9      	cbz	r1, 1d008 <cc_mbedtls_aes_setkey_enc+0x3c>
   1cfd0:	b508      	push	{r3, lr}
   1cfd2:	2300      	movs	r3, #0
   1cfd4:	2ac0      	cmp	r2, #192	; 0xc0
   1cfd6:	6383      	str	r3, [r0, #56]	; 0x38
   1cfd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   1cfdc:	d00f      	beq.n	1cffe <cc_mbedtls_aes_setkey_enc+0x32>
   1cfde:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   1cfe2:	d004      	beq.n	1cfee <cc_mbedtls_aes_setkey_enc+0x22>
   1cfe4:	2a80      	cmp	r2, #128	; 0x80
   1cfe6:	d003      	beq.n	1cff0 <cc_mbedtls_aes_setkey_enc+0x24>
   1cfe8:	f06f 001f 	mvn.w	r0, #31
   1cfec:	bd08      	pop	{r3, pc}
   1cfee:	2302      	movs	r3, #2
   1cff0:	6303      	str	r3, [r0, #48]	; 0x30
   1cff2:	08d2      	lsrs	r2, r2, #3
   1cff4:	3010      	adds	r0, #16
   1cff6:	f7ff fc39 	bl	1c86c <CC_PalMemCopyPlat>
   1cffa:	2000      	movs	r0, #0
   1cffc:	bd08      	pop	{r3, pc}
   1cffe:	2301      	movs	r3, #1
   1d000:	e7f6      	b.n	1cff0 <cc_mbedtls_aes_setkey_enc+0x24>
   1d002:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1d006:	4770      	bx	lr
   1d008:	f06f 001f 	mvn.w	r0, #31
   1d00c:	4770      	bx	lr
   1d00e:	bf00      	nop

0001d010 <cc_mbedtls_aes_crypt_ecb>:
   1d010:	b570      	push	{r4, r5, r6, lr}
   1d012:	4604      	mov	r4, r0
   1d014:	b086      	sub	sp, #24
   1d016:	b1f8      	cbz	r0, 1d058 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d018:	4610      	mov	r0, r2
   1d01a:	b1ea      	cbz	r2, 1d058 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d01c:	b1e3      	cbz	r3, 1d058 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d01e:	2901      	cmp	r1, #1
   1d020:	d81a      	bhi.n	1d058 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d022:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1d024:	d016      	beq.n	1d054 <cc_mbedtls_aes_crypt_ecb+0x44>
   1d026:	2a01      	cmp	r2, #1
   1d028:	d116      	bne.n	1d058 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d02a:	2510      	movs	r5, #16
   1d02c:	2100      	movs	r1, #0
   1d02e:	eb0d 0605 	add.w	r6, sp, r5
   1d032:	9601      	str	r6, [sp, #4]
   1d034:	aa02      	add	r2, sp, #8
   1d036:	6361      	str	r1, [r4, #52]	; 0x34
   1d038:	4629      	mov	r1, r5
   1d03a:	9500      	str	r5, [sp, #0]
   1d03c:	f000 fac8 	bl	1d5d0 <SetDataBuffersInfo>
   1d040:	b950      	cbnz	r0, 1d058 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d042:	462b      	mov	r3, r5
   1d044:	4632      	mov	r2, r6
   1d046:	4620      	mov	r0, r4
   1d048:	a902      	add	r1, sp, #8
   1d04a:	f000 fd73 	bl	1db34 <ProcessAesDrv>
   1d04e:	b918      	cbnz	r0, 1d058 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d050:	b006      	add	sp, #24
   1d052:	bd70      	pop	{r4, r5, r6, pc}
   1d054:	2a00      	cmp	r2, #0
   1d056:	d0e8      	beq.n	1d02a <cc_mbedtls_aes_crypt_ecb+0x1a>
   1d058:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1d05c:	e7f8      	b.n	1d050 <cc_mbedtls_aes_crypt_ecb+0x40>
   1d05e:	bf00      	nop

0001d060 <cc_mbedtls_sha256_init>:
   1d060:	b510      	push	{r4, lr}
   1d062:	4604      	mov	r4, r0
   1d064:	b128      	cbz	r0, 1d072 <cc_mbedtls_sha256_init+0x12>
   1d066:	4620      	mov	r0, r4
   1d068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d06c:	21f4      	movs	r1, #244	; 0xf4
   1d06e:	f7ff bc01 	b.w	1c874 <CC_PalMemSetZeroPlat>
   1d072:	4804      	ldr	r0, [pc, #16]	; (1d084 <cc_mbedtls_sha256_init+0x24>)
   1d074:	f7fe fcee 	bl	1ba54 <CC_PalAbort>
   1d078:	4620      	mov	r0, r4
   1d07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d07e:	21f4      	movs	r1, #244	; 0xf4
   1d080:	f7ff bbf8 	b.w	1c874 <CC_PalMemSetZeroPlat>
   1d084:	000315d0 	.word	0x000315d0

0001d088 <cc_mbedtls_sha256_free>:
   1d088:	b110      	cbz	r0, 1d090 <cc_mbedtls_sha256_free+0x8>
   1d08a:	21f4      	movs	r1, #244	; 0xf4
   1d08c:	f7fe be04 	b.w	1bc98 <mbedtls_zeroize_internal>
   1d090:	4770      	bx	lr
   1d092:	bf00      	nop

0001d094 <cc_mbedtls_sha256_starts>:
   1d094:	b508      	push	{r3, lr}
   1d096:	b121      	cbz	r1, 1d0a2 <cc_mbedtls_sha256_starts+0xe>
   1d098:	2901      	cmp	r1, #1
   1d09a:	d008      	beq.n	1d0ae <cc_mbedtls_sha256_starts+0x1a>
   1d09c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d0a0:	bd08      	pop	{r3, pc}
   1d0a2:	2101      	movs	r1, #1
   1d0a4:	f000 f858 	bl	1d158 <mbedtls_sha_starts_internal>
   1d0a8:	2800      	cmp	r0, #0
   1d0aa:	d1f7      	bne.n	1d09c <cc_mbedtls_sha256_starts+0x8>
   1d0ac:	bd08      	pop	{r3, pc}
   1d0ae:	2102      	movs	r1, #2
   1d0b0:	f000 f852 	bl	1d158 <mbedtls_sha_starts_internal>
   1d0b4:	2800      	cmp	r0, #0
   1d0b6:	d0f9      	beq.n	1d0ac <cc_mbedtls_sha256_starts+0x18>
   1d0b8:	e7f0      	b.n	1d09c <cc_mbedtls_sha256_starts+0x8>
   1d0ba:	bf00      	nop

0001d0bc <cc_mbedtls_sha256_update>:
   1d0bc:	b530      	push	{r4, r5, lr}
   1d0be:	4605      	mov	r5, r0
   1d0c0:	1888      	adds	r0, r1, r2
   1d0c2:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1d0c6:	460b      	mov	r3, r1
   1d0c8:	4614      	mov	r4, r2
   1d0ca:	b0a1      	sub	sp, #132	; 0x84
   1d0cc:	d801      	bhi.n	1d0d2 <cc_mbedtls_sha256_update+0x16>
   1d0ce:	2a80      	cmp	r2, #128	; 0x80
   1d0d0:	d90c      	bls.n	1d0ec <cc_mbedtls_sha256_update+0x30>
   1d0d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d0d6:	d917      	bls.n	1d108 <cc_mbedtls_sha256_update+0x4c>
   1d0d8:	4622      	mov	r2, r4
   1d0da:	4619      	mov	r1, r3
   1d0dc:	4628      	mov	r0, r5
   1d0de:	f000 f87d 	bl	1d1dc <mbedtls_sha_update_internal>
   1d0e2:	4604      	mov	r4, r0
   1d0e4:	b984      	cbnz	r4, 1d108 <cc_mbedtls_sha256_update+0x4c>
   1d0e6:	4620      	mov	r0, r4
   1d0e8:	b021      	add	sp, #132	; 0x84
   1d0ea:	bd30      	pop	{r4, r5, pc}
   1d0ec:	4668      	mov	r0, sp
   1d0ee:	f7ff fbbd 	bl	1c86c <CC_PalMemCopyPlat>
   1d0f2:	4622      	mov	r2, r4
   1d0f4:	4669      	mov	r1, sp
   1d0f6:	4628      	mov	r0, r5
   1d0f8:	f000 f870 	bl	1d1dc <mbedtls_sha_update_internal>
   1d0fc:	2180      	movs	r1, #128	; 0x80
   1d0fe:	4604      	mov	r4, r0
   1d100:	4668      	mov	r0, sp
   1d102:	f7ff fbb7 	bl	1c874 <CC_PalMemSetZeroPlat>
   1d106:	e7ed      	b.n	1d0e4 <cc_mbedtls_sha256_update+0x28>
   1d108:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1d10c:	e7eb      	b.n	1d0e6 <cc_mbedtls_sha256_update+0x2a>
   1d10e:	bf00      	nop

0001d110 <cc_mbedtls_sha256_finish>:
   1d110:	b570      	push	{r4, r5, r6, lr}
   1d112:	b1e8      	cbz	r0, 1d150 <cc_mbedtls_sha256_finish+0x40>
   1d114:	460e      	mov	r6, r1
   1d116:	b1d9      	cbz	r1, 1d150 <cc_mbedtls_sha256_finish+0x40>
   1d118:	4604      	mov	r4, r0
   1d11a:	f000 f831 	bl	1d180 <mbedtls_sha_finish_internal>
   1d11e:	4605      	mov	r5, r0
   1d120:	b9b0      	cbnz	r0, 1d150 <cc_mbedtls_sha256_finish+0x40>
   1d122:	6823      	ldr	r3, [r4, #0]
   1d124:	2b01      	cmp	r3, #1
   1d126:	d00b      	beq.n	1d140 <cc_mbedtls_sha256_finish+0x30>
   1d128:	2b02      	cmp	r3, #2
   1d12a:	d001      	beq.n	1d130 <cc_mbedtls_sha256_finish+0x20>
   1d12c:	4628      	mov	r0, r5
   1d12e:	bd70      	pop	{r4, r5, r6, pc}
   1d130:	221c      	movs	r2, #28
   1d132:	4630      	mov	r0, r6
   1d134:	f104 0108 	add.w	r1, r4, #8
   1d138:	f7ff fb98 	bl	1c86c <CC_PalMemCopyPlat>
   1d13c:	4628      	mov	r0, r5
   1d13e:	bd70      	pop	{r4, r5, r6, pc}
   1d140:	2220      	movs	r2, #32
   1d142:	4630      	mov	r0, r6
   1d144:	f104 0108 	add.w	r1, r4, #8
   1d148:	f7ff fb90 	bl	1c86c <CC_PalMemCopyPlat>
   1d14c:	4628      	mov	r0, r5
   1d14e:	bd70      	pop	{r4, r5, r6, pc}
   1d150:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1d154:	e7ea      	b.n	1d12c <cc_mbedtls_sha256_finish+0x1c>
   1d156:	bf00      	nop

0001d158 <mbedtls_sha_starts_internal>:
   1d158:	b178      	cbz	r0, 1d17a <mbedtls_sha_starts_internal+0x22>
   1d15a:	b538      	push	{r3, r4, r5, lr}
   1d15c:	460d      	mov	r5, r1
   1d15e:	21f0      	movs	r1, #240	; 0xf0
   1d160:	4604      	mov	r4, r0
   1d162:	f7ff fb87 	bl	1c874 <CC_PalMemSetZeroPlat>
   1d166:	2340      	movs	r3, #64	; 0x40
   1d168:	4620      	mov	r0, r4
   1d16a:	6025      	str	r5, [r4, #0]
   1d16c:	65e3      	str	r3, [r4, #92]	; 0x5c
   1d16e:	f000 fa61 	bl	1d634 <InitHashDrv>
   1d172:	3800      	subs	r0, #0
   1d174:	bf18      	it	ne
   1d176:	2001      	movne	r0, #1
   1d178:	bd38      	pop	{r3, r4, r5, pc}
   1d17a:	2001      	movs	r0, #1
   1d17c:	4770      	bx	lr
   1d17e:	bf00      	nop

0001d180 <mbedtls_sha_finish_internal>:
   1d180:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d182:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1d184:	b0a5      	sub	sp, #148	; 0x94
   1d186:	4604      	mov	r4, r0
   1d188:	ae04      	add	r6, sp, #16
   1d18a:	b9e5      	cbnz	r5, 1d1c6 <mbedtls_sha_finish_internal+0x46>
   1d18c:	2300      	movs	r3, #0
   1d18e:	2701      	movs	r7, #1
   1d190:	9301      	str	r3, [sp, #4]
   1d192:	4630      	mov	r0, r6
   1d194:	6067      	str	r7, [r4, #4]
   1d196:	4629      	mov	r1, r5
   1d198:	aa02      	add	r2, sp, #8
   1d19a:	9300      	str	r3, [sp, #0]
   1d19c:	f000 fa18 	bl	1d5d0 <SetDataBuffersInfo>
   1d1a0:	b110      	cbz	r0, 1d1a8 <mbedtls_sha_finish_internal+0x28>
   1d1a2:	2001      	movs	r0, #1
   1d1a4:	b025      	add	sp, #148	; 0x94
   1d1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d1a8:	462a      	mov	r2, r5
   1d1aa:	4620      	mov	r0, r4
   1d1ac:	a902      	add	r1, sp, #8
   1d1ae:	f000 fa69 	bl	1d684 <ProcessHashDrv>
   1d1b2:	2800      	cmp	r0, #0
   1d1b4:	d1f5      	bne.n	1d1a2 <mbedtls_sha_finish_internal+0x22>
   1d1b6:	4620      	mov	r0, r4
   1d1b8:	f000 fb6c 	bl	1d894 <FinishHashDrv>
   1d1bc:	2800      	cmp	r0, #0
   1d1be:	d1f0      	bne.n	1d1a2 <mbedtls_sha_finish_internal+0x22>
   1d1c0:	6620      	str	r0, [r4, #96]	; 0x60
   1d1c2:	b025      	add	sp, #148	; 0x94
   1d1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d1c6:	2d80      	cmp	r5, #128	; 0x80
   1d1c8:	462a      	mov	r2, r5
   1d1ca:	4630      	mov	r0, r6
   1d1cc:	bf28      	it	cs
   1d1ce:	2280      	movcs	r2, #128	; 0x80
   1d1d0:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1d1d4:	f7ff fb4a 	bl	1c86c <CC_PalMemCopyPlat>
   1d1d8:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1d1da:	e7d7      	b.n	1d18c <mbedtls_sha_finish_internal+0xc>

0001d1dc <mbedtls_sha_update_internal>:
   1d1dc:	2800      	cmp	r0, #0
   1d1de:	f000 80ae 	beq.w	1d33e <mbedtls_sha_update_internal+0x162>
   1d1e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1e6:	4614      	mov	r4, r2
   1d1e8:	b0a5      	sub	sp, #148	; 0x94
   1d1ea:	2a00      	cmp	r2, #0
   1d1ec:	d03d      	beq.n	1d26a <mbedtls_sha_update_internal+0x8e>
   1d1ee:	460f      	mov	r7, r1
   1d1f0:	2900      	cmp	r1, #0
   1d1f2:	d049      	beq.n	1d288 <mbedtls_sha_update_internal+0xac>
   1d1f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1d1f8:	4605      	mov	r5, r0
   1d1fa:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1d1fc:	d320      	bcc.n	1d240 <mbedtls_sha_update_internal+0x64>
   1d1fe:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1d202:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   1d206:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1d208:	1a1a      	subs	r2, r3, r0
   1d20a:	fbb2 f1f3 	udiv	r1, r2, r3
   1d20e:	fb03 2211 	mls	r2, r3, r1, r2
   1d212:	2a00      	cmp	r2, #0
   1d214:	d165      	bne.n	1d2e2 <mbedtls_sha_update_internal+0x106>
   1d216:	4283      	cmp	r3, r0
   1d218:	46b9      	mov	r9, r7
   1d21a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1d21e:	d072      	beq.n	1d306 <mbedtls_sha_update_internal+0x12a>
   1d220:	fbb6 fbf3 	udiv	fp, r6, r3
   1d224:	fb03 fb0b 	mul.w	fp, r3, fp
   1d228:	f1bb 0f00 	cmp.w	fp, #0
   1d22c:	d130      	bne.n	1d290 <mbedtls_sha_update_internal+0xb4>
   1d22e:	2e00      	cmp	r6, #0
   1d230:	d145      	bne.n	1d2be <mbedtls_sha_update_internal+0xe2>
   1d232:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   1d236:	3cff      	subs	r4, #255	; 0xff
   1d238:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1d23c:	4447      	add	r7, r8
   1d23e:	d2e2      	bcs.n	1d206 <mbedtls_sha_update_internal+0x2a>
   1d240:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1d242:	1a16      	subs	r6, r2, r0
   1d244:	fbb6 f3f2 	udiv	r3, r6, r2
   1d248:	fb02 6613 	mls	r6, r2, r3, r6
   1d24c:	42a6      	cmp	r6, r4
   1d24e:	bf28      	it	cs
   1d250:	4626      	movcs	r6, r4
   1d252:	2e00      	cmp	r6, #0
   1d254:	d175      	bne.n	1d342 <mbedtls_sha_update_internal+0x166>
   1d256:	4282      	cmp	r2, r0
   1d258:	f000 808d 	beq.w	1d376 <mbedtls_sha_update_internal+0x19a>
   1d25c:	fbb4 f6f2 	udiv	r6, r4, r2
   1d260:	fb02 f606 	mul.w	r6, r2, r6
   1d264:	b92e      	cbnz	r6, 1d272 <mbedtls_sha_update_internal+0x96>
   1d266:	2c00      	cmp	r4, #0
   1d268:	d179      	bne.n	1d35e <mbedtls_sha_update_internal+0x182>
   1d26a:	2000      	movs	r0, #0
   1d26c:	b025      	add	sp, #148	; 0x94
   1d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d272:	2300      	movs	r3, #0
   1d274:	4631      	mov	r1, r6
   1d276:	4638      	mov	r0, r7
   1d278:	e9cd 3300 	strd	r3, r3, [sp]
   1d27c:	aa02      	add	r2, sp, #8
   1d27e:	f000 f9a7 	bl	1d5d0 <SetDataBuffersInfo>
   1d282:	2800      	cmp	r0, #0
   1d284:	f000 8095 	beq.w	1d3b2 <mbedtls_sha_update_internal+0x1d6>
   1d288:	2001      	movs	r0, #1
   1d28a:	b025      	add	sp, #148	; 0x94
   1d28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d290:	2300      	movs	r3, #0
   1d292:	4659      	mov	r1, fp
   1d294:	4648      	mov	r0, r9
   1d296:	e9cd 3300 	strd	r3, r3, [sp]
   1d29a:	aa02      	add	r2, sp, #8
   1d29c:	f000 f998 	bl	1d5d0 <SetDataBuffersInfo>
   1d2a0:	2800      	cmp	r0, #0
   1d2a2:	d1f1      	bne.n	1d288 <mbedtls_sha_update_internal+0xac>
   1d2a4:	465a      	mov	r2, fp
   1d2a6:	4628      	mov	r0, r5
   1d2a8:	a902      	add	r1, sp, #8
   1d2aa:	f000 f9eb 	bl	1d684 <ProcessHashDrv>
   1d2ae:	2800      	cmp	r0, #0
   1d2b0:	d1ea      	bne.n	1d288 <mbedtls_sha_update_internal+0xac>
   1d2b2:	eba6 060b 	sub.w	r6, r6, fp
   1d2b6:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d2b8:	44d9      	add	r9, fp
   1d2ba:	2e00      	cmp	r6, #0
   1d2bc:	d0b9      	beq.n	1d232 <mbedtls_sha_update_internal+0x56>
   1d2be:	3019      	adds	r0, #25
   1d2c0:	4649      	mov	r1, r9
   1d2c2:	4632      	mov	r2, r6
   1d2c4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1d2c8:	f7ff fad0 	bl	1c86c <CC_PalMemCopyPlat>
   1d2cc:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   1d2d0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d2d2:	3cff      	subs	r4, #255	; 0xff
   1d2d4:	4430      	add	r0, r6
   1d2d6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1d2da:	4447      	add	r7, r8
   1d2dc:	6628      	str	r0, [r5, #96]	; 0x60
   1d2de:	d292      	bcs.n	1d206 <mbedtls_sha_update_internal+0x2a>
   1d2e0:	e7ae      	b.n	1d240 <mbedtls_sha_update_internal+0x64>
   1d2e2:	4542      	cmp	r2, r8
   1d2e4:	bf28      	it	cs
   1d2e6:	4642      	movcs	r2, r8
   1d2e8:	4616      	mov	r6, r2
   1d2ea:	4639      	mov	r1, r7
   1d2ec:	4450      	add	r0, sl
   1d2ee:	f7ff fabd 	bl	1c86c <CC_PalMemCopyPlat>
   1d2f2:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d2f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1d2f6:	4430      	add	r0, r6
   1d2f8:	4283      	cmp	r3, r0
   1d2fa:	eb07 0906 	add.w	r9, r7, r6
   1d2fe:	6628      	str	r0, [r5, #96]	; 0x60
   1d300:	eba8 0606 	sub.w	r6, r8, r6
   1d304:	d18c      	bne.n	1d220 <mbedtls_sha_update_internal+0x44>
   1d306:	2b80      	cmp	r3, #128	; 0x80
   1d308:	bf28      	it	cs
   1d30a:	2380      	movcs	r3, #128	; 0x80
   1d30c:	4651      	mov	r1, sl
   1d30e:	461a      	mov	r2, r3
   1d310:	a804      	add	r0, sp, #16
   1d312:	f7ff faab 	bl	1c86c <CC_PalMemCopyPlat>
   1d316:	2300      	movs	r3, #0
   1d318:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1d31a:	aa02      	add	r2, sp, #8
   1d31c:	e9cd 3300 	strd	r3, r3, [sp]
   1d320:	a804      	add	r0, sp, #16
   1d322:	f000 f955 	bl	1d5d0 <SetDataBuffersInfo>
   1d326:	2800      	cmp	r0, #0
   1d328:	d1ae      	bne.n	1d288 <mbedtls_sha_update_internal+0xac>
   1d32a:	4628      	mov	r0, r5
   1d32c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1d32e:	a902      	add	r1, sp, #8
   1d330:	f000 f9a8 	bl	1d684 <ProcessHashDrv>
   1d334:	2800      	cmp	r0, #0
   1d336:	d1a7      	bne.n	1d288 <mbedtls_sha_update_internal+0xac>
   1d338:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1d33a:	6628      	str	r0, [r5, #96]	; 0x60
   1d33c:	e770      	b.n	1d220 <mbedtls_sha_update_internal+0x44>
   1d33e:	2001      	movs	r0, #1
   1d340:	4770      	bx	lr
   1d342:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1d346:	4639      	mov	r1, r7
   1d348:	4632      	mov	r2, r6
   1d34a:	4418      	add	r0, r3
   1d34c:	f7ff fa8e 	bl	1c86c <CC_PalMemCopyPlat>
   1d350:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d352:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1d354:	4430      	add	r0, r6
   1d356:	1ba4      	subs	r4, r4, r6
   1d358:	4437      	add	r7, r6
   1d35a:	6628      	str	r0, [r5, #96]	; 0x60
   1d35c:	e77b      	b.n	1d256 <mbedtls_sha_update_internal+0x7a>
   1d35e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1d360:	4622      	mov	r2, r4
   1d362:	3319      	adds	r3, #25
   1d364:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   1d368:	4639      	mov	r1, r7
   1d36a:	f7ff fa7f 	bl	1c86c <CC_PalMemCopyPlat>
   1d36e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1d370:	4423      	add	r3, r4
   1d372:	662b      	str	r3, [r5, #96]	; 0x60
   1d374:	e779      	b.n	1d26a <mbedtls_sha_update_internal+0x8e>
   1d376:	2a80      	cmp	r2, #128	; 0x80
   1d378:	bf28      	it	cs
   1d37a:	2280      	movcs	r2, #128	; 0x80
   1d37c:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1d380:	a804      	add	r0, sp, #16
   1d382:	f7ff fa73 	bl	1c86c <CC_PalMemCopyPlat>
   1d386:	2300      	movs	r3, #0
   1d388:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1d38a:	a804      	add	r0, sp, #16
   1d38c:	e9cd 3300 	strd	r3, r3, [sp]
   1d390:	aa02      	add	r2, sp, #8
   1d392:	f000 f91d 	bl	1d5d0 <SetDataBuffersInfo>
   1d396:	2800      	cmp	r0, #0
   1d398:	f47f af76 	bne.w	1d288 <mbedtls_sha_update_internal+0xac>
   1d39c:	4628      	mov	r0, r5
   1d39e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1d3a0:	a902      	add	r1, sp, #8
   1d3a2:	f000 f96f 	bl	1d684 <ProcessHashDrv>
   1d3a6:	2800      	cmp	r0, #0
   1d3a8:	f47f af6e 	bne.w	1d288 <mbedtls_sha_update_internal+0xac>
   1d3ac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1d3ae:	6628      	str	r0, [r5, #96]	; 0x60
   1d3b0:	e754      	b.n	1d25c <mbedtls_sha_update_internal+0x80>
   1d3b2:	4632      	mov	r2, r6
   1d3b4:	4628      	mov	r0, r5
   1d3b6:	a902      	add	r1, sp, #8
   1d3b8:	f000 f964 	bl	1d684 <ProcessHashDrv>
   1d3bc:	2800      	cmp	r0, #0
   1d3be:	f47f af63 	bne.w	1d288 <mbedtls_sha_update_internal+0xac>
   1d3c2:	4437      	add	r7, r6
   1d3c4:	1ba4      	subs	r4, r4, r6
   1d3c6:	e74e      	b.n	1d266 <mbedtls_sha_update_internal+0x8a>

0001d3c8 <cc_mbedtls_sha256>:
   1d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3ca:	461c      	mov	r4, r3
   1d3cc:	4605      	mov	r5, r0
   1d3ce:	4811      	ldr	r0, [pc, #68]	; (1d414 <cc_mbedtls_sha256+0x4c>)
   1d3d0:	4616      	mov	r6, r2
   1d3d2:	460f      	mov	r7, r1
   1d3d4:	f7ff fe44 	bl	1d060 <cc_mbedtls_sha256_init>
   1d3d8:	4621      	mov	r1, r4
   1d3da:	480e      	ldr	r0, [pc, #56]	; (1d414 <cc_mbedtls_sha256+0x4c>)
   1d3dc:	f7ff fe5a 	bl	1d094 <cc_mbedtls_sha256_starts>
   1d3e0:	4604      	mov	r4, r0
   1d3e2:	b120      	cbz	r0, 1d3ee <cc_mbedtls_sha256+0x26>
   1d3e4:	480b      	ldr	r0, [pc, #44]	; (1d414 <cc_mbedtls_sha256+0x4c>)
   1d3e6:	f7ff fe4f 	bl	1d088 <cc_mbedtls_sha256_free>
   1d3ea:	4620      	mov	r0, r4
   1d3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d3ee:	463a      	mov	r2, r7
   1d3f0:	4629      	mov	r1, r5
   1d3f2:	4808      	ldr	r0, [pc, #32]	; (1d414 <cc_mbedtls_sha256+0x4c>)
   1d3f4:	f7ff fe62 	bl	1d0bc <cc_mbedtls_sha256_update>
   1d3f8:	4604      	mov	r4, r0
   1d3fa:	2800      	cmp	r0, #0
   1d3fc:	d1f2      	bne.n	1d3e4 <cc_mbedtls_sha256+0x1c>
   1d3fe:	4631      	mov	r1, r6
   1d400:	4804      	ldr	r0, [pc, #16]	; (1d414 <cc_mbedtls_sha256+0x4c>)
   1d402:	f7ff fe85 	bl	1d110 <cc_mbedtls_sha256_finish>
   1d406:	4604      	mov	r4, r0
   1d408:	4802      	ldr	r0, [pc, #8]	; (1d414 <cc_mbedtls_sha256+0x4c>)
   1d40a:	f7ff fe3d 	bl	1d088 <cc_mbedtls_sha256_free>
   1d40e:	4620      	mov	r0, r4
   1d410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d412:	bf00      	nop
   1d414:	20005228 	.word	0x20005228

0001d418 <RNG_PLAT_SetUserRngParameters>:
   1d418:	231c      	movs	r3, #28
   1d41a:	b570      	push	{r4, r5, r6, lr}
   1d41c:	b082      	sub	sp, #8
   1d41e:	a901      	add	r1, sp, #4
   1d420:	4605      	mov	r5, r0
   1d422:	9301      	str	r3, [sp, #4]
   1d424:	f000 f832 	bl	1d48c <CC_PalTrngParamGet>
   1d428:	4604      	mov	r4, r0
   1d42a:	b938      	cbnz	r0, 1d43c <RNG_PLAT_SetUserRngParameters+0x24>
   1d42c:	9b01      	ldr	r3, [sp, #4]
   1d42e:	2b1c      	cmp	r3, #28
   1d430:	d007      	beq.n	1d442 <RNG_PLAT_SetUserRngParameters+0x2a>
   1d432:	4c14      	ldr	r4, [pc, #80]	; (1d484 <RNG_PLAT_SetUserRngParameters+0x6c>)
   1d434:	211c      	movs	r1, #28
   1d436:	4628      	mov	r0, r5
   1d438:	f7ff fa1c 	bl	1c874 <CC_PalMemSetZeroPlat>
   1d43c:	4620      	mov	r0, r4
   1d43e:	b002      	add	sp, #8
   1d440:	bd70      	pop	{r4, r5, r6, pc}
   1d442:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   1d446:	1e13      	subs	r3, r2, #0
   1d448:	bf18      	it	ne
   1d44a:	2301      	movne	r3, #1
   1d44c:	3900      	subs	r1, #0
   1d44e:	bf18      	it	ne
   1d450:	2101      	movne	r1, #1
   1d452:	2601      	movs	r6, #1
   1d454:	6828      	ldr	r0, [r5, #0]
   1d456:	009b      	lsls	r3, r3, #2
   1d458:	68ea      	ldr	r2, [r5, #12]
   1d45a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   1d45e:	2800      	cmp	r0, #0
   1d460:	bf18      	it	ne
   1d462:	f043 0301 	orrne.w	r3, r3, #1
   1d466:	61ee      	str	r6, [r5, #28]
   1d468:	b92a      	cbnz	r2, 1d476 <RNG_PLAT_SetUserRngParameters+0x5e>
   1d46a:	e9c5 3408 	strd	r3, r4, [r5, #32]
   1d46e:	2b00      	cmp	r3, #0
   1d470:	d1e4      	bne.n	1d43c <RNG_PLAT_SetUserRngParameters+0x24>
   1d472:	4c05      	ldr	r4, [pc, #20]	; (1d488 <RNG_PLAT_SetUserRngParameters+0x70>)
   1d474:	e7de      	b.n	1d434 <RNG_PLAT_SetUserRngParameters+0x1c>
   1d476:	4620      	mov	r0, r4
   1d478:	f043 0308 	orr.w	r3, r3, #8
   1d47c:	e9c5 3408 	strd	r3, r4, [r5, #32]
   1d480:	b002      	add	sp, #8
   1d482:	bd70      	pop	{r4, r5, r6, pc}
   1d484:	00f00c37 	.word	0x00f00c37
   1d488:	00f00c0e 	.word	0x00f00c0e

0001d48c <CC_PalTrngParamGet>:
   1d48c:	4603      	mov	r3, r0
   1d48e:	b118      	cbz	r0, 1d498 <CC_PalTrngParamGet+0xc>
   1d490:	b111      	cbz	r1, 1d498 <CC_PalTrngParamGet+0xc>
   1d492:	680a      	ldr	r2, [r1, #0]
   1d494:	2a1c      	cmp	r2, #28
   1d496:	d001      	beq.n	1d49c <CC_PalTrngParamGet+0x10>
   1d498:	2001      	movs	r0, #1
   1d49a:	4770      	bx	lr
   1d49c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   1d4a0:	f8d2 1c10 	ldr.w	r1, [r2, #3088]	; 0xc10
   1d4a4:	3101      	adds	r1, #1
   1d4a6:	bf0c      	ite	eq
   1d4a8:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   1d4ac:	f8d2 1c10 	ldrne.w	r1, [r2, #3088]	; 0xc10
   1d4b0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   1d4b4:	6001      	str	r1, [r0, #0]
   1d4b6:	f8d2 1c14 	ldr.w	r1, [r2, #3092]	; 0xc14
   1d4ba:	3101      	adds	r1, #1
   1d4bc:	bf0c      	ite	eq
   1d4be:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   1d4c2:	f8d2 1c14 	ldrne.w	r1, [r2, #3092]	; 0xc14
   1d4c6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   1d4ca:	6041      	str	r1, [r0, #4]
   1d4cc:	f8d2 1c18 	ldr.w	r1, [r2, #3096]	; 0xc18
   1d4d0:	3101      	adds	r1, #1
   1d4d2:	bf0c      	ite	eq
   1d4d4:	f640 0134 	movweq	r1, #2100	; 0x834
   1d4d8:	f8d2 1c18 	ldrne.w	r1, [r2, #3096]	; 0xc18
   1d4dc:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   1d4e0:	6081      	str	r1, [r0, #8]
   1d4e2:	f8d2 1c1c 	ldr.w	r1, [r2, #3100]	; 0xc1c
   1d4e6:	3101      	adds	r1, #1
   1d4e8:	bf0c      	ite	eq
   1d4ea:	f640 0134 	movweq	r1, #2100	; 0x834
   1d4ee:	f8d2 1c1c 	ldrne.w	r1, [r2, #3100]	; 0xc1c
   1d4f2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   1d4f6:	60c1      	str	r1, [r0, #12]
   1d4f8:	f8d2 1c00 	ldr.w	r1, [r2, #3072]	; 0xc00
   1d4fc:	3101      	adds	r1, #1
   1d4fe:	bf0c      	ite	eq
   1d500:	2190      	moveq	r1, #144	; 0x90
   1d502:	f8d2 1c00 	ldrne.w	r1, [r2, #3072]	; 0xc00
   1d506:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   1d50a:	6101      	str	r1, [r0, #16]
   1d50c:	f8d2 1c04 	ldr.w	r1, [r2, #3076]	; 0xc04
   1d510:	3101      	adds	r1, #1
   1d512:	bf0c      	ite	eq
   1d514:	2151      	moveq	r1, #81	; 0x51
   1d516:	f8d2 1c04 	ldrne.w	r1, [r2, #3076]	; 0xc04
   1d51a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   1d51e:	6141      	str	r1, [r0, #20]
   1d520:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
   1d524:	2000      	movs	r0, #0
   1d526:	3101      	adds	r1, #1
   1d528:	bf0c      	ite	eq
   1d52a:	f240 3237 	movweq	r2, #823	; 0x337
   1d52e:	f8d2 2c08 	ldrne.w	r2, [r2, #3080]	; 0xc08
   1d532:	619a      	str	r2, [r3, #24]
   1d534:	4770      	bx	lr
   1d536:	bf00      	nop

0001d538 <LLF_RND_WaitRngInterrupt>:
   1d538:	4601      	mov	r1, r0
   1d53a:	b508      	push	{r3, lr}
   1d53c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1d540:	f7ff f912 	bl	1c768 <CC_HalWaitInterruptRND>
   1d544:	2200      	movs	r2, #0
   1d546:	4b03      	ldr	r3, [pc, #12]	; (1d554 <LLF_RND_WaitRngInterrupt+0x1c>)
   1d548:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1d54c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1d550:	bd08      	pop	{r3, pc}
   1d552:	bf00      	nop
   1d554:	50845000 	.word	0x50845000

0001d558 <LLF_RND_GetRoscSampleCnt>:
   1d558:	3801      	subs	r0, #1
   1d55a:	2807      	cmp	r0, #7
   1d55c:	d805      	bhi.n	1d56a <LLF_RND_GetRoscSampleCnt+0x12>
   1d55e:	e8df f000 	tbb	[pc, r0]
   1d562:	0e10      	.short	0x0e10
   1d564:	04040a04 	.word	0x04040a04
   1d568:	0604      	.short	0x0604
   1d56a:	4807      	ldr	r0, [pc, #28]	; (1d588 <LLF_RND_GetRoscSampleCnt+0x30>)
   1d56c:	4770      	bx	lr
   1d56e:	68cb      	ldr	r3, [r1, #12]
   1d570:	2000      	movs	r0, #0
   1d572:	624b      	str	r3, [r1, #36]	; 0x24
   1d574:	4770      	bx	lr
   1d576:	688b      	ldr	r3, [r1, #8]
   1d578:	2000      	movs	r0, #0
   1d57a:	624b      	str	r3, [r1, #36]	; 0x24
   1d57c:	4770      	bx	lr
   1d57e:	684b      	ldr	r3, [r1, #4]
   1d580:	e7f6      	b.n	1d570 <LLF_RND_GetRoscSampleCnt+0x18>
   1d582:	680b      	ldr	r3, [r1, #0]
   1d584:	e7f4      	b.n	1d570 <LLF_RND_GetRoscSampleCnt+0x18>
   1d586:	bf00      	nop
   1d588:	00f10c31 	.word	0x00f10c31

0001d58c <LLF_RND_GetFastestRosc>:
   1d58c:	680b      	ldr	r3, [r1, #0]
   1d58e:	e002      	b.n	1d596 <LLF_RND_GetFastestRosc+0xa>
   1d590:	2b08      	cmp	r3, #8
   1d592:	600b      	str	r3, [r1, #0]
   1d594:	d806      	bhi.n	1d5a4 <LLF_RND_GetFastestRosc+0x18>
   1d596:	6a02      	ldr	r2, [r0, #32]
   1d598:	4213      	tst	r3, r2
   1d59a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1d59e:	d0f7      	beq.n	1d590 <LLF_RND_GetFastestRosc+0x4>
   1d5a0:	2000      	movs	r0, #0
   1d5a2:	4770      	bx	lr
   1d5a4:	4800      	ldr	r0, [pc, #0]	; (1d5a8 <LLF_RND_GetFastestRosc+0x1c>)
   1d5a6:	4770      	bx	lr
   1d5a8:	00f10c31 	.word	0x00f10c31

0001d5ac <LLF_RND_TurnOffTrng>:
   1d5ac:	2300      	movs	r3, #0
   1d5ae:	b510      	push	{r4, lr}
   1d5b0:	4c06      	ldr	r4, [pc, #24]	; (1d5cc <LLF_RND_TurnOffTrng+0x20>)
   1d5b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1d5b6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1d5ba:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   1d5be:	f7ff f8b9 	bl	1c734 <CC_HalClearInterruptBit>
   1d5c2:	f04f 33ff 	mov.w	r3, #4294967295
   1d5c6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1d5ca:	bd10      	pop	{r4, pc}
   1d5cc:	50845000 	.word	0x50845000

0001d5d0 <SetDataBuffersInfo>:
   1d5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5d4:	2400      	movs	r4, #0
   1d5d6:	b082      	sub	sp, #8
   1d5d8:	4615      	mov	r5, r2
   1d5da:	461e      	mov	r6, r3
   1d5dc:	2201      	movs	r2, #1
   1d5de:	f10d 0307 	add.w	r3, sp, #7
   1d5e2:	4607      	mov	r7, r0
   1d5e4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   1d5e8:	f88d 4007 	strb.w	r4, [sp, #7]
   1d5ec:	f001 f830 	bl	1e650 <CC_PalDataBufferAttrGet>
   1d5f0:	b9d0      	cbnz	r0, 1d628 <SetDataBuffersInfo+0x58>
   1d5f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d5f6:	4604      	mov	r4, r0
   1d5f8:	602f      	str	r7, [r5, #0]
   1d5fa:	712b      	strb	r3, [r5, #4]
   1d5fc:	f1b8 0f00 	cmp.w	r8, #0
   1d600:	d00e      	beq.n	1d620 <SetDataBuffersInfo+0x50>
   1d602:	b14e      	cbz	r6, 1d618 <SetDataBuffersInfo+0x48>
   1d604:	4602      	mov	r2, r0
   1d606:	9908      	ldr	r1, [sp, #32]
   1d608:	4630      	mov	r0, r6
   1d60a:	f10d 0307 	add.w	r3, sp, #7
   1d60e:	f001 f81f 	bl	1e650 <CC_PalDataBufferAttrGet>
   1d612:	b948      	cbnz	r0, 1d628 <SetDataBuffersInfo+0x58>
   1d614:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d618:	f8c8 6000 	str.w	r6, [r8]
   1d61c:	f888 3004 	strb.w	r3, [r8, #4]
   1d620:	4620      	mov	r0, r4
   1d622:	b002      	add	sp, #8
   1d624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d628:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1d62c:	4620      	mov	r0, r4
   1d62e:	b002      	add	sp, #8
   1d630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d634 <InitHashDrv>:
   1d634:	b1d8      	cbz	r0, 1d66e <InitHashDrv+0x3a>
   1d636:	b508      	push	{r3, lr}
   1d638:	6803      	ldr	r3, [r0, #0]
   1d63a:	2b01      	cmp	r3, #1
   1d63c:	d004      	beq.n	1d648 <InitHashDrv+0x14>
   1d63e:	2b02      	cmp	r3, #2
   1d640:	d00f      	beq.n	1d662 <InitHashDrv+0x2e>
   1d642:	b143      	cbz	r3, 1d656 <InitHashDrv+0x22>
   1d644:	480b      	ldr	r0, [pc, #44]	; (1d674 <InitHashDrv+0x40>)
   1d646:	bd08      	pop	{r3, pc}
   1d648:	2220      	movs	r2, #32
   1d64a:	490b      	ldr	r1, [pc, #44]	; (1d678 <InitHashDrv+0x44>)
   1d64c:	3008      	adds	r0, #8
   1d64e:	f7ff f90d 	bl	1c86c <CC_PalMemCopyPlat>
   1d652:	2000      	movs	r0, #0
   1d654:	bd08      	pop	{r3, pc}
   1d656:	2214      	movs	r2, #20
   1d658:	4908      	ldr	r1, [pc, #32]	; (1d67c <InitHashDrv+0x48>)
   1d65a:	3008      	adds	r0, #8
   1d65c:	f7ff f906 	bl	1c86c <CC_PalMemCopyPlat>
   1d660:	e7f7      	b.n	1d652 <InitHashDrv+0x1e>
   1d662:	2220      	movs	r2, #32
   1d664:	4906      	ldr	r1, [pc, #24]	; (1d680 <InitHashDrv+0x4c>)
   1d666:	3008      	adds	r0, #8
   1d668:	f7ff f900 	bl	1c86c <CC_PalMemCopyPlat>
   1d66c:	e7f1      	b.n	1d652 <InitHashDrv+0x1e>
   1d66e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1d672:	4770      	bx	lr
   1d674:	00f30001 	.word	0x00f30001
   1d678:	000315e0 	.word	0x000315e0
   1d67c:	00031620 	.word	0x00031620
   1d680:	00031600 	.word	0x00031600

0001d684 <ProcessHashDrv>:
   1d684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d688:	2900      	cmp	r1, #0
   1d68a:	f000 80eb 	beq.w	1d864 <ProcessHashDrv+0x1e0>
   1d68e:	4604      	mov	r4, r0
   1d690:	2800      	cmp	r0, #0
   1d692:	f000 80eb 	beq.w	1d86c <ProcessHashDrv+0x1e8>
   1d696:	6803      	ldr	r3, [r0, #0]
   1d698:	4688      	mov	r8, r1
   1d69a:	4691      	mov	r9, r2
   1d69c:	2b00      	cmp	r3, #0
   1d69e:	f000 80b5 	beq.w	1d80c <ProcessHashDrv+0x188>
   1d6a2:	3b01      	subs	r3, #1
   1d6a4:	2b01      	cmp	r3, #1
   1d6a6:	f200 80c9 	bhi.w	1d83c <ProcessHashDrv+0x1b8>
   1d6aa:	f04f 31ff 	mov.w	r1, #4294967295
   1d6ae:	4871      	ldr	r0, [pc, #452]	; (1d874 <ProcessHashDrv+0x1f0>)
   1d6b0:	f04f 0a02 	mov.w	sl, #2
   1d6b4:	f7ff f8f6 	bl	1c8a4 <CC_PalMutexLock>
   1d6b8:	2800      	cmp	r0, #0
   1d6ba:	f040 80b1 	bne.w	1d820 <ProcessHashDrv+0x19c>
   1d6be:	2000      	movs	r0, #0
   1d6c0:	f7ff f920 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1d6c4:	4607      	mov	r7, r0
   1d6c6:	2800      	cmp	r0, #0
   1d6c8:	f040 80b4 	bne.w	1d834 <ProcessHashDrv+0x1b0>
   1d6cc:	4d6a      	ldr	r5, [pc, #424]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d6ce:	f8d5 6910 	ldr.w	r6, [r5, #2320]	; 0x910
   1d6d2:	2e00      	cmp	r6, #0
   1d6d4:	d1fb      	bne.n	1d6ce <ProcessHashDrv+0x4a>
   1d6d6:	f04f 30ff 	mov.w	r0, #4294967295
   1d6da:	f7ff f82b 	bl	1c734 <CC_HalClearInterruptBit>
   1d6de:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1d6e2:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   1d6e6:	f7ff f833 	bl	1c750 <CC_HalMaskInterrupt>
   1d6ea:	2301      	movs	r3, #1
   1d6ec:	2207      	movs	r2, #7
   1d6ee:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   1d6f2:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
   1d6f6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1d6fa:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1d6fe:	f8c5 66a4 	str.w	r6, [r5, #1700]	; 0x6a4
   1d702:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1d704:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   1d708:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1d70a:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1d70e:	f8c5 a7c0 	str.w	sl, [r5, #1984]	; 0x7c0
   1d712:	6823      	ldr	r3, [r4, #0]
   1d714:	b15b      	cbz	r3, 1d72e <ProcessHashDrv+0xaa>
   1d716:	3b01      	subs	r3, #1
   1d718:	2b01      	cmp	r3, #1
   1d71a:	d818      	bhi.n	1d74e <ProcessHashDrv+0xca>
   1d71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d71e:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1d722:	6a23      	ldr	r3, [r4, #32]
   1d724:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   1d728:	69e3      	ldr	r3, [r4, #28]
   1d72a:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1d72e:	69a2      	ldr	r2, [r4, #24]
   1d730:	4b51      	ldr	r3, [pc, #324]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d732:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1d736:	6962      	ldr	r2, [r4, #20]
   1d738:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1d73c:	6922      	ldr	r2, [r4, #16]
   1d73e:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1d742:	68e2      	ldr	r2, [r4, #12]
   1d744:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   1d748:	68a2      	ldr	r2, [r4, #8]
   1d74a:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1d74e:	f1b9 0f00 	cmp.w	r9, #0
   1d752:	d056      	beq.n	1d802 <ProcessHashDrv+0x17e>
   1d754:	6863      	ldr	r3, [r4, #4]
   1d756:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1d75a:	2b01      	cmp	r3, #1
   1d75c:	bf04      	itt	eq
   1d75e:	4a46      	ldreq	r2, [pc, #280]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d760:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1d764:	f898 3004 	ldrb.w	r3, [r8, #4]
   1d768:	f8d8 1000 	ldr.w	r1, [r8]
   1d76c:	4a42      	ldr	r2, [pc, #264]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d76e:	005b      	lsls	r3, r3, #1
   1d770:	f003 0302 	and.w	r3, r3, #2
   1d774:	f8c2 3b0c 	str.w	r3, [r2, #2828]	; 0xb0c
   1d778:	f8c2 1c28 	str.w	r1, [r2, #3112]	; 0xc28
   1d77c:	f8c2 9c2c 	str.w	r9, [r2, #3116]	; 0xc2c
   1d780:	f7fe ffec 	bl	1c75c <CC_HalWaitInterrupt>
   1d784:	4607      	mov	r7, r0
   1d786:	6823      	ldr	r3, [r4, #0]
   1d788:	b163      	cbz	r3, 1d7a4 <ProcessHashDrv+0x120>
   1d78a:	3b01      	subs	r3, #1
   1d78c:	2b01      	cmp	r3, #1
   1d78e:	d819      	bhi.n	1d7c4 <ProcessHashDrv+0x140>
   1d790:	4b39      	ldr	r3, [pc, #228]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d792:	f8d3 265c 	ldr.w	r2, [r3, #1628]	; 0x65c
   1d796:	6262      	str	r2, [r4, #36]	; 0x24
   1d798:	f8d3 2658 	ldr.w	r2, [r3, #1624]	; 0x658
   1d79c:	6222      	str	r2, [r4, #32]
   1d79e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
   1d7a2:	61e3      	str	r3, [r4, #28]
   1d7a4:	4b34      	ldr	r3, [pc, #208]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d7a6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1d7aa:	61a2      	str	r2, [r4, #24]
   1d7ac:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1d7b0:	6162      	str	r2, [r4, #20]
   1d7b2:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   1d7b6:	6122      	str	r2, [r4, #16]
   1d7b8:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1d7bc:	60e2      	str	r2, [r4, #12]
   1d7be:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   1d7c2:	60a3      	str	r3, [r4, #8]
   1d7c4:	2200      	movs	r2, #0
   1d7c6:	2101      	movs	r1, #1
   1d7c8:	4b2b      	ldr	r3, [pc, #172]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d7ca:	f8d3 07cc 	ldr.w	r0, [r3, #1996]	; 0x7cc
   1d7ce:	64a0      	str	r0, [r4, #72]	; 0x48
   1d7d0:	f8d3 07d0 	ldr.w	r0, [r3, #2000]	; 0x7d0
   1d7d4:	64e0      	str	r0, [r4, #76]	; 0x4c
   1d7d6:	f8c3 17c4 	str.w	r1, [r3, #1988]	; 0x7c4
   1d7da:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
   1d7de:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8
   1d7e2:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
   1d7e6:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
   1d7ea:	bbaf      	cbnz	r7, 1d858 <ProcessHashDrv+0x1d4>
   1d7ec:	2001      	movs	r0, #1
   1d7ee:	f7ff f889 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1d7f2:	bb68      	cbnz	r0, 1d850 <ProcessHashDrv+0x1cc>
   1d7f4:	481f      	ldr	r0, [pc, #124]	; (1d874 <ProcessHashDrv+0x1f0>)
   1d7f6:	f7ff f85d 	bl	1c8b4 <CC_PalMutexUnlock>
   1d7fa:	bb18      	cbnz	r0, 1d844 <ProcessHashDrv+0x1c0>
   1d7fc:	4638      	mov	r0, r7
   1d7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d802:	2204      	movs	r2, #4
   1d804:	4b1c      	ldr	r3, [pc, #112]	; (1d878 <ProcessHashDrv+0x1f4>)
   1d806:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8
   1d80a:	e7bc      	b.n	1d786 <ProcessHashDrv+0x102>
   1d80c:	f04f 31ff 	mov.w	r1, #4294967295
   1d810:	4818      	ldr	r0, [pc, #96]	; (1d874 <ProcessHashDrv+0x1f0>)
   1d812:	f04f 0a01 	mov.w	sl, #1
   1d816:	f7ff f845 	bl	1c8a4 <CC_PalMutexLock>
   1d81a:	2800      	cmp	r0, #0
   1d81c:	f43f af4f 	beq.w	1d6be <ProcessHashDrv+0x3a>
   1d820:	4816      	ldr	r0, [pc, #88]	; (1d87c <ProcessHashDrv+0x1f8>)
   1d822:	f7fe f917 	bl	1ba54 <CC_PalAbort>
   1d826:	2000      	movs	r0, #0
   1d828:	f7ff f86c 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1d82c:	4607      	mov	r7, r0
   1d82e:	2800      	cmp	r0, #0
   1d830:	f43f af4c 	beq.w	1d6cc <ProcessHashDrv+0x48>
   1d834:	4812      	ldr	r0, [pc, #72]	; (1d880 <ProcessHashDrv+0x1fc>)
   1d836:	f7fe f90d 	bl	1ba54 <CC_PalAbort>
   1d83a:	e747      	b.n	1d6cc <ProcessHashDrv+0x48>
   1d83c:	4f11      	ldr	r7, [pc, #68]	; (1d884 <ProcessHashDrv+0x200>)
   1d83e:	4638      	mov	r0, r7
   1d840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d844:	4810      	ldr	r0, [pc, #64]	; (1d888 <ProcessHashDrv+0x204>)
   1d846:	f7fe f905 	bl	1ba54 <CC_PalAbort>
   1d84a:	4638      	mov	r0, r7
   1d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d850:	480e      	ldr	r0, [pc, #56]	; (1d88c <ProcessHashDrv+0x208>)
   1d852:	f7fe f8ff 	bl	1ba54 <CC_PalAbort>
   1d856:	e7cd      	b.n	1d7f4 <ProcessHashDrv+0x170>
   1d858:	2110      	movs	r1, #16
   1d85a:	f104 0008 	add.w	r0, r4, #8
   1d85e:	f7ff f809 	bl	1c874 <CC_PalMemSetZeroPlat>
   1d862:	e7c3      	b.n	1d7ec <ProcessHashDrv+0x168>
   1d864:	4f0a      	ldr	r7, [pc, #40]	; (1d890 <ProcessHashDrv+0x20c>)
   1d866:	4638      	mov	r0, r7
   1d868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d86c:	f44f 0773 	mov.w	r7, #15925248	; 0xf30000
   1d870:	e7c4      	b.n	1d7fc <ProcessHashDrv+0x178>
   1d872:	bf00      	nop
   1d874:	20000c48 	.word	0x20000c48
   1d878:	50845000 	.word	0x50845000
   1d87c:	00031514 	.word	0x00031514
   1d880:	0003152c 	.word	0x0003152c
   1d884:	00f30001 	.word	0x00f30001
   1d888:	0003156c 	.word	0x0003156c
   1d88c:	0003154c 	.word	0x0003154c
   1d890:	00f30003 	.word	0x00f30003

0001d894 <FinishHashDrv>:
   1d894:	b3a0      	cbz	r0, 1d900 <FinishHashDrv+0x6c>
   1d896:	4603      	mov	r3, r0
   1d898:	b470      	push	{r4, r5, r6}
   1d89a:	e9d0 4002 	ldrd	r4, r0, [r0, #8]
   1d89e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   1d8a2:	ba26      	rev	r6, r4
   1d8a4:	ba05      	rev	r5, r0
   1d8a6:	ba0c      	rev	r4, r1
   1d8a8:	ba10      	rev	r0, r2
   1d8aa:	e9c3 4004 	strd	r4, r0, [r3, #16]
   1d8ae:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
   1d8b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1d8b4:	ba09      	rev	r1, r1
   1d8b6:	e9c3 6502 	strd	r6, r5, [r3, #8]
   1d8ba:	ba12      	rev	r2, r2
   1d8bc:	6199      	str	r1, [r3, #24]
   1d8be:	ba00      	rev	r0, r0
   1d8c0:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
   1d8c4:	ba25      	rev	r5, r4
   1d8c6:	ba0c      	rev	r4, r1
   1d8c8:	e9c3 2507 	strd	r2, r5, [r3, #28]
   1d8cc:	e9d3 120b 	ldrd	r1, r2, [r3, #44]	; 0x2c
   1d8d0:	e9c3 4009 	strd	r4, r0, [r3, #36]	; 0x24
   1d8d4:	ba09      	rev	r1, r1
   1d8d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1d8d8:	ba12      	rev	r2, r2
   1d8da:	62d9      	str	r1, [r3, #44]	; 0x2c
   1d8dc:	e9d3 410d 	ldrd	r4, r1, [r3, #52]	; 0x34
   1d8e0:	ba25      	rev	r5, r4
   1d8e2:	e9c3 250c 	strd	r2, r5, [r3, #48]	; 0x30
   1d8e6:	ba0c      	rev	r4, r1
   1d8e8:	ba00      	rev	r0, r0
   1d8ea:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
   1d8ee:	ba09      	rev	r1, r1
   1d8f0:	ba12      	rev	r2, r2
   1d8f2:	e9c3 400e 	strd	r4, r0, [r3, #56]	; 0x38
   1d8f6:	6419      	str	r1, [r3, #64]	; 0x40
   1d8f8:	2000      	movs	r0, #0
   1d8fa:	645a      	str	r2, [r3, #68]	; 0x44
   1d8fc:	bc70      	pop	{r4, r5, r6}
   1d8fe:	4770      	bx	lr
   1d900:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1d904:	4770      	bx	lr
   1d906:	bf00      	nop

0001d908 <InitAes>:
   1d908:	b570      	push	{r4, r5, r6, lr}
   1d90a:	2800      	cmp	r0, #0
   1d90c:	d04d      	beq.n	1d9aa <InitAes+0xa2>
   1d90e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1d910:	4604      	mov	r4, r0
   1d912:	2b03      	cmp	r3, #3
   1d914:	dd3c      	ble.n	1d990 <InitAes+0x88>
   1d916:	3b06      	subs	r3, #6
   1d918:	2b01      	cmp	r3, #1
   1d91a:	d83b      	bhi.n	1d994 <InitAes+0x8c>
   1d91c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d91e:	2b01      	cmp	r3, #1
   1d920:	d83b      	bhi.n	1d99a <InitAes+0x92>
   1d922:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1d924:	2b01      	cmp	r3, #1
   1d926:	d83d      	bhi.n	1d9a4 <InitAes+0x9c>
   1d928:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1d92a:	2b01      	cmp	r3, #1
   1d92c:	d841      	bhi.n	1d9b2 <InitAes+0xaa>
   1d92e:	4e22      	ldr	r6, [pc, #136]	; (1d9b8 <InitAes+0xb0>)
   1d930:	f8d6 5910 	ldr.w	r5, [r6, #2320]	; 0x910
   1d934:	2d00      	cmp	r5, #0
   1d936:	d1fb      	bne.n	1d930 <InitAes+0x28>
   1d938:	f04f 30ff 	mov.w	r0, #4294967295
   1d93c:	f7fe fefa 	bl	1c734 <CC_HalClearInterruptBit>
   1d940:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1d944:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   1d948:	f7fe ff02 	bl	1c750 <CC_HalMaskInterrupt>
   1d94c:	2301      	movs	r3, #1
   1d94e:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
   1d952:	f8c6 54bc 	str.w	r5, [r6, #1212]	; 0x4bc
   1d956:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d958:	f023 0204 	bic.w	r2, r3, #4
   1d95c:	2a03      	cmp	r2, #3
   1d95e:	bf18      	it	ne
   1d960:	6ba1      	ldrne	r1, [r4, #56]	; 0x38
   1d962:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1d964:	bf0c      	ite	eq
   1d966:	4629      	moveq	r1, r5
   1d968:	f001 0101 	andne.w	r1, r1, #1
   1d96c:	2a02      	cmp	r2, #2
   1d96e:	d817      	bhi.n	1d9a0 <InitAes+0x98>
   1d970:	009b      	lsls	r3, r3, #2
   1d972:	f003 031c 	and.w	r3, r3, #28
   1d976:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   1d97a:	4a0f      	ldr	r2, [pc, #60]	; (1d9b8 <InitAes+0xb0>)
   1d97c:	430b      	orrs	r3, r1
   1d97e:	f8c2 34c0 	str.w	r3, [r2, #1216]	; 0x4c0
   1d982:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d984:	2b07      	cmp	r3, #7
   1d986:	d106      	bne.n	1d996 <InitAes+0x8e>
   1d988:	2301      	movs	r3, #1
   1d98a:	f8c2 347c 	str.w	r3, [r2, #1148]	; 0x47c
   1d98e:	e002      	b.n	1d996 <InitAes+0x8e>
   1d990:	2b00      	cmp	r3, #0
   1d992:	dac3      	bge.n	1d91c <InitAes+0x14>
   1d994:	4d09      	ldr	r5, [pc, #36]	; (1d9bc <InitAes+0xb4>)
   1d996:	4628      	mov	r0, r5
   1d998:	bd70      	pop	{r4, r5, r6, pc}
   1d99a:	4d09      	ldr	r5, [pc, #36]	; (1d9c0 <InitAes+0xb8>)
   1d99c:	4628      	mov	r0, r5
   1d99e:	bd70      	pop	{r4, r5, r6, pc}
   1d9a0:	4d08      	ldr	r5, [pc, #32]	; (1d9c4 <InitAes+0xbc>)
   1d9a2:	e7f8      	b.n	1d996 <InitAes+0x8e>
   1d9a4:	4d08      	ldr	r5, [pc, #32]	; (1d9c8 <InitAes+0xc0>)
   1d9a6:	4628      	mov	r0, r5
   1d9a8:	bd70      	pop	{r4, r5, r6, pc}
   1d9aa:	f44f 0571 	mov.w	r5, #15794176	; 0xf10000
   1d9ae:	4628      	mov	r0, r5
   1d9b0:	bd70      	pop	{r4, r5, r6, pc}
   1d9b2:	4d06      	ldr	r5, [pc, #24]	; (1d9cc <InitAes+0xc4>)
   1d9b4:	e7ef      	b.n	1d996 <InitAes+0x8e>
   1d9b6:	bf00      	nop
   1d9b8:	50845000 	.word	0x50845000
   1d9bc:	00f10001 	.word	0x00f10001
   1d9c0:	00f10002 	.word	0x00f10002
   1d9c4:	00f10006 	.word	0x00f10006
   1d9c8:	00f10003 	.word	0x00f10003
   1d9cc:	00f10004 	.word	0x00f10004

0001d9d0 <LoadAesKey>:
   1d9d0:	2800      	cmp	r0, #0
   1d9d2:	d07d      	beq.n	1dad0 <LoadAesKey+0x100>
   1d9d4:	b538      	push	{r3, r4, r5, lr}
   1d9d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1d9da:	4604      	mov	r4, r0
   1d9dc:	2b00      	cmp	r3, #0
   1d9de:	d055      	beq.n	1da8c <LoadAesKey+0xbc>
   1d9e0:	2b02      	cmp	r3, #2
   1d9e2:	d023      	beq.n	1da2c <LoadAesKey+0x5c>
   1d9e4:	483c      	ldr	r0, [pc, #240]	; (1dad8 <LoadAesKey+0x108>)
   1d9e6:	4d3d      	ldr	r5, [pc, #244]	; (1dadc <LoadAesKey+0x10c>)
   1d9e8:	682a      	ldr	r2, [r5, #0]
   1d9ea:	4b3d      	ldr	r3, [pc, #244]	; (1dae0 <LoadAesKey+0x110>)
   1d9ec:	6812      	ldr	r2, [r2, #0]
   1d9ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1d9f2:	682a      	ldr	r2, [r5, #0]
   1d9f4:	6852      	ldr	r2, [r2, #4]
   1d9f6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1d9fa:	682a      	ldr	r2, [r5, #0]
   1d9fc:	6892      	ldr	r2, [r2, #8]
   1d9fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1da02:	682a      	ldr	r2, [r5, #0]
   1da04:	68d2      	ldr	r2, [r2, #12]
   1da06:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1da0a:	682a      	ldr	r2, [r5, #0]
   1da0c:	6912      	ldr	r2, [r2, #16]
   1da0e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1da12:	682a      	ldr	r2, [r5, #0]
   1da14:	6952      	ldr	r2, [r2, #20]
   1da16:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
   1da1a:	682a      	ldr	r2, [r5, #0]
   1da1c:	6992      	ldr	r2, [r2, #24]
   1da1e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
   1da22:	682a      	ldr	r2, [r5, #0]
   1da24:	69d2      	ldr	r2, [r2, #28]
   1da26:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   1da2a:	bd38      	pop	{r3, r4, r5, pc}
   1da2c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1da2e:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1da30:	f000 fb32 	bl	1e098 <kmu_validate_slot_and_size_no_kdr>
   1da34:	4d29      	ldr	r5, [pc, #164]	; (1dadc <LoadAesKey+0x10c>)
   1da36:	2800      	cmp	r0, #0
   1da38:	d1d6      	bne.n	1d9e8 <LoadAesKey+0x18>
   1da3a:	682a      	ldr	r2, [r5, #0]
   1da3c:	4b28      	ldr	r3, [pc, #160]	; (1dae0 <LoadAesKey+0x110>)
   1da3e:	6812      	ldr	r2, [r2, #0]
   1da40:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1da44:	682a      	ldr	r2, [r5, #0]
   1da46:	6852      	ldr	r2, [r2, #4]
   1da48:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1da4c:	682a      	ldr	r2, [r5, #0]
   1da4e:	6892      	ldr	r2, [r2, #8]
   1da50:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1da54:	682a      	ldr	r2, [r5, #0]
   1da56:	68d2      	ldr	r2, [r2, #12]
   1da58:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1da5c:	682a      	ldr	r2, [r5, #0]
   1da5e:	6912      	ldr	r2, [r2, #16]
   1da60:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1da64:	682a      	ldr	r2, [r5, #0]
   1da66:	6952      	ldr	r2, [r2, #20]
   1da68:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
   1da6c:	682a      	ldr	r2, [r5, #0]
   1da6e:	6992      	ldr	r2, [r2, #24]
   1da70:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
   1da74:	682a      	ldr	r2, [r5, #0]
   1da76:	69d2      	ldr	r2, [r2, #28]
   1da78:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   1da7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1da7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1da80:	f000 fb20 	bl	1e0c4 <kmu_load_key_aes>
   1da84:	2800      	cmp	r0, #0
   1da86:	d1af      	bne.n	1d9e8 <LoadAesKey+0x18>
   1da88:	2000      	movs	r0, #0
   1da8a:	bd38      	pop	{r3, r4, r5, pc}
   1da8c:	6902      	ldr	r2, [r0, #16]
   1da8e:	4b14      	ldr	r3, [pc, #80]	; (1dae0 <LoadAesKey+0x110>)
   1da90:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1da94:	6942      	ldr	r2, [r0, #20]
   1da96:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1da9a:	6982      	ldr	r2, [r0, #24]
   1da9c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1daa0:	69c2      	ldr	r2, [r0, #28]
   1daa2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1daa6:	6b02      	ldr	r2, [r0, #48]	; 0x30
   1daa8:	3a01      	subs	r2, #1
   1daaa:	2a01      	cmp	r2, #1
   1daac:	d8ec      	bhi.n	1da88 <LoadAesKey+0xb8>
   1daae:	6a02      	ldr	r2, [r0, #32]
   1dab0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1dab4:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1dab6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
   1daba:	6b02      	ldr	r2, [r0, #48]	; 0x30
   1dabc:	2a02      	cmp	r2, #2
   1dabe:	d1e3      	bne.n	1da88 <LoadAesKey+0xb8>
   1dac0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1dac2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
   1dac6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1dac8:	2000      	movs	r0, #0
   1daca:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   1dace:	e7dc      	b.n	1da8a <LoadAesKey+0xba>
   1dad0:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1dad4:	4770      	bx	lr
   1dad6:	bf00      	nop
   1dad8:	00f10009 	.word	0x00f10009
   1dadc:	20000c34 	.word	0x20000c34
   1dae0:	50845000 	.word	0x50845000

0001dae4 <write_invalid_key>:
   1dae4:	4a11      	ldr	r2, [pc, #68]	; (1db2c <write_invalid_key+0x48>)
   1dae6:	4b12      	ldr	r3, [pc, #72]	; (1db30 <write_invalid_key+0x4c>)
   1dae8:	6811      	ldr	r1, [r2, #0]
   1daea:	6809      	ldr	r1, [r1, #0]
   1daec:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   1daf0:	6811      	ldr	r1, [r2, #0]
   1daf2:	6849      	ldr	r1, [r1, #4]
   1daf4:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   1daf8:	6811      	ldr	r1, [r2, #0]
   1dafa:	6889      	ldr	r1, [r1, #8]
   1dafc:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   1db00:	6811      	ldr	r1, [r2, #0]
   1db02:	68c9      	ldr	r1, [r1, #12]
   1db04:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
   1db08:	6811      	ldr	r1, [r2, #0]
   1db0a:	6909      	ldr	r1, [r1, #16]
   1db0c:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   1db10:	6811      	ldr	r1, [r2, #0]
   1db12:	6949      	ldr	r1, [r1, #20]
   1db14:	f8c3 1414 	str.w	r1, [r3, #1044]	; 0x414
   1db18:	6811      	ldr	r1, [r2, #0]
   1db1a:	6989      	ldr	r1, [r1, #24]
   1db1c:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
   1db20:	6812      	ldr	r2, [r2, #0]
   1db22:	69d2      	ldr	r2, [r2, #28]
   1db24:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   1db28:	4770      	bx	lr
   1db2a:	bf00      	nop
   1db2c:	20000c34 	.word	0x20000c34
   1db30:	50845000 	.word	0x50845000

0001db34 <ProcessAesDrv>:
   1db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db38:	b085      	sub	sp, #20
   1db3a:	2900      	cmp	r1, #0
   1db3c:	d058      	beq.n	1dbf0 <ProcessAesDrv+0xbc>
   1db3e:	4617      	mov	r7, r2
   1db40:	2a00      	cmp	r2, #0
   1db42:	d055      	beq.n	1dbf0 <ProcessAesDrv+0xbc>
   1db44:	4604      	mov	r4, r0
   1db46:	2800      	cmp	r0, #0
   1db48:	f000 80dc 	beq.w	1dd04 <ProcessAesDrv+0x1d0>
   1db4c:	4698      	mov	r8, r3
   1db4e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1db50:	460e      	mov	r6, r1
   1db52:	2b00      	cmp	r3, #0
   1db54:	d142      	bne.n	1dbdc <ProcessAesDrv+0xa8>
   1db56:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
   1db5a:	d244      	bcs.n	1dbe6 <ProcessAesDrv+0xb2>
   1db5c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1db60:	2b04      	cmp	r3, #4
   1db62:	f000 80c7 	beq.w	1dcf4 <ProcessAesDrv+0x1c0>
   1db66:	f04f 0a00 	mov.w	sl, #0
   1db6a:	f04f 31ff 	mov.w	r1, #4294967295
   1db6e:	48b5      	ldr	r0, [pc, #724]	; (1de44 <ProcessAesDrv+0x310>)
   1db70:	f7fe fe98 	bl	1c8a4 <CC_PalMutexLock>
   1db74:	2800      	cmp	r0, #0
   1db76:	f040 80b9 	bne.w	1dcec <ProcessAesDrv+0x1b8>
   1db7a:	2000      	movs	r0, #0
   1db7c:	f7fe fec2 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1db80:	2800      	cmp	r0, #0
   1db82:	f040 80af 	bne.w	1dce4 <ProcessAesDrv+0x1b0>
   1db86:	f04f 0901 	mov.w	r9, #1
   1db8a:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 1de48 <ProcessAesDrv+0x314>
   1db8e:	4620      	mov	r0, r4
   1db90:	f8cb 9810 	str.w	r9, [fp, #2064]	; 0x810
   1db94:	f8cb 9820 	str.w	r9, [fp, #2080]	; 0x820
   1db98:	f7ff feb6 	bl	1d908 <InitAes>
   1db9c:	4605      	mov	r5, r0
   1db9e:	b920      	cbnz	r0, 1dbaa <ProcessAesDrv+0x76>
   1dba0:	4620      	mov	r0, r4
   1dba2:	f7ff ff15 	bl	1d9d0 <LoadAesKey>
   1dba6:	4605      	mov	r5, r0
   1dba8:	b338      	cbz	r0, 1dbfa <ProcessAesDrv+0xc6>
   1dbaa:	f1ba 0f00 	cmp.w	sl, #0
   1dbae:	f040 8085 	bne.w	1dcbc <ProcessAesDrv+0x188>
   1dbb2:	2200      	movs	r2, #0
   1dbb4:	4ba4      	ldr	r3, [pc, #656]	; (1de48 <ProcessAesDrv+0x314>)
   1dbb6:	2001      	movs	r0, #1
   1dbb8:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1dbbc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
   1dbc0:	f7fe fea0 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1dbc4:	2800      	cmp	r0, #0
   1dbc6:	f040 8089 	bne.w	1dcdc <ProcessAesDrv+0x1a8>
   1dbca:	489e      	ldr	r0, [pc, #632]	; (1de44 <ProcessAesDrv+0x310>)
   1dbcc:	f7fe fe72 	bl	1c8b4 <CC_PalMutexUnlock>
   1dbd0:	2800      	cmp	r0, #0
   1dbd2:	d17c      	bne.n	1dcce <ProcessAesDrv+0x19a>
   1dbd4:	4628      	mov	r0, r5
   1dbd6:	b005      	add	sp, #20
   1dbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbdc:	2b01      	cmp	r3, #1
   1dbde:	d1bd      	bne.n	1db5c <ProcessAesDrv+0x28>
   1dbe0:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
   1dbe4:	d3ba      	bcc.n	1db5c <ProcessAesDrv+0x28>
   1dbe6:	4d99      	ldr	r5, [pc, #612]	; (1de4c <ProcessAesDrv+0x318>)
   1dbe8:	4628      	mov	r0, r5
   1dbea:	b005      	add	sp, #20
   1dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbf0:	4d97      	ldr	r5, [pc, #604]	; (1de50 <ProcessAesDrv+0x31c>)
   1dbf2:	4628      	mov	r0, r5
   1dbf4:	b005      	add	sp, #20
   1dbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dbfc:	2b07      	cmp	r3, #7
   1dbfe:	f200 80ca 	bhi.w	1dd96 <ProcessAesDrv+0x262>
   1dc02:	fa09 f903 	lsl.w	r9, r9, r3
   1dc06:	f019 0f8a 	tst.w	r9, #138	; 0x8a
   1dc0a:	f040 80d3 	bne.w	1ddb4 <ProcessAesDrv+0x280>
   1dc0e:	f019 0f44 	tst.w	r9, #68	; 0x44
   1dc12:	f040 80c2 	bne.w	1dd9a <ProcessAesDrv+0x266>
   1dc16:	f019 0f01 	tst.w	r9, #1
   1dc1a:	f000 80bc 	beq.w	1dd96 <ProcessAesDrv+0x262>
   1dc1e:	7933      	ldrb	r3, [r6, #4]
   1dc20:	793a      	ldrb	r2, [r7, #4]
   1dc22:	005b      	lsls	r3, r3, #1
   1dc24:	f002 0201 	and.w	r2, r2, #1
   1dc28:	f003 0302 	and.w	r3, r3, #2
   1dc2c:	4313      	orrs	r3, r2
   1dc2e:	4a86      	ldr	r2, [pc, #536]	; (1de48 <ProcessAesDrv+0x314>)
   1dc30:	6831      	ldr	r1, [r6, #0]
   1dc32:	6838      	ldr	r0, [r7, #0]
   1dc34:	f8c2 3b0c 	str.w	r3, [r2, #2828]	; 0xb0c
   1dc38:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dc3a:	f023 0304 	bic.w	r3, r3, #4
   1dc3e:	2b03      	cmp	r3, #3
   1dc40:	d00a      	beq.n	1dc58 <ProcessAesDrv+0x124>
   1dc42:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1dc44:	2b01      	cmp	r3, #1
   1dc46:	bf0b      	itete	eq
   1dc48:	f8c2 0d28 	streq.w	r0, [r2, #3368]	; 0xd28
   1dc4c:	f8c2 0d30 	strne.w	r0, [r2, #3376]	; 0xd30
   1dc50:	f8c2 8d2c 	streq.w	r8, [r2, #3372]	; 0xd2c
   1dc54:	f8c2 8d34 	strne.w	r8, [r2, #3380]	; 0xd34
   1dc58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1dc5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1dc5e:	2b01      	cmp	r3, #1
   1dc60:	4b79      	ldr	r3, [pc, #484]	; (1de48 <ProcessAesDrv+0x314>)
   1dc62:	bf0b      	itete	eq
   1dc64:	f8c3 1c28 	streq.w	r1, [r3, #3112]	; 0xc28
   1dc68:	f8c3 1c30 	strne.w	r1, [r3, #3120]	; 0xc30
   1dc6c:	f8c3 8c2c 	streq.w	r8, [r3, #3116]	; 0xc2c
   1dc70:	f8c3 8c34 	strne.w	r8, [r3, #3124]	; 0xc34
   1dc74:	f7fe fd72 	bl	1c75c <CC_HalWaitInterrupt>
   1dc78:	4605      	mov	r5, r0
   1dc7a:	2800      	cmp	r0, #0
   1dc7c:	d195      	bne.n	1dbaa <ProcessAesDrv+0x76>
   1dc7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1dc80:	2a07      	cmp	r2, #7
   1dc82:	d815      	bhi.n	1dcb0 <ProcessAesDrv+0x17c>
   1dc84:	2301      	movs	r3, #1
   1dc86:	4093      	lsls	r3, r2
   1dc88:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   1dc8c:	f040 809f 	bne.w	1ddce <ProcessAesDrv+0x29a>
   1dc90:	f013 0f44 	tst.w	r3, #68	; 0x44
   1dc94:	d00c      	beq.n	1dcb0 <ProcessAesDrv+0x17c>
   1dc96:	4b6c      	ldr	r3, [pc, #432]	; (1de48 <ProcessAesDrv+0x314>)
   1dc98:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1dc9c:	6022      	str	r2, [r4, #0]
   1dc9e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1dca2:	6062      	str	r2, [r4, #4]
   1dca4:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1dca8:	60a2      	str	r2, [r4, #8]
   1dcaa:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1dcae:	60e3      	str	r3, [r4, #12]
   1dcb0:	2301      	movs	r3, #1
   1dcb2:	65a3      	str	r3, [r4, #88]	; 0x58
   1dcb4:	f1ba 0f00 	cmp.w	sl, #0
   1dcb8:	f43f af7b 	beq.w	1dbb2 <ProcessAesDrv+0x7e>
   1dcbc:	2304      	movs	r3, #4
   1dcbe:	2120      	movs	r1, #32
   1dcc0:	f104 0010 	add.w	r0, r4, #16
   1dcc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1dcc8:	f7fe fdd4 	bl	1c874 <CC_PalMemSetZeroPlat>
   1dccc:	e771      	b.n	1dbb2 <ProcessAesDrv+0x7e>
   1dcce:	4861      	ldr	r0, [pc, #388]	; (1de54 <ProcessAesDrv+0x320>)
   1dcd0:	f7fd fec0 	bl	1ba54 <CC_PalAbort>
   1dcd4:	4628      	mov	r0, r5
   1dcd6:	b005      	add	sp, #20
   1dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcdc:	485e      	ldr	r0, [pc, #376]	; (1de58 <ProcessAesDrv+0x324>)
   1dcde:	f7fd feb9 	bl	1ba54 <CC_PalAbort>
   1dce2:	e772      	b.n	1dbca <ProcessAesDrv+0x96>
   1dce4:	485d      	ldr	r0, [pc, #372]	; (1de5c <ProcessAesDrv+0x328>)
   1dce6:	f7fd feb5 	bl	1ba54 <CC_PalAbort>
   1dcea:	e74c      	b.n	1db86 <ProcessAesDrv+0x52>
   1dcec:	485c      	ldr	r0, [pc, #368]	; (1de60 <ProcessAesDrv+0x32c>)
   1dcee:	f7fd feb1 	bl	1ba54 <CC_PalAbort>
   1dcf2:	e742      	b.n	1db7a <ProcessAesDrv+0x46>
   1dcf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1dcf6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1dcf8:	f000 f9b8 	bl	1e06c <kmu_validate_slot_and_size>
   1dcfc:	b128      	cbz	r0, 1dd0a <ProcessAesDrv+0x1d6>
   1dcfe:	f04f 0a01 	mov.w	sl, #1
   1dd02:	e732      	b.n	1db6a <ProcessAesDrv+0x36>
   1dd04:	f44f 0571 	mov.w	r5, #15794176	; 0xf10000
   1dd08:	e764      	b.n	1dbd4 <ProcessAesDrv+0xa0>
   1dd0a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1de64 <ProcessAesDrv+0x330>
   1dd0e:	4d4e      	ldr	r5, [pc, #312]	; (1de48 <ProcessAesDrv+0x314>)
   1dd10:	f8d9 3000 	ldr.w	r3, [r9]
   1dd14:	681b      	ldr	r3, [r3, #0]
   1dd16:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
   1dd1a:	f8d9 3000 	ldr.w	r3, [r9]
   1dd1e:	685b      	ldr	r3, [r3, #4]
   1dd20:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
   1dd24:	f8d9 3000 	ldr.w	r3, [r9]
   1dd28:	689b      	ldr	r3, [r3, #8]
   1dd2a:	f8c5 3408 	str.w	r3, [r5, #1032]	; 0x408
   1dd2e:	f8d9 3000 	ldr.w	r3, [r9]
   1dd32:	68db      	ldr	r3, [r3, #12]
   1dd34:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
   1dd38:	f8d9 3000 	ldr.w	r3, [r9]
   1dd3c:	691b      	ldr	r3, [r3, #16]
   1dd3e:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1dd42:	f8d9 3000 	ldr.w	r3, [r9]
   1dd46:	695b      	ldr	r3, [r3, #20]
   1dd48:	f8c5 3414 	str.w	r3, [r5, #1044]	; 0x414
   1dd4c:	f8d9 3000 	ldr.w	r3, [r9]
   1dd50:	699b      	ldr	r3, [r3, #24]
   1dd52:	f8c5 3418 	str.w	r3, [r5, #1048]	; 0x418
   1dd56:	f8d9 3000 	ldr.w	r3, [r9]
   1dd5a:	69db      	ldr	r3, [r3, #28]
   1dd5c:	f8c5 341c 	str.w	r3, [r5, #1052]	; 0x41c
   1dd60:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1dd62:	2902      	cmp	r1, #2
   1dd64:	d8cb      	bhi.n	1dcfe <ProcessAesDrv+0x1ca>
   1dd66:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1dd68:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
   1dd6c:	9301      	str	r3, [sp, #4]
   1dd6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1dd70:	f10a 0a10 	add.w	sl, sl, #16
   1dd74:	f104 0b10 	add.w	fp, r4, #16
   1dd78:	9300      	str	r3, [sp, #0]
   1dd7a:	f8cd a00c 	str.w	sl, [sp, #12]
   1dd7e:	f8cd b008 	str.w	fp, [sp, #8]
   1dd82:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1dd84:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1dd88:	f000 fb72 	bl	1e470 <kmu_derive_cmac>
   1dd8c:	bb68      	cbnz	r0, 1ddea <ProcessAesDrv+0x2b6>
   1dd8e:	2300      	movs	r3, #0
   1dd90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1dd94:	e7b3      	b.n	1dcfe <ProcessAesDrv+0x1ca>
   1dd96:	4d34      	ldr	r5, [pc, #208]	; (1de68 <ProcessAesDrv+0x334>)
   1dd98:	e707      	b.n	1dbaa <ProcessAesDrv+0x76>
   1dd9a:	6823      	ldr	r3, [r4, #0]
   1dd9c:	f8cb 3460 	str.w	r3, [fp, #1120]	; 0x460
   1dda0:	6863      	ldr	r3, [r4, #4]
   1dda2:	f8cb 3464 	str.w	r3, [fp, #1124]	; 0x464
   1dda6:	68a3      	ldr	r3, [r4, #8]
   1dda8:	f8cb 3468 	str.w	r3, [fp, #1128]	; 0x468
   1ddac:	68e3      	ldr	r3, [r4, #12]
   1ddae:	f8cb 346c 	str.w	r3, [fp, #1132]	; 0x46c
   1ddb2:	e734      	b.n	1dc1e <ProcessAesDrv+0xea>
   1ddb4:	6823      	ldr	r3, [r4, #0]
   1ddb6:	f8cb 3440 	str.w	r3, [fp, #1088]	; 0x440
   1ddba:	6863      	ldr	r3, [r4, #4]
   1ddbc:	f8cb 3444 	str.w	r3, [fp, #1092]	; 0x444
   1ddc0:	68a3      	ldr	r3, [r4, #8]
   1ddc2:	f8cb 3448 	str.w	r3, [fp, #1096]	; 0x448
   1ddc6:	68e3      	ldr	r3, [r4, #12]
   1ddc8:	f8cb 344c 	str.w	r3, [fp, #1100]	; 0x44c
   1ddcc:	e727      	b.n	1dc1e <ProcessAesDrv+0xea>
   1ddce:	4b1e      	ldr	r3, [pc, #120]	; (1de48 <ProcessAesDrv+0x314>)
   1ddd0:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1ddd4:	6022      	str	r2, [r4, #0]
   1ddd6:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1ddda:	6062      	str	r2, [r4, #4]
   1dddc:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1dde0:	60a2      	str	r2, [r4, #8]
   1dde2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1dde6:	60e3      	str	r3, [r4, #12]
   1dde8:	e762      	b.n	1dcb0 <ProcessAesDrv+0x17c>
   1ddea:	f8d9 3000 	ldr.w	r3, [r9]
   1ddee:	4651      	mov	r1, sl
   1ddf0:	681b      	ldr	r3, [r3, #0]
   1ddf2:	4658      	mov	r0, fp
   1ddf4:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
   1ddf8:	f8d9 3000 	ldr.w	r3, [r9]
   1ddfc:	685b      	ldr	r3, [r3, #4]
   1ddfe:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
   1de02:	f8d9 3000 	ldr.w	r3, [r9]
   1de06:	689b      	ldr	r3, [r3, #8]
   1de08:	f8c5 3408 	str.w	r3, [r5, #1032]	; 0x408
   1de0c:	f8d9 3000 	ldr.w	r3, [r9]
   1de10:	68db      	ldr	r3, [r3, #12]
   1de12:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
   1de16:	f8d9 3000 	ldr.w	r3, [r9]
   1de1a:	691b      	ldr	r3, [r3, #16]
   1de1c:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1de20:	f8d9 3000 	ldr.w	r3, [r9]
   1de24:	695b      	ldr	r3, [r3, #20]
   1de26:	f8c5 3414 	str.w	r3, [r5, #1044]	; 0x414
   1de2a:	f8d9 3000 	ldr.w	r3, [r9]
   1de2e:	699b      	ldr	r3, [r3, #24]
   1de30:	f8c5 3418 	str.w	r3, [r5, #1048]	; 0x418
   1de34:	f8d9 3000 	ldr.w	r3, [r9]
   1de38:	69db      	ldr	r3, [r3, #28]
   1de3a:	f8c5 341c 	str.w	r3, [r5, #1052]	; 0x41c
   1de3e:	f7fe fd19 	bl	1c874 <CC_PalMemSetZeroPlat>
   1de42:	e7a4      	b.n	1dd8e <ProcessAesDrv+0x25a>
   1de44:	20000c48 	.word	0x20000c48
   1de48:	50845000 	.word	0x50845000
   1de4c:	00f10005 	.word	0x00f10005
   1de50:	00f1000b 	.word	0x00f1000b
   1de54:	0003156c 	.word	0x0003156c
   1de58:	0003154c 	.word	0x0003154c
   1de5c:	0003152c 	.word	0x0003152c
   1de60:	00031514 	.word	0x00031514
   1de64:	20000c34 	.word	0x20000c34
   1de68:	00f10001 	.word	0x00f10001

0001de6c <FinishAesDrv>:
   1de6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de70:	b301      	cbz	r1, 1deb4 <FinishAesDrv+0x48>
   1de72:	b1fa      	cbz	r2, 1deb4 <FinishAesDrv+0x48>
   1de74:	4604      	mov	r4, r0
   1de76:	2800      	cmp	r0, #0
   1de78:	d054      	beq.n	1df24 <FinishAesDrv+0xb8>
   1de7a:	461d      	mov	r5, r3
   1de7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1de7e:	460e      	mov	r6, r1
   1de80:	2b07      	cmp	r3, #7
   1de82:	d01b      	beq.n	1debc <FinishAesDrv+0x50>
   1de84:	b95d      	cbnz	r5, 1de9e <FinishAesDrv+0x32>
   1de86:	2b03      	cmp	r3, #3
   1de88:	d110      	bne.n	1deac <FinishAesDrv+0x40>
   1de8a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1de8c:	b973      	cbnz	r3, 1deac <FinishAesDrv+0x40>
   1de8e:	6645      	str	r5, [r0, #100]	; 0x64
   1de90:	6685      	str	r5, [r0, #104]	; 0x68
   1de92:	66c5      	str	r5, [r0, #108]	; 0x6c
   1de94:	6705      	str	r5, [r0, #112]	; 0x70
   1de96:	2510      	movs	r5, #16
   1de98:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1de9c:	600b      	str	r3, [r1, #0]
   1de9e:	462b      	mov	r3, r5
   1dea0:	4631      	mov	r1, r6
   1dea2:	4620      	mov	r0, r4
   1dea4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dea8:	f7ff be44 	b.w	1db34 <ProcessAesDrv>
   1deac:	462f      	mov	r7, r5
   1deae:	4638      	mov	r0, r7
   1deb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1deb4:	4f64      	ldr	r7, [pc, #400]	; (1e048 <FinishAesDrv+0x1dc>)
   1deb6:	4638      	mov	r0, r7
   1deb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1debc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1debe:	bba3      	cbnz	r3, 1df2a <FinishAesDrv+0xbe>
   1dec0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1dec4:	d236      	bcs.n	1df34 <FinishAesDrv+0xc8>
   1dec6:	b90d      	cbnz	r5, 1decc <FinishAesDrv+0x60>
   1dec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1deca:	bb9b      	cbnz	r3, 1df34 <FinishAesDrv+0xc8>
   1decc:	f04f 31ff 	mov.w	r1, #4294967295
   1ded0:	485e      	ldr	r0, [pc, #376]	; (1e04c <FinishAesDrv+0x1e0>)
   1ded2:	f7fe fce7 	bl	1c8a4 <CC_PalMutexLock>
   1ded6:	2800      	cmp	r0, #0
   1ded8:	d14c      	bne.n	1df74 <FinishAesDrv+0x108>
   1deda:	2000      	movs	r0, #0
   1dedc:	f7fe fd12 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1dee0:	2800      	cmp	r0, #0
   1dee2:	d143      	bne.n	1df6c <FinishAesDrv+0x100>
   1dee4:	f04f 0801 	mov.w	r8, #1
   1dee8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1e050 <FinishAesDrv+0x1e4>
   1deec:	4620      	mov	r0, r4
   1deee:	f8c9 8810 	str.w	r8, [r9, #2064]	; 0x810
   1def2:	f8c9 8820 	str.w	r8, [r9, #2080]	; 0x820
   1def6:	f7ff fd07 	bl	1d908 <InitAes>
   1defa:	4607      	mov	r7, r0
   1defc:	b1e0      	cbz	r0, 1df38 <FinishAesDrv+0xcc>
   1defe:	2200      	movs	r2, #0
   1df00:	4b53      	ldr	r3, [pc, #332]	; (1e050 <FinishAesDrv+0x1e4>)
   1df02:	2001      	movs	r0, #1
   1df04:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1df08:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
   1df0c:	f7fe fcfa 	bl	1c904 <CC_PalPowerSaveModeSelect>
   1df10:	bb40      	cbnz	r0, 1df64 <FinishAesDrv+0xf8>
   1df12:	484e      	ldr	r0, [pc, #312]	; (1e04c <FinishAesDrv+0x1e0>)
   1df14:	f7fe fcce 	bl	1c8b4 <CC_PalMutexUnlock>
   1df18:	2800      	cmp	r0, #0
   1df1a:	d0c8      	beq.n	1deae <FinishAesDrv+0x42>
   1df1c:	484d      	ldr	r0, [pc, #308]	; (1e054 <FinishAesDrv+0x1e8>)
   1df1e:	f7fd fd99 	bl	1ba54 <CC_PalAbort>
   1df22:	e7c4      	b.n	1deae <FinishAesDrv+0x42>
   1df24:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1df28:	e7c1      	b.n	1deae <FinishAesDrv+0x42>
   1df2a:	2b01      	cmp	r3, #1
   1df2c:	d1cb      	bne.n	1dec6 <FinishAesDrv+0x5a>
   1df2e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1df32:	d3c8      	bcc.n	1dec6 <FinishAesDrv+0x5a>
   1df34:	4f48      	ldr	r7, [pc, #288]	; (1e058 <FinishAesDrv+0x1ec>)
   1df36:	e7ba      	b.n	1deae <FinishAesDrv+0x42>
   1df38:	4620      	mov	r0, r4
   1df3a:	f7ff fd49 	bl	1d9d0 <LoadAesKey>
   1df3e:	4607      	mov	r7, r0
   1df40:	2800      	cmp	r0, #0
   1df42:	d1dc      	bne.n	1defe <FinishAesDrv+0x92>
   1df44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1df46:	2b07      	cmp	r3, #7
   1df48:	d80a      	bhi.n	1df60 <FinishAesDrv+0xf4>
   1df4a:	fa08 f803 	lsl.w	r8, r8, r3
   1df4e:	f018 0f8a 	tst.w	r8, #138	; 0x8a
   1df52:	d113      	bne.n	1df7c <FinishAesDrv+0x110>
   1df54:	f018 0f44 	tst.w	r8, #68	; 0x44
   1df58:	d15a      	bne.n	1e010 <FinishAesDrv+0x1a4>
   1df5a:	f018 0f01 	tst.w	r8, #1
   1df5e:	d119      	bne.n	1df94 <FinishAesDrv+0x128>
   1df60:	4f3e      	ldr	r7, [pc, #248]	; (1e05c <FinishAesDrv+0x1f0>)
   1df62:	e7cc      	b.n	1defe <FinishAesDrv+0x92>
   1df64:	483e      	ldr	r0, [pc, #248]	; (1e060 <FinishAesDrv+0x1f4>)
   1df66:	f7fd fd75 	bl	1ba54 <CC_PalAbort>
   1df6a:	e7d2      	b.n	1df12 <FinishAesDrv+0xa6>
   1df6c:	483d      	ldr	r0, [pc, #244]	; (1e064 <FinishAesDrv+0x1f8>)
   1df6e:	f7fd fd71 	bl	1ba54 <CC_PalAbort>
   1df72:	e7b7      	b.n	1dee4 <FinishAesDrv+0x78>
   1df74:	483c      	ldr	r0, [pc, #240]	; (1e068 <FinishAesDrv+0x1fc>)
   1df76:	f7fd fd6d 	bl	1ba54 <CC_PalAbort>
   1df7a:	e7ae      	b.n	1deda <FinishAesDrv+0x6e>
   1df7c:	6823      	ldr	r3, [r4, #0]
   1df7e:	f8c9 3440 	str.w	r3, [r9, #1088]	; 0x440
   1df82:	6863      	ldr	r3, [r4, #4]
   1df84:	f8c9 3444 	str.w	r3, [r9, #1092]	; 0x444
   1df88:	68a3      	ldr	r3, [r4, #8]
   1df8a:	f8c9 3448 	str.w	r3, [r9, #1096]	; 0x448
   1df8e:	68e3      	ldr	r3, [r4, #12]
   1df90:	f8c9 344c 	str.w	r3, [r9, #1100]	; 0x44c
   1df94:	2101      	movs	r1, #1
   1df96:	4a2e      	ldr	r2, [pc, #184]	; (1e050 <FinishAesDrv+0x1e4>)
   1df98:	f8c2 147c 	str.w	r1, [r2, #1148]	; 0x47c
   1df9c:	f8c2 54bc 	str.w	r5, [r2, #1212]	; 0x4bc
   1dfa0:	7933      	ldrb	r3, [r6, #4]
   1dfa2:	6830      	ldr	r0, [r6, #0]
   1dfa4:	408b      	lsls	r3, r1
   1dfa6:	f003 0302 	and.w	r3, r3, #2
   1dfaa:	f8c2 3b0c 	str.w	r3, [r2, #2828]	; 0xb0c
   1dfae:	b9e5      	cbnz	r5, 1dfea <FinishAesDrv+0x17e>
   1dfb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1dfb2:	b90b      	cbnz	r3, 1dfb8 <FinishAesDrv+0x14c>
   1dfb4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
   1dfb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1dfba:	2a07      	cmp	r2, #7
   1dfbc:	d89f      	bhi.n	1defe <FinishAesDrv+0x92>
   1dfbe:	2301      	movs	r3, #1
   1dfc0:	4093      	lsls	r3, r2
   1dfc2:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   1dfc6:	d130      	bne.n	1e02a <FinishAesDrv+0x1be>
   1dfc8:	f013 0f44 	tst.w	r3, #68	; 0x44
   1dfcc:	d097      	beq.n	1defe <FinishAesDrv+0x92>
   1dfce:	4b20      	ldr	r3, [pc, #128]	; (1e050 <FinishAesDrv+0x1e4>)
   1dfd0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1dfd4:	6022      	str	r2, [r4, #0]
   1dfd6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1dfda:	6062      	str	r2, [r4, #4]
   1dfdc:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1dfe0:	60a2      	str	r2, [r4, #8]
   1dfe2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1dfe6:	60e3      	str	r3, [r4, #12]
   1dfe8:	e789      	b.n	1defe <FinishAesDrv+0x92>
   1dfea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1dfec:	2b01      	cmp	r3, #1
   1dfee:	bf0b      	itete	eq
   1dff0:	f8c2 0c28 	streq.w	r0, [r2, #3112]	; 0xc28
   1dff4:	f8c2 0c30 	strne.w	r0, [r2, #3120]	; 0xc30
   1dff8:	f8c2 5c2c 	streq.w	r5, [r2, #3116]	; 0xc2c
   1dffc:	f8c2 5c34 	strne.w	r5, [r2, #3124]	; 0xc34
   1e000:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1e004:	f7fe fbaa 	bl	1c75c <CC_HalWaitInterrupt>
   1e008:	2800      	cmp	r0, #0
   1e00a:	d0d5      	beq.n	1dfb8 <FinishAesDrv+0x14c>
   1e00c:	4607      	mov	r7, r0
   1e00e:	e776      	b.n	1defe <FinishAesDrv+0x92>
   1e010:	6823      	ldr	r3, [r4, #0]
   1e012:	f8c9 3460 	str.w	r3, [r9, #1120]	; 0x460
   1e016:	6863      	ldr	r3, [r4, #4]
   1e018:	f8c9 3464 	str.w	r3, [r9, #1124]	; 0x464
   1e01c:	68a3      	ldr	r3, [r4, #8]
   1e01e:	f8c9 3468 	str.w	r3, [r9, #1128]	; 0x468
   1e022:	68e3      	ldr	r3, [r4, #12]
   1e024:	f8c9 346c 	str.w	r3, [r9, #1132]	; 0x46c
   1e028:	e7b4      	b.n	1df94 <FinishAesDrv+0x128>
   1e02a:	4b09      	ldr	r3, [pc, #36]	; (1e050 <FinishAesDrv+0x1e4>)
   1e02c:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1e030:	6022      	str	r2, [r4, #0]
   1e032:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1e036:	6062      	str	r2, [r4, #4]
   1e038:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1e03c:	60a2      	str	r2, [r4, #8]
   1e03e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1e042:	60e3      	str	r3, [r4, #12]
   1e044:	e75b      	b.n	1defe <FinishAesDrv+0x92>
   1e046:	bf00      	nop
   1e048:	00f1000b 	.word	0x00f1000b
   1e04c:	20000c48 	.word	0x20000c48
   1e050:	50845000 	.word	0x50845000
   1e054:	0003156c 	.word	0x0003156c
   1e058:	00f10005 	.word	0x00f10005
   1e05c:	00f10001 	.word	0x00f10001
   1e060:	0003154c 	.word	0x0003154c
   1e064:	0003152c 	.word	0x0003152c
   1e068:	00031514 	.word	0x00031514

0001e06c <kmu_validate_slot_and_size>:
   1e06c:	287f      	cmp	r0, #127	; 0x7f
   1e06e:	d809      	bhi.n	1e084 <kmu_validate_slot_and_size+0x18>
   1e070:	b151      	cbz	r1, 1e088 <kmu_validate_slot_and_size+0x1c>
   1e072:	3901      	subs	r1, #1
   1e074:	2902      	cmp	r1, #2
   1e076:	d809      	bhi.n	1e08c <kmu_validate_slot_and_size+0x20>
   1e078:	4905      	ldr	r1, [pc, #20]	; (1e090 <kmu_validate_slot_and_size+0x24>)
   1e07a:	287f      	cmp	r0, #127	; 0x7f
   1e07c:	bf0c      	ite	eq
   1e07e:	4608      	moveq	r0, r1
   1e080:	2000      	movne	r0, #0
   1e082:	4770      	bx	lr
   1e084:	4802      	ldr	r0, [pc, #8]	; (1e090 <kmu_validate_slot_and_size+0x24>)
   1e086:	4770      	bx	lr
   1e088:	4608      	mov	r0, r1
   1e08a:	4770      	bx	lr
   1e08c:	4801      	ldr	r0, [pc, #4]	; (1e094 <kmu_validate_slot_and_size+0x28>)
   1e08e:	4770      	bx	lr
   1e090:	00f70001 	.word	0x00f70001
   1e094:	00f70003 	.word	0x00f70003

0001e098 <kmu_validate_slot_and_size_no_kdr>:
   1e098:	287f      	cmp	r0, #127	; 0x7f
   1e09a:	d809      	bhi.n	1e0b0 <kmu_validate_slot_and_size_no_kdr+0x18>
   1e09c:	b151      	cbz	r1, 1e0b4 <kmu_validate_slot_and_size_no_kdr+0x1c>
   1e09e:	3901      	subs	r1, #1
   1e0a0:	2902      	cmp	r1, #2
   1e0a2:	d809      	bhi.n	1e0b8 <kmu_validate_slot_and_size_no_kdr+0x20>
   1e0a4:	4905      	ldr	r1, [pc, #20]	; (1e0bc <kmu_validate_slot_and_size_no_kdr+0x24>)
   1e0a6:	287f      	cmp	r0, #127	; 0x7f
   1e0a8:	bf0c      	ite	eq
   1e0aa:	4608      	moveq	r0, r1
   1e0ac:	2000      	movne	r0, #0
   1e0ae:	4770      	bx	lr
   1e0b0:	4802      	ldr	r0, [pc, #8]	; (1e0bc <kmu_validate_slot_and_size_no_kdr+0x24>)
   1e0b2:	4770      	bx	lr
   1e0b4:	4608      	mov	r0, r1
   1e0b6:	4770      	bx	lr
   1e0b8:	4801      	ldr	r0, [pc, #4]	; (1e0c0 <kmu_validate_slot_and_size_no_kdr+0x28>)
   1e0ba:	4770      	bx	lr
   1e0bc:	00f70001 	.word	0x00f70001
   1e0c0:	00f70003 	.word	0x00f70003

0001e0c4 <kmu_load_key_aes>:
   1e0c4:	b4f0      	push	{r4, r5, r6, r7}
   1e0c6:	2901      	cmp	r1, #1
   1e0c8:	b08e      	sub	sp, #56	; 0x38
   1e0ca:	d009      	beq.n	1e0e0 <kmu_load_key_aes+0x1c>
   1e0cc:	2902      	cmp	r1, #2
   1e0ce:	f000 80de 	beq.w	1e28e <kmu_load_key_aes+0x1ca>
   1e0d2:	2900      	cmp	r1, #0
   1e0d4:	f000 80af 	beq.w	1e236 <kmu_load_key_aes+0x172>
   1e0d8:	48ab      	ldr	r0, [pc, #684]	; (1e388 <kmu_load_key_aes+0x2c4>)
   1e0da:	b00e      	add	sp, #56	; 0x38
   1e0dc:	bcf0      	pop	{r4, r5, r6, r7}
   1e0de:	4770      	bx	lr
   1e0e0:	2600      	movs	r6, #0
   1e0e2:	4aaa      	ldr	r2, [pc, #680]	; (1e38c <kmu_load_key_aes+0x2c8>)
   1e0e4:	4baa      	ldr	r3, [pc, #680]	; (1e390 <kmu_load_key_aes+0x2cc>)
   1e0e6:	00c4      	lsls	r4, r0, #3
   1e0e8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
   1e0ec:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
   1e0f0:	f8d2 7108 	ldr.w	r7, [r2, #264]	; 0x108
   1e0f4:	1c45      	adds	r5, r0, #1
   1e0f6:	9706      	str	r7, [sp, #24]
   1e0f8:	9f06      	ldr	r7, [sp, #24]
   1e0fa:	f8c2 6100 	str.w	r6, [r2, #256]	; 0x100
   1e0fe:	f8d2 7100 	ldr.w	r7, [r2, #256]	; 0x100
   1e102:	f504 037f 	add.w	r3, r4, #16711680	; 0xff0000
   1e106:	9706      	str	r7, [sp, #24]
   1e108:	9f06      	ldr	r7, [sp, #24]
   1e10a:	f8c2 6104 	str.w	r6, [r2, #260]	; 0x104
   1e10e:	f8d2 6104 	ldr.w	r6, [r2, #260]	; 0x104
   1e112:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   1e116:	9606      	str	r6, [sp, #24]
   1e118:	9e06      	ldr	r6, [sp, #24]
   1e11a:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
   1e11e:	681b      	ldr	r3, [r3, #0]
   1e120:	f3bf 8f4f 	dsb	sy
   1e124:	9307      	str	r3, [sp, #28]
   1e126:	9d07      	ldr	r5, [sp, #28]
   1e128:	4b9a      	ldr	r3, [pc, #616]	; (1e394 <kmu_load_key_aes+0x2d0>)
   1e12a:	429d      	cmp	r5, r3
   1e12c:	f040 80ab 	bne.w	1e286 <kmu_load_key_aes+0x1c2>
   1e130:	6011      	str	r1, [r2, #0]
   1e132:	e005      	b.n	1e140 <kmu_load_key_aes+0x7c>
   1e134:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1e138:	b9db      	cbnz	r3, 1e172 <kmu_load_key_aes+0xae>
   1e13a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e13e:	b9c3      	cbnz	r3, 1e172 <kmu_load_key_aes+0xae>
   1e140:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   1e144:	3b00      	subs	r3, #0
   1e146:	bf18      	it	ne
   1e148:	2301      	movne	r3, #1
   1e14a:	f88d 3004 	strb.w	r3, [sp, #4]
   1e14e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   1e152:	3b00      	subs	r3, #0
   1e154:	bf18      	it	ne
   1e156:	2301      	movne	r3, #1
   1e158:	f88d 3005 	strb.w	r3, [sp, #5]
   1e15c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1e160:	3b00      	subs	r3, #0
   1e162:	bf18      	it	ne
   1e164:	2301      	movne	r3, #1
   1e166:	f88d 3006 	strb.w	r3, [sp, #6]
   1e16a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e16e:	2b00      	cmp	r3, #0
   1e170:	d0e0      	beq.n	1e134 <kmu_load_key_aes+0x70>
   1e172:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1e176:	2b00      	cmp	r3, #0
   1e178:	f040 8171 	bne.w	1e45e <kmu_load_key_aes+0x39a>
   1e17c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e180:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1e184:	2b00      	cmp	r3, #0
   1e186:	d152      	bne.n	1e22e <kmu_load_key_aes+0x16a>
   1e188:	2101      	movs	r1, #1
   1e18a:	4b80      	ldr	r3, [pc, #512]	; (1e38c <kmu_load_key_aes+0x2c8>)
   1e18c:	4d80      	ldr	r5, [pc, #512]	; (1e390 <kmu_load_key_aes+0x2cc>)
   1e18e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1e192:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
   1e196:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1e19a:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   1e19e:	3002      	adds	r0, #2
   1e1a0:	9508      	str	r5, [sp, #32]
   1e1a2:	9d08      	ldr	r5, [sp, #32]
   1e1a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e1a8:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   1e1ac:	9508      	str	r5, [sp, #32]
   1e1ae:	9d08      	ldr	r5, [sp, #32]
   1e1b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e1b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e1b8:	9208      	str	r2, [sp, #32]
   1e1ba:	4a77      	ldr	r2, [pc, #476]	; (1e398 <kmu_load_key_aes+0x2d4>)
   1e1bc:	9d08      	ldr	r5, [sp, #32]
   1e1be:	4422      	add	r2, r4
   1e1c0:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1e1c4:	6812      	ldr	r2, [r2, #0]
   1e1c6:	f3bf 8f4f 	dsb	sy
   1e1ca:	9209      	str	r2, [sp, #36]	; 0x24
   1e1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   1e1ce:	4a73      	ldr	r2, [pc, #460]	; (1e39c <kmu_load_key_aes+0x2d8>)
   1e1d0:	4290      	cmp	r0, r2
   1e1d2:	d158      	bne.n	1e286 <kmu_load_key_aes+0x1c2>
   1e1d4:	6019      	str	r1, [r3, #0]
   1e1d6:	e005      	b.n	1e1e4 <kmu_load_key_aes+0x120>
   1e1d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1e1dc:	b9da      	cbnz	r2, 1e216 <kmu_load_key_aes+0x152>
   1e1de:	f89d 2009 	ldrb.w	r2, [sp, #9]
   1e1e2:	b9c2      	cbnz	r2, 1e216 <kmu_load_key_aes+0x152>
   1e1e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1e1e8:	3a00      	subs	r2, #0
   1e1ea:	bf18      	it	ne
   1e1ec:	2201      	movne	r2, #1
   1e1ee:	f88d 2007 	strb.w	r2, [sp, #7]
   1e1f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1e1f6:	3a00      	subs	r2, #0
   1e1f8:	bf18      	it	ne
   1e1fa:	2201      	movne	r2, #1
   1e1fc:	f88d 2008 	strb.w	r2, [sp, #8]
   1e200:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e204:	3a00      	subs	r2, #0
   1e206:	bf18      	it	ne
   1e208:	2201      	movne	r2, #1
   1e20a:	f88d 2009 	strb.w	r2, [sp, #9]
   1e20e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e212:	2a00      	cmp	r2, #0
   1e214:	d0e0      	beq.n	1e1d8 <kmu_load_key_aes+0x114>
   1e216:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1e21a:	2b00      	cmp	r3, #0
   1e21c:	f040 811f 	bne.w	1e45e <kmu_load_key_aes+0x39a>
   1e220:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1e224:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1e228:	2b00      	cmp	r3, #0
   1e22a:	f000 8111 	beq.w	1e450 <kmu_load_key_aes+0x38c>
   1e22e:	485c      	ldr	r0, [pc, #368]	; (1e3a0 <kmu_load_key_aes+0x2dc>)
   1e230:	b00e      	add	sp, #56	; 0x38
   1e232:	bcf0      	pop	{r4, r5, r6, r7}
   1e234:	4770      	bx	lr
   1e236:	2401      	movs	r4, #1
   1e238:	4a54      	ldr	r2, [pc, #336]	; (1e38c <kmu_load_key_aes+0x2c8>)
   1e23a:	4d55      	ldr	r5, [pc, #340]	; (1e390 <kmu_load_key_aes+0x2cc>)
   1e23c:	00c3      	lsls	r3, r0, #3
   1e23e:	f8c5 4500 	str.w	r4, [r5, #1280]	; 0x500
   1e242:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1e246:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
   1e24a:	4420      	add	r0, r4
   1e24c:	9504      	str	r5, [sp, #16]
   1e24e:	9d04      	ldr	r5, [sp, #16]
   1e250:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   1e254:	f8d2 5100 	ldr.w	r5, [r2, #256]	; 0x100
   1e258:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   1e25c:	9504      	str	r5, [sp, #16]
   1e25e:	9d04      	ldr	r5, [sp, #16]
   1e260:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
   1e264:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1e268:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   1e26c:	9104      	str	r1, [sp, #16]
   1e26e:	9904      	ldr	r1, [sp, #16]
   1e270:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   1e274:	681b      	ldr	r3, [r3, #0]
   1e276:	f3bf 8f4f 	dsb	sy
   1e27a:	9305      	str	r3, [sp, #20]
   1e27c:	9905      	ldr	r1, [sp, #20]
   1e27e:	4b45      	ldr	r3, [pc, #276]	; (1e394 <kmu_load_key_aes+0x2d0>)
   1e280:	4299      	cmp	r1, r3
   1e282:	f000 80ba 	beq.w	1e3fa <kmu_load_key_aes+0x336>
   1e286:	4847      	ldr	r0, [pc, #284]	; (1e3a4 <kmu_load_key_aes+0x2e0>)
   1e288:	b00e      	add	sp, #56	; 0x38
   1e28a:	bcf0      	pop	{r4, r5, r6, r7}
   1e28c:	4770      	bx	lr
   1e28e:	2500      	movs	r5, #0
   1e290:	2601      	movs	r6, #1
   1e292:	4a3e      	ldr	r2, [pc, #248]	; (1e38c <kmu_load_key_aes+0x2c8>)
   1e294:	4f3e      	ldr	r7, [pc, #248]	; (1e390 <kmu_load_key_aes+0x2cc>)
   1e296:	00c1      	lsls	r1, r0, #3
   1e298:	f8c7 6500 	str.w	r6, [r7, #1280]	; 0x500
   1e29c:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
   1e2a0:	f8d2 7108 	ldr.w	r7, [r2, #264]	; 0x108
   1e2a4:	1984      	adds	r4, r0, r6
   1e2a6:	970a      	str	r7, [sp, #40]	; 0x28
   1e2a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1e2aa:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
   1e2ae:	f8d2 7100 	ldr.w	r7, [r2, #256]	; 0x100
   1e2b2:	f501 037f 	add.w	r3, r1, #16711680	; 0xff0000
   1e2b6:	970a      	str	r7, [sp, #40]	; 0x28
   1e2b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1e2ba:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
   1e2be:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1e2c2:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   1e2c6:	950a      	str	r5, [sp, #40]	; 0x28
   1e2c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1e2ca:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   1e2ce:	681b      	ldr	r3, [r3, #0]
   1e2d0:	f3bf 8f4f 	dsb	sy
   1e2d4:	930b      	str	r3, [sp, #44]	; 0x2c
   1e2d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1e2d8:	4b2e      	ldr	r3, [pc, #184]	; (1e394 <kmu_load_key_aes+0x2d0>)
   1e2da:	429c      	cmp	r4, r3
   1e2dc:	d1d3      	bne.n	1e286 <kmu_load_key_aes+0x1c2>
   1e2de:	6016      	str	r6, [r2, #0]
   1e2e0:	e005      	b.n	1e2ee <kmu_load_key_aes+0x22a>
   1e2e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1e2e6:	b9db      	cbnz	r3, 1e320 <kmu_load_key_aes+0x25c>
   1e2e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1e2ec:	b9c3      	cbnz	r3, 1e320 <kmu_load_key_aes+0x25c>
   1e2ee:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   1e2f2:	3b00      	subs	r3, #0
   1e2f4:	bf18      	it	ne
   1e2f6:	2301      	movne	r3, #1
   1e2f8:	f88d 300a 	strb.w	r3, [sp, #10]
   1e2fc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   1e300:	3b00      	subs	r3, #0
   1e302:	bf18      	it	ne
   1e304:	2301      	movne	r3, #1
   1e306:	f88d 300b 	strb.w	r3, [sp, #11]
   1e30a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1e30e:	3b00      	subs	r3, #0
   1e310:	bf18      	it	ne
   1e312:	2301      	movne	r3, #1
   1e314:	f88d 300c 	strb.w	r3, [sp, #12]
   1e318:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1e31c:	2b00      	cmp	r3, #0
   1e31e:	d0e0      	beq.n	1e2e2 <kmu_load_key_aes+0x21e>
   1e320:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1e324:	2b00      	cmp	r3, #0
   1e326:	f040 809a 	bne.w	1e45e <kmu_load_key_aes+0x39a>
   1e32a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1e32e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1e332:	2b00      	cmp	r3, #0
   1e334:	f47f af7b 	bne.w	1e22e <kmu_load_key_aes+0x16a>
   1e338:	2401      	movs	r4, #1
   1e33a:	4b14      	ldr	r3, [pc, #80]	; (1e38c <kmu_load_key_aes+0x2c8>)
   1e33c:	4d14      	ldr	r5, [pc, #80]	; (1e390 <kmu_load_key_aes+0x2cc>)
   1e33e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1e342:	f8c5 4500 	str.w	r4, [r5, #1280]	; 0x500
   1e346:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1e34a:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   1e34e:	3002      	adds	r0, #2
   1e350:	950c      	str	r5, [sp, #48]	; 0x30
   1e352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1e354:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e358:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   1e35c:	950c      	str	r5, [sp, #48]	; 0x30
   1e35e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1e360:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e364:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e368:	920c      	str	r2, [sp, #48]	; 0x30
   1e36a:	4a0b      	ldr	r2, [pc, #44]	; (1e398 <kmu_load_key_aes+0x2d4>)
   1e36c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1e36e:	440a      	add	r2, r1
   1e370:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1e374:	6812      	ldr	r2, [r2, #0]
   1e376:	f3bf 8f4f 	dsb	sy
   1e37a:	920d      	str	r2, [sp, #52]	; 0x34
   1e37c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1e37e:	4a07      	ldr	r2, [pc, #28]	; (1e39c <kmu_load_key_aes+0x2d8>)
   1e380:	4291      	cmp	r1, r2
   1e382:	d180      	bne.n	1e286 <kmu_load_key_aes+0x1c2>
   1e384:	601c      	str	r4, [r3, #0]
   1e386:	e015      	b.n	1e3b4 <kmu_load_key_aes+0x2f0>
   1e388:	00f1000c 	.word	0x00f1000c
   1e38c:	50039000 	.word	0x50039000
   1e390:	50844000 	.word	0x50844000
   1e394:	50845400 	.word	0x50845400
   1e398:	00ff8408 	.word	0x00ff8408
   1e39c:	50845410 	.word	0x50845410
   1e3a0:	00f70002 	.word	0x00f70002
   1e3a4:	00f70006 	.word	0x00f70006
   1e3a8:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1e3ac:	b9da      	cbnz	r2, 1e3e6 <kmu_load_key_aes+0x322>
   1e3ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1e3b2:	b9c2      	cbnz	r2, 1e3e6 <kmu_load_key_aes+0x322>
   1e3b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1e3b8:	3a00      	subs	r2, #0
   1e3ba:	bf18      	it	ne
   1e3bc:	2201      	movne	r2, #1
   1e3be:	f88d 200d 	strb.w	r2, [sp, #13]
   1e3c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1e3c6:	3a00      	subs	r2, #0
   1e3c8:	bf18      	it	ne
   1e3ca:	2201      	movne	r2, #1
   1e3cc:	f88d 200e 	strb.w	r2, [sp, #14]
   1e3d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e3d4:	3a00      	subs	r2, #0
   1e3d6:	bf18      	it	ne
   1e3d8:	2201      	movne	r2, #1
   1e3da:	f88d 200f 	strb.w	r2, [sp, #15]
   1e3de:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1e3e2:	2a00      	cmp	r2, #0
   1e3e4:	d0e0      	beq.n	1e3a8 <kmu_load_key_aes+0x2e4>
   1e3e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1e3ea:	2b00      	cmp	r3, #0
   1e3ec:	d137      	bne.n	1e45e <kmu_load_key_aes+0x39a>
   1e3ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1e3f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1e3f6:	b35b      	cbz	r3, 1e450 <kmu_load_key_aes+0x38c>
   1e3f8:	e719      	b.n	1e22e <kmu_load_key_aes+0x16a>
   1e3fa:	6014      	str	r4, [r2, #0]
   1e3fc:	e005      	b.n	1e40a <kmu_load_key_aes+0x346>
   1e3fe:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1e402:	b9db      	cbnz	r3, 1e43c <kmu_load_key_aes+0x378>
   1e404:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e408:	b9c3      	cbnz	r3, 1e43c <kmu_load_key_aes+0x378>
   1e40a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   1e40e:	3b00      	subs	r3, #0
   1e410:	bf18      	it	ne
   1e412:	2301      	movne	r3, #1
   1e414:	f88d 3001 	strb.w	r3, [sp, #1]
   1e418:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   1e41c:	3b00      	subs	r3, #0
   1e41e:	bf18      	it	ne
   1e420:	2301      	movne	r3, #1
   1e422:	f88d 3002 	strb.w	r3, [sp, #2]
   1e426:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1e42a:	3b00      	subs	r3, #0
   1e42c:	bf18      	it	ne
   1e42e:	2301      	movne	r3, #1
   1e430:	f88d 3003 	strb.w	r3, [sp, #3]
   1e434:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1e438:	2b00      	cmp	r3, #0
   1e43a:	d0e0      	beq.n	1e3fe <kmu_load_key_aes+0x33a>
   1e43c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1e440:	b96b      	cbnz	r3, 1e45e <kmu_load_key_aes+0x39a>
   1e442:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e446:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1e44a:	2b00      	cmp	r3, #0
   1e44c:	f47f aeef 	bne.w	1e22e <kmu_load_key_aes+0x16a>
   1e450:	2000      	movs	r0, #0
   1e452:	4b05      	ldr	r3, [pc, #20]	; (1e468 <kmu_load_key_aes+0x3a4>)
   1e454:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1e458:	b00e      	add	sp, #56	; 0x38
   1e45a:	bcf0      	pop	{r4, r5, r6, r7}
   1e45c:	4770      	bx	lr
   1e45e:	4803      	ldr	r0, [pc, #12]	; (1e46c <kmu_load_key_aes+0x3a8>)
   1e460:	b00e      	add	sp, #56	; 0x38
   1e462:	bcf0      	pop	{r4, r5, r6, r7}
   1e464:	4770      	bx	lr
   1e466:	bf00      	nop
   1e468:	50039000 	.word	0x50039000
   1e46c:	00f70001 	.word	0x00f70001

0001e470 <kmu_derive_cmac>:
   1e470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e474:	2400      	movs	r4, #0
   1e476:	b0cc      	sub	sp, #304	; 0x130
   1e478:	4682      	mov	sl, r0
   1e47a:	4689      	mov	r9, r1
   1e47c:	4616      	mov	r6, r2
   1e47e:	4621      	mov	r1, r4
   1e480:	2274      	movs	r2, #116	; 0x74
   1e482:	a80e      	add	r0, sp, #56	; 0x38
   1e484:	461f      	mov	r7, r3
   1e486:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1e488:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1e48c:	f7f8 ffa4 	bl	173d8 <memset>
   1e490:	2280      	movs	r2, #128	; 0x80
   1e492:	4621      	mov	r1, r4
   1e494:	a82c      	add	r0, sp, #176	; 0xb0
   1e496:	942b      	str	r4, [sp, #172]	; 0xac
   1e498:	f7f8 ff9e 	bl	173d8 <memset>
   1e49c:	2384      	movs	r3, #132	; 0x84
   1e49e:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1e4a2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1e4a6:	940d      	str	r4, [sp, #52]	; 0x34
   1e4a8:	940c      	str	r4, [sp, #48]	; 0x30
   1e4aa:	9305      	str	r3, [sp, #20]
   1e4ac:	d864      	bhi.n	1e578 <kmu_derive_cmac+0x108>
   1e4ae:	f7ff fb19 	bl	1dae4 <write_invalid_key>
   1e4b2:	ab05      	add	r3, sp, #20
   1e4b4:	4630      	mov	r0, r6
   1e4b6:	ae2b      	add	r6, sp, #172	; 0xac
   1e4b8:	9301      	str	r3, [sp, #4]
   1e4ba:	4639      	mov	r1, r7
   1e4bc:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1e4c0:	9502      	str	r5, [sp, #8]
   1e4c2:	9600      	str	r6, [sp, #0]
   1e4c4:	f000 f864 	bl	1e590 <UtilCmacBuildDataForDerivation>
   1e4c8:	2800      	cmp	r0, #0
   1e4ca:	d150      	bne.n	1e56e <kmu_derive_cmac+0xfe>
   1e4cc:	2302      	movs	r3, #2
   1e4ce:	2207      	movs	r2, #7
   1e4d0:	f88d 3013 	strb.w	r3, [sp, #19]
   1e4d4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1e4d8:	921b      	str	r2, [sp, #108]	; 0x6c
   1e4da:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1e4de:	2200      	movs	r2, #0
   1e4e0:	2301      	movs	r3, #1
   1e4e2:	2401      	movs	r4, #1
   1e4e4:	2110      	movs	r1, #16
   1e4e6:	901c      	str	r0, [sp, #112]	; 0x70
   1e4e8:	a80e      	add	r0, sp, #56	; 0x38
   1e4ea:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1e4ee:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1e4f2:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   1e4f6:	9426      	str	r4, [sp, #152]	; 0x98
   1e4f8:	f7fe f9bc 	bl	1c874 <CC_PalMemSetZeroPlat>
   1e4fc:	2210      	movs	r2, #16
   1e4fe:	f10d 0920 	add.w	r9, sp, #32
   1e502:	9200      	str	r2, [sp, #0]
   1e504:	4630      	mov	r0, r6
   1e506:	9905      	ldr	r1, [sp, #20]
   1e508:	ab0a      	add	r3, sp, #40	; 0x28
   1e50a:	f8cd 9004 	str.w	r9, [sp, #4]
   1e50e:	aa06      	add	r2, sp, #24
   1e510:	f7ff f85e 	bl	1d5d0 <SetDataBuffersInfo>
   1e514:	4607      	mov	r7, r0
   1e516:	b188      	cbz	r0, 1e53c <kmu_derive_cmac+0xcc>
   1e518:	e01e      	b.n	1e558 <kmu_derive_cmac+0xe8>
   1e51a:	2d10      	cmp	r5, #16
   1e51c:	462e      	mov	r6, r5
   1e51e:	bf28      	it	cs
   1e520:	2610      	movcs	r6, #16
   1e522:	a90e      	add	r1, sp, #56	; 0x38
   1e524:	4632      	mov	r2, r6
   1e526:	f7fe f9a1 	bl	1c86c <CC_PalMemCopyPlat>
   1e52a:	2110      	movs	r1, #16
   1e52c:	a80e      	add	r0, sp, #56	; 0x38
   1e52e:	f7fe f9a1 	bl	1c874 <CC_PalMemSetZeroPlat>
   1e532:	3401      	adds	r4, #1
   1e534:	1bad      	subs	r5, r5, r6
   1e536:	4437      	add	r7, r6
   1e538:	b2e4      	uxtb	r4, r4
   1e53a:	d022      	beq.n	1e582 <kmu_derive_cmac+0x112>
   1e53c:	9b05      	ldr	r3, [sp, #20]
   1e53e:	464a      	mov	r2, r9
   1e540:	a906      	add	r1, sp, #24
   1e542:	a80e      	add	r0, sp, #56	; 0x38
   1e544:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1e548:	f7ff fc90 	bl	1de6c <FinishAesDrv>
   1e54c:	4603      	mov	r3, r0
   1e54e:	eb08 0007 	add.w	r0, r8, r7
   1e552:	2b00      	cmp	r3, #0
   1e554:	d0e1      	beq.n	1e51a <kmu_derive_cmac+0xaa>
   1e556:	461f      	mov	r7, r3
   1e558:	a80e      	add	r0, sp, #56	; 0x38
   1e55a:	2274      	movs	r2, #116	; 0x74
   1e55c:	2100      	movs	r1, #0
   1e55e:	f7fe f987 	bl	1c870 <CC_PalMemSetPlat>
   1e562:	f7ff fabf 	bl	1dae4 <write_invalid_key>
   1e566:	4638      	mov	r0, r7
   1e568:	b04c      	add	sp, #304	; 0x130
   1e56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e56e:	4f06      	ldr	r7, [pc, #24]	; (1e588 <kmu_derive_cmac+0x118>)
   1e570:	4638      	mov	r0, r7
   1e572:	b04c      	add	sp, #304	; 0x130
   1e574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e578:	4f04      	ldr	r7, [pc, #16]	; (1e58c <kmu_derive_cmac+0x11c>)
   1e57a:	4638      	mov	r0, r7
   1e57c:	b04c      	add	sp, #304	; 0x130
   1e57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e582:	462f      	mov	r7, r5
   1e584:	e7e8      	b.n	1e558 <kmu_derive_cmac+0xe8>
   1e586:	bf00      	nop
   1e588:	00f1000e 	.word	0x00f1000e
   1e58c:	00f1000f 	.word	0x00f1000f

0001e590 <UtilCmacBuildDataForDerivation>:
   1e590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e594:	2400      	movs	r4, #0
   1e596:	b082      	sub	sp, #8
   1e598:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1e59a:	9401      	str	r4, [sp, #4]
   1e59c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1e5a0:	d840      	bhi.n	1e624 <UtilCmacBuildDataForDerivation+0x94>
   1e5a2:	00ed      	lsls	r5, r5, #3
   1e5a4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1e5a8:	461e      	mov	r6, r3
   1e5aa:	bf34      	ite	cc
   1e5ac:	2303      	movcc	r3, #3
   1e5ae:	2304      	movcs	r3, #4
   1e5b0:	f101 3cff 	add.w	ip, r1, #4294967295
   1e5b4:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
   1e5b8:	460c      	mov	r4, r1
   1e5ba:	9300      	str	r3, [sp, #0]
   1e5bc:	d832      	bhi.n	1e624 <UtilCmacBuildDataForDerivation+0x94>
   1e5be:	b388      	cbz	r0, 1e624 <UtilCmacBuildDataForDerivation+0x94>
   1e5c0:	4617      	mov	r7, r2
   1e5c2:	bb66      	cbnz	r6, 1e61e <UtilCmacBuildDataForDerivation+0x8e>
   1e5c4:	9a08      	ldr	r2, [sp, #32]
   1e5c6:	b36a      	cbz	r2, 1e624 <UtilCmacBuildDataForDerivation+0x94>
   1e5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e5ca:	6811      	ldr	r1, [r2, #0]
   1e5cc:	b351      	cbz	r1, 1e624 <UtilCmacBuildDataForDerivation+0x94>
   1e5ce:	19a2      	adds	r2, r4, r6
   1e5d0:	4413      	add	r3, r2
   1e5d2:	4299      	cmp	r1, r3
   1e5d4:	d326      	bcc.n	1e624 <UtilCmacBuildDataForDerivation+0x94>
   1e5d6:	9b08      	ldr	r3, [sp, #32]
   1e5d8:	4601      	mov	r1, r0
   1e5da:	4622      	mov	r2, r4
   1e5dc:	1c58      	adds	r0, r3, #1
   1e5de:	f7fe f945 	bl	1c86c <CC_PalMemCopyPlat>
   1e5e2:	9b08      	ldr	r3, [sp, #32]
   1e5e4:	f104 0802 	add.w	r8, r4, #2
   1e5e8:	441c      	add	r4, r3
   1e5ea:	2300      	movs	r3, #0
   1e5ec:	7063      	strb	r3, [r4, #1]
   1e5ee:	bb26      	cbnz	r6, 1e63a <UtilCmacBuildDataForDerivation+0xaa>
   1e5f0:	9b08      	ldr	r3, [sp, #32]
   1e5f2:	2dff      	cmp	r5, #255	; 0xff
   1e5f4:	9500      	str	r5, [sp, #0]
   1e5f6:	eb03 0008 	add.w	r0, r3, r8
   1e5fa:	d917      	bls.n	1e62c <UtilCmacBuildDataForDerivation+0x9c>
   1e5fc:	022b      	lsls	r3, r5, #8
   1e5fe:	b29b      	uxth	r3, r3
   1e600:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   1e604:	2202      	movs	r2, #2
   1e606:	a901      	add	r1, sp, #4
   1e608:	9301      	str	r3, [sp, #4]
   1e60a:	f7fe f92f 	bl	1c86c <CC_PalMemCopyPlat>
   1e60e:	f108 0302 	add.w	r3, r8, #2
   1e612:	2000      	movs	r0, #0
   1e614:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e616:	6013      	str	r3, [r2, #0]
   1e618:	b002      	add	sp, #8
   1e61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e61e:	b10a      	cbz	r2, 1e624 <UtilCmacBuildDataForDerivation+0x94>
   1e620:	2e40      	cmp	r6, #64	; 0x40
   1e622:	d9cf      	bls.n	1e5c4 <UtilCmacBuildDataForDerivation+0x34>
   1e624:	4809      	ldr	r0, [pc, #36]	; (1e64c <UtilCmacBuildDataForDerivation+0xbc>)
   1e626:	b002      	add	sp, #8
   1e628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e62c:	2201      	movs	r2, #1
   1e62e:	4669      	mov	r1, sp
   1e630:	f7fe f91c 	bl	1c86c <CC_PalMemCopyPlat>
   1e634:	f108 0301 	add.w	r3, r8, #1
   1e638:	e7eb      	b.n	1e612 <UtilCmacBuildDataForDerivation+0x82>
   1e63a:	9b08      	ldr	r3, [sp, #32]
   1e63c:	4632      	mov	r2, r6
   1e63e:	eb03 0008 	add.w	r0, r3, r8
   1e642:	4639      	mov	r1, r7
   1e644:	f7fe f912 	bl	1c86c <CC_PalMemCopyPlat>
   1e648:	44b0      	add	r8, r6
   1e64a:	e7d1      	b.n	1e5f0 <UtilCmacBuildDataForDerivation+0x60>
   1e64c:	80000006 	.word	0x80000006

0001e650 <CC_PalDataBufferAttrGet>:
   1e650:	2000      	movs	r0, #0
   1e652:	7018      	strb	r0, [r3, #0]
   1e654:	4770      	bx	lr
   1e656:	bf00      	nop

0001e658 <main>:
#include "Task/TCP_Client.h"
#include "Task/UDP_Server.h"
#include "Task/UDP_Client.h"
#include "Task/deviceInformation.h"

void main( void ) {
   1e658:	b508      	push	{r3, lr}

	Task_Wifi_Stationing_Init();
   1e65a:	f7e4 fdef 	bl	323c <Task_Wifi_Stationing_Init>
	Task_Toggle_Led_Init();
   1e65e:	f7e4 fae7 	bl	2c30 <Task_Toggle_Led_Init>
	Task_TCP_Client_Init();
   1e662:	f7e4 f857 	bl	2714 <Task_TCP_Client_Init>
	Task_TCP_Server_Init();
   1e666:	f7e3 ff65 	bl	2534 <Task_TCP_Server_Init>
	Task_UDP_Client_Init();
   1e66a:	f7e4 fa61 	bl	2b30 <Task_UDP_Client_Init>
	Task_UDP_Server_Init();
   1e66e:	f7e4 f979 	bl	2964 <Task_UDP_Server_Init>

	k_sleep( K_FOREVER );
	
}
   1e672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   1e676:	f04f 30ff 	mov.w	r0, #4294967295
   1e67a:	f04f 31ff 	mov.w	r1, #4294967295
   1e67e:	f7f7 be55 	b.w	1632c <z_impl_k_sleep>

0001e682 <z_log_msg_static_create.constprop.0>:
   1e682:	2300      	movs	r3, #0
   1e684:	f7e6 bbfe 	b.w	4e84 <z_impl_z_log_msg_static_create>

0001e688 <z_log_msg_static_create.constprop.0>:
   1e688:	2300      	movs	r3, #0
   1e68a:	f7e6 bbfb 	b.w	4e84 <z_impl_z_log_msg_static_create>

0001e68e <cbpprintf_external>:
{
   1e68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e692:	4606      	mov	r6, r0
   1e694:	460d      	mov	r5, r1
   1e696:	4617      	mov	r7, r2
	if (buf == NULL) {
   1e698:	4698      	mov	r8, r3
   1e69a:	b32b      	cbz	r3, 1e6e8 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   1e69c:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   1e6a0:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1e6a4:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1e6a8:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1e6aa:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1e6ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1e6b0:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1e6b4:	441c      	add	r4, r3
   1e6b6:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1e6b8:	45ca      	cmp	sl, r9
   1e6ba:	d309      	bcc.n	1e6d0 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1e6bc:	4639      	mov	r1, r7
   1e6be:	4630      	mov	r0, r6
   1e6c0:	46ac      	mov	ip, r5
   1e6c2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1e6c6:	f108 0308 	add.w	r3, r8, #8
}
   1e6ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1e6ce:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1e6d0:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1e6d4:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   1e6d8:	4620      	mov	r0, r4
		*ps = s;
   1e6da:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1e6de:	f7f8 ff55 	bl	1758c <strlen>
   1e6e2:	3001      	adds	r0, #1
   1e6e4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1e6e6:	e7e7      	b.n	1e6b8 <cbpprintf_external+0x2a>
}
   1e6e8:	f06f 0015 	mvn.w	r0, #21
   1e6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e6f0 <is_ptr>:
{
   1e6f0:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1e6f2:	2500      	movs	r5, #0
{
   1e6f4:	4602      	mov	r2, r0
	bool mod = false;
   1e6f6:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1e6f8:	4614      	mov	r4, r2
   1e6fa:	f814 3b01 	ldrb.w	r3, [r4], #1
   1e6fe:	b90b      	cbnz	r3, 1e704 <is_ptr+0x14>
					return false;
   1e700:	4618      	mov	r0, r3
   1e702:	e009      	b.n	1e718 <is_ptr+0x28>
		if (mod) {
   1e704:	b198      	cbz	r0, 1e72e <is_ptr+0x3e>
			if (cnt == n) {
   1e706:	428d      	cmp	r5, r1
   1e708:	d107      	bne.n	1e71a <is_ptr+0x2a>
				if (c == 'p') {
   1e70a:	2b70      	cmp	r3, #112	; 0x70
   1e70c:	d004      	beq.n	1e718 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   1e70e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1e712:	2a3a      	cmp	r2, #58	; 0x3a
   1e714:	d80b      	bhi.n	1e72e <is_ptr+0x3e>
					return false;
   1e716:	2000      	movs	r0, #0
}
   1e718:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1e71a:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   1e71e:	2e3a      	cmp	r6, #58	; 0x3a
   1e720:	d805      	bhi.n	1e72e <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1e722:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1e724:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1e726:	1c94      	adds	r4, r2, #2
   1e728:	2b00      	cmp	r3, #0
   1e72a:	d0e9      	beq.n	1e700 <is_ptr+0x10>
   1e72c:	2000      	movs	r0, #0
		if (c == '%') {
   1e72e:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   1e730:	4622      	mov	r2, r4
			mod = !mod;
   1e732:	bf08      	it	eq
   1e734:	f080 0001 	eoreq.w	r0, r0, #1
   1e738:	e7de      	b.n	1e6f8 <is_ptr+0x8>

0001e73a <stdinout_read_vmeth>:
int z_impl_zephyr_write_stdout(const char *buf, int nbytes);

static ssize_t stdinout_read_vmeth(void *obj, void *buffer, size_t count)
{
	return 0;
}
   1e73a:	2000      	movs	r0, #0
   1e73c:	4770      	bx	lr

0001e73e <stdinout_ioctl_vmeth>:
	return 0;
#endif
}

static int stdinout_ioctl_vmeth(void *obj, unsigned int request, va_list args)
{
   1e73e:	b508      	push	{r3, lr}
	errno = EINVAL;
   1e740:	f001 fc7f 	bl	20042 <__errno>
   1e744:	2316      	movs	r3, #22
   1e746:	6003      	str	r3, [r0, #0]
	return -1;
}
   1e748:	f04f 30ff 	mov.w	r0, #4294967295
   1e74c:	bd08      	pop	{r3, pc}

0001e74e <stdinout_write_vmeth>:
{
   1e74e:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buffer, count);
   1e750:	4611      	mov	r1, r2
   1e752:	f7e8 bc2f 	b.w	6fb4 <z_impl_zephyr_write_stdout>

0001e756 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   1e756:	b40c      	push	{r2, r3}
   1e758:	4603      	mov	r3, r0
   1e75a:	b507      	push	{r0, r1, r2, lr}
   1e75c:	aa04      	add	r2, sp, #16
   1e75e:	4608      	mov	r0, r1
   1e760:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   1e764:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1e766:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1e768:	4798      	blx	r3
	va_end(args);

	return res;
}
   1e76a:	b003      	add	sp, #12
   1e76c:	f85d eb04 	ldr.w	lr, [sp], #4
   1e770:	b002      	add	sp, #8
   1e772:	4770      	bx	lr

0001e774 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1e774:	f7f7 b878 	b.w	15868 <z_impl_k_mutex_unlock>

0001e778 <z_free_fd>:
	(void)z_fd_unref(fd);
   1e778:	f7e5 b94c 	b.w	3a14 <z_fd_unref.isra.0>

0001e77c <hex2char>:
	return 0;
}

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   1e77c:	2809      	cmp	r0, #9
   1e77e:	d804      	bhi.n	1e78a <hex2char+0xe>
		*c = x + '0';
   1e780:	3030      	adds	r0, #48	; 0x30
   1e782:	b2c0      	uxtb	r0, r0
   1e784:	7008      	strb	r0, [r1, #0]
		*c = x - 10 + 'a';
	} else {
		return -EINVAL;
	}

	return 0;
   1e786:	2000      	movs	r0, #0
   1e788:	4770      	bx	lr
	} else  if (x <= 15) {
   1e78a:	280f      	cmp	r0, #15
   1e78c:	d801      	bhi.n	1e792 <hex2char+0x16>
		*c = x - 10 + 'a';
   1e78e:	3057      	adds	r0, #87	; 0x57
   1e790:	e7f7      	b.n	1e782 <hex2char+0x6>
		return -EINVAL;
   1e792:	f06f 0015 	mvn.w	r0, #21
}
   1e796:	4770      	bx	lr

0001e798 <arch_printk_char_out>:
}
   1e798:	2000      	movs	r0, #0
   1e79a:	4770      	bx	lr

0001e79c <str_out>:
{
   1e79c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e79e:	688a      	ldr	r2, [r1, #8]
   1e7a0:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1e7a2:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e7a4:	b114      	cbz	r4, 1e7ac <str_out+0x10>
   1e7a6:	684b      	ldr	r3, [r1, #4]
   1e7a8:	4293      	cmp	r3, r2
   1e7aa:	dc01      	bgt.n	1e7b0 <str_out+0x14>
		ctx->count++;
   1e7ac:	608d      	str	r5, [r1, #8]
}
   1e7ae:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1e7b0:	3b01      	subs	r3, #1
   1e7b2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1e7b4:	bf08      	it	eq
   1e7b6:	2200      	moveq	r2, #0
   1e7b8:	608d      	str	r5, [r1, #8]
   1e7ba:	bf0c      	ite	eq
   1e7bc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1e7be:	54a0      	strbne	r0, [r4, r2]
   1e7c0:	e7f5      	b.n	1e7ae <str_out+0x12>

0001e7c2 <printk>:
{
   1e7c2:	b40f      	push	{r0, r1, r2, r3}
   1e7c4:	b507      	push	{r0, r1, r2, lr}
   1e7c6:	a904      	add	r1, sp, #16
   1e7c8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1e7cc:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   1e7ce:	f000 fe41 	bl	1f454 <z_log_vprintk>
}
   1e7d2:	b003      	add	sp, #12
   1e7d4:	f85d eb04 	ldr.w	lr, [sp], #4
   1e7d8:	b004      	add	sp, #16
   1e7da:	4770      	bx	lr

0001e7dc <snprintk>:
{
   1e7dc:	b40c      	push	{r2, r3}
   1e7de:	b507      	push	{r0, r1, r2, lr}
   1e7e0:	ab04      	add	r3, sp, #16
   1e7e2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1e7e6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1e7e8:	f7e5 fa32 	bl	3c50 <vsnprintk>
}
   1e7ec:	b003      	add	sp, #12
   1e7ee:	f85d eb04 	ldr.w	lr, [sp], #4
   1e7f2:	b002      	add	sp, #8
   1e7f4:	4770      	bx	lr

0001e7f6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1e7f6:	4604      	mov	r4, r0
   1e7f8:	b508      	push	{r3, lr}
   1e7fa:	4608      	mov	r0, r1
   1e7fc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1e7fe:	461a      	mov	r2, r3
   1e800:	47a0      	blx	r4
	return z_impl_z_current_get();
   1e802:	f7f7 fdc7 	bl	16394 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1e806:	f7e8 f9c9 	bl	6b9c <z_impl_k_thread_abort>

0001e80a <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1e80a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1e80c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1e810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1e814:	bf2c      	ite	cs
   1e816:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1e81a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1e81e:	4770      	bx	lr

0001e820 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1e820:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1e824:	6880      	ldr	r0, [r0, #8]
   1e826:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1e82a:	bf2c      	ite	cs
   1e82c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1e830:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1e834:	4770      	bx	lr

0001e836 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e836:	2201      	movs	r2, #1
{
   1e838:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e83a:	f7ff ffe6 	bl	1e80a <chunk_field>
}
   1e83e:	40d0      	lsrs	r0, r2
   1e840:	bd08      	pop	{r3, pc}

0001e842 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1e842:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1e844:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1e848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e84c:	d308      	bcc.n	1e860 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e84e:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1e850:	b11a      	cbz	r2, 1e85a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e852:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e856:	604b      	str	r3, [r1, #4]
   1e858:	4770      	bx	lr
   1e85a:	f023 0301 	bic.w	r3, r3, #1
   1e85e:	e7fa      	b.n	1e856 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e860:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1e862:	b11a      	cbz	r2, 1e86c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e864:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e868:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1e86a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e86c:	f023 0301 	bic.w	r3, r3, #1
   1e870:	e7fa      	b.n	1e868 <set_chunk_used+0x26>

0001e872 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e872:	0053      	lsls	r3, r2, #1
   1e874:	2201      	movs	r2, #1
   1e876:	f7ff bfd3 	b.w	1e820 <chunk_set>

0001e87a <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1e87a:	6883      	ldr	r3, [r0, #8]
   1e87c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e880:	bf34      	ite	cc
   1e882:	2304      	movcc	r3, #4
   1e884:	2308      	movcs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e886:	1ac9      	subs	r1, r1, r3
   1e888:	1a08      	subs	r0, r1, r0
}
   1e88a:	08c0      	lsrs	r0, r0, #3
   1e88c:	4770      	bx	lr

0001e88e <bucket_idx.isra.0>:
   1e88e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e892:	bf34      	ite	cc
   1e894:	2304      	movcc	r3, #4
   1e896:	2308      	movcs	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e898:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e89a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e89c:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
   1e8a0:	fab0 f080 	clz	r0, r0
}
   1e8a4:	f1c0 001f 	rsb	r0, r0, #31
   1e8a8:	4770      	bx	lr

0001e8aa <free_list_remove_bidx>:
{
   1e8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8ae:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1e8b0:	2203      	movs	r2, #3
   1e8b2:	460e      	mov	r6, r1
   1e8b4:	4604      	mov	r4, r0
   1e8b6:	f7ff ffa8 	bl	1e80a <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1e8ba:	4286      	cmp	r6, r0
   1e8bc:	4605      	mov	r5, r0
   1e8be:	f107 0804 	add.w	r8, r7, #4
   1e8c2:	d10a      	bne.n	1e8da <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~BIT(bidx);
   1e8c4:	2201      	movs	r2, #1
   1e8c6:	68e3      	ldr	r3, [r4, #12]
   1e8c8:	40ba      	lsls	r2, r7
   1e8ca:	ea23 0302 	bic.w	r3, r3, r2
   1e8ce:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1e8d0:	2300      	movs	r3, #0
   1e8d2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1e8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1e8da:	4631      	mov	r1, r6
   1e8dc:	2202      	movs	r2, #2
   1e8de:	4620      	mov	r0, r4
   1e8e0:	f7ff ff93 	bl	1e80a <chunk_field>
   1e8e4:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1e8e6:	462b      	mov	r3, r5
   1e8e8:	4601      	mov	r1, r0
   1e8ea:	2203      	movs	r2, #3
   1e8ec:	4620      	mov	r0, r4
		b->next = second;
   1e8ee:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1e8f2:	f7ff ff95 	bl	1e820 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e8f6:	4633      	mov	r3, r6
   1e8f8:	4629      	mov	r1, r5
   1e8fa:	4620      	mov	r0, r4
}
   1e8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e900:	2202      	movs	r2, #2
   1e902:	f7ff bf8d 	b.w	1e820 <chunk_set>

0001e906 <free_list_remove>:
{
   1e906:	b570      	push	{r4, r5, r6, lr}
   1e908:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
   1e90a:	6886      	ldr	r6, [r0, #8]
   1e90c:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e90e:	f7ff ff92 	bl	1e836 <chunk_size>
   1e912:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1e916:	4601      	mov	r1, r0
   1e918:	d301      	bcc.n	1e91e <free_list_remove+0x18>
   1e91a:	2801      	cmp	r0, #1
   1e91c:	d009      	beq.n	1e932 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e91e:	4630      	mov	r0, r6
   1e920:	f7ff ffb5 	bl	1e88e <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1e924:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e926:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1e928:	4620      	mov	r0, r4
}
   1e92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1e92e:	f7ff bfbc 	b.w	1e8aa <free_list_remove_bidx>
}
   1e932:	bd70      	pop	{r4, r5, r6, pc}

0001e934 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1e934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e938:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   1e93a:	6880      	ldr	r0, [r0, #8]
   1e93c:	f7ff ffa7 	bl	1e88e <bucket_idx.isra.0>
   1e940:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e944:	f8da 9010 	ldr.w	r9, [sl, #16]
{
   1e948:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1e94a:	4606      	mov	r6, r0
	if (b->next) {
   1e94c:	f1b9 0f00 	cmp.w	r9, #0
   1e950:	d01b      	beq.n	1e98a <alloc_chunk+0x56>
   1e952:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1e954:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1e958:	4628      	mov	r0, r5
   1e95a:	4621      	mov	r1, r4
   1e95c:	f7ff ff6b 	bl	1e836 <chunk_size>
   1e960:	4540      	cmp	r0, r8
   1e962:	d307      	bcc.n	1e974 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   1e964:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1e966:	4621      	mov	r1, r4
   1e968:	4628      	mov	r0, r5
   1e96a:	f7ff ff9e 	bl	1e8aa <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e96e:	4620      	mov	r0, r4
   1e970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1e974:	2203      	movs	r2, #3
   1e976:	4621      	mov	r1, r4
   1e978:	4628      	mov	r0, r5
   1e97a:	f7ff ff46 	bl	1e80a <chunk_field>
		} while (--i && b->next != first);
   1e97e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1e980:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1e984:	d001      	beq.n	1e98a <alloc_chunk+0x56>
   1e986:	4581      	cmp	r9, r0
   1e988:	d1e4      	bne.n	1e954 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1e98a:	f04f 34ff 	mov.w	r4, #4294967295
   1e98e:	68eb      	ldr	r3, [r5, #12]
   1e990:	3601      	adds	r6, #1
   1e992:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1e994:	401c      	ands	r4, r3
   1e996:	d0ea      	beq.n	1e96e <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   1e998:	fa94 f2a4 	rbit	r2, r4
   1e99c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e9a0:	1d13      	adds	r3, r2, #4
   1e9a2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1e9a6:	e7de      	b.n	1e966 <alloc_chunk+0x32>

0001e9a8 <split_chunks>:
{
   1e9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9ac:	4614      	mov	r4, r2
   1e9ae:	460e      	mov	r6, r1
   1e9b0:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1e9b2:	f7ff ff40 	bl	1e836 <chunk_size>
	chunksz_t lsz = rc - lc;
   1e9b6:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1e9ba:	1b37      	subs	r7, r6, r4
   1e9bc:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1e9be:	4642      	mov	r2, r8
   1e9c0:	4631      	mov	r1, r6
   1e9c2:	4628      	mov	r0, r5
   1e9c4:	f7ff ff55 	bl	1e872 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1e9c8:	463a      	mov	r2, r7
   1e9ca:	4621      	mov	r1, r4
   1e9cc:	4628      	mov	r0, r5
   1e9ce:	f7ff ff50 	bl	1e872 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e9d2:	4643      	mov	r3, r8
   1e9d4:	2200      	movs	r2, #0
   1e9d6:	4621      	mov	r1, r4
   1e9d8:	4628      	mov	r0, r5
   1e9da:	f7ff ff21 	bl	1e820 <chunk_set>
	return c + chunk_size(h, c);
   1e9de:	4621      	mov	r1, r4
   1e9e0:	4628      	mov	r0, r5
   1e9e2:	f7ff ff28 	bl	1e836 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e9e6:	463b      	mov	r3, r7
   1e9e8:	1821      	adds	r1, r4, r0
   1e9ea:	2200      	movs	r2, #0
   1e9ec:	4628      	mov	r0, r5
}
   1e9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e9f2:	f7ff bf15 	b.w	1e820 <chunk_set>

0001e9f6 <merge_chunks>:
{
   1e9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9fa:	4616      	mov	r6, r2
   1e9fc:	4604      	mov	r4, r0
   1e9fe:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ea00:	f7ff ff19 	bl	1e836 <chunk_size>
   1ea04:	4631      	mov	r1, r6
   1ea06:	4605      	mov	r5, r0
   1ea08:	4620      	mov	r0, r4
   1ea0a:	f7ff ff14 	bl	1e836 <chunk_size>
   1ea0e:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1ea10:	462a      	mov	r2, r5
   1ea12:	4639      	mov	r1, r7
   1ea14:	4620      	mov	r0, r4
   1ea16:	f7ff ff2c 	bl	1e872 <set_chunk_size>
	return c + chunk_size(h, c);
   1ea1a:	4631      	mov	r1, r6
   1ea1c:	4620      	mov	r0, r4
   1ea1e:	f7ff ff0a 	bl	1e836 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ea22:	462b      	mov	r3, r5
   1ea24:	1831      	adds	r1, r6, r0
   1ea26:	2200      	movs	r2, #0
   1ea28:	4620      	mov	r0, r4
}
   1ea2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ea2e:	f7ff bef7 	b.w	1e820 <chunk_set>

0001ea32 <free_list_add>:
{
   1ea32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea36:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
   1ea38:	6886      	ldr	r6, [r0, #8]
   1ea3a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ea3c:	f7ff fefb 	bl	1e836 <chunk_size>
   1ea40:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ea44:	4601      	mov	r1, r0
   1ea46:	d301      	bcc.n	1ea4c <free_list_add+0x1a>
   1ea48:	2801      	cmp	r0, #1
   1ea4a:	d032      	beq.n	1eab2 <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ea4c:	4630      	mov	r0, r6
   1ea4e:	f7ff ff1e 	bl	1e88e <bucket_idx.isra.0>
	if (b->next == 0U) {
   1ea52:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1ea56:	690e      	ldr	r6, [r1, #16]
   1ea58:	b996      	cbnz	r6, 1ea80 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
   1ea5a:	2201      	movs	r2, #1
   1ea5c:	68e3      	ldr	r3, [r4, #12]
   1ea5e:	4082      	lsls	r2, r0
   1ea60:	4313      	orrs	r3, r2
   1ea62:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ea64:	2202      	movs	r2, #2
		b->next = c;
   1ea66:	610d      	str	r5, [r1, #16]
   1ea68:	462b      	mov	r3, r5
   1ea6a:	4629      	mov	r1, r5
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	f7ff fed7 	bl	1e820 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ea72:	2203      	movs	r2, #3
   1ea74:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1ea76:	4620      	mov	r0, r4
}
   1ea78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ea7c:	f7ff bed0 	b.w	1e820 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1ea80:	2202      	movs	r2, #2
   1ea82:	4631      	mov	r1, r6
   1ea84:	4620      	mov	r0, r4
   1ea86:	f7ff fec0 	bl	1e80a <chunk_field>
   1ea8a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1ea8c:	4603      	mov	r3, r0
   1ea8e:	4629      	mov	r1, r5
   1ea90:	4620      	mov	r0, r4
   1ea92:	f7ff fec5 	bl	1e820 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ea96:	2203      	movs	r2, #3
   1ea98:	4633      	mov	r3, r6
   1ea9a:	4629      	mov	r1, r5
   1ea9c:	4620      	mov	r0, r4
   1ea9e:	f7ff febf 	bl	1e820 <chunk_set>
   1eaa2:	4639      	mov	r1, r7
   1eaa4:	462b      	mov	r3, r5
   1eaa6:	4620      	mov	r0, r4
   1eaa8:	f7ff feba 	bl	1e820 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1eaac:	2202      	movs	r2, #2
   1eaae:	4631      	mov	r1, r6
   1eab0:	e7e1      	b.n	1ea76 <free_list_add+0x44>
   1eab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eab6 <free_chunk>:
{
   1eab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eab8:	460c      	mov	r4, r1
   1eaba:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1eabc:	f7ff febb 	bl	1e836 <chunk_size>
   1eac0:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1eac2:	2201      	movs	r2, #1
   1eac4:	4631      	mov	r1, r6
   1eac6:	4628      	mov	r0, r5
   1eac8:	f7ff fe9f 	bl	1e80a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1eacc:	07c3      	lsls	r3, r0, #31
   1eace:	d40c      	bmi.n	1eaea <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1ead0:	4631      	mov	r1, r6
   1ead2:	4628      	mov	r0, r5
   1ead4:	f7ff ff17 	bl	1e906 <free_list_remove>
	return c + chunk_size(h, c);
   1ead8:	4621      	mov	r1, r4
   1eada:	4628      	mov	r0, r5
   1eadc:	f7ff feab 	bl	1e836 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1eae0:	4621      	mov	r1, r4
   1eae2:	1822      	adds	r2, r4, r0
   1eae4:	4628      	mov	r0, r5
   1eae6:	f7ff ff86 	bl	1e9f6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1eaea:	2200      	movs	r2, #0
   1eaec:	4621      	mov	r1, r4
   1eaee:	4628      	mov	r0, r5
   1eaf0:	f7ff fe8b 	bl	1e80a <chunk_field>
   1eaf4:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1eaf6:	2201      	movs	r2, #1
   1eaf8:	4639      	mov	r1, r7
   1eafa:	4628      	mov	r0, r5
   1eafc:	f7ff fe85 	bl	1e80a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1eb00:	ea10 0602 	ands.w	r6, r0, r2
   1eb04:	d113      	bne.n	1eb2e <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1eb06:	4639      	mov	r1, r7
   1eb08:	4628      	mov	r0, r5
   1eb0a:	f7ff fefc 	bl	1e906 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1eb0e:	4621      	mov	r1, r4
   1eb10:	4632      	mov	r2, r6
   1eb12:	4628      	mov	r0, r5
   1eb14:	f7ff fe79 	bl	1e80a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1eb18:	4622      	mov	r2, r4
   1eb1a:	1a21      	subs	r1, r4, r0
   1eb1c:	4628      	mov	r0, r5
   1eb1e:	f7ff ff6a 	bl	1e9f6 <merge_chunks>
   1eb22:	4621      	mov	r1, r4
   1eb24:	4632      	mov	r2, r6
   1eb26:	4628      	mov	r0, r5
   1eb28:	f7ff fe6f 	bl	1e80a <chunk_field>
   1eb2c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1eb2e:	4621      	mov	r1, r4
   1eb30:	4628      	mov	r0, r5
}
   1eb32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1eb36:	f7ff bf7c 	b.w	1ea32 <free_list_add>

0001eb3a <sys_heap_free>:
{
   1eb3a:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   1eb3c:	b171      	cbz	r1, 1eb5c <sys_heap_free+0x22>
   1eb3e:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
   1eb40:	2200      	movs	r2, #0
	chunkid_t c = mem_to_chunkid(h, mem);
   1eb42:	4628      	mov	r0, r5
   1eb44:	f7ff fe99 	bl	1e87a <mem_to_chunkid>
   1eb48:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
   1eb4a:	4601      	mov	r1, r0
   1eb4c:	4628      	mov	r0, r5
   1eb4e:	f7ff fe78 	bl	1e842 <set_chunk_used>
	free_chunk(h, c);
   1eb52:	4621      	mov	r1, r4
}
   1eb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   1eb58:	f7ff bfad 	b.w	1eab6 <free_chunk>
}
   1eb5c:	bd38      	pop	{r3, r4, r5, pc}

0001eb5e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1eb5e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1eb60:	6806      	ldr	r6, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1eb62:	b909      	cbnz	r1, 1eb68 <sys_heap_alloc+0xa>
		return NULL;
   1eb64:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1eb66:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1eb68:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1eb6a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1eb6e:	d9f9      	bls.n	1eb64 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1eb70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1eb74:	bf34      	ite	cc
   1eb76:	2304      	movcc	r3, #4
   1eb78:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1eb7a:	1dcc      	adds	r4, r1, #7
   1eb7c:	441c      	add	r4, r3
   1eb7e:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1eb80:	4621      	mov	r1, r4
   1eb82:	4630      	mov	r0, r6
   1eb84:	f7ff fed6 	bl	1e934 <alloc_chunk>
	if (c == 0U) {
   1eb88:	4605      	mov	r5, r0
   1eb8a:	2800      	cmp	r0, #0
   1eb8c:	d0ea      	beq.n	1eb64 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1eb8e:	4601      	mov	r1, r0
   1eb90:	4630      	mov	r0, r6
   1eb92:	f7ff fe50 	bl	1e836 <chunk_size>
   1eb96:	42a0      	cmp	r0, r4
   1eb98:	d909      	bls.n	1ebae <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1eb9a:	442c      	add	r4, r5
   1eb9c:	4629      	mov	r1, r5
   1eb9e:	4630      	mov	r0, r6
   1eba0:	4622      	mov	r2, r4
   1eba2:	f7ff ff01 	bl	1e9a8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1eba6:	4621      	mov	r1, r4
   1eba8:	4630      	mov	r0, r6
   1ebaa:	f7ff ff42 	bl	1ea32 <free_list_add>
	set_chunk_used(h, c, true);
   1ebae:	4630      	mov	r0, r6
   1ebb0:	2201      	movs	r2, #1
   1ebb2:	4629      	mov	r1, r5
   1ebb4:	f7ff fe45 	bl	1e842 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1ebb8:	68b3      	ldr	r3, [r6, #8]
   1ebba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ebbe:	bf34      	ite	cc
   1ebc0:	2304      	movcc	r3, #4
   1ebc2:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ebc4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1ebc8:	4418      	add	r0, r3
	return mem;
   1ebca:	e7cc      	b.n	1eb66 <sys_heap_alloc+0x8>

0001ebcc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1ebcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1ebd0:	6806      	ldr	r6, [r0, #0]
{
   1ebd2:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
   1ebd4:	68b2      	ldr	r2, [r6, #8]
   1ebd6:	f101 39ff 	add.w	r9, r1, #4294967295
	return big_heap(h) ? 8 : 4;
   1ebda:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1ebde:	bf34      	ite	cc
   1ebe0:	2304      	movcc	r3, #4
   1ebe2:	2308      	movcs	r3, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1ebe4:	ea19 0901 	ands.w	r9, r9, r1
{
   1ebe8:	460f      	mov	r7, r1
	if (align != rew) {
   1ebea:	d00b      	beq.n	1ec04 <sys_heap_aligned_alloc+0x38>
	rew = align & -align;
   1ebec:	4249      	negs	r1, r1
   1ebee:	4039      	ands	r1, r7
   1ebf0:	428b      	cmp	r3, r1
   1ebf2:	464f      	mov	r7, r9
   1ebf4:	bf28      	it	cs
   1ebf6:	460b      	movcs	r3, r1
   1ebf8:	4689      	mov	r9, r1
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1ebfa:	b954      	cbnz	r4, 1ec12 <sys_heap_aligned_alloc+0x46>
		return NULL;
   1ebfc:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1ebfe:	4628      	mov	r0, r5
   1ec00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1ec04:	4299      	cmp	r1, r3
   1ec06:	d8f8      	bhi.n	1ebfa <sys_heap_aligned_alloc+0x2e>
			return sys_heap_alloc(heap, bytes);
   1ec08:	4621      	mov	r1, r4
}
   1ec0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1ec0e:	f7ff bfa6 	b.w	1eb5e <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1ec12:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   1ec16:	d9f1      	bls.n	1ebfc <sys_heap_aligned_alloc+0x30>
   1ec18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1ec1c:	bf34      	ite	cc
   1ec1e:	2204      	movcc	r2, #4
   1ec20:	2208      	movcs	r2, #8
   1ec22:	1de1      	adds	r1, r4, #7
   1ec24:	4439      	add	r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ec26:	1ac9      	subs	r1, r1, r3
   1ec28:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1ec2a:	4630      	mov	r0, r6
   1ec2c:	08c9      	lsrs	r1, r1, #3
   1ec2e:	f7ff fe81 	bl	1e934 <alloc_chunk>
	if (c0 == 0) {
   1ec32:	4680      	mov	r8, r0
   1ec34:	2800      	cmp	r0, #0
   1ec36:	d0e1      	beq.n	1ebfc <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1ec38:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1ec3a:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1ec3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ec42:	bf34      	ite	cc
   1ec44:	2304      	movcc	r3, #4
   1ec46:	2308      	movcs	r3, #8
   1ec48:	441d      	add	r5, r3
   1ec4a:	4435      	add	r5, r6
   1ec4c:	1e7b      	subs	r3, r7, #1
   1ec4e:	441d      	add	r5, r3
   1ec50:	427f      	negs	r7, r7
   1ec52:	403d      	ands	r5, r7
   1ec54:	eba5 0509 	sub.w	r5, r5, r9
	chunkid_t c = mem_to_chunkid(h, mem);
   1ec58:	4629      	mov	r1, r5
   1ec5a:	4630      	mov	r0, r6
   1ec5c:	f7ff fe0d 	bl	1e87a <mem_to_chunkid>
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ec60:	442c      	add	r4, r5
   1ec62:	3407      	adds	r4, #7
   1ec64:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1ec68:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1ec6a:	4580      	cmp	r8, r0
	chunkid_t c = mem_to_chunkid(h, mem);
   1ec6c:	4607      	mov	r7, r0
	chunkid_t c_end = end - chunk_buf(h);
   1ec6e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1ec72:	d208      	bcs.n	1ec86 <sys_heap_aligned_alloc+0xba>
		split_chunks(h, c0, c);
   1ec74:	4602      	mov	r2, r0
   1ec76:	4641      	mov	r1, r8
   1ec78:	4630      	mov	r0, r6
   1ec7a:	f7ff fe95 	bl	1e9a8 <split_chunks>
		free_list_add(h, c0);
   1ec7e:	4641      	mov	r1, r8
   1ec80:	4630      	mov	r0, r6
   1ec82:	f7ff fed6 	bl	1ea32 <free_list_add>
	return c + chunk_size(h, c);
   1ec86:	4639      	mov	r1, r7
   1ec88:	4630      	mov	r0, r6
   1ec8a:	f7ff fdd4 	bl	1e836 <chunk_size>
   1ec8e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1ec90:	4284      	cmp	r4, r0
   1ec92:	d208      	bcs.n	1eca6 <sys_heap_aligned_alloc+0xda>
		split_chunks(h, c, c_end);
   1ec94:	4639      	mov	r1, r7
   1ec96:	4630      	mov	r0, r6
   1ec98:	4622      	mov	r2, r4
   1ec9a:	f7ff fe85 	bl	1e9a8 <split_chunks>
		free_list_add(h, c_end);
   1ec9e:	4621      	mov	r1, r4
   1eca0:	4630      	mov	r0, r6
   1eca2:	f7ff fec6 	bl	1ea32 <free_list_add>
	set_chunk_used(h, c, true);
   1eca6:	2201      	movs	r2, #1
   1eca8:	4639      	mov	r1, r7
   1ecaa:	4630      	mov	r0, r6
   1ecac:	f7ff fdc9 	bl	1e842 <set_chunk_used>
	return mem;
   1ecb0:	e7a5      	b.n	1ebfe <sys_heap_aligned_alloc+0x32>

0001ecb2 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1ecb2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   1ecb6:	bf2c      	ite	cs
   1ecb8:	2308      	movcs	r3, #8
   1ecba:	2304      	movcc	r3, #4
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1ecc0:	2600      	movs	r6, #0
	bytes -= heap_footer_bytes(bytes);
   1ecc2:	1ad2      	subs	r2, r2, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ecc4:	188c      	adds	r4, r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ecc6:	1dcd      	adds	r5, r1, #7
   1ecc8:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1eccc:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ecd0:	1b64      	subs	r4, r4, r5
   1ecd2:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
   1ecd4:	6005      	str	r5, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ecd6:	4621      	mov	r1, r4
   1ecd8:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
   1ecda:	60ac      	str	r4, [r5, #8]
	h->avail_buckets = 0;
   1ecdc:	60ee      	str	r6, [r5, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ecde:	f7ff fdd6 	bl	1e88e <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1ece2:	1d42      	adds	r2, r0, #5
   1ece4:	0092      	lsls	r2, r2, #2
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1ece6:	3001      	adds	r0, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ece8:	f102 0707 	add.w	r7, r2, #7
   1ecec:	ea4f 07d7 	mov.w	r7, r7, lsr #3
   1ecf0:	4631      	mov	r1, r6
   1ecf2:	f1a2 0210 	sub.w	r2, r2, #16
   1ecf6:	f105 0010 	add.w	r0, r5, #16
   1ecfa:	bfb8      	it	lt
   1ecfc:	4632      	movlt	r2, r6
   1ecfe:	f7f8 fb6b 	bl	173d8 <memset>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1ed02:	463a      	mov	r2, r7
   1ed04:	4631      	mov	r1, r6
   1ed06:	4628      	mov	r0, r5
   1ed08:	f7ff fdb3 	bl	1e872 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ed0c:	4633      	mov	r3, r6
   1ed0e:	4632      	mov	r2, r6
   1ed10:	4631      	mov	r1, r6
   1ed12:	4628      	mov	r0, r5
   1ed14:	f7ff fd84 	bl	1e820 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ed18:	eba4 0807 	sub.w	r8, r4, r7
	set_chunk_used(h, 0, true);
   1ed1c:	4628      	mov	r0, r5
   1ed1e:	4631      	mov	r1, r6
   1ed20:	2201      	movs	r2, #1
   1ed22:	f7ff fd8e 	bl	1e842 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ed26:	4642      	mov	r2, r8
   1ed28:	4639      	mov	r1, r7
   1ed2a:	f7ff fda2 	bl	1e872 <set_chunk_size>
   1ed2e:	463b      	mov	r3, r7
   1ed30:	4632      	mov	r2, r6
   1ed32:	4639      	mov	r1, r7
   1ed34:	4628      	mov	r0, r5
   1ed36:	f7ff fd73 	bl	1e820 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1ed3a:	4621      	mov	r1, r4
   1ed3c:	4628      	mov	r0, r5
   1ed3e:	f7ff fd98 	bl	1e872 <set_chunk_size>
   1ed42:	4643      	mov	r3, r8
   1ed44:	4632      	mov	r2, r6
   1ed46:	4621      	mov	r1, r4
   1ed48:	4628      	mov	r0, r5
   1ed4a:	f7ff fd69 	bl	1e820 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1ed4e:	4621      	mov	r1, r4
   1ed50:	4628      	mov	r0, r5
   1ed52:	2201      	movs	r2, #1
   1ed54:	f7ff fd75 	bl	1e842 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1ed58:	4639      	mov	r1, r7
}
   1ed5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   1ed5e:	f7ff be68 	b.w	1ea32 <free_list_add>

0001ed62 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ed62:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1ed64:	f013 0307 	ands.w	r3, r3, #7
   1ed68:	d105      	bne.n	1ed76 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1ed6a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1ed6c:	2b00      	cmp	r3, #0
   1ed6e:	bf0c      	ite	eq
   1ed70:	2000      	moveq	r0, #0
   1ed72:	2003      	movne	r0, #3
   1ed74:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1ed76:	2b02      	cmp	r3, #2
   1ed78:	d105      	bne.n	1ed86 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1ed7a:	8b40      	ldrh	r0, [r0, #26]
   1ed7c:	fab0 f080 	clz	r0, r0
   1ed80:	0940      	lsrs	r0, r0, #5
   1ed82:	0080      	lsls	r0, r0, #2
   1ed84:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1ed86:	2b01      	cmp	r3, #1
   1ed88:	d105      	bne.n	1ed96 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1ed8a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1ed8c:	2b00      	cmp	r3, #0
   1ed8e:	bf0c      	ite	eq
   1ed90:	2000      	moveq	r0, #0
   1ed92:	2005      	movne	r0, #5
   1ed94:	4770      	bx	lr
	int evt = EVT_NOP;
   1ed96:	2000      	movs	r0, #0
}
   1ed98:	4770      	bx	lr

0001ed9a <validate_args>:
{
   1ed9a:	b510      	push	{r4, lr}
   1ed9c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ed9e:	b100      	cbz	r0, 1eda2 <validate_args+0x8>
   1eda0:	b911      	cbnz	r1, 1eda8 <validate_args+0xe>
		return -EINVAL;
   1eda2:	f06f 0015 	mvn.w	r0, #21
}
   1eda6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1eda8:	1d08      	adds	r0, r1, #4
   1edaa:	f000 f895 	bl	1eed8 <sys_notify_validate>
	if ((rv == 0)
   1edae:	2800      	cmp	r0, #0
   1edb0:	d1f9      	bne.n	1eda6 <validate_args+0xc>
	    && ((cli->notify.flags
   1edb2:	68a3      	ldr	r3, [r4, #8]
   1edb4:	2b03      	cmp	r3, #3
   1edb6:	d9f6      	bls.n	1eda6 <validate_args+0xc>
   1edb8:	e7f3      	b.n	1eda2 <validate_args+0x8>

0001edba <notify_one>:
{
   1edba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edbe:	460d      	mov	r5, r1
   1edc0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1edc2:	4619      	mov	r1, r3
   1edc4:	1d28      	adds	r0, r5, #4
{
   1edc6:	4690      	mov	r8, r2
   1edc8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1edca:	f000 f899 	bl	1ef00 <sys_notify_finalize>
	if (cb) {
   1edce:	4604      	mov	r4, r0
   1edd0:	b138      	cbz	r0, 1ede2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1edd2:	4633      	mov	r3, r6
   1edd4:	4642      	mov	r2, r8
   1edd6:	4629      	mov	r1, r5
   1edd8:	4638      	mov	r0, r7
   1edda:	46a4      	mov	ip, r4
}
   1eddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ede0:	4760      	bx	ip
}
   1ede2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ede6 <transition_complete>:
{
   1ede6:	b410      	push	{r4}
	__asm__ volatile(
   1ede8:	f04f 0420 	mov.w	r4, #32
   1edec:	f3ef 8211 	mrs	r2, BASEPRI
   1edf0:	f384 8812 	msr	BASEPRI_MAX, r4
   1edf4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1edf8:	6141      	str	r1, [r0, #20]
}
   1edfa:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1edfc:	2101      	movs	r1, #1
   1edfe:	f7e4 bf3d 	b.w	3c7c <process_event>

0001ee02 <onoff_manager_init>:
{
   1ee02:	b538      	push	{r3, r4, r5, lr}
   1ee04:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ee06:	4605      	mov	r5, r0
   1ee08:	b158      	cbz	r0, 1ee22 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ee0a:	b151      	cbz	r1, 1ee22 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ee0c:	680b      	ldr	r3, [r1, #0]
   1ee0e:	b143      	cbz	r3, 1ee22 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ee10:	684b      	ldr	r3, [r1, #4]
   1ee12:	b133      	cbz	r3, 1ee22 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ee14:	221c      	movs	r2, #28
   1ee16:	2100      	movs	r1, #0
   1ee18:	f7f8 fade 	bl	173d8 <memset>
	return 0;
   1ee1c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ee1e:	612c      	str	r4, [r5, #16]
}
   1ee20:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ee22:	f06f 0015 	mvn.w	r0, #21
   1ee26:	e7fb      	b.n	1ee20 <onoff_manager_init+0x1e>

0001ee28 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1ee28:	b570      	push	{r4, r5, r6, lr}
   1ee2a:	4605      	mov	r5, r0
   1ee2c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1ee2e:	f7ff ffb4 	bl	1ed9a <validate_args>

	if (rv < 0) {
   1ee32:	1e04      	subs	r4, r0, #0
   1ee34:	db15      	blt.n	1ee62 <onoff_request+0x3a>
   1ee36:	f04f 0320 	mov.w	r3, #32
   1ee3a:	f3ef 8211 	mrs	r2, BASEPRI
   1ee3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee42:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ee46:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ee4a:	8b6b      	ldrh	r3, [r5, #26]
   1ee4c:	8b2c      	ldrh	r4, [r5, #24]
   1ee4e:	428b      	cmp	r3, r1
   1ee50:	f004 0407 	and.w	r4, r4, #7
   1ee54:	d107      	bne.n	1ee66 <onoff_request+0x3e>
	__asm__ volatile(
   1ee56:	f382 8811 	msr	BASEPRI, r2
   1ee5a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1ee5e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1ee62:	4620      	mov	r0, r4
   1ee64:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1ee66:	2c02      	cmp	r4, #2
   1ee68:	d10c      	bne.n	1ee84 <onoff_request+0x5c>
		mgr->refs += 1U;
   1ee6a:	3301      	adds	r3, #1
   1ee6c:	836b      	strh	r3, [r5, #26]
   1ee6e:	f382 8811 	msr	BASEPRI, r2
   1ee72:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1ee76:	2300      	movs	r3, #0
   1ee78:	4622      	mov	r2, r4
   1ee7a:	4631      	mov	r1, r6
   1ee7c:	4628      	mov	r0, r5
   1ee7e:	f7ff ff9c 	bl	1edba <notify_one>
   1ee82:	e7ee      	b.n	1ee62 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1ee84:	2c06      	cmp	r4, #6
   1ee86:	d814      	bhi.n	1eeb2 <onoff_request+0x8a>
   1ee88:	e8df f004 	tbb	[pc, r4]
   1ee8c:	13131304 	.word	0x13131304
   1ee90:	1a04      	.short	0x1a04
   1ee92:	04          	.byte	0x04
   1ee93:	00          	.byte	0x00
	parent->next = child;
   1ee94:	2300      	movs	r3, #0
   1ee96:	6033      	str	r3, [r6, #0]
	return list->tail;
   1ee98:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ee9a:	b93b      	cbnz	r3, 1eeac <onoff_request+0x84>
	list->head = node;
   1ee9c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1eea0:	b9ac      	cbnz	r4, 1eece <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1eea2:	2102      	movs	r1, #2
   1eea4:	4628      	mov	r0, r5
   1eea6:	f7e4 fee9 	bl	3c7c <process_event>
   1eeaa:	e7da      	b.n	1ee62 <onoff_request+0x3a>
	parent->next = child;
   1eeac:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1eeae:	606e      	str	r6, [r5, #4]
}
   1eeb0:	e7f6      	b.n	1eea0 <onoff_request+0x78>
   1eeb2:	f382 8811 	msr	BASEPRI, r2
   1eeb6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1eeba:	f06f 0404 	mvn.w	r4, #4
   1eebe:	e7d0      	b.n	1ee62 <onoff_request+0x3a>
   1eec0:	f382 8811 	msr	BASEPRI, r2
   1eec4:	f3bf 8f6f 	isb	sy
   1eec8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1eecc:	e7c9      	b.n	1ee62 <onoff_request+0x3a>
   1eece:	f382 8811 	msr	BASEPRI, r2
   1eed2:	f3bf 8f6f 	isb	sy
		if (notify) {
   1eed6:	e7c4      	b.n	1ee62 <onoff_request+0x3a>

0001eed8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1eed8:	4603      	mov	r3, r0
   1eeda:	b140      	cbz	r0, 1eeee <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1eedc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1eede:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1eee2:	2a02      	cmp	r2, #2
   1eee4:	d006      	beq.n	1eef4 <sys_notify_validate+0x1c>
   1eee6:	2a03      	cmp	r2, #3
   1eee8:	d004      	beq.n	1eef4 <sys_notify_validate+0x1c>
   1eeea:	2a01      	cmp	r2, #1
   1eeec:	d005      	beq.n	1eefa <sys_notify_validate+0x22>
   1eeee:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1eef2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1eef4:	681a      	ldr	r2, [r3, #0]
   1eef6:	2a00      	cmp	r2, #0
   1eef8:	d0f9      	beq.n	1eeee <sys_notify_validate+0x16>
		notify->result = 0;
   1eefa:	2000      	movs	r0, #0
   1eefc:	6098      	str	r0, [r3, #8]
   1eefe:	4770      	bx	lr

0001ef00 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1ef00:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1ef02:	6842      	ldr	r2, [r0, #4]
   1ef04:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   1ef06:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1ef0a:	2a02      	cmp	r2, #2
   1ef0c:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   1ef10:	6081      	str	r1, [r0, #8]
	switch (method) {
   1ef12:	d007      	beq.n	1ef24 <sys_notify_finalize+0x24>
   1ef14:	2a03      	cmp	r2, #3
   1ef16:	d002      	beq.n	1ef1e <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1ef18:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1ef1a:	2000      	movs	r0, #0
   1ef1c:	e001      	b.n	1ef22 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1ef1e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1ef20:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1ef22:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1ef24:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1ef26:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1ef28:	2800      	cmp	r0, #0
   1ef2a:	d0f6      	beq.n	1ef1a <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1ef2c:	f7f7 fd6a 	bl	16a04 <z_impl_k_poll_signal_raise>
   1ef30:	e7f3      	b.n	1ef1a <sys_notify_finalize+0x1a>

0001ef32 <outs>:
{
   1ef32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef36:	4607      	mov	r7, r0
   1ef38:	4688      	mov	r8, r1
   1ef3a:	4615      	mov	r5, r2
   1ef3c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ef3e:	4614      	mov	r4, r2
   1ef40:	42b4      	cmp	r4, r6
   1ef42:	d305      	bcc.n	1ef50 <outs+0x1e>
   1ef44:	b10e      	cbz	r6, 1ef4a <outs+0x18>
	return (int)count;
   1ef46:	1b60      	subs	r0, r4, r5
   1ef48:	e008      	b.n	1ef5c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ef4a:	7823      	ldrb	r3, [r4, #0]
   1ef4c:	2b00      	cmp	r3, #0
   1ef4e:	d0fa      	beq.n	1ef46 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1ef50:	4641      	mov	r1, r8
   1ef52:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ef56:	47b8      	blx	r7
		if (rc < 0) {
   1ef58:	2800      	cmp	r0, #0
   1ef5a:	daf1      	bge.n	1ef40 <outs+0xe>
}
   1ef5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ef60 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   1ef60:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   1ef62:	6903      	ldr	r3, [r0, #16]
{
   1ef64:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   1ef66:	f013 0008 	ands.w	r0, r3, #8
   1ef6a:	d109      	bne.n	1ef80 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1ef6c:	6813      	ldr	r3, [r2, #0]
   1ef6e:	68d4      	ldr	r4, [r2, #12]
   1ef70:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
   1ef72:	bf9b      	ittet	ls
   1ef74:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   1ef76:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   1ef78:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   1ef7a:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   1ef7c:	600b      	str	r3, [r1, #0]
}
   1ef7e:	bd10      	pop	{r4, pc}
   1ef80:	2300      	movs	r3, #0
		return false;
   1ef82:	4618      	mov	r0, r3
   1ef84:	e7fa      	b.n	1ef7c <free_space+0x1c>

0001ef86 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   1ef86:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   1ef88:	a901      	add	r1, sp, #4
{
   1ef8a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1ef8c:	f7ff ffe8 	bl	1ef60 <free_space>
   1ef90:	b120      	cbz	r0, 1ef9c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1ef92:	9b01      	ldr	r3, [sp, #4]
   1ef94:	68e2      	ldr	r2, [r4, #12]
   1ef96:	3b01      	subs	r3, #1
   1ef98:	4413      	add	r3, r2
   1ef9a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   1ef9c:	6a20      	ldr	r0, [r4, #32]
   1ef9e:	9b01      	ldr	r3, [sp, #4]
   1efa0:	1ac0      	subs	r0, r0, r3
}
   1efa2:	3801      	subs	r0, #1
   1efa4:	b002      	add	sp, #8
   1efa6:	bd10      	pop	{r4, pc}

0001efa8 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   1efa8:	b510      	push	{r4, lr}
   1efaa:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1efac:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1efae:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1efb0:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1efb2:	07d2      	lsls	r2, r2, #31
   1efb4:	d502      	bpl.n	1efbc <idx_inc+0x14>
		return i & (buffer->size - 1);
   1efb6:	3b01      	subs	r3, #1
   1efb8:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   1efba:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1efbc:	4298      	cmp	r0, r3
   1efbe:	bf28      	it	cs
   1efc0:	1ac0      	subcs	r0, r0, r3
   1efc2:	e7fa      	b.n	1efba <idx_inc+0x12>

0001efc4 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   1efc4:	b510      	push	{r4, lr}
   1efc6:	4604      	mov	r4, r0
   1efc8:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1efca:	68c1      	ldr	r1, [r0, #12]
   1efcc:	f7ff ffec 	bl	1efa8 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   1efd0:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1efd2:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   1efd4:	f023 0308 	bic.w	r3, r3, #8
   1efd8:	6123      	str	r3, [r4, #16]
}
   1efda:	bd10      	pop	{r4, pc}

0001efdc <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   1efdc:	b538      	push	{r3, r4, r5, lr}
   1efde:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1efe0:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   1efe2:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1efe4:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1efe6:	f043 0302 	orr.w	r3, r3, #2
{
   1efea:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1efec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1eff0:	6801      	ldr	r1, [r0, #0]
   1eff2:	462a      	mov	r2, r5
   1eff4:	f7ff ffd8 	bl	1efa8 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1eff8:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1effa:	6861      	ldr	r1, [r4, #4]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1effc:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   1effe:	bf08      	it	eq
   1f000:	6923      	ldreq	r3, [r4, #16]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1f002:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   1f004:	bf08      	it	eq
   1f006:	f043 0308 	orreq.w	r3, r3, #8
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1f00a:	462a      	mov	r2, r5
   1f00c:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
   1f00e:	bf08      	it	eq
   1f010:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1f012:	f7ff ffc9 	bl	1efa8 <idx_inc>
   1f016:	6060      	str	r0, [r4, #4]
}
   1f018:	bd38      	pop	{r3, r4, r5, pc}

0001f01a <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   1f01a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1f01e:	68c7      	ldr	r7, [r0, #12]
   1f020:	69c6      	ldr	r6, [r0, #28]
{
   1f022:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   1f024:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
{
   1f028:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   1f02a:	f003 0303 	and.w	r3, r3, #3
   1f02e:	2b02      	cmp	r3, #2
{
   1f030:	4688      	mov	r8, r1
   1f032:	4691      	mov	r9, r2
   1f034:	f04f 0300 	mov.w	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1f038:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1f03c:	d009      	beq.n	1f052 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   1f03e:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   1f040:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   1f044:	6923      	ldr	r3, [r4, #16]
   1f046:	0799      	lsls	r1, r3, #30
   1f048:	d410      	bmi.n	1f06c <drop_item_locked+0x52>
		return false;
   1f04a:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   1f04c:	b003      	add	sp, #12
   1f04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   1f052:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   1f056:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   1f058:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   1f05a:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   1f05e:	d0f1      	beq.n	1f044 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   1f060:	f7ff ffb0 	bl	1efc4 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1f064:	68e3      	ldr	r3, [r4, #12]
   1f066:	60a3      	str	r3, [r4, #8]
		return true;
   1f068:	2001      	movs	r0, #1
   1f06a:	e7ef      	b.n	1f04c <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   1f06c:	69a3      	ldr	r3, [r4, #24]
   1f06e:	4650      	mov	r0, sl
   1f070:	4798      	blx	r3
	return item->hdr.valid;
   1f072:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
   1f076:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   1f078:	07da      	lsls	r2, r3, #31
   1f07a:	d5e6      	bpl.n	1f04a <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   1f07c:	f013 0302 	ands.w	r3, r3, #2
   1f080:	d01d      	beq.n	1f0be <drop_item_locked+0xa4>
		if (free_wlen) {
   1f082:	f1b8 0f00 	cmp.w	r8, #0
   1f086:	d003      	beq.n	1f090 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   1f088:	4641      	mov	r1, r8
   1f08a:	4620      	mov	r0, r4
   1f08c:	f7ff ffa6 	bl	1efdc <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1f090:	6861      	ldr	r1, [r4, #4]
   1f092:	462a      	mov	r2, r5
   1f094:	4620      	mov	r0, r4
   1f096:	f7ff ff87 	bl	1efa8 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   1f09a:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   1f09e:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1f0a0:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   1f0a2:	d104      	bne.n	1f0ae <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   1f0a4:	462a      	mov	r2, r5
   1f0a6:	4620      	mov	r0, r4
   1f0a8:	f7ff ff7e 	bl	1efa8 <idx_inc>
   1f0ac:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   1f0ae:	68a3      	ldr	r3, [r4, #8]
   1f0b0:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   1f0b2:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   1f0b4:	6923      	ldr	r3, [r4, #16]
   1f0b6:	f043 0308 	orr.w	r3, r3, #8
   1f0ba:	6123      	str	r3, [r4, #16]
   1f0bc:	e7d4      	b.n	1f068 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   1f0be:	4601      	mov	r1, r0
   1f0c0:	4620      	mov	r0, r4
   1f0c2:	9301      	str	r3, [sp, #4]
   1f0c4:	f7ff ff7e 	bl	1efc4 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1f0c8:	68e2      	ldr	r2, [r4, #12]
   1f0ca:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   1f0cc:	f1b8 0f00 	cmp.w	r8, #0
   1f0d0:	d004      	beq.n	1f0dc <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   1f0d2:	6821      	ldr	r1, [r4, #0]
   1f0d4:	69e2      	ldr	r2, [r4, #28]
   1f0d6:	9b01      	ldr	r3, [sp, #4]
   1f0d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   1f0dc:	eb05 0208 	add.w	r2, r5, r8
   1f0e0:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   1f0e4:	6821      	ldr	r1, [r4, #0]
   1f0e6:	4620      	mov	r0, r4
   1f0e8:	f7ff ff5e 	bl	1efa8 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   1f0ec:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   1f0ee:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   1f0f0:	f043 0308 	orr.w	r3, r3, #8
   1f0f4:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   1f0f6:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   1f0fa:	f36f 0300 	bfc	r3, #0, #1
   1f0fe:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   1f102:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   1f106:	e7af      	b.n	1f068 <drop_item_locked+0x4e>

0001f108 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   1f108:	b570      	push	{r4, r5, r6, lr}
   1f10a:	4604      	mov	r4, r0
   1f10c:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   1f10e:	f7ff ff4b 	bl	1efa8 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   1f112:	6823      	ldr	r3, [r4, #0]
   1f114:	4283      	cmp	r3, r0
   1f116:	d105      	bne.n	1f124 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   1f118:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   1f11a:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   1f11c:	f023 0308 	bic.w	r3, r3, #8
   1f120:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   1f122:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   1f124:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   1f126:	00ab      	lsls	r3, r5, #2
   1f128:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   1f12c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   1f130:	6861      	ldr	r1, [r4, #4]
   1f132:	462a      	mov	r2, r5
   1f134:	4620      	mov	r0, r4
   1f136:	f7ff ff37 	bl	1efa8 <idx_inc>
   1f13a:	6060      	str	r0, [r4, #4]
   1f13c:	e7f1      	b.n	1f122 <post_drop_action+0x1a>

0001f13e <max_utilization_update>:
{
   1f13e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1f140:	6903      	ldr	r3, [r0, #16]
{
   1f142:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1f144:	075b      	lsls	r3, r3, #29
   1f146:	d506      	bpl.n	1f156 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1f148:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1f14a:	f7ff ff1c 	bl	1ef86 <get_usage>
   1f14e:	4285      	cmp	r5, r0
   1f150:	bf2c      	ite	cs
   1f152:	6265      	strcs	r5, [r4, #36]	; 0x24
   1f154:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   1f156:	bd38      	pop	{r3, r4, r5, pc}

0001f158 <mpsc_pbuf_init>:
{
   1f158:	b538      	push	{r3, r4, r5, lr}
   1f15a:	460d      	mov	r5, r1
   1f15c:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1f15e:	221c      	movs	r2, #28
   1f160:	2100      	movs	r1, #0
   1f162:	f7f8 f939 	bl	173d8 <memset>
	buffer->max_usage = 0;
   1f166:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   1f168:	68eb      	ldr	r3, [r5, #12]
   1f16a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   1f16c:	68ab      	ldr	r3, [r5, #8]
   1f16e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   1f170:	682b      	ldr	r3, [r5, #0]
   1f172:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   1f174:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   1f176:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   1f178:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   1f17a:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   1f17c:	b123      	cbz	r3, 1f188 <mpsc_pbuf_init+0x30>
   1f17e:	1e59      	subs	r1, r3, #1
   1f180:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1f182:	bf08      	it	eq
   1f184:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   1f188:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f18a:	2201      	movs	r2, #1
   1f18c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1f190:	2100      	movs	r1, #0
}
   1f192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f196:	f004 bf34 	b.w	24002 <z_impl_k_sem_init>

0001f19a <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   1f19a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   1f19e:	2500      	movs	r5, #0
{
   1f1a0:	b087      	sub	sp, #28
   1f1a2:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   1f1a4:	6a03      	ldr	r3, [r0, #32]
{
   1f1a6:	4604      	mov	r4, r0
	if (wlen > (buffer->size)) {
   1f1a8:	428b      	cmp	r3, r1
{
   1f1aa:	460e      	mov	r6, r1
   1f1ac:	4692      	mov	sl, r2
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   1f1ae:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
   1f1b0:	9503      	str	r5, [sp, #12]
	uint32_t tmp_wr_idx_shift = 0;
   1f1b2:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
   1f1b4:	d33a      	bcc.n	1f22c <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   1f1b6:	f04f 0320 	mov.w	r3, #32
   1f1ba:	f3ef 8b11 	mrs	fp, BASEPRI
   1f1be:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1c2:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   1f1c6:	9a05      	ldr	r2, [sp, #20]
   1f1c8:	46d8      	mov	r8, fp
   1f1ca:	b12a      	cbz	r2, 1f1d8 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   1f1cc:	4629      	mov	r1, r5
   1f1ce:	4620      	mov	r0, r4
   1f1d0:	f7ff ff9a 	bl	1f108 <post_drop_action>
			tmp_wr_idx_shift = 0;
   1f1d4:	2300      	movs	r3, #0
   1f1d6:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   1f1d8:	a904      	add	r1, sp, #16
   1f1da:	4620      	mov	r0, r4
   1f1dc:	f7ff fec0 	bl	1ef60 <free_space>

		if (free_wlen >= wlen) {
   1f1e0:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
   1f1e2:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   1f1e4:	42b1      	cmp	r1, r6
   1f1e6:	d32a      	bcc.n	1f23e <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1f1e8:	6822      	ldr	r2, [r4, #0]
			item =
   1f1ea:	69e3      	ldr	r3, [r4, #28]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1f1ec:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   1f1ee:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   1f1f2:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
   1f1f6:	f021 0103 	bic.w	r1, r1, #3
   1f1fa:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1f1fe:	6821      	ldr	r1, [r4, #0]
   1f200:	4632      	mov	r2, r6
   1f202:	f7ff fed1 	bl	1efa8 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1f206:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1f208:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1f20a:	4298      	cmp	r0, r3
   1f20c:	d012      	beq.n	1f234 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   1f20e:	2700      	movs	r7, #0
	__asm__ volatile(
   1f210:	f388 8811 	msr	BASEPRI, r8
   1f214:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   1f218:	9903      	ldr	r1, [sp, #12]
   1f21a:	b129      	cbz	r1, 1f228 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   1f21c:	6962      	ldr	r2, [r4, #20]
   1f21e:	b10a      	cbz	r2, 1f224 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   1f220:	4620      	mov	r0, r4
   1f222:	4790      	blx	r2
			}
			dropped_item = NULL;
   1f224:	2300      	movs	r3, #0
   1f226:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   1f228:	2f00      	cmp	r7, #0
   1f22a:	d1c4      	bne.n	1f1b6 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   1f22c:	4648      	mov	r0, r9
   1f22e:	b007      	add	sp, #28
   1f230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   1f234:	6923      	ldr	r3, [r4, #16]
   1f236:	f043 0308 	orr.w	r3, r3, #8
   1f23a:	6123      	str	r3, [r4, #16]
   1f23c:	e7e7      	b.n	1f20e <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   1f23e:	b118      	cbz	r0, 1f248 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   1f240:	4620      	mov	r0, r4
   1f242:	f7ff fecb 	bl	1efdc <add_skip_item>
			cont = true;
   1f246:	e7e3      	b.n	1f210 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   1f248:	9b00      	ldr	r3, [sp, #0]
   1f24a:	ea5a 0303 	orrs.w	r3, sl, r3
   1f24e:	d01a      	beq.n	1f286 <mpsc_pbuf_alloc+0xec>
   1f250:	9101      	str	r1, [sp, #4]
   1f252:	f004 fde9 	bl	23e28 <k_is_in_isr>
   1f256:	9901      	ldr	r1, [sp, #4]
   1f258:	b9a8      	cbnz	r0, 1f286 <mpsc_pbuf_alloc+0xec>
   1f25a:	f38b 8811 	msr	BASEPRI, fp
   1f25e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   1f262:	4652      	mov	r2, sl
   1f264:	9b00      	ldr	r3, [sp, #0]
   1f266:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1f26a:	f7f6 fb93 	bl	15994 <z_impl_k_sem_take>
	__asm__ volatile(
   1f26e:	f04f 0320 	mov.w	r3, #32
   1f272:	f3ef 8811 	mrs	r8, BASEPRI
   1f276:	f383 8812 	msr	BASEPRI_MAX, r3
   1f27a:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   1f27e:	fab0 f780 	clz	r7, r0
   1f282:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   1f284:	e7c4      	b.n	1f210 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   1f286:	4620      	mov	r0, r4
   1f288:	ab05      	add	r3, sp, #20
   1f28a:	aa03      	add	r2, sp, #12
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   1f28c:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   1f28e:	f7ff fec4 	bl	1f01a <drop_item_locked>
   1f292:	4607      	mov	r7, r0
   1f294:	e7bc      	b.n	1f210 <mpsc_pbuf_alloc+0x76>

0001f296 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1f296:	b570      	push	{r4, r5, r6, lr}
   1f298:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1f29a:	6983      	ldr	r3, [r0, #24]
   1f29c:	4608      	mov	r0, r1
{
   1f29e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1f2a0:	4798      	blx	r3
   1f2a2:	4602      	mov	r2, r0
   1f2a4:	f04f 0320 	mov.w	r3, #32
   1f2a8:	f3ef 8611 	mrs	r6, BASEPRI
   1f2ac:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2b0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1f2b4:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1f2b6:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   1f2b8:	f043 0301 	orr.w	r3, r3, #1
   1f2bc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1f2be:	6861      	ldr	r1, [r4, #4]
   1f2c0:	f7ff fe72 	bl	1efa8 <idx_inc>
   1f2c4:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1f2c6:	4620      	mov	r0, r4
   1f2c8:	f7ff ff39 	bl	1f13e <max_utilization_update>
	__asm__ volatile(
   1f2cc:	f386 8811 	msr	BASEPRI, r6
   1f2d0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   1f2d4:	bd70      	pop	{r4, r5, r6, pc}

0001f2d6 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1f2d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f2d8:	4604      	mov	r4, r0
	__asm__ volatile(
   1f2da:	f04f 0320 	mov.w	r3, #32
   1f2de:	f3ef 8611 	mrs	r6, BASEPRI
   1f2e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2e6:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   1f2ea:	6923      	ldr	r3, [r4, #16]
   1f2ec:	f013 0f08 	tst.w	r3, #8
   1f2f0:	68a3      	ldr	r3, [r4, #8]
   1f2f2:	d102      	bne.n	1f2fa <mpsc_pbuf_claim+0x24>
   1f2f4:	6862      	ldr	r2, [r4, #4]
   1f2f6:	4293      	cmp	r3, r2
   1f2f8:	d900      	bls.n	1f2fc <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   1f2fa:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   1f2fc:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   1f2fe:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
   1f300:	b92a      	cbnz	r2, 1f30e <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   1f302:	f386 8811 	msr	BASEPRI, r6
   1f306:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   1f30a:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   1f30c:	e033      	b.n	1f376 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   1f30e:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   1f312:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   1f316:	f012 0003 	ands.w	r0, r2, #3
   1f31a:	d0f2      	beq.n	1f302 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   1f31c:	2802      	cmp	r0, #2
   1f31e:	d103      	bne.n	1f328 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   1f320:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   1f324:	08ad      	lsrs	r5, r5, #2
   1f326:	d105      	bne.n	1f334 <mpsc_pbuf_claim+0x5e>
   1f328:	07d0      	lsls	r0, r2, #31
   1f32a:	d412      	bmi.n	1f352 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   1f32c:	4638      	mov	r0, r7
   1f32e:	69a3      	ldr	r3, [r4, #24]
   1f330:	4798      	blx	r3
   1f332:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   1f334:	68a1      	ldr	r1, [r4, #8]
   1f336:	462a      	mov	r2, r5
   1f338:	4620      	mov	r0, r4
   1f33a:	f7ff fe35 	bl	1efa8 <idx_inc>
				rd_idx_inc(buffer, inc);
   1f33e:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   1f340:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   1f342:	4620      	mov	r0, r4
   1f344:	f7ff fe3e 	bl	1efc4 <rd_idx_inc>
   1f348:	f386 8811 	msr	BASEPRI, r6
   1f34c:	f3bf 8f6f 	isb	sy
	} while (cont);
   1f350:	e7c3      	b.n	1f2da <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   1f352:	f042 0202 	orr.w	r2, r2, #2
   1f356:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   1f35a:	69a3      	ldr	r3, [r4, #24]
   1f35c:	4638      	mov	r0, r7
					idx_inc(buffer, buffer->tmp_rd_idx,
   1f35e:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   1f360:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   1f362:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   1f364:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   1f366:	4620      	mov	r0, r4
   1f368:	f7ff fe1e 	bl	1efa8 <idx_inc>
				buffer->tmp_rd_idx =
   1f36c:	60a0      	str	r0, [r4, #8]
   1f36e:	f386 8811 	msr	BASEPRI, r6
   1f372:	f3bf 8f6f 	isb	sy
}
   1f376:	4638      	mov	r0, r7
   1f378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f37a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   1f37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f37c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1f37e:	6983      	ldr	r3, [r0, #24]
   1f380:	4608      	mov	r0, r1
{
   1f382:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1f384:	4798      	blx	r3
   1f386:	4606      	mov	r6, r0
	__asm__ volatile(
   1f388:	f04f 0320 	mov.w	r3, #32
   1f38c:	f3ef 8711 	mrs	r7, BASEPRI
   1f390:	f383 8812 	msr	BASEPRI_MAX, r3
   1f394:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1f398:	782b      	ldrb	r3, [r5, #0]
   1f39a:	f36f 0300 	bfc	r3, #0, #1
   1f39e:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1f3a0:	6923      	ldr	r3, [r4, #16]
   1f3a2:	079b      	lsls	r3, r3, #30
   1f3a4:	d505      	bpl.n	1f3b2 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1f3a6:	68e2      	ldr	r2, [r4, #12]
   1f3a8:	69e3      	ldr	r3, [r4, #28]
   1f3aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1f3ae:	429d      	cmp	r5, r3
   1f3b0:	d11a      	bne.n	1f3e8 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   1f3b2:	782b      	ldrb	r3, [r5, #0]
   1f3b4:	f36f 0341 	bfc	r3, #1, #1
   1f3b8:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   1f3ba:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   1f3be:	4299      	cmp	r1, r3
   1f3c0:	d104      	bne.n	1f3cc <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   1f3c2:	4632      	mov	r2, r6
   1f3c4:	4620      	mov	r0, r4
   1f3c6:	f7ff fdef 	bl	1efa8 <idx_inc>
   1f3ca:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   1f3cc:	4631      	mov	r1, r6
   1f3ce:	4620      	mov	r0, r4
   1f3d0:	f7ff fdf8 	bl	1efc4 <rd_idx_inc>
	__asm__ volatile(
   1f3d4:	f387 8811 	msr	BASEPRI, r7
   1f3d8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1f3dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   1f3e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f3e4:	f7f6 bab0 	b.w	15948 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1f3e8:	682b      	ldr	r3, [r5, #0]
   1f3ea:	f360 039f 	bfi	r3, r0, #2, #30
   1f3ee:	602b      	str	r3, [r5, #0]
   1f3f0:	e7f0      	b.n	1f3d4 <mpsc_pbuf_free+0x5a>

0001f3f2 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   1f3f2:	6902      	ldr	r2, [r0, #16]
   1f3f4:	6883      	ldr	r3, [r0, #8]
   1f3f6:	0712      	lsls	r2, r2, #28
   1f3f8:	d402      	bmi.n	1f400 <mpsc_pbuf_is_pending+0xe>
   1f3fa:	6842      	ldr	r2, [r0, #4]
   1f3fc:	429a      	cmp	r2, r3
   1f3fe:	d200      	bcs.n	1f402 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   1f400:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   1f402:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1f404:	1e18      	subs	r0, r3, #0
   1f406:	bf18      	it	ne
   1f408:	2001      	movne	r0, #1
   1f40a:	4770      	bx	lr

0001f40c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_TCP_SERVER, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_UDP_SERVER, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_UDP_CLIENT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WIFI_STATIONING, 1);

GEN_ABS_SYM_END
   1f40c:	4770      	bx	lr

0001f40e <pm_state_exit_post_ops>:
   1f40e:	2300      	movs	r3, #0
   1f410:	f383 8811 	msr	BASEPRI, r3
   1f414:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1f418:	4770      	bx	lr

0001f41a <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   1f41a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1f41c:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1f41e:	bf5f      	itttt	pl
   1f420:	6803      	ldrpl	r3, [r0, #0]
   1f422:	8842      	ldrhpl	r2, [r0, #2]
   1f424:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   1f428:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   1f42c:	bf5d      	ittte	pl
   1f42e:	3017      	addpl	r0, #23
   1f430:	f020 0007 	bicpl.w	r0, r0, #7
   1f434:	0880      	lsrpl	r0, r0, #2
	return 0;
   1f436:	2000      	movmi	r0, #0
}
   1f438:	4770      	bx	lr

0001f43a <dummy_timestamp>:
}
   1f43a:	2000      	movs	r0, #0
   1f43c:	4770      	bx	lr

0001f43e <default_get_timestamp>:
   1f43e:	f003 bb0c 	b.w	22a5a <sys_clock_cycle_get_32>

0001f442 <atomic_inc>:
{
   1f442:	4603      	mov	r3, r0
}
   1f444:	e8d3 0fef 	ldaex	r0, [r3]
   1f448:	1c42      	adds	r2, r0, #1
   1f44a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f44e:	2900      	cmp	r1, #0
   1f450:	d1f8      	bne.n	1f444 <atomic_inc+0x2>
   1f452:	4770      	bx	lr

0001f454 <z_log_vprintk>:
{
   1f454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   1f456:	2300      	movs	r3, #0
   1f458:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f45c:	461a      	mov	r2, r3
   1f45e:	4619      	mov	r1, r3
   1f460:	4618      	mov	r0, r3
   1f462:	e9cd 3300 	strd	r3, r3, [sp]
   1f466:	f7e5 fd91 	bl	4f8c <z_impl_z_log_msg_runtime_vcreate>
}
   1f46a:	b005      	add	sp, #20
   1f46c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f470 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1f470:	2001      	movs	r0, #1
   1f472:	f7e5 bb4f 	b.w	4b14 <z_log_dropped>

0001f476 <z_log_get_tag>:
}
   1f476:	2000      	movs	r0, #0
   1f478:	4770      	bx	lr

0001f47a <z_cbprintf_cpy>:
{
   1f47a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1f47c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1f480:	1b9b      	subs	r3, r3, r6
   1f482:	428b      	cmp	r3, r1
{
   1f484:	460c      	mov	r4, r1
   1f486:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1f488:	d30a      	bcc.n	1f4a0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1f48a:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f48c:	460a      	mov	r2, r1
   1f48e:	4601      	mov	r1, r0
   1f490:	1998      	adds	r0, r3, r6
   1f492:	f7e1 fb5f 	bl	b54 <memcpy>
	return len;
   1f496:	4620      	mov	r0, r4
	desc->off += len;
   1f498:	68ab      	ldr	r3, [r5, #8]
   1f49a:	4423      	add	r3, r4
   1f49c:	60ab      	str	r3, [r5, #8]
}
   1f49e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1f4a0:	f06f 001b 	mvn.w	r0, #27
   1f4a4:	e7fb      	b.n	1f49e <z_cbprintf_cpy+0x24>

0001f4a6 <z_log_msg_finalize>:
{
   1f4a6:	b570      	push	{r4, r5, r6, lr}
   1f4a8:	460e      	mov	r6, r1
   1f4aa:	4615      	mov	r5, r2
   1f4ac:	4619      	mov	r1, r3
	if (!msg) {
   1f4ae:	4604      	mov	r4, r0
   1f4b0:	0d12      	lsrs	r2, r2, #20
   1f4b2:	b918      	cbnz	r0, 1f4bc <z_log_msg_finalize+0x16>
}
   1f4b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1f4b8:	f7e5 bb2c 	b.w	4b14 <z_log_dropped>
	if (data) {
   1f4bc:	b12b      	cbz	r3, 1f4ca <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   1f4be:	3010      	adds	r0, #16
   1f4c0:	f3c5 234a 	ubfx	r3, r5, #9, #11
   1f4c4:	4418      	add	r0, r3
   1f4c6:	f7e1 fb45 	bl	b54 <memcpy>
	msg->hdr.source = source;
   1f4ca:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1f4ce:	4620      	mov	r0, r4
}
   1f4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1f4d4:	f7e5 bca2 	b.w	4e1c <z_log_msg_commit>

0001f4d8 <buffer_write>:
{
   1f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4da:	4606      	mov	r6, r0
   1f4dc:	460d      	mov	r5, r1
   1f4de:	4614      	mov	r4, r2
   1f4e0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1f4e2:	4621      	mov	r1, r4
   1f4e4:	4628      	mov	r0, r5
   1f4e6:	463a      	mov	r2, r7
   1f4e8:	47b0      	blx	r6
	} while (len != 0);
   1f4ea:	1a24      	subs	r4, r4, r0
		buf += processed;
   1f4ec:	4405      	add	r5, r0
	} while (len != 0);
   1f4ee:	d1f8      	bne.n	1f4e2 <buffer_write+0xa>
}
   1f4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f4f2 <cbvprintf>:
{
   1f4f2:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1f4f4:	2400      	movs	r4, #0
   1f4f6:	9400      	str	r4, [sp, #0]
   1f4f8:	f7e4 fd30 	bl	3f5c <z_cbvprintf_impl>
}
   1f4fc:	b002      	add	sp, #8
   1f4fe:	bd10      	pop	{r4, pc}

0001f500 <log_output_flush>:
{
   1f500:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1f502:	6842      	ldr	r2, [r0, #4]
{
   1f504:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1f506:	e9d2 2300 	ldrd	r2, r3, [r2]
   1f50a:	6881      	ldr	r1, [r0, #8]
   1f50c:	6800      	ldr	r0, [r0, #0]
   1f50e:	f7ff ffe3 	bl	1f4d8 <buffer_write>
	output->control_block->offset = 0;
   1f512:	2200      	movs	r2, #0
   1f514:	6863      	ldr	r3, [r4, #4]
   1f516:	601a      	str	r2, [r3, #0]
}
   1f518:	bd10      	pop	{r4, pc}

0001f51a <out_func>:
{
   1f51a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f51c:	684b      	ldr	r3, [r1, #4]
{
   1f51e:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f520:	681a      	ldr	r2, [r3, #0]
   1f522:	68cb      	ldr	r3, [r1, #12]
{
   1f524:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f526:	429a      	cmp	r2, r3
   1f528:	d102      	bne.n	1f530 <out_func+0x16>
		log_output_flush(out_ctx);
   1f52a:	4608      	mov	r0, r1
   1f52c:	f7ff ffe8 	bl	1f500 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f530:	6863      	ldr	r3, [r4, #4]
   1f532:	e8d3 2fef 	ldaex	r2, [r3]
   1f536:	1c51      	adds	r1, r2, #1
   1f538:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1f53c:	2800      	cmp	r0, #0
   1f53e:	d1f8      	bne.n	1f532 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1f540:	68a3      	ldr	r3, [r4, #8]
}
   1f542:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1f544:	549d      	strb	r5, [r3, r2]
}
   1f546:	bd38      	pop	{r3, r4, r5, pc}

0001f548 <cr_out_func>:
	if (c == '\n') {
   1f548:	280a      	cmp	r0, #10
{
   1f54a:	b538      	push	{r3, r4, r5, lr}
   1f54c:	4604      	mov	r4, r0
   1f54e:	460d      	mov	r5, r1
	if (c == '\n') {
   1f550:	d102      	bne.n	1f558 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1f552:	200d      	movs	r0, #13
   1f554:	f7ff ffe1 	bl	1f51a <out_func>
	out_func(c, ctx);
   1f558:	4629      	mov	r1, r5
   1f55a:	4620      	mov	r0, r4
   1f55c:	f7ff ffdd 	bl	1f51a <out_func>
}
   1f560:	2000      	movs	r0, #0
   1f562:	bd38      	pop	{r3, r4, r5, pc}

0001f564 <log_backend_uart_init>:
}
   1f564:	4770      	bx	lr

0001f566 <inet_is_supported>:
};

#if defined(CONFIG_NET_NATIVE)
static bool inet_is_supported(int family, int type, int proto)
{
	if (family != AF_INET && family != AF_INET6) {
   1f566:	3801      	subs	r0, #1
		return false;
	}

	return true;
}
   1f568:	2801      	cmp	r0, #1
   1f56a:	bf8c      	ite	hi
   1f56c:	2000      	movhi	r0, #0
   1f56e:	2001      	movls	r0, #1
   1f570:	4770      	bx	lr

0001f572 <sock_ioctl_vmeth>:
	switch (request) {
   1f572:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
{
   1f576:	b570      	push	{r4, r5, r6, lr}
   1f578:	4604      	mov	r4, r0
	switch (request) {
   1f57a:	d027      	beq.n	1f5cc <sock_ioctl_vmeth+0x5a>
   1f57c:	d80a      	bhi.n	1f594 <sock_ioctl_vmeth+0x22>
   1f57e:	2903      	cmp	r1, #3
   1f580:	d014      	beq.n	1f5ac <sock_ioctl_vmeth+0x3a>
   1f582:	2904      	cmp	r1, #4
   1f584:	d017      	beq.n	1f5b6 <sock_ioctl_vmeth+0x44>
		errno = EOPNOTSUPP;
   1f586:	f000 fd5c 	bl	20042 <__errno>
   1f58a:	235f      	movs	r3, #95	; 0x5f
   1f58c:	6003      	str	r3, [r0, #0]
		return -1;
   1f58e:	f04f 30ff 	mov.w	r0, #4294967295
   1f592:	e00f      	b.n	1f5b4 <sock_ioctl_vmeth+0x42>
	switch (request) {
   1f594:	f240 1303 	movw	r3, #259	; 0x103
   1f598:	4299      	cmp	r1, r3
   1f59a:	d06a      	beq.n	1f672 <sock_ioctl_vmeth+0x100>
   1f59c:	f240 1305 	movw	r3, #261	; 0x105
   1f5a0:	4299      	cmp	r1, r3
   1f5a2:	d1f0      	bne.n	1f586 <sock_ioctl_vmeth+0x14>
		lock = va_arg(args, struct k_mutex *);
   1f5a4:	6813      	ldr	r3, [r2, #0]
	ctx->cond.lock = lock;
   1f5a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
		return 0;
   1f5aa:	e00d      	b.n	1f5c8 <sock_ioctl_vmeth+0x56>
		if (sock_is_nonblock(obj)) {
   1f5ac:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1f5ae:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f5b2:	0380      	lsls	r0, r0, #14
}
   1f5b4:	bd70      	pop	{r4, r5, r6, pc}
	val = (val & ~mask) | flag;
   1f5b6:	6e43      	ldr	r3, [r0, #100]	; 0x64
		if (flags & O_NONBLOCK) {
   1f5b8:	6812      	ldr	r2, [r2, #0]
   1f5ba:	f023 0302 	bic.w	r3, r3, #2
   1f5be:	0452      	lsls	r2, r2, #17
   1f5c0:	bf48      	it	mi
   1f5c2:	f043 0302 	orrmi.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   1f5c6:	6643      	str	r3, [r0, #100]	; 0x64
		return 0;
   1f5c8:	2000      	movs	r0, #0
   1f5ca:	e7f3      	b.n	1f5b4 <sock_ioctl_vmeth+0x42>
		pev = va_arg(args, struct k_poll_event **);
   1f5cc:	e9d2 1500 	ldrd	r1, r5, [r2]
	if (pfd->events & ZSOCK_POLLIN) {
   1f5d0:	888b      	ldrh	r3, [r1, #4]
		pev_end = va_arg(args, struct k_poll_event *);
   1f5d2:	6892      	ldr	r2, [r2, #8]
	if (pfd->events & ZSOCK_POLLIN) {
   1f5d4:	07de      	lsls	r6, r3, #31
   1f5d6:	d51a      	bpl.n	1f60e <sock_ioctl_vmeth+0x9c>
		if (*pev == pev_end) {
   1f5d8:	682b      	ldr	r3, [r5, #0]
   1f5da:	429a      	cmp	r2, r3
   1f5dc:	d102      	bne.n	1f5e4 <sock_ioctl_vmeth+0x72>
			return -ENOMEM;
   1f5de:	f06f 000b 	mvn.w	r0, #11
   1f5e2:	e7e7      	b.n	1f5b4 <sock_ioctl_vmeth+0x42>
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   1f5e4:	2604      	movs	r6, #4
		(*pev)->obj = &ctx->recv_q;
   1f5e6:	3068      	adds	r0, #104	; 0x68
   1f5e8:	6118      	str	r0, [r3, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   1f5ea:	682b      	ldr	r3, [r5, #0]
   1f5ec:	7b58      	ldrb	r0, [r3, #13]
   1f5ee:	f366 0005 	bfi	r0, r6, #0, #6
   1f5f2:	7358      	strb	r0, [r3, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   1f5f4:	682b      	ldr	r3, [r5, #0]
   1f5f6:	7b98      	ldrb	r0, [r3, #14]
   1f5f8:	f36f 1045 	bfc	r0, #5, #1
   1f5fc:	7398      	strb	r0, [r3, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   1f5fe:	682b      	ldr	r3, [r5, #0]
   1f600:	68d8      	ldr	r0, [r3, #12]
   1f602:	f36f 3094 	bfc	r0, #14, #7
   1f606:	60d8      	str	r0, [r3, #12]
		(*pev)++;
   1f608:	682b      	ldr	r3, [r5, #0]
   1f60a:	3314      	adds	r3, #20
   1f60c:	602b      	str	r3, [r5, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
   1f60e:	888b      	ldrh	r3, [r1, #4]
   1f610:	0758      	lsls	r0, r3, #29
   1f612:	d526      	bpl.n	1f662 <sock_ioctl_vmeth+0xf0>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1f614:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
   1f618:	f3c3 1181 	ubfx	r1, r3, #6, #2
		if (IS_ENABLED(CONFIG_NET_NATIVE_TCP) &&
   1f61c:	2901      	cmp	r1, #1
   1f61e:	d002      	beq.n	1f626 <sock_ioctl_vmeth+0xb4>
			return -EALREADY;
   1f620:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1f624:	e7c6      	b.n	1f5b4 <sock_ioctl_vmeth+0x42>
			if (*pev == pev_end) {
   1f626:	682e      	ldr	r6, [r5, #0]
   1f628:	42b2      	cmp	r2, r6
   1f62a:	d0d8      	beq.n	1f5de <sock_ioctl_vmeth+0x6c>
			if (net_context_get_state(ctx) == NET_CONTEXT_CONNECTING) {
   1f62c:	f3c3 0341 	ubfx	r3, r3, #1, #2
   1f630:	2b01      	cmp	r3, #1
				(*pev)->obj = net_tcp_conn_sem_get(ctx);
   1f632:	4620      	mov	r0, r4
			if (net_context_get_state(ctx) == NET_CONTEXT_CONNECTING) {
   1f634:	d11a      	bne.n	1f66c <sock_ioctl_vmeth+0xfa>
				(*pev)->obj = net_tcp_conn_sem_get(ctx);
   1f636:	f002 ff7a 	bl	2252e <net_tcp_conn_sem_get>
			(*pev)->type = K_POLL_TYPE_SEM_AVAILABLE;
   1f63a:	2102      	movs	r1, #2
				(*pev)->obj = net_tcp_conn_sem_get(ctx);
   1f63c:	6130      	str	r0, [r6, #16]
			(*pev)->type = K_POLL_TYPE_SEM_AVAILABLE;
   1f63e:	682b      	ldr	r3, [r5, #0]
   1f640:	7b5a      	ldrb	r2, [r3, #13]
   1f642:	f361 0205 	bfi	r2, r1, #0, #6
   1f646:	735a      	strb	r2, [r3, #13]
			(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   1f648:	682b      	ldr	r3, [r5, #0]
   1f64a:	7b9a      	ldrb	r2, [r3, #14]
   1f64c:	f36f 1245 	bfc	r2, #5, #1
   1f650:	739a      	strb	r2, [r3, #14]
			(*pev)->state = K_POLL_STATE_NOT_READY;
   1f652:	682b      	ldr	r3, [r5, #0]
   1f654:	68da      	ldr	r2, [r3, #12]
   1f656:	f36f 3294 	bfc	r2, #14, #7
   1f65a:	60da      	str	r2, [r3, #12]
			(*pev)++;
   1f65c:	682b      	ldr	r3, [r5, #0]
   1f65e:	3314      	adds	r3, #20
   1f660:	602b      	str	r3, [r5, #0]
	if (sock_is_eof(ctx) || sock_is_error(ctx)) {
   1f662:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1f664:	f013 0f05 	tst.w	r3, #5
   1f668:	d0ae      	beq.n	1f5c8 <sock_ioctl_vmeth+0x56>
   1f66a:	e7d9      	b.n	1f620 <sock_ioctl_vmeth+0xae>
				(*pev)->obj = net_tcp_tx_sem_get(ctx);
   1f66c:	f002 ff5c 	bl	22528 <net_tcp_tx_sem_get>
   1f670:	e7e3      	b.n	1f63a <sock_ioctl_vmeth+0xc8>
		pev = va_arg(args, struct k_poll_event **);
   1f672:	e9d2 3200 	ldrd	r3, r2, [r2]
	if (pfd->events & ZSOCK_POLLIN) {
   1f676:	8899      	ldrh	r1, [r3, #4]
   1f678:	07c9      	lsls	r1, r1, #31
   1f67a:	d50e      	bpl.n	1f69a <sock_ioctl_vmeth+0x128>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   1f67c:	6811      	ldr	r1, [r2, #0]
   1f67e:	68c9      	ldr	r1, [r1, #12]
   1f680:	f411 1ffe 	tst.w	r1, #2080768	; 0x1fc000
   1f684:	d102      	bne.n	1f68c <sock_ioctl_vmeth+0x11a>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   1f686:	6e41      	ldr	r1, [r0, #100]	; 0x64
   1f688:	07ce      	lsls	r6, r1, #31
   1f68a:	d503      	bpl.n	1f694 <sock_ioctl_vmeth+0x122>
			pfd->revents |= ZSOCK_POLLIN;
   1f68c:	88d9      	ldrh	r1, [r3, #6]
   1f68e:	f041 0101 	orr.w	r1, r1, #1
   1f692:	80d9      	strh	r1, [r3, #6]
		(*pev)++;
   1f694:	6811      	ldr	r1, [r2, #0]
   1f696:	3114      	adds	r1, #20
   1f698:	6011      	str	r1, [r2, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
   1f69a:	8899      	ldrh	r1, [r3, #4]
   1f69c:	074d      	lsls	r5, r1, #29
   1f69e:	d518      	bpl.n	1f6d2 <sock_ioctl_vmeth+0x160>
   1f6a0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
   1f6a4:	f3c1 1081 	ubfx	r0, r1, #6, #2
		if (IS_ENABLED(CONFIG_NET_NATIVE_TCP) &&
   1f6a8:	2801      	cmp	r0, #1
   1f6aa:	d122      	bne.n	1f6f2 <sock_ioctl_vmeth+0x180>
			if ((*pev)->state != K_POLL_STATE_NOT_READY &&
   1f6ac:	6810      	ldr	r0, [r2, #0]
   1f6ae:	68c0      	ldr	r0, [r0, #12]
   1f6b0:	f410 1ffe 	tst.w	r0, #2080768	; 0x1fc000
   1f6b4:	d00a      	beq.n	1f6cc <sock_ioctl_vmeth+0x15a>
   1f6b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1f6b8:	07c0      	lsls	r0, r0, #31
   1f6ba:	d407      	bmi.n	1f6cc <sock_ioctl_vmeth+0x15a>
			    !sock_is_eof(ctx) &&
   1f6bc:	f3c1 0141 	ubfx	r1, r1, #1, #2
   1f6c0:	2902      	cmp	r1, #2
				pfd->revents |= ZSOCK_POLLOUT;
   1f6c2:	bf02      	ittt	eq
   1f6c4:	88d9      	ldrheq	r1, [r3, #6]
   1f6c6:	f041 0104 	orreq.w	r1, r1, #4
   1f6ca:	80d9      	strheq	r1, [r3, #6]
			(*pev)++;
   1f6cc:	6811      	ldr	r1, [r2, #0]
   1f6ce:	3114      	adds	r1, #20
   1f6d0:	6011      	str	r1, [r2, #0]
   1f6d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	if (sock_is_error(ctx)) {
   1f6d4:	0751      	lsls	r1, r2, #29
		pfd->revents |= ZSOCK_POLLERR;
   1f6d6:	bf42      	ittt	mi
   1f6d8:	88da      	ldrhmi	r2, [r3, #6]
   1f6da:	f042 0208 	orrmi.w	r2, r2, #8
   1f6de:	80da      	strhmi	r2, [r3, #6]
   1f6e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
	if (sock_is_eof(ctx)) {
   1f6e2:	07d2      	lsls	r2, r2, #31
   1f6e4:	f57f af70 	bpl.w	1f5c8 <sock_ioctl_vmeth+0x56>
		pfd->revents |= ZSOCK_POLLHUP;
   1f6e8:	88da      	ldrh	r2, [r3, #6]
   1f6ea:	f042 0210 	orr.w	r2, r2, #16
   1f6ee:	80da      	strh	r2, [r3, #6]
   1f6f0:	e76a      	b.n	1f5c8 <sock_ioctl_vmeth+0x56>
			pfd->revents |= ZSOCK_POLLOUT;
   1f6f2:	88da      	ldrh	r2, [r3, #6]
   1f6f4:	f042 0204 	orr.w	r2, r2, #4
   1f6f8:	80da      	strh	r2, [r3, #6]
   1f6fa:	e7ea      	b.n	1f6d2 <sock_ioctl_vmeth+0x160>

0001f6fc <timeout_recalc>:
{
   1f6fc:	b570      	push	{r4, r5, r6, lr}
   1f6fe:	4614      	mov	r4, r2
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   1f700:	e9d2 3200 	ldrd	r3, r2, [r2]
   1f704:	3301      	adds	r3, #1
   1f706:	f142 0200 	adc.w	r2, r2, #0
   1f70a:	2b02      	cmp	r3, #2
   1f70c:	f172 0200 	sbcs.w	r2, r2, #0
{
   1f710:	4605      	mov	r5, r0
   1f712:	460e      	mov	r6, r1
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   1f714:	d30c      	bcc.n	1f730 <timeout_recalc+0x34>
		int64_t remaining = end - sys_clock_tick_get();
   1f716:	f7f7 f85d 	bl	167d4 <sys_clock_tick_get>
   1f71a:	1a2d      	subs	r5, r5, r0
   1f71c:	eb66 0101 	sbc.w	r1, r6, r1
		if (remaining <= 0) {
   1f720:	2d01      	cmp	r5, #1
   1f722:	f171 0300 	sbcs.w	r3, r1, #0
   1f726:	da04      	bge.n	1f732 <timeout_recalc+0x36>
			*timeout = K_NO_WAIT;
   1f728:	2200      	movs	r2, #0
   1f72a:	2300      	movs	r3, #0
   1f72c:	e9c4 2300 	strd	r2, r3, [r4]
}
   1f730:	bd70      	pop	{r4, r5, r6, pc}
			*timeout = Z_TIMEOUT_TICKS(remaining);
   1f732:	e9c4 5100 	strd	r5, r1, [r4]
}
   1f736:	e7fb      	b.n	1f730 <timeout_recalc+0x34>

0001f738 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f738:	f7f6 b81c 	b.w	15774 <z_impl_k_mutex_lock>

0001f73c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1f73c:	f7f6 b894 	b.w	15868 <z_impl_k_mutex_unlock>

0001f740 <zsock_flush_queue>:
{
   1f740:	b538      	push	{r3, r4, r5, lr}
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1f742:	f8b0 5090 	ldrh.w	r5, [r0, #144]	; 0x90
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   1f746:	f100 0468 	add.w	r4, r0, #104	; 0x68
	return (enum net_context_state)
   1f74a:	f3c5 0541 	ubfx	r5, r5, #1, #2
	return z_impl_k_queue_get(queue, timeout);
   1f74e:	2200      	movs	r2, #0
   1f750:	2300      	movs	r3, #0
   1f752:	4620      	mov	r0, r4
   1f754:	f7f6 f8c4 	bl	158e0 <z_impl_k_queue_get>
   1f758:	b920      	cbnz	r0, 1f764 <zsock_flush_queue+0x24>
	z_impl_k_queue_cancel_wait(queue);
   1f75a:	4620      	mov	r0, r4
}
   1f75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f760:	f004 bc03 	b.w	23f6a <z_impl_k_queue_cancel_wait>
		if (is_listen) {
   1f764:	2d03      	cmp	r5, #3
   1f766:	d102      	bne.n	1f76e <zsock_flush_queue+0x2e>
			net_context_put(p);
   1f768:	f7e9 fc2a 	bl	8fc0 <net_context_put>
   1f76c:	e7ef      	b.n	1f74e <zsock_flush_queue+0xe>
			net_pkt_unref(p);
   1f76e:	f001 fe21 	bl	213b4 <net_pkt_unref>
   1f772:	e7ec      	b.n	1f74e <zsock_flush_queue+0xe>

0001f774 <zsock_received_cb>:
{
   1f774:	b570      	push	{r4, r5, r6, lr}
   1f776:	4604      	mov	r4, r0
	if (ctx->cond.lock) {
   1f778:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
{
   1f77c:	460d      	mov	r5, r1
   1f77e:	9e04      	ldr	r6, [sp, #16]
	if (ctx->cond.lock) {
   1f780:	b128      	cbz	r0, 1f78e <zsock_received_cb+0x1a>
		(void)k_mutex_lock(ctx->cond.lock, K_FOREVER);
   1f782:	f04f 32ff 	mov.w	r2, #4294967295
   1f786:	f04f 33ff 	mov.w	r3, #4294967295
   1f78a:	f7ff ffd5 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
	if (status < 0) {
   1f78e:	2e00      	cmp	r6, #0
   1f790:	da05      	bge.n	1f79e <zsock_received_cb+0x2a>
	val = (val & ~mask) | flag;
   1f792:	6e63      	ldr	r3, [r4, #100]	; 0x64
		ctx->user_data = INT_TO_POINTER(-status);
   1f794:	4276      	negs	r6, r6
   1f796:	f043 0304 	orr.w	r3, r3, #4
   1f79a:	6066      	str	r6, [r4, #4]
	(ctx)->socket_data = UINT_TO_POINTER(val);
   1f79c:	6663      	str	r3, [r4, #100]	; 0x64
		struct net_pkt *last_pkt = k_fifo_peek_tail(&ctx->recv_q);
   1f79e:	f104 0668 	add.w	r6, r4, #104	; 0x68
	if (!pkt) {
   1f7a2:	b9e5      	cbnz	r5, 1f7de <zsock_received_cb+0x6a>
	return z_impl_k_queue_peek_tail(queue);
   1f7a4:	4630      	mov	r0, r6
   1f7a6:	f004 fc28 	bl	23ffa <z_impl_k_queue_peek_tail>
		if (!last_pkt) {
   1f7aa:	b988      	cbnz	r0, 1f7d0 <zsock_received_cb+0x5c>
	val = (val & ~mask) | flag;
   1f7ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1f7ae:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   1f7b2:	6663      	str	r3, [r4, #100]	; 0x64
	z_impl_k_queue_cancel_wait(queue);
   1f7b4:	4630      	mov	r0, r6
   1f7b6:	f004 fbd8 	bl	23f6a <z_impl_k_queue_cancel_wait>
	if (ctx->cond.lock) {
   1f7ba:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   1f7be:	b108      	cbz	r0, 1f7c4 <zsock_received_cb+0x50>
		(void)k_mutex_unlock(ctx->cond.lock);
   1f7c0:	f7ff ffbc 	bl	1f73c <k_mutex_unlock.isra.0>
	return z_impl_k_condvar_signal(condvar);
   1f7c4:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
   1f7c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f7cc:	f7f6 be5a 	b.w	16484 <z_impl_k_condvar_signal>
	pkt->sent_or_eof = eof;
   1f7d0:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1f7d4:	f043 0302 	orr.w	r3, r3, #2
   1f7d8:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
			NET_DBG("Set EOF flag on pkt %p", last_pkt);
   1f7dc:	e7ed      	b.n	1f7ba <zsock_received_cb+0x46>
   1f7de:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	k_fifo_put(&ctx->recv_q, pkt);
   1f7e2:	4629      	mov	r1, r5
   1f7e4:	f36f 0341 	bfc	r3, #1, #1
   1f7e8:	4630      	mov	r0, r6
   1f7ea:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
   1f7ee:	f004 fbdc 	bl	23faa <k_queue_append>
   1f7f2:	e7e2      	b.n	1f7ba <zsock_received_cb+0x46>

0001f7f4 <get_sock_vtable>:
{
   1f7f4:	b538      	push	{r3, r4, r5, lr}
   1f7f6:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   1f7f8:	f7e4 f92a 	bl	3a50 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   1f7fc:	4604      	mov	r4, r0
   1f7fe:	b910      	cbnz	r0, 1f806 <get_sock_vtable+0x12>
   1f800:	4628      	mov	r0, r5
   1f802:	f7e5 ffd7 	bl	57b4 <get_sock_vtable.part.0>
}
   1f806:	4620      	mov	r0, r4
   1f808:	bd38      	pop	{r3, r4, r5, pc}

0001f80a <send_check_and_wait>:
{
   1f80a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f80e:	b087      	sub	sp, #28
   1f810:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   1f814:	4699      	mov	r9, r3
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f816:	ea5b 030a 	orrs.w	r3, fp, sl
{
   1f81a:	4605      	mov	r5, r0
   1f81c:	460c      	mov	r4, r1
   1f81e:	4617      	mov	r7, r2
   1f820:	4656      	mov	r6, sl
   1f822:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f826:	f000 8098 	beq.w	1f95a <send_check_and_wait+0x150>
	if (status != -ENOBUFS && status != -EAGAIN) {
   1f82a:	f111 0f69 	cmn.w	r1, #105	; 0x69
   1f82e:	d154      	bne.n	1f8da <send_check_and_wait+0xd0>
	remaining = buf_timeout - sys_clock_tick_get();
   1f830:	f7f6 ffd0 	bl	167d4 <sys_clock_tick_get>
   1f834:	1a38      	subs	r0, r7, r0
   1f836:	eb69 0101 	sbc.w	r1, r9, r1
	if (remaining <= 0) {
   1f83a:	2801      	cmp	r0, #1
   1f83c:	f171 0100 	sbcs.w	r1, r1, #0
   1f840:	f2c0 8089 	blt.w	1f956 <send_check_and_wait+0x14c>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f844:	f1bb 3fff 	cmp.w	fp, #4294967295
   1f848:	bf08      	it	eq
   1f84a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1f84e:	d153      	bne.n	1f8f8 <send_check_and_wait+0xee>
	if (ctx->cond.lock) {
   1f850:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1f854:	b108      	cbz	r0, 1f85a <send_check_and_wait+0x50>
		(void)k_mutex_unlock(ctx->cond.lock);
   1f856:	f7ff ff71 	bl	1f73c <k_mutex_unlock.isra.0>
   1f85a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f85e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f862:	2100      	movs	r1, #0
   1f864:	f8d8 4000 	ldr.w	r4, [r8]
   1f868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f86c:	2300      	movs	r3, #0
   1f86e:	fbe4 0106 	umlal	r0, r1, r4, r6
   1f872:	f7e1 f8af 	bl	9d4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1f876:	f7f6 fd59 	bl	1632c <z_impl_k_sleep>
   1f87a:	e056      	b.n	1f92a <send_check_and_wait+0x120>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f87c:	f1bb 3fff 	cmp.w	fp, #4294967295
   1f880:	bf08      	it	eq
   1f882:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1f886:	d137      	bne.n	1f8f8 <send_check_and_wait+0xee>
	if (ctx->cond.lock) {
   1f888:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1f88c:	b108      	cbz	r0, 1f892 <send_check_and_wait+0x88>
		(void)k_mutex_unlock(ctx->cond.lock);
   1f88e:	f7ff ff55 	bl	1f73c <k_mutex_unlock.isra.0>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1f892:	f8b5 4090 	ldrh.w	r4, [r5, #144]	; 0x90
   1f896:	f3c4 1481 	ubfx	r4, r4, #6, #2
		if (IS_ENABLED(CONFIG_NET_NATIVE_TCP) &&
   1f89a:	2c01      	cmp	r4, #1
   1f89c:	d1dd      	bne.n	1f85a <send_check_and_wait+0x50>
					  net_tcp_tx_sem_get(ctx));
   1f89e:	4628      	mov	r0, r5
   1f8a0:	f002 fe42 	bl	22528 <net_tcp_tx_sem_get>
			k_poll_event_init(&event,
   1f8a4:	2200      	movs	r2, #0
					  net_tcp_tx_sem_get(ctx));
   1f8a6:	4603      	mov	r3, r0
			k_poll_event_init(&event,
   1f8a8:	2102      	movs	r1, #2
   1f8aa:	a801      	add	r0, sp, #4
   1f8ac:	f004 ff8a 	bl	247c4 <k_poll_event_init>
   1f8b0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1f8b4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f8b8:	2100      	movs	r1, #0
   1f8ba:	f8d8 6000 	ldr.w	r6, [r8]
   1f8be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f8c2:	2300      	movs	r3, #0
   1f8c4:	fbe6 0107 	umlal	r0, r1, r6, r7
   1f8c8:	f7e1 f884 	bl	9d4 <__aeabi_uldivmod>
   1f8cc:	4602      	mov	r2, r0
   1f8ce:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
   1f8d0:	4621      	mov	r1, r4
   1f8d2:	a801      	add	r0, sp, #4
   1f8d4:	f7f7 f83a 	bl	1694c <z_impl_k_poll>
   1f8d8:	e027      	b.n	1f92a <send_check_and_wait+0x120>
	if (status != -ENOBUFS && status != -EAGAIN) {
   1f8da:	f111 0f0b 	cmn.w	r1, #11
   1f8de:	d13c      	bne.n	1f95a <send_check_and_wait+0x150>
	remaining = buf_timeout - sys_clock_tick_get();
   1f8e0:	f7f6 ff78 	bl	167d4 <sys_clock_tick_get>
   1f8e4:	1a3f      	subs	r7, r7, r0
   1f8e6:	eb69 0901 	sbc.w	r9, r9, r1
	if (remaining <= 0) {
   1f8ea:	2f01      	cmp	r7, #1
   1f8ec:	f179 0900 	sbcs.w	r9, r9, #0
   1f8f0:	dac4      	bge.n	1f87c <send_check_and_wait+0x72>
			status = -ENOBUFS;
   1f8f2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1f8f6:	e030      	b.n	1f95a <send_check_and_wait+0x150>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1f8f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f8fc:	fba6 3203 	umull	r3, r2, r6, r3
   1f900:	0bdb      	lsrs	r3, r3, #15
   1f902:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
		*retry_timeout =
   1f906:	f8d8 2000 	ldr.w	r2, [r8]
   1f90a:	429a      	cmp	r2, r3
   1f90c:	bf94      	ite	ls
   1f90e:	f8c8 2000 	strls.w	r2, [r8]
   1f912:	f8c8 3000 	strhi.w	r3, [r8]
	if (ctx->cond.lock) {
   1f916:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1f91a:	b108      	cbz	r0, 1f920 <send_check_and_wait+0x116>
		(void)k_mutex_unlock(ctx->cond.lock);
   1f91c:	f7ff ff0e 	bl	1f73c <k_mutex_unlock.isra.0>
	if (status == -ENOBUFS) {
   1f920:	f114 0f69 	cmn.w	r4, #105	; 0x69
   1f924:	d099      	beq.n	1f85a <send_check_and_wait+0x50>
	if (status == -EAGAIN) {
   1f926:	340b      	adds	r4, #11
   1f928:	d0b3      	beq.n	1f892 <send_check_and_wait+0x88>
	*retry_timeout = MIN(WAIT_BUFS_MAX_MS, *retry_timeout << 1);
   1f92a:	f8d8 3000 	ldr.w	r3, [r8]
   1f92e:	005b      	lsls	r3, r3, #1
   1f930:	2b64      	cmp	r3, #100	; 0x64
   1f932:	bf28      	it	cs
   1f934:	2364      	movcs	r3, #100	; 0x64
   1f936:	f8c8 3000 	str.w	r3, [r8]
	if (ctx->cond.lock) {
   1f93a:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1f93e:	b918      	cbnz	r0, 1f948 <send_check_and_wait+0x13e>
	return 0;
   1f940:	2000      	movs	r0, #0
}
   1f942:	b007      	add	sp, #28
   1f944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)k_mutex_lock(ctx->cond.lock, K_FOREVER);
   1f948:	f04f 32ff 	mov.w	r2, #4294967295
   1f94c:	f04f 33ff 	mov.w	r3, #4294967295
   1f950:	f7ff fef2 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
   1f954:	e7f4      	b.n	1f940 <send_check_and_wait+0x136>
			status = -ENOMEM;
   1f956:	f06f 040b 	mvn.w	r4, #11
	errno = -status;
   1f95a:	f000 fb72 	bl	20042 <__errno>
   1f95e:	4264      	negs	r4, r4
   1f960:	6004      	str	r4, [r0, #0]
	return -1;
   1f962:	f04f 30ff 	mov.w	r0, #4294967295
   1f966:	e7ec      	b.n	1f942 <send_check_and_wait+0x138>

0001f968 <zsock_close_ctx>:
{
   1f968:	b513      	push	{r0, r1, r4, lr}
   1f96a:	2100      	movs	r1, #0
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1f96c:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
   1f970:	4604      	mov	r4, r0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   1f972:	f3c3 0341 	ubfx	r3, r3, #1, #2
   1f976:	2b03      	cmp	r3, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   1f978:	f04f 0200 	mov.w	r2, #0
   1f97c:	f04f 0300 	mov.w	r3, #0
   1f980:	9100      	str	r1, [sp, #0]
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   1f982:	d111      	bne.n	1f9a8 <zsock_close_ctx+0x40>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   1f984:	f001 fb4a 	bl	2101c <net_context_accept>
	zsock_flush_queue(ctx);
   1f988:	4620      	mov	r0, r4
   1f98a:	f7ff fed9 	bl	1f740 <zsock_flush_queue>
	SET_ERRNO(net_context_put(ctx));
   1f98e:	4620      	mov	r0, r4
   1f990:	f7e9 fb16 	bl	8fc0 <net_context_put>
   1f994:	1e04      	subs	r4, r0, #0
   1f996:	da0a      	bge.n	1f9ae <zsock_close_ctx+0x46>
   1f998:	f000 fb53 	bl	20042 <__errno>
   1f99c:	4264      	negs	r4, r4
   1f99e:	6004      	str	r4, [r0, #0]
   1f9a0:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f9a4:	b002      	add	sp, #8
   1f9a6:	bd10      	pop	{r4, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   1f9a8:	f7e9 fd3e 	bl	9428 <net_context_recv>
   1f9ac:	e7ec      	b.n	1f988 <zsock_close_ctx+0x20>
	return 0;
   1f9ae:	2000      	movs	r0, #0
   1f9b0:	e7f8      	b.n	1f9a4 <zsock_close_ctx+0x3c>

0001f9b2 <sock_close_vmeth>:
	return zsock_close_ctx(obj);
   1f9b2:	f7ff bfd9 	b.w	1f968 <zsock_close_ctx>

0001f9b6 <zsock_shutdown_ctx>:
{
   1f9b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f9b8:	4605      	mov	r5, r0
	if (how == ZSOCK_SHUT_RD) {
   1f9ba:	460c      	mov	r4, r1
   1f9bc:	bb29      	cbnz	r1, 1fa0a <zsock_shutdown_ctx+0x54>
   1f9be:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
			SET_ERRNO(net_context_accept(ctx, NULL, K_NO_WAIT, NULL));
   1f9c2:	2200      	movs	r2, #0
		if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   1f9c4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   1f9c8:	2b03      	cmp	r3, #3
			SET_ERRNO(net_context_accept(ctx, NULL, K_NO_WAIT, NULL));
   1f9ca:	9100      	str	r1, [sp, #0]
   1f9cc:	f04f 0300 	mov.w	r3, #0
		if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   1f9d0:	d10c      	bne.n	1f9ec <zsock_shutdown_ctx+0x36>
			SET_ERRNO(net_context_accept(ctx, NULL, K_NO_WAIT, NULL));
   1f9d2:	f001 fb23 	bl	2101c <net_context_accept>
			SET_ERRNO(net_context_recv(ctx, NULL, K_NO_WAIT, NULL));
   1f9d6:	1e06      	subs	r6, r0, #0
   1f9d8:	da0b      	bge.n	1f9f2 <zsock_shutdown_ctx+0x3c>
   1f9da:	f000 fb32 	bl	20042 <__errno>
   1f9de:	4276      	negs	r6, r6
   1f9e0:	6006      	str	r6, [r0, #0]
			SET_ERRNO(net_context_accept(ctx, NULL, K_NO_WAIT, NULL));
   1f9e2:	f04f 34ff 	mov.w	r4, #4294967295
}
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	b002      	add	sp, #8
   1f9ea:	bd70      	pop	{r4, r5, r6, pc}
			SET_ERRNO(net_context_recv(ctx, NULL, K_NO_WAIT, NULL));
   1f9ec:	f7e9 fd1c 	bl	9428 <net_context_recv>
   1f9f0:	e7f1      	b.n	1f9d6 <zsock_shutdown_ctx+0x20>
	val = (val & ~mask) | flag;
   1f9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		zsock_flush_queue(ctx);
   1f9f4:	4628      	mov	r0, r5
   1f9f6:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   1f9fa:	666b      	str	r3, [r5, #100]	; 0x64
   1f9fc:	f7ff fea0 	bl	1f740 <zsock_flush_queue>
	return z_impl_k_condvar_signal(condvar);
   1fa00:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1fa04:	f7f6 fd3e 	bl	16484 <z_impl_k_condvar_signal>
   1fa08:	e7ed      	b.n	1f9e6 <zsock_shutdown_ctx+0x30>
	} else if (how == ZSOCK_SHUT_WR || how == ZSOCK_SHUT_RDWR) {
   1fa0a:	1e4c      	subs	r4, r1, #1
   1fa0c:	2c01      	cmp	r4, #1
   1fa0e:	d804      	bhi.n	1fa1a <zsock_shutdown_ctx+0x64>
		SET_ERRNO(-ENOTSUP);
   1fa10:	f000 fb17 	bl	20042 <__errno>
   1fa14:	2386      	movs	r3, #134	; 0x86
		SET_ERRNO(-EINVAL);
   1fa16:	6003      	str	r3, [r0, #0]
   1fa18:	e7e3      	b.n	1f9e2 <zsock_shutdown_ctx+0x2c>
   1fa1a:	f000 fb12 	bl	20042 <__errno>
   1fa1e:	2316      	movs	r3, #22
   1fa20:	e7f9      	b.n	1fa16 <zsock_shutdown_ctx+0x60>

0001fa22 <sock_shutdown_vmeth>:
	return zsock_shutdown_ctx(obj, how);
   1fa22:	f7ff bfc8 	b.w	1f9b6 <zsock_shutdown_ctx>

0001fa26 <sock_bind_vmeth>:
	return zsock_bind_ctx(obj, addr, addrlen);
   1fa26:	f7e5 bf23 	b.w	5870 <zsock_bind_ctx>

0001fa2a <z_impl_zsock_bind>:
{
   1fa2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fa2c:	460d      	mov	r5, r1
   1fa2e:	4616      	mov	r6, r2
	VTABLE_CALL(bind, sock, addr, addrlen);
   1fa30:	4669      	mov	r1, sp
   1fa32:	aa01      	add	r2, sp, #4
   1fa34:	f7ff fede 	bl	1f7f4 <get_sock_vtable>
   1fa38:	4604      	mov	r4, r0
   1fa3a:	b940      	cbnz	r0, 1fa4e <z_impl_zsock_bind+0x24>
   1fa3c:	f000 fb01 	bl	20042 <__errno>
   1fa40:	2309      	movs	r3, #9
   1fa42:	f04f 34ff 	mov.w	r4, #4294967295
   1fa46:	6003      	str	r3, [r0, #0]
}
   1fa48:	4620      	mov	r0, r4
   1fa4a:	b002      	add	sp, #8
   1fa4c:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(bind, sock, addr, addrlen);
   1fa4e:	9b00      	ldr	r3, [sp, #0]
   1fa50:	695b      	ldr	r3, [r3, #20]
   1fa52:	b91b      	cbnz	r3, 1fa5c <z_impl_zsock_bind+0x32>
   1fa54:	f000 faf5 	bl	20042 <__errno>
   1fa58:	235f      	movs	r3, #95	; 0x5f
   1fa5a:	e7f2      	b.n	1fa42 <z_impl_zsock_bind+0x18>
   1fa5c:	9801      	ldr	r0, [sp, #4]
   1fa5e:	f04f 32ff 	mov.w	r2, #4294967295
   1fa62:	f04f 33ff 	mov.w	r3, #4294967295
   1fa66:	f7ff fe67 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
   1fa6a:	9b00      	ldr	r3, [sp, #0]
   1fa6c:	4632      	mov	r2, r6
   1fa6e:	4629      	mov	r1, r5
   1fa70:	4620      	mov	r0, r4
   1fa72:	695b      	ldr	r3, [r3, #20]
   1fa74:	4798      	blx	r3
   1fa76:	4604      	mov	r4, r0
   1fa78:	9801      	ldr	r0, [sp, #4]
   1fa7a:	f7ff fe5f 	bl	1f73c <k_mutex_unlock.isra.0>
   1fa7e:	e7e3      	b.n	1fa48 <z_impl_zsock_bind+0x1e>

0001fa80 <sock_connect_vmeth>:
	return zsock_connect_ctx(obj, addr, addrlen);
   1fa80:	f7e5 bf1a 	b.w	58b8 <zsock_connect_ctx>

0001fa84 <z_impl_zsock_connect>:
{
   1fa84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fa86:	460d      	mov	r5, r1
   1fa88:	4616      	mov	r6, r2
	VTABLE_CALL(connect, sock, addr, addrlen);
   1fa8a:	4669      	mov	r1, sp
   1fa8c:	aa01      	add	r2, sp, #4
   1fa8e:	f7ff feb1 	bl	1f7f4 <get_sock_vtable>
   1fa92:	4604      	mov	r4, r0
   1fa94:	b940      	cbnz	r0, 1faa8 <z_impl_zsock_connect+0x24>
   1fa96:	f000 fad4 	bl	20042 <__errno>
   1fa9a:	2309      	movs	r3, #9
   1fa9c:	f04f 34ff 	mov.w	r4, #4294967295
   1faa0:	6003      	str	r3, [r0, #0]
}
   1faa2:	4620      	mov	r0, r4
   1faa4:	b002      	add	sp, #8
   1faa6:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1faa8:	9b00      	ldr	r3, [sp, #0]
   1faaa:	699b      	ldr	r3, [r3, #24]
   1faac:	b91b      	cbnz	r3, 1fab6 <z_impl_zsock_connect+0x32>
   1faae:	f000 fac8 	bl	20042 <__errno>
   1fab2:	235f      	movs	r3, #95	; 0x5f
   1fab4:	e7f2      	b.n	1fa9c <z_impl_zsock_connect+0x18>
   1fab6:	9801      	ldr	r0, [sp, #4]
   1fab8:	f04f 32ff 	mov.w	r2, #4294967295
   1fabc:	f04f 33ff 	mov.w	r3, #4294967295
   1fac0:	f7ff fe3a 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
   1fac4:	9b00      	ldr	r3, [sp, #0]
   1fac6:	4632      	mov	r2, r6
   1fac8:	4629      	mov	r1, r5
   1faca:	4620      	mov	r0, r4
   1facc:	699b      	ldr	r3, [r3, #24]
   1face:	4798      	blx	r3
   1fad0:	4604      	mov	r4, r0
   1fad2:	9801      	ldr	r0, [sp, #4]
   1fad4:	f7ff fe32 	bl	1f73c <k_mutex_unlock.isra.0>
   1fad8:	e7e3      	b.n	1faa2 <z_impl_zsock_connect+0x1e>

0001fada <sock_listen_vmeth>:
	return zsock_listen_ctx(obj, backlog);
   1fada:	f7e5 bf3b 	b.w	5954 <zsock_listen_ctx>

0001fade <z_impl_zsock_listen>:
{
   1fade:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fae0:	460d      	mov	r5, r1
	VTABLE_CALL(listen, sock, backlog);
   1fae2:	aa01      	add	r2, sp, #4
   1fae4:	4669      	mov	r1, sp
   1fae6:	f7ff fe85 	bl	1f7f4 <get_sock_vtable>
   1faea:	4604      	mov	r4, r0
   1faec:	b940      	cbnz	r0, 1fb00 <z_impl_zsock_listen+0x22>
   1faee:	f000 faa8 	bl	20042 <__errno>
   1faf2:	2309      	movs	r3, #9
   1faf4:	f04f 34ff 	mov.w	r4, #4294967295
   1faf8:	6003      	str	r3, [r0, #0]
}
   1fafa:	4620      	mov	r0, r4
   1fafc:	b003      	add	sp, #12
   1fafe:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(listen, sock, backlog);
   1fb00:	9b00      	ldr	r3, [sp, #0]
   1fb02:	69db      	ldr	r3, [r3, #28]
   1fb04:	b91b      	cbnz	r3, 1fb0e <z_impl_zsock_listen+0x30>
   1fb06:	f000 fa9c 	bl	20042 <__errno>
   1fb0a:	235f      	movs	r3, #95	; 0x5f
   1fb0c:	e7f2      	b.n	1faf4 <z_impl_zsock_listen+0x16>
   1fb0e:	f04f 32ff 	mov.w	r2, #4294967295
   1fb12:	9801      	ldr	r0, [sp, #4]
   1fb14:	f04f 33ff 	mov.w	r3, #4294967295
   1fb18:	f7ff fe0e 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
   1fb1c:	9b00      	ldr	r3, [sp, #0]
   1fb1e:	4629      	mov	r1, r5
   1fb20:	4620      	mov	r0, r4
   1fb22:	69db      	ldr	r3, [r3, #28]
   1fb24:	4798      	blx	r3
   1fb26:	4604      	mov	r4, r0
   1fb28:	9801      	ldr	r0, [sp, #4]
   1fb2a:	f7ff fe07 	bl	1f73c <k_mutex_unlock.isra.0>
   1fb2e:	e7e4      	b.n	1fafa <z_impl_zsock_listen+0x1c>

0001fb30 <sock_accept_vmeth>:
	return zsock_accept_ctx(obj, addr, addrlen);
   1fb30:	f7e5 bf2c 	b.w	598c <zsock_accept_ctx>

0001fb34 <z_impl_zsock_accept>:
{
   1fb34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fb36:	460d      	mov	r5, r1
   1fb38:	4616      	mov	r6, r2
	VTABLE_CALL(accept, sock, addr, addrlen);
   1fb3a:	4669      	mov	r1, sp
   1fb3c:	aa01      	add	r2, sp, #4
   1fb3e:	f7ff fe59 	bl	1f7f4 <get_sock_vtable>
   1fb42:	4604      	mov	r4, r0
   1fb44:	b940      	cbnz	r0, 1fb58 <z_impl_zsock_accept+0x24>
   1fb46:	f000 fa7c 	bl	20042 <__errno>
   1fb4a:	2309      	movs	r3, #9
   1fb4c:	f04f 34ff 	mov.w	r4, #4294967295
   1fb50:	6003      	str	r3, [r0, #0]
}
   1fb52:	4620      	mov	r0, r4
   1fb54:	b002      	add	sp, #8
   1fb56:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(accept, sock, addr, addrlen);
   1fb58:	9b00      	ldr	r3, [sp, #0]
   1fb5a:	6a1b      	ldr	r3, [r3, #32]
   1fb5c:	b91b      	cbnz	r3, 1fb66 <z_impl_zsock_accept+0x32>
   1fb5e:	f000 fa70 	bl	20042 <__errno>
   1fb62:	235f      	movs	r3, #95	; 0x5f
   1fb64:	e7f2      	b.n	1fb4c <z_impl_zsock_accept+0x18>
   1fb66:	9801      	ldr	r0, [sp, #4]
   1fb68:	f04f 32ff 	mov.w	r2, #4294967295
   1fb6c:	f04f 33ff 	mov.w	r3, #4294967295
   1fb70:	f7ff fde2 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
   1fb74:	9b00      	ldr	r3, [sp, #0]
   1fb76:	4632      	mov	r2, r6
   1fb78:	4629      	mov	r1, r5
   1fb7a:	4620      	mov	r0, r4
   1fb7c:	6a1b      	ldr	r3, [r3, #32]
   1fb7e:	4798      	blx	r3
   1fb80:	4604      	mov	r4, r0
   1fb82:	9801      	ldr	r0, [sp, #4]
   1fb84:	f7ff fdda 	bl	1f73c <k_mutex_unlock.isra.0>
   1fb88:	e7e3      	b.n	1fb52 <z_impl_zsock_accept+0x1e>

0001fb8a <sock_sendto_vmeth>:
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   1fb8a:	f7e5 bf7d 	b.w	5a88 <zsock_sendto_ctx>

0001fb8e <sock_write_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   1fb8e:	2300      	movs	r3, #0
{
   1fb90:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   1fb92:	e9cd 3300 	strd	r3, r3, [sp]
   1fb96:	f7e5 ff77 	bl	5a88 <zsock_sendto_ctx>
}
   1fb9a:	b003      	add	sp, #12
   1fb9c:	f85d fb04 	ldr.w	pc, [sp], #4

0001fba0 <z_impl_zsock_sendto>:
{
   1fba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fba4:	460d      	mov	r5, r1
   1fba6:	4616      	mov	r6, r2
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1fba8:	a902      	add	r1, sp, #8
   1fbaa:	aa03      	add	r2, sp, #12
{
   1fbac:	461f      	mov	r7, r3
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1fbae:	f7ff fe21 	bl	1f7f4 <get_sock_vtable>
   1fbb2:	4604      	mov	r4, r0
   1fbb4:	b948      	cbnz	r0, 1fbca <z_impl_zsock_sendto+0x2a>
   1fbb6:	f000 fa44 	bl	20042 <__errno>
   1fbba:	2309      	movs	r3, #9
   1fbbc:	f04f 34ff 	mov.w	r4, #4294967295
   1fbc0:	6003      	str	r3, [r0, #0]
}
   1fbc2:	4620      	mov	r0, r4
   1fbc4:	b004      	add	sp, #16
   1fbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1fbca:	9b02      	ldr	r3, [sp, #8]
   1fbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fbce:	b91b      	cbnz	r3, 1fbd8 <z_impl_zsock_sendto+0x38>
   1fbd0:	f000 fa37 	bl	20042 <__errno>
   1fbd4:	235f      	movs	r3, #95	; 0x5f
   1fbd6:	e7f1      	b.n	1fbbc <z_impl_zsock_sendto+0x1c>
   1fbd8:	9803      	ldr	r0, [sp, #12]
   1fbda:	f04f 32ff 	mov.w	r2, #4294967295
   1fbde:	f04f 33ff 	mov.w	r3, #4294967295
   1fbe2:	f7ff fda9 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
   1fbe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fbe8:	4632      	mov	r2, r6
   1fbea:	9301      	str	r3, [sp, #4]
   1fbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fbee:	4629      	mov	r1, r5
   1fbf0:	9300      	str	r3, [sp, #0]
   1fbf2:	9b02      	ldr	r3, [sp, #8]
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   1fbfa:	463b      	mov	r3, r7
   1fbfc:	47c0      	blx	r8
   1fbfe:	4604      	mov	r4, r0
   1fc00:	9803      	ldr	r0, [sp, #12]
   1fc02:	f7ff fd9b 	bl	1f73c <k_mutex_unlock.isra.0>
   1fc06:	e7dc      	b.n	1fbc2 <z_impl_zsock_sendto+0x22>

0001fc08 <zsock_sendmsg_ctx>:
{
   1fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_timeout_t timeout = K_FOREVER;
   1fc0c:	f04f 33ff 	mov.w	r3, #4294967295
{
   1fc10:	4617      	mov	r7, r2
	k_timeout_t timeout = K_FOREVER;
   1fc12:	f04f 32ff 	mov.w	r2, #4294967295
{
   1fc16:	b08b      	sub	sp, #44	; 0x2c
	k_timeout_t timeout = K_FOREVER;
   1fc18:	e9cd 2308 	strd	r2, r3, [sp, #32]
	uint32_t retry_timeout = WAIT_BUFS_INITIAL_MS;
   1fc1c:	230a      	movs	r3, #10
   1fc1e:	9307      	str	r3, [sp, #28]
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1fc20:	067b      	lsls	r3, r7, #25
{
   1fc22:	4606      	mov	r6, r0
   1fc24:	4689      	mov	r9, r1
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1fc26:	d403      	bmi.n	1fc30 <zsock_sendmsg_ctx+0x28>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   1fc28:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1fc2a:	f013 0302 	ands.w	r3, r3, #2
   1fc2e:	d02f      	beq.n	1fc90 <zsock_sendmsg_ctx+0x88>
		timeout = K_NO_WAIT;
   1fc30:	2400      	movs	r4, #0
   1fc32:	4625      	mov	r5, r4
   1fc34:	e9cd 4408 	strd	r4, r4, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   1fc38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1fc3c:	f004 fc46 	bl	244cc <sys_clock_timeout_end_calc>
		status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   1fc40:	f04f 0a00 	mov.w	sl, #0
	end = sys_clock_timeout_end_calc(timeout);
   1fc44:	4680      	mov	r8, r0
   1fc46:	9105      	str	r1, [sp, #20]
				status = send_check_and_wait(ctx, status,
   1fc48:	f10d 0b1c 	add.w	fp, sp, #28
		status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   1fc4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1fc50:	4649      	mov	r1, r9
   1fc52:	e9cd 2300 	strd	r2, r3, [sp]
   1fc56:	4630      	mov	r0, r6
   1fc58:	2300      	movs	r3, #0
   1fc5a:	463a      	mov	r2, r7
   1fc5c:	f8cd a008 	str.w	sl, [sp, #8]
   1fc60:	f001 fa41 	bl	210e6 <net_context_sendmsg>
		if (status < 0) {
   1fc64:	2800      	cmp	r0, #0
   1fc66:	da1f      	bge.n	1fca8 <zsock_sendmsg_ctx+0xa0>
				status = send_check_and_wait(ctx, status,
   1fc68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1fc6c:	4601      	mov	r1, r0
   1fc6e:	e9cd 2300 	strd	r2, r3, [sp]
   1fc72:	4630      	mov	r0, r6
   1fc74:	4622      	mov	r2, r4
   1fc76:	462b      	mov	r3, r5
   1fc78:	f8cd b008 	str.w	fp, [sp, #8]
   1fc7c:	f7ff fdc5 	bl	1f80a <send_check_and_wait>
				if (status < 0) {
   1fc80:	2800      	cmp	r0, #0
   1fc82:	db11      	blt.n	1fca8 <zsock_sendmsg_ctx+0xa0>
				timeout_recalc(end, &timeout);
   1fc84:	4640      	mov	r0, r8
   1fc86:	9905      	ldr	r1, [sp, #20]
   1fc88:	aa08      	add	r2, sp, #32
   1fc8a:	f7ff fd37 	bl	1f6fc <timeout_recalc>
		status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   1fc8e:	e7dd      	b.n	1fc4c <zsock_sendmsg_ctx+0x44>
		net_context_get_option(ctx, NET_OPT_SNDTIMEO, &timeout, NULL);
   1fc90:	2105      	movs	r1, #5
   1fc92:	aa08      	add	r2, sp, #32
   1fc94:	f7e9 fc8a 	bl	95ac <net_context_get_option>
		buf_timeout = sys_clock_timeout_end_calc(MAX_WAIT_BUFS);
   1fc98:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   1fc9c:	2100      	movs	r1, #0
   1fc9e:	f004 fc15 	bl	244cc <sys_clock_timeout_end_calc>
   1fca2:	4604      	mov	r4, r0
   1fca4:	460d      	mov	r5, r1
   1fca6:	e7c7      	b.n	1fc38 <zsock_sendmsg_ctx+0x30>
}
   1fca8:	b00b      	add	sp, #44	; 0x2c
   1fcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001fcae <sock_sendmsg_vmeth>:
	return zsock_sendmsg_ctx(obj, msg, flags);
   1fcae:	f7ff bfab 	b.w	1fc08 <zsock_sendmsg_ctx>

0001fcb2 <zsock_wait_data>:
{
   1fcb2:	b410      	push	{r4}
	if (ctx->cond.lock == NULL) {
   1fcb4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
   1fcb8:	460b      	mov	r3, r1
	if (ctx->cond.lock == NULL) {
   1fcba:	b912      	cbnz	r2, 1fcc2 <zsock_wait_data+0x10>
}
   1fcbc:	bc10      	pop	{r4}
   1fcbe:	f7e5 bd95 	b.w	57ec <zsock_wait_data.part.0>
	if (k_fifo_is_empty(&ctx->recv_q)) {
   1fcc2:	6e82      	ldr	r2, [r0, #104]	; 0x68
   1fcc4:	b93a      	cbnz	r2, 1fcd6 <zsock_wait_data+0x24>
		return k_condvar_wait(&ctx->cond.recv, ctx->cond.lock,
   1fcc6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   1fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
}
   1fcce:	bc10      	pop	{r4}
	return z_impl_k_condvar_wait(condvar, mutex, timeout);
   1fcd0:	3080      	adds	r0, #128	; 0x80
   1fcd2:	f7f6 bbf5 	b.w	164c0 <z_impl_k_condvar_wait>
   1fcd6:	2000      	movs	r0, #0
   1fcd8:	bc10      	pop	{r4}
   1fcda:	4770      	bx	lr

0001fcdc <sock_recvfrom_vmeth>:
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   1fcdc:	f7e5 bf4c 	b.w	5b78 <zsock_recvfrom_ctx>

0001fce0 <sock_read_vmeth>:
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   1fce0:	2300      	movs	r3, #0
{
   1fce2:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   1fce4:	e9cd 3300 	strd	r3, r3, [sp]
   1fce8:	f7e5 ff46 	bl	5b78 <zsock_recvfrom_ctx>
}
   1fcec:	b003      	add	sp, #12
   1fcee:	f85d fb04 	ldr.w	pc, [sp], #4

0001fcf2 <z_impl_zsock_recvfrom>:
{
   1fcf2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fcf6:	460d      	mov	r5, r1
   1fcf8:	4616      	mov	r6, r2
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1fcfa:	a902      	add	r1, sp, #8
   1fcfc:	aa03      	add	r2, sp, #12
{
   1fcfe:	461f      	mov	r7, r3
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1fd00:	f7ff fd78 	bl	1f7f4 <get_sock_vtable>
   1fd04:	4604      	mov	r4, r0
   1fd06:	b948      	cbnz	r0, 1fd1c <z_impl_zsock_recvfrom+0x2a>
   1fd08:	f000 f99b 	bl	20042 <__errno>
   1fd0c:	2309      	movs	r3, #9
   1fd0e:	f04f 34ff 	mov.w	r4, #4294967295
   1fd12:	6003      	str	r3, [r0, #0]
}
   1fd14:	4620      	mov	r0, r4
   1fd16:	b004      	add	sp, #16
   1fd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1fd1c:	9b02      	ldr	r3, [sp, #8]
   1fd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fd20:	b91b      	cbnz	r3, 1fd2a <z_impl_zsock_recvfrom+0x38>
   1fd22:	f000 f98e 	bl	20042 <__errno>
   1fd26:	235f      	movs	r3, #95	; 0x5f
   1fd28:	e7f1      	b.n	1fd0e <z_impl_zsock_recvfrom+0x1c>
   1fd2a:	9803      	ldr	r0, [sp, #12]
   1fd2c:	f04f 32ff 	mov.w	r2, #4294967295
   1fd30:	f04f 33ff 	mov.w	r3, #4294967295
   1fd34:	f7ff fd00 	bl	1f738 <k_mutex_lock.constprop.0.isra.0>
   1fd38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fd3a:	4632      	mov	r2, r6
   1fd3c:	9301      	str	r3, [sp, #4]
   1fd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fd40:	4629      	mov	r1, r5
   1fd42:	9300      	str	r3, [sp, #0]
   1fd44:	9b02      	ldr	r3, [sp, #8]
   1fd46:	4620      	mov	r0, r4
   1fd48:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   1fd4c:	463b      	mov	r3, r7
   1fd4e:	47c0      	blx	r8
   1fd50:	4604      	mov	r4, r0
   1fd52:	9803      	ldr	r0, [sp, #12]
   1fd54:	f7ff fcf2 	bl	1f73c <k_mutex_unlock.isra.0>
   1fd58:	e7dc      	b.n	1fd14 <z_impl_zsock_recvfrom+0x22>

0001fd5a <z_impl_zsock_inet_pton>:
{
   1fd5a:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   1fd5c:	f7e8 fda0 	bl	88a0 <z_impl_net_addr_pton>
}
   1fd60:	fab0 f080 	clz	r0, r0
   1fd64:	0940      	lsrs	r0, r0, #5
   1fd66:	bd08      	pop	{r3, pc}

0001fd68 <zsock_getsockopt_ctx>:
{
   1fd68:	b570      	push	{r4, r5, r6, lr}
   1fd6a:	460c      	mov	r4, r1
	switch (level) {
   1fd6c:	2c06      	cmp	r4, #6
{
   1fd6e:	4611      	mov	r1, r2
   1fd70:	461a      	mov	r2, r3
   1fd72:	9b04      	ldr	r3, [sp, #16]
	switch (level) {
   1fd74:	d021      	beq.n	1fdba <zsock_getsockopt_ctx+0x52>
   1fd76:	dc06      	bgt.n	1fd86 <zsock_getsockopt_ctx+0x1e>
   1fd78:	b32c      	cbz	r4, 1fdc6 <zsock_getsockopt_ctx+0x5e>
   1fd7a:	2c01      	cmp	r4, #1
   1fd7c:	d007      	beq.n	1fd8e <zsock_getsockopt_ctx+0x26>
	errno = ENOPROTOOPT;
   1fd7e:	f000 f960 	bl	20042 <__errno>
   1fd82:	236d      	movs	r3, #109	; 0x6d
   1fd84:	e014      	b.n	1fdb0 <zsock_getsockopt_ctx+0x48>
	switch (level) {
   1fd86:	2c29      	cmp	r4, #41	; 0x29
   1fd88:	d1f9      	bne.n	1fd7e <zsock_getsockopt_ctx+0x16>
		switch (optname) {
   1fd8a:	2943      	cmp	r1, #67	; 0x43
   1fd8c:	e01c      	b.n	1fdc8 <zsock_getsockopt_ctx+0x60>
		switch (optname) {
   1fd8e:	2903      	cmp	r1, #3
   1fd90:	d004      	beq.n	1fd9c <zsock_getsockopt_ctx+0x34>
   1fd92:	2926      	cmp	r1, #38	; 0x26
   1fd94:	d1f3      	bne.n	1fd7e <zsock_getsockopt_ctx+0x16>
			int proto = (int)net_context_get_proto(ctx);
   1fd96:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   1fd9a:	e003      	b.n	1fda4 <zsock_getsockopt_ctx+0x3c>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1fd9c:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   1fda0:	f3c1 1181 	ubfx	r1, r1, #6, #2
			if (*optlen != sizeof(proto)) {
   1fda4:	681b      	ldr	r3, [r3, #0]
   1fda6:	2b04      	cmp	r3, #4
   1fda8:	d004      	beq.n	1fdb4 <zsock_getsockopt_ctx+0x4c>
				errno = EINVAL;
   1fdaa:	f000 f94a 	bl	20042 <__errno>
   1fdae:	2316      	movs	r3, #22
	errno = ENOPROTOOPT;
   1fdb0:	6003      	str	r3, [r0, #0]
	return -1;
   1fdb2:	e013      	b.n	1fddc <zsock_getsockopt_ctx+0x74>
			*(int *)optval = type;
   1fdb4:	6011      	str	r1, [r2, #0]
			return 0;
   1fdb6:	2000      	movs	r0, #0
}
   1fdb8:	bd70      	pop	{r4, r5, r6, pc}
		switch (optname) {
   1fdba:	2901      	cmp	r1, #1
   1fdbc:	d1df      	bne.n	1fd7e <zsock_getsockopt_ctx+0x16>
}
   1fdbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ret = net_tcp_get_option(ctx, TCP_OPT_NODELAY, optval, optlen);
   1fdc2:	f002 bb91 	b.w	224e8 <net_tcp_get_option>
		switch (optname) {
   1fdc6:	2901      	cmp	r1, #1
   1fdc8:	d1d9      	bne.n	1fd7e <zsock_getsockopt_ctx+0x16>
				ret = net_context_get_option(ctx,
   1fdca:	2108      	movs	r1, #8
   1fdcc:	f7e9 fbee 	bl	95ac <net_context_get_option>
				if (ret < 0) {
   1fdd0:	1e04      	subs	r4, r0, #0
   1fdd2:	daf0      	bge.n	1fdb6 <zsock_getsockopt_ctx+0x4e>
					errno  = -ret;
   1fdd4:	f000 f935 	bl	20042 <__errno>
   1fdd8:	4264      	negs	r4, r4
   1fdda:	6004      	str	r4, [r0, #0]
				return -1;
   1fddc:	f04f 30ff 	mov.w	r0, #4294967295
   1fde0:	e7ea      	b.n	1fdb8 <zsock_getsockopt_ctx+0x50>

0001fde2 <sock_getsockopt_vmeth>:
	return zsock_getsockopt_ctx(obj, level, optname, optval, optlen);
   1fde2:	f7ff bfc1 	b.w	1fd68 <zsock_getsockopt_ctx>

0001fde6 <zsock_setsockopt_ctx>:
{
   1fde6:	b570      	push	{r4, r5, r6, lr}
   1fde8:	460d      	mov	r5, r1
	switch (level) {
   1fdea:	2d06      	cmp	r5, #6
{
   1fdec:	4611      	mov	r1, r2
   1fdee:	4604      	mov	r4, r0
   1fdf0:	461a      	mov	r2, r3
   1fdf2:	9b04      	ldr	r3, [sp, #16]
	switch (level) {
   1fdf4:	d048      	beq.n	1fe88 <zsock_setsockopt_ctx+0xa2>
   1fdf6:	dc07      	bgt.n	1fe08 <zsock_setsockopt_ctx+0x22>
   1fdf8:	2d00      	cmp	r5, #0
   1fdfa:	d04b      	beq.n	1fe94 <zsock_setsockopt_ctx+0xae>
   1fdfc:	2d01      	cmp	r5, #1
   1fdfe:	d009      	beq.n	1fe14 <zsock_setsockopt_ctx+0x2e>
	errno = ENOPROTOOPT;
   1fe00:	f000 f91f 	bl	20042 <__errno>
   1fe04:	236d      	movs	r3, #109	; 0x6d
   1fe06:	e017      	b.n	1fe38 <zsock_setsockopt_ctx+0x52>
	switch (level) {
   1fe08:	2d29      	cmp	r5, #41	; 0x29
   1fe0a:	d1f9      	bne.n	1fe00 <zsock_setsockopt_ctx+0x1a>
		switch (optname) {
   1fe0c:	291a      	cmp	r1, #26
   1fe0e:	d007      	beq.n	1fe20 <zsock_setsockopt_ctx+0x3a>
   1fe10:	2943      	cmp	r1, #67	; 0x43
   1fe12:	e040      	b.n	1fe96 <zsock_setsockopt_ctx+0xb0>
		switch (optname) {
   1fe14:	290d      	cmp	r1, #13
   1fe16:	d003      	beq.n	1fe20 <zsock_setsockopt_ctx+0x3a>
   1fe18:	2919      	cmp	r1, #25
   1fe1a:	d003      	beq.n	1fe24 <zsock_setsockopt_ctx+0x3e>
   1fe1c:	2902      	cmp	r1, #2
   1fe1e:	d1ef      	bne.n	1fe00 <zsock_setsockopt_ctx+0x1a>
				return 0;
   1fe20:	2000      	movs	r0, #0
}
   1fe22:	bd70      	pop	{r4, r5, r6, pc}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1fe24:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   1fe28:	f3c1 00c2 	ubfx	r0, r1, #3, #3
			if (net_context_get_family(ctx) != AF_INET &&
   1fe2c:	3801      	subs	r0, #1
   1fe2e:	2801      	cmp	r0, #1
   1fe30:	d904      	bls.n	1fe3c <zsock_setsockopt_ctx+0x56>
				errno = EAFNOSUPPORT;
   1fe32:	f000 f906 	bl	20042 <__errno>
   1fe36:	236a      	movs	r3, #106	; 0x6a
	errno = ENOPROTOOPT;
   1fe38:	6003      	str	r3, [r0, #0]
	return -1;
   1fe3a:	e036      	b.n	1feaa <zsock_setsockopt_ctx+0xc4>
			if ((optlen == 0) || (ifreq != NULL &&
   1fe3c:	b113      	cbz	r3, 1fe44 <zsock_setsockopt_ctx+0x5e>
   1fe3e:	b142      	cbz	r2, 1fe52 <zsock_setsockopt_ctx+0x6c>
   1fe40:	7810      	ldrb	r0, [r2, #0]
   1fe42:	b920      	cbnz	r0, 1fe4e <zsock_setsockopt_ctx+0x68>
				ctx->flags &= ~NET_CONTEXT_BOUND_TO_IFACE;
   1fe44:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   1fe48:	f8a4 1090 	strh.w	r1, [r4, #144]	; 0x90
				return 0;
   1fe4c:	e7e8      	b.n	1fe20 <zsock_setsockopt_ctx+0x3a>
			if ((ifreq == NULL) || (optlen != sizeof(*ifreq))) {
   1fe4e:	2b30      	cmp	r3, #48	; 0x30
   1fe50:	d003      	beq.n	1fe5a <zsock_setsockopt_ctx+0x74>
				errno = EINVAL;
   1fe52:	f000 f8f6 	bl	20042 <__errno>
   1fe56:	2316      	movs	r3, #22
   1fe58:	e7ee      	b.n	1fe38 <zsock_setsockopt_ctx+0x52>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1fe5a:	4610      	mov	r0, r2
   1fe5c:	f7f5 f8ea 	bl	15034 <z_impl_device_get_binding>
			if (dev == NULL) {
   1fe60:	b918      	cbnz	r0, 1fe6a <zsock_setsockopt_ctx+0x84>
				errno = ENODEV;
   1fe62:	f000 f8ee 	bl	20042 <__errno>
   1fe66:	2313      	movs	r3, #19
   1fe68:	e7e6      	b.n	1fe38 <zsock_setsockopt_ctx+0x52>
			iface = net_if_lookup_by_dev(dev);
   1fe6a:	f7e8 f865 	bl	7f38 <net_if_lookup_by_dev>
			if (iface == NULL) {
   1fe6e:	2800      	cmp	r0, #0
   1fe70:	d0f7      	beq.n	1fe62 <zsock_setsockopt_ctx+0x7c>
	context->iface = net_if_get_by_iface(iface);
   1fe72:	f7e8 faf1 	bl	8458 <net_if_get_by_iface>
			ctx->flags |= NET_CONTEXT_BOUND_TO_IFACE;
   1fe76:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
   1fe7a:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
   1fe7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1fe82:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
			return 0;
   1fe86:	e7cb      	b.n	1fe20 <zsock_setsockopt_ctx+0x3a>
		switch (optname) {
   1fe88:	2901      	cmp	r1, #1
   1fe8a:	d1b9      	bne.n	1fe00 <zsock_setsockopt_ctx+0x1a>
}
   1fe8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ret = net_tcp_set_option(ctx,
   1fe90:	f002 bb04 	b.w	2249c <net_tcp_set_option>
		switch (optname) {
   1fe94:	2901      	cmp	r1, #1
   1fe96:	d1b3      	bne.n	1fe00 <zsock_setsockopt_ctx+0x1a>
				ret = net_context_set_option(ctx,
   1fe98:	2108      	movs	r1, #8
   1fe9a:	f7e9 fb51 	bl	9540 <net_context_set_option>
				if (ret < 0) {
   1fe9e:	1e04      	subs	r4, r0, #0
   1fea0:	dabe      	bge.n	1fe20 <zsock_setsockopt_ctx+0x3a>
					errno  = -ret;
   1fea2:	f000 f8ce 	bl	20042 <__errno>
   1fea6:	4264      	negs	r4, r4
   1fea8:	6004      	str	r4, [r0, #0]
	return -1;
   1feaa:	f04f 30ff 	mov.w	r0, #4294967295
   1feae:	e7b8      	b.n	1fe22 <zsock_setsockopt_ctx+0x3c>

0001feb0 <sock_setsockopt_vmeth>:
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   1feb0:	f7ff bf99 	b.w	1fde6 <zsock_setsockopt_ctx>

0001feb4 <zsock_getpeername_ctx>:
{
   1feb4:	b513      	push	{r0, r1, r4, lr}
   1feb6:	4603      	mov	r3, r0
   1feb8:	4614      	mov	r4, r2
	if (addr == NULL || addrlen == NULL) {
   1feba:	4608      	mov	r0, r1
   1febc:	b101      	cbz	r1, 1fec0 <zsock_getpeername_ctx+0xc>
   1febe:	b91a      	cbnz	r2, 1fec8 <zsock_getpeername_ctx+0x14>
		SET_ERRNO(-EINVAL);
   1fec0:	f000 f8bf 	bl	20042 <__errno>
   1fec4:	2316      	movs	r3, #22
   1fec6:	e006      	b.n	1fed6 <zsock_getpeername_ctx+0x22>
	if (!(ctx->flags & NET_CONTEXT_REMOTE_ADDR_SET)) {
   1fec8:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   1fecc:	05d1      	lsls	r1, r2, #23
   1fece:	d407      	bmi.n	1fee0 <zsock_getpeername_ctx+0x2c>
		SET_ERRNO(-ENOTCONN);
   1fed0:	f000 f8b7 	bl	20042 <__errno>
   1fed4:	2380      	movs	r3, #128	; 0x80
   1fed6:	6003      	str	r3, [r0, #0]
		SET_ERRNO(-EINVAL);
   1fed8:	f04f 30ff 	mov.w	r0, #4294967295
}
   1fedc:	b002      	add	sp, #8
   1fede:	bd10      	pop	{r4, pc}
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1fee0:	f3c2 1181 	ubfx	r1, r2, #6, #2
	if (net_context_get_type(ctx) == SOCK_STREAM &&
   1fee4:	2901      	cmp	r1, #1
   1fee6:	d103      	bne.n	1fef0 <zsock_getpeername_ctx+0x3c>
   1fee8:	f3c2 0241 	ubfx	r2, r2, #1, #2
   1feec:	2a02      	cmp	r2, #2
   1feee:	d1ef      	bne.n	1fed0 <zsock_getpeername_ctx+0x1c>
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->remote.sa_family == AF_INET) {
   1fef0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1fef2:	2a01      	cmp	r2, #1
   1fef4:	d1e4      	bne.n	1fec0 <zsock_getpeername_ctx+0xc>
		addr4.sin_family = AF_INET;
   1fef6:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin(&ctx->remote)->sin_port;
   1fefa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		memcpy(&addr4.sin_addr, &net_sin(&ctx->remote)->sin_addr,
   1fefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		addr4.sin_port = net_sin(&ctx->remote)->sin_port;
   1fefe:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
   1ff02:	6822      	ldr	r2, [r4, #0]
   1ff04:	4669      	mov	r1, sp
   1ff06:	2a08      	cmp	r2, #8
   1ff08:	bf28      	it	cs
   1ff0a:	2208      	movcs	r2, #8
		memcpy(&addr4.sin_addr, &net_sin(&ctx->remote)->sin_addr,
   1ff0c:	9301      	str	r3, [sp, #4]
   1ff0e:	f7e0 fe21 	bl	b54 <memcpy>
	*addrlen = newlen;
   1ff12:	2308      	movs	r3, #8
	return 0;
   1ff14:	2000      	movs	r0, #0
	*addrlen = newlen;
   1ff16:	6023      	str	r3, [r4, #0]
	return 0;
   1ff18:	e7e0      	b.n	1fedc <zsock_getpeername_ctx+0x28>

0001ff1a <sock_getpeername_vmeth>:
	return zsock_getpeername_ctx(obj, addr, addrlen);
   1ff1a:	f7ff bfcb 	b.w	1feb4 <zsock_getpeername_ctx>

0001ff1e <zsock_getsockname_ctx>:
{
   1ff1e:	4603      	mov	r3, r0
   1ff20:	b513      	push	{r0, r1, r4, lr}
   1ff22:	4614      	mov	r4, r2
	if (!ctx->conn_handler) {
   1ff24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
   1ff26:	4608      	mov	r0, r1
	if (!ctx->conn_handler) {
   1ff28:	b932      	cbnz	r2, 1ff38 <zsock_getsockname_ctx+0x1a>
		SET_ERRNO(-EINVAL);
   1ff2a:	f000 f88a 	bl	20042 <__errno>
   1ff2e:	2316      	movs	r3, #22
   1ff30:	6003      	str	r3, [r0, #0]
		SET_ERRNO(-EINVAL);
   1ff32:	f04f 30ff 	mov.w	r0, #4294967295
   1ff36:	e014      	b.n	1ff62 <zsock_getsockname_ctx+0x44>
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   1ff38:	8c1a      	ldrh	r2, [r3, #32]
   1ff3a:	2a01      	cmp	r2, #1
   1ff3c:	d1f5      	bne.n	1ff2a <zsock_getsockname_ctx+0xc>
		addr4.sin_family = AF_INET;
   1ff3e:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   1ff42:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   1ff44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   1ff46:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
   1ff4a:	6822      	ldr	r2, [r4, #0]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   1ff4c:	681b      	ldr	r3, [r3, #0]
   1ff4e:	2a08      	cmp	r2, #8
   1ff50:	bf28      	it	cs
   1ff52:	2208      	movcs	r2, #8
   1ff54:	4669      	mov	r1, sp
   1ff56:	9301      	str	r3, [sp, #4]
   1ff58:	f7e0 fdfc 	bl	b54 <memcpy>
	*addrlen = newlen;
   1ff5c:	2308      	movs	r3, #8
	return 0;
   1ff5e:	2000      	movs	r0, #0
	*addrlen = newlen;
   1ff60:	6023      	str	r3, [r4, #0]
}
   1ff62:	b002      	add	sp, #8
   1ff64:	bd10      	pop	{r4, pc}

0001ff66 <sock_getsockname_vmeth>:
	return zsock_getsockname_ctx(obj, addr, addrlen);
   1ff66:	f7ff bfda 	b.w	1ff1e <zsock_getsockname_ctx>

0001ff6a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   1ff6a:	2000      	movs	r0, #0
{
   1ff6c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1ff6e:	f7e4 fb9f 	bl	46b0 <sys_reboot>

0001ff72 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1ff72:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1ff74:	6800      	ldr	r0, [r0, #0]
   1ff76:	f7e6 b8f3 	b.w	6160 <z_arm_fatal_error>

0001ff7a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1ff7a:	2100      	movs	r1, #0
   1ff7c:	2001      	movs	r0, #1
   1ff7e:	f7e6 b8ef 	b.w	6160 <z_arm_fatal_error>

0001ff82 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1ff82:	b508      	push	{r3, lr}
	handler();
   1ff84:	f7e6 f998 	bl	62b8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1ff88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1ff8c:	f7e6 ba5a 	b.w	6444 <z_arm_exc_exit>

0001ff90 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1ff90:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1ff92:	f383 880b 	msr	PSPLIM, r3
}
   1ff96:	4770      	bx	lr

0001ff98 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1ff98:	2300      	movs	r3, #0
   1ff9a:	f7e4 bf73 	b.w	4e84 <z_impl_z_log_msg_static_create>

0001ff9e <arch_coredump_tgt_code_get>:

uint16_t arch_coredump_tgt_code_get(void)
{
	return COREDUMP_TGT_ARM_CORTEX_M;
}
   1ff9e:	2003      	movs	r0, #3
   1ffa0:	4770      	bx	lr

0001ffa2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1ffa2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1ffa6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ffaa:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1ffac:	bf08      	it	eq
   1ffae:	f06f 0015 	mvneq.w	r0, #21
   1ffb2:	4770      	bx	lr

0001ffb4 <mpu_configure_region>:
{
   1ffb4:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1ffb6:	890a      	ldrh	r2, [r1, #8]
   1ffb8:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1ffba:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1ffbc:	684c      	ldr	r4, [r1, #4]
   1ffbe:	f002 021f 	and.w	r2, r2, #31
{
   1ffc2:	b085      	sub	sp, #20
   1ffc4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1ffc8:	9300      	str	r3, [sp, #0]
   1ffca:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ffce:	f023 031f 	bic.w	r3, r3, #31
   1ffd2:	1e62      	subs	r2, r4, #1
   1ffd4:	4413      	add	r3, r2
   1ffd6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1ffda:	2807      	cmp	r0, #7
   1ffdc:	9303      	str	r3, [sp, #12]
   1ffde:	d904      	bls.n	1ffea <mpu_configure_region+0x36>
}
   1ffe0:	b005      	add	sp, #20
   1ffe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1ffe6:	f7e6 be57 	b.w	6c98 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   1ffea:	4669      	mov	r1, sp
   1ffec:	f7e6 fe3a 	bl	6c64 <region_init>
}
   1fff0:	b005      	add	sp, #20
   1fff2:	bd30      	pop	{r4, r5, pc}

0001fff4 <malloc_prepare>:
}
   1fff4:	2000      	movs	r0, #0
   1fff6:	4770      	bx	lr

0001fff8 <_stdout_hook_default>:
}
   1fff8:	f04f 30ff 	mov.w	r0, #4294967295
   1fffc:	4770      	bx	lr

0001fffe <_isatty>:
}
   1fffe:	2802      	cmp	r0, #2
   20000:	bfcc      	ite	gt
   20002:	2000      	movgt	r0, #0
   20004:	2001      	movle	r0, #1
   20006:	4770      	bx	lr

00020008 <_kill>:
}
   20008:	2000      	movs	r0, #0
   2000a:	4770      	bx	lr

0002000c <_getpid>:
int _getpid(void)
   2000c:	2000      	movs	r0, #0
   2000e:	4770      	bx	lr

00020010 <_fstat>:
	st->st_mode = S_IFCHR;
   20010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   20014:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   20016:	604b      	str	r3, [r1, #4]
}
   20018:	4770      	bx	lr

0002001a <__retarget_lock_init_recursive>:
{
   2001a:	b510      	push	{r4, lr}
   2001c:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   2001e:	2014      	movs	r0, #20
   20020:	f7f6 fdfa 	bl	16c18 <malloc>
   20024:	6020      	str	r0, [r4, #0]
}
   20026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   2002a:	f003 bf19 	b.w	23e60 <z_impl_k_mutex_init>

0002002e <__retarget_lock_close_recursive>:
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
   2002e:	f7f6 bdfb 	b.w	16c28 <free>

00020032 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   20032:	f04f 32ff 	mov.w	r2, #4294967295
   20036:	f04f 33ff 	mov.w	r3, #4294967295
   2003a:	f7f5 bb9b 	b.w	15774 <z_impl_k_mutex_lock>

0002003e <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   2003e:	f7f5 bc13 	b.w	15868 <z_impl_k_mutex_unlock>

00020042 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   20042:	f7f5 b821 	b.w	15088 <z_impl_z_errno>

00020046 <fixed_data_unref>:
}
   20046:	4770      	bx	lr

00020048 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20048:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2004a:	6849      	ldr	r1, [r1, #4]
   2004c:	6809      	ldr	r1, [r1, #0]
   2004e:	f7e7 b977 	b.w	7340 <net_buf_alloc_len>

00020052 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   20052:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   20054:	4618      	mov	r0, r3
   20056:	685b      	ldr	r3, [r3, #4]
   20058:	2b00      	cmp	r3, #0
   2005a:	d1fb      	bne.n	20054 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2005c:	4770      	bx	lr

0002005e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2005e:	6842      	ldr	r2, [r0, #4]
{
   20060:	b510      	push	{r4, lr}
	if (parent->frags) {
   20062:	b12a      	cbz	r2, 20070 <net_buf_frag_insert+0x12>
   20064:	460b      	mov	r3, r1
	while (buf->frags) {
   20066:	461c      	mov	r4, r3
   20068:	685b      	ldr	r3, [r3, #4]
   2006a:	2b00      	cmp	r3, #0
   2006c:	d1fb      	bne.n	20066 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2006e:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   20070:	6041      	str	r1, [r0, #4]
}
   20072:	bd10      	pop	{r4, pc}

00020074 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   20074:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   20076:	4604      	mov	r4, r0
   20078:	b920      	cbnz	r0, 20084 <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   2007a:	4608      	mov	r0, r1
	buf->ref++;
   2007c:	7a0b      	ldrb	r3, [r1, #8]
   2007e:	3301      	adds	r3, #1
   20080:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   20082:	bd10      	pop	{r4, pc}
   20084:	4603      	mov	r3, r0
	while (buf->frags) {
   20086:	4618      	mov	r0, r3
   20088:	685b      	ldr	r3, [r3, #4]
   2008a:	2b00      	cmp	r3, #0
   2008c:	d1fb      	bne.n	20086 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2008e:	f7ff ffe6 	bl	2005e <net_buf_frag_insert>
   20092:	4620      	mov	r0, r4
   20094:	e7f5      	b.n	20082 <net_buf_frag_add+0xe>

00020096 <net_buf_linearize>:
	return next_frag;
}

size_t net_buf_linearize(void *dst, size_t dst_len, struct net_buf *src,
			 size_t offset, size_t len)
{
   20096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2009a:	4607      	mov	r7, r0
   2009c:	460d      	mov	r5, r1
   2009e:	4614      	mov	r4, r2
	len = MIN(len, dst_len);

	frag = src;

	/* find the right fragment to start copying from */
	while (frag && offset >= frag->len) {
   200a0:	b934      	cbnz	r4, 200b0 <net_buf_linearize+0x1a>
   200a2:	46a0      	mov	r8, r4
		/* after the first iteration, this value will be 0 */
		offset = 0;
	}

	return copied;
}
   200a4:	4640      	mov	r0, r8
   200a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
   200aa:	6864      	ldr	r4, [r4, #4]
		offset -= frag->len;
   200ac:	1a9b      	subs	r3, r3, r2
		frag = frag->frags;
   200ae:	e7f7      	b.n	200a0 <net_buf_linearize+0xa>
	while (frag && offset >= frag->len) {
   200b0:	8a22      	ldrh	r2, [r4, #16]
   200b2:	429a      	cmp	r2, r3
   200b4:	d9f9      	bls.n	200aa <net_buf_linearize+0x14>
	len = MIN(len, dst_len);
   200b6:	9a06      	ldr	r2, [sp, #24]
   200b8:	f04f 0800 	mov.w	r8, #0
   200bc:	4295      	cmp	r5, r2
   200be:	bf28      	it	cs
   200c0:	4615      	movcs	r5, r2
	while (frag && len > 0) {
   200c2:	2c00      	cmp	r4, #0
   200c4:	d0ee      	beq.n	200a4 <net_buf_linearize+0xe>
   200c6:	2d00      	cmp	r5, #0
   200c8:	d0ec      	beq.n	200a4 <net_buf_linearize+0xe>
		to_copy = MIN(len, frag->len - offset);
   200ca:	8a26      	ldrh	r6, [r4, #16]
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
   200cc:	68e1      	ldr	r1, [r4, #12]
		to_copy = MIN(len, frag->len - offset);
   200ce:	1af6      	subs	r6, r6, r3
   200d0:	42ae      	cmp	r6, r5
   200d2:	bf28      	it	cs
   200d4:	462e      	movcs	r6, r5
   200d6:	4419      	add	r1, r3
   200d8:	eb07 0008 	add.w	r0, r7, r8
   200dc:	4632      	mov	r2, r6
   200de:	f7e0 fd39 	bl	b54 <memcpy>
		copied += to_copy;
   200e2:	44b0      	add	r8, r6
		offset = 0;
   200e4:	2300      	movs	r3, #0
		frag = frag->frags;
   200e6:	6864      	ldr	r4, [r4, #4]
		len -= to_copy;
   200e8:	1bad      	subs	r5, r5, r6
		offset = 0;
   200ea:	e7ea      	b.n	200c2 <net_buf_linearize+0x2c>

000200ec <net_buf_simple_add>:
	return buf->data + buf->len;
   200ec:	8883      	ldrh	r3, [r0, #4]
   200ee:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   200f0:	4419      	add	r1, r3
   200f2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   200f4:	18d0      	adds	r0, r2, r3
   200f6:	4770      	bx	lr

000200f8 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   200f8:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   200fa:	8882      	ldrh	r2, [r0, #4]
   200fc:	1a52      	subs	r2, r2, r1
   200fe:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   20100:	6800      	ldr	r0, [r0, #0]
   20102:	4408      	add	r0, r1
   20104:	6018      	str	r0, [r3, #0]
}
   20106:	4770      	bx	lr

00020108 <net_buf_simple_max_len>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   20108:	6803      	ldr	r3, [r0, #0]
   2010a:	6882      	ldr	r2, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
}

uint16_t net_buf_simple_max_len(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf);
   2010c:	88c0      	ldrh	r0, [r0, #6]
	return buf->data - buf->__buf;
   2010e:	1a9b      	subs	r3, r3, r2
	return buf->size - net_buf_simple_headroom(buf);
   20110:	1ac0      	subs	r0, r0, r3
}
   20112:	b280      	uxth	r0, r0
   20114:	4770      	bx	lr

00020116 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   20116:	6800      	ldr	r0, [r0, #0]
   20118:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
   2011c:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   20120:	4258      	negs	r0, r3
   20122:	4158      	adcs	r0, r3
   20124:	4770      	bx	lr

00020126 <ethernet_flags>:
	return iface->if_dev->l2_data;
   20126:	6803      	ldr	r3, [r0, #0]
	return ctx->ethernet_l2_flags;
   20128:	689b      	ldr	r3, [r3, #8]
}
   2012a:	7e18      	ldrb	r0, [r3, #24]
   2012c:	4770      	bx	lr

0002012e <ethernet_enable>:
{
   2012e:	b570      	push	{r4, r5, r6, lr}
	return iface->if_dev->dev;
   20130:	6803      	ldr	r3, [r0, #0]
   20132:	4604      	mov	r4, r0
   20134:	681a      	ldr	r2, [r3, #0]
	const struct ethernet_api *eth =
   20136:	6895      	ldr	r5, [r2, #8]
	if (!eth) {
   20138:	b185      	cbz	r5, 2015c <ethernet_enable+0x2e>
	if (!state) {
   2013a:	b951      	cbnz	r1, 20152 <ethernet_enable+0x24>
		net_arp_clear_cache(iface);
   2013c:	f7e7 fcd6 	bl	7aec <net_arp_clear_cache>
		if (eth->stop) {
   20140:	68ab      	ldr	r3, [r5, #8]
   20142:	b90b      	cbnz	r3, 20148 <ethernet_enable+0x1a>
	int ret = 0;
   20144:	2000      	movs	r0, #0
}
   20146:	bd70      	pop	{r4, r5, r6, pc}
   20148:	6822      	ldr	r2, [r4, #0]
			ret = eth->stop(net_if_get_device(iface));
   2014a:	6810      	ldr	r0, [r2, #0]
}
   2014c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ret = eth->start(net_if_get_device(iface));
   20150:	4718      	bx	r3
		if (eth->start) {
   20152:	686b      	ldr	r3, [r5, #4]
   20154:	2b00      	cmp	r3, #0
   20156:	d0f5      	beq.n	20144 <ethernet_enable+0x16>
			ret = eth->start(net_if_get_device(iface));
   20158:	4610      	mov	r0, r2
   2015a:	e7f7      	b.n	2014c <ethernet_enable+0x1e>
		return -ENOENT;
   2015c:	f06f 0001 	mvn.w	r0, #1
   20160:	e7f1      	b.n	20146 <ethernet_enable+0x18>

00020162 <net_eth_is_addr_broadcast>:
	if (addr->addr[0] == 0xff &&
   20162:	7803      	ldrb	r3, [r0, #0]
   20164:	2bff      	cmp	r3, #255	; 0xff
   20166:	d111      	bne.n	2018c <net_eth_is_addr_broadcast+0x2a>
   20168:	7843      	ldrb	r3, [r0, #1]
   2016a:	2bff      	cmp	r3, #255	; 0xff
   2016c:	d10e      	bne.n	2018c <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[1] == 0xff &&
   2016e:	7883      	ldrb	r3, [r0, #2]
   20170:	2bff      	cmp	r3, #255	; 0xff
   20172:	d10b      	bne.n	2018c <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[2] == 0xff &&
   20174:	78c3      	ldrb	r3, [r0, #3]
   20176:	2bff      	cmp	r3, #255	; 0xff
   20178:	d108      	bne.n	2018c <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[3] == 0xff &&
   2017a:	7903      	ldrb	r3, [r0, #4]
   2017c:	2bff      	cmp	r3, #255	; 0xff
   2017e:	d105      	bne.n	2018c <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[4] == 0xff &&
   20180:	7940      	ldrb	r0, [r0, #5]
   20182:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   20186:	4258      	negs	r0, r3
   20188:	4158      	adcs	r0, r3
   2018a:	4770      	bx	lr
	return false;
   2018c:	2000      	movs	r0, #0
}
   2018e:	4770      	bx	lr

00020190 <carrier_on_off>:
{
   20190:	b510      	push	{r4, lr}
	if (ctx->iface == NULL) {
   20192:	6903      	ldr	r3, [r0, #16]
{
   20194:	4604      	mov	r4, r0
	if (ctx->iface == NULL) {
   20196:	b1e3      	cbz	r3, 201d2 <carrier_on_off+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20198:	1f03      	subs	r3, r0, #4
   2019a:	e8d3 3faf 	lda	r3, [r3]
	if (eth_carrier_up == ctx->is_net_carrier_up) {
   2019e:	7d42      	ldrb	r2, [r0, #21]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   201a0:	f003 0301 	and.w	r3, r3, #1
   201a4:	f002 0101 	and.w	r1, r2, #1
   201a8:	4299      	cmp	r1, r3
   201aa:	d012      	beq.n	201d2 <carrier_on_off+0x42>
	ctx->is_net_carrier_up = eth_carrier_up;
   201ac:	f363 0200 	bfi	r2, r3, #0, #1
   201b0:	7542      	strb	r2, [r0, #21]
		ethernet_mgmt_raise_carrier_on_event(ctx->iface);
   201b2:	6900      	ldr	r0, [r0, #16]
	if (eth_carrier_up) {
   201b4:	b133      	cbz	r3, 201c4 <carrier_on_off+0x34>
		ethernet_mgmt_raise_carrier_on_event(ctx->iface);
   201b6:	f7e7 fa67 	bl	7688 <ethernet_mgmt_raise_carrier_on_event>
		net_if_carrier_on(ctx->iface);
   201ba:	6920      	ldr	r0, [r4, #16]
}
   201bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_if_carrier_on(ctx->iface);
   201c0:	f000 bc78 	b.w	20ab4 <net_if_carrier_on>
		ethernet_mgmt_raise_carrier_off_event(ctx->iface);
   201c4:	f7e7 fa68 	bl	7698 <ethernet_mgmt_raise_carrier_off_event>
		net_if_carrier_off(ctx->iface);
   201c8:	6920      	ldr	r0, [r4, #16]
}
   201ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_if_carrier_off(ctx->iface);
   201ce:	f000 bc85 	b.w	20adc <net_if_carrier_off>
}
   201d2:	bd10      	pop	{r4, pc}

000201d4 <net_eth_get_hw_capabilities.isra.0>:
   201d4:	6800      	ldr	r0, [r0, #0]
	if (!eth->get_capabilities) {
   201d6:	6883      	ldr	r3, [r0, #8]
   201d8:	68db      	ldr	r3, [r3, #12]
   201da:	b103      	cbz	r3, 201de <net_eth_get_hw_capabilities.isra.0+0xa>
	return eth->get_capabilities(net_if_get_device(iface));
   201dc:	4718      	bx	r3
}
   201de:	4618      	mov	r0, r3
   201e0:	4770      	bx	lr

000201e2 <ethernet_recv>:
{
   201e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return pkt->frags->data;
   201e6:	f8d1 8008 	ldr.w	r8, [r1, #8]
   201ea:	4602      	mov	r2, r0
   201ec:	f8d8 500c 	ldr.w	r5, [r8, #12]
   201f0:	460c      	mov	r4, r1
	if (hdr == NULL || pkt->buffer->len < hdr_len) {
   201f2:	b19d      	cbz	r5, 2021c <ethernet_recv+0x3a>
   201f4:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   201f8:	2b0d      	cmp	r3, #13
   201fa:	d90f      	bls.n	2021c <ethernet_recv+0x3a>
	switch (type) {
   201fc:	f64d 5186 	movw	r1, #56710	; 0xdd86
   20200:	89af      	ldrh	r7, [r5, #12]
   20202:	ba7b      	rev16	r3, r7
   20204:	428f      	cmp	r7, r1
   20206:	b298      	uxth	r0, r3
   20208:	d030      	beq.n	2026c <ethernet_recv+0x8a>
   2020a:	f248 61dd 	movw	r1, #34525	; 0x86dd
   2020e:	4288      	cmp	r0, r1
   20210:	d806      	bhi.n	20220 <ethernet_recv+0x3e>
   20212:	2f08      	cmp	r7, #8
   20214:	d00a      	beq.n	2022c <ethernet_recv+0x4a>
   20216:	f5b7 6fc1 	cmp.w	r7, #1544	; 0x608
   2021a:	d007      	beq.n	2022c <ethernet_recv+0x4a>
	return NET_DROP;
   2021c:	2002      	movs	r0, #2
   2021e:	e071      	b.n	20304 <ethernet_recv+0x122>
	switch (type) {
   20220:	f648 6188 	movw	r1, #36488	; 0x8e88
   20224:	428f      	cmp	r7, r1
   20226:	d1f9      	bne.n	2021c <ethernet_recv+0x3a>
   20228:	2600      	movs	r6, #0
   2022a:	e006      	b.n	2023a <ethernet_recv+0x58>
	pkt->family = family;
   2022c:	2601      	movs	r6, #1
   2022e:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
   20232:	f366 1147 	bfi	r1, r6, #5, #3
   20236:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
	lladdr->addr = hdr->src.addr;
   2023a:	1da9      	adds	r1, r5, #6
   2023c:	6261      	str	r1, [r4, #36]	; 0x24
	lladdr->len = sizeof(struct net_eth_addr);
   2023e:	f240 3106 	movw	r1, #774	; 0x306
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
   20242:	4628      	mov	r0, r5
	lladdr->len = sizeof(struct net_eth_addr);
   20244:	8521      	strh	r1, [r4, #40]	; 0x28
	lladdr->addr = hdr->dst.addr;
   20246:	62e5      	str	r5, [r4, #44]	; 0x2c
	lladdr->len = sizeof(struct net_eth_addr);
   20248:	8621      	strh	r1, [r4, #48]	; 0x30
	pkt->ll_proto_type = type;
   2024a:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
   2024c:	f7ff ff89 	bl	20162 <net_eth_is_addr_broadcast>
   20250:	b9b0      	cbnz	r0, 20280 <ethernet_recv+0x9e>
	if (addr->addr[0] == 0x01 &&
   20252:	782b      	ldrb	r3, [r5, #0]
   20254:	2b01      	cmp	r3, #1
   20256:	d00d      	beq.n	20274 <ethernet_recv+0x92>
	return &iface->if_dev->link_addr;
   20258:	6813      	ldr	r3, [r2, #0]
	if (lladdr1->len != lladdr2->len) {
   2025a:	7d1a      	ldrb	r2, [r3, #20]
   2025c:	2a06      	cmp	r2, #6
   2025e:	d1dd      	bne.n	2021c <ethernet_recv+0x3a>
	return !memcmp(lladdr1->addr, lladdr2->addr, lladdr1->len);
   20260:	4629      	mov	r1, r5
   20262:	6918      	ldr	r0, [r3, #16]
   20264:	f7f6 fff4 	bl	17250 <memcmp>
		    (struct net_eth_addr *)lladdr->addr) &&
   20268:	b150      	cbz	r0, 20280 <ethernet_recv+0x9e>
   2026a:	e7d7      	b.n	2021c <ethernet_recv+0x3a>
	pkt->family = family;
   2026c:	2602      	movs	r6, #2
   2026e:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
   20272:	e7de      	b.n	20232 <ethernet_recv+0x50>
   20274:	786b      	ldrb	r3, [r5, #1]
   20276:	2b00      	cmp	r3, #0
   20278:	d1ee      	bne.n	20258 <ethernet_recv+0x76>
	    addr->addr[1] == 0x00 &&
   2027a:	78ab      	ldrb	r3, [r5, #2]
   2027c:	2b5e      	cmp	r3, #94	; 0x5e
   2027e:	d1eb      	bne.n	20258 <ethernet_recv+0x76>
	return net_buf_simple_pull(&buf->b, len);
   20280:	210e      	movs	r1, #14
   20282:	f108 000c 	add.w	r0, r8, #12
   20286:	f7ff ff37 	bl	200f8 <net_buf_simple_pull>
	if (IS_ENABLED(CONFIG_NET_IPV4) && type == NET_ETH_PTYPE_IP &&
   2028a:	2f08      	cmp	r7, #8
   2028c:	d00d      	beq.n	202aa <ethernet_recv+0xc8>
	ethernet_update_rx_stats(iface, hdr, net_pkt_get_len(pkt) + hdr_len);
   2028e:	68a2      	ldr	r2, [r4, #8]
	switch (type) {
   20290:	4613      	mov	r3, r2
	while (buf) {
   20292:	bb4b      	cbnz	r3, 202e8 <ethernet_recv+0x106>
	if (IS_ENABLED(CONFIG_NET_ARP) &&
   20294:	2e01      	cmp	r6, #1
   20296:	d129      	bne.n	202ec <ethernet_recv+0x10a>
	    family == AF_INET && type == NET_ETH_PTYPE_ARP) {
   20298:	f5b7 6fc1 	cmp.w	r7, #1544	; 0x608
   2029c:	d126      	bne.n	202ec <ethernet_recv+0x10a>
		return net_arp_input(pkt, hdr);
   2029e:	4629      	mov	r1, r5
   202a0:	4620      	mov	r0, r4
}
   202a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_arp_input(pkt, hdr);
   202a6:	f000 b8b3 	b.w	20410 <net_arp_input>
	if (net_eth_is_addr_broadcast(&hdr->dst) &&
   202aa:	4628      	mov	r0, r5
   202ac:	f7ff ff59 	bl	20162 <net_eth_is_addr_broadcast>
	return pkt->frags->data;
   202b0:	68a3      	ldr	r3, [r4, #8]
   202b2:	2800      	cmp	r0, #0
   202b4:	d0eb      	beq.n	2028e <ethernet_recv+0xac>
   202b6:	f8d3 900c 	ldr.w	r9, [r3, #12]
	    !(net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
   202ba:	f109 0810 	add.w	r8, r9, #16
   202be:	4640      	mov	r0, r8
   202c0:	f7ff ff29 	bl	20116 <net_ipv4_is_addr_mcast>
	if (net_eth_is_addr_broadcast(&hdr->dst) &&
   202c4:	2800      	cmp	r0, #0
   202c6:	d1e2      	bne.n	2028e <ethernet_recv+0xac>
	return pkt->iface;
   202c8:	f8d4 a018 	ldr.w	sl, [r4, #24]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   202cc:	f7e8 fbb4 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   202d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   202d4:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   202d6:	429a      	cmp	r2, r3
   202d8:	d0d9      	beq.n	2028e <ethernet_recv+0xac>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   202da:	4641      	mov	r1, r8
   202dc:	4650      	mov	r0, sl
   202de:	f7e7 fe75 	bl	7fcc <net_if_ipv4_is_addr_bcast>
	    !(net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
   202e2:	2800      	cmp	r0, #0
   202e4:	d1d3      	bne.n	2028e <ethernet_recv+0xac>
   202e6:	e799      	b.n	2021c <ethernet_recv+0x3a>
		buf = buf->frags;
   202e8:	685b      	ldr	r3, [r3, #4]
   202ea:	e7d2      	b.n	20292 <ethernet_recv+0xb0>
	return pkt->family;
   202ec:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	return pkt->frags->data;
   202f0:	68d1      	ldr	r1, [r2, #12]
	if (net_pkt_family(pkt) == AF_INET) {
   202f2:	095b      	lsrs	r3, r3, #5
   202f4:	2b01      	cmp	r3, #1
   202f6:	d107      	bne.n	20308 <ethernet_recv+0x126>
   202f8:	884b      	ldrh	r3, [r1, #2]
   202fa:	ba5b      	rev16	r3, r3
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
   202fc:	b29b      	uxth	r3, r3
	if (len < NET_ETH_MINIMAL_FRAME_SIZE - sizeof(struct net_eth_hdr)) {
   202fe:	2b2d      	cmp	r3, #45	; 0x2d
   20300:	d906      	bls.n	20310 <ethernet_recv+0x12e>
	return NET_CONTINUE;
   20302:	2001      	movs	r0, #1
}
   20304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
   20308:	888b      	ldrh	r3, [r1, #4]
   2030a:	ba5b      	rev16	r3, r3
   2030c:	3328      	adds	r3, #40	; 0x28
   2030e:	e7f5      	b.n	202fc <ethernet_recv+0x11a>
			if (frag->len < len) {
   20310:	8a11      	ldrh	r1, [r2, #16]
   20312:	428b      	cmp	r3, r1
				frag->len = len;
   20314:	bf98      	it	ls
   20316:	8213      	strhls	r3, [r2, #16]
		for (frag = pkt->frags; frag; frag = frag->frags) {
   20318:	6852      	ldr	r2, [r2, #4]
				len -= frag->len;
   2031a:	bf8a      	itet	hi
   2031c:	1a5b      	subhi	r3, r3, r1
				len = 0U;
   2031e:	2300      	movls	r3, #0
				len -= frag->len;
   20320:	b29b      	uxthhi	r3, r3
		for (frag = pkt->frags; frag; frag = frag->frags) {
   20322:	2a00      	cmp	r2, #0
   20324:	d1f4      	bne.n	20310 <ethernet_recv+0x12e>
   20326:	e7ec      	b.n	20302 <ethernet_recv+0x120>

00020328 <net_eth_ipv4_mcast_to_mac_addr>:
	mac_addr->addr[0] = 0x01;
   20328:	2301      	movs	r3, #1
   2032a:	700b      	strb	r3, [r1, #0]
	mac_addr->addr[1] = 0x00;
   2032c:	2300      	movs	r3, #0
   2032e:	704b      	strb	r3, [r1, #1]
	mac_addr->addr[2] = 0x5e;
   20330:	235e      	movs	r3, #94	; 0x5e
   20332:	708b      	strb	r3, [r1, #2]
	mac_addr->addr[3] = ipv4_addr->s4_addr[1];
   20334:	7843      	ldrb	r3, [r0, #1]
   20336:	70cb      	strb	r3, [r1, #3]
	mac_addr->addr[4] = ipv4_addr->s4_addr[2];
   20338:	7882      	ldrb	r2, [r0, #2]
	mac_addr->addr[3] &= 0x7f;
   2033a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	mac_addr->addr[4] = ipv4_addr->s4_addr[2];
   2033e:	710a      	strb	r2, [r1, #4]
	mac_addr->addr[5] = ipv4_addr->s4_addr[3];
   20340:	78c2      	ldrb	r2, [r0, #3]
	mac_addr->addr[3] &= 0x7f;
   20342:	70cb      	strb	r3, [r1, #3]
	mac_addr->addr[5] = ipv4_addr->s4_addr[3];
   20344:	714a      	strb	r2, [r1, #5]
}
   20346:	4770      	bx	lr

00020348 <net_eth_ipv6_mcast_to_mac_addr>:
	mac_addr->addr[0] = mac_addr->addr[1] = 0x33;
   20348:	2333      	movs	r3, #51	; 0x33
   2034a:	704b      	strb	r3, [r1, #1]
   2034c:	700b      	strb	r3, [r1, #0]
   2034e:	68c3      	ldr	r3, [r0, #12]
   20350:	f8c1 3002 	str.w	r3, [r1, #2]
}
   20354:	4770      	bx	lr

00020356 <sys_slist_prepend>:
	return list->head;
   20356:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   20358:	600b      	str	r3, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2035a:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   2035c:	6001      	str	r1, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   2035e:	b903      	cbnz	r3, 20362 <sys_slist_prepend+0xc>
	list->tail = node;
   20360:	6041      	str	r1, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   20362:	4770      	bx	lr

00020364 <sys_slist_remove>:
	return node->next;
   20364:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20366:	b939      	cbnz	r1, 20378 <sys_slist_remove+0x14>
   20368:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   2036a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2036c:	428a      	cmp	r2, r1
   2036e:	d100      	bne.n	20372 <sys_slist_remove+0xe>
	list->tail = node;
   20370:	6043      	str	r3, [r0, #4]
	parent->next = child;
   20372:	2300      	movs	r3, #0
   20374:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20376:	4770      	bx	lr
	parent->next = child;
   20378:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2037a:	6843      	ldr	r3, [r0, #4]
   2037c:	429a      	cmp	r2, r3
	list->tail = node;
   2037e:	bf08      	it	eq
   20380:	6041      	streq	r1, [r0, #4]
}
   20382:	e7f6      	b.n	20372 <sys_slist_remove+0xe>

00020384 <k_uptime_get_32>:
{
   20384:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   20386:	f004 f89b 	bl	244c0 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   2038a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2038e:	fba0 0302 	umull	r0, r3, r0, r2
   20392:	fb02 3301 	mla	r3, r2, r1, r3
   20396:	0bc0      	lsrs	r0, r0, #15
}
   20398:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2039c:	bd08      	pop	{r3, pc}

0002039e <if_get_addr.isra.0>:
	if (!ipv4) {
   2039e:	b188      	cbz	r0, 203c4 <if_get_addr.isra.0+0x26>
		if (ipv4->unicast[i].is_used &&
   203a0:	7d83      	ldrb	r3, [r0, #22]
   203a2:	079b      	lsls	r3, r3, #30
   203a4:	d50d      	bpl.n	203c2 <if_get_addr.isra.0+0x24>
   203a6:	8803      	ldrh	r3, [r0, #0]
   203a8:	2b01      	cmp	r3, #1
   203aa:	d10a      	bne.n	203c2 <if_get_addr.isra.0+0x24>
		    ipv4->unicast[i].address.family == AF_INET &&
   203ac:	f990 3015 	ldrsb.w	r3, [r0, #21]
   203b0:	2b01      	cmp	r3, #1
   203b2:	d106      	bne.n	203c2 <if_get_addr.isra.0+0x24>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
   203b4:	b119      	cbz	r1, 203be <if_get_addr.isra.0+0x20>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   203b6:	680a      	ldr	r2, [r1, #0]
   203b8:	6843      	ldr	r3, [r0, #4]
		    (!addr ||
   203ba:	429a      	cmp	r2, r3
   203bc:	d101      	bne.n	203c2 <if_get_addr.isra.0+0x24>
			return &ipv4->unicast[i].address.in_addr;
   203be:	3004      	adds	r0, #4
   203c0:	4770      	bx	lr
		return NULL;
   203c2:	2000      	movs	r0, #0
}
   203c4:	4770      	bx	lr

000203c6 <arp_entry_find.isra.0>:
static struct arp_entry *arp_entry_find(sys_slist_t *list,
   203c6:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(list, entry, node) {
   203c8:	b900      	cbnz	r0, 203cc <arp_entry_find.isra.0+0x6>
}
   203ca:	bd30      	pop	{r4, r5, pc}
		if (entry->iface == iface &&
   203cc:	6884      	ldr	r4, [r0, #8]
   203ce:	428c      	cmp	r4, r1
   203d0:	d103      	bne.n	203da <arp_entry_find.isra.0+0x14>
   203d2:	68c5      	ldr	r5, [r0, #12]
   203d4:	6814      	ldr	r4, [r2, #0]
   203d6:	42a5      	cmp	r5, r4
   203d8:	d0f7      	beq.n	203ca <arp_entry_find.isra.0+0x4>
		if (previous) {
   203da:	b103      	cbz	r3, 203de <arp_entry_find.isra.0+0x18>
			*previous = &entry->node;
   203dc:	6018      	str	r0, [r3, #0]
	return node->next;
   203de:	6800      	ldr	r0, [r0, #0]
   203e0:	e7f2      	b.n	203c8 <arp_entry_find.isra.0+0x2>

000203e2 <arp_entry_cleanup>:
{
   203e2:	b538      	push	{r3, r4, r5, lr}
   203e4:	4604      	mov	r4, r0
	if (pending) {
   203e6:	b119      	cbz	r1, 203f0 <arp_entry_cleanup+0xe>
			pkt = k_fifo_get(&entry->pending_queue, K_FOREVER);
   203e8:	f100 0518 	add.w	r5, r0, #24
		while (!k_fifo_is_empty(&entry->pending_queue)) {
   203ec:	69a3      	ldr	r3, [r4, #24]
   203ee:	b92b      	cbnz	r3, 203fc <arp_entry_cleanup+0x1a>
	entry->iface = NULL;
   203f0:	2300      	movs	r3, #0
   203f2:	60a3      	str	r3, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
   203f4:	60e3      	str	r3, [r4, #12]
   203f6:	6123      	str	r3, [r4, #16]
   203f8:	82a3      	strh	r3, [r4, #20]
}
   203fa:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_queue_get(queue, timeout);
   203fc:	f04f 32ff 	mov.w	r2, #4294967295
   20400:	f04f 33ff 	mov.w	r3, #4294967295
   20404:	4628      	mov	r0, r5
   20406:	f7f5 fa6b 	bl	158e0 <z_impl_k_queue_get>
			net_pkt_unref(pkt);
   2040a:	f000 ffd3 	bl	213b4 <net_pkt_unref>
   2040e:	e7ed      	b.n	203ec <arp_entry_cleanup+0xa>

00020410 <net_arp_input>:
{
   20410:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20414:	6882      	ldr	r2, [r0, #8]
   20416:	460f      	mov	r7, r1
   20418:	4605      	mov	r5, r0
   2041a:	4611      	mov	r1, r2
	size_t bytes = 0;
   2041c:	2300      	movs	r3, #0
	while (buf) {
   2041e:	b949      	cbnz	r1, 20434 <net_arp_input+0x24>
   20420:	68d4      	ldr	r4, [r2, #12]
				    (net_pkt_ip_data(pkt) - (uint8_t *)eth_hdr))) {
   20422:	1be2      	subs	r2, r4, r7
	if (net_pkt_get_len(pkt) < (sizeof(struct net_arp_hdr) -
   20424:	f1c2 021c 	rsb	r2, r2, #28
   20428:	429a      	cmp	r2, r3
   2042a:	d907      	bls.n	2043c <net_arp_input+0x2c>
		return NET_DROP;
   2042c:	2002      	movs	r0, #2
}
   2042e:	b002      	add	sp, #8
   20430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes += buf->len;
   20434:	8a08      	ldrh	r0, [r1, #16]
		buf = buf->frags;
   20436:	6849      	ldr	r1, [r1, #4]
		bytes += buf->len;
   20438:	4403      	add	r3, r0
		buf = buf->frags;
   2043a:	e7f0      	b.n	2041e <net_arp_input+0xe>
	if (ntohs(arp_hdr->hwtype) != NET_ARP_HTYPE_ETH ||
   2043c:	8823      	ldrh	r3, [r4, #0]
   2043e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   20442:	d1f3      	bne.n	2042c <net_arp_input+0x1c>
   20444:	8863      	ldrh	r3, [r4, #2]
   20446:	2b08      	cmp	r3, #8
   20448:	d1f0      	bne.n	2042c <net_arp_input+0x1c>
	    ntohs(arp_hdr->protocol) != NET_ETH_PTYPE_IP ||
   2044a:	f894 8004 	ldrb.w	r8, [r4, #4]
   2044e:	f1b8 0f06 	cmp.w	r8, #6
   20452:	d1eb      	bne.n	2042c <net_arp_input+0x1c>
	    arp_hdr->hwlen != sizeof(struct net_eth_addr) ||
   20454:	7963      	ldrb	r3, [r4, #5]
   20456:	2b04      	cmp	r3, #4
   20458:	d1e8      	bne.n	2042c <net_arp_input+0x1c>
	    arp_hdr->protolen != NET_ARP_IPV4_PTYPE_SIZE ||
   2045a:	7ba3      	ldrb	r3, [r4, #14]
   2045c:	2b7f      	cmp	r3, #127	; 0x7f
   2045e:	d0e5      	beq.n	2042c <net_arp_input+0x1c>
	switch (ntohs(arp_hdr->opcode)) {
   20460:	88e3      	ldrh	r3, [r4, #6]
   20462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   20466:	d008      	beq.n	2047a <net_arp_input+0x6a>
   20468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2046c:	f000 80af 	beq.w	205ce <net_arp_input+0x1be>
	net_pkt_unref(pkt);
   20470:	4628      	mov	r0, r5
   20472:	f000 ff9f 	bl	213b4 <net_pkt_unref>
	return NET_OK;
   20476:	2000      	movs	r0, #0
   20478:	e7d9      	b.n	2042e <net_arp_input+0x1e>
   2047a:	69ab      	ldr	r3, [r5, #24]
		if (memcmp(&arp_hdr->src_hwaddr,
   2047c:	f104 0608 	add.w	r6, r4, #8
			   net_if_get_link_addr(net_pkt_iface(pkt))->addr,
   20480:	681b      	ldr	r3, [r3, #0]
		if (memcmp(&arp_hdr->src_hwaddr,
   20482:	4642      	mov	r2, r8
   20484:	4630      	mov	r0, r6
   20486:	6919      	ldr	r1, [r3, #16]
   20488:	f7f6 fee2 	bl	17250 <memcmp>
   2048c:	2800      	cmp	r0, #0
   2048e:	d0cd      	beq.n	2042c <net_arp_input+0x1c>
				   net_eth_broadcast_addr(),
   20490:	f7e7 f81a 	bl	74c8 <net_eth_broadcast_addr>
			if (memcmp(&eth_hdr->dst,
   20494:	4642      	mov	r2, r8
				   net_eth_broadcast_addr(),
   20496:	4601      	mov	r1, r0
			if (memcmp(&eth_hdr->dst,
   20498:	4638      	mov	r0, r7
   2049a:	f7f6 fed9 	bl	17250 <memcmp>
   2049e:	b9c8      	cbnz	r0, 204d4 <net_arp_input+0xc4>
				   net_eth_broadcast_addr(),
   204a0:	f7e7 f812 	bl	74c8 <net_eth_broadcast_addr>
			    memcmp(&arp_hdr->dst_hwaddr,
   204a4:	2206      	movs	r2, #6
				   net_eth_broadcast_addr(),
   204a6:	4601      	mov	r1, r0
			    memcmp(&arp_hdr->dst_hwaddr,
   204a8:	f104 0012 	add.w	r0, r4, #18
   204ac:	f7f6 fed0 	bl	17250 <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
   204b0:	b980      	cbnz	r0, 204d4 <net_arp_input+0xc4>
			    memcmp(&arp_hdr->dst_ipaddr, &arp_hdr->src_ipaddr,
   204b2:	f104 080e 	add.w	r8, r4, #14
   204b6:	2204      	movs	r2, #4
   204b8:	4641      	mov	r1, r8
   204ba:	f104 0018 	add.w	r0, r4, #24
   204be:	f7f6 fec7 	bl	17250 <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
   204c2:	b938      	cbnz	r0, 204d4 <net_arp_input+0xc4>
				arp_update(net_pkt_iface(pkt),
   204c4:	2301      	movs	r3, #1
   204c6:	4632      	mov	r2, r6
   204c8:	4641      	mov	r1, r8
   204ca:	9000      	str	r0, [sp, #0]
			arp_update(net_pkt_iface(pkt),
   204cc:	69a8      	ldr	r0, [r5, #24]
   204ce:	f7e7 f90d 	bl	76ec <arp_update>
   204d2:	e7cd      	b.n	20470 <net_arp_input+0x60>
		if (memcmp(&eth_hdr->dst, net_eth_broadcast_addr(),
   204d4:	f7e6 fff8 	bl	74c8 <net_eth_broadcast_addr>
   204d8:	2206      	movs	r2, #6
   204da:	4601      	mov	r1, r0
   204dc:	4638      	mov	r0, r7
   204de:	f7f6 feb7 	bl	17250 <memcmp>
   204e2:	b928      	cbnz	r0, 204f0 <net_arp_input+0xe0>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   204e4:	f8d4 300e 	ldr.w	r3, [r4, #14]
   204e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			   sizeof(struct net_eth_addr)) == 0 &&
   204ec:	2be0      	cmp	r3, #224	; 0xe0
   204ee:	d09d      	beq.n	2042c <net_arp_input+0x1c>
	return pkt->iface;
   204f0:	f8d5 8018 	ldr.w	r8, [r5, #24]
		addr = if_get_addr(net_pkt_iface(pkt),
   204f4:	f104 0118 	add.w	r1, r4, #24
   204f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   204fc:	f7ff ff4f 	bl	2039e <if_get_addr.isra.0>
		if (!addr) {
   20500:	2800      	cmp	r0, #0
   20502:	d093      	beq.n	2042c <net_arp_input+0x1c>
	if (addr->addr[0] == 0x00 &&
   20504:	7ca3      	ldrb	r3, [r4, #18]
   20506:	2b00      	cmp	r3, #0
   20508:	d15f      	bne.n	205ca <net_arp_input+0x1ba>
   2050a:	7ce3      	ldrb	r3, [r4, #19]
   2050c:	2b00      	cmp	r3, #0
   2050e:	d15c      	bne.n	205ca <net_arp_input+0x1ba>
	    addr->addr[1] == 0x00 &&
   20510:	7d23      	ldrb	r3, [r4, #20]
   20512:	2b00      	cmp	r3, #0
   20514:	d159      	bne.n	205ca <net_arp_input+0x1ba>
	    addr->addr[2] == 0x00 &&
   20516:	7d63      	ldrb	r3, [r4, #21]
   20518:	2b00      	cmp	r3, #0
   2051a:	d156      	bne.n	205ca <net_arp_input+0x1ba>
	    addr->addr[3] == 0x00 &&
   2051c:	7da3      	ldrb	r3, [r4, #22]
   2051e:	2b00      	cmp	r3, #0
   20520:	d153      	bne.n	205ca <net_arp_input+0x1ba>
	    addr->addr[4] == 0x00 &&
   20522:	7de3      	ldrb	r3, [r4, #23]
   20524:	2b00      	cmp	r3, #0
   20526:	d150      	bne.n	205ca <net_arp_input+0x1ba>
			arp_update(net_pkt_iface(pkt),
   20528:	2201      	movs	r2, #1
   2052a:	4640      	mov	r0, r8
   2052c:	9200      	str	r2, [sp, #0]
   2052e:	f104 010e 	add.w	r1, r4, #14
   20532:	4632      	mov	r2, r6
   20534:	f7e7 f8da 	bl	76ec <arp_update>
					AF_UNSPEC, 0, NET_BUF_TIMEOUT);
   20538:	f640 42cd 	movw	r2, #3277	; 0xccd
   2053c:	2300      	movs	r3, #0
   2053e:	69af      	ldr	r7, [r5, #24]
	pkt = net_pkt_alloc_with_buffer(iface, sizeof(struct net_arp_hdr),
   20540:	e9cd 2300 	strd	r2, r3, [sp]
   20544:	2300      	movs	r3, #0
   20546:	211c      	movs	r1, #28
   20548:	461a      	mov	r2, r3
   2054a:	4638      	mov	r0, r7
   2054c:	f7e9 f9d4 	bl	98f8 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   20550:	4604      	mov	r4, r0
   20552:	2800      	cmp	r0, #0
   20554:	d08c      	beq.n	20470 <net_arp_input+0x60>
	return net_buf_simple_add(&buf->b, len);
   20556:	6880      	ldr	r0, [r0, #8]
   20558:	211c      	movs	r1, #28
   2055a:	300c      	adds	r0, #12
   2055c:	f7ff fdc6 	bl	200ec <net_buf_simple_add>
	return pkt->frags->data;
   20560:	68aa      	ldr	r2, [r5, #8]
   20562:	68a3      	ldr	r3, [r4, #8]
   20564:	68d0      	ldr	r0, [r2, #12]
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
   20566:	2201      	movs	r2, #1
   20568:	68db      	ldr	r3, [r3, #12]
   2056a:	2100      	movs	r1, #0
   2056c:	705a      	strb	r2, [r3, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
   2056e:	2208      	movs	r2, #8
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
   20570:	7019      	strb	r1, [r3, #0]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
   20572:	709a      	strb	r2, [r3, #2]
   20574:	70d9      	strb	r1, [r3, #3]
	hdr->opcode = htons(NET_ARP_REPLY);
   20576:	7199      	strb	r1, [r3, #6]
	hdr->hwlen = sizeof(struct net_eth_addr);
   20578:	2206      	movs	r2, #6
	hdr->protolen = sizeof(struct in_addr);
   2057a:	f04f 0c04 	mov.w	ip, #4
	hdr->opcode = htons(NET_ARP_REPLY);
   2057e:	2102      	movs	r1, #2
	hdr->protolen = sizeof(struct in_addr);
   20580:	f883 c005 	strb.w	ip, [r3, #5]
	hdr->hwlen = sizeof(struct net_eth_addr);
   20584:	711a      	strb	r2, [r3, #4]
	hdr->opcode = htons(NET_ARP_REPLY);
   20586:	71d9      	strb	r1, [r3, #7]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20588:	6831      	ldr	r1, [r6, #0]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
   2058a:	f103 0c12 	add.w	ip, r3, #18
   2058e:	f8c3 1012 	str.w	r1, [r3, #18]
   20592:	88b1      	ldrh	r1, [r6, #4]
   20594:	82d9      	strh	r1, [r3, #22]
	memcpy(&hdr->src_hwaddr.addr, net_if_get_link_addr(iface)->addr,
   20596:	6839      	ldr	r1, [r7, #0]
   20598:	6909      	ldr	r1, [r1, #16]
   2059a:	680e      	ldr	r6, [r1, #0]
   2059c:	609e      	str	r6, [r3, #8]
   2059e:	8889      	ldrh	r1, [r1, #4]
   205a0:	8199      	strh	r1, [r3, #12]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
   205a2:	f8d0 100e 	ldr.w	r1, [r0, #14]
   205a6:	6199      	str	r1, [r3, #24]
   205a8:	6981      	ldr	r1, [r0, #24]
   205aa:	f8c3 100e 	str.w	r1, [r3, #14]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
   205ae:	683b      	ldr	r3, [r7, #0]
			net_if_queue_tx(net_pkt_iface(reply), reply);
   205b0:	4621      	mov	r1, r4
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
   205b2:	691b      	ldr	r3, [r3, #16]
			net_if_queue_tx(net_pkt_iface(reply), reply);
   205b4:	69a0      	ldr	r0, [r4, #24]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
   205b6:	6263      	str	r3, [r4, #36]	; 0x24
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
   205b8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&hdr->dst_hwaddr.addr;
   205bc:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
   205c0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
			net_if_queue_tx(net_pkt_iface(reply), reply);
   205c4:	f000 fa64 	bl	20a90 <net_if_queue_tx>
   205c8:	e752      	b.n	20470 <net_arp_input+0x60>
			dst_hw_addr = &eth_hdr->src;
   205ca:	1dbe      	adds	r6, r7, #6
   205cc:	e7b4      	b.n	20538 <net_arp_input+0x128>
		if (net_ipv4_is_my_addr((struct in_addr *)arp_hdr->dst_ipaddr)) {
   205ce:	f104 0618 	add.w	r6, r4, #24
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   205d2:	4630      	mov	r0, r6
   205d4:	f7e7 fd94 	bl	8100 <net_if_ipv4_addr_lookup>
	if (!ret) {
   205d8:	b130      	cbz	r0, 205e8 <net_arp_input+0x1d8>
			arp_update(net_pkt_iface(pkt),
   205da:	2300      	movs	r3, #0
   205dc:	f104 0208 	add.w	r2, r4, #8
   205e0:	9300      	str	r3, [sp, #0]
   205e2:	f104 010e 	add.w	r1, r4, #14
   205e6:	e771      	b.n	204cc <net_arp_input+0xbc>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   205e8:	f7e8 fa26 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   205ec:	69a2      	ldr	r2, [r4, #24]
   205ee:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   205f0:	429a      	cmp	r2, r3
   205f2:	d0f2      	beq.n	205da <net_arp_input+0x1ca>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   205f4:	4631      	mov	r1, r6
   205f6:	2000      	movs	r0, #0
   205f8:	f7e7 fce8 	bl	7fcc <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_my_addr((struct in_addr *)arp_hdr->dst_ipaddr)) {
   205fc:	2800      	cmp	r0, #0
   205fe:	f43f af37 	beq.w	20470 <net_arp_input+0x60>
   20602:	e7ea      	b.n	205da <net_arp_input+0x1ca>

00020604 <net_mgmt_NET_REQUEST_WIFI_CONNECT>:
{
   20604:	b430      	push	{r4, r5}
	return iface->if_dev->dev;
   20606:	680b      	ldr	r3, [r1, #0]
   20608:	6818      	ldr	r0, [r3, #0]
	struct net_wifi_mgmt_offload *off_api =
   2060a:	6883      	ldr	r3, [r0, #8]
	if (off_api == NULL || off_api->connect == NULL) {
   2060c:	b363      	cbz	r3, 20668 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x64>
   2060e:	6a1c      	ldr	r4, [r3, #32]
   20610:	b354      	cbz	r4, 20668 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x64>
	if ((params->security > WIFI_SECURITY_TYPE_MAX) ||
   20612:	7dd3      	ldrb	r3, [r2, #23]
	if (params->sae_password) {
   20614:	6915      	ldr	r5, [r2, #16]
	if ((params->security > WIFI_SECURITY_TYPE_MAX) ||
   20616:	2b07      	cmp	r3, #7
   20618:	d80c      	bhi.n	20634 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x30>
   2061a:	7911      	ldrb	r1, [r2, #4]
   2061c:	3901      	subs	r1, #1
   2061e:	291f      	cmp	r1, #31
   20620:	d808      	bhi.n	20634 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x30>
	    (params->ssid_length == 0U) ||
   20622:	1e59      	subs	r1, r3, #1
   20624:	2901      	cmp	r1, #1
   20626:	d808      	bhi.n	2063a <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x36>
	     ((params->psk_length < 8) || (params->psk_length > 64) ||
   20628:	7b13      	ldrb	r3, [r2, #12]
		  params->security == WIFI_SECURITY_TYPE_PSK_SHA256) &&
   2062a:	3b08      	subs	r3, #8
   2062c:	2b38      	cmp	r3, #56	; 0x38
   2062e:	d801      	bhi.n	20634 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x30>
	      (params->psk_length == 0U) || !params->psk)) ||
   20630:	6893      	ldr	r3, [r2, #8]
   20632:	b96b      	cbnz	r3, 20650 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4c>
		return -EINVAL;
   20634:	f06f 0015 	mvn.w	r0, #21
   20638:	e018      	b.n	2066c <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x68>
	      (params->psk_length == 0U) || !params->psk)) ||
   2063a:	2b03      	cmp	r3, #3
   2063c:	d108      	bne.n	20650 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4c>
	    ((params->security == WIFI_SECURITY_TYPE_SAE) &&
   2063e:	7b13      	ldrb	r3, [r2, #12]
   20640:	b10b      	cbz	r3, 20646 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x42>
	      ((params->psk_length == 0U) || !params->psk) &&
   20642:	6893      	ldr	r3, [r2, #8]
   20644:	b923      	cbnz	r3, 20650 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4c>
   20646:	7d13      	ldrb	r3, [r2, #20]
   20648:	2b00      	cmp	r3, #0
   2064a:	d0f3      	beq.n	20634 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x30>
		  ((params->sae_password_length == 0U) || !params->sae_password)) ||
   2064c:	2d00      	cmp	r5, #0
   2064e:	d0f1      	beq.n	20634 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x30>
	    ((params->channel != WIFI_CHANNEL_ANY) &&
   20650:	7d93      	ldrb	r3, [r2, #22]
   20652:	3316      	adds	r3, #22
		  ((params->sae_password_length == 0U) || !params->sae_password)) ||
   20654:	b2db      	uxtb	r3, r3
   20656:	2b14      	cmp	r3, #20
   20658:	d9ec      	bls.n	20634 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x30>
	     (params->channel > WIFI_CHANNEL_MAX)) ||
   2065a:	6813      	ldr	r3, [r2, #0]
   2065c:	2b00      	cmp	r3, #0
   2065e:	d0e9      	beq.n	20634 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x30>
	return off_api->connect(dev, params);
   20660:	4623      	mov	r3, r4
}
   20662:	bc30      	pop	{r4, r5}
	return off_api->connect(dev, params);
   20664:	4611      	mov	r1, r2
   20666:	4718      	bx	r3
		return -ENOTSUP;
   20668:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2066c:	bc30      	pop	{r4, r5}
   2066e:	4770      	bx	lr

00020670 <net_mgmt_NET_REQUEST_WIFI_IFACE_STATUS>:
   20670:	6809      	ldr	r1, [r1, #0]
   20672:	6808      	ldr	r0, [r1, #0]
	if (!data || len != sizeof(*status)) {
   20674:	4611      	mov	r1, r2
   20676:	b132      	cbz	r2, 20686 <net_mgmt_NET_REQUEST_WIFI_IFACE_STATUS+0x16>
   20678:	2b44      	cmp	r3, #68	; 0x44
   2067a:	d104      	bne.n	20686 <net_mgmt_NET_REQUEST_WIFI_IFACE_STATUS+0x16>
	struct net_wifi_mgmt_offload *off_api =
   2067c:	6883      	ldr	r3, [r0, #8]
	if (off_api == NULL || off_api->iface_status == NULL) {
   2067e:	b12b      	cbz	r3, 2068c <net_mgmt_NET_REQUEST_WIFI_IFACE_STATUS+0x1c>
   20680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20682:	b11b      	cbz	r3, 2068c <net_mgmt_NET_REQUEST_WIFI_IFACE_STATUS+0x1c>
	return off_api->iface_status(dev, status);
   20684:	4718      	bx	r3
		return -EINVAL;
   20686:	f06f 0015 	mvn.w	r0, #21
   2068a:	4770      	bx	lr
		return -ENOTSUP;
   2068c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   20690:	4770      	bx	lr

00020692 <processing_data>:
	NET_DBG("Unknown protocol family packet (0x%x)", family);
	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   20692:	b510      	push	{r4, lr}
	pkt->l2_processed = is_l2_processed;
   20694:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   20698:	4604      	mov	r4, r0
   2069a:	f36f 1304 	bfc	r3, #4, #1
   2069e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	if (!pkt->frags) {
   206a2:	6883      	ldr	r3, [r0, #8]
   206a4:	b16b      	cbz	r3, 206c2 <processing_data+0x30>
	if (!is_loopback && !locally_routed) {
   206a6:	b189      	cbz	r1, 206cc <processing_data+0x3a>
   206a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
	net_pkt_cursor_init(pkt);
   206ac:	4620      	mov	r0, r4
   206ae:	f043 0310 	orr.w	r3, r3, #16
   206b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   206b6:	f000 ff0e 	bl	214d6 <net_pkt_cursor_init>
	return pkt->family;
   206ba:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IP) && (family == AF_INET || family == AF_INET6 ||
   206be:	2b7f      	cmp	r3, #127	; 0x7f
   206c0:	d90d      	bls.n	206de <processing_data+0x4c>
			 * to the stack in this case.
			 */
			goto again;
		} else {
			NET_DBG("Dropping pkt %p", pkt);
			net_pkt_unref(pkt);
   206c2:	4620      	mov	r0, r4
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
		break;
	}
}
   206c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			net_pkt_unref(pkt);
   206c8:	f000 be74 	b.w	213b4 <net_pkt_unref>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   206cc:	4601      	mov	r1, r0
   206ce:	6980      	ldr	r0, [r0, #24]
   206d0:	f000 f9d5 	bl	20a7e <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   206d4:	2801      	cmp	r0, #1
   206d6:	d0e7      	beq.n	206a8 <processing_data+0x16>
	switch (process_data(pkt, is_loopback)) {
   206d8:	2800      	cmp	r0, #0
   206da:	d1f2      	bne.n	206c2 <processing_data+0x30>
}
   206dc:	bd10      	pop	{r4, pc}
	return pkt->frags->data;
   206de:	68a3      	ldr	r3, [r4, #8]
		uint8_t vtc_vhl = NET_IPV6_HDR(pkt)->vtc & 0xf0;
   206e0:	68db      	ldr	r3, [r3, #12]
   206e2:	781b      	ldrb	r3, [r3, #0]
		} else if (IS_ENABLED(CONFIG_NET_IPV4) && vtc_vhl == 0x40) {
   206e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   206e8:	2b40      	cmp	r3, #64	; 0x40
   206ea:	d1ea      	bne.n	206c2 <processing_data+0x30>
			return net_ipv4_input(pkt);
   206ec:	4620      	mov	r0, r4
   206ee:	f001 fc28 	bl	21f42 <net_ipv4_input>
   206f2:	e7f1      	b.n	206d8 <processing_data+0x46>

000206f4 <net_init>:

	return status;
}

static int net_init(void)
{
   206f4:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   206f6:	f001 f96a 	bl	219ce <net_pkt_init>

	net_context_init();
   206fa:	f7e8 ff89 	bl	9610 <net_context_init>
	net_icmpv4_init();
   206fe:	f7ea f8ef 	bl	a8e0 <net_icmpv4_init>
	net_ipv4_init();
   20702:	f001 fcdb 	bl	220bc <net_ipv4_init>
		net_conn_init();
   20706:	f7e9 fc05 	bl	9f14 <net_conn_init>
	net_tcp_init();
   2070a:	f7ec f9bd 	bl	ca88 <net_tcp_init>

	l3_init();

	net_mgmt_event_init();
   2070e:	f7e8 fae7 	bl	8ce0 <net_mgmt_event_init>
	net_if_init();
   20712:	f7e7 fef9 	bl	8508 <net_if_init>
	net_tc_rx_init();
   20716:	f7e9 f931 	bl	997c <net_tc_rx_init>
	net_if_post_init();
   2071a:	f7e7 ff89 	bl	8630 <net_if_post_init>

	init_rx_queues();

	return services_init();
}
   2071e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	status = net_dhcpv4_init();
   20722:	f7ea b867 	b.w	a7f4 <net_dhcpv4_init>

00020726 <net_send_data>:
{
   20726:	b570      	push	{r4, r5, r6, lr}
	if (!pkt || !pkt->frags) {
   20728:	4604      	mov	r4, r0
   2072a:	2800      	cmp	r0, #0
   2072c:	d060      	beq.n	207f0 <net_send_data+0xca>
   2072e:	6883      	ldr	r3, [r0, #8]
   20730:	2b00      	cmp	r3, #0
   20732:	d05d      	beq.n	207f0 <net_send_data+0xca>
	if (!net_pkt_iface(pkt)) {
   20734:	6983      	ldr	r3, [r0, #24]
   20736:	2b00      	cmp	r3, #0
   20738:	d05d      	beq.n	207f6 <net_send_data+0xd0>
	net_pkt_trim_buffer(pkt);
   2073a:	f000 fe97 	bl	2146c <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   2073e:	4620      	mov	r0, r4
   20740:	f000 fec9 	bl	214d6 <net_pkt_cursor_init>
	return pkt->family;
   20744:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   20748:	095b      	lsrs	r3, r3, #5
   2074a:	2b01      	cmp	r3, #1
   2074c:	d147      	bne.n	207de <net_send_data+0xb8>
	return pkt->frags->data;
   2074e:	68a3      	ldr	r3, [r4, #8]
   20750:	68dd      	ldr	r5, [r3, #12]
		if (net_ipv4_addr_cmp((struct in_addr *)NET_IPV4_HDR(pkt)->dst,
   20752:	f7e8 f96d 	bl	8a30 <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   20756:	692a      	ldr	r2, [r5, #16]
   20758:	6803      	ldr	r3, [r0, #0]
   2075a:	429a      	cmp	r2, r3
   2075c:	d102      	bne.n	20764 <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   2075e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
   20762:	bd70      	pop	{r4, r5, r6, pc}
   20764:	68a3      	ldr	r3, [r4, #8]
   20766:	68dd      	ldr	r5, [r3, #12]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
   20768:	7c2b      	ldrb	r3, [r5, #16]
   2076a:	2b7f      	cmp	r3, #127	; 0x7f
   2076c:	d10f      	bne.n	2078e <net_send_data+0x68>
   2076e:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
   20770:	68db      	ldr	r3, [r3, #12]
   20772:	68da      	ldr	r2, [r3, #12]
   20774:	68a3      	ldr	r3, [r4, #8]
   20776:	68db      	ldr	r3, [r3, #12]
   20778:	6919      	ldr	r1, [r3, #16]
   2077a:	60d9      	str	r1, [r3, #12]
   2077c:	68a3      	ldr	r3, [r4, #8]
   2077e:	68db      	ldr	r3, [r3, #12]
   20780:	611a      	str	r2, [r3, #16]
		processing_data(pkt, true);
   20782:	2101      	movs	r1, #1
   20784:	4620      	mov	r0, r4
   20786:	f7ff ff84 	bl	20692 <processing_data>
		return 0;
   2078a:	2000      	movs	r0, #0
   2078c:	e7e9      	b.n	20762 <net_send_data+0x3c>
	return pkt->iface;
   2078e:	69a6      	ldr	r6, [r4, #24]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   20790:	f7e8 f952 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   20794:	692a      	ldr	r2, [r5, #16]
   20796:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   20798:	429a      	cmp	r2, r3
   2079a:	d01b      	beq.n	207d4 <net_send_data+0xae>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   2079c:	f105 0110 	add.w	r1, r5, #16
   207a0:	4630      	mov	r0, r6
   207a2:	f7e7 fc13 	bl	7fcc <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
   207a6:	4601      	mov	r1, r0
   207a8:	b9a0      	cbnz	r0, 207d4 <net_send_data+0xae>
	return pkt->frags->data;
   207aa:	68a3      	ldr	r3, [r4, #8]
   207ac:	68de      	ldr	r6, [r3, #12]
		     net_ipv4_is_my_addr((struct in_addr *)NET_IPV4_HDR(pkt)->dst))) {
   207ae:	f106 0510 	add.w	r5, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   207b2:	4628      	mov	r0, r5
   207b4:	f7e7 fca4 	bl	8100 <net_if_ipv4_addr_lookup>
	if (!ret) {
   207b8:	2800      	cmp	r0, #0
   207ba:	d1d8      	bne.n	2076e <net_send_data+0x48>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   207bc:	f7e8 f93c 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   207c0:	6932      	ldr	r2, [r6, #16]
   207c2:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   207c4:	429a      	cmp	r2, r3
   207c6:	d0d2      	beq.n	2076e <net_send_data+0x48>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   207c8:	4629      	mov	r1, r5
   207ca:	2000      	movs	r0, #0
   207cc:	f7e7 fbfe 	bl	7fcc <net_if_ipv4_is_addr_bcast>
				     (struct in_addr *)NET_IPV4_HDR(pkt)->dst) == false &&
   207d0:	2800      	cmp	r0, #0
   207d2:	d1cc      	bne.n	2076e <net_send_data+0x48>
   207d4:	68a3      	ldr	r3, [r4, #8]
	return addr->s4_addr[0] == 127U;
   207d6:	68db      	ldr	r3, [r3, #12]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->src)) {
   207d8:	7b1b      	ldrb	r3, [r3, #12]
   207da:	2b7f      	cmp	r3, #127	; 0x7f
   207dc:	d0bf      	beq.n	2075e <net_send_data+0x38>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   207de:	4621      	mov	r1, r4
   207e0:	69a0      	ldr	r0, [r4, #24]
   207e2:	f7e7 fde1 	bl	83a8 <net_if_send_data>
   207e6:	2802      	cmp	r0, #2
   207e8:	d1cf      	bne.n	2078a <net_send_data+0x64>
		return -EIO;
   207ea:	f06f 0004 	mvn.w	r0, #4
   207ee:	e7b8      	b.n	20762 <net_send_data+0x3c>
		return -ENODATA;
   207f0:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   207f4:	e7b5      	b.n	20762 <net_send_data+0x3c>
		return -EINVAL;
   207f6:	f06f 0015 	mvn.w	r0, #21
   207fa:	e7b2      	b.n	20762 <net_send_data+0x3c>

000207fc <net_process_rx_packet>:
	pkt_len = net_pkt_get_len(pkt);
   207fc:	6881      	ldr	r1, [r0, #8]
	while (buf) {
   207fe:	b909      	cbnz	r1, 20804 <net_process_rx_packet+0x8>
	processing_data(pkt, is_loopback);
   20800:	f7ff bf47 	b.w	20692 <processing_data>
		buf = buf->frags;
   20804:	6849      	ldr	r1, [r1, #4]
   20806:	e7fa      	b.n	207fe <net_process_rx_packet+0x2>

00020808 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   20808:	b110      	cbz	r0, 20810 <net_if_l2+0x8>
   2080a:	6800      	ldr	r0, [r0, #0]
   2080c:	b100      	cbz	r0, 20810 <net_if_l2+0x8>
	return iface->if_dev->l2;
   2080e:	6840      	ldr	r0, [r0, #4]
}
   20810:	4770      	bx	lr

00020812 <net_context_send_cb>:
{
   20812:	b410      	push	{r4}
	if (!context) {
   20814:	b128      	cbz	r0, 20822 <net_context_send_cb+0x10>
	if (context->send_cb) {
   20816:	6b84      	ldr	r4, [r0, #56]	; 0x38
   20818:	b11c      	cbz	r4, 20822 <net_context_send_cb+0x10>
		context->send_cb(context, status, context->user_data);
   2081a:	4623      	mov	r3, r4
   2081c:	6842      	ldr	r2, [r0, #4]
}
   2081e:	bc10      	pop	{r4}
		context->send_cb(context, status, context->user_data);
   20820:	4718      	bx	r3
}
   20822:	bc10      	pop	{r4}
   20824:	4770      	bx	lr

00020826 <l2_flags_get>:
{
   20826:	b510      	push	{r4, lr}
   20828:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2082a:	f7ff ffed 	bl	20808 <net_if_l2>
   2082e:	b128      	cbz	r0, 2083c <l2_flags_get+0x16>
   20830:	68c2      	ldr	r2, [r0, #12]
   20832:	b11a      	cbz	r2, 2083c <l2_flags_get+0x16>
}
   20834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   20838:	4618      	mov	r0, r3
   2083a:	4710      	bx	r2
}
   2083c:	2000      	movs	r0, #0
   2083e:	bd10      	pop	{r4, pc}

00020840 <k_uptime_get_32>:
{
   20840:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   20842:	f003 fe3d 	bl	244c0 <z_impl_k_uptime_ticks>
   20846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2084a:	fba0 0302 	umull	r0, r3, r0, r2
   2084e:	fb02 3301 	mla	r3, r2, r1, r3
   20852:	0bc0      	lsrs	r0, r0, #15
}
   20854:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   20858:	bd08      	pop	{r3, pc}

0002085a <if_ipv4_get_addr>:
{
   2085a:	b570      	push	{r4, r5, r6, lr}
   2085c:	4604      	mov	r4, r0
   2085e:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
   20860:	f04f 30ff 	mov.w	r0, #4294967295
   20864:	f04f 31ff 	mov.w	r1, #4294967295
{
   20868:	4616      	mov	r6, r2
	k_mutex_lock(&lock, K_FOREVER);
   2086a:	f7e7 fa05 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (!iface) {
   2086e:	b10c      	cbz	r4, 20874 <if_ipv4_get_addr+0x1a>
	ipv4 = iface->config.ip.ipv4;
   20870:	68a4      	ldr	r4, [r4, #8]
	if (!ipv4) {
   20872:	b9dc      	cbnz	r4, 208ac <if_ipv4_get_addr+0x52>
	k_mutex_unlock(&lock);
   20874:	f7e7 fa08 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
   20878:	4620      	mov	r0, r4
   2087a:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv4->unicast[i].is_used ||
   2087c:	1c6a      	adds	r2, r5, #1
   2087e:	d003      	beq.n	20888 <if_ipv4_get_addr+0x2e>
		    (addr_state != NET_ADDR_ANY_STATE &&
   20880:	f994 3015 	ldrsb.w	r3, [r4, #21]
   20884:	42ab      	cmp	r3, r5
   20886:	d10f      	bne.n	208a8 <if_ipv4_get_addr+0x4e>
		     ipv4->unicast[i].addr_state != addr_state) ||
   20888:	8823      	ldrh	r3, [r4, #0]
   2088a:	2b01      	cmp	r3, #1
   2088c:	d10c      	bne.n	208a8 <if_ipv4_get_addr+0x4e>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
   2088e:	3404      	adds	r4, #4
   20890:	4620      	mov	r0, r4
   20892:	f7e7 f9e5 	bl	7c60 <net_ipv4_is_ll_addr>
   20896:	b118      	cbz	r0, 208a0 <if_ipv4_get_addr+0x46>
	struct in_addr *addr = NULL;
   20898:	2e00      	cmp	r6, #0
   2089a:	bf08      	it	eq
   2089c:	2400      	moveq	r4, #0
   2089e:	e7e9      	b.n	20874 <if_ipv4_get_addr+0x1a>
   208a0:	2e00      	cmp	r6, #0
   208a2:	bf18      	it	ne
   208a4:	2400      	movne	r4, #0
   208a6:	e7e5      	b.n	20874 <if_ipv4_get_addr+0x1a>
   208a8:	2400      	movs	r4, #0
   208aa:	e7e3      	b.n	20874 <if_ipv4_get_addr+0x1a>
		if (!ipv4->unicast[i].is_used ||
   208ac:	7da3      	ldrb	r3, [r4, #22]
   208ae:	f3c3 0240 	ubfx	r2, r3, #1, #1
   208b2:	079b      	lsls	r3, r3, #30
   208b4:	d4e2      	bmi.n	2087c <if_ipv4_get_addr+0x22>
	struct in_addr *addr = NULL;
   208b6:	4614      	mov	r4, r2
   208b8:	e7dc      	b.n	20874 <if_ipv4_get_addr+0x1a>

000208ba <net_if_flag_is_set>:
	if (iface == NULL) {
   208ba:	b130      	cbz	r0, 208ca <net_if_flag_is_set+0x10>
   208bc:	6803      	ldr	r3, [r0, #0]
   208be:	330c      	adds	r3, #12
   208c0:	e8d3 0faf 	lda	r0, [r3]
   208c4:	4108      	asrs	r0, r1
   208c6:	f000 0001 	and.w	r0, r0, #1
}
   208ca:	4770      	bx	lr

000208cc <net_if_flag_clear.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   208cc:	2301      	movs	r3, #1
   208ce:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   208d0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   208d2:	300c      	adds	r0, #12
   208d4:	e8d0 2fef 	ldaex	r2, [r0]
   208d8:	401a      	ands	r2, r3
   208da:	e8c0 2fe1 	stlex	r1, r2, [r0]
   208de:	2900      	cmp	r1, #0
   208e0:	d1f8      	bne.n	208d4 <net_if_flag_clear.isra.0+0x8>
}
   208e2:	4770      	bx	lr

000208e4 <net_if_flag_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   208e4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   208e6:	300c      	adds	r0, #12
   208e8:	408b      	lsls	r3, r1
   208ea:	e8d0 2fef 	ldaex	r2, [r0]
   208ee:	431a      	orrs	r2, r3
   208f0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   208f4:	2900      	cmp	r1, #0
   208f6:	d1f8      	bne.n	208ea <net_if_flag_set.isra.0+0x6>
}
   208f8:	4770      	bx	lr

000208fa <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   208fa:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   208fc:	b510      	push	{r4, lr}
   208fe:	fa03 f101 	lsl.w	r1, r3, r1
   20902:	300c      	adds	r0, #12
   20904:	e8d0 3fef 	ldaex	r3, [r0]
   20908:	ea43 0201 	orr.w	r2, r3, r1
   2090c:	e8c0 2fe4 	stlex	r4, r2, [r0]
   20910:	2c00      	cmp	r4, #0
   20912:	d1f7      	bne.n	20904 <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   20914:	4219      	tst	r1, r3
}
   20916:	bf14      	ite	ne
   20918:	2001      	movne	r0, #1
   2091a:	2000      	moveq	r0, #0
   2091c:	bd10      	pop	{r4, pc}

0002091e <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2091e:	2301      	movs	r3, #1
   20920:	f001 021f 	and.w	r2, r1, #31
   20924:	4093      	lsls	r3, r2
{
   20926:	b530      	push	{r4, r5, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20928:	43dc      	mvns	r4, r3
   2092a:	0949      	lsrs	r1, r1, #5
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2092c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   20930:	e8d0 2fef 	ldaex	r2, [r0]
   20934:	ea02 0104 	and.w	r1, r2, r4
   20938:	e8c0 1fe5 	stlex	r5, r1, [r0]
   2093c:	2d00      	cmp	r5, #0
   2093e:	d1f7      	bne.n	20930 <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   20940:	4213      	tst	r3, r2
}
   20942:	bf14      	ite	ne
   20944:	2001      	movne	r0, #1
   20946:	2000      	moveq	r0, #0
   20948:	bd30      	pop	{r4, r5, pc}

0002094a <net_if_set_link_addr_locked>:
{
   2094a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2094e:	4605      	mov	r5, r0
   20950:	4688      	mov	r8, r1
	k_mutex_lock(&lock, K_FOREVER);
   20952:	f04f 30ff 	mov.w	r0, #4294967295
   20956:	f04f 31ff 	mov.w	r1, #4294967295
{
   2095a:	461e      	mov	r6, r3
   2095c:	4617      	mov	r7, r2
	k_mutex_lock(&lock, K_FOREVER);
   2095e:	f7e7 f98b 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_RUNNING)) {
   20962:	2108      	movs	r1, #8
   20964:	4628      	mov	r0, r5
   20966:	f7ff ffa8 	bl	208ba <net_if_flag_is_set>
   2096a:	4604      	mov	r4, r0
   2096c:	b958      	cbnz	r0, 20986 <net_if_set_link_addr_locked+0x3c>
	return &iface->if_dev->link_addr;
   2096e:	682b      	ldr	r3, [r5, #0]
	net_if_get_link_addr(iface)->addr = addr;
   20970:	f8c3 8010 	str.w	r8, [r3, #16]
	return &iface->if_dev->link_addr;
   20974:	682b      	ldr	r3, [r5, #0]
	net_if_get_link_addr(iface)->len = len;
   20976:	751f      	strb	r7, [r3, #20]
	return &iface->if_dev->link_addr;
   20978:	682b      	ldr	r3, [r5, #0]
	net_if_get_link_addr(iface)->type = type;
   2097a:	755e      	strb	r6, [r3, #21]
	k_mutex_unlock(&lock);
   2097c:	f7e7 f984 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
   20980:	4620      	mov	r0, r4
   20982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EPERM;
   20986:	f04f 34ff 	mov.w	r4, #4294967295
   2098a:	e7f7      	b.n	2097c <net_if_set_link_addr_locked+0x32>

0002098c <net_if_ipv4_get_ttl>:
{
   2098c:	b510      	push	{r4, lr}
   2098e:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
   20990:	f04f 31ff 	mov.w	r1, #4294967295
   20994:	f04f 30ff 	mov.w	r0, #4294967295
   20998:	f7e7 f96e 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (!iface->config.ip.ipv4) {
   2099c:	68a4      	ldr	r4, [r4, #8]
   2099e:	b10c      	cbz	r4, 209a4 <net_if_ipv4_get_ttl+0x18>
	ret = iface->config.ip.ipv4->ttl;
   209a0:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
	k_mutex_unlock(&lock);
   209a4:	f7e7 f970 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
   209a8:	4620      	mov	r0, r4
   209aa:	bd10      	pop	{r4, pc}

000209ac <net_if_ipv4_addr_mask_cmp>:
{
   209ac:	b538      	push	{r3, r4, r5, lr}
   209ae:	4605      	mov	r5, r0
   209b0:	460c      	mov	r4, r1
	k_mutex_lock(&lock, K_FOREVER);
   209b2:	f04f 30ff 	mov.w	r0, #4294967295
   209b6:	f04f 31ff 	mov.w	r1, #4294967295
   209ba:	f7e7 f95d 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	ipv4 = iface->config.ip.ipv4;
   209be:	68ab      	ldr	r3, [r5, #8]
	if (!ipv4) {
   209c0:	b18b      	cbz	r3, 209e6 <net_if_ipv4_addr_mask_cmp+0x3a>
		if (!ipv4->unicast[i].is_used ||
   209c2:	7d98      	ldrb	r0, [r3, #22]
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   209c4:	6822      	ldr	r2, [r4, #0]
		if (!ipv4->unicast[i].is_used ||
   209c6:	f3c0 0440 	ubfx	r4, r0, #1, #1
   209ca:	0780      	lsls	r0, r0, #30
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
   209cc:	f04f 0100 	mov.w	r1, #0
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   209d0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
		if (!ipv4->unicast[i].is_used ||
   209d2:	d509      	bpl.n	209e8 <net_if_ipv4_addr_mask_cmp+0x3c>
   209d4:	8818      	ldrh	r0, [r3, #0]
   209d6:	2801      	cmp	r0, #1
   209d8:	d103      	bne.n	209e2 <net_if_ipv4_addr_mask_cmp+0x36>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
   209da:	685b      	ldr	r3, [r3, #4]
   209dc:	4053      	eors	r3, r2
   209de:	422b      	tst	r3, r5
   209e0:	d002      	beq.n	209e8 <net_if_ipv4_addr_mask_cmp+0x3c>
	bool ret = false;
   209e2:	460c      	mov	r4, r1
   209e4:	e000      	b.n	209e8 <net_if_ipv4_addr_mask_cmp+0x3c>
   209e6:	461c      	mov	r4, r3
	k_mutex_unlock(&lock);
   209e8:	f7e7 f94e 	bl	7c88 <k_mutex_unlock.constprop.0.isra.0>
}
   209ec:	4620      	mov	r0, r4
   209ee:	bd38      	pop	{r3, r4, r5, pc}

000209f0 <ipv4_is_broadcast_address>:
{
   209f0:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   209f2:	6885      	ldr	r5, [r0, #8]
{
   209f4:	460c      	mov	r4, r1
	if (!ipv4) {
   209f6:	b90d      	cbnz	r5, 209fc <ipv4_is_broadcast_address+0xc>
		return false;
   209f8:	2000      	movs	r0, #0
}
   209fa:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
   209fc:	f7ff ffd6 	bl	209ac <net_if_ipv4_addr_mask_cmp>
   20a00:	2800      	cmp	r0, #0
   20a02:	d0f9      	beq.n	209f8 <ipv4_is_broadcast_address+0x8>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
   20a04:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20a06:	6820      	ldr	r0, [r4, #0]
   20a08:	43da      	mvns	r2, r3
   20a0a:	ea20 0003 	bic.w	r0, r0, r3
   20a0e:	1a83      	subs	r3, r0, r2
   20a10:	4258      	negs	r0, r3
   20a12:	4158      	adcs	r0, r3
   20a14:	e7f1      	b.n	209fa <ipv4_is_broadcast_address+0xa>

00020a16 <net_if_ipv4_get_ll>:
	return if_ipv4_get_addr(iface, addr_state, true);
   20a16:	2201      	movs	r2, #1
   20a18:	f7ff bf1f 	b.w	2085a <if_ipv4_get_addr>

00020a1c <net_if_ipv4_get_global_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
   20a1c:	2200      	movs	r2, #0
   20a1e:	f7ff bf1c 	b.w	2085a <if_ipv4_get_addr>

00020a22 <net_if_ipv4_set_netmask>:
{
   20a22:	b538      	push	{r3, r4, r5, lr}
   20a24:	4604      	mov	r4, r0
   20a26:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
   20a28:	f04f 30ff 	mov.w	r0, #4294967295
   20a2c:	f04f 31ff 	mov.w	r1, #4294967295
   20a30:	f7e7 f922 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
   20a34:	2100      	movs	r1, #0
   20a36:	4620      	mov	r0, r4
   20a38:	f7e7 faa2 	bl	7f80 <net_if_config_ipv4_get>
   20a3c:	2800      	cmp	r0, #0
   20a3e:	db03      	blt.n	20a48 <net_if_ipv4_set_netmask+0x26>
	if (!iface->config.ip.ipv4) {
   20a40:	68a3      	ldr	r3, [r4, #8]
   20a42:	b10b      	cbz	r3, 20a48 <net_if_ipv4_set_netmask+0x26>
	net_ipaddr_copy(&iface->config.ip.ipv4->netmask, netmask);
   20a44:	682a      	ldr	r2, [r5, #0]
   20a46:	635a      	str	r2, [r3, #52]	; 0x34
}
   20a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
   20a4c:	f7e7 b91c 	b.w	7c88 <k_mutex_unlock.constprop.0.isra.0>

00020a50 <net_if_ipv4_set_gw>:
{
   20a50:	b538      	push	{r3, r4, r5, lr}
   20a52:	4604      	mov	r4, r0
   20a54:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
   20a56:	f04f 30ff 	mov.w	r0, #4294967295
   20a5a:	f04f 31ff 	mov.w	r1, #4294967295
   20a5e:	f7e7 f90b 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
   20a62:	2100      	movs	r1, #0
   20a64:	4620      	mov	r0, r4
   20a66:	f7e7 fa8b 	bl	7f80 <net_if_config_ipv4_get>
   20a6a:	2800      	cmp	r0, #0
   20a6c:	db03      	blt.n	20a76 <net_if_ipv4_set_gw+0x26>
	if (!iface->config.ip.ipv4) {
   20a6e:	68a3      	ldr	r3, [r4, #8]
   20a70:	b10b      	cbz	r3, 20a76 <net_if_ipv4_set_gw+0x26>
	net_ipaddr_copy(&iface->config.ip.ipv4->gw, gw);
   20a72:	682a      	ldr	r2, [r5, #0]
   20a74:	631a      	str	r2, [r3, #48]	; 0x30
}
   20a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
   20a7a:	f7e7 b905 	b.w	7c88 <k_mutex_unlock.constprop.0.isra.0>

00020a7e <net_if_recv_data>:
{
   20a7e:	b510      	push	{r4, lr}
   20a80:	4603      	mov	r3, r0
	return net_if_l2(iface)->recv(iface, pkt);
   20a82:	f7ff fec1 	bl	20808 <net_if_l2>
}
   20a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
   20a8a:	6802      	ldr	r2, [r0, #0]
   20a8c:	4618      	mov	r0, r3
   20a8e:	4710      	bx	r2

00020a90 <net_if_queue_tx>:
{
   20a90:	b510      	push	{r4, lr}
   20a92:	460c      	mov	r4, r1
	uint8_t tc = net_tx_priority2tc(prio);
   20a94:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
   20a98:	f000 ffa8 	bl	219ec <net_tx_priority2tc>
		net_if_tx(net_pkt_iface(pkt), pkt);
   20a9c:	4621      	mov	r1, r4
   20a9e:	69a0      	ldr	r0, [r4, #24]
}
   20aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_if_tx(net_pkt_iface(pkt), pkt);
   20aa4:	f7e7 bc1a 	b.w	82dc <net_if_tx.isra.0>

00020aa8 <net_if_need_calc_tx_checksum>:
	return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
   20aa8:	2101      	movs	r1, #1
   20aaa:	f7e7 b973 	b.w	7d94 <need_calc_checksum>

00020aae <net_if_need_calc_rx_checksum>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
   20aae:	2102      	movs	r1, #2
   20ab0:	f7e7 b970 	b.w	7d94 <need_calc_checksum>

00020ab4 <net_if_carrier_on>:
{
   20ab4:	b510      	push	{r4, lr}
   20ab6:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
   20ab8:	f04f 31ff 	mov.w	r1, #4294967295
   20abc:	f04f 30ff 	mov.w	r0, #4294967295
   20ac0:	f7e7 f8da 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	if (!net_if_flag_test_and_set(iface, NET_IF_LOWER_UP)) {
   20ac4:	2109      	movs	r1, #9
   20ac6:	6820      	ldr	r0, [r4, #0]
   20ac8:	f7ff ff17 	bl	208fa <net_if_flag_test_and_set.isra.0>
   20acc:	b910      	cbnz	r0, 20ad4 <net_if_carrier_on+0x20>
		update_operational_state(iface);
   20ace:	4620      	mov	r0, r4
   20ad0:	f7e7 f9c8 	bl	7e64 <update_operational_state>
}
   20ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&lock);
   20ad8:	f7e7 b8d6 	b.w	7c88 <k_mutex_unlock.constprop.0.isra.0>

00020adc <net_if_carrier_off>:
{
   20adc:	b510      	push	{r4, lr}
   20ade:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
   20ae0:	f04f 31ff 	mov.w	r1, #4294967295
   20ae4:	f04f 30ff 	mov.w	r0, #4294967295
   20ae8:	f7e7 f8c6 	bl	7c78 <k_mutex_lock.constprop.0.isra.0>
	return atomic_test_and_clear_bit(iface->if_dev->flags, value);
   20aec:	6820      	ldr	r0, [r4, #0]
   20aee:	2109      	movs	r1, #9
   20af0:	300c      	adds	r0, #12
   20af2:	f7ff ff14 	bl	2091e <atomic_test_and_clear_bit>
	if (net_if_flag_test_and_clear(iface, NET_IF_LOWER_UP)) {
   20af6:	b110      	cbz	r0, 20afe <net_if_carrier_off+0x22>
		update_operational_state(iface);
   20af8:	4620      	mov	r0, r4
   20afa:	f7e7 f9b3 	bl	7e64 <update_operational_state>
}
   20afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&lock);
   20b02:	f7e7 b8c1 	b.w	7c88 <k_mutex_unlock.constprop.0.isra.0>

00020b06 <net_byte_to_hex>:
{
   20b06:	b510      	push	{r4, lr}
   20b08:	4604      	mov	r4, r0
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   20b0a:	0908      	lsrs	r0, r1, #4
		if (i == 0 && !pad && !val) {
   20b0c:	b1b3      	cbz	r3, 20b3c <net_byte_to_hex+0x36>
		if (val < 10) {
   20b0e:	2809      	cmp	r0, #9
   20b10:	d912      	bls.n	20b38 <net_byte_to_hex+0x32>
			*ptr++ = (char) (val - 10 + base);
   20b12:	f1a2 030a 	sub.w	r3, r2, #10
   20b16:	4418      	add	r0, r3
   20b18:	b2c0      	uxtb	r0, r0
   20b1a:	f804 0b01 	strb.w	r0, [r4], #1
	*ptr = '\0';
   20b1e:	2300      	movs	r3, #0
   20b20:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   20b24:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   20b26:	bf83      	ittte	hi
   20b28:	3a0a      	subhi	r2, #10
   20b2a:	1889      	addhi	r1, r1, r2
   20b2c:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   20b2e:	3130      	addls	r1, #48	; 0x30
   20b30:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   20b32:	7063      	strb	r3, [r4, #1]
			*ptr++ = (char) (val - 10 + base);
   20b34:	1c60      	adds	r0, r4, #1
}
   20b36:	bd10      	pop	{r4, pc}
			*ptr++ = (char) (val + '0');
   20b38:	3030      	adds	r0, #48	; 0x30
   20b3a:	e7ee      	b.n	20b1a <net_byte_to_hex+0x14>
		if (i == 0 && !pad && !val) {
   20b3c:	2800      	cmp	r0, #0
   20b3e:	d1e6      	bne.n	20b0e <net_byte_to_hex+0x8>
   20b40:	e7ed      	b.n	20b1e <net_byte_to_hex+0x18>

00020b42 <calc_chksum>:
{
   20b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (odd_start == CHECKSUM_BIG_ENDIAN) {
   20b46:	f011 0601 	ands.w	r6, r1, #1
   20b4a:	d14b      	bne.n	20be4 <calc_chksum+0xa2>
		sum = __bswap_16(sum_in);
   20b4c:	4633      	mov	r3, r6
   20b4e:	ba40      	rev16	r0, r0
   20b50:	b280      	uxth	r0, r0
	if ((((uintptr_t)data & 0x02) != 0) && (pending >= sizeof(uint16_t))) {
   20b52:	078c      	lsls	r4, r1, #30
   20b54:	d508      	bpl.n	20b68 <calc_chksum+0x26>
   20b56:	2a01      	cmp	r2, #1
   20b58:	d906      	bls.n	20b68 <calc_chksum+0x26>
		sum = sum + *((uint16_t *)data);
   20b5a:	f831 4b02 	ldrh.w	r4, [r1], #2
		pending -= sizeof(uint16_t);
   20b5e:	3a02      	subs	r2, #2
		sum = sum + *((uint16_t *)data);
   20b60:	1824      	adds	r4, r4, r0
   20b62:	4620      	mov	r0, r4
   20b64:	f143 0300 	adc.w	r3, r3, #0
	while (pending >= sizeof(uint32_t) * 4) {
   20b68:	460d      	mov	r5, r1
   20b6a:	4694      	mov	ip, r2
		uint64_t sum_a = p[i];
   20b6c:	f04f 0e00 	mov.w	lr, #0
	while (pending >= sizeof(uint32_t) * 4) {
   20b70:	f1bc 0f0f 	cmp.w	ip, #15
   20b74:	f105 0510 	add.w	r5, r5, #16
   20b78:	d840      	bhi.n	20bfc <calc_chksum+0xba>
   20b7a:	f06f 050f 	mvn.w	r5, #15
   20b7e:	0914      	lsrs	r4, r2, #4
   20b80:	fb05 2204 	mla	r2, r5, r4, r2
   20b84:	4617      	mov	r7, r2
   20b86:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   20b8a:	eb01 1404 	add.w	r4, r1, r4, lsl #4
	while (pending >= sizeof(uint32_t)) {
   20b8e:	2f03      	cmp	r7, #3
   20b90:	d84a      	bhi.n	20c28 <calc_chksum+0xe6>
   20b92:	f06f 0503 	mvn.w	r5, #3
   20b96:	0894      	lsrs	r4, r2, #2
   20b98:	fb05 2404 	mla	r4, r5, r4, r2
		sum = sum + p[i++];
   20b9c:	402a      	ands	r2, r5
   20b9e:	4462      	add	r2, ip
	if (pending >= 2) {
   20ba0:	2c01      	cmp	r4, #1
		sum = sum + p[i++];
   20ba2:	eb01 0502 	add.w	r5, r1, r2
	if (pending >= 2) {
   20ba6:	d906      	bls.n	20bb6 <calc_chksum+0x74>
		sum = sum + *((uint16_t *)data);
   20ba8:	5a8a      	ldrh	r2, [r1, r2]
		pending -= sizeof(uint16_t);
   20baa:	3c02      	subs	r4, #2
		sum = sum + *((uint16_t *)data);
   20bac:	1812      	adds	r2, r2, r0
   20bae:	4610      	mov	r0, r2
   20bb0:	f143 0300 	adc.w	r3, r3, #0
		data += sizeof(uint16_t);
   20bb4:	3502      	adds	r5, #2
	if (pending == 1) {
   20bb6:	2c01      	cmp	r4, #1
   20bb8:	d107      	bne.n	20bca <calc_chksum+0x88>
	uint16_t data16 = (uint16_t)*data;
   20bba:	782a      	ldrb	r2, [r5, #0]
	if (((uintptr_t)(data) & 1) == CHECKSUM_BIG_ENDIAN) {
   20bbc:	07e9      	lsls	r1, r5, #31
		return data16 << 8;
   20bbe:	bf48      	it	mi
   20bc0:	0212      	lslmi	r2, r2, #8
		sum += offset_based_swap8(data);
   20bc2:	1812      	adds	r2, r2, r0
   20bc4:	4610      	mov	r0, r2
   20bc6:	f143 0300 	adc.w	r3, r3, #0
	while (sum >> 16) {
   20bca:	0c02      	lsrs	r2, r0, #16
   20bcc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   20bd0:	0c19      	lsrs	r1, r3, #16
   20bd2:	ea52 4313 	orrs.w	r3, r2, r3, lsr #16
		sum = (sum & 0xffff) + (sum >> 16);
   20bd6:	b280      	uxth	r0, r0
	while (sum >> 16) {
   20bd8:	d12e      	bne.n	20c38 <calc_chksum+0xf6>
	if (odd_start == CHECKSUM_BIG_ENDIAN) {
   20bda:	b90e      	cbnz	r6, 20be0 <calc_chksum+0x9e>
		return __bswap_16((uint16_t)sum);
   20bdc:	ba40      	rev16	r0, r0
   20bde:	b280      	uxth	r0, r0
}
   20be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sum = sum_in;
   20be4:	2300      	movs	r3, #0
	if ((((uintptr_t)data & 0x01) != 0) && (pending >= 1)) {
   20be6:	2a00      	cmp	r2, #0
   20be8:	d0be      	beq.n	20b68 <calc_chksum+0x26>
	uint16_t data16 = (uint16_t)*data;
   20bea:	f811 4b01 	ldrb.w	r4, [r1], #1
		pending--;
   20bee:	3a01      	subs	r2, #1
		sum += offset_based_swap8(data);
   20bf0:	0224      	lsls	r4, r4, #8
   20bf2:	1824      	adds	r4, r4, r0
   20bf4:	4620      	mov	r0, r4
   20bf6:	f143 0300 	adc.w	r3, r3, #0
		pending--;
   20bfa:	e7aa      	b.n	20b52 <calc_chksum+0x10>
		uint64_t sum_b = p[i + 1];
   20bfc:	e955 4704 	ldrd	r4, r7, [r5, #-16]
		sum += sum_a + sum_b;
   20c00:	19e4      	adds	r4, r4, r7
		sum_a += p[i + 2];
   20c02:	f855 7c08 	ldr.w	r7, [r5, #-8]
		sum += sum_a + sum_b;
   20c06:	eb4e 080e 	adc.w	r8, lr, lr
   20c0a:	19e4      	adds	r4, r4, r7
		sum_b += p[i + 3];
   20c0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
		sum += sum_a + sum_b;
   20c10:	f148 0800 	adc.w	r8, r8, #0
   20c14:	19e4      	adds	r4, r4, r7
   20c16:	f148 0700 	adc.w	r7, r8, #0
   20c1a:	1824      	adds	r4, r4, r0
   20c1c:	4620      	mov	r0, r4
		pending -= sizeof(uint32_t) * 4;
   20c1e:	f1ac 0c10 	sub.w	ip, ip, #16
		sum += sum_a + sum_b;
   20c22:	eb43 0307 	adc.w	r3, r3, r7
   20c26:	e7a3      	b.n	20b70 <calc_chksum+0x2e>
		sum = sum + p[i++];
   20c28:	f854 5b04 	ldr.w	r5, [r4], #4
		pending -= sizeof(uint32_t);
   20c2c:	3f04      	subs	r7, #4
		sum = sum + p[i++];
   20c2e:	182d      	adds	r5, r5, r0
   20c30:	4628      	mov	r0, r5
   20c32:	f143 0300 	adc.w	r3, r3, #0
   20c36:	e7aa      	b.n	20b8e <calc_chksum+0x4c>
		sum = (sum & 0xffff) + (sum >> 16);
   20c38:	1880      	adds	r0, r0, r2
   20c3a:	f141 0300 	adc.w	r3, r1, #0
   20c3e:	e7c4      	b.n	20bca <calc_chksum+0x88>

00020c40 <net_calc_chksum>:
{
   20c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return pkt->family;
   20c44:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   20c48:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   20c4a:	095b      	lsrs	r3, r3, #5
   20c4c:	2b01      	cmp	r3, #1
   20c4e:	d17c      	bne.n	20d4a <net_calc_chksum+0x10a>
		if (proto != IPPROTO_ICMP) {
   20c50:	2901      	cmp	r1, #1
   20c52:	d050      	beq.n	20cf6 <net_calc_chksum+0xb6>
	size_t bytes = 0;
   20c54:	2200      	movs	r2, #0
   20c56:	6883      	ldr	r3, [r0, #8]
	while (buf) {
   20c58:	2b00      	cmp	r3, #0
   20c5a:	d148      	bne.n	20cee <net_calc_chksum+0xae>
			len = 2 * sizeof(struct in_addr);
   20c5c:	f04f 0908 	mov.w	r9, #8
				net_pkt_ip_hdr_len(pkt) -
   20c60:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
				net_pkt_ipv4_opts_len(pkt) + proto;
   20c64:	f895 003a 	ldrb.w	r0, [r5, #58]	; 0x3a
			sum = net_pkt_get_len(pkt) -
   20c68:	4403      	add	r3, r0
   20c6a:	1acc      	subs	r4, r1, r3
   20c6c:	4414      	add	r4, r2
   20c6e:	b2a4      	uxth	r4, r4
	net_pkt_cursor_init(pkt);
   20c70:	4628      	mov	r0, r5
	backup->pos = pkt->cursor.pos;
   20c72:	e9d5 8703 	ldrd	r8, r7, [r5, #12]
   20c76:	f000 fc2e 	bl	214d6 <net_pkt_cursor_init>
	return pkt->overwrite;
   20c7a:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   20c7e:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
   20c82:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   20c86:	f043 0301 	orr.w	r3, r3, #1
   20c8a:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
   20c8e:	eba1 0109 	sub.w	r1, r1, r9
   20c92:	4628      	mov	r0, r5
   20c94:	f000 fc89 	bl	215aa <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   20c98:	464a      	mov	r2, r9
   20c9a:	6929      	ldr	r1, [r5, #16]
   20c9c:	4620      	mov	r0, r4
   20c9e:	f7ff ff50 	bl	20b42 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   20ca2:	f895 103a 	ldrb.w	r1, [r5, #58]	; 0x3a
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   20ca6:	4604      	mov	r4, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   20ca8:	4449      	add	r1, r9
   20caa:	4628      	mov	r0, r5
   20cac:	f000 fc7d 	bl	215aa <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   20cb0:	68ea      	ldr	r2, [r5, #12]
   20cb2:	b162      	cbz	r2, 20cce <net_calc_chksum+0x8e>
   20cb4:	692b      	ldr	r3, [r5, #16]
   20cb6:	b153      	cbz	r3, 20cce <net_calc_chksum+0x8e>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   20cb8:	f8b2 9010 	ldrh.w	r9, [r2, #16]
   20cbc:	68d2      	ldr	r2, [r2, #12]
   20cbe:	1a9b      	subs	r3, r3, r2
   20cc0:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   20cc4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   20cc8:	f1ba 0f00 	cmp.w	sl, #0
   20ccc:	d116      	bne.n	20cfc <net_calc_chksum+0xbc>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   20cce:	2c00      	cmp	r4, #0
   20cd0:	d038      	beq.n	20d44 <net_calc_chksum+0x104>
   20cd2:	ba64      	rev16	r4, r4
   20cd4:	b2a4      	uxth	r4, r4
	return ~sum;
   20cd6:	43e0      	mvns	r0, r4
   20cd8:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	pkt->cursor.pos = backup->pos;
   20cdc:	e9c5 8703 	strd	r8, r7, [r5, #12]
	pkt->overwrite = overwrite;
   20ce0:	f366 0300 	bfi	r3, r6, #0, #1
   20ce4:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
   20ce8:	b280      	uxth	r0, r0
}
   20cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   20cee:	8a18      	ldrh	r0, [r3, #16]
		buf = buf->frags;
   20cf0:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   20cf2:	4402      	add	r2, r0
		buf = buf->frags;
   20cf4:	e7b0      	b.n	20c58 <net_calc_chksum+0x18>
	uint16_t sum = 0U;
   20cf6:	2400      	movs	r4, #0
	size_t len = 0U;
   20cf8:	46a1      	mov	r9, r4
   20cfa:	e7b9      	b.n	20c70 <net_calc_chksum+0x30>
		sum = calc_chksum(sum, cur->pos, len);
   20cfc:	4620      	mov	r0, r4
   20cfe:	464a      	mov	r2, r9
   20d00:	6929      	ldr	r1, [r5, #16]
   20d02:	f7ff ff1e 	bl	20b42 <calc_chksum>
		cur->buf = cur->buf->frags;
   20d06:	f8da 3004 	ldr.w	r3, [sl, #4]
		sum = calc_chksum(sum, cur->pos, len);
   20d0a:	4604      	mov	r4, r0
		cur->buf = cur->buf->frags;
   20d0c:	60eb      	str	r3, [r5, #12]
		if (!cur->buf || !cur->buf->len) {
   20d0e:	2b00      	cmp	r3, #0
   20d10:	d0dd      	beq.n	20cce <net_calc_chksum+0x8e>
   20d12:	8a1a      	ldrh	r2, [r3, #16]
   20d14:	2a00      	cmp	r2, #0
   20d16:	d0da      	beq.n	20cce <net_calc_chksum+0x8e>
		cur->pos = cur->buf->data;
   20d18:	68da      	ldr	r2, [r3, #12]
		if (len % 2) {
   20d1a:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
   20d1e:	612a      	str	r2, [r5, #16]
		if (len % 2) {
   20d20:	d00d      	beq.n	20d3e <net_calc_chksum+0xfe>
			sum += *cur->pos;
   20d22:	7811      	ldrb	r1, [r2, #0]
			cur->pos++;
   20d24:	3201      	adds	r2, #1
			sum += *cur->pos;
   20d26:	440c      	add	r4, r1
   20d28:	b2a4      	uxth	r4, r4
			cur->pos++;
   20d2a:	612a      	str	r2, [r5, #16]
			if (sum < *cur->pos) {
   20d2c:	42a1      	cmp	r1, r4
			len = cur->buf->len - 1;
   20d2e:	f8b3 9010 	ldrh.w	r9, [r3, #16]
				sum++;
   20d32:	bf84      	itt	hi
   20d34:	3401      	addhi	r4, #1
   20d36:	b2a4      	uxthhi	r4, r4
			len = cur->buf->len - 1;
   20d38:	f109 39ff 	add.w	r9, r9, #4294967295
   20d3c:	e7c2      	b.n	20cc4 <net_calc_chksum+0x84>
			len = cur->buf->len;
   20d3e:	f8b3 9010 	ldrh.w	r9, [r3, #16]
   20d42:	e7bf      	b.n	20cc4 <net_calc_chksum+0x84>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   20d44:	f64f 74ff 	movw	r4, #65535	; 0xffff
   20d48:	e7c5      	b.n	20cd6 <net_calc_chksum+0x96>
		return 0;
   20d4a:	2000      	movs	r0, #0
   20d4c:	e7cd      	b.n	20cea <net_calc_chksum+0xaa>

00020d4e <net_calc_chksum_ipv4>:
{
   20d4e:	b508      	push	{r3, lr}
			  net_pkt_ip_hdr_len(pkt) +
   20d50:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
			  net_pkt_ipv4_opts_len(pkt));
   20d54:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
	sum = calc_chksum(0, pkt->buffer->data,
   20d58:	6883      	ldr	r3, [r0, #8]
   20d5a:	440a      	add	r2, r1
   20d5c:	2000      	movs	r0, #0
   20d5e:	68d9      	ldr	r1, [r3, #12]
   20d60:	f7ff feef 	bl	20b42 <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   20d64:	b120      	cbz	r0, 20d70 <net_calc_chksum_ipv4+0x22>
   20d66:	ba40      	rev16	r0, r0
   20d68:	b280      	uxth	r0, r0
	return ~sum;
   20d6a:	43c0      	mvns	r0, r0
}
   20d6c:	b280      	uxth	r0, r0
   20d6e:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
   20d70:	f64f 70ff 	movw	r0, #65535	; 0xffff
   20d74:	e7f9      	b.n	20d6a <net_calc_chksum_ipv4+0x1c>

00020d76 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   20d76:	f7f4 bd77 	b.w	15868 <z_impl_k_mutex_unlock>

00020d7a <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   20d7a:	6800      	ldr	r0, [r0, #0]
   20d7c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
   20d80:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   20d84:	4258      	negs	r0, r3
   20d86:	4158      	adcs	r0, r3
   20d88:	4770      	bx	lr

00020d8a <context_write_data>:
{
   20d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d8e:	4607      	mov	r7, r0
   20d90:	4615      	mov	r5, r2
	if (msghdr) {
   20d92:	461e      	mov	r6, r3
   20d94:	b9db      	cbnz	r3, 20dce <context_write_data+0x44>
}
   20d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ret = net_pkt_write(pkt, buf, buf_len);
   20d9a:	f000 bdf9 	b.w	21990 <net_pkt_write>
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
   20d9e:	68b3      	ldr	r3, [r6, #8]
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   20da0:	4638      	mov	r0, r7
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
   20da2:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   20da6:	6852      	ldr	r2, [r2, #4]
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   20da8:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
   20dac:	42aa      	cmp	r2, r5
   20dae:	bf28      	it	cs
   20db0:	462a      	movcs	r2, r5
   20db2:	4690      	mov	r8, r2
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   20db4:	f000 fdec 	bl	21990 <net_pkt_write>
			if (ret < 0) {
   20db8:	2800      	cmp	r0, #0
   20dba:	db06      	blt.n	20dca <context_write_data+0x40>
			if (buf_len == 0) {
   20dbc:	ebb5 0508 	subs.w	r5, r5, r8
   20dc0:	d003      	beq.n	20dca <context_write_data+0x40>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   20dc2:	3401      	adds	r4, #1
   20dc4:	68f3      	ldr	r3, [r6, #12]
   20dc6:	42a3      	cmp	r3, r4
   20dc8:	d8e9      	bhi.n	20d9e <context_write_data+0x14>
}
   20dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   20dce:	2400      	movs	r4, #0
	int ret = 0;
   20dd0:	4620      	mov	r0, r4
   20dd2:	e7f7      	b.n	20dc4 <context_write_data+0x3a>

00020dd4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   20dd4:	f7f4 bcce 	b.w	15774 <z_impl_k_mutex_lock>

00020dd8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   20dd8:	f7f4 bd46 	b.w	15868 <z_impl_k_mutex_unlock>

00020ddc <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20ddc:	f100 0308 	add.w	r3, r0, #8
}
   20de0:	e8d3 0fef 	ldaex	r0, [r3]
   20de4:	3001      	adds	r0, #1
   20de6:	e8c3 0fe2 	stlex	r2, r0, [r3]
   20dea:	2a00      	cmp	r2, #0
   20dec:	d1f8      	bne.n	20de0 <net_context_ref+0x4>
   20dee:	4770      	bx	lr

00020df0 <net_context_unref>:
{
   20df0:	b538      	push	{r3, r4, r5, lr}
   20df2:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20df4:	f100 0308 	add.w	r3, r0, #8
   20df8:	e8d3 0fef 	ldaex	r0, [r3]
   20dfc:	1e42      	subs	r2, r0, #1
   20dfe:	e8c3 2fe1 	stlex	r1, r2, [r3]
   20e02:	2900      	cmp	r1, #0
   20e04:	d1f8      	bne.n	20df8 <net_context_unref+0x8>
	if (old_rc != 1) {
   20e06:	2801      	cmp	r0, #1
   20e08:	d001      	beq.n	20e0e <net_context_unref+0x1e>
		return old_rc - 1;
   20e0a:	3801      	subs	r0, #1
}
   20e0c:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   20e0e:	f104 050c 	add.w	r5, r4, #12
   20e12:	4628      	mov	r0, r5
   20e14:	f04f 32ff 	mov.w	r2, #4294967295
   20e18:	f04f 33ff 	mov.w	r3, #4294967295
   20e1c:	f7ff ffda 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	if (context->conn_handler) {
   20e20:	6b20      	ldr	r0, [r4, #48]	; 0x30
   20e22:	b118      	cbz	r0, 20e2c <net_context_unref+0x3c>
			net_conn_unregister(context->conn_handler);
   20e24:	f7e8 ff2c 	bl	9c80 <net_conn_unregister>
		context->conn_handler = NULL;
   20e28:	2300      	movs	r3, #0
   20e2a:	6323      	str	r3, [r4, #48]	; 0x30
	context->flags &= ~NET_CONTEXT_IN_USE;
   20e2c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	k_mutex_unlock(&context->lock);
   20e30:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
   20e32:	f023 0307 	bic.w	r3, r3, #7
   20e36:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
	k_mutex_unlock(&context->lock);
   20e3a:	f7ff ffcd 	bl	20dd8 <k_mutex_unlock.isra.0>
	return 0;
   20e3e:	2000      	movs	r0, #0
   20e40:	e7e4      	b.n	20e0c <net_context_unref+0x1c>

00020e42 <bind_default>:
{
   20e42:	b513      	push	{r0, r1, r4, lr}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   20e44:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
   20e48:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   20e4a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   20e4e:	2b01      	cmp	r3, #1
   20e50:	d112      	bne.n	20e78 <bind_default+0x36>
		if (net_sin_ptr(&context->local)->sin_addr) {
   20e52:	6a42      	ldr	r2, [r0, #36]	; 0x24
   20e54:	b972      	cbnz	r2, 20e74 <bind_default+0x32>
			find_available_port(context,
   20e56:	4669      	mov	r1, sp
		addr4.sin_addr.s_addr = INADDR_ANY;
   20e58:	9201      	str	r2, [sp, #4]
		addr4.sin_family = AF_INET;
   20e5a:	f8ad 3000 	strh.w	r3, [sp]
			find_available_port(context,
   20e5e:	f7e7 ff89 	bl	8d74 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr4,
   20e62:	2208      	movs	r2, #8
		addr4.sin_port =
   20e64:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
   20e68:	4669      	mov	r1, sp
   20e6a:	4620      	mov	r0, r4
   20e6c:	f7e8 f8d0 	bl	9010 <net_context_bind>
}
   20e70:	b002      	add	sp, #8
   20e72:	bd10      	pop	{r4, pc}
			return 0;
   20e74:	2000      	movs	r0, #0
   20e76:	e7fb      	b.n	20e70 <bind_default+0x2e>
	return -EINVAL;
   20e78:	f06f 0015 	mvn.w	r0, #21
   20e7c:	e7f8      	b.n	20e70 <bind_default+0x2e>

00020e7e <net_context_listen>:
{
   20e7e:	b538      	push	{r3, r4, r5, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   20e80:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
   20e84:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   20e86:	07db      	lsls	r3, r3, #31
   20e88:	d517      	bpl.n	20eba <net_context_listen+0x3c>
	k_mutex_lock(&context->lock, K_FOREVER);
   20e8a:	f100 050c 	add.w	r5, r0, #12
   20e8e:	f04f 32ff 	mov.w	r2, #4294967295
   20e92:	f04f 33ff 	mov.w	r3, #4294967295
   20e96:	4628      	mov	r0, r5
   20e98:	f7ff ff9c 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	if (net_tcp_listen(context) >= 0) {
   20e9c:	4620      	mov	r0, r4
   20e9e:	f001 fa08 	bl	222b2 <net_tcp_listen>
   20ea2:	2800      	cmp	r0, #0
		k_mutex_unlock(&context->lock);
   20ea4:	4628      	mov	r0, r5
	if (net_tcp_listen(context) >= 0) {
   20ea6:	db03      	blt.n	20eb0 <net_context_listen+0x32>
		k_mutex_unlock(&context->lock);
   20ea8:	f7ff ff96 	bl	20dd8 <k_mutex_unlock.isra.0>
		return 0;
   20eac:	2000      	movs	r0, #0
}
   20eae:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_unlock(&context->lock);
   20eb0:	f7ff ff92 	bl	20dd8 <k_mutex_unlock.isra.0>
	return -EOPNOTSUPP;
   20eb4:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   20eb8:	e7f9      	b.n	20eae <net_context_listen+0x30>
		return -EBADF;
   20eba:	f06f 0008 	mvn.w	r0, #8
   20ebe:	e7f6      	b.n	20eae <net_context_listen+0x30>

00020ec0 <net_context_create_ipv4_new>:
{
   20ec0:	b570      	push	{r4, r5, r6, lr}
   20ec2:	460c      	mov	r4, r1
   20ec4:	4605      	mov	r5, r0
   20ec6:	461e      	mov	r6, r3
	if (!src) {
   20ec8:	4611      	mov	r1, r2
   20eca:	b902      	cbnz	r2, 20ece <net_context_create_ipv4_new+0xe>
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
   20ecc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return UNALIGNED_GET(&addr->s_addr) == 0;
   20ece:	680b      	ldr	r3, [r1, #0]
	if (net_ipv4_is_addr_unspecified(src)
   20ed0:	b11b      	cbz	r3, 20eda <net_context_create_ipv4_new+0x1a>
	    || net_ipv4_is_addr_mcast(src)) {
   20ed2:	4608      	mov	r0, r1
   20ed4:	f7ff ff51 	bl	20d7a <net_ipv4_is_addr_mcast>
   20ed8:	b130      	cbz	r0, 20ee8 <net_context_create_ipv4_new+0x28>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   20eda:	4631      	mov	r1, r6
   20edc:	69a0      	ldr	r0, [r4, #24]
   20ede:	f7e7 f8bb 	bl	8058 <net_if_ipv4_select_src_addr>
   20ee2:	6803      	ldr	r3, [r0, #0]
   20ee4:	4601      	mov	r1, r0
		if (net_ipv4_is_addr_unspecified(src)) {
   20ee6:	b1eb      	cbz	r3, 20f24 <net_context_create_ipv4_new+0x64>
}

static inline uint8_t net_context_get_ipv4_ttl(struct net_context *context)
{
	return context->ipv4_ttl;
   20ee8:	f895 3093 	ldrb.w	r3, [r5, #147]	; 0x93
	pkt->ip_dscp = dscp;
   20eec:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
	pkt->ipv4_ttl = ttl;
   20ef0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 *
 * @return Decoded DSCP value.
 */
static inline uint8_t net_ipv4_get_dscp(uint8_t tos)
{
	return (tos & NET_IPV4_DSCP_MASK) >> NET_IPV4_DSCP_OFFSET;
   20ef4:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
	return net_ipv4_create(pkt, src, dst);
   20ef8:	4632      	mov	r2, r6
   20efa:	089b      	lsrs	r3, r3, #2
	pkt->ip_dscp = dscp;
   20efc:	f363 0005 	bfi	r0, r3, #0, #6
   20f00:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	pkt->ip_ecn = ecn;
   20f04:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
   20f08:	f363 1087 	bfi	r0, r3, #6, #2
   20f0c:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 *
 * @param dscp DSCP value.
 */
static inline uint8_t net_ipv4_dscp_to_priority(uint8_t dscp)
{
	return dscp >> 3;
   20f10:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
   20f14:	4620      	mov	r0, r4
   20f16:	095b      	lsrs	r3, r3, #5
	pkt->priority = priority;
   20f18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
   20f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv4_create(pkt, src, dst);
   20f20:	f000 bfbb 	b.w	21e9a <net_ipv4_create>
}
   20f24:	f06f 0015 	mvn.w	r0, #21
   20f28:	bd70      	pop	{r4, r5, r6, pc}

00020f2a <net_context_connect>:
{
   20f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f2e:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   20f30:	f100 070c 	add.w	r7, r0, #12
   20f34:	4638      	mov	r0, r7
{
   20f36:	b088      	sub	sp, #32
   20f38:	4615      	mov	r5, r2
   20f3a:	4698      	mov	r8, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   20f3c:	f04f 32ff 	mov.w	r2, #4294967295
   20f40:	f04f 33ff 	mov.w	r3, #4294967295
{
   20f44:	460e      	mov	r6, r1
   20f46:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
	k_mutex_lock(&context->lock, K_FOREVER);
   20f4a:	f7ff ff43 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   20f4e:	f8b4 0090 	ldrh.w	r0, [r4, #144]	; 0x90
	return (enum net_context_state)
   20f52:	f3c0 0141 	ubfx	r1, r0, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_CONNECTING) {
   20f56:	2901      	cmp	r1, #1
   20f58:	d051      	beq.n	20ffe <net_context_connect+0xd4>
	if (!net_context_is_used(context)) {
   20f5a:	07c3      	lsls	r3, r0, #31
   20f5c:	d552      	bpl.n	21004 <net_context_connect+0xda>
	if (addr->sa_family != net_context_get_family(context)) {
   20f5e:	8833      	ldrh	r3, [r6, #0]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   20f60:	f3c0 02c2 	ubfx	r2, r0, #3, #3
   20f64:	4293      	cmp	r3, r2
   20f66:	d153      	bne.n	21010 <net_context_connect+0xe6>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   20f68:	2903      	cmp	r1, #3
   20f6a:	d04e      	beq.n	2100a <net_context_connect+0xe0>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   20f6c:	2b01      	cmp	r3, #1
   20f6e:	d14f      	bne.n	21010 <net_context_connect+0xe6>
		if (addrlen < sizeof(struct sockaddr_in)) {
   20f70:	2d07      	cmp	r5, #7
   20f72:	d94d      	bls.n	21010 <net_context_connect+0xe6>
   20f74:	6872      	ldr	r2, [r6, #4]
   20f76:	62e2      	str	r2, [r4, #44]	; 0x2c
		addr4->sin_port = net_sin(addr)->sin_port;
   20f78:	f8b6 a002 	ldrh.w	sl, [r6, #2]
		addr4->sin_family = AF_INET;
   20f7c:	8523      	strh	r3, [r4, #40]	; 0x28
		addr4->sin_port = net_sin(addr)->sin_port;
   20f7e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
		if (addr4->sin_addr.s_addr) {
   20f82:	b342      	cbz	r2, 20fd6 <net_context_connect+0xac>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   20f84:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   20f88:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
		ret = bind_default(context);
   20f8c:	4620      	mov	r0, r4
   20f8e:	f7ff ff58 	bl	20e42 <bind_default>
		if (ret) {
   20f92:	4605      	mov	r5, r0
   20f94:	b9c0      	cbnz	r0, 20fc8 <net_context_connect+0x9e>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   20f96:	2301      	movs	r3, #1
		net_sin(&local_addr)->sin_port = lport =
   20f98:	8c61      	ldrh	r1, [r4, #34]	; 0x22
		if (net_sin_ptr(&context->local)->sin_addr) {
   20f9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   20f9c:	8423      	strh	r3, [r4, #32]
		net_sin(&local_addr)->sin_family = AF_INET;
   20f9e:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin(&local_addr)->sin_port = lport =
   20fa2:	f8ad 101a 	strh.w	r1, [sp, #26]
		if (net_sin_ptr(&context->local)->sin_addr) {
   20fa6:	b112      	cbz	r2, 20fae <net_context_connect+0x84>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   20fa8:	6813      	ldr	r3, [r2, #0]
   20faa:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
   20fac:	aa06      	add	r2, sp, #24
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   20fae:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
   20fb2:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   20fb6:	2b02      	cmp	r3, #2
   20fb8:	d111      	bne.n	20fde <net_context_connect+0xb4>
		if (cb) {
   20fba:	f1b8 0f00 	cmp.w	r8, #0
   20fbe:	d003      	beq.n	20fc8 <net_context_connect+0x9e>
			cb(context, 0, user_data);
   20fc0:	464a      	mov	r2, r9
   20fc2:	2100      	movs	r1, #0
   20fc4:	4620      	mov	r0, r4
   20fc6:	47c0      	blx	r8
	k_mutex_unlock(&context->lock);
   20fc8:	4638      	mov	r0, r7
   20fca:	f7ff ff05 	bl	20dd8 <k_mutex_unlock.isra.0>
}
   20fce:	4628      	mov	r0, r5
   20fd0:	b008      	add	sp, #32
   20fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   20fd6:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   20fda:	b280      	uxth	r0, r0
   20fdc:	e7d4      	b.n	20f88 <net_context_connect+0x5e>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   20fde:	2b01      	cmp	r3, #1
   20fe0:	d119      	bne.n	21016 <net_context_connect+0xec>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
   20fe2:	e9cd 8904 	strd	r8, r9, [sp, #16]
   20fe6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   20fea:	9100      	str	r1, [sp, #0]
   20fec:	4653      	mov	r3, sl
   20fee:	4631      	mov	r1, r6
   20ff0:	4620      	mov	r0, r4
   20ff2:	e9cd 8902 	strd	r8, r9, [sp, #8]
   20ff6:	f7eb fbab 	bl	c750 <net_tcp_connect>
   20ffa:	4605      	mov	r5, r0
   20ffc:	e7e4      	b.n	20fc8 <net_context_connect+0x9e>
		ret = -EALREADY;
   20ffe:	f06f 0577 	mvn.w	r5, #119	; 0x77
   21002:	e7e1      	b.n	20fc8 <net_context_connect+0x9e>
		ret = -EBADF;
   21004:	f06f 0508 	mvn.w	r5, #8
   21008:	e7de      	b.n	20fc8 <net_context_connect+0x9e>
		ret = -EOPNOTSUPP;
   2100a:	f06f 055e 	mvn.w	r5, #94	; 0x5e
   2100e:	e7db      	b.n	20fc8 <net_context_connect+0x9e>
		ret = -EINVAL;
   21010:	f06f 0515 	mvn.w	r5, #21
   21014:	e7d8      	b.n	20fc8 <net_context_connect+0x9e>
		ret = -ENOTSUP;
   21016:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2101a:	e7d5      	b.n	20fc8 <net_context_connect+0x9e>

0002101c <net_context_accept>:
{
   2101c:	b570      	push	{r4, r5, r6, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   2101e:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
   21022:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   21024:	07db      	lsls	r3, r3, #31
{
   21026:	460d      	mov	r5, r1
	if (!net_context_is_used(context)) {
   21028:	d526      	bpl.n	21078 <net_context_accept+0x5c>
	k_mutex_lock(&context->lock, K_FOREVER);
   2102a:	f100 060c 	add.w	r6, r0, #12
   2102e:	f04f 32ff 	mov.w	r2, #4294967295
   21032:	f04f 33ff 	mov.w	r3, #4294967295
   21036:	4630      	mov	r0, r6
   21038:	f7ff fecc 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   2103c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   21040:	f3c3 0241 	ubfx	r2, r3, #1, #2
   21044:	2a03      	cmp	r2, #3
   21046:	d003      	beq.n	21050 <net_context_accept+0x34>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   21048:	f3c3 1381 	ubfx	r3, r3, #6, #2
   2104c:	2b01      	cmp	r3, #1
   2104e:	d10e      	bne.n	2106e <net_context_accept+0x52>
	if (net_context_get_proto(context) == IPPROTO_TCP) {
   21050:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
   21054:	2b06      	cmp	r3, #6
   21056:	d10d      	bne.n	21074 <net_context_accept+0x58>
		ret = net_tcp_accept(context, cb, user_data);
   21058:	4620      	mov	r0, r4
   2105a:	4629      	mov	r1, r5
   2105c:	9a04      	ldr	r2, [sp, #16]
   2105e:	f7ea f857 	bl	b110 <net_tcp_accept>
   21062:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   21064:	4630      	mov	r0, r6
   21066:	f7ff feb7 	bl	20dd8 <k_mutex_unlock.isra.0>
}
   2106a:	4620      	mov	r0, r4
   2106c:	bd70      	pop	{r4, r5, r6, pc}
		ret = -EINVAL;
   2106e:	f06f 0415 	mvn.w	r4, #21
   21072:	e7f7      	b.n	21064 <net_context_accept+0x48>
	int ret = 0;
   21074:	2400      	movs	r4, #0
   21076:	e7f5      	b.n	21064 <net_context_accept+0x48>
		return -EBADF;
   21078:	f06f 0408 	mvn.w	r4, #8
   2107c:	e7f5      	b.n	2106a <net_context_accept+0x4e>

0002107e <net_context_send>:
{
   2107e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21082:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   21084:	f100 060c 	add.w	r6, r0, #12
{
   21088:	4690      	mov	r8, r2
   2108a:	4699      	mov	r9, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   2108c:	f04f 32ff 	mov.w	r2, #4294967295
   21090:	f04f 33ff 	mov.w	r3, #4294967295
   21094:	4630      	mov	r0, r6
{
   21096:	b085      	sub	sp, #20
   21098:	460f      	mov	r7, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   2109a:	f7ff fe9b 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   2109e:	f8b5 4090 	ldrh.w	r4, [r5, #144]	; 0x90
   210a2:	05e2      	lsls	r2, r4, #23
   210a4:	d51c      	bpl.n	210e0 <net_context_send+0x62>
   210a6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   210a8:	b1d3      	cbz	r3, 210e0 <net_context_send+0x62>
	ret = context_sendto(context, buf, len, &context->remote,
   210aa:	2300      	movs	r3, #0
   210ac:	9303      	str	r3, [sp, #12]
   210ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   210b0:	f3c4 04c2 	ubfx	r4, r4, #3, #3
	ret = context_sendto(context, buf, len, &context->remote,
   210b4:	e9cd 9301 	strd	r9, r3, [sp, #4]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   210b8:	1e63      	subs	r3, r4, #1
   210ba:	425c      	negs	r4, r3
   210bc:	415c      	adcs	r4, r3
   210be:	00e4      	lsls	r4, r4, #3
	ret = context_sendto(context, buf, len, &context->remote,
   210c0:	9400      	str	r4, [sp, #0]
   210c2:	4642      	mov	r2, r8
   210c4:	4639      	mov	r1, r7
   210c6:	4628      	mov	r0, r5
   210c8:	f105 0328 	add.w	r3, r5, #40	; 0x28
   210cc:	f7e8 f844 	bl	9158 <context_sendto.constprop.0>
   210d0:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   210d2:	4630      	mov	r0, r6
   210d4:	f7ff fe80 	bl	20dd8 <k_mutex_unlock.isra.0>
}
   210d8:	4620      	mov	r0, r4
   210da:	b005      	add	sp, #20
   210dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = -EDESTADDRREQ;
   210e0:	f06f 0478 	mvn.w	r4, #120	; 0x78
   210e4:	e7f5      	b.n	210d2 <net_context_send+0x54>

000210e6 <net_context_sendmsg>:
{
   210e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   210e8:	f100 070c 	add.w	r7, r0, #12
{
   210ec:	b085      	sub	sp, #20
   210ee:	4604      	mov	r4, r0
   210f0:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   210f2:	4638      	mov	r0, r7
   210f4:	f04f 32ff 	mov.w	r2, #4294967295
   210f8:	f04f 33ff 	mov.w	r3, #4294967295
{
   210fc:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   210fe:	f7ff fe69 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
   21102:	2301      	movs	r3, #1
   21104:	9303      	str	r3, [sp, #12]
   21106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21108:	4629      	mov	r1, r5
   2110a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2110e:	2300      	movs	r3, #0
   21110:	4620      	mov	r0, r4
   21112:	461a      	mov	r2, r3
   21114:	9300      	str	r3, [sp, #0]
   21116:	f7e8 f81f 	bl	9158 <context_sendto.constprop.0>
   2111a:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   2111c:	4638      	mov	r0, r7
   2111e:	f7ff fe5b 	bl	20dd8 <k_mutex_unlock.isra.0>
}
   21122:	4620      	mov	r0, r4
   21124:	b005      	add	sp, #20
   21126:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021128 <net_context_sendto>:
{
   21128:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   2112c:	f100 080c 	add.w	r8, r0, #12
{
   21130:	4604      	mov	r4, r0
   21132:	4616      	mov	r6, r2
   21134:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   21136:	4640      	mov	r0, r8
   21138:	f04f 32ff 	mov.w	r2, #4294967295
   2113c:	f04f 33ff 	mov.w	r3, #4294967295
{
   21140:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   21142:	f7ff fe47 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   21146:	2301      	movs	r3, #1
   21148:	9303      	str	r3, [sp, #12]
   2114a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2114c:	4632      	mov	r2, r6
   2114e:	9302      	str	r3, [sp, #8]
   21150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21152:	4629      	mov	r1, r5
   21154:	9301      	str	r3, [sp, #4]
   21156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21158:	4620      	mov	r0, r4
   2115a:	9300      	str	r3, [sp, #0]
   2115c:	463b      	mov	r3, r7
   2115e:	f7e7 fffb 	bl	9158 <context_sendto.constprop.0>
   21162:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   21164:	4640      	mov	r0, r8
   21166:	f7ff fe37 	bl	20dd8 <k_mutex_unlock.isra.0>
}
   2116a:	4620      	mov	r0, r4
   2116c:	b004      	add	sp, #16
   2116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021172 <net_context_update_recv_wnd>:
{
   21172:	b570      	push	{r4, r5, r6, lr}
   21174:	4604      	mov	r4, r0
   21176:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   21178:	f100 060c 	add.w	r6, r0, #12
   2117c:	f04f 32ff 	mov.w	r2, #4294967295
   21180:	f04f 33ff 	mov.w	r3, #4294967295
   21184:	4630      	mov	r0, r6
   21186:	f7ff fe25 	bl	20dd4 <k_mutex_lock.constprop.0.isra.0>
	ret = net_tcp_update_recv_wnd(context, delta);
   2118a:	4629      	mov	r1, r5
   2118c:	4620      	mov	r0, r4
   2118e:	f7ea fb53 	bl	b838 <net_tcp_update_recv_wnd>
   21192:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   21194:	4630      	mov	r0, r6
   21196:	f7ff fe1f 	bl	20dd8 <k_mutex_unlock.isra.0>
}
   2119a:	4620      	mov	r0, r4
   2119c:	bd70      	pop	{r4, r5, r6, pc}

0002119e <pkt_cursor_jump>:
{
   2119e:	b538      	push	{r3, r4, r5, lr}
   211a0:	4604      	mov	r4, r0
   211a2:	460d      	mov	r5, r1
	cursor->buf = cursor->buf->frags;
   211a4:	68c3      	ldr	r3, [r0, #12]
			cursor->buf = cursor->buf->frags;
   211a6:	6858      	ldr	r0, [r3, #4]
	cursor->buf = cursor->buf->frags;
   211a8:	60e0      	str	r0, [r4, #12]
	while (cursor->buf) {
   211aa:	b130      	cbz	r0, 211ba <pkt_cursor_jump+0x1c>
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   211ac:	b14d      	cbz	r5, 211c2 <pkt_cursor_jump+0x24>
	return net_buf_simple_max_len(&buf->b);
   211ae:	300c      	adds	r0, #12
   211b0:	f7fe ffaa 	bl	20108 <net_buf_simple_max_len>
			cursor->buf = cursor->buf->frags;
   211b4:	68e3      	ldr	r3, [r4, #12]
		if (!len) {
   211b6:	2800      	cmp	r0, #0
   211b8:	d0f5      	beq.n	211a6 <pkt_cursor_jump+0x8>
	if (cursor->buf) {
   211ba:	68e3      	ldr	r3, [r4, #12]
   211bc:	b91b      	cbnz	r3, 211c6 <pkt_cursor_jump+0x28>
   211be:	6123      	str	r3, [r4, #16]
}
   211c0:	bd38      	pop	{r3, r4, r5, pc}
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   211c2:	8a00      	ldrh	r0, [r0, #16]
   211c4:	e7f6      	b.n	211b4 <pkt_cursor_jump+0x16>
		cursor->pos = cursor->buf->data;
   211c6:	68db      	ldr	r3, [r3, #12]
   211c8:	e7f9      	b.n	211be <pkt_cursor_jump+0x20>

000211ca <pkt_cursor_advance>:
{
   211ca:	b538      	push	{r3, r4, r5, lr}
   211cc:	4604      	mov	r4, r0
	if (!cursor->buf) {
   211ce:	68c0      	ldr	r0, [r0, #12]
{
   211d0:	460d      	mov	r5, r1
	if (!cursor->buf) {
   211d2:	b188      	cbz	r0, 211f8 <pkt_cursor_advance+0x2e>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   211d4:	b171      	cbz	r1, 211f4 <pkt_cursor_advance+0x2a>
   211d6:	300c      	adds	r0, #12
   211d8:	f7fe ff96 	bl	20108 <net_buf_simple_max_len>
	if ((cursor->pos - cursor->buf->data) == len) {
   211dc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   211e0:	68d2      	ldr	r2, [r2, #12]
   211e2:	1a9b      	subs	r3, r3, r2
   211e4:	4283      	cmp	r3, r0
   211e6:	d107      	bne.n	211f8 <pkt_cursor_advance+0x2e>
		pkt_cursor_jump(pkt, write);
   211e8:	4629      	mov	r1, r5
   211ea:	4620      	mov	r0, r4
}
   211ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		pkt_cursor_jump(pkt, write);
   211f0:	f7ff bfd5 	b.w	2119e <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   211f4:	8a00      	ldrh	r0, [r0, #16]
   211f6:	e7f1      	b.n	211dc <pkt_cursor_advance+0x12>
}
   211f8:	bd38      	pop	{r3, r4, r5, pc}

000211fa <pkt_cursor_update>:
{
   211fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211fc:	4604      	mov	r4, r0
	return pkt->overwrite;
   211fe:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   21202:	4616      	mov	r6, r2
	if (net_pkt_is_being_overwritten(pkt)) {
   21204:	07da      	lsls	r2, r3, #31
{
   21206:	460f      	mov	r7, r1
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   21208:	68c0      	ldr	r0, [r0, #12]
	if (net_pkt_is_being_overwritten(pkt)) {
   2120a:	d415      	bmi.n	21238 <pkt_cursor_update+0x3e>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   2120c:	b1a6      	cbz	r6, 21238 <pkt_cursor_update+0x3e>
   2120e:	300c      	adds	r0, #12
   21210:	f7fe ff7a 	bl	20108 <net_buf_simple_max_len>
   21214:	4605      	mov	r5, r0
	if (length + (cursor->pos - cursor->buf->data) == len &&
   21216:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
   2121a:	68c2      	ldr	r2, [r0, #12]
   2121c:	1a9b      	subs	r3, r3, r2
   2121e:	443b      	add	r3, r7
   21220:	42ab      	cmp	r3, r5
   21222:	d111      	bne.n	21248 <pkt_cursor_update+0x4e>
   21224:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   21228:	07db      	lsls	r3, r3, #31
   2122a:	d408      	bmi.n	2123e <pkt_cursor_update+0x44>
		pkt_cursor_jump(pkt, write);
   2122c:	4631      	mov	r1, r6
   2122e:	4620      	mov	r0, r4
}
   21230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		pkt_cursor_jump(pkt, write);
   21234:	f7ff bfb3 	b.w	2119e <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
   21238:	2600      	movs	r6, #0
   2123a:	8a05      	ldrh	r5, [r0, #16]
   2123c:	e7eb      	b.n	21216 <pkt_cursor_update+0x1c>
   2123e:	300c      	adds	r0, #12
   21240:	f7fe ff62 	bl	20108 <net_buf_simple_max_len>
	    !(net_pkt_is_being_overwritten(pkt) &&
   21244:	42a8      	cmp	r0, r5
   21246:	d9f1      	bls.n	2122c <pkt_cursor_update+0x32>
		cursor->pos += length;
   21248:	6923      	ldr	r3, [r4, #16]
   2124a:	443b      	add	r3, r7
   2124c:	6123      	str	r3, [r4, #16]
}
   2124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021250 <pkt_estimate_headers_length.part.0>:
	size_t hdr_len = 0;
   21250:	2801      	cmp	r0, #1
   21252:	bf0c      	ite	eq
   21254:	2014      	moveq	r0, #20
   21256:	2000      	movne	r0, #0
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   21258:	2906      	cmp	r1, #6
   2125a:	d101      	bne.n	21260 <pkt_estimate_headers_length.part.0+0x10>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
   2125c:	301c      	adds	r0, #28
   2125e:	4770      	bx	lr
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   21260:	2911      	cmp	r1, #17
   21262:	d101      	bne.n	21268 <pkt_estimate_headers_length.part.0+0x18>
		hdr_len += NET_UDPH_LEN;
   21264:	3008      	adds	r0, #8
   21266:	4770      	bx	lr
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   21268:	2901      	cmp	r1, #1
   2126a:	d001      	beq.n	21270 <pkt_estimate_headers_length.part.0+0x20>
   2126c:	293a      	cmp	r1, #58	; 0x3a
   2126e:	d100      	bne.n	21272 <pkt_estimate_headers_length.part.0+0x22>
		hdr_len += NET_ICMPH_LEN;
   21270:	3004      	adds	r0, #4
}
   21272:	4770      	bx	lr

00021274 <net_pkt_get_len.isra.0>:
static inline size_t net_pkt_get_len(struct net_pkt *pkt)
   21274:	4603      	mov	r3, r0
	size_t bytes = 0;
   21276:	2000      	movs	r0, #0
	while (buf) {
   21278:	b903      	cbnz	r3, 2127c <net_pkt_get_len.isra.0+0x8>
}
   2127a:	4770      	bx	lr
		bytes += buf->len;
   2127c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2127e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   21280:	4410      	add	r0, r2
		buf = buf->frags;
   21282:	e7f9      	b.n	21278 <net_pkt_get_len.isra.0+0x4>

00021284 <net_pkt_cursor_operate>:
{
   21284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21288:	4605      	mov	r5, r0
   2128a:	460f      	mov	r7, r1
   2128c:	4616      	mov	r6, r2
   2128e:	4699      	mov	r9, r3
   21290:	f89d 8020 	ldrb.w	r8, [sp, #32]
	while (c_op->buf && length) {
   21294:	68eb      	ldr	r3, [r5, #12]
   21296:	2b00      	cmp	r3, #0
   21298:	d06d      	beq.n	21376 <net_pkt_cursor_operate+0xf2>
   2129a:	b90e      	cbnz	r6, 212a0 <net_pkt_cursor_operate+0x1c>
	return 0;
   2129c:	4630      	mov	r0, r6
   2129e:	e06e      	b.n	2137e <net_pkt_cursor_operate+0xfa>
	return pkt->overwrite;
   212a0:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   212a4:	4628      	mov	r0, r5
   212a6:	f013 0f01 	tst.w	r3, #1
   212aa:	bf0c      	ite	eq
   212ac:	4641      	moveq	r1, r8
   212ae:	2100      	movne	r1, #0
   212b0:	f7ff ff8b 	bl	211ca <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   212b4:	68eb      	ldr	r3, [r5, #12]
   212b6:	2b00      	cmp	r3, #0
   212b8:	d05f      	beq.n	2137a <net_pkt_cursor_operate+0xf6>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   212ba:	f1b8 0f00 	cmp.w	r8, #0
   212be:	d01b      	beq.n	212f8 <net_pkt_cursor_operate+0x74>
   212c0:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
   212c4:	07d2      	lsls	r2, r2, #31
   212c6:	d417      	bmi.n	212f8 <net_pkt_cursor_operate+0x74>
	return net_buf_simple_max_len(&buf->b);
   212c8:	f103 000c 	add.w	r0, r3, #12
   212cc:	f7fe ff1c 	bl	20108 <net_buf_simple_max_len>
   212d0:	4604      	mov	r4, r0
				(c_op->pos - c_op->buf->data);
   212d2:	e9d5 3003 	ldrd	r3, r0, [r5, #12]
   212d6:	68db      	ldr	r3, [r3, #12]
   212d8:	1ac3      	subs	r3, r0, r3
		if (!d_len) {
   212da:	1ae4      	subs	r4, r4, r3
   212dc:	d04d      	beq.n	2137a <net_pkt_cursor_operate+0xf6>
		if (length < d_len) {
   212de:	42b4      	cmp	r4, r6
   212e0:	bf28      	it	cs
   212e2:	4634      	movcs	r4, r6
		if (copy) {
   212e4:	f1b9 0f00 	cmp.w	r9, #0
   212e8:	d121      	bne.n	2132e <net_pkt_cursor_operate+0xaa>
		} else if (data) {
   212ea:	b327      	cbz	r7, 21336 <net_pkt_cursor_operate+0xb2>
__ssp_bos_icheck3(memset, void *, int)
   212ec:	4622      	mov	r2, r4
   212ee:	6839      	ldr	r1, [r7, #0]
   212f0:	6928      	ldr	r0, [r5, #16]
   212f2:	f7f6 f871 	bl	173d8 <memset>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   212f6:	e034      	b.n	21362 <net_pkt_cursor_operate+0xde>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   212f8:	8a1c      	ldrh	r4, [r3, #16]
   212fa:	6928      	ldr	r0, [r5, #16]
   212fc:	68db      	ldr	r3, [r3, #12]
   212fe:	1ac3      	subs	r3, r0, r3
		if (!d_len) {
   21300:	1ae4      	subs	r4, r4, r3
   21302:	d03a      	beq.n	2137a <net_pkt_cursor_operate+0xf6>
		if (length < d_len) {
   21304:	42b4      	cmp	r4, r6
   21306:	bf28      	it	cs
   21308:	4634      	movcs	r4, r6
		if (copy) {
   2130a:	f1b9 0f00 	cmp.w	r9, #0
   2130e:	d026      	beq.n	2135e <net_pkt_cursor_operate+0xda>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21310:	4622      	mov	r2, r4
			memcpy(write ? c_op->pos : data,
   21312:	f1b8 0f00 	cmp.w	r8, #0
   21316:	d10b      	bne.n	21330 <net_pkt_cursor_operate+0xac>
   21318:	4601      	mov	r1, r0
   2131a:	4638      	mov	r0, r7
   2131c:	f7df fc1a 	bl	b54 <memcpy>
		pkt_cursor_update(pkt, len, write);
   21320:	4642      	mov	r2, r8
   21322:	4621      	mov	r1, r4
   21324:	4628      	mov	r0, r5
   21326:	f7ff ff68 	bl	211fa <pkt_cursor_update>
			data = (uint8_t *) data + len;
   2132a:	4427      	add	r7, r4
   2132c:	e021      	b.n	21372 <net_pkt_cursor_operate+0xee>
   2132e:	4622      	mov	r2, r4
   21330:	4639      	mov	r1, r7
   21332:	f7df fc0f 	bl	b54 <memcpy>
   21336:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   2133a:	07db      	lsls	r3, r3, #31
   2133c:	d404      	bmi.n	21348 <net_pkt_cursor_operate+0xc4>
	return net_buf_simple_add(&buf->b, len);
   2133e:	68e8      	ldr	r0, [r5, #12]
   21340:	4621      	mov	r1, r4
   21342:	300c      	adds	r0, #12
   21344:	f7fe fed2 	bl	200ec <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   21348:	2201      	movs	r2, #1
   2134a:	4621      	mov	r1, r4
   2134c:	4628      	mov	r0, r5
   2134e:	f7ff ff54 	bl	211fa <pkt_cursor_update>
		if (copy && data) {
   21352:	f1b9 0f00 	cmp.w	r9, #0
   21356:	d00c      	beq.n	21372 <net_pkt_cursor_operate+0xee>
   21358:	2f00      	cmp	r7, #0
   2135a:	d1e6      	bne.n	2132a <net_pkt_cursor_operate+0xa6>
   2135c:	e009      	b.n	21372 <net_pkt_cursor_operate+0xee>
		} else if (data) {
   2135e:	2f00      	cmp	r7, #0
   21360:	d1c4      	bne.n	212ec <net_pkt_cursor_operate+0x68>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   21362:	f1b8 0f00 	cmp.w	r8, #0
   21366:	d1e6      	bne.n	21336 <net_pkt_cursor_operate+0xb2>
		pkt_cursor_update(pkt, len, write);
   21368:	4642      	mov	r2, r8
   2136a:	4621      	mov	r1, r4
   2136c:	4628      	mov	r0, r5
   2136e:	f7ff ff44 	bl	211fa <pkt_cursor_update>
		length -= len;
   21372:	1b36      	subs	r6, r6, r4
   21374:	e78e      	b.n	21294 <net_pkt_cursor_operate+0x10>
	if (length) {
   21376:	2e00      	cmp	r6, #0
   21378:	d090      	beq.n	2129c <net_pkt_cursor_operate+0x18>
		return -ENOBUFS;
   2137a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2137e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021382 <net_pkt_ref>:
{
   21382:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   21384:	b180      	cbz	r0, 213a8 <net_pkt_ref+0x26>
   21386:	f100 0320 	add.w	r3, r0, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2138a:	e8d3 2faf 	lda	r2, [r3]
		if (!ref) {
   2138e:	b15a      	cbz	r2, 213a8 <net_pkt_ref+0x26>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   21390:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21392:	e8d3 4fef 	ldaex	r4, [r3]
   21396:	4294      	cmp	r4, r2
   21398:	d104      	bne.n	213a4 <net_pkt_ref+0x22>
   2139a:	e8c3 1fec 	stlex	ip, r1, [r3]
   2139e:	f1bc 0f00 	cmp.w	ip, #0
   213a2:	d1f6      	bne.n	21392 <net_pkt_ref+0x10>
   213a4:	d1f1      	bne.n	2138a <net_pkt_ref+0x8>
}
   213a6:	bd10      	pop	{r4, pc}
			return NULL;
   213a8:	2000      	movs	r0, #0
   213aa:	e7fc      	b.n	213a6 <net_pkt_ref+0x24>

000213ac <net_pkt_frag_unref>:
	if (!frag) {
   213ac:	b108      	cbz	r0, 213b2 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   213ae:	f7e6 b859 	b.w	7464 <net_buf_unref>
}
   213b2:	4770      	bx	lr

000213b4 <net_pkt_unref>:
{
   213b4:	b507      	push	{r0, r1, r2, lr}
   213b6:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   213b8:	b1e8      	cbz	r0, 213f6 <net_pkt_unref+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   213ba:	9b01      	ldr	r3, [sp, #4]
   213bc:	3320      	adds	r3, #32
   213be:	e8d3 3faf 	lda	r3, [r3]
		if (!ref) {
   213c2:	b1c3      	cbz	r3, 213f6 <net_pkt_unref+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   213c4:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   213c6:	1e59      	subs	r1, r3, #1
   213c8:	3220      	adds	r2, #32
   213ca:	e8d2 0fef 	ldaex	r0, [r2]
   213ce:	4298      	cmp	r0, r3
   213d0:	d104      	bne.n	213dc <net_pkt_unref+0x28>
   213d2:	e8c2 1fec 	stlex	ip, r1, [r2]
   213d6:	f1bc 0f00 	cmp.w	ip, #0
   213da:	d1f6      	bne.n	213ca <net_pkt_unref+0x16>
   213dc:	d1ed      	bne.n	213ba <net_pkt_unref+0x6>
	if (ref > 1) {
   213de:	2b01      	cmp	r3, #1
   213e0:	dc09      	bgt.n	213f6 <net_pkt_unref+0x42>
	if (pkt->frags) {
   213e2:	9b01      	ldr	r3, [sp, #4]
   213e4:	6898      	ldr	r0, [r3, #8]
   213e6:	b108      	cbz	r0, 213ec <net_pkt_unref+0x38>
		net_pkt_frag_unref(pkt->frags);
   213e8:	f7ff ffe0 	bl	213ac <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   213ec:	9b01      	ldr	r3, [sp, #4]
   213ee:	a901      	add	r1, sp, #4
   213f0:	6858      	ldr	r0, [r3, #4]
   213f2:	f002 fcf0 	bl	23dd6 <k_mem_slab_free>
}
   213f6:	b003      	add	sp, #12
   213f8:	f85d fb04 	ldr.w	pc, [sp], #4

000213fc <net_pkt_frag_insert>:
{
   213fc:	b538      	push	{r3, r4, r5, lr}
   213fe:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
   21400:	4608      	mov	r0, r1
{
   21402:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
   21404:	f7fe fe25 	bl	20052 <net_buf_frag_last>
   21408:	68a3      	ldr	r3, [r4, #8]
   2140a:	6043      	str	r3, [r0, #4]
	pkt->frags = frag;
   2140c:	60a5      	str	r5, [r4, #8]
}
   2140e:	bd38      	pop	{r3, r4, r5, pc}

00021410 <net_pkt_available_buffer>:
{
   21410:	b570      	push	{r4, r5, r6, lr}
	if (!pkt) {
   21412:	4604      	mov	r4, r0
   21414:	b130      	cbz	r0, 21424 <net_pkt_available_buffer+0x14>
	size_t size = 0;
   21416:	2600      	movs	r6, #0
   21418:	6885      	ldr	r5, [r0, #8]
	while (buf) {
   2141a:	b925      	cbnz	r5, 21426 <net_pkt_available_buffer+0x16>
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
   2141c:	68a0      	ldr	r0, [r4, #8]
   2141e:	f7ff ff29 	bl	21274 <net_pkt_get_len.isra.0>
   21422:	1a30      	subs	r0, r6, r0
}
   21424:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_max_len(&buf->b);
   21426:	f105 000c 	add.w	r0, r5, #12
   2142a:	f7fe fe6d 	bl	20108 <net_buf_simple_max_len>
		buf = buf->frags;
   2142e:	686d      	ldr	r5, [r5, #4]
		size += net_buf_max_len(buf);
   21430:	4406      	add	r6, r0
		buf = buf->frags;
   21432:	e7f2      	b.n	2141a <net_pkt_available_buffer+0xa>

00021434 <net_pkt_available_payload_buffer>:
{
   21434:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
   21436:	4605      	mov	r5, r0
   21438:	b158      	cbz	r0, 21452 <net_pkt_available_payload_buffer+0x1e>
	return pkt->family;
   2143a:	f890 4037 	ldrb.w	r4, [r0, #55]	; 0x37
	if (family == AF_UNSPEC) {
   2143e:	6883      	ldr	r3, [r0, #8]
   21440:	0964      	lsrs	r4, r4, #5
   21442:	d107      	bne.n	21454 <net_pkt_available_payload_buffer+0x20>
	len = net_pkt_get_len(pkt);
   21444:	4618      	mov	r0, r3
   21446:	f7ff ff15 	bl	21274 <net_pkt_get_len.isra.0>
	len = net_pkt_available_buffer(pkt) - hdr_len;
   2144a:	4628      	mov	r0, r5
   2144c:	f7ff ffe0 	bl	21410 <net_pkt_available_buffer>
   21450:	1b00      	subs	r0, r0, r4
}
   21452:	bd38      	pop	{r3, r4, r5, pc}
   21454:	4620      	mov	r0, r4
   21456:	f7ff fefb 	bl	21250 <pkt_estimate_headers_length.part.0>
   2145a:	4604      	mov	r4, r0
	len = net_pkt_get_len(pkt);
   2145c:	4618      	mov	r0, r3
   2145e:	f7ff ff09 	bl	21274 <net_pkt_get_len.isra.0>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   21462:	42a0      	cmp	r0, r4
   21464:	bf2c      	ite	cs
   21466:	2400      	movcs	r4, #0
   21468:	1a24      	subcc	r4, r4, r0
   2146a:	e7ee      	b.n	2144a <net_pkt_available_payload_buffer+0x16>

0002146c <net_pkt_trim_buffer>:
{
   2146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2146e:	4604      	mov	r4, r0
	buf = pkt->buffer;
   21470:	6880      	ldr	r0, [r0, #8]
			buf->frags = NULL;
   21472:	2700      	movs	r7, #0
	prev = buf;
   21474:	4605      	mov	r5, r0
	while (buf) {
   21476:	b900      	cbnz	r0, 2147a <net_pkt_trim_buffer+0xe>
}
   21478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   2147a:	8a03      	ldrh	r3, [r0, #16]
		struct net_buf *next = buf->frags;
   2147c:	6846      	ldr	r6, [r0, #4]
		if (!buf->len) {
   2147e:	b93b      	cbnz	r3, 21490 <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   21480:	68a3      	ldr	r3, [r4, #8]
   21482:	4283      	cmp	r3, r0
   21484:	d107      	bne.n	21496 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   21486:	60a6      	str	r6, [r4, #8]
			buf->frags = NULL;
   21488:	6047      	str	r7, [r0, #4]
			net_buf_unref(buf);
   2148a:	f7e5 ffeb 	bl	7464 <net_buf_unref>
   2148e:	4628      	mov	r0, r5
   21490:	4605      	mov	r5, r0
   21492:	4630      	mov	r0, r6
   21494:	e7ef      	b.n	21476 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   21496:	686b      	ldr	r3, [r5, #4]
   21498:	4283      	cmp	r3, r0
				prev->frags = next;
   2149a:	bf08      	it	eq
   2149c:	606e      	streq	r6, [r5, #4]
   2149e:	e7f3      	b.n	21488 <net_pkt_trim_buffer+0x1c>

000214a0 <net_pkt_remove_tail>:
{
   214a0:	b510      	push	{r4, lr}
	struct net_buf *buf = pkt->buffer;
   214a2:	6884      	ldr	r4, [r0, #8]
	size_t remaining_len = net_pkt_get_len(pkt);
   214a4:	4620      	mov	r0, r4
   214a6:	f7ff fee5 	bl	21274 <net_pkt_get_len.isra.0>
	if (remaining_len < length) {
   214aa:	4288      	cmp	r0, r1
   214ac:	d310      	bcc.n	214d0 <net_pkt_remove_tail+0x30>
	remaining_len -= length;
   214ae:	1a41      	subs	r1, r0, r1
	while (buf) {
   214b0:	b14c      	cbz	r4, 214c6 <net_pkt_remove_tail+0x26>
		if (buf->len >= remaining_len) {
   214b2:	8a23      	ldrh	r3, [r4, #16]
			if (buf->frags) {
   214b4:	6860      	ldr	r0, [r4, #4]
		if (buf->len >= remaining_len) {
   214b6:	428b      	cmp	r3, r1
   214b8:	d307      	bcc.n	214ca <net_pkt_remove_tail+0x2a>
			buf->len = remaining_len;
   214ba:	8221      	strh	r1, [r4, #16]
			if (buf->frags) {
   214bc:	b118      	cbz	r0, 214c6 <net_pkt_remove_tail+0x26>
				net_pkt_frag_unref(buf->frags);
   214be:	f7ff ff75 	bl	213ac <net_pkt_frag_unref>
				buf->frags = NULL;
   214c2:	2300      	movs	r3, #0
   214c4:	6063      	str	r3, [r4, #4]
	return 0;
   214c6:	2000      	movs	r0, #0
}
   214c8:	bd10      	pop	{r4, pc}
			if (buf->frags) {
   214ca:	4604      	mov	r4, r0
		remaining_len -= buf->len;
   214cc:	1ac9      	subs	r1, r1, r3
		buf = buf->frags;
   214ce:	e7ef      	b.n	214b0 <net_pkt_remove_tail+0x10>
		return -EINVAL;
   214d0:	f06f 0015 	mvn.w	r0, #21
   214d4:	e7f8      	b.n	214c8 <net_pkt_remove_tail+0x28>

000214d6 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   214d6:	6883      	ldr	r3, [r0, #8]
   214d8:	60c3      	str	r3, [r0, #12]
	if (pkt->cursor.buf) {
   214da:	b103      	cbz	r3, 214de <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   214dc:	68db      	ldr	r3, [r3, #12]
   214de:	6103      	str	r3, [r0, #16]
}
   214e0:	4770      	bx	lr

000214e2 <net_pkt_alloc_from_slab>:
	if (!slab) {
   214e2:	b108      	cbz	r0, 214e8 <net_pkt_alloc_from_slab+0x6>
	return pkt_alloc(slab, timeout);
   214e4:	f7e8 b8f2 	b.w	96cc <pkt_alloc>
}
   214e8:	4770      	bx	lr

000214ea <pkt_alloc_on_iface>:
{
   214ea:	b510      	push	{r4, lr}
   214ec:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   214ee:	f7e8 f8ed 	bl	96cc <pkt_alloc>
	if (pkt) {
   214f2:	b148      	cbz	r0, 21508 <pkt_alloc_on_iface+0x1e>
	pkt->iface = iface;
   214f4:	6184      	str	r4, [r0, #24]
	if (iface) {
   214f6:	b13c      	cbz	r4, 21508 <pkt_alloc_on_iface+0x1e>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   214f8:	6823      	ldr	r3, [r4, #0]
   214fa:	7d5b      	ldrb	r3, [r3, #21]
   214fc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   21500:	6823      	ldr	r3, [r4, #0]
   21502:	7d5b      	ldrb	r3, [r3, #21]
   21504:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
}
   21508:	bd10      	pop	{r4, pc}

0002150a <net_pkt_append_buffer>:
{
   2150a:	b510      	push	{r4, lr}
	if (!pkt->buffer) {
   2150c:	6882      	ldr	r2, [r0, #8]
{
   2150e:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   21510:	b922      	cbnz	r2, 2151c <net_pkt_append_buffer+0x12>
		pkt->buffer = buffer;
   21512:	6081      	str	r1, [r0, #8]
}
   21514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_cursor_init(pkt);
   21518:	f7ff bfdd 	b.w	214d6 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   2151c:	4610      	mov	r0, r2
   2151e:	f7fe fd98 	bl	20052 <net_buf_frag_last>
   21522:	4621      	mov	r1, r4
}
   21524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   21528:	f7fe bd99 	b.w	2005e <net_buf_frag_insert>

0002152c <pkt_alloc_with_buffer>:
{
   2152c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21530:	4606      	mov	r6, r0
   21532:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
   21536:	468b      	mov	fp, r1
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   21538:	4628      	mov	r0, r5
   2153a:	4621      	mov	r1, r4
{
   2153c:	4690      	mov	r8, r2
   2153e:	469a      	mov	sl, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   21540:	f002 ffc4 	bl	244cc <sys_clock_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   21544:	462a      	mov	r2, r5
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   21546:	4607      	mov	r7, r0
   21548:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   2154a:	4630      	mov	r0, r6
   2154c:	4623      	mov	r3, r4
   2154e:	4659      	mov	r1, fp
   21550:	f7ff ffcb 	bl	214ea <pkt_alloc_on_iface>
	if (!pkt) {
   21554:	4606      	mov	r6, r0
   21556:	b318      	cbz	r0, 215a0 <pkt_alloc_with_buffer+0x74>
	pkt->family = family;
   21558:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   2155c:	f36a 1347 	bfi	r3, sl, #5, #3
   21560:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21564:	ea55 0304 	orrs.w	r3, r5, r4
   21568:	d00e      	beq.n	21588 <pkt_alloc_with_buffer+0x5c>
   2156a:	f1b4 3fff 	cmp.w	r4, #4294967295
   2156e:	bf08      	it	eq
   21570:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   21574:	d008      	beq.n	21588 <pkt_alloc_with_buffer+0x5c>
		int64_t remaining = end - sys_clock_tick_get();
   21576:	f7f5 f92d 	bl	167d4 <sys_clock_tick_get>
   2157a:	1a3d      	subs	r5, r7, r0
   2157c:	eb69 0401 	sbc.w	r4, r9, r1
		if (remaining <= 0) {
   21580:	2c00      	cmp	r4, #0
   21582:	bfbc      	itt	lt
   21584:	2500      	movlt	r5, #0
   21586:	462c      	movlt	r4, r5
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   21588:	4641      	mov	r1, r8
   2158a:	4630      	mov	r0, r6
   2158c:	e9cd 5400 	strd	r5, r4, [sp]
   21590:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   21594:	f7e8 f8d2 	bl	973c <net_pkt_alloc_buffer>
	if (ret) {
   21598:	b118      	cbz	r0, 215a2 <pkt_alloc_with_buffer+0x76>
		net_pkt_unref(pkt);
   2159a:	4630      	mov	r0, r6
   2159c:	f7ff ff0a 	bl	213b4 <net_pkt_unref>
		return NULL;
   215a0:	2600      	movs	r6, #0
}
   215a2:	4630      	mov	r0, r6
   215a4:	b003      	add	sp, #12
   215a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000215aa <net_pkt_skip>:
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   215aa:	2301      	movs	r3, #1
{
   215ac:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   215ae:	9300      	str	r3, [sp, #0]
   215b0:	2300      	movs	r3, #0
{
   215b2:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   215b4:	4619      	mov	r1, r3
   215b6:	f7ff fe65 	bl	21284 <net_pkt_cursor_operate>
}
   215ba:	b003      	add	sp, #12
   215bc:	f85d fb04 	ldr.w	pc, [sp], #4

000215c0 <clone_pkt_lladdr>:
{
   215c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!lladdr->addr)
   215c2:	6813      	ldr	r3, [r2, #0]
{
   215c4:	460e      	mov	r6, r1
   215c6:	4617      	mov	r7, r2
	if (!lladdr->addr)
   215c8:	b19b      	cbz	r3, 215f2 <clone_pkt_lladdr+0x32>
	if (!ptr || !pkt || !pkt->buffer) {
   215ca:	b190      	cbz	r0, 215f2 <clone_pkt_lladdr+0x32>
   215cc:	6884      	ldr	r4, [r0, #8]
   215ce:	b184      	cbz	r4, 215f2 <clone_pkt_lladdr+0x32>
	offset = 0U;
   215d0:	2500      	movs	r5, #0
		if (buf->data <= ptr && ptr <= (buf->data + buf->len)) {
   215d2:	68e2      	ldr	r2, [r4, #12]
   215d4:	8a21      	ldrh	r1, [r4, #16]
   215d6:	4293      	cmp	r3, r2
   215d8:	d30c      	bcc.n	215f4 <clone_pkt_lladdr+0x34>
   215da:	1850      	adds	r0, r2, r1
   215dc:	4283      	cmp	r3, r0
   215de:	d809      	bhi.n	215f4 <clone_pkt_lladdr+0x34>
			ret = offset + (ptr - buf->data);
   215e0:	1a9b      	subs	r3, r3, r2
   215e2:	1959      	adds	r1, r3, r5
		net_pkt_cursor_init(clone_pkt);
   215e4:	4630      	mov	r0, r6
   215e6:	f7ff ff76 	bl	214d6 <net_pkt_cursor_init>
		net_pkt_skip(clone_pkt, ll_addr_offset);
   215ea:	f7ff ffde 	bl	215aa <net_pkt_skip>
	return pkt->cursor.pos;
   215ee:	6933      	ldr	r3, [r6, #16]
		lladdr->addr = net_pkt_cursor_get_pos(clone_pkt);
   215f0:	603b      	str	r3, [r7, #0]
}
   215f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		buf = buf->frags;
   215f4:	6864      	ldr	r4, [r4, #4]
		offset += buf->len;
   215f6:	440d      	add	r5, r1
   215f8:	b2ad      	uxth	r5, r5
	while (buf) {
   215fa:	2c00      	cmp	r4, #0
   215fc:	d1e9      	bne.n	215d2 <clone_pkt_lladdr+0x12>
   215fe:	e7f8      	b.n	215f2 <clone_pkt_lladdr+0x32>

00021600 <clone_pkt_attributes>:
{
   21600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pkt->family;
   21602:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
	pkt->family = family;
   21606:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
	return pkt->family;
   2160a:	095b      	lsrs	r3, r3, #5
	pkt->family = family;
   2160c:	f363 1247 	bfi	r2, r3, #5, #3
   21610:	f881 2037 	strb.w	r2, [r1, #55]	; 0x37
	return pkt->context;
   21614:	6943      	ldr	r3, [r0, #20]
   21616:	4605      	mov	r5, r0
	pkt->context = ctx;
   21618:	614b      	str	r3, [r1, #20]
	return pkt->ip_hdr_len;
   2161a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   2161e:	460c      	mov	r4, r1
	pkt->ip_hdr_len = len;
   21620:	f881 3036 	strb.w	r3, [r1, #54]	; 0x36
	return pkt->ip_dscp;
   21624:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
	pkt->ip_dscp = dscp;
   21628:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
   2162c:	f362 0305 	bfi	r3, r2, #0, #6
   21630:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
	return pkt->ip_ecn;
   21634:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	pkt->ip_ecn = ecn;
   21638:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
	return pkt->ip_ecn;
   2163c:	099b      	lsrs	r3, r3, #6
	pkt->ip_ecn = ecn;
   2163e:	f363 1287 	bfi	r2, r3, #6, #2
   21642:	f881 203b 	strb.w	r2, [r1, #59]	; 0x3b
	return pkt->priority;
   21646:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	pkt->captured = is_captured;
   2164a:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
	pkt->priority = priority;
   2164e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
	return !!(pkt->captured);
   21652:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   21656:	f3c3 0380 	ubfx	r3, r3, #2, #1
	pkt->captured = is_captured;
   2165a:	f363 0282 	bfi	r2, r3, #2, #1
   2165e:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
	return !!(pkt->l2_processed);
   21662:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	pkt->l2_processed = is_l2_processed;
   21666:	b2d2      	uxtb	r2, r2
	return !!(pkt->l2_processed);
   21668:	f3c3 1300 	ubfx	r3, r3, #4, #1
	pkt->l2_processed = is_l2_processed;
   2166c:	f363 1204 	bfi	r2, r3, #4, #1
   21670:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
	return pkt->ll_proto_type;
   21674:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	pkt->ll_proto_type = type;
   21676:	868b      	strh	r3, [r1, #52]	; 0x34
	if (pkt->buffer && clone_pkt->buffer) {
   21678:	6883      	ldr	r3, [r0, #8]
   2167a:	b1bb      	cbz	r3, 216ac <clone_pkt_attributes+0xac>
   2167c:	688e      	ldr	r6, [r1, #8]
   2167e:	b1ae      	cbz	r6, 216ac <clone_pkt_attributes+0xac>
   21680:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return &pkt->lladdr_src;
   21682:	f101 0224 	add.w	r2, r1, #36	; 0x24
   21686:	624b      	str	r3, [r1, #36]	; 0x24
   21688:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return &pkt->lladdr_dst;
   2168a:	f101 072c 	add.w	r7, r1, #44	; 0x2c
   2168e:	628b      	str	r3, [r1, #40]	; 0x28
   21690:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21692:	62cb      	str	r3, [r1, #44]	; 0x2c
   21694:	6b03      	ldr	r3, [r0, #48]	; 0x30
   21696:	630b      	str	r3, [r1, #48]	; 0x30
		if (pkt->buffer != clone_pkt->buffer) {
   21698:	6883      	ldr	r3, [r0, #8]
   2169a:	429e      	cmp	r6, r3
   2169c:	d006      	beq.n	216ac <clone_pkt_attributes+0xac>
			clone_pkt_lladdr(pkt, clone_pkt, net_pkt_lladdr_src(clone_pkt));
   2169e:	f7ff ff8f 	bl	215c0 <clone_pkt_lladdr>
			clone_pkt_lladdr(pkt, clone_pkt, net_pkt_lladdr_dst(clone_pkt));
   216a2:	463a      	mov	r2, r7
   216a4:	4621      	mov	r1, r4
   216a6:	4628      	mov	r0, r5
   216a8:	f7ff ff8a 	bl	215c0 <clone_pkt_lladdr>
	return pkt->family;
   216ac:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   216b0:	095b      	lsrs	r3, r3, #5
   216b2:	2b01      	cmp	r3, #1
	return pkt->ipv4_ttl;
   216b4:	bf01      	itttt	eq
   216b6:	f895 3039 	ldrbeq.w	r3, [r5, #57]	; 0x39
	pkt->ipv4_ttl = ttl;
   216ba:	f884 3039 	strbeq.w	r3, [r4, #57]	; 0x39
	return pkt->ipv4_opts_len;
   216be:	f895 303a 	ldrbeq.w	r3, [r5, #58]	; 0x3a
	pkt->ipv4_opts_len = opts_len;
   216c2:	f884 303a 	strbeq.w	r3, [r4, #58]	; 0x3a
}
   216c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000216c8 <net_pkt_memset>:
{
   216c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   216ca:	2301      	movs	r3, #1
{
   216cc:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   216ce:	9300      	str	r3, [sp, #0]
   216d0:	a903      	add	r1, sp, #12
   216d2:	2300      	movs	r3, #0
   216d4:	f7ff fdd6 	bl	21284 <net_pkt_cursor_operate>
}
   216d8:	b005      	add	sp, #20
   216da:	f85d fb04 	ldr.w	pc, [sp], #4

000216de <net_pkt_read>:
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   216de:	2300      	movs	r3, #0
{
   216e0:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   216e2:	9300      	str	r3, [sp, #0]
   216e4:	2301      	movs	r3, #1
   216e6:	f7ff fdcd 	bl	21284 <net_pkt_cursor_operate>
}
   216ea:	b003      	add	sp, #12
   216ec:	f85d fb04 	ldr.w	pc, [sp], #4

000216f0 <net_pkt_read_be32>:
	ret = net_pkt_read(pkt, d32, sizeof(uint32_t));
   216f0:	2204      	movs	r2, #4
{
   216f2:	b513      	push	{r0, r1, r4, lr}
   216f4:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(uint32_t));
   216f6:	eb0d 0102 	add.w	r1, sp, r2
   216fa:	f7ff fff0 	bl	216de <net_pkt_read>
	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
   216fe:	9b01      	ldr	r3, [sp, #4]
   21700:	ba1b      	rev	r3, r3
   21702:	6023      	str	r3, [r4, #0]
}
   21704:	b002      	add	sp, #8
   21706:	bd10      	pop	{r4, pc}

00021708 <net_pkt_copy>:
{
   21708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2170c:	4606      	mov	r6, r0
   2170e:	460f      	mov	r7, r1
   21710:	4614      	mov	r4, r2
	while (c_dst->buf && c_src->buf && length) {
   21712:	68f3      	ldr	r3, [r6, #12]
   21714:	2b00      	cmp	r3, #0
   21716:	d049      	beq.n	217ac <net_pkt_copy+0xa4>
   21718:	68fb      	ldr	r3, [r7, #12]
   2171a:	2b00      	cmp	r3, #0
   2171c:	d046      	beq.n	217ac <net_pkt_copy+0xa4>
   2171e:	b90c      	cbnz	r4, 21724 <net_pkt_copy+0x1c>
	return 0;
   21720:	4620      	mov	r0, r4
   21722:	e027      	b.n	21774 <net_pkt_copy+0x6c>
		pkt_cursor_advance(pkt_dst, true);
   21724:	2101      	movs	r1, #1
   21726:	4630      	mov	r0, r6
   21728:	f7ff fd4f 	bl	211ca <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   2172c:	4638      	mov	r0, r7
   2172e:	2100      	movs	r1, #0
   21730:	f7ff fd4b 	bl	211ca <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   21734:	68f0      	ldr	r0, [r6, #12]
   21736:	b1d8      	cbz	r0, 21770 <net_pkt_copy+0x68>
   21738:	68fa      	ldr	r2, [r7, #12]
   2173a:	b1ca      	cbz	r2, 21770 <net_pkt_copy+0x68>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   2173c:	f8b2 8010 	ldrh.w	r8, [r2, #16]
   21740:	693b      	ldr	r3, [r7, #16]
   21742:	68d2      	ldr	r2, [r2, #12]
   21744:	300c      	adds	r0, #12
   21746:	1a9b      	subs	r3, r3, r2
   21748:	eba8 0803 	sub.w	r8, r8, r3
   2174c:	f7fe fcdc 	bl	20108 <net_buf_simple_max_len>
   21750:	4605      	mov	r5, r0
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
   21752:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
   21756:	68db      	ldr	r3, [r3, #12]
		if (length < s_len && length < d_len) {
   21758:	45a0      	cmp	r8, r4
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
   2175a:	eba0 0303 	sub.w	r3, r0, r3
   2175e:	eba5 0503 	sub.w	r5, r5, r3
		if (length < s_len && length < d_len) {
   21762:	d901      	bls.n	21768 <net_pkt_copy+0x60>
   21764:	42a5      	cmp	r5, r4
   21766:	d807      	bhi.n	21778 <net_pkt_copy+0x70>
			if (d_len < s_len) {
   21768:	4545      	cmp	r5, r8
   2176a:	bf28      	it	cs
   2176c:	4645      	movcs	r5, r8
		if (!len) {
   2176e:	b925      	cbnz	r5, 2177a <net_pkt_copy+0x72>
		return -ENOBUFS;
   21770:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   21774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21778:	4625      	mov	r5, r4
   2177a:	462a      	mov	r2, r5
   2177c:	6939      	ldr	r1, [r7, #16]
   2177e:	f7df f9e9 	bl	b54 <memcpy>
	return pkt->overwrite;
   21782:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   21786:	07db      	lsls	r3, r3, #31
   21788:	d404      	bmi.n	21794 <net_pkt_copy+0x8c>
	return net_buf_simple_add(&buf->b, len);
   2178a:	68f0      	ldr	r0, [r6, #12]
   2178c:	4629      	mov	r1, r5
   2178e:	300c      	adds	r0, #12
   21790:	f7fe fcac 	bl	200ec <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   21794:	2201      	movs	r2, #1
   21796:	4629      	mov	r1, r5
   21798:	4630      	mov	r0, r6
   2179a:	f7ff fd2e 	bl	211fa <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   2179e:	2200      	movs	r2, #0
   217a0:	4629      	mov	r1, r5
   217a2:	4638      	mov	r0, r7
   217a4:	f7ff fd29 	bl	211fa <pkt_cursor_update>
		length -= len;
   217a8:	1b64      	subs	r4, r4, r5
   217aa:	e7b2      	b.n	21712 <net_pkt_copy+0xa>
	if (length) {
   217ac:	2c00      	cmp	r4, #0
   217ae:	d0b7      	beq.n	21720 <net_pkt_copy+0x18>
   217b0:	e7de      	b.n	21770 <net_pkt_copy+0x68>

000217b2 <net_pkt_remaining_data>:
	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   217b2:	b170      	cbz	r0, 217d2 <net_pkt_remaining_data+0x20>
   217b4:	68c3      	ldr	r3, [r0, #12]
   217b6:	b15b      	cbz	r3, 217d0 <net_pkt_remaining_data+0x1e>
   217b8:	6900      	ldr	r0, [r0, #16]
   217ba:	b150      	cbz	r0, 217d2 <net_pkt_remaining_data+0x20>
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   217bc:	68d9      	ldr	r1, [r3, #12]
   217be:	8a1a      	ldrh	r2, [r3, #16]
   217c0:	1a40      	subs	r0, r0, r1
   217c2:	1a10      	subs	r0, r2, r0
		buf = buf->frags;
   217c4:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   217c6:	b903      	cbnz	r3, 217ca <net_pkt_remaining_data+0x18>
   217c8:	4770      	bx	lr
		data_length += buf->len;
   217ca:	8a1a      	ldrh	r2, [r3, #16]
   217cc:	4410      	add	r0, r2
   217ce:	e7f9      	b.n	217c4 <net_pkt_remaining_data+0x12>
		return 0;
   217d0:	4618      	mov	r0, r3
}
   217d2:	4770      	bx	lr

000217d4 <net_pkt_update_length>:
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   217d4:	6883      	ldr	r3, [r0, #8]
   217d6:	b92b      	cbnz	r3, 217e4 <net_pkt_update_length+0x10>
	return !length ? 0 : -EINVAL;
   217d8:	2900      	cmp	r1, #0
}
   217da:	bf14      	ite	ne
   217dc:	f06f 0015 	mvnne.w	r0, #21
   217e0:	2000      	moveq	r0, #0
   217e2:	4770      	bx	lr
		if (buf->len < length) {
   217e4:	8a1a      	ldrh	r2, [r3, #16]
   217e6:	428a      	cmp	r2, r1
			buf->len = length;
   217e8:	bf2a      	itet	cs
   217ea:	8219      	strhcs	r1, [r3, #16]
			length -= buf->len;
   217ec:	1a89      	subcc	r1, r1, r2
			length = 0;
   217ee:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   217f0:	685b      	ldr	r3, [r3, #4]
   217f2:	e7f0      	b.n	217d6 <net_pkt_update_length+0x2>

000217f4 <net_pkt_pull>:
{
   217f4:	b570      	push	{r4, r5, r6, lr}
   217f6:	4604      	mov	r4, r0
   217f8:	460d      	mov	r5, r1
	while (length) {
   217fa:	b945      	cbnz	r5, 2180e <net_pkt_pull+0x1a>
	net_pkt_cursor_init(pkt);
   217fc:	4620      	mov	r0, r4
   217fe:	f7ff fe6a 	bl	214d6 <net_pkt_cursor_init>
	return 0;
   21802:	2d00      	cmp	r5, #0
}
   21804:	bf14      	ite	ne
   21806:	f06f 0068 	mvnne.w	r0, #104	; 0x68
   2180a:	2000      	moveq	r0, #0
   2180c:	bd70      	pop	{r4, r5, r6, pc}
		pkt_cursor_advance(pkt, false);
   2180e:	2100      	movs	r1, #0
   21810:	4620      	mov	r0, r4
   21812:	f7ff fcda 	bl	211ca <pkt_cursor_advance>
		if (!c_op->buf) {
   21816:	68e1      	ldr	r1, [r4, #12]
   21818:	2900      	cmp	r1, #0
   2181a:	d0ef      	beq.n	217fc <net_pkt_pull+0x8>
		left = c_op->buf->len - (c_op->pos - c_op->buf->data);
   2181c:	6922      	ldr	r2, [r4, #16]
   2181e:	68c8      	ldr	r0, [r1, #12]
   21820:	8a0b      	ldrh	r3, [r1, #16]
   21822:	1a12      	subs	r2, r2, r0
		if (!left) {
   21824:	1a9a      	subs	r2, r3, r2
   21826:	d0e9      	beq.n	217fc <net_pkt_pull+0x8>
		if (rem > length) {
   21828:	42aa      	cmp	r2, r5
   2182a:	4616      	mov	r6, r2
   2182c:	bf28      	it	cs
   2182e:	462e      	movcs	r6, r5
		c_op->buf->len -= rem;
   21830:	1b9b      	subs	r3, r3, r6
		if (left) {
   21832:	1b92      	subs	r2, r2, r6
		c_op->buf->len -= rem;
   21834:	820b      	strh	r3, [r1, #16]
		if (left) {
   21836:	d005      	beq.n	21844 <net_pkt_pull+0x50>
			memmove(c_op->pos, c_op->pos+rem, left);
   21838:	6920      	ldr	r0, [r4, #16]
__ssp_bos_icheck3(memmove, void *, const void *)
   2183a:	1981      	adds	r1, r0, r6
   2183c:	f7f5 fd4c 	bl	172d8 <memmove>
		length -= rem;
   21840:	1bad      	subs	r5, r5, r6
   21842:	e7da      	b.n	217fa <net_pkt_pull+0x6>
			struct net_buf *buf = pkt->buffer;
   21844:	68a0      	ldr	r0, [r4, #8]
			if (buf) {
   21846:	b120      	cbz	r0, 21852 <net_pkt_pull+0x5e>
				pkt->buffer = buf->frags;
   21848:	6843      	ldr	r3, [r0, #4]
   2184a:	60a3      	str	r3, [r4, #8]
				buf->frags = NULL;
   2184c:	6042      	str	r2, [r0, #4]
				net_buf_unref(buf);
   2184e:	f7e5 fe09 	bl	7464 <net_buf_unref>
			net_pkt_cursor_init(pkt);
   21852:	4620      	mov	r0, r4
   21854:	f7ff fe3f 	bl	214d6 <net_pkt_cursor_init>
   21858:	e7f2      	b.n	21840 <net_pkt_pull+0x4c>

0002185a <net_pkt_get_current_offset>:
{
   2185a:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   2185c:	68c2      	ldr	r2, [r0, #12]
{
   2185e:	4603      	mov	r3, r0
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   21860:	b17a      	cbz	r2, 21882 <net_pkt_get_current_offset+0x28>
   21862:	6900      	ldr	r0, [r0, #16]
   21864:	b138      	cbz	r0, 21876 <net_pkt_get_current_offset+0x1c>
	struct net_buf *buf = pkt->buffer;
   21866:	6899      	ldr	r1, [r3, #8]
	offset = 0U;
   21868:	2300      	movs	r3, #0
	while (buf != pkt->cursor.buf) {
   2186a:	428a      	cmp	r2, r1
   2186c:	d104      	bne.n	21878 <net_pkt_get_current_offset+0x1e>
	offset += pkt->cursor.pos - buf->data;
   2186e:	68d2      	ldr	r2, [r2, #12]
   21870:	1a80      	subs	r0, r0, r2
   21872:	4403      	add	r3, r0
   21874:	b298      	uxth	r0, r3
}
   21876:	bd10      	pop	{r4, pc}
		offset += buf->len;
   21878:	8a0c      	ldrh	r4, [r1, #16]
		buf = buf->frags;
   2187a:	6849      	ldr	r1, [r1, #4]
		offset += buf->len;
   2187c:	4423      	add	r3, r4
   2187e:	b29b      	uxth	r3, r3
		buf = buf->frags;
   21880:	e7f3      	b.n	2186a <net_pkt_get_current_offset+0x10>
		return 0;
   21882:	4610      	mov	r0, r2
   21884:	e7f7      	b.n	21876 <net_pkt_get_current_offset+0x1c>

00021886 <net_pkt_clone_internal>:
{
   21886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2188a:	b085      	sub	sp, #20
   2188c:	4604      	mov	r4, r0
   2188e:	460d      	mov	r5, r1
   21890:	4691      	mov	r9, r2
   21892:	4698      	mov	r8, r3
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   21894:	f7ff ffe1 	bl	2185a <net_pkt_get_current_offset>
   21898:	4607      	mov	r7, r0
	clone_pkt = pkt_alloc_with_buffer(slab, net_pkt_iface(pkt),
   2189a:	68a0      	ldr	r0, [r4, #8]
   2189c:	f7ff fcea 	bl	21274 <net_pkt_get_len.isra.0>
   218a0:	2300      	movs	r3, #0
   218a2:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
	return pkt->iface;
   218a6:	69a1      	ldr	r1, [r4, #24]
   218a8:	4602      	mov	r2, r0
   218aa:	e9cd 9802 	strd	r9, r8, [sp, #8]
   218ae:	4628      	mov	r0, r5
   218b0:	9300      	str	r3, [sp, #0]
   218b2:	f7ff fe3b 	bl	2152c <pkt_alloc_with_buffer>
	return pkt->overwrite;
   218b6:	f006 0601 	and.w	r6, r6, #1
	if (!clone_pkt) {
   218ba:	4605      	mov	r5, r0
   218bc:	b1f0      	cbz	r0, 218fc <net_pkt_clone_internal+0x76>
	backup->pos = pkt->cursor.pos;
   218be:	e9d4 9803 	ldrd	r9, r8, [r4, #12]
	pkt->overwrite = overwrite;
   218c2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	net_pkt_cursor_init(pkt);
   218c6:	4620      	mov	r0, r4
   218c8:	f043 0301 	orr.w	r3, r3, #1
   218cc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   218d0:	f7ff fe01 	bl	214d6 <net_pkt_cursor_init>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   218d4:	68a0      	ldr	r0, [r4, #8]
   218d6:	f7ff fccd 	bl	21274 <net_pkt_get_len.isra.0>
   218da:	4621      	mov	r1, r4
   218dc:	4602      	mov	r2, r0
   218de:	4628      	mov	r0, r5
   218e0:	f7ff ff12 	bl	21708 <net_pkt_copy>
   218e4:	b178      	cbz	r0, 21906 <net_pkt_clone_internal+0x80>
		net_pkt_unref(clone_pkt);
   218e6:	4628      	mov	r0, r5
   218e8:	f7ff fd64 	bl	213b4 <net_pkt_unref>
   218ec:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	pkt->cursor.pos = backup->pos;
   218f0:	e9c4 9803 	strd	r9, r8, [r4, #12]
	pkt->overwrite = overwrite;
   218f4:	f366 0300 	bfi	r3, r6, #0, #1
   218f8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		return NULL;
   218fc:	2500      	movs	r5, #0
}
   218fe:	4628      	mov	r0, r5
   21900:	b005      	add	sp, #20
   21902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21906:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	clone_pkt_attributes(pkt, clone_pkt);
   2190a:	4620      	mov	r0, r4
   2190c:	f043 0301 	orr.w	r3, r3, #1
   21910:	4629      	mov	r1, r5
   21912:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
   21916:	f7ff fe73 	bl	21600 <clone_pkt_attributes>
	net_pkt_cursor_init(clone_pkt);
   2191a:	4628      	mov	r0, r5
   2191c:	f7ff fddb 	bl	214d6 <net_pkt_cursor_init>
	if (cursor_offset) {
   21920:	b117      	cbz	r7, 21928 <net_pkt_clone_internal+0xa2>
		net_pkt_skip(clone_pkt, cursor_offset);
   21922:	4639      	mov	r1, r7
   21924:	f7ff fe41 	bl	215aa <net_pkt_skip>
   21928:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
   2192c:	f366 0300 	bfi	r3, r6, #0, #1
   21930:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
   21934:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	pkt->cursor.pos = backup->pos;
   21938:	e9c4 9803 	strd	r9, r8, [r4, #12]
	pkt->overwrite = overwrite;
   2193c:	f366 0300 	bfi	r3, r6, #0, #1
   21940:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	return clone_pkt;
   21944:	e7db      	b.n	218fe <net_pkt_clone_internal+0x78>

00021946 <net_pkt_clone>:
	return net_pkt_clone_internal(pkt, pkt->slab, timeout);
   21946:	6841      	ldr	r1, [r0, #4]
   21948:	f7ff bf9d 	b.w	21886 <net_pkt_clone_internal>

0002194c <net_pkt_get_contiguous_len>:
{
   2194c:	b510      	push	{r4, lr}
	return pkt->overwrite;
   2194e:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
   21952:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   21954:	43c9      	mvns	r1, r1
   21956:	f001 0101 	and.w	r1, r1, #1
   2195a:	f7ff fc36 	bl	211ca <pkt_cursor_advance>
	if (pkt->cursor.buf && pkt->cursor.pos) {
   2195e:	68e3      	ldr	r3, [r4, #12]
   21960:	b15b      	cbz	r3, 2197a <net_pkt_get_contiguous_len+0x2e>
   21962:	6920      	ldr	r0, [r4, #16]
   21964:	b140      	cbz	r0, 21978 <net_pkt_get_contiguous_len+0x2c>
   21966:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   2196a:	07d2      	lsls	r2, r2, #31
   2196c:	bf4c      	ite	mi
   2196e:	8a1a      	ldrhmi	r2, [r3, #16]
   21970:	8a5a      	ldrhpl	r2, [r3, #18]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   21972:	68db      	ldr	r3, [r3, #12]
   21974:	1ac0      	subs	r0, r0, r3
   21976:	1a10      	subs	r0, r2, r0
}
   21978:	bd10      	pop	{r4, pc}
	return 0;
   2197a:	4618      	mov	r0, r3
   2197c:	e7fc      	b.n	21978 <net_pkt_get_contiguous_len+0x2c>

0002197e <net_pkt_is_contiguous>:
{
   2197e:	b510      	push	{r4, lr}
   21980:	460c      	mov	r4, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
   21982:	f7ff ffe3 	bl	2194c <net_pkt_get_contiguous_len>
}
   21986:	42a0      	cmp	r0, r4
   21988:	bf34      	ite	cc
   2198a:	2000      	movcc	r0, #0
   2198c:	2001      	movcs	r0, #1
   2198e:	bd10      	pop	{r4, pc}

00021990 <net_pkt_write>:
{
   21990:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   21992:	6903      	ldr	r3, [r0, #16]
{
   21994:	4604      	mov	r4, r0
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   21996:	4299      	cmp	r1, r3
{
   21998:	460e      	mov	r6, r1
   2199a:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   2199c:	d10a      	bne.n	219b4 <net_pkt_write+0x24>
	size_t len = net_pkt_get_contiguous_len(pkt);
   2199e:	f7ff ffd5 	bl	2194c <net_pkt_get_contiguous_len>
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   219a2:	4285      	cmp	r5, r0
   219a4:	d806      	bhi.n	219b4 <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
   219a6:	4629      	mov	r1, r5
   219a8:	4620      	mov	r0, r4
}
   219aa:	b002      	add	sp, #8
   219ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
   219b0:	f7ff bdfb 	b.w	215aa <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   219b4:	2301      	movs	r3, #1
   219b6:	462a      	mov	r2, r5
   219b8:	4631      	mov	r1, r6
   219ba:	4620      	mov	r0, r4
   219bc:	9300      	str	r3, [sp, #0]
   219be:	f7ff fc61 	bl	21284 <net_pkt_cursor_operate>
}
   219c2:	b002      	add	sp, #8
   219c4:	bd70      	pop	{r4, r5, r6, pc}

000219c6 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   219c6:	e9d1 1200 	ldrd	r1, r2, [r1]
   219ca:	f7ff bfe1 	b.w	21990 <net_pkt_write>

000219ce <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   219ce:	4770      	bx	lr

000219d0 <tc_rx_handler>:
{
   219d0:	b510      	push	{r4, lr}
   219d2:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   219d4:	f04f 32ff 	mov.w	r2, #4294967295
   219d8:	f04f 33ff 	mov.w	r3, #4294967295
   219dc:	4620      	mov	r0, r4
   219de:	f7f3 ff7f 	bl	158e0 <z_impl_k_queue_get>
		if (pkt == NULL) {
   219e2:	2800      	cmp	r0, #0
   219e4:	d0f6      	beq.n	219d4 <tc_rx_handler+0x4>
		net_process_rx_packet(pkt);
   219e6:	f7fe ff09 	bl	207fc <net_process_rx_packet>
   219ea:	e7f3      	b.n	219d4 <tc_rx_handler+0x4>

000219ec <net_tx_priority2tc>:
}
   219ec:	2000      	movs	r0, #0
   219ee:	4770      	bx	lr

000219f0 <net_tc_tx_init>:
}
   219f0:	4770      	bx	lr

000219f2 <dhcpv4_update_message_timeout>:
{
   219f2:	b538      	push	{r3, r4, r5, lr}
	timeout = DHCPV4_INITIAL_RETRY_TIMEOUT << dhcpv4->attempts;
   219f4:	2404      	movs	r4, #4
   219f6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
   219fa:	4605      	mov	r5, r0
	timeout = DHCPV4_INITIAL_RETRY_TIMEOUT << dhcpv4->attempts;
   219fc:	409c      	lsls	r4, r3
	if (timeout < DHCPV4_INITIAL_RETRY_TIMEOUT || timeout > 64) {
   219fe:	1f23      	subs	r3, r4, #4
		timeout = 64;
   21a00:	2b3d      	cmp	r3, #61	; 0x3d
   21a02:	bf28      	it	cs
   21a04:	2440      	movcs	r4, #64	; 0x40
   21a06:	f7e5 fc3f 	bl	7288 <z_impl_sys_rand32_get>
	timeout += (sys_rand32_get() % 3U) - 1;
   21a0a:	2203      	movs	r2, #3
   21a0c:	fbb0 f2f2 	udiv	r2, r0, r2
   21a10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   21a14:	1e63      	subs	r3, r4, #1
   21a16:	1a84      	subs	r4, r0, r2
   21a18:	441c      	add	r4, r3
	dhcpv4->attempts++;
   21a1a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
	dhcpv4_set_timeout(dhcpv4, timeout);
   21a1e:	4628      	mov	r0, r5
	dhcpv4->attempts++;
   21a20:	3301      	adds	r3, #1
	dhcpv4_set_timeout(dhcpv4, timeout);
   21a22:	4621      	mov	r1, r4
	dhcpv4->attempts++;
   21a24:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	dhcpv4_set_timeout(dhcpv4, timeout);
   21a28:	f7e8 fa94 	bl	9f54 <dhcpv4_set_timeout>
}
   21a2c:	4620      	mov	r0, r4
   21a2e:	bd38      	pop	{r3, r4, r5, pc}

00021a30 <dhcpv4_add_option_length_value>:
{
   21a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21a32:	4615      	mov	r5, r2
   21a34:	f88d 1007 	strb.w	r1, [sp, #7]
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
   21a38:	2201      	movs	r2, #1
   21a3a:	f10d 0107 	add.w	r1, sp, #7
   21a3e:	4604      	mov	r4, r0
   21a40:	461e      	mov	r6, r3
   21a42:	f7ff ffa5 	bl	21990 <net_pkt_write>
	if (net_pkt_write_u8(pkt, option) ||
   21a46:	b110      	cbz	r0, 21a4e <dhcpv4_add_option_length_value+0x1e>
		return false;
   21a48:	2000      	movs	r0, #0
}
   21a4a:	b002      	add	sp, #8
   21a4c:	bd70      	pop	{r4, r5, r6, pc}
   21a4e:	2201      	movs	r2, #1
   21a50:	4620      	mov	r0, r4
   21a52:	f10d 0107 	add.w	r1, sp, #7
   21a56:	f88d 5007 	strb.w	r5, [sp, #7]
   21a5a:	f7ff ff99 	bl	21990 <net_pkt_write>
	if (net_pkt_write_u8(pkt, option) ||
   21a5e:	2800      	cmp	r0, #0
   21a60:	d1f2      	bne.n	21a48 <dhcpv4_add_option_length_value+0x18>
	    net_pkt_write(pkt, value, size)) {
   21a62:	462a      	mov	r2, r5
   21a64:	4631      	mov	r1, r6
   21a66:	4620      	mov	r0, r4
   21a68:	f7ff ff92 	bl	21990 <net_pkt_write>
	    net_pkt_write_u8(pkt, size) ||
   21a6c:	fab0 f080 	clz	r0, r0
   21a70:	0940      	lsrs	r0, r0, #5
   21a72:	e7ea      	b.n	21a4a <dhcpv4_add_option_length_value+0x1a>

00021a74 <dhcpv4_send_discover>:
{
   21a74:	b530      	push	{r4, r5, lr}
	iface->config.dhcpv4.xid++;
   21a76:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   21a78:	b085      	sub	sp, #20
	iface->config.dhcpv4.xid++;
   21a7a:	3301      	adds	r3, #1
   21a7c:	6243      	str	r3, [r0, #36]	; 0x24
{
   21a7e:	4604      	mov	r4, r0
	pkt = dhcpv4_create_message(iface, DHCPV4_MSG_TYPE_DISCOVER,
   21a80:	f7e6 ffda 	bl	8a38 <net_ipv4_broadcast_address>
   21a84:	2300      	movs	r3, #0
   21a86:	9000      	str	r0, [sp, #0]
   21a88:	461a      	mov	r2, r3
   21a8a:	2101      	movs	r1, #1
   21a8c:	4620      	mov	r0, r4
   21a8e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   21a92:	f7e8 faef 	bl	a074 <dhcpv4_create_message>
	if (!pkt) {
   21a96:	4605      	mov	r5, r0
   21a98:	b130      	cbz	r0, 21aa8 <dhcpv4_send_discover+0x34>
	if (net_send_data(pkt) < 0) {
   21a9a:	f7fe fe44 	bl	20726 <net_send_data>
   21a9e:	2800      	cmp	r0, #0
   21aa0:	da0c      	bge.n	21abc <dhcpv4_send_discover+0x48>
		net_pkt_unref(pkt);
   21aa2:	4628      	mov	r0, r5
   21aa4:	f7ff fc86 	bl	213b4 <net_pkt_unref>
	return iface->config.dhcpv4.xid %
   21aa8:	2309      	movs	r3, #9
   21aaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   21aac:	fbb0 f3f3 	udiv	r3, r0, r3
   21ab0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   21ab4:	1ac0      	subs	r0, r0, r3
}
   21ab6:	3001      	adds	r0, #1
   21ab8:	b005      	add	sp, #20
   21aba:	bd30      	pop	{r4, r5, pc}
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
   21abc:	f104 0010 	add.w	r0, r4, #16
}
   21ac0:	b005      	add	sp, #20
   21ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
   21ac6:	f7ff bf94 	b.w	219f2 <dhcpv4_update_message_timeout>

00021aca <dhcpv4_send_request>:
{
   21aca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21ace:	4604      	mov	r4, r0
	const struct in_addr *server_addr = net_ipv4_broadcast_address();
   21ad0:	f7e6 ffb2 	bl	8a38 <net_ipv4_broadcast_address>
	iface->config.dhcpv4.xid++;
   21ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const struct in_addr *server_addr = net_ipv4_broadcast_address();
   21ad6:	4680      	mov	r8, r0
	iface->config.dhcpv4.xid++;
   21ad8:	3301      	adds	r3, #1
   21ada:	6263      	str	r3, [r4, #36]	; 0x24
	switch (iface->config.dhcpv4.state) {
   21adc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   21ae0:	2b06      	cmp	r3, #6
   21ae2:	d82e      	bhi.n	21b42 <dhcpv4_send_request+0x78>
   21ae4:	e8df f003 	tbb	[pc, r3]
   21ae8:	04303030 	.word	0x04303030
   21aec:	2a24      	.short	0x2a24
   21aee:	30          	.byte	0x30
   21aef:	00          	.byte	0x00
		with_server_id = true;
   21af0:	2501      	movs	r5, #1
	const struct in_addr *ciaddr = NULL;
   21af2:	2700      	movs	r7, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21af6:	6423      	str	r3, [r4, #64]	; 0x40
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
   21af8:	f104 0010 	add.w	r0, r4, #16
   21afc:	f7ff ff79 	bl	219f2 <dhcpv4_update_message_timeout>
	pkt = dhcpv4_create_message(iface, DHCPV4_MSG_TYPE_REQUEST,
   21b00:	463b      	mov	r3, r7
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
   21b02:	4606      	mov	r6, r0
	pkt = dhcpv4_create_message(iface, DHCPV4_MSG_TYPE_REQUEST,
   21b04:	463a      	mov	r2, r7
   21b06:	4620      	mov	r0, r4
   21b08:	2103      	movs	r1, #3
   21b0a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   21b0e:	f8cd 8000 	str.w	r8, [sp]
   21b12:	f7e8 faaf 	bl	a074 <dhcpv4_create_message>
	if (!pkt) {
   21b16:	4604      	mov	r4, r0
   21b18:	b130      	cbz	r0, 21b28 <dhcpv4_send_request+0x5e>
	if (net_send_data(pkt) < 0) {
   21b1a:	f7fe fe04 	bl	20726 <net_send_data>
   21b1e:	2800      	cmp	r0, #0
   21b20:	da02      	bge.n	21b28 <dhcpv4_send_request+0x5e>
		net_pkt_unref(pkt);
   21b22:	4620      	mov	r0, r4
   21b24:	f7ff fc46 	bl	213b4 <net_pkt_unref>
}
   21b28:	4630      	mov	r0, r6
   21b2a:	b004      	add	sp, #16
   21b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ciaddr = &iface->config.dhcpv4.requested_ip;
   21b30:	f104 0738 	add.w	r7, r4, #56	; 0x38
		server_addr = &iface->config.dhcpv4.server_id;
   21b34:	f104 0834 	add.w	r8, r4, #52	; 0x34
	bool with_server_id = false;
   21b38:	2500      	movs	r5, #0
		break;
   21b3a:	e7dd      	b.n	21af8 <dhcpv4_send_request+0x2e>
		ciaddr = &iface->config.dhcpv4.requested_ip;
   21b3c:	f104 0738 	add.w	r7, r4, #56	; 0x38
   21b40:	e7fa      	b.n	21b38 <dhcpv4_send_request+0x6e>
	switch (iface->config.dhcpv4.state) {
   21b42:	2500      	movs	r5, #0
   21b44:	462f      	mov	r7, r5
   21b46:	e7d7      	b.n	21af8 <dhcpv4_send_request+0x2e>
   21b48:	f04f 36ff 	mov.w	r6, #4294967295
   21b4c:	e7ec      	b.n	21b28 <dhcpv4_send_request+0x5e>

00021b4e <net_dhcpv4_start>:
	return dhcpv4_start_internal(iface, true);
   21b4e:	2101      	movs	r1, #1
   21b50:	f7e8 ba52 	b.w	9ff8 <dhcpv4_start_internal>

00021b54 <icmpv4_create>:
{
   21b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   21b56:	2304      	movs	r3, #4
   21b58:	2500      	movs	r5, #0
{
   21b5a:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   21b5c:	4669      	mov	r1, sp
{
   21b5e:	4604      	mov	r4, r0
   21b60:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   21b62:	e9cd 5300 	strd	r5, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   21b66:	f7e7 fed9 	bl	991c <net_pkt_get_data>
	if (!icmp_hdr) {
   21b6a:	b148      	cbz	r0, 21b80 <icmpv4_create+0x2c>
	icmp_hdr->type   = icmp_type;
   21b6c:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   21b6e:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   21b70:	7085      	strb	r5, [r0, #2]
   21b72:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
   21b74:	4669      	mov	r1, sp
   21b76:	4620      	mov	r0, r4
   21b78:	f7ff ff25 	bl	219c6 <net_pkt_set_data>
}
   21b7c:	b003      	add	sp, #12
   21b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   21b80:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21b84:	e7fa      	b.n	21b7c <icmpv4_create+0x28>

00021b86 <net_ipv4_is_addr_bcast>:
{
   21b86:	b538      	push	{r3, r4, r5, lr}
   21b88:	460c      	mov	r4, r1
   21b8a:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   21b8c:	f7e6 ff54 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   21b90:	6822      	ldr	r2, [r4, #0]
   21b92:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   21b94:	429a      	cmp	r2, r3
   21b96:	d005      	beq.n	21ba4 <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   21b98:	4621      	mov	r1, r4
   21b9a:	4628      	mov	r0, r5
}
   21b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
   21ba0:	f7e6 ba14 	b.w	7fcc <net_if_ipv4_is_addr_bcast>
}
   21ba4:	2001      	movs	r0, #1
   21ba6:	bd38      	pop	{r3, r4, r5, pc}

00021ba8 <icmpv4_handle_echo_request>:
{
   21ba8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return UNALIGNED_GET(&addr->s_addr) == 0;
   21bac:	68cb      	ldr	r3, [r1, #12]
   21bae:	4605      	mov	r5, r0
   21bb0:	460e      	mov	r6, r1
	if (net_ipv4_is_addr_unspecified((struct in_addr *)ip_hdr->src)) {
   21bb2:	b91b      	cbnz	r3, 21bbc <icmpv4_handle_echo_request+0x14>
	return NET_DROP;
   21bb4:	2002      	movs	r0, #2
}
   21bb6:	b002      	add	sp, #8
   21bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t bytes = 0;
   21bbc:	2200      	movs	r2, #0
   21bbe:	6883      	ldr	r3, [r0, #8]
	while (buf) {
   21bc0:	2b00      	cmp	r3, #0
   21bc2:	d15e      	bne.n	21c82 <icmpv4_handle_echo_request+0xda>
	return pkt->ipv4_opts_len;
   21bc4:	f895 103a 	ldrb.w	r1, [r5, #58]	; 0x3a
		      net_pkt_ip_hdr_len(pkt) -
   21bc8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   21bcc:	440b      	add	r3, r1
   21bce:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
   21bd2:	33fc      	adds	r3, #252	; 0xfc
   21bd4:	4413      	add	r3, r2
   21bd6:	fa1f f883 	uxth.w	r8, r3
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
   21bda:	b21b      	sxth	r3, r3
   21bdc:	2b03      	cmp	r3, #3
   21bde:	dde9      	ble.n	21bb4 <icmpv4_handle_echo_request+0xc>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   21be0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   21be4:	2300      	movs	r3, #0
   21be6:	e9cd 2300 	strd	r2, r3, [sp]
   21bea:	2301      	movs	r3, #1
   21bec:	69a8      	ldr	r0, [r5, #24]
   21bee:	461a      	mov	r2, r3
   21bf0:	4441      	add	r1, r8
   21bf2:	f7e7 fe81 	bl	98f8 <net_pkt_alloc_with_buffer>
	if (!reply) {
   21bf6:	4604      	mov	r4, r0
   21bf8:	2800      	cmp	r0, #0
   21bfa:	d0db      	beq.n	21bb4 <icmpv4_handle_echo_request+0xc>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
   21bfc:	6933      	ldr	r3, [r6, #16]
	return pkt->iface;
   21bfe:	69a8      	ldr	r0, [r5, #24]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
   21c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   21c04:	2be0      	cmp	r3, #224	; 0xe0
   21c06:	f106 0710 	add.w	r7, r6, #16
   21c0a:	d13e      	bne.n	21c8a <icmpv4_handle_echo_request+0xe2>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   21c0c:	4639      	mov	r1, r7
   21c0e:	69a8      	ldr	r0, [r5, #24]
   21c10:	f7e6 fa22 	bl	8058 <net_if_ipv4_select_src_addr>
   21c14:	4607      	mov	r7, r0
	return pkt->ip_dscp;
   21c16:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	pkt->ip_dscp = dscp;
   21c1a:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (net_ipv4_create(reply, src, (struct in_addr *)ip_hdr->src)) {
   21c1e:	4639      	mov	r1, r7
   21c20:	f362 0305 	bfi	r3, r2, #0, #6
   21c24:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->ip_ecn;
   21c28:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_ecn = ecn;
   21c2c:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
	return pkt->ip_ecn;
   21c30:	099b      	lsrs	r3, r3, #6
	pkt->ip_ecn = ecn;
   21c32:	f363 1287 	bfi	r2, r3, #6, #2
   21c36:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
   21c3a:	4620      	mov	r0, r4
   21c3c:	f106 020c 	add.w	r2, r6, #12
   21c40:	f000 f92b 	bl	21e9a <net_ipv4_create>
   21c44:	4602      	mov	r2, r0
   21c46:	bb30      	cbnz	r0, 21c96 <icmpv4_handle_echo_request+0xee>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   21c48:	4601      	mov	r1, r0
   21c4a:	4620      	mov	r0, r4
   21c4c:	f7ff ff82 	bl	21b54 <icmpv4_create>
   21c50:	bb08      	cbnz	r0, 21c96 <icmpv4_handle_echo_request+0xee>
	    net_pkt_copy(reply, pkt, payload_len)) {
   21c52:	4642      	mov	r2, r8
   21c54:	4629      	mov	r1, r5
   21c56:	4620      	mov	r0, r4
   21c58:	f7ff fd56 	bl	21708 <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   21c5c:	4606      	mov	r6, r0
   21c5e:	b9d0      	cbnz	r0, 21c96 <icmpv4_handle_echo_request+0xee>
	net_pkt_cursor_init(reply);
   21c60:	4620      	mov	r0, r4
   21c62:	f7ff fc38 	bl	214d6 <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
   21c66:	2101      	movs	r1, #1
   21c68:	4620      	mov	r0, r4
   21c6a:	f000 f92a 	bl	21ec2 <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
   21c6e:	4620      	mov	r0, r4
   21c70:	f7fe fd59 	bl	20726 <net_send_data>
   21c74:	2800      	cmp	r0, #0
   21c76:	db0e      	blt.n	21c96 <icmpv4_handle_echo_request+0xee>
	net_pkt_unref(pkt);
   21c78:	4628      	mov	r0, r5
   21c7a:	f7ff fb9b 	bl	213b4 <net_pkt_unref>
	return NET_OK;
   21c7e:	4630      	mov	r0, r6
   21c80:	e799      	b.n	21bb6 <icmpv4_handle_echo_request+0xe>
		bytes += buf->len;
   21c82:	8a19      	ldrh	r1, [r3, #16]
		buf = buf->frags;
   21c84:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   21c86:	440a      	add	r2, r1
		buf = buf->frags;
   21c88:	e79a      	b.n	21bc0 <icmpv4_handle_echo_request+0x18>
	    net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   21c8a:	4639      	mov	r1, r7
   21c8c:	f7ff ff7b 	bl	21b86 <net_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
   21c90:	2800      	cmp	r0, #0
   21c92:	d1bb      	bne.n	21c0c <icmpv4_handle_echo_request+0x64>
   21c94:	e7bf      	b.n	21c16 <icmpv4_handle_echo_request+0x6e>
		net_pkt_unref(reply);
   21c96:	4620      	mov	r0, r4
   21c98:	f7ff fb8c 	bl	213b4 <net_pkt_unref>
   21c9c:	e78a      	b.n	21bb4 <icmpv4_handle_echo_request+0xc>

00021c9e <net_icmpv4_finalize>:
{
   21c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   21ca0:	2304      	movs	r3, #4
   21ca2:	2600      	movs	r6, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   21ca4:	4669      	mov	r1, sp
{
   21ca6:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   21ca8:	e9cd 6300 	strd	r6, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   21cac:	f7e7 fe36 	bl	991c <net_pkt_get_data>
	if (!icmp_hdr) {
   21cb0:	4604      	mov	r4, r0
   21cb2:	b180      	cbz	r0, 21cd6 <net_icmpv4_finalize+0x38>
	icmp_hdr->chksum = 0U;
   21cb4:	7086      	strb	r6, [r0, #2]
   21cb6:	70c6      	strb	r6, [r0, #3]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   21cb8:	69a8      	ldr	r0, [r5, #24]
   21cba:	f7fe fef5 	bl	20aa8 <net_if_need_calc_tx_checksum>
   21cbe:	b120      	cbz	r0, 21cca <net_icmpv4_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
   21cc0:	2101      	movs	r1, #1
   21cc2:	4628      	mov	r0, r5
   21cc4:	f7fe ffbc 	bl	20c40 <net_calc_chksum>
		icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
   21cc8:	8060      	strh	r0, [r4, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
   21cca:	4669      	mov	r1, sp
   21ccc:	4628      	mov	r0, r5
   21cce:	f7ff fe7a 	bl	219c6 <net_pkt_set_data>
}
   21cd2:	b002      	add	sp, #8
   21cd4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   21cd6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21cda:	e7fa      	b.n	21cd2 <net_icmpv4_finalize+0x34>

00021cdc <net_icmpv4_send_error>:
{
   21cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21ce0:	2314      	movs	r3, #20
{
   21ce2:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21ce4:	2400      	movs	r4, #0
{
   21ce6:	b086      	sub	sp, #24
   21ce8:	4688      	mov	r8, r1
   21cea:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21cec:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   21cf0:	f7ff fbf1 	bl	214d6 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
   21cf4:	4628      	mov	r0, r5
   21cf6:	a902      	add	r1, sp, #8
   21cf8:	f7e7 fe10 	bl	991c <net_pkt_get_data>
	if (!ip_hdr) {
   21cfc:	4606      	mov	r6, r0
   21cfe:	2800      	cmp	r0, #0
   21d00:	d037      	beq.n	21d72 <net_icmpv4_send_error+0x96>
	if (ip_hdr->proto == IPPROTO_ICMP) {
   21d02:	7a43      	ldrb	r3, [r0, #9]
   21d04:	2b01      	cmp	r3, #1
   21d06:	d110      	bne.n	21d2a <net_icmpv4_send_error+0x4e>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   21d08:	2304      	movs	r3, #4
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   21d0a:	4628      	mov	r0, r5
   21d0c:	a904      	add	r1, sp, #16
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   21d0e:	9404      	str	r4, [sp, #16]
   21d10:	9305      	str	r3, [sp, #20]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   21d12:	f7e7 fe03 	bl	991c <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
   21d16:	b110      	cbz	r0, 21d1e <net_icmpv4_send_error+0x42>
   21d18:	7843      	ldrb	r3, [r0, #1]
   21d1a:	2b07      	cmp	r3, #7
   21d1c:	d805      	bhi.n	21d2a <net_icmpv4_send_error+0x4e>
			err = -EINVAL;
   21d1e:	f06f 0615 	mvn.w	r6, #21
}
   21d22:	4630      	mov	r0, r6
   21d24:	b006      	add	sp, #24
   21d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				   (struct in_addr *)ip_hdr->dst)) {
   21d2a:	f106 0a10 	add.w	sl, r6, #16
	if (net_ipv4_is_addr_bcast(net_pkt_iface(orig),
   21d2e:	4651      	mov	r1, sl
   21d30:	69a8      	ldr	r0, [r5, #24]
   21d32:	f7ff ff28 	bl	21b86 <net_ipv4_is_addr_bcast>
   21d36:	b9e0      	cbnz	r0, 21d72 <net_icmpv4_send_error+0x96>
	if (ip_hdr->proto == IPPROTO_UDP) {
   21d38:	7a73      	ldrb	r3, [r6, #9]
   21d3a:	2b11      	cmp	r3, #17
   21d3c:	d01c      	beq.n	21d78 <net_icmpv4_send_error+0x9c>
		copy_len = sizeof(struct net_ipv4_hdr) +
   21d3e:	2b06      	cmp	r3, #6
   21d40:	bf14      	ite	ne
   21d42:	2700      	movne	r7, #0
   21d44:	2728      	moveq	r7, #40	; 0x28
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   21d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   21d4a:	2300      	movs	r3, #0
   21d4c:	e9cd 2300 	strd	r2, r3, [sp]
   21d50:	2301      	movs	r3, #1
   21d52:	69a8      	ldr	r0, [r5, #24]
   21d54:	461a      	mov	r2, r3
   21d56:	1d39      	adds	r1, r7, #4
   21d58:	f7e7 fdce 	bl	98f8 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   21d5c:	4604      	mov	r4, r0
   21d5e:	b3b0      	cbz	r0, 21dce <net_icmpv4_send_error+0xf2>
	if (net_ipv4_create(pkt, (struct in_addr *)ip_hdr->dst,
   21d60:	4651      	mov	r1, sl
   21d62:	f106 020c 	add.w	r2, r6, #12
   21d66:	f000 f898 	bl	21e9a <net_ipv4_create>
   21d6a:	b138      	cbz	r0, 21d7c <net_icmpv4_send_error+0xa0>
	net_pkt_unref(pkt);
   21d6c:	4620      	mov	r0, r4
   21d6e:	f7ff fb21 	bl	213b4 <net_pkt_unref>
	int err = -EIO;
   21d72:	f06f 0604 	mvn.w	r6, #4
   21d76:	e7d4      	b.n	21d22 <net_icmpv4_send_error+0x46>
		copy_len = sizeof(struct net_ipv4_hdr) +
   21d78:	271c      	movs	r7, #28
   21d7a:	e7e4      	b.n	21d46 <net_icmpv4_send_error+0x6a>
	    icmpv4_create(pkt, type, code) ||
   21d7c:	4641      	mov	r1, r8
   21d7e:	464a      	mov	r2, r9
   21d80:	4620      	mov	r0, r4
   21d82:	f7ff fee7 	bl	21b54 <icmpv4_create>
			    (struct in_addr *)ip_hdr->src) ||
   21d86:	4601      	mov	r1, r0
   21d88:	2800      	cmp	r0, #0
   21d8a:	d1ef      	bne.n	21d6c <net_icmpv4_send_error+0x90>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   21d8c:	2204      	movs	r2, #4
   21d8e:	4620      	mov	r0, r4
   21d90:	f7ff fc9a 	bl	216c8 <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
   21d94:	2800      	cmp	r0, #0
   21d96:	d1e9      	bne.n	21d6c <net_icmpv4_send_error+0x90>
	    net_pkt_copy(pkt, orig, copy_len)) {
   21d98:	463a      	mov	r2, r7
   21d9a:	4629      	mov	r1, r5
   21d9c:	4620      	mov	r0, r4
   21d9e:	f7ff fcb3 	bl	21708 <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   21da2:	4606      	mov	r6, r0
   21da4:	2800      	cmp	r0, #0
   21da6:	d1e1      	bne.n	21d6c <net_icmpv4_send_error+0x90>
	net_pkt_cursor_init(pkt);
   21da8:	4620      	mov	r0, r4
   21daa:	f7ff fb94 	bl	214d6 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
   21dae:	2101      	movs	r1, #1
   21db0:	4620      	mov	r0, r4
   21db2:	f000 f886 	bl	21ec2 <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   21db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (net_send_data(pkt) >= 0) {
   21db8:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   21dba:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   21dbc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   21dc0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if (net_send_data(pkt) >= 0) {
   21dc4:	f7fe fcaf 	bl	20726 <net_send_data>
   21dc8:	2800      	cmp	r0, #0
   21dca:	daaa      	bge.n	21d22 <net_icmpv4_send_error+0x46>
   21dcc:	e7ce      	b.n	21d6c <net_icmpv4_send_error+0x90>
		err =  -ENOMEM;
   21dce:	f06f 060b 	mvn.w	r6, #11
   21dd2:	e7a6      	b.n	21d22 <net_icmpv4_send_error+0x46>

00021dd4 <net_ipv4_is_addr_mcast>:
   21dd4:	6800      	ldr	r0, [r0, #0]
   21dd6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
   21dda:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   21dde:	4258      	negs	r0, r3
   21de0:	4158      	adcs	r0, r3
   21de2:	4770      	bx	lr

00021de4 <net_ipv4_is_addr_bcast>:
{
   21de4:	b538      	push	{r3, r4, r5, lr}
   21de6:	460c      	mov	r4, r1
   21de8:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   21dea:	f7e6 fe25 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   21dee:	6822      	ldr	r2, [r4, #0]
   21df0:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   21df2:	429a      	cmp	r2, r3
   21df4:	d005      	beq.n	21e02 <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   21df6:	4621      	mov	r1, r4
   21df8:	4628      	mov	r0, r5
}
   21dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
   21dfe:	f7e6 b8e5 	b.w	7fcc <net_if_ipv4_is_addr_bcast>
}
   21e02:	2001      	movs	r0, #1
   21e04:	bd38      	pop	{r3, r4, r5, pc}

00021e06 <net_ipv4_create_full>:
			 uint8_t tos,
			 uint16_t id,
			 uint8_t flags,
			 uint16_t offset,
			 uint8_t ttl)
{
   21e06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e0a:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21e0c:	f04f 0800 	mov.w	r8, #0
   21e10:	2214      	movs	r2, #20
{
   21e12:	b085      	sub	sp, #20
   21e14:	469b      	mov	fp, r3
   21e16:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   21e1a:	460e      	mov	r6, r1
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   21e1c:	a902      	add	r1, sp, #8
{
   21e1e:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21e20:	e9cd 8202 	strd	r8, r2, [sp, #8]
{
   21e24:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   21e28:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
   21e2c:	9301      	str	r3, [sp, #4]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   21e2e:	f7e7 fd75 	bl	991c <net_pkt_get_data>
	if (!ipv4_hdr) {
   21e32:	4604      	mov	r4, r0
   21e34:	b370      	cbz	r0, 21e94 <net_ipv4_create_full+0x8e>
		return -ENOBUFS;
	}

	ipv4_hdr->vhl       = 0x45;
   21e36:	2245      	movs	r2, #69	; 0x45
	ipv4_hdr->tos       = tos;
	ipv4_hdr->len       = 0U;
	ipv4_hdr->id[0]     = id >> 8;
   21e38:	9b01      	ldr	r3, [sp, #4]
	ipv4_hdr->vhl       = 0x45;
   21e3a:	7002      	strb	r2, [r0, #0]
	ipv4_hdr->id[1]     = id;
   21e3c:	7143      	strb	r3, [r0, #5]
	ipv4_hdr->id[0]     = id >> 8;
   21e3e:	0a1a      	lsrs	r2, r3, #8
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
   21e40:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	ipv4_hdr->tos       = tos;
   21e44:	f880 b001 	strb.w	fp, [r0, #1]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
   21e48:	015b      	lsls	r3, r3, #5
   21e4a:	ea43 231a 	orr.w	r3, r3, sl, lsr #8
	ipv4_hdr->len       = 0U;
   21e4e:	f880 8002 	strb.w	r8, [r0, #2]
   21e52:	f880 8003 	strb.w	r8, [r0, #3]
	ipv4_hdr->id[0]     = id >> 8;
   21e56:	7102      	strb	r2, [r0, #4]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
   21e58:	7183      	strb	r3, [r0, #6]
	ipv4_hdr->offset[1] = offset;
   21e5a:	f880 a007 	strb.w	sl, [r0, #7]
	ipv4_hdr->ttl       = ttl;
   21e5e:	f880 9008 	strb.w	r9, [r0, #8]

	if (ttl == 0U) {
   21e62:	f1b9 0f00 	cmp.w	r9, #0
   21e66:	d103      	bne.n	21e70 <net_ipv4_create_full+0x6a>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
   21e68:	69a8      	ldr	r0, [r5, #24]
   21e6a:	f7fe fd8f 	bl	2098c <net_if_ipv4_get_ttl>
   21e6e:	7220      	strb	r0, [r4, #8]
	}

	ipv4_hdr->proto     = 0U;
   21e70:	2300      	movs	r3, #0
   21e72:	7263      	strb	r3, [r4, #9]
	ipv4_hdr->chksum    = 0U;
   21e74:	72a3      	strb	r3, [r4, #10]
   21e76:	72e3      	strb	r3, [r4, #11]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
   21e78:	683b      	ldr	r3, [r7, #0]
   21e7a:	6123      	str	r3, [r4, #16]
   21e7c:	6833      	ldr	r3, [r6, #0]
   21e7e:	60e3      	str	r3, [r4, #12]
	pkt->ip_hdr_len = len;
   21e80:	2314      	movs	r3, #20
	net_ipv4_addr_copy_raw(ipv4_hdr->dst, (uint8_t *)dst);
	net_ipv4_addr_copy_raw(ipv4_hdr->src, (uint8_t *)src);

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
   21e82:	4628      	mov	r0, r5
   21e84:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
   21e88:	a902      	add	r1, sp, #8
   21e8a:	f7ff fd9c 	bl	219c6 <net_pkt_set_data>
}
   21e8e:	b005      	add	sp, #20
   21e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   21e94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21e98:	e7f9      	b.n	21e8e <net_ipv4_create_full+0x88>

00021e9a <net_ipv4_create>:

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
   21e9a:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_NET_IP_DSCP_ECN)) {
		net_ipv4_set_dscp(&tos, net_pkt_ip_dscp(pkt));
		net_ipv4_set_ecn(&tos, net_pkt_ip_ecn(pkt));
	}

	return net_ipv4_create_full(pkt, src, dst, tos, 0U, 0U, 0U,
   21e9c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
{
   21ea0:	b085      	sub	sp, #20
	return pkt->ip_dscp;
   21ea2:	f890 503b 	ldrb.w	r5, [r0, #59]	; 0x3b
	return net_ipv4_create_full(pkt, src, dst, tos, 0U, 0U, 0U,
   21ea6:	9403      	str	r4, [sp, #12]
   21ea8:	2400      	movs	r4, #0
	*tos |= (dscp << NET_IPV4_DSCP_OFFSET) & NET_IPV4_DSCP_MASK;
   21eaa:	f005 033f 	and.w	r3, r5, #63	; 0x3f
   21eae:	009b      	lsls	r3, r3, #2
   21eb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21eb4:	9400      	str	r4, [sp, #0]
   21eb6:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
   21eba:	f7ff ffa4 	bl	21e06 <net_ipv4_create_full>
				    net_pkt_ipv4_ttl(pkt));
}
   21ebe:	b005      	add	sp, #20
   21ec0:	bd30      	pop	{r4, r5, pc}

00021ec2 <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, uint8_t next_header_proto)
{
   21ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21ec4:	2314      	movs	r3, #20
   21ec6:	2500      	movs	r5, #0
   21ec8:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   21ecc:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
{
   21ed0:	460e      	mov	r6, r1
   21ed2:	f043 0301 	orr.w	r3, r3, #1
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   21ed6:	4669      	mov	r1, sp
   21ed8:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
{
   21edc:	4604      	mov	r4, r0
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   21ede:	f7e7 fd1d 	bl	991c <net_pkt_get_data>
	if (!ipv4_hdr) {
   21ee2:	4607      	mov	r7, r0
   21ee4:	b340      	cbz	r0, 21f38 <net_ipv4_finalize+0x76>
	size_t bytes = 0;
   21ee6:	462b      	mov	r3, r5
   21ee8:	68a2      	ldr	r2, [r4, #8]
	while (buf) {
   21eea:	b9aa      	cbnz	r2, 21f18 <net_ipv4_finalize+0x56>
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   21eec:	ba5b      	rev16	r3, r3
   21eee:	807b      	strh	r3, [r7, #2]
	ipv4_hdr->proto = next_header_proto;
   21ef0:	727e      	strb	r6, [r7, #9]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   21ef2:	69a0      	ldr	r0, [r4, #24]
   21ef4:	f7fe fdd8 	bl	20aa8 <net_if_need_calc_tx_checksum>
   21ef8:	b118      	cbz	r0, 21f02 <net_ipv4_finalize+0x40>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
   21efa:	4620      	mov	r0, r4
   21efc:	f7fe ff27 	bl	20d4e <net_calc_chksum_ipv4>
   21f00:	8178      	strh	r0, [r7, #10]
	}

	net_pkt_set_data(pkt, &ipv4_access);
   21f02:	4669      	mov	r1, sp
   21f04:	4620      	mov	r0, r4
   21f06:	f7ff fd5e 	bl	219c6 <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
   21f0a:	2e11      	cmp	r6, #17
   21f0c:	d108      	bne.n	21f20 <net_ipv4_finalize+0x5e>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
   21f0e:	4620      	mov	r0, r4
   21f10:	f000 fb2d 	bl	2256e <net_udp_finalize>
	} else if (next_header_proto == IPPROTO_ICMP) {
		return net_icmpv4_finalize(pkt);
	}

	return 0;
}
   21f14:	b003      	add	sp, #12
   21f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   21f18:	8a11      	ldrh	r1, [r2, #16]
		buf = buf->frags;
   21f1a:	6852      	ldr	r2, [r2, #4]
		bytes += buf->len;
   21f1c:	440b      	add	r3, r1
		buf = buf->frags;
   21f1e:	e7e4      	b.n	21eea <net_ipv4_finalize+0x28>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   21f20:	2e06      	cmp	r6, #6
   21f22:	d103      	bne.n	21f2c <net_ipv4_finalize+0x6a>
		return net_tcp_finalize(pkt);
   21f24:	4620      	mov	r0, r4
   21f26:	f000 f9d9 	bl	222dc <net_tcp_finalize>
   21f2a:	e7f3      	b.n	21f14 <net_ipv4_finalize+0x52>
	} else if (next_header_proto == IPPROTO_ICMP) {
   21f2c:	2e01      	cmp	r6, #1
   21f2e:	d106      	bne.n	21f3e <net_ipv4_finalize+0x7c>
		return net_icmpv4_finalize(pkt);
   21f30:	4620      	mov	r0, r4
   21f32:	f7ff feb4 	bl	21c9e <net_icmpv4_finalize>
   21f36:	e7ed      	b.n	21f14 <net_ipv4_finalize+0x52>
		return -ENOBUFS;
   21f38:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21f3c:	e7ea      	b.n	21f14 <net_ipv4_finalize+0x52>
	return 0;
   21f3e:	2000      	movs	r0, #0
   21f40:	e7e8      	b.n	21f14 <net_ipv4_finalize+0x52>

00021f42 <net_ipv4_input>:
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21f42:	2314      	movs	r3, #20
{
   21f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   21f46:	b091      	sub	sp, #68	; 0x44
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   21f48:	eb0d 0203 	add.w	r2, sp, r3
   21f4c:	9207      	str	r2, [sp, #28]
   21f4e:	2208      	movs	r2, #8
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21f50:	2700      	movs	r7, #0
{
   21f52:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   21f54:	9208      	str	r2, [sp, #32]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   21f56:	aa0b      	add	r2, sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   21f58:	e9cd 7303 	strd	r7, r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   21f5c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	int real_len = net_pkt_get_len(pkt);
   21f60:	6883      	ldr	r3, [r0, #8]
	while (buf) {
   21f62:	b943      	cbnz	r3, 21f76 <net_ipv4_input+0x34>
	net_pkt_cursor_backup(pkt, &hdr_start);
#endif

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   21f64:	4620      	mov	r0, r4
   21f66:	a903      	add	r1, sp, #12
   21f68:	f7e7 fcd8 	bl	991c <net_pkt_get_data>
	if (!hdr) {
   21f6c:	4605      	mov	r5, r0
   21f6e:	b930      	cbnz	r0, 21f7e <net_ipv4_input+0x3c>
		return verdict;
	}

drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
   21f70:	2002      	movs	r0, #2
}
   21f72:	b011      	add	sp, #68	; 0x44
   21f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   21f76:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   21f78:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   21f7a:	4417      	add	r7, r2
		buf = buf->frags;
   21f7c:	e7f1      	b.n	21f62 <net_ipv4_input+0x20>
	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
   21f7e:	7806      	ldrb	r6, [r0, #0]
   21f80:	f006 060f 	and.w	r6, r6, #15
   21f84:	00b6      	lsls	r6, r6, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
   21f86:	2e13      	cmp	r6, #19
   21f88:	d9f2      	bls.n	21f70 <net_ipv4_input+0x2e>
	pkt->ip_hdr_len = len;
   21f8a:	2314      	movs	r3, #20
   21f8c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	return (tos & NET_IPV4_DSCP_MASK) >> NET_IPV4_DSCP_OFFSET;
   21f90:	7842      	ldrb	r2, [r0, #1]
	pkt->ip_dscp = dscp;
   21f92:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   21f96:	0892      	lsrs	r2, r2, #2
   21f98:	f362 0305 	bfi	r3, r2, #0, #6
   21f9c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	pkt->ip_ecn = ecn;
   21fa0:	7842      	ldrb	r2, [r0, #1]
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
   21fa2:	3e14      	subs	r6, #20
   21fa4:	f362 1387 	bfi	r3, r2, #6, #2
   21fa8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	if (hdr->ttl == 0) {
   21fac:	7a03      	ldrb	r3, [r0, #8]
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
   21fae:	b2f6      	uxtb	r6, r6
	if (hdr->ttl == 0) {
   21fb0:	2b00      	cmp	r3, #0
   21fb2:	d0dd      	beq.n	21f70 <net_ipv4_input+0x2e>
	pkt->ipv4_opts_len = opts_len;
   21fb4:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
	pkt_len = ntohs(hdr->len);
   21fb8:	8841      	ldrh	r1, [r0, #2]
   21fba:	ba49      	rev16	r1, r1
   21fbc:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
   21fbe:	42b9      	cmp	r1, r7
   21fc0:	dcd6      	bgt.n	21f70 <net_ipv4_input+0x2e>
	} else if (real_len > pkt_len) {
   21fc2:	da02      	bge.n	21fca <net_ipv4_input+0x88>
		net_pkt_update_length(pkt, pkt_len);
   21fc4:	4620      	mov	r0, r4
   21fc6:	f7ff fc05 	bl	217d4 <net_pkt_update_length>
	if (net_ipv4_is_addr_mcast((struct in_addr *)hdr->src)) {
   21fca:	f105 010c 	add.w	r1, r5, #12
   21fce:	4608      	mov	r0, r1
   21fd0:	f7ff ff00 	bl	21dd4 <net_ipv4_is_addr_mcast>
   21fd4:	2800      	cmp	r0, #0
   21fd6:	d1cb      	bne.n	21f70 <net_ipv4_input+0x2e>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->src)) {
   21fd8:	69a0      	ldr	r0, [r4, #24]
   21fda:	f7ff ff03 	bl	21de4 <net_ipv4_is_addr_bcast>
   21fde:	2800      	cmp	r0, #0
   21fe0:	d1c6      	bne.n	21f70 <net_ipv4_input+0x2e>
	return UNALIGNED_GET(&addr->s_addr) == 0;
   21fe2:	68eb      	ldr	r3, [r5, #12]
	return pkt->iface;
   21fe4:	69a0      	ldr	r0, [r4, #24]
	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src) &&
   21fe6:	2b00      	cmp	r3, #0
   21fe8:	d046      	beq.n	22078 <net_ipv4_input+0x136>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   21fea:	69a0      	ldr	r0, [r4, #24]
   21fec:	f7fe fd5f 	bl	20aae <net_if_need_calc_rx_checksum>
   21ff0:	2800      	cmp	r0, #0
   21ff2:	d148      	bne.n	22086 <net_ipv4_input+0x144>
	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
   21ff4:	f105 0710 	add.w	r7, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   21ff8:	2100      	movs	r1, #0
   21ffa:	4638      	mov	r0, r7
   21ffc:	f7e6 f880 	bl	8100 <net_if_ipv4_addr_lookup>
	if (!ret) {
   22000:	b980      	cbnz	r0, 22024 <net_ipv4_input+0xe2>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   22002:	4639      	mov	r1, r7
   22004:	f7ff feee 	bl	21de4 <net_ipv4_is_addr_bcast>
   22008:	b960      	cbnz	r0, 22024 <net_ipv4_input+0xe2>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
   2200a:	4638      	mov	r0, r7
   2200c:	f7ff fee2 	bl	21dd4 <net_ipv4_is_addr_mcast>
	     !(hdr->proto == IPPROTO_UDP &&
   22010:	7a6b      	ldrb	r3, [r5, #9]
	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
   22012:	b938      	cbnz	r0, 22024 <net_ipv4_input+0xe2>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
   22014:	2b11      	cmp	r3, #17
   22016:	d1ab      	bne.n	21f70 <net_ipv4_input+0x2e>
	       (net_ipv4_addr_cmp((struct in_addr *)hdr->dst, net_ipv4_broadcast_address()) ||
   22018:	f7e6 fd0e 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   2201c:	692a      	ldr	r2, [r5, #16]
   2201e:	6803      	ldr	r3, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
   22020:	429a      	cmp	r2, r3
   22022:	d1a5      	bne.n	21f70 <net_ipv4_input+0x2e>
				   net_ipv4_unspecified_address()))))) ||
   22024:	7a6b      	ldrb	r3, [r5, #9]
   22026:	2b06      	cmp	r3, #6
   22028:	d105      	bne.n	22036 <net_ipv4_input+0xf4>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->dst))) {
   2202a:	4639      	mov	r1, r7
   2202c:	69a0      	ldr	r0, [r4, #24]
   2202e:	f7ff fed9 	bl	21de4 <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
   22032:	2800      	cmp	r0, #0
   22034:	d19c      	bne.n	21f70 <net_ipv4_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   22036:	4620      	mov	r0, r4
   22038:	9904      	ldr	r1, [sp, #16]
   2203a:	f7ff fab6 	bl	215aa <net_pkt_skip>
	if (opts_len) {
   2203e:	b12e      	cbz	r6, 2204c <net_ipv4_input+0x10a>
		if (net_pkt_skip(pkt, opts_len)) {
   22040:	4631      	mov	r1, r6
   22042:	4620      	mov	r0, r4
   22044:	f7ff fab1 	bl	215aa <net_pkt_skip>
   22048:	2800      	cmp	r0, #0
   2204a:	d191      	bne.n	21f70 <net_ipv4_input+0x2e>
	pkt->family = family;
   2204c:	2201      	movs	r2, #1
	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
   2204e:	7a2b      	ldrb	r3, [r5, #8]
	pkt->ipv4_ttl = ttl;
   22050:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
   22054:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   22058:	f362 1347 	bfi	r3, r2, #5, #3
   2205c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	switch (hdr->proto) {
   22060:	7a6b      	ldrb	r3, [r5, #9]
   22062:	2b06      	cmp	r3, #6
   22064:	d015      	beq.n	22092 <net_ipv4_input+0x150>
   22066:	2b11      	cmp	r3, #17
   22068:	d023      	beq.n	220b2 <net_ipv4_input+0x170>
   2206a:	4293      	cmp	r3, r2
   2206c:	d180      	bne.n	21f70 <net_ipv4_input+0x2e>
		verdict = net_icmpv4_input(pkt, hdr);
   2206e:	4629      	mov	r1, r5
   22070:	4620      	mov	r0, r4
   22072:	f7e8 fbf9 	bl	a868 <net_icmpv4_input>
		if (verdict == NET_DROP) {
   22076:	e77c      	b.n	21f72 <net_ipv4_input+0x30>
	    !net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->dst)) {
   22078:	f105 0110 	add.w	r1, r5, #16
   2207c:	f7ff feb2 	bl	21de4 <net_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src) &&
   22080:	2800      	cmp	r0, #0
   22082:	d1b2      	bne.n	21fea <net_ipv4_input+0xa8>
   22084:	e774      	b.n	21f70 <net_ipv4_input+0x2e>
	    net_calc_chksum_ipv4(pkt) != 0U) {
   22086:	4620      	mov	r0, r4
   22088:	f7fe fe61 	bl	20d4e <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   2208c:	2800      	cmp	r0, #0
   2208e:	d0b1      	beq.n	21ff4 <net_ipv4_input+0xb2>
   22090:	e76e      	b.n	21f70 <net_ipv4_input+0x2e>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
   22092:	4620      	mov	r0, r4
   22094:	a909      	add	r1, sp, #36	; 0x24
   22096:	f000 f942 	bl	2231e <net_tcp_input>
   2209a:	9001      	str	r0, [sp, #4]
		if (proto_hdr.tcp) {
   2209c:	2800      	cmp	r0, #0
   2209e:	f43f af67 	beq.w	21f70 <net_ipv4_input+0x2e>
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   220a2:	4620      	mov	r0, r4
   220a4:	7a6a      	ldrb	r2, [r5, #9]
   220a6:	ab01      	add	r3, sp, #4
   220a8:	a902      	add	r1, sp, #8
	ip.ipv4 = hdr;
   220aa:	9502      	str	r5, [sp, #8]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   220ac:	f7e7 fe24 	bl	9cf8 <net_conn_input>
drop:
   220b0:	e75f      	b.n	21f72 <net_ipv4_input+0x30>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   220b2:	4620      	mov	r0, r4
   220b4:	a907      	add	r1, sp, #28
   220b6:	f000 faa3 	bl	22600 <net_udp_input>
   220ba:	e7ee      	b.n	2209a <net_ipv4_input+0x158>

000220bc <net_ipv4_init>:
void net_ipv4_init(void)
{
	if (IS_ENABLED(CONFIG_NET_IPV4_FRAGMENT)) {
		net_ipv4_setup_fragment_buffers();
	}
}
   220bc:	4770      	bx	lr

000220be <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   220be:	4603      	mov	r3, r0
	return list->head;
   220c0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   220c2:	b128      	cbz	r0, 220d0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   220c4:	6859      	ldr	r1, [r3, #4]
	return node->next;
   220c6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   220c8:	4288      	cmp	r0, r1
	list->head = node;
   220ca:	601a      	str	r2, [r3, #0]
	list->tail = node;
   220cc:	bf08      	it	eq
   220ce:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   220d0:	4770      	bx	lr

000220d2 <tcp_validate_seq>:
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
   220d2:	684b      	ldr	r3, [r1, #4]
   220d4:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
   220d8:	ba1b      	rev	r3, r3
	return (int32_t)(seq1 - seq2);
   220da:	1a5a      	subs	r2, r3, r1
   220dc:	2a00      	cmp	r2, #0
		(net_tcp_seq_cmp(th_seq(hdr), conn->ack + conn->recv_win) < 0);
   220de:	bfa1      	itttt	ge
   220e0:	f8b0 222e 	ldrhge.w	r2, [r0, #558]	; 0x22e
   220e4:	1852      	addge	r2, r2, r1
   220e6:	1a98      	subge	r0, r3, r2
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
   220e8:	0fc0      	lsrge	r0, r0, #31
   220ea:	bfb8      	it	lt
   220ec:	2000      	movlt	r0, #0
}
   220ee:	4770      	bx	lr

000220f0 <is_destination_local>:
{
   220f0:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   220f2:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   220f6:	095b      	lsrs	r3, r3, #5
   220f8:	2b01      	cmp	r3, #1
   220fa:	d11b      	bne.n	22134 <is_destination_local+0x44>
	return pkt->frags->data;
   220fc:	6883      	ldr	r3, [r0, #8]
   220fe:	68dd      	ldr	r5, [r3, #12]
		if (net_ipv4_is_addr_loopback(
   22100:	7c2b      	ldrb	r3, [r5, #16]
   22102:	2b7f      	cmp	r3, #127	; 0x7f
   22104:	d101      	bne.n	2210a <is_destination_local+0x1a>
			return true;
   22106:	2001      	movs	r0, #1
}
   22108:	bd70      	pop	{r4, r5, r6, pc}
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
   2210a:	f105 0610 	add.w	r6, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   2210e:	2100      	movs	r1, #0
   22110:	4630      	mov	r0, r6
   22112:	f7e5 fff5 	bl	8100 <net_if_ipv4_addr_lookup>
	if (!ret) {
   22116:	4604      	mov	r4, r0
   22118:	2800      	cmp	r0, #0
   2211a:	d1f4      	bne.n	22106 <is_destination_local+0x16>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   2211c:	f7e6 fc8c 	bl	8a38 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   22120:	692a      	ldr	r2, [r5, #16]
   22122:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   22124:	429a      	cmp	r2, r3
   22126:	d0ee      	beq.n	22106 <is_destination_local+0x16>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   22128:	4631      	mov	r1, r6
   2212a:	4620      	mov	r0, r4
}
   2212c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22130:	f7e5 bf4c 	b.w	7fcc <net_if_ipv4_is_addr_bcast>
	return false;
   22134:	2000      	movs	r0, #0
   22136:	e7e7      	b.n	22108 <is_destination_local+0x18>

00022138 <z_log_msg_static_create.constprop.0>:
   22138:	2300      	movs	r3, #0
   2213a:	f7e2 bea3 	b.w	4e84 <z_impl_z_log_msg_static_create>

0002213e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2213e:	f7f3 bb19 	b.w	15774 <z_impl_k_mutex_lock>

00022142 <net_pkt_get_len.isra.0>:
static inline size_t net_pkt_get_len(struct net_pkt *pkt)
   22142:	4603      	mov	r3, r0
	size_t bytes = 0;
   22144:	2000      	movs	r0, #0
	while (buf) {
   22146:	b903      	cbnz	r3, 2214a <net_pkt_get_len.isra.0+0x8>
}
   22148:	4770      	bx	lr
		bytes += buf->len;
   2214a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2214c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2214e:	4410      	add	r0, r2
		buf = buf->frags;
   22150:	e7f9      	b.n	22146 <net_pkt_get_len.isra.0+0x4>

00022152 <tcp_pkt_pull>:
{
   22152:	b538      	push	{r3, r4, r5, lr}
   22154:	4604      	mov	r4, r0
	int total = net_pkt_get_len(pkt);
   22156:	6880      	ldr	r0, [r0, #8]
   22158:	f7ff fff3 	bl	22142 <net_pkt_get_len.isra.0>
	if (len > total) {
   2215c:	4288      	cmp	r0, r1
{
   2215e:	460d      	mov	r5, r1
	if (len > total) {
   22160:	d311      	bcc.n	22186 <tcp_pkt_pull+0x34>
	net_pkt_cursor_init(pkt);
   22162:	4620      	mov	r0, r4
   22164:	f7ff f9b7 	bl	214d6 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   22168:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	net_pkt_pull(pkt, len);
   2216c:	4629      	mov	r1, r5
   2216e:	f043 0301 	orr.w	r3, r3, #1
   22172:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   22176:	4620      	mov	r0, r4
   22178:	f7ff fb3c 	bl	217f4 <net_pkt_pull>
	net_pkt_trim_buffer(pkt);
   2217c:	4620      	mov	r0, r4
   2217e:	f7ff f975 	bl	2146c <net_pkt_trim_buffer>
	int ret = 0;
   22182:	2000      	movs	r0, #0
}
   22184:	bd38      	pop	{r3, r4, r5, pc}
		ret = -EINVAL;
   22186:	f06f 0015 	mvn.w	r0, #21
	return ret;
   2218a:	e7fb      	b.n	22184 <tcp_pkt_pull+0x32>

0002218c <tcp_endpoint_cmp>:
{
   2218c:	b510      	push	{r4, lr}
   2218e:	b086      	sub	sp, #24
   22190:	4604      	mov	r4, r0
	if (tcp_endpoint_set(&ep_tmp, pkt, which) < 0) {
   22192:	4668      	mov	r0, sp
   22194:	f7e8 fcd0 	bl	ab38 <tcp_endpoint_set>
   22198:	2800      	cmp	r0, #0
   2219a:	db0d      	blt.n	221b8 <tcp_endpoint_cmp+0x2c>
	return (af == AF_INET) ? sizeof(struct sockaddr_in) :
   2219c:	8823      	ldrh	r3, [r4, #0]
	return !memcmp(ep, &ep_tmp, tcp_endpoint_len(ep->sa.sa_family));
   2219e:	4669      	mov	r1, sp
	return (af == AF_INET) ? sizeof(struct sockaddr_in) :
   221a0:	2b01      	cmp	r3, #1
	return !memcmp(ep, &ep_tmp, tcp_endpoint_len(ep->sa.sa_family));
   221a2:	bf14      	ite	ne
   221a4:	2218      	movne	r2, #24
   221a6:	2208      	moveq	r2, #8
   221a8:	4620      	mov	r0, r4
   221aa:	f7f5 f851 	bl	17250 <memcmp>
   221ae:	fab0 f080 	clz	r0, r0
   221b2:	0940      	lsrs	r0, r0, #5
}
   221b4:	b006      	add	sp, #24
   221b6:	bd10      	pop	{r4, pc}
		return false;
   221b8:	2000      	movs	r0, #0
   221ba:	e7fb      	b.n	221b4 <tcp_endpoint_cmp+0x28>

000221bc <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   221bc:	f7f3 bb54 	b.w	15868 <z_impl_k_mutex_unlock>

000221c0 <tcp_cleanup_recv_queue>:
{
   221c0:	b538      	push	{r3, r4, r5, lr}
   221c2:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
   221c4:	f1a0 0598 	sub.w	r5, r0, #152	; 0x98
   221c8:	f04f 32ff 	mov.w	r2, #4294967295
   221cc:	4628      	mov	r0, r5
   221ce:	f04f 33ff 	mov.w	r3, #4294967295
   221d2:	f7ff ffb4 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	net_buf_unref(conn->queue_recv_data->buffer);
   221d6:	f854 3cb4 	ldr.w	r3, [r4, #-180]
   221da:	6898      	ldr	r0, [r3, #8]
   221dc:	f7e5 f942 	bl	7464 <net_buf_unref>
	conn->queue_recv_data->buffer = NULL;
   221e0:	2200      	movs	r2, #0
   221e2:	f854 3cb4 	ldr.w	r3, [r4, #-180]
	k_mutex_unlock(&conn->lock);
   221e6:	4628      	mov	r0, r5
	conn->queue_recv_data->buffer = NULL;
   221e8:	609a      	str	r2, [r3, #8]
}
   221ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&conn->lock);
   221ee:	f7ff bfe5 	b.w	221bc <k_mutex_unlock.isra.0>

000221f2 <atomic_inc.isra.0>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   221f2:	e8d0 3fef 	ldaex	r3, [r0]
   221f6:	3301      	adds	r3, #1
   221f8:	e8c0 3fe2 	stlex	r2, r3, [r0]
   221fc:	2a00      	cmp	r2, #0
   221fe:	d1f8      	bne.n	221f2 <atomic_inc.isra.0>
}
   22200:	4770      	bx	lr

00022202 <tcp_derive_rto>:
{
   22202:	b513      	push	{r0, r1, r4, lr}
   22204:	4604      	mov	r4, r0
	z_impl_sys_rand_get(dst, len);
   22206:	2101      	movs	r1, #1
   22208:	f10d 0007 	add.w	r0, sp, #7
   2220c:	f7e5 f850 	bl	72b0 <z_impl_sys_rand_get>
	rto = (gain * rto) >> 9;
   22210:	22c8      	movs	r2, #200	; 0xc8
	gain = (uint32_t)gain8;
   22212:	f89d 3007 	ldrb.w	r3, [sp, #7]
	gain += 1 << 9;
   22216:	f503 7300 	add.w	r3, r3, #512	; 0x200
	rto = (gain * rto) >> 9;
   2221a:	4353      	muls	r3, r2
   2221c:	0a5b      	lsrs	r3, r3, #9
	conn->rto = (uint16_t)rto;
   2221e:	f8a4 3234 	strh.w	r3, [r4, #564]	; 0x234
}
   22222:	b002      	add	sp, #8
   22224:	bd10      	pop	{r4, pc}

00022226 <tcp_conn_close.isra.0>:
static int tcp_conn_close(struct tcp *conn, int status)
   22226:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->in_connect) {
   22228:	f890 3239 	ldrb.w	r3, [r0, #569]	; 0x239
static int tcp_conn_close(struct tcp *conn, int status)
   2222c:	4604      	mov	r4, r0
	if (conn->in_connect) {
   2222e:	079b      	lsls	r3, r3, #30
static int tcp_conn_close(struct tcp *conn, int status)
   22230:	460d      	mov	r5, r1
	if (conn->in_connect) {
   22232:	d506      	bpl.n	22242 <tcp_conn_close.isra.0+0x1c>
		if (conn->connect_cb) {
   22234:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22236:	b123      	cbz	r3, 22242 <tcp_conn_close.isra.0+0x1c>
			conn->connect_cb(conn->context, status, conn->context->user_data);
   22238:	6840      	ldr	r0, [r0, #4]
   2223a:	6842      	ldr	r2, [r0, #4]
   2223c:	4798      	blx	r3
			conn->connect_cb = NULL;
   2223e:	2300      	movs	r3, #0
   22240:	6263      	str	r3, [r4, #36]	; 0x24
	if (conn->context->recv_cb) {
   22242:	6860      	ldr	r0, [r4, #4]
   22244:	6b46      	ldr	r6, [r0, #52]	; 0x34
   22246:	b136      	cbz	r6, 22256 <tcp_conn_close.isra.0+0x30>
		conn->context->recv_cb(conn->context, NULL, NULL, NULL,
   22248:	6963      	ldr	r3, [r4, #20]
   2224a:	e9cd 5300 	strd	r5, r3, [sp]
   2224e:	2300      	movs	r3, #0
   22250:	461a      	mov	r2, r3
   22252:	4619      	mov	r1, r3
   22254:	47b0      	blx	r6
	return tcp_conn_unref(conn);
   22256:	4620      	mov	r0, r4
}
   22258:	b002      	add	sp, #8
   2225a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return tcp_conn_unref(conn);
   2225e:	f7e8 bda1 	b.w	ada4 <tcp_conn_unref.isra.0>

00022262 <tcp_send_process>:
{
   22262:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
   22264:	f1a0 0468 	sub.w	r4, r0, #104	; 0x68
   22268:	f04f 32ff 	mov.w	r2, #4294967295
   2226c:	f04f 33ff 	mov.w	r3, #4294967295
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_timer);
   22270:	f1a0 0690 	sub.w	r6, r0, #144	; 0x90
	k_mutex_lock(&conn->lock, K_FOREVER);
   22274:	4620      	mov	r0, r4
   22276:	f7ff ff62 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	unref = tcp_send_process_no_lock(conn);
   2227a:	4630      	mov	r0, r6
   2227c:	f7e8 fce6 	bl	ac4c <tcp_send_process_no_lock>
   22280:	4605      	mov	r5, r0
	k_mutex_unlock(&conn->lock);
   22282:	4620      	mov	r0, r4
   22284:	f7ff ff9a 	bl	221bc <k_mutex_unlock.isra.0>
	if (unref) {
   22288:	b135      	cbz	r5, 22298 <tcp_send_process+0x36>
		tcp_conn_close(conn, -ETIMEDOUT);
   2228a:	4630      	mov	r0, r6
}
   2228c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		tcp_conn_close(conn, -ETIMEDOUT);
   22290:	f06f 0173 	mvn.w	r1, #115	; 0x73
   22294:	f7ff bfc7 	b.w	22226 <tcp_conn_close.isra.0>
}
   22298:	bd70      	pop	{r4, r5, r6, pc}

0002229a <tcp_timewait_timeout>:
	(void)tcp_conn_close(conn, -ETIMEDOUT);
   2229a:	f06f 0173 	mvn.w	r1, #115	; 0x73
   2229e:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
   222a2:	f7ff bfc0 	b.w	22226 <tcp_conn_close.isra.0>

000222a6 <tcp_fin_timeout>:
	(void)tcp_conn_close(conn, -ETIMEDOUT);
   222a6:	f06f 0173 	mvn.w	r1, #115	; 0x73
   222aa:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
   222ae:	f7ff bfba 	b.w	22226 <tcp_conn_close.isra.0>

000222b2 <net_tcp_listen>:
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   222b2:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   222b6:	f043 0306 	orr.w	r3, r3, #6
   222ba:	f8a0 3090 	strh.w	r3, [r0, #144]	; 0x90
}
   222be:	2000      	movs	r0, #0
   222c0:	4770      	bx	lr

000222c2 <net_tcp_send_data>:
{
   222c2:	b508      	push	{r3, lr}
	if (cb) {
   222c4:	460b      	mov	r3, r1
   222c6:	b109      	cbz	r1, 222cc <net_tcp_send_data+0xa>
		cb(context, 0, user_data);
   222c8:	2100      	movs	r1, #0
   222ca:	4798      	blx	r3
}
   222cc:	2000      	movs	r0, #0
   222ce:	bd08      	pop	{r3, pc}

000222d0 <net_tcp_recv>:
	struct tcp *conn = context->tcp;
   222d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
	context->recv_cb = cb;
   222d2:	6341      	str	r1, [r0, #52]	; 0x34
	if (conn) {
   222d4:	b103      	cbz	r3, 222d8 <net_tcp_recv+0x8>
		conn->recv_user_data = user_data;
   222d6:	615a      	str	r2, [r3, #20]
}
   222d8:	2000      	movs	r0, #0
   222da:	4770      	bx	lr

000222dc <net_tcp_finalize>:
{
   222dc:	b530      	push	{r4, r5, lr}
   222de:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   222e0:	ab03      	add	r3, sp, #12
   222e2:	9301      	str	r3, [sp, #4]
   222e4:	2314      	movs	r3, #20
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   222e6:	a901      	add	r1, sp, #4
{
   222e8:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   222ea:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   222ec:	f7e7 fb16 	bl	991c <net_pkt_get_data>
	if (!tcp_hdr) {
   222f0:	4604      	mov	r4, r0
   222f2:	b188      	cbz	r0, 22318 <net_tcp_finalize+0x3c>
	tcp_hdr->chksum = 0U;
   222f4:	2300      	movs	r3, #0
   222f6:	7403      	strb	r3, [r0, #16]
   222f8:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   222fa:	69a8      	ldr	r0, [r5, #24]
   222fc:	f7fe fbd4 	bl	20aa8 <net_if_need_calc_tx_checksum>
   22300:	b120      	cbz	r0, 2230c <net_tcp_finalize+0x30>
	return net_calc_chksum(pkt, IPPROTO_TCP);
   22302:	2106      	movs	r1, #6
   22304:	4628      	mov	r0, r5
   22306:	f7fe fc9b 	bl	20c40 <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   2230a:	8220      	strh	r0, [r4, #16]
	return net_pkt_set_data(pkt, &tcp_access);
   2230c:	4628      	mov	r0, r5
   2230e:	a901      	add	r1, sp, #4
   22310:	f7ff fb59 	bl	219c6 <net_pkt_set_data>
}
   22314:	b009      	add	sp, #36	; 0x24
   22316:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   22318:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2231c:	e7fa      	b.n	22314 <net_tcp_finalize+0x38>

0002231e <net_tcp_input>:
{
   2231e:	b570      	push	{r4, r5, r6, lr}
   22320:	4604      	mov	r4, r0
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   22322:	6980      	ldr	r0, [r0, #24]
{
   22324:	460e      	mov	r6, r1
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   22326:	f7fe fbc2 	bl	20aae <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   2232a:	b940      	cbnz	r0, 2233e <net_tcp_input+0x20>
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
   2232c:	4631      	mov	r1, r6
   2232e:	4620      	mov	r0, r4
   22330:	f7e7 faf4 	bl	991c <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   22334:	4605      	mov	r5, r0
   22336:	b948      	cbnz	r0, 2234c <net_tcp_input+0x2e>
	return NULL;
   22338:	2500      	movs	r5, #0
}
   2233a:	4628      	mov	r0, r5
   2233c:	bd70      	pop	{r4, r5, r6, pc}
   2233e:	2106      	movs	r1, #6
   22340:	4620      	mov	r0, r4
   22342:	f7fe fc7d 	bl	20c40 <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   22346:	2800      	cmp	r0, #0
   22348:	d0f0      	beq.n	2232c <net_tcp_input+0xe>
   2234a:	e7f5      	b.n	22338 <net_tcp_input+0x1a>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   2234c:	4631      	mov	r1, r6
   2234e:	4620      	mov	r0, r4
   22350:	f7ff fb39 	bl	219c6 <net_pkt_set_data>
   22354:	2800      	cmp	r0, #0
   22356:	d0f0      	beq.n	2233a <net_tcp_input+0x1c>
drop:
   22358:	e7ee      	b.n	22338 <net_tcp_input+0x1a>

0002235a <net_tcp_get_supported_mss>:
{
   2235a:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(conn->context);
   2235c:	6842      	ldr	r2, [r0, #4]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   2235e:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
	if (family == AF_INET) {
   22362:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   22366:	2b01      	cmp	r3, #1
   22368:	d111      	bne.n	2238e <net_tcp_get_supported_mss+0x34>
	return net_if_get_by_index(context->iface);
   2236a:	f992 0092 	ldrsb.w	r0, [r2, #146]	; 0x92
   2236e:	f7e5 fdd1 	bl	7f14 <z_impl_net_if_get_by_index>
		if (iface && net_if_get_mtu(iface) >= NET_IPV4TCPH_LEN) {
   22372:	b148      	cbz	r0, 22388 <net_tcp_get_supported_mss+0x2e>
	return iface->if_dev->mtu;
   22374:	6803      	ldr	r3, [r0, #0]
   22376:	8b18      	ldrh	r0, [r3, #24]
   22378:	2827      	cmp	r0, #39	; 0x27
   2237a:	d905      	bls.n	22388 <net_tcp_get_supported_mss+0x2e>
			mss = NET_IPV4_MTU - NET_IPV4TCPH_LEN;
   2237c:	3828      	subs	r0, #40	; 0x28
   2237e:	bf08      	it	eq
   22380:	f44f 7006 	moveq.w	r0, #536	; 0x218
		return mss;
   22384:	b280      	uxth	r0, r0
}
   22386:	bd08      	pop	{r3, pc}
			mss = NET_IPV4_MTU - NET_IPV4TCPH_LEN;
   22388:	f44f 7006 	mov.w	r0, #536	; 0x218
   2238c:	e7fa      	b.n	22384 <net_tcp_get_supported_mss+0x2a>
	return 0;
   2238e:	2000      	movs	r0, #0
   22390:	e7f9      	b.n	22386 <net_tcp_get_supported_mss+0x2c>

00022392 <tcp_out>:
	(void)tcp_out_ext(conn, flags, NULL /* no data */, conn->seq);
   22392:	2200      	movs	r2, #0
   22394:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
   22398:	f7e8 befe 	b.w	b198 <tcp_out_ext>

0002239c <tcp_send_ack>:
{
   2239c:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
   2239e:	f5a0 74ac 	sub.w	r4, r0, #344	; 0x158
   223a2:	f04f 33ff 	mov.w	r3, #4294967295
   223a6:	f5a0 75c0 	sub.w	r5, r0, #384	; 0x180
   223aa:	f04f 32ff 	mov.w	r2, #4294967295
   223ae:	4620      	mov	r0, r4
   223b0:	f7ff fec5 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	tcp_out(conn, ACK);
   223b4:	4628      	mov	r0, r5
   223b6:	2110      	movs	r1, #16
   223b8:	f7ff ffeb 	bl	22392 <tcp_out>
	k_mutex_unlock(&conn->lock);
   223bc:	4620      	mov	r0, r4
}
   223be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&conn->lock);
   223c2:	f7ff befb 	b.w	221bc <k_mutex_unlock.isra.0>

000223c6 <tcp_short_window>:
{
   223c6:	b538      	push	{r3, r4, r5, lr}
   223c8:	4604      	mov	r4, r0
	int32_t threshold = MIN(conn_mss(conn), conn->recv_win_max / 2);
   223ca:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
   223ce:	07d8      	lsls	r0, r3, #31
   223d0:	4620      	mov	r0, r4
   223d2:	bf54      	ite	pl
   223d4:	f44f 7506 	movpl.w	r5, #536	; 0x218
   223d8:	f8b4 5084 	ldrhmi.w	r5, [r4, #132]	; 0x84
   223dc:	f7ff ffbd 	bl	2235a <net_tcp_get_supported_mss>
   223e0:	42a8      	cmp	r0, r5
   223e2:	dd26      	ble.n	22432 <tcp_short_window+0x6c>
   223e4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   223e8:	07d9      	lsls	r1, r3, #31
   223ea:	d527      	bpl.n	2243c <tcp_short_window+0x76>
   223ec:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   223f0:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
   223f4:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
   223f8:	ea4f 0052 	mov.w	r0, r2, lsr #1
   223fc:	da12      	bge.n	22424 <tcp_short_window+0x5e>
   223fe:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   22402:	4620      	mov	r0, r4
   22404:	07da      	lsls	r2, r3, #31
   22406:	bf54      	ite	pl
   22408:	f44f 7506 	movpl.w	r5, #536	; 0x218
   2240c:	f8b4 5084 	ldrhmi.w	r5, [r4, #132]	; 0x84
   22410:	f7ff ffa3 	bl	2235a <net_tcp_get_supported_mss>
   22414:	42a8      	cmp	r0, r5
   22416:	dd14      	ble.n	22442 <tcp_short_window+0x7c>
   22418:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   2241c:	07db      	lsls	r3, r3, #31
   2241e:	d514      	bpl.n	2244a <tcp_short_window+0x84>
   22420:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
	if (conn->recv_win > threshold) {
   22424:	f8b4 322e 	ldrh.w	r3, [r4, #558]	; 0x22e
}
   22428:	4283      	cmp	r3, r0
   2242a:	bfcc      	ite	gt
   2242c:	2000      	movgt	r0, #0
   2242e:	2001      	movle	r0, #1
   22430:	bd38      	pop	{r3, r4, r5, pc}
	int32_t threshold = MIN(conn_mss(conn), conn->recv_win_max / 2);
   22432:	4620      	mov	r0, r4
   22434:	f7ff ff91 	bl	2235a <net_tcp_get_supported_mss>
   22438:	4603      	mov	r3, r0
   2243a:	e7d9      	b.n	223f0 <tcp_short_window+0x2a>
   2243c:	f44f 7306 	mov.w	r3, #536	; 0x218
   22440:	e7d6      	b.n	223f0 <tcp_short_window+0x2a>
   22442:	4620      	mov	r0, r4
   22444:	f7ff ff89 	bl	2235a <net_tcp_get_supported_mss>
   22448:	e7ec      	b.n	22424 <tcp_short_window+0x5e>
   2244a:	f44f 7006 	mov.w	r0, #536	; 0x218
   2244e:	e7e9      	b.n	22424 <tcp_short_window+0x5e>

00022450 <tcp_update_recv_wnd>:
{
   22450:	b570      	push	{r4, r5, r6, lr}
	new_win = conn->recv_win + delta;
   22452:	f8b0 322e 	ldrh.w	r3, [r0, #558]	; 0x22e
{
   22456:	4604      	mov	r4, r0
	if (new_win < 0) {
   22458:	185b      	adds	r3, r3, r1
   2245a:	d41d      	bmi.n	22498 <tcp_update_recv_wnd+0x48>
	} else if (new_win > conn->recv_win_max) {
   2245c:	f8b0 522c 	ldrh.w	r5, [r0, #556]	; 0x22c
   22460:	429d      	cmp	r5, r3
   22462:	bfa8      	it	ge
   22464:	461d      	movge	r5, r3
	short_win_before = tcp_short_window(conn);
   22466:	4620      	mov	r0, r4
   22468:	f7ff ffad 	bl	223c6 <tcp_short_window>
   2246c:	4606      	mov	r6, r0
	conn->recv_win = new_win;
   2246e:	f8a4 522e 	strh.w	r5, [r4, #558]	; 0x22e
	short_win_after = tcp_short_window(conn);
   22472:	4620      	mov	r0, r4
   22474:	f7ff ffa7 	bl	223c6 <tcp_short_window>
	if (short_win_before && !short_win_after &&
   22478:	b166      	cbz	r6, 22494 <tcp_update_recv_wnd+0x44>
   2247a:	b958      	cbnz	r0, 22494 <tcp_update_recv_wnd+0x44>
   2247c:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
   22480:	2b04      	cmp	r3, #4
   22482:	d107      	bne.n	22494 <tcp_update_recv_wnd+0x44>
		k_work_cancel_delayable(&conn->ack_timer);
   22484:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   22488:	f001 fea0 	bl	241cc <k_work_cancel_delayable>
		tcp_out(conn, ACK);
   2248c:	2110      	movs	r1, #16
   2248e:	4620      	mov	r0, r4
   22490:	f7ff ff7f 	bl	22392 <tcp_out>
}
   22494:	2000      	movs	r0, #0
   22496:	bd70      	pop	{r4, r5, r6, pc}
		new_win = 0;
   22498:	2500      	movs	r5, #0
   2249a:	e7e4      	b.n	22466 <tcp_update_recv_wnd+0x16>

0002249c <net_tcp_set_option>:
{
   2249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   224a0:	460f      	mov	r7, r1
	struct tcp *conn = context->tcp;
   224a2:	6c84      	ldr	r4, [r0, #72]	; 0x48
{
   224a4:	4615      	mov	r5, r2
	k_mutex_lock(&conn->lock, K_FOREVER);
   224a6:	f104 0828 	add.w	r8, r4, #40	; 0x28
{
   224aa:	461e      	mov	r6, r3
	k_mutex_lock(&conn->lock, K_FOREVER);
   224ac:	f04f 32ff 	mov.w	r2, #4294967295
   224b0:	f04f 33ff 	mov.w	r3, #4294967295
   224b4:	4640      	mov	r0, r8
   224b6:	f7ff fe42 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	switch (option) {
   224ba:	2f01      	cmp	r7, #1
   224bc:	d10a      	bne.n	224d4 <net_tcp_set_option+0x38>
	if (len != sizeof(int)) {
   224be:	2e04      	cmp	r6, #4
   224c0:	d10f      	bne.n	224e2 <net_tcp_set_option+0x46>
	no_delay_int = *(int *)value;
   224c2:	682a      	ldr	r2, [r5, #0]
	if ((no_delay_int < 0) || (no_delay_int > 1)) {
   224c4:	2a01      	cmp	r2, #1
   224c6:	d80c      	bhi.n	224e2 <net_tcp_set_option+0x46>
	conn->tcp_nodelay = (bool)no_delay_int;
   224c8:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
   224cc:	f362 03c3 	bfi	r3, r2, #3, #1
   224d0:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
	int ret = 0;
   224d4:	2400      	movs	r4, #0
	k_mutex_unlock(&conn->lock);
   224d6:	4640      	mov	r0, r8
   224d8:	f7ff fe70 	bl	221bc <k_mutex_unlock.isra.0>
}
   224dc:	4620      	mov	r0, r4
   224de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   224e2:	f06f 0415 	mvn.w	r4, #21
   224e6:	e7f6      	b.n	224d6 <net_tcp_set_option+0x3a>

000224e8 <net_tcp_get_option>:
{
   224e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   224ec:	460e      	mov	r6, r1
	struct tcp *conn = context->tcp;
   224ee:	f8d0 8048 	ldr.w	r8, [r0, #72]	; 0x48
{
   224f2:	4615      	mov	r5, r2
	k_mutex_lock(&conn->lock, K_FOREVER);
   224f4:	f108 0728 	add.w	r7, r8, #40	; 0x28
{
   224f8:	461c      	mov	r4, r3
	k_mutex_lock(&conn->lock, K_FOREVER);
   224fa:	f04f 32ff 	mov.w	r2, #4294967295
   224fe:	f04f 33ff 	mov.w	r3, #4294967295
   22502:	4638      	mov	r0, r7
   22504:	f7ff fe1b 	bl	2213e <k_mutex_lock.constprop.0.isra.0>
	switch (option) {
   22508:	2e01      	cmp	r6, #1
   2250a:	d107      	bne.n	2251c <net_tcp_get_option+0x34>
	int no_delay_int = (int)conn->tcp_nodelay;
   2250c:	f898 3239 	ldrb.w	r3, [r8, #569]	; 0x239
   22510:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   22514:	602b      	str	r3, [r5, #0]
	if (len) {
   22516:	b10c      	cbz	r4, 2251c <net_tcp_get_option+0x34>
		*len = sizeof(int);
   22518:	2304      	movs	r3, #4
   2251a:	6023      	str	r3, [r4, #0]
	k_mutex_unlock(&conn->lock);
   2251c:	4638      	mov	r0, r7
   2251e:	f7ff fe4d 	bl	221bc <k_mutex_unlock.isra.0>
}
   22522:	2000      	movs	r0, #0
   22524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022528 <net_tcp_tx_sem_get>:
	return &conn->tx_sem;
   22528:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   2252a:	3054      	adds	r0, #84	; 0x54
   2252c:	4770      	bx	lr

0002252e <net_tcp_conn_sem_get>:
	return &conn->connect_sem;
   2252e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   22530:	303c      	adds	r0, #60	; 0x3c
   22532:	4770      	bx	lr

00022534 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, uint16_t src_port, uint16_t dst_port)
{
   22534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   22536:	2308      	movs	r3, #8
{
   22538:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   2253a:	eb0d 0103 	add.w	r1, sp, r3
{
   2253e:	4604      	mov	r4, r0
   22540:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   22542:	f8cd d008 	str.w	sp, [sp, #8]
   22546:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   22548:	f7e7 f9e8 	bl	991c <net_pkt_get_data>
	if (!udp_hdr) {
   2254c:	b160      	cbz	r0, 22568 <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
   2254e:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
   22550:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   22552:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   22554:	7103      	strb	r3, [r0, #4]
   22556:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
   22558:	7183      	strb	r3, [r0, #6]
   2255a:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   2255c:	a902      	add	r1, sp, #8
   2255e:	4620      	mov	r0, r4
   22560:	f7ff fa31 	bl	219c6 <net_pkt_set_data>
}
   22564:	b004      	add	sp, #16
   22566:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   22568:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2256c:	e7fa      	b.n	22564 <net_udp_create+0x30>

0002256e <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   2256e:	2308      	movs	r3, #8
{
   22570:	b530      	push	{r4, r5, lr}
   22572:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	uint16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   22574:	eb0d 0103 	add.w	r1, sp, r3
{
   22578:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   2257a:	f8cd d008 	str.w	sp, [sp, #8]
   2257e:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   22580:	f7e7 f9cc 	bl	991c <net_pkt_get_data>
	if (!udp_hdr) {
   22584:	4605      	mov	r5, r0
   22586:	b310      	cbz	r0, 225ce <net_udp_finalize+0x60>
	size_t bytes = 0;
   22588:	2300      	movs	r3, #0
   2258a:	68a2      	ldr	r2, [r4, #8]
	while (buf) {
   2258c:	b9da      	cbnz	r2, 225c6 <net_udp_finalize+0x58>
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   2258e:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
	return pkt->ipv4_opts_len;
   22592:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
   22596:	440a      	add	r2, r1
   22598:	1a9b      	subs	r3, r3, r2
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);
   2259a:	ba5b      	rev16	r3, r3
   2259c:	80ab      	strh	r3, [r5, #4]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   2259e:	69a0      	ldr	r0, [r4, #24]
   225a0:	f7fe fa82 	bl	20aa8 <net_if_need_calc_tx_checksum>
   225a4:	b148      	cbz	r0, 225ba <net_udp_finalize+0x4c>
	uint16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   225a6:	2111      	movs	r1, #17
   225a8:	4620      	mov	r0, r4
   225aa:	f7fe fb49 	bl	20c40 <net_calc_chksum>
	return chksum == 0U ? 0xffff : chksum;
   225ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   225b2:	2800      	cmp	r0, #0
   225b4:	bf18      	it	ne
   225b6:	4603      	movne	r3, r0
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   225b8:	80eb      	strh	r3, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   225ba:	4620      	mov	r0, r4
   225bc:	a902      	add	r1, sp, #8
   225be:	f7ff fa02 	bl	219c6 <net_pkt_set_data>
}
   225c2:	b005      	add	sp, #20
   225c4:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   225c6:	8a11      	ldrh	r1, [r2, #16]
		buf = buf->frags;
   225c8:	6852      	ldr	r2, [r2, #4]
		bytes += buf->len;
   225ca:	440b      	add	r3, r1
		buf = buf->frags;
   225cc:	e7de      	b.n	2258c <net_udp_finalize+0x1e>
		return -ENOBUFS;
   225ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   225d2:	e7f6      	b.n	225c2 <net_udp_finalize+0x54>

000225d4 <net_udp_register>:
		     uint16_t local_port,
		     struct net_context *context,
		     net_conn_cb_t cb,
		     void *user_data,
		     struct net_conn_handle **handle)
{
   225d4:	b510      	push	{r4, lr}
   225d6:	b086      	sub	sp, #24
	return net_conn_register(IPPROTO_UDP, family, remote_addr, local_addr,
   225d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   225da:	9405      	str	r4, [sp, #20]
   225dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   225de:	9404      	str	r4, [sp, #16]
   225e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   225e2:	9403      	str	r4, [sp, #12]
   225e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   225e6:	9402      	str	r4, [sp, #8]
   225e8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   225ec:	e9cd 3400 	strd	r3, r4, [sp]
   225f0:	4613      	mov	r3, r2
   225f2:	460a      	mov	r2, r1
   225f4:	4601      	mov	r1, r0
   225f6:	2011      	movs	r0, #17
   225f8:	f7e7 fa24 	bl	9a44 <net_conn_register>
				 remote_port, local_port, context, cb,
				 user_data, handle);
}
   225fc:	b006      	add	sp, #24
   225fe:	bd10      	pop	{r4, pc}

00022600 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   22600:	b570      	push	{r4, r5, r6, lr}
   22602:	4604      	mov	r4, r0
   22604:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   22606:	f7e7 f989 	bl	991c <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   2260a:	4605      	mov	r5, r0
   2260c:	b910      	cbnz	r0, 22614 <net_udp_input+0x14>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   2260e:	2500      	movs	r5, #0
}
   22610:	4628      	mov	r0, r5
   22612:	bd70      	pop	{r4, r5, r6, pc}
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   22614:	4631      	mov	r1, r6
   22616:	4620      	mov	r0, r4
   22618:	f7ff f9d5 	bl	219c6 <net_pkt_set_data>
   2261c:	4603      	mov	r3, r0
   2261e:	2800      	cmp	r0, #0
   22620:	d1f5      	bne.n	2260e <net_udp_input+0xe>
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   22622:	88aa      	ldrh	r2, [r5, #4]
   22624:	68a1      	ldr	r1, [r4, #8]
   22626:	ba52      	rev16	r2, r2
   22628:	b292      	uxth	r2, r2
	while (buf) {
   2262a:	b9b1      	cbnz	r1, 2265a <net_udp_input+0x5a>
				    net_pkt_ip_hdr_len(pkt) -
   2262c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
				    net_pkt_ip_opts_len(pkt))) {
   22630:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
				    net_pkt_ip_hdr_len(pkt) -
   22634:	4401      	add	r1, r0
   22636:	1a5b      	subs	r3, r3, r1
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   22638:	429a      	cmp	r2, r3
   2263a:	d1e8      	bne.n	2260e <net_udp_input+0xe>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   2263c:	69a0      	ldr	r0, [r4, #24]
   2263e:	f7fe fa36 	bl	20aae <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   22642:	2800      	cmp	r0, #0
   22644:	d0e4      	beq.n	22610 <net_udp_input+0x10>
		if (!udp_hdr->chksum) {
   22646:	88eb      	ldrh	r3, [r5, #6]
   22648:	2b00      	cmp	r3, #0
   2264a:	d0e0      	beq.n	2260e <net_udp_input+0xe>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2264c:	2111      	movs	r1, #17
   2264e:	4620      	mov	r0, r4
   22650:	f7fe faf6 	bl	20c40 <net_calc_chksum>
		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   22654:	2800      	cmp	r0, #0
   22656:	d0db      	beq.n	22610 <net_udp_input+0x10>
   22658:	e7d9      	b.n	2260e <net_udp_input+0xe>
		bytes += buf->len;
   2265a:	8a08      	ldrh	r0, [r1, #16]
		buf = buf->frags;
   2265c:	6849      	ldr	r1, [r1, #4]
		bytes += buf->len;
   2265e:	4403      	add	r3, r0
		buf = buf->frags;
   22660:	e7e3      	b.n	2262a <net_udp_input+0x2a>

00022662 <z_log_msg_static_create.constprop.0>:
   22662:	2300      	movs	r3, #0
   22664:	f7e2 bc0e 	b.w	4e84 <z_impl_z_log_msg_static_create>

00022668 <net_if_flag_is_set>:
	if (iface == NULL) {
   22668:	b130      	cbz	r0, 22678 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2266a:	6803      	ldr	r3, [r0, #0]
   2266c:	330c      	adds	r3, #12
   2266e:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22672:	4108      	asrs	r0, r1
   22674:	f000 0001 	and.w	r0, r0, #1
}
   22678:	4770      	bx	lr

0002267a <iface_find_cb>:
{
   2267a:	b510      	push	{r4, lr}
	if (*iface_to_use == NULL &&
   2267c:	680b      	ldr	r3, [r1, #0]
{
   2267e:	4604      	mov	r4, r0
   22680:	460a      	mov	r2, r1
	if (*iface_to_use == NULL &&
   22682:	b923      	cbnz	r3, 2268e <iface_find_cb+0x14>
	    !net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   22684:	2103      	movs	r1, #3
   22686:	f7ff ffef 	bl	22668 <net_if_flag_is_set>
	if (*iface_to_use == NULL &&
   2268a:	b900      	cbnz	r0, 2268e <iface_find_cb+0x14>
		*iface_to_use = iface;
   2268c:	6014      	str	r4, [r2, #0]
}
   2268e:	bd10      	pop	{r4, pc}

00022690 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22690:	220c      	movs	r2, #12
   22692:	6903      	ldr	r3, [r0, #16]
   22694:	b2c9      	uxtb	r1, r1
   22696:	fb01 3302 	mla	r3, r1, r2, r3
   2269a:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   2269c:	f000 0007 	and.w	r0, r0, #7
   226a0:	4770      	bx	lr

000226a2 <set_on_state>:
	__asm__ volatile(
   226a2:	f04f 0320 	mov.w	r3, #32
   226a6:	f3ef 8211 	mrs	r2, BASEPRI
   226aa:	f383 8812 	msr	BASEPRI_MAX, r3
   226ae:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   226b2:	6803      	ldr	r3, [r0, #0]
   226b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   226b8:	f043 0302 	orr.w	r3, r3, #2
   226bc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   226be:	f382 8811 	msr	BASEPRI, r2
   226c2:	f3bf 8f6f 	isb	sy
}
   226c6:	4770      	bx	lr

000226c8 <stop>:
{
   226c8:	b570      	push	{r4, r5, r6, lr}
   226ca:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   226cc:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   226ce:	f04f 0420 	mov.w	r4, #32
   226d2:	f3ef 8511 	mrs	r5, BASEPRI
   226d6:	f384 8812 	msr	BASEPRI_MAX, r4
   226da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   226de:	260c      	movs	r6, #12
   226e0:	fb06 3401 	mla	r4, r6, r1, r3
   226e4:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   226e6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   226ea:	d008      	beq.n	226fe <stop+0x36>
   226ec:	42a2      	cmp	r2, r4
   226ee:	d006      	beq.n	226fe <stop+0x36>
	__asm__ volatile(
   226f0:	f385 8811 	msr	BASEPRI, r5
   226f4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   226f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   226fc:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   226fe:	2201      	movs	r2, #1
   22700:	4371      	muls	r1, r6
   22702:	440b      	add	r3, r1
   22704:	679a      	str	r2, [r3, #120]	; 0x78
   22706:	f385 8811 	msr	BASEPRI, r5
   2270a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2270e:	6843      	ldr	r3, [r0, #4]
   22710:	440b      	add	r3, r1
   22712:	685b      	ldr	r3, [r3, #4]
   22714:	4798      	blx	r3
	return 0;
   22716:	2000      	movs	r0, #0
   22718:	e7f0      	b.n	226fc <stop+0x34>

0002271a <api_stop>:
	return stop(dev, subsys, CTX_API);
   2271a:	2280      	movs	r2, #128	; 0x80
   2271c:	f7ff bfd4 	b.w	226c8 <stop>

00022720 <async_start>:
{
   22720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22722:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   22724:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   22726:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22728:	f04f 0520 	mov.w	r5, #32
   2272c:	f3ef 8611 	mrs	r6, BASEPRI
   22730:	f385 8812 	msr	BASEPRI_MAX, r5
   22734:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22738:	250c      	movs	r5, #12
   2273a:	4369      	muls	r1, r5
   2273c:	440c      	add	r4, r1
   2273e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22740:	f005 0c07 	and.w	ip, r5, #7
   22744:	f1bc 0f01 	cmp.w	ip, #1
   22748:	d10b      	bne.n	22762 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2274a:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   2274c:	f386 8811 	msr	BASEPRI, r6
   22750:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   22754:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   22758:	6843      	ldr	r3, [r0, #4]
   2275a:	585b      	ldr	r3, [r3, r1]
   2275c:	4798      	blx	r3
	return 0;
   2275e:	2000      	movs	r0, #0
}
   22760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22762:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   22766:	42af      	cmp	r7, r5
   22768:	f386 8811 	msr	BASEPRI, r6
   2276c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   22770:	bf0c      	ite	eq
   22772:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   22776:	f04f 30ff 	movne.w	r0, #4294967295
   2277a:	e7f1      	b.n	22760 <async_start+0x40>

0002277c <api_start>:
{
   2277c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2277e:	2480      	movs	r4, #128	; 0x80
   22780:	9400      	str	r4, [sp, #0]
   22782:	f7ff ffcd 	bl	22720 <async_start>
}
   22786:	b002      	add	sp, #8
   22788:	bd10      	pop	{r4, pc}

0002278a <onoff_started_callback>:
{
   2278a:	b410      	push	{r4}
	notify(mgr, 0);
   2278c:	241c      	movs	r4, #28
	return &data->mgr[type];
   2278e:	6900      	ldr	r0, [r0, #16]
   22790:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   22792:	fb03 0004 	mla	r0, r3, r4, r0
   22796:	2100      	movs	r1, #0
}
   22798:	bc10      	pop	{r4}
	notify(mgr, 0);
   2279a:	4710      	bx	r2

0002279c <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2279c:	2003      	movs	r0, #3
   2279e:	f001 b9b2 	b.w	23b06 <nrfx_clock_start>

000227a2 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   227a2:	2002      	movs	r0, #2
   227a4:	f001 b9af 	b.w	23b06 <nrfx_clock_start>

000227a8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   227a8:	2000      	movs	r0, #0
   227aa:	f001 b9ac 	b.w	23b06 <nrfx_clock_start>

000227ae <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   227ae:	2003      	movs	r0, #3
   227b0:	f001 ba08 	b.w	23bc4 <nrfx_clock_stop>

000227b4 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   227b4:	2002      	movs	r0, #2
   227b6:	f001 ba05 	b.w	23bc4 <nrfx_clock_stop>

000227ba <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   227ba:	2000      	movs	r0, #0
   227bc:	f001 ba02 	b.w	23bc4 <nrfx_clock_stop>

000227c0 <blocking_start_callback>:
{
   227c0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   227c2:	f7f3 b8c1 	b.w	15948 <z_impl_k_sem_give>

000227c6 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   227c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   227c8:	460f      	mov	r7, r1
   227ca:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   227cc:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   227d0:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   227d2:	42a6      	cmp	r6, r4
   227d4:	d803      	bhi.n	227de <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   227d6:	d016      	beq.n	22806 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   227d8:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   227da:	b003      	add	sp, #12
   227dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   227de:	1b33      	subs	r3, r6, r4
   227e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   227e4:	bf38      	it	cc
   227e6:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   227e8:	2000      	movs	r0, #0
   227ea:	462a      	mov	r2, r5
   227ec:	ab01      	add	r3, sp, #4
   227ee:	1939      	adds	r1, r7, r4
   227f0:	f7f9 f98a 	bl	1bb08 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   227f4:	b920      	cbnz	r0, 22800 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   227f6:	9b01      	ldr	r3, [sp, #4]
   227f8:	42ab      	cmp	r3, r5
   227fa:	d101      	bne.n	22800 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   227fc:	442c      	add	r4, r5
   227fe:	e7e8      	b.n	227d2 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   22800:	f06f 0015 	mvn.w	r0, #21
   22804:	e7e9      	b.n	227da <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   22806:	2000      	movs	r0, #0
   22808:	e7e7      	b.n	227da <entropy_cc3xx_rng_get_entropy+0x14>

0002280a <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2280a:	2200      	movs	r2, #0
{
   2280c:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2280e:	4611      	mov	r1, r2
   22810:	4610      	mov	r0, r2
   22812:	f7f9 f949 	bl	1baa8 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   22816:	2800      	cmp	r0, #0
	}

	return 0;
}
   22818:	bf18      	it	ne
   2281a:	f06f 0015 	mvnne.w	r0, #21
   2281e:	bd08      	pop	{r3, pc}

00022820 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22820:	6843      	ldr	r3, [r0, #4]
}
   22822:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22824:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22826:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   22828:	600b      	str	r3, [r1, #0]
}
   2282a:	4770      	bx	lr

0002282c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2282c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2282e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22832:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   22834:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   22838:	6098      	str	r0, [r3, #8]
}
   2283a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2283c:	60d9      	str	r1, [r3, #12]
   2283e:	4770      	bx	lr

00022840 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22840:	6843      	ldr	r3, [r0, #4]
}
   22842:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22844:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   22846:	6099      	str	r1, [r3, #8]
}
   22848:	4770      	bx	lr

0002284a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2284a:	6843      	ldr	r3, [r0, #4]
}
   2284c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2284e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   22850:	60d9      	str	r1, [r3, #12]
}
   22852:	4770      	bx	lr

00022854 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22854:	6843      	ldr	r3, [r0, #4]
   22856:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   22858:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2285a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2285e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   22860:	6090      	str	r0, [r2, #8]
}
   22862:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   22864:	60d3      	str	r3, [r2, #12]
   22866:	4770      	bx	lr

00022868 <gpio_nrfx_manage_callback>:
{
   22868:	b510      	push	{r4, lr}
	return port->data;
   2286a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2286c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2286e:	b1f8      	cbz	r0, 228b0 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22870:	4288      	cmp	r0, r1
   22872:	d119      	bne.n	228a8 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   22874:	689c      	ldr	r4, [r3, #8]
	return node->next;
   22876:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22878:	42a1      	cmp	r1, r4
	list->head = node;
   2287a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2287c:	d100      	bne.n	22880 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2287e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   22880:	2000      	movs	r0, #0
   22882:	6008      	str	r0, [r1, #0]
	if (set) {
   22884:	b12a      	cbz	r2, 22892 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   22886:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22888:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2288a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2288c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2288e:	b902      	cbnz	r2, 22892 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   22890:	6099      	str	r1, [r3, #8]
	return 0;
   22892:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22894:	e010      	b.n	228b8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22896:	4281      	cmp	r1, r0
   22898:	d106      	bne.n	228a8 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2289a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2289c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2289e:	6898      	ldr	r0, [r3, #8]
   228a0:	4281      	cmp	r1, r0
   228a2:	d1ed      	bne.n	22880 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   228a4:	609c      	str	r4, [r3, #8]
}
   228a6:	e7eb      	b.n	22880 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   228a8:	4604      	mov	r4, r0
   228aa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   228ac:	2800      	cmp	r0, #0
   228ae:	d1f2      	bne.n	22896 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   228b0:	2a00      	cmp	r2, #0
   228b2:	d1e8      	bne.n	22886 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   228b4:	f06f 0015 	mvn.w	r0, #21
}
   228b8:	bd10      	pop	{r4, pc}

000228ba <led_gpio_set_brightness>:
{
   228ba:	b410      	push	{r4}
	const struct led_gpio_config *config = dev->config;
   228bc:	6843      	ldr	r3, [r0, #4]
	if ((led >= config->num_leds) || (value > 100)) {
   228be:	6818      	ldr	r0, [r3, #0]
   228c0:	4288      	cmp	r0, r1
   228c2:	d917      	bls.n	228f4 <led_gpio_set_brightness+0x3a>
   228c4:	2a64      	cmp	r2, #100	; 0x64
   228c6:	d815      	bhi.n	228f4 <led_gpio_set_brightness+0x3a>
	led_gpio = &config->led[led];
   228c8:	685b      	ldr	r3, [r3, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   228ca:	f853 0031 	ldr.w	r0, [r3, r1, lsl #3]
   228ce:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   228d2:	2101      	movs	r1, #1
   228d4:	7923      	ldrb	r3, [r4, #4]
   228d6:	4099      	lsls	r1, r3
   228d8:	6903      	ldr	r3, [r0, #16]
   228da:	681b      	ldr	r3, [r3, #0]
   228dc:	4219      	tst	r1, r3
   228de:	d103      	bne.n	228e8 <led_gpio_set_brightness+0x2e>
	if (value != 0)	{
   228e0:	b922      	cbnz	r2, 228ec <led_gpio_set_brightness+0x32>
	return api->port_clear_bits_raw(port, pins);
   228e2:	6883      	ldr	r3, [r0, #8]
   228e4:	691b      	ldr	r3, [r3, #16]
   228e6:	e003      	b.n	228f0 <led_gpio_set_brightness+0x36>
	if (value != 0)	{
   228e8:	2a00      	cmp	r2, #0
   228ea:	d1fa      	bne.n	228e2 <led_gpio_set_brightness+0x28>
	return api->port_set_bits_raw(port, pins);
   228ec:	6883      	ldr	r3, [r0, #8]
   228ee:	68db      	ldr	r3, [r3, #12]
}
   228f0:	bc10      	pop	{r4}
	return api->port_clear_bits_raw(port, pins);
   228f2:	4718      	bx	r3
   228f4:	f06f 0015 	mvn.w	r0, #21
   228f8:	bc10      	pop	{r4}
   228fa:	4770      	bx	lr

000228fc <led_gpio_on>:
	return led_gpio_set_brightness(dev, led, 100);
   228fc:	2264      	movs	r2, #100	; 0x64
   228fe:	f7ff bfdc 	b.w	228ba <led_gpio_set_brightness>

00022902 <led_gpio_off>:
	return led_gpio_set_brightness(dev, led, 0);
   22902:	2200      	movs	r2, #0
   22904:	f7ff bfd9 	b.w	228ba <led_gpio_set_brightness>

00022908 <mbox_nrf_register_callback>:
{
   22908:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2290a:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2290c:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2290e:	bf9f      	itttt	ls
   22910:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   22914:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   22918:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2291a:	2000      	movls	r0, #0
		return -EINVAL;
   2291c:	bf88      	it	hi
   2291e:	f06f 0015 	mvnhi.w	r0, #21
}
   22922:	bd10      	pop	{r4, pc}

00022924 <mbox_nrf_mtu_get>:
}
   22924:	2000      	movs	r0, #0
   22926:	4770      	bx	lr

00022928 <mbox_nrf_max_channels_get>:
}
   22928:	2010      	movs	r0, #16
   2292a:	4770      	bx	lr

0002292c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2292c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2292e:	6843      	ldr	r3, [r0, #4]
   22930:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   22932:	7a05      	ldrb	r5, [r0, #8]
   22934:	6844      	ldr	r4, [r0, #4]
   22936:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2293a:	42a3      	cmp	r3, r4
   2293c:	d302      	bcc.n	22944 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2293e:	f06f 0001 	mvn.w	r0, #1
}
   22942:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   22944:	795c      	ldrb	r4, [r3, #5]
   22946:	428c      	cmp	r4, r1
   22948:	d001      	beq.n	2294e <pinctrl_lookup_state+0x22>
		(*state)++;
   2294a:	3308      	adds	r3, #8
   2294c:	e7f0      	b.n	22930 <pinctrl_lookup_state+0x4>
			return 0;
   2294e:	2000      	movs	r0, #0
   22950:	e7f7      	b.n	22942 <pinctrl_lookup_state+0x16>

00022952 <uarte_nrfx_config_get>:
{
   22952:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   22954:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   22956:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2295a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2295e:	2000      	movs	r0, #0
   22960:	4770      	bx	lr

00022962 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   22962:	6843      	ldr	r3, [r0, #4]
   22964:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22966:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2296a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2296e:	4770      	bx	lr

00022970 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   22970:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   22972:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   22974:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22976:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2297a:	b150      	cbz	r0, 22992 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2297c:	2000      	movs	r0, #0
	*c = *data->rx_data;
   2297e:	6952      	ldr	r2, [r2, #20]
   22980:	7812      	ldrb	r2, [r2, #0]
   22982:	700a      	strb	r2, [r1, #0]
   22984:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   22988:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2298c:	2201      	movs	r2, #1
   2298e:	601a      	str	r2, [r3, #0]
	return 0;
   22990:	4770      	bx	lr
		return -1;
   22992:	f04f 30ff 	mov.w	r0, #4294967295
}
   22996:	4770      	bx	lr

00022998 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   22998:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2299a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2299c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   229a0:	b940      	cbnz	r0, 229b4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   229a2:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   229a4:	079b      	lsls	r3, r3, #30
   229a6:	d406      	bmi.n	229b6 <is_tx_ready.isra.0+0x1e>
   229a8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   229ac:	3800      	subs	r0, #0
   229ae:	bf18      	it	ne
   229b0:	2001      	movne	r0, #1
   229b2:	4770      	bx	lr
   229b4:	2001      	movs	r0, #1
}
   229b6:	4770      	bx	lr

000229b8 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   229b8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   229ba:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   229bc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   229c0:	05c9      	lsls	r1, r1, #23
   229c2:	d518      	bpl.n	229f6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   229c4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   229c8:	b1a9      	cbz	r1, 229f6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   229ca:	f04f 0020 	mov.w	r0, #32
   229ce:	f3ef 8111 	mrs	r1, BASEPRI
   229d2:	f380 8812 	msr	BASEPRI_MAX, r0
   229d6:	f3bf 8f6f 	isb	sy
   229da:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   229de:	b130      	cbz	r0, 229ee <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229e0:	2000      	movs	r0, #0
   229e2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   229e6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   229ea:	2001      	movs	r0, #1
   229ec:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   229ee:	f381 8811 	msr	BASEPRI, r1
   229f2:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   229f6:	6852      	ldr	r2, [r2, #4]
   229f8:	06d2      	lsls	r2, r2, #27
   229fa:	d515      	bpl.n	22a28 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   229fc:	f04f 0120 	mov.w	r1, #32
   22a00:	f3ef 8211 	mrs	r2, BASEPRI
   22a04:	f381 8812 	msr	BASEPRI_MAX, r1
   22a08:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a0c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   22a10:	b111      	cbz	r1, 22a18 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   22a12:	2100      	movs	r1, #0
   22a14:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   22a18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   22a1c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   22a20:	f382 8811 	msr	BASEPRI, r2
   22a24:	f3bf 8f6f 	isb	sy
}
   22a28:	4770      	bx	lr

00022a2a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   22a2a:	4770      	bx	lr

00022a2c <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22a2c:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22a2e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   22a32:	009b      	lsls	r3, r3, #2
   22a34:	b29b      	uxth	r3, r3
   22a36:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   22a3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   22a3e:	601a      	str	r2, [r3, #0]
   22a40:	681b      	ldr	r3, [r3, #0]
}
   22a42:	4770      	bx	lr

00022a44 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   22a44:	b130      	cbz	r0, 22a54 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   22a46:	3010      	adds	r0, #16
   22a48:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   22a4a:	b2c0      	uxtb	r0, r0
   22a4c:	f100 2050 	add.w	r0, r0, #1342197760	; 0x50005000
   22a50:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
}
   22a54:	4770      	bx	lr

00022a56 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   22a56:	f7eb ba01 	b.w	de5c <compare_set>

00022a5a <sys_clock_cycle_get_32>:
{
   22a5a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   22a5c:	f7eb f9dc 	bl	de18 <z_nrf_rtc_timer_read>
}
   22a60:	bd08      	pop	{r3, pc}

00022a62 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   22a62:	f7f8 bfc3 	b.w	1b9ec <nrf_cc3xx_platform_init>

00022a66 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   22a66:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   22a68:	f7e3 fa50 	bl	5f0c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   22a6c:	f7e3 fb36 	bl	60dc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   22a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   22a74:	f7f8 bfba 	b.w	1b9ec <nrf_cc3xx_platform_init>

00022a78 <wifi_nrf_osal_init>:

#include "osal_api.h"
#include "osal_ops.h"

struct wifi_nrf_osal_priv *wifi_nrf_osal_init(void)
{
   22a78:	b510      	push	{r4, lr}
	struct wifi_nrf_osal_priv *opriv = NULL;
	const struct wifi_nrf_osal_ops *ops = NULL;

	ops = get_os_ops();
   22a7a:	f7ee fd3d 	bl	114f8 <get_os_ops>
   22a7e:	4604      	mov	r4, r0

	opriv = ops->mem_zalloc(sizeof(struct wifi_nrf_osal_priv));
   22a80:	6843      	ldr	r3, [r0, #4]
   22a82:	2004      	movs	r0, #4
   22a84:	4798      	blx	r3

	if (!opriv) {
   22a86:	b100      	cbz	r0, 22a8a <wifi_nrf_osal_init+0x12>
		goto out;
	}

	opriv->ops = ops;
   22a88:	6004      	str	r4, [r0, #0]

out:
	return opriv;
}
   22a8a:	bd10      	pop	{r4, pc}

00022a8c <wifi_nrf_osal_deinit>:
{
	const struct wifi_nrf_osal_ops *ops = NULL;

	ops = opriv->ops;

	ops->mem_free(opriv);
   22a8c:	6803      	ldr	r3, [r0, #0]
   22a8e:	689b      	ldr	r3, [r3, #8]
   22a90:	4718      	bx	r3

00022a92 <wifi_nrf_osal_mem_alloc>:


void *wifi_nrf_osal_mem_alloc(struct wifi_nrf_osal_priv *opriv,
			      size_t size)
{
	return opriv->ops->mem_alloc(size);
   22a92:	6803      	ldr	r3, [r0, #0]
   22a94:	4608      	mov	r0, r1
   22a96:	681b      	ldr	r3, [r3, #0]
   22a98:	4718      	bx	r3

00022a9a <wifi_nrf_osal_mem_zalloc>:


void *wifi_nrf_osal_mem_zalloc(struct wifi_nrf_osal_priv *opriv,
			       size_t size)
{
	return opriv->ops->mem_zalloc(size);
   22a9a:	6803      	ldr	r3, [r0, #0]
   22a9c:	4608      	mov	r0, r1
   22a9e:	685b      	ldr	r3, [r3, #4]
   22aa0:	4718      	bx	r3

00022aa2 <wifi_nrf_osal_mem_free>:


void wifi_nrf_osal_mem_free(struct wifi_nrf_osal_priv *opriv,
			    void *buf)
{
	opriv->ops->mem_free(buf);
   22aa2:	6803      	ldr	r3, [r0, #0]
   22aa4:	4608      	mov	r0, r1
   22aa6:	689b      	ldr	r3, [r3, #8]
   22aa8:	4718      	bx	r3

00022aaa <wifi_nrf_osal_mem_cpy>:

void *wifi_nrf_osal_mem_cpy(struct wifi_nrf_osal_priv *opriv,
			    void *dest,
			    const void *src,
			    size_t count)
{
   22aaa:	b410      	push	{r4}
   22aac:	4604      	mov	r4, r0
   22aae:	4608      	mov	r0, r1
   22ab0:	4611      	mov	r1, r2
	return opriv->ops->mem_cpy(dest,
   22ab2:	6822      	ldr	r2, [r4, #0]
   22ab4:	68d4      	ldr	r4, [r2, #12]
   22ab6:	461a      	mov	r2, r3
   22ab8:	4623      	mov	r3, r4
				   src,
				   count);
}
   22aba:	bc10      	pop	{r4}
	return opriv->ops->mem_cpy(dest,
   22abc:	4718      	bx	r3

00022abe <wifi_nrf_osal_mem_set>:

void *wifi_nrf_osal_mem_set(struct wifi_nrf_osal_priv *opriv,
			    void *start,
			    int val,
			    size_t size)
{
   22abe:	b410      	push	{r4}
   22ac0:	4604      	mov	r4, r0
   22ac2:	4608      	mov	r0, r1
   22ac4:	4611      	mov	r1, r2
	return opriv->ops->mem_set(start,
   22ac6:	6822      	ldr	r2, [r4, #0]
   22ac8:	6914      	ldr	r4, [r2, #16]
   22aca:	461a      	mov	r2, r3
   22acc:	4623      	mov	r3, r4
				   val,
				   size);
}
   22ace:	bc10      	pop	{r4}
	return opriv->ops->mem_set(start,
   22ad0:	4718      	bx	r3

00022ad2 <wifi_nrf_osal_spinlock_alloc>:
}


void *wifi_nrf_osal_spinlock_alloc(struct wifi_nrf_osal_priv *opriv)
{
	return opriv->ops->spinlock_alloc();
   22ad2:	6803      	ldr	r3, [r0, #0]
   22ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22ad6:	4718      	bx	r3

00022ad8 <wifi_nrf_osal_spinlock_free>:


void wifi_nrf_osal_spinlock_free(struct wifi_nrf_osal_priv *opriv,
				 void *lock)
{
	opriv->ops->spinlock_free(lock);
   22ad8:	6803      	ldr	r3, [r0, #0]
   22ada:	4608      	mov	r0, r1
   22adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22ade:	4718      	bx	r3

00022ae0 <wifi_nrf_osal_spinlock_init>:


void wifi_nrf_osal_spinlock_init(struct wifi_nrf_osal_priv *opriv,
				 void *lock)
{
	opriv->ops->spinlock_init(lock);
   22ae0:	6803      	ldr	r3, [r0, #0]
   22ae2:	4608      	mov	r0, r1
   22ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   22ae6:	4718      	bx	r3

00022ae8 <wifi_nrf_osal_spinlock_take>:


void wifi_nrf_osal_spinlock_take(struct wifi_nrf_osal_priv *opriv,
				 void *lock)
{
	opriv->ops->spinlock_take(lock);
   22ae8:	6803      	ldr	r3, [r0, #0]
   22aea:	4608      	mov	r0, r1
   22aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   22aee:	4718      	bx	r3

00022af0 <wifi_nrf_osal_spinlock_rel>:


void wifi_nrf_osal_spinlock_rel(struct wifi_nrf_osal_priv *opriv,
				void *lock)
{
	opriv->ops->spinlock_rel(lock);
   22af0:	6803      	ldr	r3, [r0, #0]
   22af2:	4608      	mov	r0, r1
   22af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   22af6:	4718      	bx	r3

00022af8 <wifi_nrf_osal_spinlock_irq_take>:
}

void wifi_nrf_osal_spinlock_irq_take(struct wifi_nrf_osal_priv *opriv,
				     void *lock,
				     unsigned long *flags)
{
   22af8:	4603      	mov	r3, r0
	opriv->ops->spinlock_irq_take(lock,
   22afa:	681b      	ldr	r3, [r3, #0]
{
   22afc:	4608      	mov	r0, r1
	opriv->ops->spinlock_irq_take(lock,
   22afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   22b00:	4611      	mov	r1, r2
   22b02:	4718      	bx	r3

00022b04 <wifi_nrf_osal_spinlock_irq_rel>:


void wifi_nrf_osal_spinlock_irq_rel(struct wifi_nrf_osal_priv *opriv,
				    void *lock,
				    unsigned long *flags)
{
   22b04:	4603      	mov	r3, r0
	opriv->ops->spinlock_irq_rel(lock,
   22b06:	681b      	ldr	r3, [r3, #0]
{
   22b08:	4608      	mov	r0, r1
	opriv->ops->spinlock_irq_rel(lock,
   22b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   22b0c:	4611      	mov	r1, r2
   22b0e:	4718      	bx	r3

00022b10 <wifi_nrf_osal_log_dbg>:


int wifi_nrf_osal_log_dbg(struct wifi_nrf_osal_priv *opriv,
			  const char *fmt,
			  ...)
{
   22b10:	b40e      	push	{r1, r2, r3}
   22b12:	b503      	push	{r0, r1, lr}
   22b14:	a903      	add	r1, sp, #12
   22b16:	f851 2b04 	ldr.w	r2, [r1], #4
	va_list args;
	int ret = -1;

	va_start(args, fmt);

	ret = opriv->ops->log_dbg(fmt, args);
   22b1a:	6803      	ldr	r3, [r0, #0]
   22b1c:	4610      	mov	r0, r2
   22b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	va_start(args, fmt);
   22b20:	9101      	str	r1, [sp, #4]
	ret = opriv->ops->log_dbg(fmt, args);
   22b22:	4798      	blx	r3

	va_end(args);

	return ret;
}
   22b24:	b002      	add	sp, #8
   22b26:	f85d eb04 	ldr.w	lr, [sp], #4
   22b2a:	b003      	add	sp, #12
   22b2c:	4770      	bx	lr

00022b2e <wifi_nrf_osal_log_info>:


int wifi_nrf_osal_log_info(struct wifi_nrf_osal_priv *opriv,
			   const char *fmt,
			   ...)
{
   22b2e:	b40e      	push	{r1, r2, r3}
   22b30:	b503      	push	{r0, r1, lr}
   22b32:	a903      	add	r1, sp, #12
   22b34:	f851 2b04 	ldr.w	r2, [r1], #4
	va_list args;
	int ret = -1;

	va_start(args, fmt);

	ret = opriv->ops->log_info(fmt, args);
   22b38:	6803      	ldr	r3, [r0, #0]
   22b3a:	4610      	mov	r0, r2
   22b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	va_start(args, fmt);
   22b3e:	9101      	str	r1, [sp, #4]
	ret = opriv->ops->log_info(fmt, args);
   22b40:	4798      	blx	r3

	va_end(args);

	return ret;
}
   22b42:	b002      	add	sp, #8
   22b44:	f85d eb04 	ldr.w	lr, [sp], #4
   22b48:	b003      	add	sp, #12
   22b4a:	4770      	bx	lr

00022b4c <wifi_nrf_osal_log_err>:


int wifi_nrf_osal_log_err(struct wifi_nrf_osal_priv *opriv,
			  const char *fmt,
			  ...)
{
   22b4c:	b40e      	push	{r1, r2, r3}
   22b4e:	b503      	push	{r0, r1, lr}
   22b50:	a903      	add	r1, sp, #12
   22b52:	f851 2b04 	ldr.w	r2, [r1], #4
	va_list args;
	int ret = -1;

	va_start(args, fmt);

	ret = opriv->ops->log_err(fmt, args);
   22b56:	6803      	ldr	r3, [r0, #0]
   22b58:	4610      	mov	r0, r2
   22b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	va_start(args, fmt);
   22b5c:	9101      	str	r1, [sp, #4]
	ret = opriv->ops->log_err(fmt, args);
   22b5e:	4798      	blx	r3

	va_end(args);

	return ret;
}
   22b60:	b002      	add	sp, #8
   22b62:	f85d eb04 	ldr.w	lr, [sp], #4
   22b66:	b003      	add	sp, #12
   22b68:	4770      	bx	lr

00022b6a <wifi_nrf_osal_llist_node_alloc>:


void *wifi_nrf_osal_llist_node_alloc(struct wifi_nrf_osal_priv *opriv)
{
	return opriv->ops->llist_node_alloc();
   22b6a:	6803      	ldr	r3, [r0, #0]
   22b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   22b6e:	4718      	bx	r3

00022b70 <wifi_nrf_osal_llist_node_free>:


void wifi_nrf_osal_llist_node_free(struct wifi_nrf_osal_priv *opriv,
				   void *node)
{
	opriv->ops->llist_node_free(node);
   22b70:	6803      	ldr	r3, [r0, #0]
   22b72:	4608      	mov	r0, r1
   22b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   22b76:	4718      	bx	r3

00022b78 <wifi_nrf_osal_llist_node_data_get>:


void *wifi_nrf_osal_llist_node_data_get(struct wifi_nrf_osal_priv *opriv,
					void *node)
{
	return opriv->ops->llist_node_data_get(node);
   22b78:	6803      	ldr	r3, [r0, #0]
   22b7a:	4608      	mov	r0, r1
   22b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   22b7e:	4718      	bx	r3

00022b80 <wifi_nrf_osal_llist_node_data_set>:


void wifi_nrf_osal_llist_node_data_set(struct wifi_nrf_osal_priv *opriv,
				       void *node,
				       void *data)
{
   22b80:	4603      	mov	r3, r0
	opriv->ops->llist_node_data_set(node,
   22b82:	681b      	ldr	r3, [r3, #0]
{
   22b84:	4608      	mov	r0, r1
	opriv->ops->llist_node_data_set(node,
   22b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   22b88:	4611      	mov	r1, r2
   22b8a:	4718      	bx	r3

00022b8c <wifi_nrf_osal_llist_alloc>:
}


void *wifi_nrf_osal_llist_alloc(struct wifi_nrf_osal_priv *opriv)
{
	return opriv->ops->llist_alloc();
   22b8c:	6803      	ldr	r3, [r0, #0]
   22b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   22b90:	4718      	bx	r3

00022b92 <wifi_nrf_osal_llist_free>:


void wifi_nrf_osal_llist_free(struct wifi_nrf_osal_priv *opriv,
			      void *llist)
{
	return opriv->ops->llist_free(llist);
   22b92:	6803      	ldr	r3, [r0, #0]
   22b94:	4608      	mov	r0, r1
   22b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   22b98:	4718      	bx	r3

00022b9a <wifi_nrf_osal_llist_init>:


void wifi_nrf_osal_llist_init(struct wifi_nrf_osal_priv *opriv,
			      void *llist)
{
	return opriv->ops->llist_init(llist);
   22b9a:	6803      	ldr	r3, [r0, #0]
   22b9c:	4608      	mov	r0, r1
   22b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   22ba0:	4718      	bx	r3

00022ba2 <wifi_nrf_osal_llist_add_node_tail>:


void wifi_nrf_osal_llist_add_node_tail(struct wifi_nrf_osal_priv *opriv,
				       void *llist,
				       void *llist_node)
{
   22ba2:	4603      	mov	r3, r0
	return opriv->ops->llist_add_node_tail(llist,
   22ba4:	681b      	ldr	r3, [r3, #0]
{
   22ba6:	4608      	mov	r0, r1
	return opriv->ops->llist_add_node_tail(llist,
   22ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   22bac:	4611      	mov	r1, r2
   22bae:	4718      	bx	r3

00022bb0 <wifi_nrf_osal_llist_get_node_head>:


void *wifi_nrf_osal_llist_get_node_head(struct wifi_nrf_osal_priv *opriv,
					void *llist)
{
	return opriv->ops->llist_get_node_head(llist);
   22bb0:	6803      	ldr	r3, [r0, #0]
   22bb2:	4608      	mov	r0, r1
   22bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   22bb8:	4718      	bx	r3

00022bba <wifi_nrf_osal_llist_del_node>:


void wifi_nrf_osal_llist_del_node(struct wifi_nrf_osal_priv *opriv,
				  void *llist,
				  void *llist_node)
{
   22bba:	4603      	mov	r3, r0
	opriv->ops->llist_del_node(llist,
   22bbc:	681b      	ldr	r3, [r3, #0]
{
   22bbe:	4608      	mov	r0, r1
	opriv->ops->llist_del_node(llist,
   22bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   22bc4:	4611      	mov	r1, r2
   22bc6:	4718      	bx	r3

00022bc8 <wifi_nrf_osal_nbuf_alloc>:


void *wifi_nrf_osal_nbuf_alloc(struct wifi_nrf_osal_priv *opriv,
			       unsigned int size)
{
	return opriv->ops->nbuf_alloc(size);
   22bc8:	6803      	ldr	r3, [r0, #0]
   22bca:	4608      	mov	r0, r1
   22bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   22bd0:	4718      	bx	r3

00022bd2 <wifi_nrf_osal_nbuf_free>:


void wifi_nrf_osal_nbuf_free(struct wifi_nrf_osal_priv *opriv,
			     void *nbuf)
{
	opriv->ops->nbuf_free(nbuf);
   22bd2:	6803      	ldr	r3, [r0, #0]
   22bd4:	4608      	mov	r0, r1
   22bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   22bda:	4718      	bx	r3

00022bdc <wifi_nrf_osal_nbuf_data_size>:


unsigned int wifi_nrf_osal_nbuf_data_size(struct wifi_nrf_osal_priv *opriv,
					  void *nbuf)
{
	return opriv->ops->nbuf_data_size(nbuf);
   22bdc:	6803      	ldr	r3, [r0, #0]
   22bde:	4608      	mov	r0, r1
   22be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   22be4:	4718      	bx	r3

00022be6 <wifi_nrf_osal_nbuf_data_get>:


void *wifi_nrf_osal_nbuf_data_get(struct wifi_nrf_osal_priv *opriv,
				  void *nbuf)
{
	return opriv->ops->nbuf_data_get(nbuf);
   22be6:	6803      	ldr	r3, [r0, #0]
   22be8:	4608      	mov	r0, r1
   22bea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   22bee:	4718      	bx	r3

00022bf0 <wifi_nrf_osal_nbuf_data_put>:


void *wifi_nrf_osal_nbuf_data_put(struct wifi_nrf_osal_priv *opriv,
				  void *nbuf,
				  unsigned int size)
{
   22bf0:	4603      	mov	r3, r0
	return opriv->ops->nbuf_data_put(nbuf,
   22bf2:	681b      	ldr	r3, [r3, #0]
{
   22bf4:	4608      	mov	r0, r1
	return opriv->ops->nbuf_data_put(nbuf,
   22bf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   22bfa:	4611      	mov	r1, r2
   22bfc:	4718      	bx	r3

00022bfe <wifi_nrf_osal_nbuf_data_push>:


void *wifi_nrf_osal_nbuf_data_push(struct wifi_nrf_osal_priv *opriv,
				   void *nbuf,
				   unsigned int size)
{
   22bfe:	4603      	mov	r3, r0
	return opriv->ops->nbuf_data_push(nbuf,
   22c00:	681b      	ldr	r3, [r3, #0]
{
   22c02:	4608      	mov	r0, r1
	return opriv->ops->nbuf_data_push(nbuf,
   22c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   22c08:	4611      	mov	r1, r2
   22c0a:	4718      	bx	r3

00022c0c <wifi_nrf_osal_nbuf_data_pull>:


void *wifi_nrf_osal_nbuf_data_pull(struct wifi_nrf_osal_priv *opriv,
				   void *nbuf,
				   unsigned int size)
{
   22c0c:	4603      	mov	r3, r0
	return opriv->ops->nbuf_data_pull(nbuf,
   22c0e:	681b      	ldr	r3, [r3, #0]
{
   22c10:	4608      	mov	r0, r1
	return opriv->ops->nbuf_data_pull(nbuf,
   22c12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   22c16:	4611      	mov	r1, r2
   22c18:	4718      	bx	r3

00022c1a <wifi_nrf_osal_tasklet_alloc>:
}


void *wifi_nrf_osal_tasklet_alloc(struct wifi_nrf_osal_priv *opriv, int type)
{
	return opriv->ops->tasklet_alloc(type);
   22c1a:	6803      	ldr	r3, [r0, #0]
   22c1c:	4608      	mov	r0, r1
   22c1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   22c22:	4718      	bx	r3

00022c24 <wifi_nrf_osal_tasklet_free>:


void wifi_nrf_osal_tasklet_free(struct wifi_nrf_osal_priv *opriv,
				void *tasklet)
{
	opriv->ops->tasklet_free(tasklet);
   22c24:	6803      	ldr	r3, [r0, #0]
   22c26:	4608      	mov	r0, r1
   22c28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   22c2c:	4718      	bx	r3

00022c2e <wifi_nrf_osal_tasklet_init>:

void wifi_nrf_osal_tasklet_init(struct wifi_nrf_osal_priv *opriv,
				void *tasklet,
				void (*callbk_fn)(unsigned long),
				unsigned long data)
{
   22c2e:	b410      	push	{r4}
   22c30:	4604      	mov	r4, r0
   22c32:	4608      	mov	r0, r1
   22c34:	4611      	mov	r1, r2
	opriv->ops->tasklet_init(tasklet,
   22c36:	6822      	ldr	r2, [r4, #0]
   22c38:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
   22c3c:	461a      	mov	r2, r3
   22c3e:	4623      	mov	r3, r4
				 callbk_fn,
				 data);
}
   22c40:	bc10      	pop	{r4}
	opriv->ops->tasklet_init(tasklet,
   22c42:	4718      	bx	r3

00022c44 <wifi_nrf_osal_tasklet_schedule>:


void wifi_nrf_osal_tasklet_schedule(struct wifi_nrf_osal_priv *opriv,
				    void *tasklet)
{
	opriv->ops->tasklet_schedule(tasklet);
   22c44:	6803      	ldr	r3, [r0, #0]
   22c46:	4608      	mov	r0, r1
   22c48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   22c4c:	4718      	bx	r3

00022c4e <wifi_nrf_osal_sleep_ms>:


void wifi_nrf_osal_sleep_ms(struct wifi_nrf_osal_priv *opriv,
			    unsigned int msecs)
{
	opriv->ops->sleep_ms(msecs);
   22c4e:	6803      	ldr	r3, [r0, #0]
   22c50:	4608      	mov	r0, r1
   22c52:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   22c56:	4718      	bx	r3

00022c58 <wifi_nrf_osal_delay_us>:


void wifi_nrf_osal_delay_us(struct wifi_nrf_osal_priv *opriv,
			    unsigned long usecs)
{
	opriv->ops->delay_us(usecs);
   22c58:	6803      	ldr	r3, [r0, #0]
   22c5a:	4608      	mov	r0, r1
   22c5c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   22c60:	4718      	bx	r3

00022c62 <wifi_nrf_osal_time_get_curr_us>:
}


unsigned long wifi_nrf_osal_time_get_curr_us(struct wifi_nrf_osal_priv *opriv)
{
	return opriv->ops->time_get_curr_us();
   22c62:	6803      	ldr	r3, [r0, #0]
   22c64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   22c68:	4718      	bx	r3

00022c6a <wifi_nrf_osal_time_elapsed_us>:


unsigned int wifi_nrf_osal_time_elapsed_us(struct wifi_nrf_osal_priv *opriv,
					   unsigned long start_time_us)
{
	return opriv->ops->time_elapsed_us(start_time_us);
   22c6a:	6803      	ldr	r3, [r0, #0]
   22c6c:	4608      	mov	r0, r1
   22c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   22c72:	4718      	bx	r3

00022c74 <wifi_nrf_osal_bus_qspi_init>:
}


void *wifi_nrf_osal_bus_qspi_init(struct wifi_nrf_osal_priv *opriv)
{
	return opriv->ops->bus_qspi_init();
   22c74:	6803      	ldr	r3, [r0, #0]
   22c76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   22c7a:	4718      	bx	r3

00022c7c <wifi_nrf_osal_bus_qspi_deinit>:


void wifi_nrf_osal_bus_qspi_deinit(struct wifi_nrf_osal_priv *opriv,
				   void *os_qspi_priv)
{
	opriv->ops->bus_qspi_deinit(os_qspi_priv);
   22c7c:	6803      	ldr	r3, [r0, #0]
   22c7e:	4608      	mov	r0, r1
   22c80:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   22c84:	4718      	bx	r3

00022c86 <wifi_nrf_osal_bus_qspi_dev_add>:


void *wifi_nrf_osal_bus_qspi_dev_add(struct wifi_nrf_osal_priv *opriv,
				     void *os_qspi_priv,
				     void *osal_qspi_dev_ctx)
{
   22c86:	4603      	mov	r3, r0
	return opriv->ops->bus_qspi_dev_add(os_qspi_priv,
   22c88:	681b      	ldr	r3, [r3, #0]
{
   22c8a:	4608      	mov	r0, r1
	return opriv->ops->bus_qspi_dev_add(os_qspi_priv,
   22c8c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   22c90:	4611      	mov	r1, r2
   22c92:	4718      	bx	r3

00022c94 <wifi_nrf_osal_bus_qspi_dev_rem>:


void wifi_nrf_osal_bus_qspi_dev_rem(struct wifi_nrf_osal_priv *opriv,
				    void *os_qspi_dev_ctx)
{
	opriv->ops->bus_qspi_dev_rem(os_qspi_dev_ctx);
   22c94:	6803      	ldr	r3, [r0, #0]
   22c96:	4608      	mov	r0, r1
   22c98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   22c9c:	4718      	bx	r3

00022c9e <wifi_nrf_osal_bus_qspi_dev_init>:


enum wifi_nrf_status wifi_nrf_osal_bus_qspi_dev_init(struct wifi_nrf_osal_priv *opriv,
						     void *os_qspi_dev_ctx)
{
	return opriv->ops->bus_qspi_dev_init(os_qspi_dev_ctx);
   22c9e:	6803      	ldr	r3, [r0, #0]
   22ca0:	4608      	mov	r0, r1
   22ca2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   22ca6:	4718      	bx	r3

00022ca8 <wifi_nrf_osal_bus_qspi_dev_deinit>:


void wifi_nrf_osal_bus_qspi_dev_deinit(struct wifi_nrf_osal_priv *opriv,
				       void *os_qspi_dev_ctx)
{
	opriv->ops->bus_qspi_dev_deinit(os_qspi_dev_ctx);
   22ca8:	6803      	ldr	r3, [r0, #0]
   22caa:	4608      	mov	r0, r1
   22cac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   22cb0:	4718      	bx	r3

00022cb2 <wifi_nrf_osal_bus_qspi_dev_intr_reg>:

enum wifi_nrf_status wifi_nrf_osal_bus_qspi_dev_intr_reg(struct wifi_nrf_osal_priv *opriv,
							 void *os_qspi_dev_ctx,
							 void *callbk_data,
							 int (*callbk_fn)(void *callbk_data))
{
   22cb2:	b410      	push	{r4}
   22cb4:	4604      	mov	r4, r0
   22cb6:	4608      	mov	r0, r1
   22cb8:	4611      	mov	r1, r2
	return opriv->ops->bus_qspi_dev_intr_reg(os_qspi_dev_ctx,
   22cba:	6822      	ldr	r2, [r4, #0]
   22cbc:	f8d2 4120 	ldr.w	r4, [r2, #288]	; 0x120
   22cc0:	461a      	mov	r2, r3
   22cc2:	4623      	mov	r3, r4
						 callbk_data,
						 callbk_fn);
}
   22cc4:	bc10      	pop	{r4}
	return opriv->ops->bus_qspi_dev_intr_reg(os_qspi_dev_ctx,
   22cc6:	4718      	bx	r3

00022cc8 <wifi_nrf_osal_bus_qspi_dev_intr_unreg>:


void wifi_nrf_osal_bus_qspi_dev_intr_unreg(struct wifi_nrf_osal_priv *opriv,
					   void *os_qspi_dev_ctx)
{
	opriv->ops->bus_qspi_dev_intr_unreg(os_qspi_dev_ctx);
   22cc8:	6803      	ldr	r3, [r0, #0]
   22cca:	4608      	mov	r0, r1
   22ccc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   22cd0:	4718      	bx	r3

00022cd2 <wifi_nrf_osal_bus_qspi_dev_host_map_get>:


void wifi_nrf_osal_bus_qspi_dev_host_map_get(struct wifi_nrf_osal_priv *opriv,
					     void *os_qspi_dev_ctx,
					     struct wifi_nrf_osal_host_map *host_map)
{
   22cd2:	4603      	mov	r3, r0
	opriv->ops->bus_qspi_dev_host_map_get(os_qspi_dev_ctx,
   22cd4:	681b      	ldr	r3, [r3, #0]
{
   22cd6:	4608      	mov	r0, r1
	opriv->ops->bus_qspi_dev_host_map_get(os_qspi_dev_ctx,
   22cd8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   22cdc:	4611      	mov	r1, r2
   22cde:	4718      	bx	r3

00022ce0 <wifi_nrf_osal_qspi_read_reg32>:


unsigned int wifi_nrf_osal_qspi_read_reg32(struct wifi_nrf_osal_priv *opriv,
					   void *priv,
					   unsigned long addr)
{
   22ce0:	4603      	mov	r3, r0
	return opriv->ops->qspi_read_reg32(priv,
   22ce2:	681b      	ldr	r3, [r3, #0]
{
   22ce4:	4608      	mov	r0, r1
	return opriv->ops->qspi_read_reg32(priv,
   22ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22ce8:	4611      	mov	r1, r2
   22cea:	4718      	bx	r3

00022cec <wifi_nrf_osal_qspi_write_reg32>:

void wifi_nrf_osal_qspi_write_reg32(struct wifi_nrf_osal_priv *opriv,
				    void *priv,
				    unsigned long addr,
				    unsigned int val)
{
   22cec:	b410      	push	{r4}
   22cee:	4604      	mov	r4, r0
   22cf0:	4608      	mov	r0, r1
   22cf2:	4611      	mov	r1, r2
	opriv->ops->qspi_write_reg32(priv,
   22cf4:	6822      	ldr	r2, [r4, #0]
   22cf6:	6b14      	ldr	r4, [r2, #48]	; 0x30
   22cf8:	461a      	mov	r2, r3
   22cfa:	4623      	mov	r3, r4
				     addr,
				     val);
}
   22cfc:	bc10      	pop	{r4}
	opriv->ops->qspi_write_reg32(priv,
   22cfe:	4718      	bx	r3

00022d00 <wifi_nrf_osal_qspi_cpy_from>:
void wifi_nrf_osal_qspi_cpy_from(struct wifi_nrf_osal_priv *opriv,
				 void *priv,
				 void *dest,
				 unsigned long addr,
				 size_t count)
{
   22d00:	b410      	push	{r4}
   22d02:	4604      	mov	r4, r0
   22d04:	4608      	mov	r0, r1
   22d06:	4611      	mov	r1, r2
   22d08:	461a      	mov	r2, r3
	opriv->ops->qspi_cpy_from(priv,
   22d0a:	6823      	ldr	r3, [r4, #0]
   22d0c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   22d0e:	9b01      	ldr	r3, [sp, #4]
   22d10:	46a4      	mov	ip, r4
				  dest,
				  addr,
				  count);
}
   22d12:	bc10      	pop	{r4}
	opriv->ops->qspi_cpy_from(priv,
   22d14:	4760      	bx	ip

00022d16 <wifi_nrf_osal_qspi_cpy_to>:
void wifi_nrf_osal_qspi_cpy_to(struct wifi_nrf_osal_priv *opriv,
			       void *priv,
			       unsigned long addr,
			       const void *src,
			       size_t count)
{
   22d16:	b410      	push	{r4}
   22d18:	4604      	mov	r4, r0
   22d1a:	4608      	mov	r0, r1
   22d1c:	4611      	mov	r1, r2
   22d1e:	461a      	mov	r2, r3
	opriv->ops->qspi_cpy_to(priv,
   22d20:	6823      	ldr	r3, [r4, #0]
   22d22:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   22d24:	9b01      	ldr	r3, [sp, #4]
   22d26:	46a4      	mov	ip, r4
				addr,
				src,
				count);
}
   22d28:	bc10      	pop	{r4}
	opriv->ops->qspi_cpy_to(priv,
   22d2a:	4760      	bx	ip

00022d2c <wifi_nrf_osal_timer_alloc>:

#ifdef CONFIG_NRF_WIFI_LOW_POWER
void *wifi_nrf_osal_timer_alloc(struct wifi_nrf_osal_priv *opriv)
{
	return opriv->ops->timer_alloc();
   22d2c:	6803      	ldr	r3, [r0, #0]
   22d2e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   22d32:	4718      	bx	r3

00022d34 <wifi_nrf_osal_timer_init>:

void wifi_nrf_osal_timer_init(struct wifi_nrf_osal_priv *opriv,
			      void *timer,
			      void (*callbk_fn)(unsigned long),
			      unsigned long data)
{
   22d34:	b410      	push	{r4}
   22d36:	4604      	mov	r4, r0
   22d38:	4608      	mov	r0, r1
   22d3a:	4611      	mov	r1, r2
	opriv->ops->timer_init(timer,
   22d3c:	6822      	ldr	r2, [r4, #0]
   22d3e:	f8d2 4134 	ldr.w	r4, [r2, #308]	; 0x134
   22d42:	461a      	mov	r2, r3
   22d44:	4623      	mov	r3, r4
			       callbk_fn,
			       data);
}
   22d46:	bc10      	pop	{r4}
	opriv->ops->timer_init(timer,
   22d48:	4718      	bx	r3

00022d4a <wifi_nrf_osal_timer_schedule>:


void wifi_nrf_osal_timer_schedule(struct wifi_nrf_osal_priv *opriv,
				  void *timer,
				  unsigned long duration)
{
   22d4a:	4603      	mov	r3, r0
	opriv->ops->timer_schedule(timer,
   22d4c:	681b      	ldr	r3, [r3, #0]
{
   22d4e:	4608      	mov	r0, r1
	opriv->ops->timer_schedule(timer,
   22d50:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   22d54:	4611      	mov	r1, r2
   22d56:	4718      	bx	r3

00022d58 <wifi_nrf_osal_bus_qspi_ps_sleep>:


int wifi_nrf_osal_bus_qspi_ps_sleep(struct wifi_nrf_osal_priv *opriv,
				    void *os_qspi_priv)
{
	return opriv->ops->bus_qspi_ps_sleep(os_qspi_priv);
   22d58:	6803      	ldr	r3, [r0, #0]
   22d5a:	4608      	mov	r0, r1
   22d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
   22d60:	4718      	bx	r3

00022d62 <wifi_nrf_osal_bus_qspi_ps_wake>:


int wifi_nrf_osal_bus_qspi_ps_wake(struct wifi_nrf_osal_priv *opriv,
				   void *os_qspi_priv)
{
	return opriv->ops->bus_qspi_ps_wake(os_qspi_priv);
   22d62:	6803      	ldr	r3, [r0, #0]
   22d64:	4608      	mov	r0, r1
   22d66:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   22d6a:	4718      	bx	r3

00022d6c <wifi_nrf_osal_bus_qspi_ps_status>:


int wifi_nrf_osal_bus_qspi_ps_status(struct wifi_nrf_osal_priv *opriv,
				     void *os_qspi_priv)
{
	return opriv->ops->bus_qspi_ps_status(os_qspi_priv);
   22d6c:	6803      	ldr	r3, [r0, #0]
   22d6e:	4608      	mov	r0, r1
   22d70:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   22d74:	4718      	bx	r3

00022d76 <wifi_nrf_utils_list_free>:
	wifi_nrf_osal_llist_free(opriv,
   22d76:	f7ff bf0c 	b.w	22b92 <wifi_nrf_osal_llist_free>

00022d7a <wifi_nrf_utils_list_del_head>:
	}
}

void *wifi_nrf_utils_list_del_head(struct wifi_nrf_osal_priv *opriv,
				   void *list)
{
   22d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d7c:	4605      	mov	r5, r0
   22d7e:	460f      	mov	r7, r1
	void *list_node = NULL;
	void *data = NULL;

	list_node = wifi_nrf_osal_llist_get_node_head(opriv,
   22d80:	f7ff ff16 	bl	22bb0 <wifi_nrf_osal_llist_get_node_head>
						      list);

	if (!list_node) {
   22d84:	4604      	mov	r4, r0
   22d86:	b170      	cbz	r0, 22da6 <wifi_nrf_utils_list_del_head+0x2c>
		goto out;
	}

	data = wifi_nrf_osal_llist_node_data_get(opriv,
   22d88:	4601      	mov	r1, r0
   22d8a:	4628      	mov	r0, r5
   22d8c:	f7ff fef4 	bl	22b78 <wifi_nrf_osal_llist_node_data_get>
   22d90:	4606      	mov	r6, r0
						 list_node);

	wifi_nrf_osal_llist_del_node(opriv,
   22d92:	4622      	mov	r2, r4
   22d94:	4639      	mov	r1, r7
   22d96:	4628      	mov	r0, r5
   22d98:	f7ff ff0f 	bl	22bba <wifi_nrf_osal_llist_del_node>
				     list,
				     list_node);
	wifi_nrf_osal_llist_node_free(opriv,
   22d9c:	4621      	mov	r1, r4
   22d9e:	4628      	mov	r0, r5
   22da0:	f7ff fee6 	bl	22b70 <wifi_nrf_osal_llist_node_free>
	data = wifi_nrf_osal_llist_node_data_get(opriv,
   22da4:	4634      	mov	r4, r6
				      list_node);

out:
	return data;
}
   22da6:	4620      	mov	r0, r4
   22da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022daa <wifi_nrf_utils_q_alloc>:
#include "list.h"
#include "queue.h"

void *wifi_nrf_utils_q_alloc(struct wifi_nrf_osal_priv *opriv)
{
	return wifi_nrf_utils_list_alloc(opriv);
   22daa:	f7eb ba49 	b.w	e240 <wifi_nrf_utils_list_alloc>

00022dae <wifi_nrf_utils_q_free>:


void wifi_nrf_utils_q_free(struct wifi_nrf_osal_priv *opriv,
			   void *q)
{
	wifi_nrf_utils_list_free(opriv,
   22dae:	f7ff bfe2 	b.w	22d76 <wifi_nrf_utils_list_free>

00022db2 <wifi_nrf_utils_q_enqueue>:

enum wifi_nrf_status wifi_nrf_utils_q_enqueue(struct wifi_nrf_osal_priv *opriv,
					      void *q,
					      void *data)
{
	return wifi_nrf_utils_list_add_tail(opriv,
   22db2:	f7eb ba5b 	b.w	e26c <wifi_nrf_utils_list_add_tail>

00022db6 <wifi_nrf_utils_q_dequeue>:


void *wifi_nrf_utils_q_dequeue(struct wifi_nrf_osal_priv *opriv,
			       void *q)
{
	return wifi_nrf_utils_list_del_head(opriv,
   22db6:	f7ff bfe0 	b.w	22d7a <wifi_nrf_utils_list_del_head>

00022dba <nrf_wifi_utils_is_mac_addr_valid>:


bool nrf_wifi_utils_is_mac_addr_valid(const char *mac_addr)
{
	unsigned char zero_addr[NRF_WIFI_ETH_ADDR_LEN] = {0};
   22dba:	2300      	movs	r3, #0
{
   22dbc:	b513      	push	{r0, r1, r4, lr}

	return ((memcmp(mac_addr,
   22dbe:	2206      	movs	r2, #6
   22dc0:	4669      	mov	r1, sp
{
   22dc2:	4604      	mov	r4, r0
	unsigned char zero_addr[NRF_WIFI_ETH_ADDR_LEN] = {0};
   22dc4:	9300      	str	r3, [sp, #0]
   22dc6:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((memcmp(mac_addr,
   22dca:	f7f4 fa41 	bl	17250 <memcmp>
			zero_addr,
			sizeof(zero_addr)) != 0) &&
   22dce:	b120      	cbz	r0, 22dda <nrf_wifi_utils_is_mac_addr_valid+0x20>
   22dd0:	7820      	ldrb	r0, [r4, #0]
   22dd2:	f000 0001 	and.w	r0, r0, #1
   22dd6:	f1c0 0001 	rsb	r0, r0, #1
		!(mac_addr[0] & 0x1));
}
   22dda:	f000 0001 	and.w	r0, r0, #1
   22dde:	b002      	add	sp, #8
   22de0:	bd10      	pop	{r4, pc}

00022de2 <hal_rpu_ps_sleep>:
{
   22de2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned long flags = 0;
   22de4:	2500      	movs	r5, #0
{
   22de6:	4604      	mov	r4, r0
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
   22de8:	6803      	ldr	r3, [r0, #0]
	unsigned long flags = 0;
   22dea:	9501      	str	r5, [sp, #4]
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
   22dec:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
   22df0:	aa01      	add	r2, sp, #4
   22df2:	6818      	ldr	r0, [r3, #0]
   22df4:	f7ff fe80 	bl	22af8 <wifi_nrf_osal_spinlock_irq_take>
	wifi_nrf_bal_rpu_ps_sleep(hal_dev_ctx->bal_dev_ctx);
   22df8:	68a0      	ldr	r0, [r4, #8]
   22dfa:	f000 f882 	bl	22f02 <wifi_nrf_bal_rpu_ps_sleep>
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
   22dfe:	6823      	ldr	r3, [r4, #0]
	hal_dev_ctx->rpu_ps_state = RPU_PS_STATE_ASLEEP;
   22e00:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
   22e04:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
   22e08:	6818      	ldr	r0, [r3, #0]
   22e0a:	aa01      	add	r2, sp, #4
   22e0c:	f7ff fe7a 	bl	22b04 <wifi_nrf_osal_spinlock_irq_rel>
}
   22e10:	b003      	add	sp, #12
   22e12:	bd30      	pop	{r4, r5, pc}

00022e14 <wifi_nrf_hal_irq_handler>:
	unsigned long flags = 0;
   22e14:	2300      	movs	r3, #0
{
   22e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
	unsigned long flags = 0;
   22e18:	9301      	str	r3, [sp, #4]
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
   22e1a:	6803      	ldr	r3, [r0, #0]
{
   22e1c:	4604      	mov	r4, r0
	wifi_nrf_osal_spinlock_irq_take(hal_dev_ctx->hpriv->opriv,
   22e1e:	6e81      	ldr	r1, [r0, #104]	; 0x68
   22e20:	aa01      	add	r2, sp, #4
   22e22:	6818      	ldr	r0, [r3, #0]
   22e24:	f7ff fe68 	bl	22af8 <wifi_nrf_osal_spinlock_irq_take>
	hal_dev_ctx->rpu_ps_state = ps_state;
   22e28:	2301      	movs	r3, #1
	ps_state = hal_dev_ctx->rpu_ps_state;
   22e2a:	f894 6098 	ldrb.w	r6, [r4, #152]	; 0x98
	status = hal_rpu_irq_process(hal_dev_ctx);
   22e2e:	4620      	mov	r0, r4
	hal_dev_ctx->rpu_ps_state = ps_state;
   22e30:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	status = hal_rpu_irq_process(hal_dev_ctx);
   22e34:	f7ec fa7c 	bl	f330 <hal_rpu_irq_process>
   22e38:	4605      	mov	r5, r0
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
   22e3a:	6823      	ldr	r3, [r4, #0]
	hal_dev_ctx->rpu_ps_state = ps_state;
   22e3c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
	wifi_nrf_osal_spinlock_irq_rel(hal_dev_ctx->hpriv->opriv,
   22e40:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   22e42:	6818      	ldr	r0, [r3, #0]
   22e44:	aa01      	add	r2, sp, #4
   22e46:	f7ff fe5d 	bl	22b04 <wifi_nrf_osal_spinlock_irq_rel>
	if (status != WIFI_NRF_STATUS_SUCCESS) {
   22e4a:	b925      	cbnz	r5, 22e56 <wifi_nrf_hal_irq_handler+0x42>
	wifi_nrf_osal_tasklet_schedule(hal_dev_ctx->hpriv->opriv,
   22e4c:	6823      	ldr	r3, [r4, #0]
   22e4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   22e50:	6818      	ldr	r0, [r3, #0]
   22e52:	f7ff fef7 	bl	22c44 <wifi_nrf_osal_tasklet_schedule>
}
   22e56:	4628      	mov	r0, r5
   22e58:	b002      	add	sp, #8
   22e5a:	bd70      	pop	{r4, r5, r6, pc}

00022e5c <wifi_nrf_hal_deinit>:
{
   22e5c:	b510      	push	{r4, lr}
   22e5e:	4604      	mov	r4, r0
	wifi_nrf_bal_deinit(hpriv->bpriv);
   22e60:	6840      	ldr	r0, [r0, #4]
   22e62:	f000 f818 	bl	22e96 <wifi_nrf_bal_deinit>
	wifi_nrf_osal_mem_free(hpriv->opriv,
   22e66:	4621      	mov	r1, r4
   22e68:	6820      	ldr	r0, [r4, #0]
}
   22e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wifi_nrf_osal_mem_free(hpriv->opriv,
   22e6e:	f7ff be18 	b.w	22aa2 <wifi_nrf_osal_mem_free>

00022e72 <wifi_nrf_bal_isr>:
	status = bal_dev_ctx->bpriv->intr_callbk_fn(bal_dev_ctx->hal_dev_ctx);
   22e72:	6803      	ldr	r3, [r0, #0]
   22e74:	6840      	ldr	r0, [r0, #4]
   22e76:	695b      	ldr	r3, [r3, #20]
   22e78:	4718      	bx	r3

00022e7a <wifi_nrf_bal_dev_rem>:
{
   22e7a:	b510      	push	{r4, lr}
   22e7c:	4604      	mov	r4, r0
	bal_dev_ctx->bpriv->ops->dev_rem(bal_dev_ctx->bus_dev_ctx);
   22e7e:	6803      	ldr	r3, [r0, #0]
   22e80:	6880      	ldr	r0, [r0, #8]
   22e82:	689b      	ldr	r3, [r3, #8]
   22e84:	68db      	ldr	r3, [r3, #12]
   22e86:	4798      	blx	r3
	wifi_nrf_osal_mem_free(bal_dev_ctx->bpriv->opriv,
   22e88:	6823      	ldr	r3, [r4, #0]
   22e8a:	4621      	mov	r1, r4
}
   22e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wifi_nrf_osal_mem_free(bal_dev_ctx->bpriv->opriv,
   22e90:	6818      	ldr	r0, [r3, #0]
   22e92:	f7ff be06 	b.w	22aa2 <wifi_nrf_osal_mem_free>

00022e96 <wifi_nrf_bal_deinit>:


void wifi_nrf_bal_deinit(struct wifi_nrf_bal_priv *bpriv)
{
   22e96:	b510      	push	{r4, lr}
   22e98:	4604      	mov	r4, r0
	bpriv->ops->deinit(bpriv->bus_priv);
   22e9a:	6883      	ldr	r3, [r0, #8]
   22e9c:	6840      	ldr	r0, [r0, #4]
   22e9e:	685b      	ldr	r3, [r3, #4]
   22ea0:	4798      	blx	r3

	wifi_nrf_osal_mem_free(bpriv->opriv,
   22ea2:	4621      	mov	r1, r4
   22ea4:	6820      	ldr	r0, [r4, #0]
			       bpriv);
}
   22ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wifi_nrf_osal_mem_free(bpriv->opriv,
   22eaa:	f7ff bdfa 	b.w	22aa2 <wifi_nrf_osal_mem_free>

00022eae <wifi_nrf_bal_read_word>:
	wifi_nrf_rpu_bal_sleep_chk(bal_dev_ctx,
				   addr_offset);
#endif	/* CONFIG_NRF_WIFI_LOW_POWER_DBG */
#endif  /* CONFIG_NRF_WIFI_LOW_POWER */

	val = bal_dev_ctx->bpriv->ops->read_word(bal_dev_ctx->bus_dev_ctx,
   22eae:	6803      	ldr	r3, [r0, #0]
   22eb0:	6880      	ldr	r0, [r0, #8]
   22eb2:	689b      	ldr	r3, [r3, #8]
   22eb4:	699b      	ldr	r3, [r3, #24]
   22eb6:	4718      	bx	r3

00022eb8 <wifi_nrf_bal_write_word>:
	wifi_nrf_rpu_bal_sleep_chk(bal_dev_ctx,
				   addr_offset);
#endif	/* CONFIG_NRF_WIFI_LOW_POWER_DBG */
#endif  /* CONFIG_NRF_WIFI_LOW_POWER */

	bal_dev_ctx->bpriv->ops->write_word(bal_dev_ctx->bus_dev_ctx,
   22eb8:	6803      	ldr	r3, [r0, #0]
   22eba:	6880      	ldr	r0, [r0, #8]
   22ebc:	689b      	ldr	r3, [r3, #8]
   22ebe:	69db      	ldr	r3, [r3, #28]
   22ec0:	4718      	bx	r3

00022ec2 <wifi_nrf_bal_read_block>:

void wifi_nrf_bal_read_block(void *ctx,
			     void *dest_addr,
			     unsigned long src_addr_offset,
			     size_t len)
{
   22ec2:	b410      	push	{r4}
	wifi_nrf_rpu_bal_sleep_chk(bal_dev_ctx,
				   src_addr_offset);
#endif	/* CONFIG_NRF_WIFI_LOW_POWER_DBG */
#endif  /* CONFIG_NRF_WIFI_LOW_POWER */

	bal_dev_ctx->bpriv->ops->read_block(bal_dev_ctx->bus_dev_ctx,
   22ec4:	6804      	ldr	r4, [r0, #0]
   22ec6:	6880      	ldr	r0, [r0, #8]
   22ec8:	68a4      	ldr	r4, [r4, #8]
   22eca:	6a24      	ldr	r4, [r4, #32]
   22ecc:	46a4      	mov	ip, r4
					    dest_addr,
					    src_addr_offset,
					    len);
}
   22ece:	bc10      	pop	{r4}
	bal_dev_ctx->bpriv->ops->read_block(bal_dev_ctx->bus_dev_ctx,
   22ed0:	4760      	bx	ip

00022ed2 <wifi_nrf_bal_write_block>:

void wifi_nrf_bal_write_block(void *ctx,
			      unsigned long dest_addr_offset,
			      const void *src_addr,
			      size_t len)
{
   22ed2:	b410      	push	{r4}
	wifi_nrf_rpu_bal_sleep_chk(bal_dev_ctx,
				   dest_addr_offset);
#endif	/* CONFIG_NRF_WIFI_LOW_POWER_DBG */
#endif  /* CONFIG_NRF_WIFI_LOW_POWER */

	bal_dev_ctx->bpriv->ops->write_block(bal_dev_ctx->bus_dev_ctx,
   22ed4:	6804      	ldr	r4, [r0, #0]
   22ed6:	6880      	ldr	r0, [r0, #8]
   22ed8:	68a4      	ldr	r4, [r4, #8]
   22eda:	6a64      	ldr	r4, [r4, #36]	; 0x24
   22edc:	46a4      	mov	ip, r4
					     dest_addr_offset,
					     src_addr,
					     len);
}
   22ede:	bc10      	pop	{r4}
	bal_dev_ctx->bpriv->ops->write_block(bal_dev_ctx->bus_dev_ctx,
   22ee0:	4760      	bx	ip

00022ee2 <wifi_nrf_bal_dma_map>:

unsigned long wifi_nrf_bal_dma_map(void *ctx,
				   unsigned long virt_addr,
				   size_t len,
				   enum wifi_nrf_osal_dma_dir dma_dir)
{
   22ee2:	b410      	push	{r4}
	struct wifi_nrf_bal_dev_ctx *bal_dev_ctx = NULL;
	unsigned long phy_addr = 0;

	bal_dev_ctx = (struct wifi_nrf_bal_dev_ctx *)ctx;

	phy_addr = bal_dev_ctx->bpriv->ops->dma_map(bal_dev_ctx->bus_dev_ctx,
   22ee4:	6804      	ldr	r4, [r0, #0]
   22ee6:	6880      	ldr	r0, [r0, #8]
   22ee8:	68a4      	ldr	r4, [r4, #8]
   22eea:	6aa4      	ldr	r4, [r4, #40]	; 0x28
   22eec:	46a4      	mov	ip, r4
						    virt_addr,
						    len,
						    dma_dir);

	return phy_addr;
}
   22eee:	bc10      	pop	{r4}
	phy_addr = bal_dev_ctx->bpriv->ops->dma_map(bal_dev_ctx->bus_dev_ctx,
   22ef0:	4760      	bx	ip

00022ef2 <wifi_nrf_bal_dma_unmap>:

unsigned long wifi_nrf_bal_dma_unmap(void *ctx,
				     unsigned long phy_addr,
				     size_t len,
				     enum wifi_nrf_osal_dma_dir dma_dir)
{
   22ef2:	b410      	push	{r4}
	struct wifi_nrf_bal_dev_ctx *bal_dev_ctx = NULL;
	unsigned long virt_addr = 0;

	bal_dev_ctx = (struct wifi_nrf_bal_dev_ctx *)ctx;

	virt_addr = bal_dev_ctx->bpriv->ops->dma_unmap(bal_dev_ctx->bus_dev_ctx,
   22ef4:	6804      	ldr	r4, [r0, #0]
   22ef6:	6880      	ldr	r0, [r0, #8]
   22ef8:	68a4      	ldr	r4, [r4, #8]
   22efa:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   22efc:	46a4      	mov	ip, r4
						       phy_addr,
						       len,
						       dma_dir);

	return virt_addr;
}
   22efe:	bc10      	pop	{r4}
	virt_addr = bal_dev_ctx->bpriv->ops->dma_unmap(bal_dev_ctx->bus_dev_ctx,
   22f00:	4760      	bx	ip

00022f02 <wifi_nrf_bal_rpu_ps_sleep>:
{
	struct wifi_nrf_bal_dev_ctx *bal_dev_ctx = NULL;

	bal_dev_ctx = (struct wifi_nrf_bal_dev_ctx *)ctx;

	bal_dev_ctx->bpriv->ops->rpu_ps_sleep(bal_dev_ctx->bus_dev_ctx);
   22f02:	6803      	ldr	r3, [r0, #0]
   22f04:	6880      	ldr	r0, [r0, #8]
   22f06:	689b      	ldr	r3, [r3, #8]
   22f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   22f0a:	4718      	bx	r3

00022f0c <wifi_nrf_bal_rpu_ps_wake>:
{
	struct wifi_nrf_bal_dev_ctx *bal_dev_ctx = NULL;

	bal_dev_ctx = (struct wifi_nrf_bal_dev_ctx *)ctx;

	bal_dev_ctx->bpriv->ops->rpu_ps_wake(bal_dev_ctx->bus_dev_ctx);
   22f0c:	6803      	ldr	r3, [r0, #0]
   22f0e:	6880      	ldr	r0, [r0, #8]
   22f10:	689b      	ldr	r3, [r3, #8]
   22f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   22f14:	4718      	bx	r3

00022f16 <wifi_nrf_bal_rpu_ps_status>:
{
	struct wifi_nrf_bal_dev_ctx *bal_dev_ctx = NULL;

	bal_dev_ctx = (struct wifi_nrf_bal_dev_ctx *)ctx;

	return bal_dev_ctx->bpriv->ops->rpu_ps_status(bal_dev_ctx->bus_dev_ctx);
   22f16:	6803      	ldr	r3, [r0, #0]
   22f18:	6880      	ldr	r0, [r0, #8]
   22f1a:	689b      	ldr	r3, [r3, #8]
   22f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22f1e:	4718      	bx	r3

00022f20 <wifi_nrf_bus_qspi_irq_handler>:
{
   22f20:	b508      	push	{r3, lr}
	ret = qspi_priv->intr_callbk_fn(dev_ctx->bal_dev_ctx);
   22f22:	6803      	ldr	r3, [r0, #0]
   22f24:	6840      	ldr	r0, [r0, #4]
   22f26:	689b      	ldr	r3, [r3, #8]
   22f28:	4798      	blx	r3
}
   22f2a:	bd08      	pop	{r3, pc}

00022f2c <wifi_nrf_bus_qspi_dma_map>:
	phy_addr = qspi_dev_ctx->host_addr_base + (virt_addr - qspi_dev_ctx->addr_pktram_base);
   22f2c:	68c3      	ldr	r3, [r0, #12]
   22f2e:	6900      	ldr	r0, [r0, #16]
   22f30:	4419      	add	r1, r3
}
   22f32:	1a08      	subs	r0, r1, r0
   22f34:	4770      	bx	lr

00022f36 <wifi_nrf_bus_qspi_dma_unmap>:
	virt_addr = qspi_dev_ctx->addr_pktram_base + (phy_addr - qspi_dev_ctx->host_addr_base);
   22f36:	6903      	ldr	r3, [r0, #16]
   22f38:	68c0      	ldr	r0, [r0, #12]
   22f3a:	4419      	add	r1, r3
}
   22f3c:	1a08      	subs	r0, r1, r0
   22f3e:	4770      	bx	lr

00022f40 <wifi_nrf_bus_qspi_ps_status>:
	return wifi_nrf_osal_bus_qspi_ps_status(qspi_dev_ctx->qspi_priv->opriv,
   22f40:	6803      	ldr	r3, [r0, #0]
   22f42:	6881      	ldr	r1, [r0, #8]
   22f44:	6818      	ldr	r0, [r3, #0]
   22f46:	f7ff bf11 	b.w	22d6c <wifi_nrf_osal_bus_qspi_ps_status>

00022f4a <wifi_nrf_bus_qspi_ps_wake>:
	wifi_nrf_osal_bus_qspi_ps_wake(qspi_dev_ctx->qspi_priv->opriv,
   22f4a:	6803      	ldr	r3, [r0, #0]
   22f4c:	6881      	ldr	r1, [r0, #8]
   22f4e:	6818      	ldr	r0, [r3, #0]
   22f50:	f7ff bf07 	b.w	22d62 <wifi_nrf_osal_bus_qspi_ps_wake>

00022f54 <wifi_nrf_bus_qspi_ps_sleep>:
	wifi_nrf_osal_bus_qspi_ps_sleep(qspi_dev_ctx->qspi_priv->opriv,
   22f54:	6803      	ldr	r3, [r0, #0]
   22f56:	6881      	ldr	r1, [r0, #8]
   22f58:	6818      	ldr	r0, [r3, #0]
   22f5a:	f7ff befd 	b.w	22d58 <wifi_nrf_osal_bus_qspi_ps_sleep>

00022f5e <wifi_nrf_bus_qspi_write_block>:
{
   22f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	wifi_nrf_osal_qspi_cpy_to(qspi_dev_ctx->qspi_priv->opriv,
   22f60:	68c5      	ldr	r5, [r0, #12]
   22f62:	6804      	ldr	r4, [r0, #0]
   22f64:	9300      	str	r3, [sp, #0]
   22f66:	4613      	mov	r3, r2
   22f68:	194a      	adds	r2, r1, r5
   22f6a:	6881      	ldr	r1, [r0, #8]
   22f6c:	6820      	ldr	r0, [r4, #0]
   22f6e:	f7ff fed2 	bl	22d16 <wifi_nrf_osal_qspi_cpy_to>
}
   22f72:	b003      	add	sp, #12
   22f74:	bd30      	pop	{r4, r5, pc}

00022f76 <wifi_nrf_bus_qspi_read_block>:
{
   22f76:	b537      	push	{r0, r1, r2, r4, r5, lr}
	wifi_nrf_osal_qspi_cpy_from(qspi_dev_ctx->qspi_priv->opriv,
   22f78:	68c5      	ldr	r5, [r0, #12]
   22f7a:	6804      	ldr	r4, [r0, #0]
   22f7c:	9300      	str	r3, [sp, #0]
   22f7e:	1953      	adds	r3, r2, r5
   22f80:	460a      	mov	r2, r1
   22f82:	6881      	ldr	r1, [r0, #8]
   22f84:	6820      	ldr	r0, [r4, #0]
   22f86:	f7ff febb 	bl	22d00 <wifi_nrf_osal_qspi_cpy_from>
}
   22f8a:	b003      	add	sp, #12
   22f8c:	bd30      	pop	{r4, r5, pc}

00022f8e <wifi_nrf_bus_qspi_write_word>:
{
   22f8e:	b410      	push	{r4}
   22f90:	4613      	mov	r3, r2
	wifi_nrf_osal_qspi_write_reg32(qspi_dev_ctx->qspi_priv->opriv,
   22f92:	6804      	ldr	r4, [r0, #0]
   22f94:	68c2      	ldr	r2, [r0, #12]
   22f96:	440a      	add	r2, r1
   22f98:	6881      	ldr	r1, [r0, #8]
   22f9a:	6820      	ldr	r0, [r4, #0]
}
   22f9c:	bc10      	pop	{r4}
	wifi_nrf_osal_qspi_write_reg32(qspi_dev_ctx->qspi_priv->opriv,
   22f9e:	f7ff bea5 	b.w	22cec <wifi_nrf_osal_qspi_write_reg32>

00022fa2 <wifi_nrf_bus_qspi_read_word>:
	val = wifi_nrf_osal_qspi_read_reg32(qspi_dev_ctx->qspi_priv->opriv,
   22fa2:	68c2      	ldr	r2, [r0, #12]
   22fa4:	6803      	ldr	r3, [r0, #0]
   22fa6:	440a      	add	r2, r1
   22fa8:	6881      	ldr	r1, [r0, #8]
   22faa:	6818      	ldr	r0, [r3, #0]
   22fac:	f7ff be98 	b.w	22ce0 <wifi_nrf_osal_qspi_read_reg32>

00022fb0 <wifi_nrf_bus_qspi_dev_deinit>:
	wifi_nrf_osal_bus_qspi_dev_deinit(qspi_dev_ctx->qspi_priv->opriv,
   22fb0:	6803      	ldr	r3, [r0, #0]
   22fb2:	6881      	ldr	r1, [r0, #8]
   22fb4:	6818      	ldr	r0, [r3, #0]
   22fb6:	f7ff be77 	b.w	22ca8 <wifi_nrf_osal_bus_qspi_dev_deinit>

00022fba <wifi_nrf_bus_qspi_dev_rem>:
{
   22fba:	b510      	push	{r4, lr}
   22fbc:	4604      	mov	r4, r0
	wifi_nrf_osal_bus_qspi_dev_intr_unreg(qspi_dev_ctx->qspi_priv->opriv,
   22fbe:	6803      	ldr	r3, [r0, #0]
   22fc0:	6881      	ldr	r1, [r0, #8]
   22fc2:	6818      	ldr	r0, [r3, #0]
   22fc4:	f7ff fe80 	bl	22cc8 <wifi_nrf_osal_bus_qspi_dev_intr_unreg>
	wifi_nrf_osal_mem_free(qspi_dev_ctx->qspi_priv->opriv,
   22fc8:	6823      	ldr	r3, [r4, #0]
   22fca:	4621      	mov	r1, r4
}
   22fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wifi_nrf_osal_mem_free(qspi_dev_ctx->qspi_priv->opriv,
   22fd0:	6818      	ldr	r0, [r3, #0]
   22fd2:	f7ff bd66 	b.w	22aa2 <wifi_nrf_osal_mem_free>

00022fd6 <wifi_nrf_bus_qspi_deinit>:
{
   22fd6:	b510      	push	{r4, lr}
   22fd8:	4604      	mov	r4, r0
	wifi_nrf_osal_bus_qspi_deinit(qspi_priv->opriv,
   22fda:	e9d0 0100 	ldrd	r0, r1, [r0]
   22fde:	f7ff fe4d 	bl	22c7c <wifi_nrf_osal_bus_qspi_deinit>
	wifi_nrf_osal_mem_free(qspi_priv->opriv,
   22fe2:	4621      	mov	r1, r4
   22fe4:	6820      	ldr	r0, [r4, #0]
}
   22fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wifi_nrf_osal_mem_free(qspi_priv->opriv,
   22fea:	f7ff bd5a 	b.w	22aa2 <wifi_nrf_osal_mem_free>

00022fee <wifi_nrf_fmac_vif_idx_get>:
{
   22fee:	4603      	mov	r3, r0
		if (fmac_dev_ctx->vif_ctx[i] == NULL) {
   22ff0:	68c0      	ldr	r0, [r0, #12]
   22ff2:	b120      	cbz	r0, 22ffe <wifi_nrf_fmac_vif_idx_get+0x10>
   22ff4:	691b      	ldr	r3, [r3, #16]
	for (i = 0; i < MAX_NUM_VIFS; i++) {
   22ff6:	2b00      	cmp	r3, #0
   22ff8:	bf14      	ite	ne
   22ffa:	2002      	movne	r0, #2
   22ffc:	2001      	moveq	r0, #1
}
   22ffe:	4770      	bx	lr

00023000 <wifi_nrf_fmac_deinit>:
{
   23000:	b538      	push	{r3, r4, r5, lr}
   23002:	4604      	mov	r4, r0
	wifi_nrf_hal_deinit(fpriv->hpriv);
   23004:	e9d0 5000 	ldrd	r5, r0, [r0]
   23008:	f7ff ff28 	bl	22e5c <wifi_nrf_hal_deinit>
	wifi_nrf_osal_mem_free(opriv,
   2300c:	4628      	mov	r0, r5
   2300e:	4621      	mov	r1, r4
   23010:	f7ff fd47 	bl	22aa2 <wifi_nrf_osal_mem_free>
	wifi_nrf_osal_deinit(opriv);
   23014:	4628      	mov	r0, r5
}
   23016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	wifi_nrf_osal_deinit(opriv);
   2301a:	f7ff bd37 	b.w	22a8c <wifi_nrf_osal_deinit>

0002301e <zep_shim_qspi_read_reg32>:
{
   2301e:	4603      	mov	r3, r0
   23020:	b507      	push	{r0, r1, r2, lr}
		dev->read(addr, &val, 4);
   23022:	2204      	movs	r2, #4
	dev = qspi_priv->qspi_dev;
   23024:	681b      	ldr	r3, [r3, #0]
	if (addr < 0x0C0000) {
   23026:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
{
   2302a:	4608      	mov	r0, r1
		dev->hl_read(addr, &val, 4);
   2302c:	bf34      	ite	cc
   2302e:	695b      	ldrcc	r3, [r3, #20]
		dev->read(addr, &val, 4);
   23030:	691b      	ldrcs	r3, [r3, #16]
   23032:	eb0d 0102 	add.w	r1, sp, r2
   23036:	4798      	blx	r3
}
   23038:	9801      	ldr	r0, [sp, #4]
   2303a:	b003      	add	sp, #12
   2303c:	f85d fb04 	ldr.w	pc, [sp], #4

00023040 <zep_shim_qspi_write_reg32>:
{
   23040:	b507      	push	{r0, r1, r2, lr}
   23042:	4603      	mov	r3, r0
   23044:	9201      	str	r2, [sp, #4]
	dev->write(addr, &val, 4);
   23046:	2204      	movs	r2, #4
   23048:	681b      	ldr	r3, [r3, #0]
{
   2304a:	4608      	mov	r0, r1
	dev->write(addr, &val, 4);
   2304c:	68db      	ldr	r3, [r3, #12]
   2304e:	eb0d 0102 	add.w	r1, sp, r2
   23052:	4798      	blx	r3
}
   23054:	b003      	add	sp, #12
   23056:	f85d fb04 	ldr.w	pc, [sp], #4

0002305a <zep_shim_qspi_cpy_from>:
{
   2305a:	b410      	push	{r4}
   2305c:	4604      	mov	r4, r0
   2305e:	4610      	mov	r0, r2
   23060:	461a      	mov	r2, r3
	if (count % 4 != 0) {
   23062:	0793      	lsls	r3, r2, #30
		count = (count + 4) & 0xfffffffc;
   23064:	bf18      	it	ne
   23066:	1d13      	addne	r3, r2, #4
	dev = qspi_priv->qspi_dev;
   23068:	6824      	ldr	r4, [r4, #0]
		count = (count + 4) & 0xfffffffc;
   2306a:	bf18      	it	ne
   2306c:	f023 0203 	bicne.w	r2, r3, #3
	if (addr < 0x0C0000) {
   23070:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
		dev->hl_read(addr, dest, count);
   23074:	bf34      	ite	cc
   23076:	6963      	ldrcc	r3, [r4, #20]
		dev->read(addr, dest, count);
   23078:	6923      	ldrcs	r3, [r4, #16]
}
   2307a:	bc10      	pop	{r4}
		dev->read(addr, dest, count);
   2307c:	4718      	bx	r3

0002307e <zep_shim_qspi_cpy_to>:
{
   2307e:	b410      	push	{r4}
   23080:	4604      	mov	r4, r0
   23082:	4608      	mov	r0, r1
   23084:	4611      	mov	r1, r2
   23086:	461a      	mov	r2, r3
	dev = qspi_priv->qspi_dev;
   23088:	6824      	ldr	r4, [r4, #0]
	if (count % 4 != 0) {
   2308a:	0793      	lsls	r3, r2, #30
		count = (count + 4) & 0xfffffffc;
   2308c:	bf1c      	itt	ne
   2308e:	1d13      	addne	r3, r2, #4
   23090:	f023 0203 	bicne.w	r2, r3, #3
	dev->write(addr, src, count);
   23094:	68e3      	ldr	r3, [r4, #12]
}
   23096:	bc10      	pop	{r4}
	dev->write(addr, src, count);
   23098:	4718      	bx	r3

0002309a <zep_shim_nbuf_headroom_res>:
	nwb->data += size;
   2309a:	6803      	ldr	r3, [r0, #0]
   2309c:	440b      	add	r3, r1
   2309e:	6003      	str	r3, [r0, #0]
	nwb->tail += size;
   230a0:	6843      	ldr	r3, [r0, #4]
   230a2:	440b      	add	r3, r1
   230a4:	6043      	str	r3, [r0, #4]
	nwb->headroom += size;
   230a6:	68c3      	ldr	r3, [r0, #12]
   230a8:	440b      	add	r3, r1
   230aa:	60c3      	str	r3, [r0, #12]
}
   230ac:	4770      	bx	lr

000230ae <zep_shim_nbuf_headroom_get>:
}
   230ae:	68c0      	ldr	r0, [r0, #12]
   230b0:	4770      	bx	lr

000230b2 <zep_shim_nbuf_data_size>:
}
   230b2:	6880      	ldr	r0, [r0, #8]
   230b4:	4770      	bx	lr

000230b6 <zep_shim_nbuf_data_get>:
}
   230b6:	6800      	ldr	r0, [r0, #0]
   230b8:	4770      	bx	lr

000230ba <zep_shim_nbuf_data_put>:
{
   230ba:	4603      	mov	r3, r0
	unsigned char *data = nwb->tail;
   230bc:	6840      	ldr	r0, [r0, #4]
	nwb->tail += size;
   230be:	1842      	adds	r2, r0, r1
   230c0:	605a      	str	r2, [r3, #4]
	nwb->len += size;
   230c2:	689a      	ldr	r2, [r3, #8]
   230c4:	440a      	add	r2, r1
   230c6:	609a      	str	r2, [r3, #8]
}
   230c8:	4770      	bx	lr

000230ca <zep_shim_nbuf_data_push>:
{
   230ca:	4603      	mov	r3, r0
	nwb->headroom -= size;
   230cc:	68da      	ldr	r2, [r3, #12]
	nwb->data -= size;
   230ce:	6800      	ldr	r0, [r0, #0]
	nwb->headroom -= size;
   230d0:	1a52      	subs	r2, r2, r1
   230d2:	60da      	str	r2, [r3, #12]
	nwb->len += size;
   230d4:	689a      	ldr	r2, [r3, #8]
	nwb->data -= size;
   230d6:	1a40      	subs	r0, r0, r1
	nwb->len += size;
   230d8:	440a      	add	r2, r1
	nwb->data -= size;
   230da:	6018      	str	r0, [r3, #0]
	nwb->len += size;
   230dc:	609a      	str	r2, [r3, #8]
}
   230de:	4770      	bx	lr

000230e0 <zep_shim_nbuf_data_pull>:
{
   230e0:	4603      	mov	r3, r0
	nwb->headroom += size;
   230e2:	68da      	ldr	r2, [r3, #12]
	nwb->data += size;
   230e4:	6800      	ldr	r0, [r0, #0]
	nwb->headroom += size;
   230e6:	440a      	add	r2, r1
   230e8:	60da      	str	r2, [r3, #12]
	nwb->len -= size;
   230ea:	689a      	ldr	r2, [r3, #8]
	nwb->data += size;
   230ec:	4408      	add	r0, r1
	nwb->len -= size;
   230ee:	1a52      	subs	r2, r2, r1
	nwb->data += size;
   230f0:	6018      	str	r0, [r3, #0]
	nwb->len -= size;
   230f2:	609a      	str	r2, [r3, #8]
}
   230f4:	4770      	bx	lr

000230f6 <zep_shim_llist_node_data_get>:
}
   230f6:	6880      	ldr	r0, [r0, #8]
   230f8:	4770      	bx	lr

000230fa <zep_shim_llist_node_data_set>:
	zep_llist_node->data = data;
   230fa:	6081      	str	r1, [r0, #8]
}
   230fc:	4770      	bx	lr

000230fe <zep_shim_llist_init>:
	list->tail = (sys_dnode_t *)list;
   230fe:	e9c0 0000 	strd	r0, r0, [r0]
}
   23102:	4770      	bx	lr

00023104 <zep_shim_llist_add_node_tail>:
	sys_dnode_t *const tail = list->tail;
   23104:	6843      	ldr	r3, [r0, #4]
	node->prev = tail;
   23106:	e9c1 0300 	strd	r0, r3, [r1]
	tail->next = node;
   2310a:	6019      	str	r1, [r3, #0]
	zep_llist->len += 1;
   2310c:	6883      	ldr	r3, [r0, #8]
	list->tail = node;
   2310e:	6041      	str	r1, [r0, #4]
   23110:	3301      	adds	r3, #1
   23112:	6083      	str	r3, [r0, #8]
}
   23114:	4770      	bx	lr

00023116 <zep_shim_llist_get_node_head>:
{
   23116:	4603      	mov	r3, r0
	if (!zep_llist->len) {
   23118:	6880      	ldr	r0, [r0, #8]
   2311a:	b118      	cbz	r0, 23124 <zep_shim_llist_get_node_head+0xe>
	return list->head == list;
   2311c:	6818      	ldr	r0, [r3, #0]
		return NULL;
   2311e:	4283      	cmp	r3, r0
   23120:	bf08      	it	eq
   23122:	2000      	moveq	r0, #0
}
   23124:	4770      	bx	lr

00023126 <zep_shim_llist_get_node_nxt>:
{
   23126:	4603      	mov	r3, r0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23128:	4608      	mov	r0, r1
   2312a:	b129      	cbz	r1, 23138 <zep_shim_llist_get_node_nxt+0x12>
	return (node == list->tail) ? NULL : node->next;
   2312c:	685b      	ldr	r3, [r3, #4]
   2312e:	4299      	cmp	r1, r3
   23130:	d001      	beq.n	23136 <zep_shim_llist_get_node_nxt+0x10>
   23132:	6808      	ldr	r0, [r1, #0]
   23134:	4770      	bx	lr
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23136:	2000      	movs	r0, #0
}
   23138:	4770      	bx	lr

0002313a <zep_shim_llist_del_node>:
	sys_dnode_t *const next = node->next;
   2313a:	e9d1 3200 	ldrd	r3, r2, [r1]
	prev->next = next;
   2313e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23140:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23142:	2300      	movs	r3, #0
	node->prev = NULL;
   23144:	e9c1 3300 	strd	r3, r3, [r1]
	zep_llist->len -= 1;
   23148:	6883      	ldr	r3, [r0, #8]
   2314a:	3b01      	subs	r3, #1
   2314c:	6083      	str	r3, [r0, #8]
}
   2314e:	4770      	bx	lr

00023150 <zep_shim_llist_len>:
}
   23150:	6880      	ldr	r0, [r0, #8]
   23152:	4770      	bx	lr

00023154 <zep_shim_bus_qspi_dev_init>:
}
   23154:	2000      	movs	r0, #0
   23156:	4770      	bx	lr

00023158 <zep_shim_bus_qspi_dev_deinit>:
	dev->deinit();
   23158:	6803      	ldr	r3, [r0, #0]
   2315a:	4718      	bx	r3

0002315c <zep_shim_bus_qspi_dev_rem>:
}
   2315c:	4770      	bx	lr

0002315e <zep_shim_mem_zalloc>:
	size = (size + 4) & 0xfffffffc;
   2315e:	3004      	adds	r0, #4
	return k_calloc(size, sizeof(char));
   23160:	2101      	movs	r1, #1
   23162:	f020 0003 	bic.w	r0, r0, #3
   23166:	f001 bb68 	b.w	2483a <k_calloc>

0002316a <zep_shim_nbuf_alloc>:
{
   2316a:	b538      	push	{r3, r4, r5, lr}
	nwb = (struct nwb *)k_calloc(sizeof(struct nwb), sizeof(char));
   2316c:	2101      	movs	r1, #1
{
   2316e:	4605      	mov	r5, r0
	nwb = (struct nwb *)k_calloc(sizeof(struct nwb), sizeof(char));
   23170:	2030      	movs	r0, #48	; 0x30
   23172:	f001 fb62 	bl	2483a <k_calloc>
	if (!nwb)
   23176:	4604      	mov	r4, r0
   23178:	b140      	cbz	r0, 2318c <zep_shim_nbuf_alloc+0x22>
	nwb->priv = k_calloc(size, sizeof(char));
   2317a:	2101      	movs	r1, #1
   2317c:	4628      	mov	r0, r5
   2317e:	f001 fb5c 	bl	2483a <k_calloc>
   23182:	6160      	str	r0, [r4, #20]
	if (!nwb->priv) {
   23184:	b928      	cbnz	r0, 23192 <zep_shim_nbuf_alloc+0x28>
		k_free(nwb);
   23186:	4620      	mov	r0, r4
   23188:	f001 fb4c 	bl	24824 <k_free>
		return NULL;
   2318c:	2400      	movs	r4, #0
}
   2318e:	4620      	mov	r0, r4
   23190:	bd38      	pop	{r3, r4, r5, pc}
	nwb->len = 0;
   23192:	2300      	movs	r3, #0
	nwb->tail = nwb->data;
   23194:	e9c4 0000 	strd	r0, r0, [r4]
	nwb->headroom = 0;
   23198:	e9c4 3302 	strd	r3, r3, [r4, #8]
	nwb->next = NULL;
   2319c:	6123      	str	r3, [r4, #16]
	return nwb;
   2319e:	e7f6      	b.n	2318e <zep_shim_nbuf_alloc+0x24>

000231a0 <zep_shim_nbuf_free>:
{
   231a0:	b510      	push	{r4, lr}
   231a2:	4604      	mov	r4, r0
	k_free(((struct nwb *)nbuf)->priv);
   231a4:	6940      	ldr	r0, [r0, #20]
   231a6:	f001 fb3d 	bl	24824 <k_free>
	k_free(nbuf);
   231aa:	4620      	mov	r0, r4
}
   231ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_free(nbuf);
   231b0:	f001 bb38 	b.w	24824 <k_free>

000231b4 <zep_shim_spinlock_free>:
	k_free(lock);
   231b4:	f001 bb36 	b.w	24824 <k_free>

000231b8 <zep_shim_bus_qspi_ps_status>:
	return rpu_sleep_status();
   231b8:	f000 b941 	b.w	2343e <rpu_sleep_status>

000231bc <zep_shim_bus_qspi_ps_wake>:
{
   231bc:	b508      	push	{r3, lr}
	rpu_wakeup();
   231be:	f000 f934 	bl	2342a <rpu_wakeup>
}
   231c2:	2000      	movs	r0, #0
   231c4:	bd08      	pop	{r3, pc}

000231c6 <zep_shim_bus_qspi_ps_sleep>:
{
   231c6:	b508      	push	{r3, lr}
	rpu_sleep();
   231c8:	f7ee fd3e 	bl	11c48 <rpu_sleep>
}
   231cc:	2000      	movs	r0, #0
   231ce:	bd08      	pop	{r3, pc}

000231d0 <zep_shim_timer_kill>:
	del_timer_sync(timer);
   231d0:	f000 b8e7 	b.w	233a2 <del_timer_sync>

000231d4 <zep_shim_timer_schedule>:
	mod_timer(timer, duration);
   231d4:	f000 b8cd 	b.w	23372 <mod_timer>

000231d8 <zep_shim_timer_init>:
	((struct timer_list *)timer)->data = data;
   231d8:	e9c0 1200 	strd	r1, r2, [r0]
	init_timer(timer);
   231dc:	f7ee ba0c 	b.w	115f8 <init_timer>

000231e0 <zep_shim_mem_alloc>:
	size = (size + 4) & 0xfffffffc;
   231e0:	3004      	adds	r0, #4
	return k_malloc(size);
   231e2:	f020 0003 	bic.w	r0, r0, #3
   231e6:	f001 bb24 	b.w	24832 <k_malloc>

000231ea <zep_shim_bus_qspi_dev_add>:
{
   231ea:	b510      	push	{r4, lr}
   231ec:	4604      	mov	r4, r0
	rpu_enable();
   231ee:	f000 f928 	bl	23442 <rpu_enable>
	qdev = qspi_dev();
   231f2:	f7ee fc63 	bl	11abc <qspi_dev>
	zep_qspi_priv->dev_added = true;
   231f6:	2301      	movs	r3, #1
	zep_qspi_priv->qspi_dev = qdev;
   231f8:	6020      	str	r0, [r4, #0]
	zep_qspi_priv->dev_added = true;
   231fa:	7123      	strb	r3, [r4, #4]
}
   231fc:	4620      	mov	r0, r4
   231fe:	bd10      	pop	{r4, pc}

00023200 <zep_shim_time_get_curr_us>:
{
   23200:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   23202:	f001 f95d 	bl	244c0 <z_impl_k_uptime_ticks>
   23206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2320a:	fba0 0203 	umull	r0, r2, r0, r3
   2320e:	fb03 2201 	mla	r2, r3, r1, r2
   23212:	0bc0      	lsrs	r0, r0, #15
   23214:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   23218:	4358      	muls	r0, r3
   2321a:	bd08      	pop	{r3, pc}

0002321c <zep_shim_time_elapsed_us>:
{
   2321c:	b510      	push	{r4, lr}
   2321e:	4604      	mov	r4, r0
	curr_time_us = zep_shim_time_get_curr_us();
   23220:	f7ff ffee 	bl	23200 <zep_shim_time_get_curr_us>
}
   23224:	1b00      	subs	r0, r0, r4
   23226:	bd10      	pop	{r4, pc}

00023228 <k_usleep>:
	return z_impl_k_usleep(us);
   23228:	f7f3 b89a 	b.w	16360 <z_impl_k_usleep>

0002322c <k_msleep>:
{
   2322c:	b538      	push	{r3, r4, r5, lr}
   2322e:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   23230:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   23234:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   23238:	f240 30e7 	movw	r0, #999	; 0x3e7
   2323c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23240:	2300      	movs	r3, #0
   23242:	fbc4 0105 	smlal	r0, r1, r4, r5
   23246:	f7dd fbc5 	bl	9d4 <__aeabi_uldivmod>
}
   2324a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   2324e:	f7f3 b86d 	b.w	1632c <z_impl_k_sleep>

00023252 <zep_shim_work_kill>:
	work_kill(item);
   23252:	f000 b885 	b.w	23360 <work_kill>

00023256 <zep_shim_work_schedule>:
	work_schedule(item);
   23256:	f7ee b9bf 	b.w	115d8 <work_schedule>

0002325a <zep_shim_work_init>:
	work_init(item, callback, data);
   2325a:	f7ee b9b5 	b.w	115c8 <work_init>

0002325e <zep_shim_work_free>:
	return work_free(item);
   2325e:	f000 b882 	b.w	23366 <work_free>

00023262 <zep_shim_work_alloc>:
	return work_alloc(type);
   23262:	b2c0      	uxtb	r0, r0
   23264:	f7ee b980 	b.w	11568 <work_alloc>

00023268 <zep_shim_pr_dbg>:
{
   23268:	b500      	push	{lr}
   2326a:	b095      	sub	sp, #84	; 0x54
   2326c:	4602      	mov	r2, r0
   2326e:	460b      	mov	r3, r1
	vsnprintf(buf, sizeof(buf), fmt, args);
   23270:	4668      	mov	r0, sp
   23272:	2150      	movs	r1, #80	; 0x50
   23274:	f7f5 ff7c 	bl	19170 <vsnprintf>
}
   23278:	2000      	movs	r0, #0
   2327a:	b015      	add	sp, #84	; 0x54
   2327c:	f85d fb04 	ldr.w	pc, [sp], #4

00023280 <zep_shim_spinlock_irq_rel>:
	z_impl_k_sem_give(sem);
   23280:	f7f2 bb62 	b.w	15948 <z_impl_k_sem_give>

00023284 <zep_shim_mem_set>:
__ssp_bos_icheck3(memset, void *, int)
   23284:	f7f4 b8a8 	b.w	173d8 <memset>

00023288 <zep_shim_mem_cpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23288:	f7dd bc64 	b.w	b54 <memcpy>

0002328c <z_log_msg_static_create.constprop.0>:
   2328c:	2300      	movs	r3, #0
   2328e:	f7e1 bdf9 	b.w	4e84 <z_impl_z_log_msg_static_create>

00023292 <zep_shim_spinlock_alloc>:
{
   23292:	b510      	push	{r4, lr}
	lock = k_malloc(sizeof(*lock));
   23294:	2018      	movs	r0, #24
   23296:	f001 facc 	bl	24832 <k_malloc>
	if (!lock) {
   2329a:	4604      	mov	r4, r0
   2329c:	b908      	cbnz	r0, 232a2 <zep_shim_spinlock_alloc+0x10>
   2329e:	f7ee f859 	bl	11354 <zep_shim_spinlock_alloc.part.0>
}
   232a2:	4620      	mov	r0, r4
   232a4:	bd10      	pop	{r4, pc}

000232a6 <zep_shim_llist_node_alloc>:
{
   232a6:	b508      	push	{r3, lr}
	llist_node = k_calloc(sizeof(*llist_node), sizeof(char));
   232a8:	2101      	movs	r1, #1
   232aa:	200c      	movs	r0, #12
   232ac:	f001 fac5 	bl	2483a <k_calloc>
	if (!llist_node) {
   232b0:	b918      	cbnz	r0, 232ba <zep_shim_llist_node_alloc+0x14>
}
   232b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   232b6:	f7ee b86b 	b.w	11390 <zep_shim_llist_node_alloc.part.0>
	node->next = NULL;
   232ba:	2200      	movs	r2, #0
	node->prev = NULL;
   232bc:	e9c0 2200 	strd	r2, r2, [r0]
   232c0:	bd08      	pop	{r3, pc}

000232c2 <zep_shim_llist_alloc>:
{
   232c2:	b510      	push	{r4, lr}
	llist = k_calloc(sizeof(*llist), sizeof(char));
   232c4:	2101      	movs	r1, #1
   232c6:	200c      	movs	r0, #12
   232c8:	f001 fab7 	bl	2483a <k_calloc>
	if (!llist) {
   232cc:	4604      	mov	r4, r0
   232ce:	b908      	cbnz	r0, 232d4 <zep_shim_llist_alloc+0x12>
   232d0:	f7ee f87c 	bl	113cc <zep_shim_llist_alloc.part.0>
}
   232d4:	4620      	mov	r0, r4
   232d6:	bd10      	pop	{r4, pc}

000232d8 <zep_shim_bus_qspi_init>:
{
   232d8:	b510      	push	{r4, lr}
	qspi_priv = k_calloc(sizeof(*qspi_priv), sizeof(char));
   232da:	2101      	movs	r1, #1
   232dc:	2008      	movs	r0, #8
   232de:	f001 faac 	bl	2483a <k_calloc>
	if (!qspi_priv) {
   232e2:	4604      	mov	r4, r0
   232e4:	b908      	cbnz	r0, 232ea <zep_shim_bus_qspi_init+0x12>
   232e6:	f7ee f88f 	bl	11408 <zep_shim_bus_qspi_init.part.0>
}
   232ea:	4620      	mov	r0, r4
   232ec:	bd10      	pop	{r4, pc}

000232ee <irq_work_handler>:
{
   232ee:	b508      	push	{r3, lr}
	ret = intr_priv->callbk_fn(intr_priv->callbk_data);
   232f0:	e950 0303 	ldrd	r0, r3, [r0, #-12]
   232f4:	4798      	blx	r3
	if (ret) {
   232f6:	b118      	cbz	r0, 23300 <irq_work_handler+0x12>
}
   232f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   232fc:	f7ee b8a2 	b.w	11444 <irq_work_handler.part.0>
   23300:	bd08      	pop	{r3, pc}

00023302 <zep_shim_bus_qspi_dev_host_map_get>:
	if (!os_qspi_dev_ctx || !host_map) {
   23302:	b100      	cbz	r0, 23306 <zep_shim_bus_qspi_dev_host_map_get+0x4>
   23304:	b909      	cbnz	r1, 2330a <zep_shim_bus_qspi_dev_host_map_get+0x8>
   23306:	f7ee b8bb 	b.w	11480 <zep_shim_bus_qspi_dev_host_map_get.part.0>
	host_map->addr = 0;
   2330a:	2300      	movs	r3, #0
   2330c:	600b      	str	r3, [r1, #0]
}
   2330e:	4770      	bx	lr

00023310 <zep_shim_timer_alloc>:
{
   23310:	b510      	push	{r4, lr}
	timer = k_malloc(sizeof(*timer));
   23312:	2038      	movs	r0, #56	; 0x38
   23314:	f001 fa8d 	bl	24832 <k_malloc>
	if (!timer)
   23318:	4604      	mov	r4, r0
   2331a:	b908      	cbnz	r0, 23320 <zep_shim_timer_alloc+0x10>
   2331c:	f7ee f8ce 	bl	114bc <zep_shim_timer_alloc.part.0>
}
   23320:	4620      	mov	r0, r4
   23322:	bd10      	pop	{r4, pc}

00023324 <zep_shim_spinlock_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   23324:	2201      	movs	r2, #1
   23326:	4611      	mov	r1, r2
   23328:	f000 be6b 	b.w	24002 <z_impl_k_sem_init>

0002332c <zep_shim_spinlock_take>:
	return z_impl_k_sem_take(sem, timeout);
   2332c:	f04f 32ff 	mov.w	r2, #4294967295
   23330:	f04f 33ff 	mov.w	r3, #4294967295
   23334:	f7f2 bb2e 	b.w	15994 <z_impl_k_sem_take>

00023338 <zep_shim_bus_qspi_intr_unreg>:
static void zep_shim_bus_qspi_intr_unreg(void *os_qspi_dev_ctx)
   23338:	4770      	bx	lr

0002333a <zep_shim_timer_free>:
static void zep_shim_timer_free(void *timer)
   2333a:	f001 ba73 	b.w	24824 <k_free>

0002333e <zep_shim_llist_node_free>:
static void zep_shim_llist_node_free(void *llist_node)
   2333e:	f001 ba71 	b.w	24824 <k_free>

00023342 <zep_shim_llist_free>:
static void zep_shim_llist_free(void *llist)
   23342:	f001 ba6f 	b.w	24824 <k_free>

00023346 <zep_shim_bus_qspi_deinit>:
static void zep_shim_bus_qspi_deinit(void *os_qspi_priv)
   23346:	f001 ba6d 	b.w	24824 <k_free>

0002334a <zep_shim_spinlock_rel>:
	z_impl_k_sem_give(sem);
   2334a:	f7f2 bafd 	b.w	15948 <z_impl_k_sem_give>

0002334e <zep_shim_spinlock_irq_take>:
	return z_impl_k_sem_take(sem, timeout);
   2334e:	f04f 32ff 	mov.w	r2, #4294967295
   23352:	f04f 33ff 	mov.w	r3, #4294967295
   23356:	f7f2 bb1d 	b.w	15994 <z_impl_k_sem_take>

0002335a <workqueue_callback>:
	item->callback(item->data);
   2335a:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
   2335e:	4718      	bx	r3

00023360 <work_kill>:

void work_kill(struct zep_work_item *item)
{
	/* TODO: Based on context, use _sync version */
	k_work_cancel(&item->work);
   23360:	3004      	adds	r0, #4
   23362:	f000 bf0f 	b.w	24184 <k_work_cancel>

00023366 <work_free>:
}

void work_free(struct zep_work_item *item)
{
	item->in_use = 0;
   23366:	2300      	movs	r3, #0
   23368:	7003      	strb	r3, [r0, #0]
}
   2336a:	4770      	bx	lr

0002336c <timer_expiry_function>:
	timer->function(timer->data);
   2336c:	e950 3002 	ldrd	r3, r0, [r0, #-8]
   23370:	4718      	bx	r3

00023372 <mod_timer>:
}

void mod_timer(struct timer_list *timer, int msec)
{
   23372:	b570      	push	{r4, r5, r6, lr}
   23374:	4605      	mov	r5, r0
	k_work_schedule(&timer->work, K_MSEC(msec));
   23376:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   2337a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2337e:	f240 30e7 	movw	r0, #999	; 0x3e7
   23382:	2100      	movs	r1, #0
   23384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23388:	2300      	movs	r3, #0
   2338a:	fbc4 0106 	smlal	r0, r1, r4, r6
   2338e:	f7dd fb21 	bl	9d4 <__aeabi_uldivmod>
   23392:	4602      	mov	r2, r0
   23394:	460b      	mov	r3, r1
   23396:	f105 0008 	add.w	r0, r5, #8
}
   2339a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_schedule(&timer->work, K_MSEC(msec));
   2339e:	f7f2 bc9b 	b.w	15cd8 <k_work_schedule>

000233a2 <del_timer_sync>:

void del_timer_sync(struct timer_list *timer)
{
	k_work_cancel_delayable(&timer->work);
   233a2:	3008      	adds	r0, #8
   233a4:	f000 bf12 	b.w	241cc <k_work_cancel_delayable>

000233a8 <wifi_nrf_event_proc_scan_start_zep>:
}
   233a8:	4770      	bx	lr

000233aa <z_log_msg_static_create.constprop.0>:
   233aa:	2300      	movs	r3, #0
   233ac:	f7e1 bd6a 	b.w	4e84 <z_impl_z_log_msg_static_create>

000233b0 <wifi_nrf_event_get_reg_zep>:
	if (!vif_ctx_zep) {
   233b0:	b908      	cbnz	r0, 233b6 <wifi_nrf_event_get_reg_zep+0x6>
   233b2:	f7ee b995 	b.w	116e0 <wifi_nrf_event_get_reg_zep.part.0>
	fmac_dev_ctx = rpu_ctx_zep->rpu_ctx;
   233b6:	68c3      	ldr	r3, [r0, #12]
   233b8:	f8b1 2330 	ldrh.w	r2, [r1, #816]	; 0x330
   233bc:	685b      	ldr	r3, [r3, #4]
   233be:	f8a3 219d 	strh.w	r2, [r3, #413]	; 0x19d
	fmac_dev_ctx->alpha2_valid = true;
   233c2:	2201      	movs	r2, #1
   233c4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
}
   233c8:	4770      	bx	lr

000233ca <wifi_nrf_event_proc_cookie_rsp>:
	if (!vif_ctx_zep) {
   233ca:	b908      	cbnz	r0, 233d0 <wifi_nrf_event_proc_cookie_rsp+0x6>
   233cc:	f7ee b9a6 	b.w	1171c <wifi_nrf_event_proc_cookie_rsp.part.0>
	vif_ctx_zep->cookie_resp_received = true;
   233d0:	2301      	movs	r3, #1
   233d2:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
}
   233d6:	4770      	bx	lr

000233d8 <gpio_pin_configure_dt>:
{
   233d8:	4603      	mov	r3, r0
   233da:	b470      	push	{r4, r5, r6}
   233dc:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   233de:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   233e0:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   233e2:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   233e4:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   233e6:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   233e8:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   233ea:	408c      	lsls	r4, r1
   233ec:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   233ee:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   233f2:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   233f4:	bf14      	ite	ne
   233f6:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   233f8:	43a3      	biceq	r3, r4
   233fa:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   233fc:	6833      	ldr	r3, [r6, #0]
}
   233fe:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   23400:	4718      	bx	r3

00023402 <gpio_pin_set_dt>:
{
   23402:	4603      	mov	r3, r0
   23404:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   23406:	7919      	ldrb	r1, [r3, #4]
   23408:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   2340a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2340c:	fa03 f101 	lsl.w	r1, r3, r1
   23410:	6903      	ldr	r3, [r0, #16]
   23412:	681b      	ldr	r3, [r3, #0]
   23414:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   23416:	bf18      	it	ne
   23418:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2341c:	b112      	cbz	r2, 23424 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   2341e:	6883      	ldr	r3, [r0, #8]
   23420:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   23422:	4718      	bx	r3
   23424:	6883      	ldr	r3, [r0, #8]
   23426:	691b      	ldr	r3, [r3, #16]
   23428:	e7fb      	b.n	23422 <gpio_pin_set_dt+0x20>

0002342a <rpu_wakeup>:
{
   2342a:	b508      	push	{r3, lr}
	rpu_wrsr2(1);
   2342c:	2001      	movs	r0, #1
   2342e:	f7ee fc11 	bl	11c54 <rpu_wrsr2>
	rpu_rdsr2();
   23432:	f7ee fc19 	bl	11c68 <rpu_rdsr2>
	rpu_rdsr1();
   23436:	f7ee fc1d 	bl	11c74 <rpu_rdsr1>
}
   2343a:	2000      	movs	r0, #0
   2343c:	bd08      	pop	{r3, pc}

0002343e <rpu_sleep_status>:
	return rpu_rdsr1();
   2343e:	f7ee bc19 	b.w	11c74 <rpu_rdsr1>

00023442 <rpu_enable>:

int rpu_enable(void)
{
   23442:	b508      	push	{r3, lr}
	rpu_gpio_config();
   23444:	f7ee fb7c 	bl	11b40 <rpu_gpio_config>
	ble_gpio_config();
   23448:	f7ee fb66 	bl	11b18 <ble_gpio_config>
	rpu_pwron();
   2344c:	f7ee fbb8 	bl	11bc0 <rpu_pwron>
	rpu_qspi_init();
   23450:	f7ee fbe8 	bl	11c24 <rpu_qspi_init>
	rpu_wakeup();
   23454:	f7ff ffe9 	bl	2342a <rpu_wakeup>
	rpu_clks_on();
   23458:	f7ee fc12 	bl	11c80 <rpu_clks_on>

	return 0;
}
   2345c:	2000      	movs	r0, #0
   2345e:	bd08      	pop	{r3, pc}

00023460 <wifi_nrf_fmac_map_desc_to_pool>:
	for (pool_id = 0; pool_id < MAX_NUM_OF_RX_QUEUES; pool_id++) {
   23460:	2300      	movs	r3, #0
{
   23462:	b570      	push	{r4, r5, r6, lr}
   23464:	6804      	ldr	r4, [r0, #0]
   23466:	3420      	adds	r4, #32
		if ((desc_id >= fmac_dev_ctx->fpriv->rx_desc[pool_id]) &&
   23468:	f854 6f04 	ldr.w	r6, [r4, #4]!
   2346c:	428e      	cmp	r6, r1
   2346e:	d80d      	bhi.n	2348c <wifi_nrf_fmac_map_desc_to_pool+0x2c>
				fmac_dev_ctx->fpriv->rx_buf_pools[pool_id].num_bufs))) {
   23470:	f834 5c0c 	ldrh.w	r5, [r4, #-12]
		    (desc_id < (fmac_dev_ctx->fpriv->rx_desc[pool_id] +
   23474:	4435      	add	r5, r6
		if ((desc_id >= fmac_dev_ctx->fpriv->rx_desc[pool_id]) &&
   23476:	428d      	cmp	r5, r1
   23478:	d908      	bls.n	2348c <wifi_nrf_fmac_map_desc_to_pool+0x2c>
			pool_info->pool_id = pool_id;
   2347a:	6013      	str	r3, [r2, #0]
			pool_info->buf_id = (desc_id - fmac_dev_ctx->fpriv->rx_desc[pool_id]);
   2347c:	6800      	ldr	r0, [r0, #0]
   2347e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			status = WIFI_NRF_STATUS_SUCCESS;
   23482:	2000      	movs	r0, #0
			pool_info->buf_id = (desc_id - fmac_dev_ctx->fpriv->rx_desc[pool_id]);
   23484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23486:	1ac9      	subs	r1, r1, r3
   23488:	6051      	str	r1, [r2, #4]
}
   2348a:	bd70      	pop	{r4, r5, r6, pc}
	for (pool_id = 0; pool_id < MAX_NUM_OF_RX_QUEUES; pool_id++) {
   2348c:	3301      	adds	r3, #1
   2348e:	2b03      	cmp	r3, #3
   23490:	d1ea      	bne.n	23468 <wifi_nrf_fmac_map_desc_to_pool+0x8>
	enum wifi_nrf_status status = WIFI_NRF_STATUS_FAIL;
   23492:	f04f 30ff 	mov.w	r0, #4294967295
   23496:	e7f8      	b.n	2348a <wifi_nrf_fmac_map_desc_to_pool+0x2a>

00023498 <wifi_nrf_util_rx_get_eth_type>:
{
	unsigned char *payload = NULL;

	payload = (unsigned char *)nwb;

	return payload[6] << 8 | payload[7];
   23498:	88c8      	ldrh	r0, [r1, #6]
   2349a:	ba40      	rev16	r0, r0
}
   2349c:	b280      	uxth	r0, r0
   2349e:	4770      	bx	lr

000234a0 <wifi_nrf_util_get_skip_header_bytes>:

	skip_header_bytes = sizeof(eth_type);

	if (eth_type == WIFI_NRF_FMAC_ETH_P_AARP ||
	    eth_type == WIFI_NRF_FMAC_ETH_P_IPX) {
		skip_header_bytes += sizeof(aarp_ipx_header);
   234a0:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
	} else if (eth_type >= WIFI_NRF_FMAC_ETH_P_802_3_MIN) {
		skip_header_bytes += sizeof(llc_header);
	}

	return skip_header_bytes;
}
   234a4:	bf34      	ite	cc
   234a6:	2002      	movcc	r0, #2
   234a8:	2008      	movcs	r0, #8
   234aa:	4770      	bx	lr

000234ac <wifi_nrf_util_convert_to_eth>:

void wifi_nrf_util_convert_to_eth(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
				  void *nwb,
				  struct wifi_nrf_fmac_ieee80211_hdr *hdr,
				  unsigned short eth_type)
{
   234ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   234b0:	4698      	mov	r8, r3

	struct wifi_nrf_fmac_eth_hdr *ehdr = NULL;
	unsigned int len = 0;

	len = wifi_nrf_osal_nbuf_data_size(fmac_dev_ctx->fpriv->opriv,
   234b2:	6803      	ldr	r3, [r0, #0]
{
   234b4:	4605      	mov	r5, r0
	len = wifi_nrf_osal_nbuf_data_size(fmac_dev_ctx->fpriv->opriv,
   234b6:	6818      	ldr	r0, [r3, #0]
{
   234b8:	460e      	mov	r6, r1
   234ba:	4614      	mov	r4, r2
	len = wifi_nrf_osal_nbuf_data_size(fmac_dev_ctx->fpriv->opriv,
   234bc:	f7ff fb8e 	bl	22bdc <wifi_nrf_osal_nbuf_data_size>
					   nwb);

	ehdr = (struct wifi_nrf_fmac_eth_hdr *)
		wifi_nrf_osal_nbuf_data_push(fmac_dev_ctx->fpriv->opriv,
   234c0:	682b      	ldr	r3, [r5, #0]
   234c2:	4631      	mov	r1, r6
   234c4:	220e      	movs	r2, #14
	len = wifi_nrf_osal_nbuf_data_size(fmac_dev_ctx->fpriv->opriv,
   234c6:	4607      	mov	r7, r0
		wifi_nrf_osal_nbuf_data_push(fmac_dev_ctx->fpriv->opriv,
   234c8:	6818      	ldr	r0, [r3, #0]
   234ca:	f7ff fb98 	bl	22bfe <wifi_nrf_osal_nbuf_data_push>
   234ce:	4606      	mov	r6, r0
					     nwb,
					     sizeof(struct wifi_nrf_fmac_eth_hdr));

	switch (hdr->fc & (WIFI_NRF_FCTL_TODS | WIFI_NRF_FCTL_FROMDS)) {
   234d0:	8822      	ldrh	r2, [r4, #0]
   234d2:	6828      	ldr	r0, [r5, #0]
   234d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
   234d8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   234dc:	f106 0106 	add.w	r1, r6, #6
   234e0:	d027      	beq.n	23532 <wifi_nrf_util_convert_to_eth+0x86>
   234e2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
   234e6:	d01a      	beq.n	2351e <wifi_nrf_util_convert_to_eth+0x72>
   234e8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   234ec:	f104 020a 	add.w	r2, r4, #10
   234f0:	d123      	bne.n	2353a <wifi_nrf_util_convert_to_eth+0x8e>
				      ehdr->dst,
				      hdr->addr_1,
				      WIFI_NRF_FMAC_ETH_ADDR_LEN);
		break;
	case (WIFI_NRF_FCTL_TODS):
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   234f2:	2306      	movs	r3, #6
   234f4:	6800      	ldr	r0, [r0, #0]
   234f6:	f7ff fad8 	bl	22aaa <wifi_nrf_osal_mem_cpy>
				      ehdr->src,
				      hdr->addr_2,
				      WIFI_NRF_FMAC_ETH_ADDR_LEN);
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   234fa:	2306      	movs	r3, #6
   234fc:	6828      	ldr	r0, [r5, #0]
   234fe:	f104 0210 	add.w	r2, r4, #16
		/* Both FROM and TO DS bit is zero*/
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
				      ehdr->src,
				      hdr->addr_2,
				      WIFI_NRF_FMAC_ETH_ADDR_LEN);
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   23502:	4631      	mov	r1, r6
   23504:	6800      	ldr	r0, [r0, #0]
   23506:	f7ff fad0 	bl	22aaa <wifi_nrf_osal_mem_cpy>
				      hdr->addr_1,
				      WIFI_NRF_FMAC_ETH_ADDR_LEN);

	}

	if (eth_type >= WIFI_NRF_FMAC_ETH_P_802_3_MIN) {
   2350a:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
   2350e:	d316      	bcc.n	2353e <wifi_nrf_util_convert_to_eth+0x92>
		ehdr->proto = ((eth_type >> 8) | (eth_type << 8));
   23510:	fa98 f898 	rev16.w	r8, r8
   23514:	fa1f f088 	uxth.w	r0, r8
   23518:	81b0      	strh	r0, [r6, #12]
	} else {
		ehdr->proto = len;
	}
}
   2351a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   2351e:	2306      	movs	r3, #6
   23520:	f104 0218 	add.w	r2, r4, #24
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   23524:	6800      	ldr	r0, [r0, #0]
   23526:	f7ff fac0 	bl	22aaa <wifi_nrf_osal_mem_cpy>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   2352a:	2306      	movs	r3, #6
   2352c:	6828      	ldr	r0, [r5, #0]
   2352e:	1d22      	adds	r2, r4, #4
   23530:	e7e7      	b.n	23502 <wifi_nrf_util_convert_to_eth+0x56>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   23532:	2306      	movs	r3, #6
   23534:	f104 0210 	add.w	r2, r4, #16
   23538:	e7f4      	b.n	23524 <wifi_nrf_util_convert_to_eth+0x78>
		wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   2353a:	2306      	movs	r3, #6
   2353c:	e7f2      	b.n	23524 <wifi_nrf_util_convert_to_eth+0x78>
		ehdr->proto = len;
   2353e:	b2b8      	uxth	r0, r7
   23540:	e7ea      	b.n	23518 <wifi_nrf_util_convert_to_eth+0x6c>

00023542 <wifi_nrf_util_rx_convert_amsdu_to_eth>:


void wifi_nrf_util_rx_convert_amsdu_to_eth(struct wifi_nrf_fmac_dev_ctx *fmac_dev_ctx,
					   void *nwb)
{
   23542:	b5f0      	push	{r4, r5, r6, r7, lr}
	void *nwb_data = NULL;
	unsigned char amsdu_hdr_len = 0;

	amsdu_hdr_len = sizeof(struct wifi_nrf_fmac_amsdu_hdr);

	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   23544:	6803      	ldr	r3, [r0, #0]
{
   23546:	b085      	sub	sp, #20
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   23548:	681c      	ldr	r4, [r3, #0]
{
   2354a:	4605      	mov	r5, r0
			      &amsdu_hdr,
			      wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   2354c:	4620      	mov	r0, r4
{
   2354e:	460f      	mov	r7, r1
			      wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   23550:	f7ff fb49 	bl	22be6 <wifi_nrf_osal_nbuf_data_get>
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   23554:	4669      	mov	r1, sp
			      wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   23556:	4602      	mov	r2, r0
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   23558:	230e      	movs	r3, #14
   2355a:	4620      	mov	r0, r4
   2355c:	f7ff faa5 	bl	22aaa <wifi_nrf_osal_mem_cpy>
							  nwb),
			      amsdu_hdr_len);

	nwb_data = (unsigned char *)wifi_nrf_osal_nbuf_data_get(fmac_dev_ctx->fpriv->opriv,
   23560:	682b      	ldr	r3, [r5, #0]
   23562:	4639      	mov	r1, r7
   23564:	6818      	ldr	r0, [r3, #0]
   23566:	f7ff fb3e 	bl	22be6 <wifi_nrf_osal_nbuf_data_get>
								nwb) + amsdu_hdr_len;

	eth_type = wifi_nrf_util_rx_get_eth_type(fmac_dev_ctx,
   2356a:	8a86      	ldrh	r6, [r0, #20]
						 nwb_data);

	wifi_nrf_osal_nbuf_data_pull(fmac_dev_ctx->fpriv->opriv,
   2356c:	682b      	ldr	r3, [r5, #0]
   2356e:	ba76      	rev16	r6, r6
   23570:	b2b6      	uxth	r6, r6
				     nwb,
				     (amsdu_hdr_len +
				      wifi_nrf_util_get_skip_header_bytes(eth_type)));
   23572:	4630      	mov	r0, r6
   23574:	f7ff ff94 	bl	234a0 <wifi_nrf_util_get_skip_header_bytes>
	wifi_nrf_osal_nbuf_data_pull(fmac_dev_ctx->fpriv->opriv,
   23578:	681b      	ldr	r3, [r3, #0]
   2357a:	f100 020e 	add.w	r2, r0, #14
   2357e:	4639      	mov	r1, r7
   23580:	4618      	mov	r0, r3
   23582:	f7ff fb43 	bl	22c0c <wifi_nrf_osal_nbuf_data_pull>

	len = wifi_nrf_osal_nbuf_data_size(fmac_dev_ctx->fpriv->opriv,
   23586:	682b      	ldr	r3, [r5, #0]
   23588:	4639      	mov	r1, r7
   2358a:	6818      	ldr	r0, [r3, #0]
   2358c:	f7ff fb26 	bl	22bdc <wifi_nrf_osal_nbuf_data_size>
					   nwb);

	ehdr = (struct wifi_nrf_fmac_eth_hdr *)
		wifi_nrf_osal_nbuf_data_push(fmac_dev_ctx->fpriv->opriv,
   23590:	682b      	ldr	r3, [r5, #0]
	len = wifi_nrf_osal_nbuf_data_size(fmac_dev_ctx->fpriv->opriv,
   23592:	4604      	mov	r4, r0
		wifi_nrf_osal_nbuf_data_push(fmac_dev_ctx->fpriv->opriv,
   23594:	4639      	mov	r1, r7
   23596:	220e      	movs	r2, #14
   23598:	6818      	ldr	r0, [r3, #0]
   2359a:	f7ff fb30 	bl	22bfe <wifi_nrf_osal_nbuf_data_push>
					     nwb,
					     sizeof(struct wifi_nrf_fmac_eth_hdr));

	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   2359e:	2306      	movs	r3, #6
		wifi_nrf_osal_nbuf_data_push(fmac_dev_ctx->fpriv->opriv,
   235a0:	4607      	mov	r7, r0
	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   235a2:	6828      	ldr	r0, [r5, #0]
   235a4:	eb0d 0203 	add.w	r2, sp, r3
   235a8:	18f9      	adds	r1, r7, r3
   235aa:	6800      	ldr	r0, [r0, #0]
   235ac:	f7ff fa7d 	bl	22aaa <wifi_nrf_osal_mem_cpy>
			      ehdr->src,
			      amsdu_hdr.src,
			      WIFI_NRF_FMAC_ETH_ADDR_LEN);

	wifi_nrf_osal_mem_cpy(fmac_dev_ctx->fpriv->opriv,
   235b0:	6828      	ldr	r0, [r5, #0]
   235b2:	2306      	movs	r3, #6
   235b4:	466a      	mov	r2, sp
   235b6:	4639      	mov	r1, r7
   235b8:	6800      	ldr	r0, [r0, #0]
   235ba:	f7ff fa76 	bl	22aaa <wifi_nrf_osal_mem_cpy>
			      ehdr->dst,
			      amsdu_hdr.dst,
			      WIFI_NRF_FMAC_ETH_ADDR_LEN);

	if (eth_type >= WIFI_NRF_FMAC_ETH_P_802_3_MIN) {
   235be:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
		ehdr->proto = ((eth_type >> 8) | (eth_type << 8));
   235c2:	bf23      	ittte	cs
   235c4:	0233      	lslcs	r3, r6, #8
   235c6:	ea43 2316 	orrcs.w	r3, r3, r6, lsr #8
   235ca:	b29b      	uxthcs	r3, r3
	} else {
		ehdr->proto = len;
   235cc:	b2a3      	uxthcc	r3, r4
   235ce:	81bb      	strh	r3, [r7, #12]
	}
}
   235d0:	b005      	add	sp, #20
   235d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000235d4 <z_log_msg_static_create.constprop.0>:
   235d4:	2300      	movs	r3, #0
   235d6:	f7e1 bc55 	b.w	4e84 <z_impl_z_log_msg_static_create>

000235da <wifi_nrf_event_proc_get_power_save_info>:
{
   235da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235de:	460c      	mov	r4, r1
	if (!vif_ctx || !ps_info) {
   235e0:	4605      	mov	r5, r0
   235e2:	b358      	cbz	r0, 2363c <wifi_nrf_event_proc_get_power_save_info+0x62>
   235e4:	b351      	cbz	r1, 2363c <wifi_nrf_event_proc_get_power_save_info+0x62>
	for (int i = 0; i < ps_info->num_twt_flows; i++) {
   235e6:	f04f 0800 	mov.w	r8, #0
		struct wifi_twt_flow_info *twt_zep = &vif_ctx_zep->ps_info->twt_flows[i];
   235ea:	f04f 0918 	mov.w	r9, #24
		twt_interval_float.mantissa = twt_rpu->twt_target_wake_interval_mantissa;
   235ee:	f04f 0a1a 	mov.w	sl, #26
	vif_ctx_zep->ps_info->ps_params.mode = ps_info->ps_mode;
   235f2:	6f83      	ldr	r3, [r0, #120]	; 0x78
   235f4:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   235f8:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   235fc:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	vif_ctx_zep->ps_info->ps_params.enabled = ps_info->enabled;
   23600:	6f83      	ldr	r3, [r0, #120]	; 0x78
   23602:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
   23606:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	vif_ctx_zep->ps_info->num_twt_flows = ps_info->num_twt_flows;
   2360a:	6f83      	ldr	r3, [r0, #120]	; 0x78
   2360c:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
   23610:	701a      	strb	r2, [r3, #0]
	vif_ctx_zep->ps_info->ps_params.timeout_ms = ps_info->ps_timeout;
   23612:	6f83      	ldr	r3, [r0, #120]	; 0x78
   23614:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   23616:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	vif_ctx_zep->ps_info->ps_params.listen_interval = ps_info->listen_interval;
   2361a:	6f83      	ldr	r3, [r0, #120]	; 0x78
   2361c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
   2361e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	vif_ctx_zep->ps_info->ps_params.wakeup_mode = ps_info->extended_ps;
   23622:	6f83      	ldr	r3, [r0, #120]	; 0x78
   23624:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   23628:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	for (int i = 0; i < ps_info->num_twt_flows; i++) {
   2362c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   23630:	371a      	adds	r7, #26
   23632:	4543      	cmp	r3, r8
   23634:	dc05      	bgt.n	23642 <wifi_nrf_event_proc_get_power_save_info+0x68>
	vif_ctx_zep->ps_config_info_evnt = true;
   23636:	2301      	movs	r3, #1
   23638:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
}
   2363c:	b003      	add	sp, #12
   2363e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct wifi_twt_flow_info *twt_zep = &vif_ctx_zep->ps_info->twt_flows[i];
   23642:	fb09 f608 	mul.w	r6, r9, r8
   23646:	f8d5 b078 	ldr.w	fp, [r5, #120]	; 0x78
   2364a:	f106 0008 	add.w	r0, r6, #8
__ssp_bos_icheck3(memset, void *, int)
   2364e:	2218      	movs	r2, #24
   23650:	2100      	movs	r1, #0
   23652:	4458      	add	r0, fp
   23654:	f7f3 fec0 	bl	173d8 <memset>
		twt_zep->flow_id = twt_rpu->twt_flow_id;
   23658:	f817 3c1a 	ldrb.w	r3, [r7, #-26]
   2365c:	445e      	add	r6, fp
   2365e:	7473      	strb	r3, [r6, #17]
		twt_zep->implicit = twt_rpu->is_implicit ? 1 : 0;
   23660:	f817 3c13 	ldrb.w	r3, [r7, #-19]
   23664:	3b00      	subs	r3, #0
   23666:	bf18      	it	ne
   23668:	2301      	movne	r3, #1
   2366a:	7573      	strb	r3, [r6, #21]
		twt_zep->trigger = twt_rpu->ap_trigger_frame ? 1 : 0;
   2366c:	f817 3c14 	ldrb.w	r3, [r7, #-20]
   23670:	3b00      	subs	r3, #0
   23672:	bf18      	it	ne
   23674:	2301      	movne	r3, #1
   23676:	7533      	strb	r3, [r6, #20]
		twt_zep->announce = twt_rpu->twt_flow_type == NRF_WIFI_TWT_FLOW_TYPE_ANNOUNCED;
   23678:	f817 3c12 	ldrb.w	r3, [r7, #-18]
   2367c:	fab3 f383 	clz	r3, r3
   23680:	095b      	lsrs	r3, r3, #5
   23682:	75b3      	strb	r3, [r6, #22]
		twt_zep->negotiation_type = twt_rpu_to_wifi_mgmt_neg_type(twt_rpu->neg_type);
   23684:	f817 0c19 	ldrb.w	r0, [r7, #-25]
   23688:	f7ee fcc8 	bl	1201c <twt_rpu_to_wifi_mgmt_neg_type>
   2368c:	74b0      	strb	r0, [r6, #18]
		twt_zep->dialog_token = twt_rpu->dialog_token;
   2368e:	f817 3c02 	ldrb.w	r3, [r7, #-2]
   23692:	7433      	strb	r3, [r6, #16]
		twt_interval_float.mantissa = twt_rpu->twt_target_wake_interval_mantissa;
   23694:	fb0a 4308 	mla	r3, sl, r8, r4
		twt_zep->twt_interval = wifi_nrf_twt_float_to_us(twt_interval_float);
   23698:	f817 1c11 	ldrb.w	r1, [r7, #-17]
   2369c:	f8b3 0039 	ldrh.w	r0, [r3, #57]	; 0x39
   236a0:	9301      	str	r3, [sp, #4]
   236a2:	f7ee fce1 	bl	12068 <wifi_nrf_twt_float_to_us.isra.0>
   236a6:	e9c6 0102 	strd	r0, r1, [r6, #8]
		twt_zep->twt_wake_interval = twt_rpu->nominal_min_twt_wake_duration;
   236aa:	9b01      	ldr	r3, [sp, #4]
   236ac:	f8d3 2043 	ldr.w	r2, [r3, #67]	; 0x43
   236b0:	fb08 9309 	mla	r3, r8, r9, r9
	for (int i = 0; i < ps_info->num_twt_flows; i++) {
   236b4:	f108 0801 	add.w	r8, r8, #1
		twt_zep->twt_wake_interval = twt_rpu->nominal_min_twt_wake_duration;
   236b8:	f84b 2003 	str.w	r2, [fp, r3]
	for (int i = 0; i < ps_info->num_twt_flows; i++) {
   236bc:	e7b6      	b.n	2362c <wifi_nrf_event_proc_get_power_save_info+0x52>

000236be <wifi_nrf_event_proc_twt_teardown_zep>:
{
   236be:	b530      	push	{r4, r5, lr}
   236c0:	4604      	mov	r4, r0
   236c2:	b089      	sub	sp, #36	; 0x24
   236c4:	460d      	mov	r5, r1
	struct wifi_twt_params twt_params = {0};
   236c6:	2220      	movs	r2, #32
   236c8:	2100      	movs	r1, #0
   236ca:	4668      	mov	r0, sp
   236cc:	f7f3 fe84 	bl	173d8 <memset>
	if (!vif_ctx || !twt_teardown_info) {
   236d0:	b18c      	cbz	r4, 236f6 <wifi_nrf_event_proc_twt_teardown_zep+0x38>
   236d2:	b185      	cbz	r5, 236f6 <wifi_nrf_event_proc_twt_teardown_zep+0x38>
	twt_params.operation = WIFI_TWT_TEARDOWN;
   236d4:	2301      	movs	r3, #1
   236d6:	f88d 3000 	strb.w	r3, [sp]
	twt_params.flow_id = twt_teardown_info->info.twt_flow_id;
   236da:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	wifi_mgmt_raise_twt_event(vif_ctx_zep->zep_net_if_ctx, &twt_params);
   236de:	4669      	mov	r1, sp
	twt_params.flow_id = twt_teardown_info->info.twt_flow_id;
   236e0:	f88d 3005 	strb.w	r3, [sp, #5]
	vif_ctx_zep->neg_twt_flow_id = 0XFF;
   236e4:	23ff      	movs	r3, #255	; 0xff
   236e6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
	vif_ctx_zep->twt_in_progress = false;
   236ea:	2300      	movs	r3, #0
	wifi_mgmt_raise_twt_event(vif_ctx_zep->zep_net_if_ctx, &twt_params);
   236ec:	6860      	ldr	r0, [r4, #4]
	vif_ctx_zep->twt_in_progress = false;
   236ee:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	wifi_mgmt_raise_twt_event(vif_ctx_zep->zep_net_if_ctx, &twt_params);
   236f2:	f7e4 faad 	bl	7c50 <wifi_mgmt_raise_twt_event>
}
   236f6:	b009      	add	sp, #36	; 0x24
   236f8:	bd30      	pop	{r4, r5, pc}

000236fa <z_log_msg_static_create.constprop.0>:
   236fa:	2300      	movs	r3, #0
   236fc:	f7e1 bbc2 	b.w	4e84 <z_impl_z_log_msg_static_create>

00023700 <wifi_nrf_if_caps_get>:
}
   23700:	2070      	movs	r0, #112	; 0x70
   23702:	4770      	bx	lr

00023704 <wifi_nrf_if_send>:
}
   23704:	f04f 30ff 	mov.w	r0, #4294967295
   23708:	4770      	bx	lr

0002370a <k_sem_give>:
	z_impl_k_sem_give(sem);
   2370a:	f7f2 b91d 	b.w	15948 <z_impl_k_sem_give>

0002370e <z_log_msg_static_create.constprop.0>:
   2370e:	2300      	movs	r3, #0
   23710:	f7e1 bbb8 	b.w	4e84 <z_impl_z_log_msg_static_create>

00023714 <k_sem_take.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   23714:	f7f2 b93e 	b.w	15994 <z_impl_k_sem_take>

00023718 <qspi_lock.isra.0>:
	k_sem_take(&dev_data->sem, K_FOREVER);
   23718:	f04f 32ff 	mov.w	r2, #4294967295
   2371c:	f04f 33ff 	mov.w	r3, #4294967295
   23720:	3018      	adds	r0, #24
   23722:	f7ff bff7 	b.w	23714 <k_sem_take.isra.0>

00023726 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   23726:	4601      	mov	r1, r0
   23728:	f240 30e7 	movw	r0, #999	; 0x3e7
   2372c:	b508      	push	{r3, lr}
   2372e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23732:	2300      	movs	r3, #0
   23734:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   23738:	1449      	asrs	r1, r1, #17
   2373a:	f7dd f94b 	bl	9d4 <__aeabi_uldivmod>
}
   2373e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   23742:	f7f2 bdf3 	b.w	1632c <z_impl_k_sleep>

00023746 <qspi_RDSR2>:
{
   23746:	b570      	push	{r4, r5, r6, lr}
   23748:	b086      	sub	sp, #24
	const struct qspi_buf sr_buf = {
   2374a:	f10d 0303 	add.w	r3, sp, #3
	uint8_t sr = 0;
   2374e:	2400      	movs	r4, #0
	const struct qspi_buf sr_buf = {
   23750:	9301      	str	r3, [sp, #4]
   23752:	2301      	movs	r3, #1
	struct qspi_cmd cmd = {
   23754:	e9cd 3402 	strd	r3, r4, [sp, #8]
   23758:	232f      	movs	r3, #47	; 0x2f
{
   2375a:	4605      	mov	r5, r0
	struct qspi_cmd cmd = {
   2375c:	f88d 300c 	strb.w	r3, [sp, #12]
   23760:	ab01      	add	r3, sp, #4
{
   23762:	460e      	mov	r6, r1
	uint8_t sr = 0;
   23764:	f88d 4003 	strb.w	r4, [sp, #3]
	struct qspi_cmd cmd = {
   23768:	9404      	str	r4, [sp, #16]
   2376a:	9305      	str	r3, [sp, #20]
	ret = qspi_device_init(dev);
   2376c:	f7ef fc02 	bl	12f74 <qspi_device_init>
	ret = qspi_send_cmd(dev, &cmd, false);
   23770:	4622      	mov	r2, r4
   23772:	4628      	mov	r0, r5
   23774:	a903      	add	r1, sp, #12
   23776:	f7ef fc31 	bl	12fdc <qspi_send_cmd>
   2377a:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   2377c:	4628      	mov	r0, r5
   2377e:	f7ef fc99 	bl	130b4 <qspi_device_uninit>
	if (ret == 0)
   23782:	b914      	cbnz	r4, 2378a <qspi_RDSR2+0x44>
		*rdsr2 = sr;
   23784:	f89d 3003 	ldrb.w	r3, [sp, #3]
   23788:	7033      	strb	r3, [r6, #0]
}
   2378a:	4620      	mov	r0, r4
   2378c:	b006      	add	sp, #24
   2378e:	bd70      	pop	{r4, r5, r6, pc}

00023790 <qspi_validate_rpu_wake_writecmd>:
{
   23790:	b513      	push	{r0, r1, r4, lr}
	uint8_t rdsr2 = 0;
   23792:	2400      	movs	r4, #0
		ret = qspi_RDSR2(dev, &rdsr2);
   23794:	f10d 0107 	add.w	r1, sp, #7
	uint8_t rdsr2 = 0;
   23798:	f88d 4007 	strb.w	r4, [sp, #7]
		ret = qspi_RDSR2(dev, &rdsr2);
   2379c:	f7ff ffd3 	bl	23746 <qspi_RDSR2>
		if (ret && (rdsr2 & RPU_WAKEUP_NOW)) {
   237a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   237a4:	b108      	cbz	r0, 237aa <qspi_validate_rpu_wake_writecmd+0x1a>
   237a6:	07da      	lsls	r2, r3, #31
   237a8:	d402      	bmi.n	237b0 <qspi_validate_rpu_wake_writecmd+0x20>
	return rdsr2;
   237aa:	4618      	mov	r0, r3
}
   237ac:	b002      	add	sp, #8
   237ae:	bd10      	pop	{r4, pc}
			return 0;
   237b0:	4620      	mov	r0, r4
   237b2:	e7fb      	b.n	237ac <qspi_validate_rpu_wake_writecmd+0x1c>

000237b4 <qspi_RDSR1>:
{
   237b4:	b570      	push	{r4, r5, r6, lr}
   237b6:	b086      	sub	sp, #24
	const struct qspi_buf sr_buf = {
   237b8:	f10d 0303 	add.w	r3, sp, #3
	uint8_t sr = 0;
   237bc:	2400      	movs	r4, #0
	const struct qspi_buf sr_buf = {
   237be:	9301      	str	r3, [sp, #4]
   237c0:	2301      	movs	r3, #1
	struct qspi_cmd cmd = {
   237c2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   237c6:	231f      	movs	r3, #31
{
   237c8:	4605      	mov	r5, r0
	struct qspi_cmd cmd = {
   237ca:	f88d 300c 	strb.w	r3, [sp, #12]
   237ce:	ab01      	add	r3, sp, #4
{
   237d0:	460e      	mov	r6, r1
	uint8_t sr = 0;
   237d2:	f88d 4003 	strb.w	r4, [sp, #3]
	struct qspi_cmd cmd = {
   237d6:	9404      	str	r4, [sp, #16]
   237d8:	9305      	str	r3, [sp, #20]
	ret = qspi_device_init(dev);
   237da:	f7ef fbcb 	bl	12f74 <qspi_device_init>
	ret = qspi_send_cmd(dev, &cmd, false);
   237de:	4622      	mov	r2, r4
   237e0:	4628      	mov	r0, r5
   237e2:	a903      	add	r1, sp, #12
   237e4:	f7ef fbfa 	bl	12fdc <qspi_send_cmd>
   237e8:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   237ea:	4628      	mov	r0, r5
   237ec:	f7ef fc62 	bl	130b4 <qspi_device_uninit>
	if (ret == 0)
   237f0:	b914      	cbnz	r4, 237f8 <qspi_RDSR1+0x44>
		*rdsr1 = sr;
   237f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   237f6:	7033      	strb	r3, [r6, #0]
}
   237f8:	4620      	mov	r0, r4
   237fa:	b006      	add	sp, #24
   237fc:	bd70      	pop	{r4, r5, r6, pc}

000237fe <qspi_hl_read>:
{
   237fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23800:	4614      	mov	r4, r2
	int count = 0;
   23802:	2500      	movs	r5, #0
{
   23804:	4606      	mov	r6, r0
   23806:	460f      	mov	r7, r1
	qspi_addr_check(addr, data, len);
   23808:	f7ef fe86 	bl	13518 <qspi_addr_check>
	while (count < (len / 4)) {
   2380c:	1e22      	subs	r2, r4, #0
   2380e:	bfb8      	it	lt
   23810:	3203      	addlt	r2, #3
   23812:	1094      	asrs	r4, r2, #2
   23814:	42ac      	cmp	r4, r5
   23816:	dc01      	bgt.n	2381c <qspi_hl_read+0x1e>
}
   23818:	2000      	movs	r0, #0
   2381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		qspi_hl_readw(addr + (4 * count), ((char *)data + (4 * count)));
   2381c:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   23820:	eb06 0085 	add.w	r0, r6, r5, lsl #2
   23824:	f7ef ff4a 	bl	136bc <qspi_hl_readw>
		count++;
   23828:	3501      	adds	r5, #1
   2382a:	e7f3      	b.n	23814 <qspi_hl_read+0x16>

0002382c <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
   2382c:	2000      	movs	r0, #0
   2382e:	4770      	bx	lr

00023830 <mbedtls_md5_init>:
   23830:	2258      	movs	r2, #88	; 0x58
   23832:	2100      	movs	r1, #0
   23834:	f7f3 bdd0 	b.w	173d8 <memset>

00023838 <mbedtls_md5_update>:
{
   23838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2383c:	4605      	mov	r5, r0
   2383e:	460e      	mov	r6, r1
    if( ilen == 0 )
   23840:	4614      	mov	r4, r2
   23842:	b37a      	cbz	r2, 238a4 <mbedtls_md5_update+0x6c>
    left = ctx->total[0] & 0x3F;
   23844:	6803      	ldr	r3, [r0, #0]
   23846:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
   2384a:	189b      	adds	r3, r3, r2
   2384c:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
   2384e:	bf22      	ittt	cs
   23850:	6843      	ldrcs	r3, [r0, #4]
   23852:	3301      	addcs	r3, #1
   23854:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
   23856:	b19f      	cbz	r7, 23880 <mbedtls_md5_update+0x48>
    fill = 64 - left;
   23858:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
   2385c:	454a      	cmp	r2, r9
   2385e:	d30f      	bcc.n	23880 <mbedtls_md5_update+0x48>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   23860:	f100 0818 	add.w	r8, r0, #24
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23864:	464a      	mov	r2, r9
   23866:	eb08 0007 	add.w	r0, r8, r7
   2386a:	f7dd f973 	bl	b54 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
   2386e:	4641      	mov	r1, r8
   23870:	4628      	mov	r0, r5
   23872:	f7ef ffbb 	bl	137ec <mbedtls_internal_md5_process>
   23876:	b9b0      	cbnz	r0, 238a6 <mbedtls_md5_update+0x6e>
        input += fill;
   23878:	443c      	add	r4, r7
        left = 0;
   2387a:	4607      	mov	r7, r0
        input += fill;
   2387c:	444e      	add	r6, r9
        ilen  -= fill;
   2387e:	3c40      	subs	r4, #64	; 0x40
        left = 0;
   23880:	4426      	add	r6, r4
   23882:	e004      	b.n	2388e <mbedtls_md5_update+0x56>
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
   23884:	4628      	mov	r0, r5
   23886:	f7ef ffb1 	bl	137ec <mbedtls_internal_md5_process>
   2388a:	b960      	cbnz	r0, 238a6 <mbedtls_md5_update+0x6e>
        ilen  -= 64;
   2388c:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   2388e:	2c3f      	cmp	r4, #63	; 0x3f
   23890:	eba6 0104 	sub.w	r1, r6, r4
   23894:	d8f6      	bhi.n	23884 <mbedtls_md5_update+0x4c>
    if( ilen > 0 )
   23896:	b12c      	cbz	r4, 238a4 <mbedtls_md5_update+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   23898:	f105 0018 	add.w	r0, r5, #24
   2389c:	4622      	mov	r2, r4
   2389e:	4438      	add	r0, r7
   238a0:	f7dd f958 	bl	b54 <memcpy>
        return( 0 );
   238a4:	2000      	movs	r0, #0
}
   238a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000238aa <mbedtls_md5_finish>:
{
   238aa:	b570      	push	{r4, r5, r6, lr}
   238ac:	460d      	mov	r5, r1
    ctx->buffer[used++] = 0x80;
   238ae:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
   238b0:	6803      	ldr	r3, [r0, #0]
        memset( ctx->buffer + used, 0, 56 - used );
   238b2:	f100 0618 	add.w	r6, r0, #24
    used = ctx->total[0] & 0x3F;
   238b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
   238ba:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
   238bc:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
   238be:	4403      	add	r3, r0
{
   238c0:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   238c2:	7619      	strb	r1, [r3, #24]
        memset( ctx->buffer + used, 0, 56 - used );
   238c4:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
   238c8:	d836      	bhi.n	23938 <mbedtls_md5_finish+0x8e>
__ssp_bos_icheck3(memset, void *, int)
   238ca:	2100      	movs	r1, #0
   238cc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
   238d0:	f7f3 fd82 	bl	173d8 <memset>
         | ( ctx->total[1] <<  3 );
   238d4:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
   238d8:	0f5a      	lsrs	r2, r3, #29
   238da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
   238de:	00db      	lsls	r3, r3, #3
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
   238e0:	4631      	mov	r1, r6
   238e2:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_LE( high, ctx->buffer, 60 );
   238e4:	e9c4 3214 	strd	r3, r2, [r4, #80]	; 0x50
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
   238e8:	f7ef ff80 	bl	137ec <mbedtls_internal_md5_process>
   238ec:	bb18      	cbnz	r0, 23936 <mbedtls_md5_finish+0x8c>
    MBEDTLS_PUT_UINT32_LE( ctx->state[0], output,  0 );
   238ee:	68a3      	ldr	r3, [r4, #8]
   238f0:	702b      	strb	r3, [r5, #0]
   238f2:	68a3      	ldr	r3, [r4, #8]
   238f4:	0a1b      	lsrs	r3, r3, #8
   238f6:	706b      	strb	r3, [r5, #1]
   238f8:	8963      	ldrh	r3, [r4, #10]
   238fa:	70ab      	strb	r3, [r5, #2]
   238fc:	7ae3      	ldrb	r3, [r4, #11]
   238fe:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_LE( ctx->state[1], output,  4 );
   23900:	68e3      	ldr	r3, [r4, #12]
   23902:	712b      	strb	r3, [r5, #4]
   23904:	68e3      	ldr	r3, [r4, #12]
   23906:	0a1b      	lsrs	r3, r3, #8
   23908:	716b      	strb	r3, [r5, #5]
   2390a:	89e3      	ldrh	r3, [r4, #14]
   2390c:	71ab      	strb	r3, [r5, #6]
   2390e:	7be3      	ldrb	r3, [r4, #15]
   23910:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_LE( ctx->state[2], output,  8 );
   23912:	6923      	ldr	r3, [r4, #16]
   23914:	722b      	strb	r3, [r5, #8]
   23916:	6923      	ldr	r3, [r4, #16]
   23918:	0a1b      	lsrs	r3, r3, #8
   2391a:	726b      	strb	r3, [r5, #9]
   2391c:	8a63      	ldrh	r3, [r4, #18]
   2391e:	72ab      	strb	r3, [r5, #10]
   23920:	7ce3      	ldrb	r3, [r4, #19]
   23922:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_LE( ctx->state[3], output, 12 );
   23924:	6963      	ldr	r3, [r4, #20]
   23926:	732b      	strb	r3, [r5, #12]
   23928:	6963      	ldr	r3, [r4, #20]
   2392a:	0a1b      	lsrs	r3, r3, #8
   2392c:	736b      	strb	r3, [r5, #13]
   2392e:	8ae3      	ldrh	r3, [r4, #22]
   23930:	73ab      	strb	r3, [r5, #14]
   23932:	7de3      	ldrb	r3, [r4, #23]
   23934:	73eb      	strb	r3, [r5, #15]
}
   23936:	bd70      	pop	{r4, r5, r6, pc}
   23938:	2100      	movs	r1, #0
   2393a:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   2393e:	f7f3 fd4b 	bl	173d8 <memset>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
   23942:	4631      	mov	r1, r6
   23944:	4620      	mov	r0, r4
   23946:	f7ef ff51 	bl	137ec <mbedtls_internal_md5_process>
   2394a:	2800      	cmp	r0, #0
   2394c:	d1f3      	bne.n	23936 <mbedtls_md5_finish+0x8c>
   2394e:	4601      	mov	r1, r0
   23950:	2238      	movs	r2, #56	; 0x38
   23952:	4630      	mov	r0, r6
   23954:	e7bc      	b.n	238d0 <mbedtls_md5_finish+0x26>

00023956 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   23956:	4700      	bx	r0

00023958 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   23958:	f000 bdb4 	b.w	244c4 <z_impl_k_busy_wait>

0002395c <clock_stop>:
{
   2395c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   2395e:	2803      	cmp	r0, #3
   23960:	f200 80a7 	bhi.w	23ab2 <clock_stop+0x156>
   23964:	e8df f000 	tbb	[pc, r0]
   23968:	35271902 	.word	0x35271902
   2396c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   23970:	2202      	movs	r2, #2
   23972:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23976:	2200      	movs	r2, #0
   23978:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2397c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23980:	2201      	movs	r2, #1
   23982:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   23984:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   23986:	2301      	movs	r3, #1
   23988:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   2398c:	2803      	cmp	r0, #3
   2398e:	f200 8090 	bhi.w	23ab2 <clock_stop+0x156>
   23992:	e8df f000 	tbb	[pc, r0]
   23996:	692c      	.short	0x692c
   23998:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
   2399a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   2399e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   239a0:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   239a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   239a6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   239aa:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   239ae:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239b2:	605a      	str	r2, [r3, #4]
   239b4:	e7e7      	b.n	23986 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
   239b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   239ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   239be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   239c2:	2200      	movs	r2, #0
   239c4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   239c8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239cc:	2201      	movs	r2, #1
   239ce:	625a      	str	r2, [r3, #36]	; 0x24
   239d0:	e7d8      	b.n	23984 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   239d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   239d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   239da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   239de:	2200      	movs	r2, #0
   239e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   239e4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239e8:	2201      	movs	r2, #1
   239ea:	61da      	str	r2, [r3, #28]
   239ec:	e7ca      	b.n	23984 <clock_stop+0x28>
    switch (domain)
   239ee:	f242 7510 	movw	r5, #10000	; 0x2710
   239f2:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
   239f6:	b36c      	cbz	r4, 23a54 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   239f8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   239fc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   23a00:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23a02:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   23a06:	03d9      	lsls	r1, r3, #15
   23a08:	d553      	bpl.n	23ab2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   23a0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23a0e:	2801      	cmp	r0, #1
   23a10:	d14f      	bne.n	23ab2 <clock_stop+0x156>
   23a12:	f7ff ffa1 	bl	23958 <nrfx_busy_wait>
   23a16:	3d01      	subs	r5, #1
   23a18:	d1ed      	bne.n	239f6 <clock_stop+0x9a>
   23a1a:	e04a      	b.n	23ab2 <clock_stop+0x156>
   23a1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23a20:	2801      	cmp	r0, #1
   23a22:	d146      	bne.n	23ab2 <clock_stop+0x156>
   23a24:	f7ff ff98 	bl	23958 <nrfx_busy_wait>
   23a28:	3d01      	subs	r5, #1
   23a2a:	d152      	bne.n	23ad2 <clock_stop+0x176>
   23a2c:	e041      	b.n	23ab2 <clock_stop+0x156>
   23a2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23a32:	2801      	cmp	r0, #1
   23a34:	d13d      	bne.n	23ab2 <clock_stop+0x156>
   23a36:	f7ff ff8f 	bl	23958 <nrfx_busy_wait>
   23a3a:	3d01      	subs	r5, #1
   23a3c:	d039      	beq.n	23ab2 <clock_stop+0x156>
            if (p_clk_src != NULL)
   23a3e:	b1c4      	cbz	r4, 23a72 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   23a40:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   23a44:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   23a48:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   23a4a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   23a4e:	03db      	lsls	r3, r3, #15
   23a50:	d52f      	bpl.n	23ab2 <clock_stop+0x156>
   23a52:	e7ec      	b.n	23a2e <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23a54:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   23a58:	03da      	lsls	r2, r3, #15
   23a5a:	d52a      	bpl.n	23ab2 <clock_stop+0x156>
   23a5c:	2001      	movs	r0, #1
   23a5e:	f7ff ff7b 	bl	23958 <nrfx_busy_wait>
   23a62:	3d01      	subs	r5, #1
   23a64:	d1f6      	bne.n	23a54 <clock_stop+0xf8>
   23a66:	e024      	b.n	23ab2 <clock_stop+0x156>
    switch (domain)
   23a68:	f242 7510 	movw	r5, #10000	; 0x2710
   23a6c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
   23a70:	e7e5      	b.n	23a3e <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   23a72:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   23a76:	03d8      	lsls	r0, r3, #15
   23a78:	d51b      	bpl.n	23ab2 <clock_stop+0x156>
   23a7a:	2001      	movs	r0, #1
   23a7c:	f7ff ff6c 	bl	23958 <nrfx_busy_wait>
   23a80:	3d01      	subs	r5, #1
   23a82:	d1f6      	bne.n	23a72 <clock_stop+0x116>
   23a84:	e015      	b.n	23ab2 <clock_stop+0x156>
    switch (domain)
   23a86:	f242 7510 	movw	r5, #10000	; 0x2710
   23a8a:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
   23a8e:	b194      	cbz	r4, 23ab6 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   23a90:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23a94:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   23a98:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   23a9a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23a9e:	03d9      	lsls	r1, r3, #15
   23aa0:	d507      	bpl.n	23ab2 <clock_stop+0x156>
   23aa2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23aa6:	2801      	cmp	r0, #1
   23aa8:	d103      	bne.n	23ab2 <clock_stop+0x156>
   23aaa:	f7ff ff55 	bl	23958 <nrfx_busy_wait>
   23aae:	3d01      	subs	r5, #1
   23ab0:	d1ed      	bne.n	23a8e <clock_stop+0x132>
}
   23ab2:	b002      	add	sp, #8
   23ab4:	bd70      	pop	{r4, r5, r6, pc}
   23ab6:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23aba:	03da      	lsls	r2, r3, #15
   23abc:	d5f9      	bpl.n	23ab2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   23abe:	2001      	movs	r0, #1
   23ac0:	f7ff ff4a 	bl	23958 <nrfx_busy_wait>
   23ac4:	3d01      	subs	r5, #1
   23ac6:	d1f6      	bne.n	23ab6 <clock_stop+0x15a>
   23ac8:	e7f3      	b.n	23ab2 <clock_stop+0x156>
    switch (domain)
   23aca:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   23ace:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
   23ad2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   23ad6:	03db      	lsls	r3, r3, #15
   23ad8:	d5eb      	bpl.n	23ab2 <clock_stop+0x156>
   23ada:	2c00      	cmp	r4, #0
   23adc:	d19e      	bne.n	23a1c <clock_stop+0xc0>
   23ade:	2001      	movs	r0, #1
   23ae0:	e7a0      	b.n	23a24 <clock_stop+0xc8>

00023ae2 <nrfx_clock_enable>:
{
   23ae2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   23ae4:	2005      	movs	r0, #5
   23ae6:	f7e2 fbc3 	bl	6270 <arch_irq_is_enabled>
   23aea:	b910      	cbnz	r0, 23af2 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23aec:	2005      	movs	r0, #5
   23aee:	f7e2 fb9d 	bl	622c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   23af2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   23af6:	2201      	movs	r2, #1
   23af8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   23afc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   23b00:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   23b04:	bd08      	pop	{r3, pc}

00023b06 <nrfx_clock_start>:
{
   23b06:	b508      	push	{r3, lr}
    switch (domain)
   23b08:	2803      	cmp	r0, #3
   23b0a:	d819      	bhi.n	23b40 <nrfx_clock_start+0x3a>
   23b0c:	e8df f000 	tbb	[pc, r0]
   23b10:	4c3e3202 	.word	0x4c3e3202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23b14:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   23b18:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23b1c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   23b20:	03c9      	lsls	r1, r1, #15
   23b22:	d40e      	bmi.n	23b42 <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   23b24:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   23b28:	07db      	lsls	r3, r3, #31
   23b2a:	d513      	bpl.n	23b54 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   23b2c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   23b30:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   23b34:	3b01      	subs	r3, #1
   23b36:	2b01      	cmp	r3, #1
   23b38:	d809      	bhi.n	23b4e <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
   23b3a:	2302      	movs	r3, #2
   23b3c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23b40:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23b42:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   23b46:	2b02      	cmp	r3, #2
   23b48:	d005      	beq.n	23b56 <nrfx_clock_start+0x50>
   23b4a:	2b01      	cmp	r3, #1
   23b4c:	d002      	beq.n	23b54 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   23b4e:	2000      	movs	r0, #0
   23b50:	f7ff ff04 	bl	2395c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   23b54:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   23b56:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   23b5a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b5e:	2300      	movs	r3, #0
   23b60:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   23b64:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   23b68:	2302      	movs	r3, #2
   23b6a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23b6e:	2301      	movs	r3, #1
   23b70:	6093      	str	r3, [r2, #8]
}
   23b72:	e7e5      	b.n	23b40 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   23b78:	2200      	movs	r2, #0
   23b7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23b7e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   23b82:	2201      	movs	r2, #1
   23b84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23b88:	601a      	str	r2, [r3, #0]
}
   23b8a:	e7d9      	b.n	23b40 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b8c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   23b90:	2200      	movs	r2, #0
   23b92:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23b96:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   23b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
   23b9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23ba2:	2201      	movs	r2, #1
   23ba4:	621a      	str	r2, [r3, #32]
}
   23ba6:	e7cb      	b.n	23b40 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ba8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   23bac:	2200      	movs	r2, #0
   23bae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   23bb2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   23bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
   23bba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23bbe:	2201      	movs	r2, #1
   23bc0:	619a      	str	r2, [r3, #24]
}
   23bc2:	e7bd      	b.n	23b40 <nrfx_clock_start+0x3a>

00023bc4 <nrfx_clock_stop>:
    clock_stop(domain);
   23bc4:	f7ff beca 	b.w	2395c <clock_stop>

00023bc8 <nrf_gpio_reconfigure>:
{
   23bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23bca:	4616      	mov	r6, r2
   23bcc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   23bd0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23bd2:	a801      	add	r0, sp, #4
{
   23bd4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23bd6:	f7f0 fb6d 	bl	142b4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   23bda:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23bdc:	f1b6 0c00 	subs.w	ip, r6, #0
   23be0:	bf18      	it	ne
   23be2:	f04f 0c01 	movne.w	ip, #1
   23be6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23bea:	1e0b      	subs	r3, r1, #0
   23bec:	bf18      	it	ne
   23bee:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23bf0:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23bf2:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23bf6:	bf14      	ite	ne
   23bf8:	f04f 0c0c 	movne.w	ip, #12
   23bfc:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   23c00:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23c02:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   23c06:	bf14      	ite	ne
   23c08:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   23c0c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   23c10:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23c12:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   23c16:	bf14      	ite	ne
   23c18:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   23c1c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   23c20:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23c24:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   23c28:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23c2c:	b101      	cbz	r1, 23c30 <nrf_gpio_reconfigure+0x68>
   23c2e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   23c30:	b10e      	cbz	r6, 23c36 <nrf_gpio_reconfigure+0x6e>
   23c32:	7836      	ldrb	r6, [r6, #0]
   23c34:	0076      	lsls	r6, r6, #1
   23c36:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   23c38:	b10d      	cbz	r5, 23c3e <nrf_gpio_reconfigure+0x76>
   23c3a:	782d      	ldrb	r5, [r5, #0]
   23c3c:	00ad      	lsls	r5, r5, #2
   23c3e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   23c40:	b10c      	cbz	r4, 23c46 <nrf_gpio_reconfigure+0x7e>
   23c42:	7824      	ldrb	r4, [r4, #0]
   23c44:	0224      	lsls	r4, r4, #8
   23c46:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   23c48:	b10f      	cbz	r7, 23c4e <nrf_gpio_reconfigure+0x86>
   23c4a:	783f      	ldrb	r7, [r7, #0]
   23c4c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23c4e:	430c      	orrs	r4, r1
   23c50:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   23c52:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   23c56:	b003      	add	sp, #12
   23c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023c5a <nrf_gpio_cfg_sense_set>:
{
   23c5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   23c5c:	f10d 030f 	add.w	r3, sp, #15
   23c60:	9301      	str	r3, [sp, #4]
   23c62:	2300      	movs	r3, #0
{
   23c64:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   23c68:	461a      	mov	r2, r3
   23c6a:	4619      	mov	r1, r3
   23c6c:	9300      	str	r3, [sp, #0]
   23c6e:	f7ff ffab 	bl	23bc8 <nrf_gpio_reconfigure>
}
   23c72:	b005      	add	sp, #20
   23c74:	f85d fb04 	ldr.w	pc, [sp], #4

00023c78 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   23c78:	2100      	movs	r1, #0
   23c7a:	f7f0 bf95 	b.w	14ba8 <nrf_gpio_cfg.constprop.0>

00023c7e <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   23c7e:	2302      	movs	r3, #2
   23c80:	f7f0 beea 	b.w	14a58 <qspi_xfer>

00023c84 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   23c84:	2303      	movs	r3, #3
   23c86:	f7f0 bee7 	b.w	14a58 <qspi_xfer>

00023c8a <z_device_state_init>:
}
   23c8a:	4770      	bx	lr

00023c8c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   23c8c:	b140      	cbz	r0, 23ca0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   23c8e:	68c3      	ldr	r3, [r0, #12]
   23c90:	7858      	ldrb	r0, [r3, #1]
   23c92:	f010 0001 	ands.w	r0, r0, #1
   23c96:	bf1e      	ittt	ne
   23c98:	7818      	ldrbne	r0, [r3, #0]
   23c9a:	fab0 f080 	clzne	r0, r0
   23c9e:	0940      	lsrne	r0, r0, #5
}
   23ca0:	4770      	bx	lr

00023ca2 <z_early_memset>:
   23ca2:	f7f3 bb99 	b.w	173d8 <memset>

00023ca6 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23ca6:	f7dc bf55 	b.w	b54 <memcpy>

00023caa <k_heap_init>:
{
   23caa:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   23cac:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   23cb0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   23cb4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   23cb6:	f7fa bffc 	b.w	1ecb2 <sys_heap_init>

00023cba <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   23cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23cbe:	b085      	sub	sp, #20
   23cc0:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   23cc4:	4607      	mov	r7, r0
   23cc6:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23cc8:	4650      	mov	r0, sl
   23cca:	4621      	mov	r1, r4
{
   23ccc:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23cce:	f000 fbfd 	bl	244cc <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   23cd2:	f1b4 3fff 	cmp.w	r4, #4294967295
   23cd6:	bf08      	it	eq
   23cd8:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23cdc:	4605      	mov	r5, r0
   23cde:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   23ce0:	bf04      	itt	eq
   23ce2:	f04f 35ff 	moveq.w	r5, #4294967295
   23ce6:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23cea:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   23cee:	f04f 0320 	mov.w	r3, #32
   23cf2:	f3ef 8411 	mrs	r4, BASEPRI
   23cf6:	f383 8812 	msr	BASEPRI_MAX, r3
   23cfa:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23cfe:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   23d02:	464a      	mov	r2, r9
   23d04:	4641      	mov	r1, r8
   23d06:	4638      	mov	r0, r7
   23d08:	f7fa ff60 	bl	1ebcc <sys_heap_aligned_alloc>
   23d0c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   23d0e:	f7f2 fd61 	bl	167d4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   23d12:	9b03      	ldr	r3, [sp, #12]
   23d14:	b13b      	cbz	r3, 23d26 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   23d16:	f384 8811 	msr	BASEPRI, r4
   23d1a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23d1e:	4618      	mov	r0, r3
   23d20:	b005      	add	sp, #20
   23d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   23d26:	1a28      	subs	r0, r5, r0
   23d28:	eb66 0101 	sbc.w	r1, r6, r1
   23d2c:	2801      	cmp	r0, #1
   23d2e:	f171 0200 	sbcs.w	r2, r1, #0
   23d32:	dbf0      	blt.n	23d16 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23d34:	e9cd 0100 	strd	r0, r1, [sp]
   23d38:	465a      	mov	r2, fp
   23d3a:	4621      	mov	r1, r4
   23d3c:	4650      	mov	r0, sl
   23d3e:	f7f2 f975 	bl	1602c <z_pend_curr>
	__asm__ volatile(
   23d42:	f04f 0320 	mov.w	r3, #32
   23d46:	f3ef 8411 	mrs	r4, BASEPRI
   23d4a:	f383 8812 	msr	BASEPRI_MAX, r3
   23d4e:	f3bf 8f6f 	isb	sy
	return k;
   23d52:	e7d6      	b.n	23d02 <k_heap_aligned_alloc+0x48>

00023d54 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   23d54:	b538      	push	{r3, r4, r5, lr}
   23d56:	4604      	mov	r4, r0
   23d58:	f04f 0320 	mov.w	r3, #32
   23d5c:	f3ef 8511 	mrs	r5, BASEPRI
   23d60:	f383 8812 	msr	BASEPRI_MAX, r3
   23d64:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   23d68:	f7fa fee7 	bl	1eb3a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23d6c:	f104 000c 	add.w	r0, r4, #12
   23d70:	f000 fb35 	bl	243de <z_unpend_all>
   23d74:	b130      	cbz	r0, 23d84 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   23d76:	4629      	mov	r1, r5
   23d78:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   23d80:	f7f2 b9b8 	b.w	160f4 <z_reschedule>
	__asm__ volatile(
   23d84:	f385 8811 	msr	BASEPRI, r5
   23d88:	f3bf 8f6f 	isb	sy
}
   23d8c:	bd38      	pop	{r3, r4, r5, pc}

00023d8e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23d8e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   23d92:	4313      	orrs	r3, r2
   23d94:	f013 0303 	ands.w	r3, r3, #3
   23d98:	d10c      	bne.n	23db4 <create_free_list+0x26>
	slab->free_list = NULL;
   23d9a:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23d9c:	6881      	ldr	r1, [r0, #8]
   23d9e:	4299      	cmp	r1, r3
   23da0:	d801      	bhi.n	23da6 <create_free_list+0x18>
	return 0;
   23da2:	2000      	movs	r0, #0
   23da4:	4770      	bx	lr
		*(char **)p = slab->free_list;
   23da6:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23da8:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   23daa:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   23dac:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   23dae:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   23db0:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   23db2:	e7f3      	b.n	23d9c <create_free_list+0xe>
		return -EINVAL;
   23db4:	f06f 0015 	mvn.w	r0, #21
}
   23db8:	4770      	bx	lr

00023dba <k_mem_slab_init>:
{
   23dba:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   23dbc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   23dc0:	2300      	movs	r3, #0
	slab->buffer = buffer;
   23dc2:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   23dc4:	6183      	str	r3, [r0, #24]
{
   23dc6:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   23dc8:	f7ff ffe1 	bl	23d8e <create_free_list>
	if (rc < 0) {
   23dcc:	2800      	cmp	r0, #0
   23dce:	bfa8      	it	ge
   23dd0:	e9c4 4400 	strdge	r4, r4, [r4]
}
   23dd4:	bd10      	pop	{r4, pc}

00023dd6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23dd8:	4604      	mov	r4, r0
   23dda:	460d      	mov	r5, r1
	__asm__ volatile(
   23ddc:	f04f 0320 	mov.w	r3, #32
   23de0:	f3ef 8611 	mrs	r6, BASEPRI
   23de4:	f383 8812 	msr	BASEPRI_MAX, r3
   23de8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   23dec:	6947      	ldr	r7, [r0, #20]
   23dee:	b977      	cbnz	r7, 23e0e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   23df0:	f000 faab 	bl	2434a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   23df4:	b158      	cbz	r0, 23e0e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23df6:	682a      	ldr	r2, [r5, #0]
   23df8:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23dfa:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   23dfc:	f000 fa46 	bl	2428c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23e00:	4631      	mov	r1, r6
   23e02:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   23e06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   23e0a:	f7f2 b973 	b.w	160f4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   23e0e:	682b      	ldr	r3, [r5, #0]
   23e10:	6962      	ldr	r2, [r4, #20]
   23e12:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23e14:	682b      	ldr	r3, [r5, #0]
   23e16:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   23e18:	69a3      	ldr	r3, [r4, #24]
   23e1a:	3b01      	subs	r3, #1
   23e1c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   23e1e:	f386 8811 	msr	BASEPRI, r6
   23e22:	f3bf 8f6f 	isb	sy
}
   23e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023e28 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23e28:	f3ef 8005 	mrs	r0, IPSR
}
   23e2c:	3800      	subs	r0, #0
   23e2e:	bf18      	it	ne
   23e30:	2001      	movne	r0, #1
   23e32:	4770      	bx	lr

00023e34 <z_impl_k_thread_name_set>:
}
   23e34:	f06f 0057 	mvn.w	r0, #87	; 0x57
   23e38:	4770      	bx	lr

00023e3a <k_thread_name_get>:
}
   23e3a:	2000      	movs	r0, #0
   23e3c:	4770      	bx	lr

00023e3e <z_impl_k_thread_start>:
	z_sched_start(thread);
   23e3e:	f7f2 b96b 	b.w	16118 <z_sched_start>

00023e42 <z_pm_save_idle_exit>:
{
   23e42:	b508      	push	{r3, lr}
	pm_system_resume();
   23e44:	f7e1 fb3c 	bl	54c0 <pm_system_resume>
}
   23e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   23e4c:	f7fe bded 	b.w	22a2a <sys_clock_idle_exit>

00023e50 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   23e50:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23e54:	428b      	cmp	r3, r1
   23e56:	d001      	beq.n	23e5c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   23e58:	f7f2 b906 	b.w	16068 <z_set_prio>
}
   23e5c:	2000      	movs	r0, #0
   23e5e:	4770      	bx	lr

00023e60 <z_impl_k_mutex_init>:
{
   23e60:	4603      	mov	r3, r0
	mutex->owner = NULL;
   23e62:	2000      	movs	r0, #0
   23e64:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   23e68:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   23e6c:	4770      	bx	lr

00023e6e <queue_insert>:
{
   23e6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23e72:	4699      	mov	r9, r3
   23e74:	4604      	mov	r4, r0
   23e76:	460d      	mov	r5, r1
   23e78:	4690      	mov	r8, r2
   23e7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23e7e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23e82:	f04f 0220 	mov.w	r2, #32
   23e86:	f3ef 8711 	mrs	r7, BASEPRI
   23e8a:	f382 8812 	msr	BASEPRI_MAX, r2
   23e8e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   23e92:	b103      	cbz	r3, 23e96 <queue_insert+0x28>
	return list->tail;
   23e94:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23e96:	4630      	mov	r0, r6
   23e98:	f000 fa57 	bl	2434a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   23e9c:	b158      	cbz	r0, 23eb6 <queue_insert+0x48>
   23e9e:	2300      	movs	r3, #0
   23ea0:	f8c0 8014 	str.w	r8, [r0, #20]
   23ea4:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   23ea6:	f000 f9f1 	bl	2428c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   23eaa:	4630      	mov	r0, r6
   23eac:	4639      	mov	r1, r7
   23eae:	f7f2 f921 	bl	160f4 <z_reschedule>
		return 0;
   23eb2:	2000      	movs	r0, #0
   23eb4:	e00c      	b.n	23ed0 <queue_insert+0x62>
	if (alloc) {
   23eb6:	f1b9 0f00 	cmp.w	r9, #0
   23eba:	d01b      	beq.n	23ef4 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   23ebc:	2108      	movs	r1, #8
   23ebe:	f7f2 fdd7 	bl	16a70 <z_thread_aligned_alloc>
		if (anode == NULL) {
   23ec2:	b938      	cbnz	r0, 23ed4 <queue_insert+0x66>
	__asm__ volatile(
   23ec4:	f387 8811 	msr	BASEPRI, r7
   23ec8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23ecc:	f06f 000b 	mvn.w	r0, #11
}
   23ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   23ed4:	2201      	movs	r2, #1
		anode->data = data;
   23ed6:	f8c0 8004 	str.w	r8, [r0, #4]
   23eda:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23edc:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23ede:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   23ee2:	b95d      	cbnz	r5, 23efc <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   23ee4:	6822      	ldr	r2, [r4, #0]
   23ee6:	430a      	orrs	r2, r1
   23ee8:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23eea:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   23eec:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23eee:	b96a      	cbnz	r2, 23f0c <queue_insert+0x9e>
	list->tail = node;
   23ef0:	6060      	str	r0, [r4, #4]
}
   23ef2:	e00b      	b.n	23f0c <queue_insert+0x9e>
}
   23ef4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   23ef6:	f8c8 9000 	str.w	r9, [r8]
}
   23efa:	e7ef      	b.n	23edc <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23efc:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23efe:	2a03      	cmp	r2, #3
   23f00:	d810      	bhi.n	23f24 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f02:	6001      	str	r1, [r0, #0]
	return list->tail;
   23f04:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   23f06:	b939      	cbnz	r1, 23f18 <queue_insert+0xaa>
	list->head = node;
   23f08:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23f0c:	2104      	movs	r1, #4
   23f0e:	f104 0010 	add.w	r0, r4, #16
   23f12:	f000 fc66 	bl	247e2 <z_handle_obj_poll_events>
   23f16:	e7c8      	b.n	23eaa <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23f18:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f1a:	f002 0203 	and.w	r2, r2, #3
   23f1e:	4302      	orrs	r2, r0
   23f20:	600a      	str	r2, [r1, #0]
   23f22:	e7e5      	b.n	23ef0 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23f24:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f28:	430a      	orrs	r2, r1
   23f2a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23f2c:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f2e:	f002 0203 	and.w	r2, r2, #3
   23f32:	ea40 0302 	orr.w	r3, r0, r2
   23f36:	602b      	str	r3, [r5, #0]
}
   23f38:	e7e8      	b.n	23f0c <queue_insert+0x9e>

00023f3a <z_queue_node_peek>:
{
   23f3a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   23f3c:	4604      	mov	r4, r0
   23f3e:	b130      	cbz	r0, 23f4e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23f40:	6802      	ldr	r2, [r0, #0]
   23f42:	0793      	lsls	r3, r2, #30
   23f44:	d003      	beq.n	23f4e <z_queue_node_peek+0x14>
		ret = anode->data;
   23f46:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   23f48:	b109      	cbz	r1, 23f4e <z_queue_node_peek+0x14>
			k_free(anode);
   23f4a:	f000 fc6b 	bl	24824 <k_free>
}
   23f4e:	4620      	mov	r0, r4
   23f50:	bd10      	pop	{r4, pc}

00023f52 <z_impl_k_queue_init>:
	list->head = NULL;
   23f52:	2300      	movs	r3, #0
	list->tail = NULL;
   23f54:	e9c0 3300 	strd	r3, r3, [r0]
   23f58:	f100 0308 	add.w	r3, r0, #8
   23f5c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   23f60:	f100 0310 	add.w	r3, r0, #16
   23f64:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   23f68:	4770      	bx	lr

00023f6a <z_impl_k_queue_cancel_wait>:
{
   23f6a:	b570      	push	{r4, r5, r6, lr}
   23f6c:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23f6e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23f72:	f04f 0320 	mov.w	r3, #32
   23f76:	f3ef 8611 	mrs	r6, BASEPRI
   23f7a:	f383 8812 	msr	BASEPRI_MAX, r3
   23f7e:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23f82:	4628      	mov	r0, r5
   23f84:	f000 f9e1 	bl	2434a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   23f88:	b120      	cbz	r0, 23f94 <z_impl_k_queue_cancel_wait+0x2a>
   23f8a:	2200      	movs	r2, #0
   23f8c:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   23f8e:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   23f90:	f000 f97c 	bl	2428c <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   23f94:	f104 0010 	add.w	r0, r4, #16
   23f98:	2108      	movs	r1, #8
   23f9a:	f000 fc22 	bl	247e2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   23f9e:	4631      	mov	r1, r6
   23fa0:	4628      	mov	r0, r5
}
   23fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   23fa6:	f7f2 b8a5 	b.w	160f4 <z_reschedule>

00023faa <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   23faa:	2301      	movs	r3, #1
{
   23fac:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   23fae:	9300      	str	r3, [sp, #0]
   23fb0:	2300      	movs	r3, #0
{
   23fb2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   23fb4:	4619      	mov	r1, r3
   23fb6:	f7ff ff5a 	bl	23e6e <queue_insert>
}
   23fba:	b003      	add	sp, #12
   23fbc:	f85d fb04 	ldr.w	pc, [sp], #4

00023fc0 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   23fc0:	2300      	movs	r3, #0
{
   23fc2:	b507      	push	{r0, r1, r2, lr}
   23fc4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   23fc6:	9300      	str	r3, [sp, #0]
   23fc8:	4619      	mov	r1, r3
   23fca:	f7ff ff50 	bl	23e6e <queue_insert>
}
   23fce:	b003      	add	sp, #12
   23fd0:	f85d fb04 	ldr.w	pc, [sp], #4

00023fd4 <k_queue_unique_append>:

	return ret;
}

bool k_queue_unique_append(struct k_queue *queue, void *data)
{
   23fd4:	b508      	push	{r3, lr}
	return list->head;
   23fd6:	6803      	ldr	r3, [r0, #0]
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, unique_append, queue);

	sys_sfnode_t *test;

	SYS_SFLIST_FOR_EACH_NODE(&queue->data_q, test) {
   23fd8:	b91b      	cbnz	r3, 23fe2 <k_queue_unique_append+0xe>

			return false;
		}
	}

	k_queue_append(queue, data);
   23fda:	f7ff ffe6 	bl	23faa <k_queue_append>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, unique_append, queue, true);

	return true;
   23fde:	2001      	movs	r0, #1
}
   23fe0:	bd08      	pop	{r3, pc}
		if (test == (sys_sfnode_t *) data) {
   23fe2:	428b      	cmp	r3, r1
   23fe4:	d003      	beq.n	23fee <k_queue_unique_append+0x1a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23fe6:	681b      	ldr	r3, [r3, #0]
   23fe8:	f023 0303 	bic.w	r3, r3, #3
   23fec:	e7f4      	b.n	23fd8 <k_queue_unique_append+0x4>
			return false;
   23fee:	2000      	movs	r0, #0
   23ff0:	e7f6      	b.n	23fe0 <k_queue_unique_append+0xc>

00023ff2 <z_impl_k_queue_peek_head>:

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   23ff2:	2100      	movs	r1, #0
   23ff4:	6800      	ldr	r0, [r0, #0]
   23ff6:	f7ff bfa0 	b.w	23f3a <z_queue_node_peek>

00023ffa <z_impl_k_queue_peek_tail>:
	return ret;
}

void *z_impl_k_queue_peek_tail(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   23ffa:	2100      	movs	r1, #0
   23ffc:	6840      	ldr	r0, [r0, #4]
   23ffe:	f7ff bf9c 	b.w	23f3a <z_queue_node_peek>

00024002 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   24002:	b15a      	cbz	r2, 2401c <z_impl_k_sem_init+0x1a>
   24004:	428a      	cmp	r2, r1
   24006:	d309      	bcc.n	2401c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   24008:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2400c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   24010:	e9c0 0000 	strd	r0, r0, [r0]
   24014:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   24018:	2000      	movs	r0, #0
   2401a:	4770      	bx	lr
		return -EINVAL;
   2401c:	f06f 0015 	mvn.w	r0, #21
}
   24020:	4770      	bx	lr

00024022 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   24022:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   24024:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   24026:	408b      	lsls	r3, r1
   24028:	ea22 0303 	bic.w	r3, r2, r3
   2402c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2402e:	fa22 f001 	lsr.w	r0, r2, r1
}
   24032:	f000 0001 	and.w	r0, r0, #1
   24036:	4770      	bx	lr

00024038 <unschedule_locked>:
{
   24038:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2403a:	2103      	movs	r1, #3
{
   2403c:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2403e:	300c      	adds	r0, #12
   24040:	f7ff ffef 	bl	24022 <flag_test_and_clear>
   24044:	b130      	cbz	r0, 24054 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   24046:	f104 0010 	add.w	r0, r4, #16
   2404a:	f000 f9ff 	bl	2444c <z_abort_timeout>
   2404e:	fab0 f080 	clz	r0, r0
   24052:	0940      	lsrs	r0, r0, #5
}
   24054:	bd10      	pop	{r4, pc}

00024056 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   24056:	b120      	cbz	r0, 24062 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   24058:	2200      	movs	r2, #0
   2405a:	3088      	adds	r0, #136	; 0x88
   2405c:	4611      	mov	r1, r2
   2405e:	f000 b9ce 	b.w	243fe <z_sched_wake>
}
   24062:	4770      	bx	lr

00024064 <cancel_async_locked>:
{
   24064:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   24066:	68c3      	ldr	r3, [r0, #12]
{
   24068:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2406a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2406e:	079b      	lsls	r3, r3, #30
   24070:	d416      	bmi.n	240a0 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   24072:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24074:	2102      	movs	r1, #2
   24076:	300c      	adds	r0, #12
   24078:	f7ff ffd3 	bl	24022 <flag_test_and_clear>
   2407c:	b180      	cbz	r0, 240a0 <cancel_async_locked+0x3c>
	return list->head;
   2407e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24082:	b16a      	cbz	r2, 240a0 <cancel_async_locked+0x3c>
   24084:	4294      	cmp	r4, r2
   24086:	d11d      	bne.n	240c4 <cancel_async_locked+0x60>
	return node->next;
   24088:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2408a:	b99e      	cbnz	r6, 240b4 <cancel_async_locked+0x50>
   2408c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   24090:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   24094:	429c      	cmp	r4, r3
   24096:	d101      	bne.n	2409c <cancel_async_locked+0x38>
	list->tail = node;
   24098:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2409c:	2300      	movs	r3, #0
   2409e:	6023      	str	r3, [r4, #0]
	return *flagp;
   240a0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   240a2:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   240a6:	bf1e      	ittt	ne
   240a8:	f043 0302 	orrne.w	r3, r3, #2
   240ac:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   240ae:	f040 0002 	orrne.w	r0, r0, #2
}
   240b2:	bd70      	pop	{r4, r5, r6, pc}
   240b4:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   240b6:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   240ba:	4294      	cmp	r4, r2
	list->tail = node;
   240bc:	bf08      	it	eq
   240be:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   240c2:	e7eb      	b.n	2409c <cancel_async_locked+0x38>
	return node->next;
   240c4:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   240c6:	6812      	ldr	r2, [r2, #0]
   240c8:	e7db      	b.n	24082 <cancel_async_locked+0x1e>

000240ca <work_timeout>:
{
   240ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   240cc:	4604      	mov	r4, r0
   240ce:	f04f 0320 	mov.w	r3, #32
   240d2:	f3ef 8511 	mrs	r5, BASEPRI
   240d6:	f383 8812 	msr	BASEPRI_MAX, r3
   240da:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   240de:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   240e0:	f1a0 0610 	sub.w	r6, r0, #16
   240e4:	2103      	movs	r1, #3
   240e6:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   240e8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   240ea:	f7ff ff9a 	bl	24022 <flag_test_and_clear>
   240ee:	b128      	cbz	r0, 240fc <work_timeout+0x32>
		queue = dw->queue;
   240f0:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   240f2:	4630      	mov	r0, r6
   240f4:	a901      	add	r1, sp, #4
		queue = dw->queue;
   240f6:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   240f8:	f7f1 fd32 	bl	15b60 <submit_to_queue_locked>
	__asm__ volatile(
   240fc:	f385 8811 	msr	BASEPRI, r5
   24100:	f3bf 8f6f 	isb	sy
}
   24104:	b002      	add	sp, #8
   24106:	bd70      	pop	{r4, r5, r6, pc}

00024108 <k_work_init>:
{
   24108:	b538      	push	{r3, r4, r5, lr}
   2410a:	4604      	mov	r4, r0
   2410c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2410e:	2210      	movs	r2, #16
   24110:	2100      	movs	r1, #0
   24112:	f7f3 f961 	bl	173d8 <memset>
   24116:	6065      	str	r5, [r4, #4]
}
   24118:	bd38      	pop	{r3, r4, r5, pc}

0002411a <k_work_busy_get>:
	__asm__ volatile(
   2411a:	f04f 0220 	mov.w	r2, #32
   2411e:	f3ef 8311 	mrs	r3, BASEPRI
   24122:	f382 8812 	msr	BASEPRI_MAX, r2
   24126:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2412a:	68c0      	ldr	r0, [r0, #12]
   2412c:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   24130:	f383 8811 	msr	BASEPRI, r3
   24134:	f3bf 8f6f 	isb	sy
}
   24138:	4770      	bx	lr

0002413a <z_work_submit_to_queue>:
{
   2413a:	b513      	push	{r0, r1, r4, lr}
   2413c:	9001      	str	r0, [sp, #4]
   2413e:	4608      	mov	r0, r1
	__asm__ volatile(
   24140:	f04f 0320 	mov.w	r3, #32
   24144:	f3ef 8411 	mrs	r4, BASEPRI
   24148:	f383 8812 	msr	BASEPRI_MAX, r3
   2414c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24150:	a901      	add	r1, sp, #4
   24152:	f7f1 fd05 	bl	15b60 <submit_to_queue_locked>
	__asm__ volatile(
   24156:	f384 8811 	msr	BASEPRI, r4
   2415a:	f3bf 8f6f 	isb	sy
}
   2415e:	b002      	add	sp, #8
   24160:	bd10      	pop	{r4, pc}

00024162 <k_work_submit_to_queue>:
{
   24162:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   24164:	f7ff ffe9 	bl	2413a <z_work_submit_to_queue>
	if (ret > 0) {
   24168:	1e04      	subs	r4, r0, #0
   2416a:	dd09      	ble.n	24180 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2416c:	f04f 0320 	mov.w	r3, #32
   24170:	f3ef 8011 	mrs	r0, BASEPRI
   24174:	f383 8812 	msr	BASEPRI_MAX, r3
   24178:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2417c:	f000 f919 	bl	243b2 <z_reschedule_irqlock>
}
   24180:	4620      	mov	r0, r4
   24182:	bd10      	pop	{r4, pc}

00024184 <k_work_cancel>:
{
   24184:	b510      	push	{r4, lr}
   24186:	f04f 0320 	mov.w	r3, #32
   2418a:	f3ef 8411 	mrs	r4, BASEPRI
   2418e:	f383 8812 	msr	BASEPRI_MAX, r3
   24192:	f3bf 8f6f 	isb	sy
	int ret = cancel_async_locked(work);
   24196:	f7ff ff65 	bl	24064 <cancel_async_locked>
	__asm__ volatile(
   2419a:	f384 8811 	msr	BASEPRI, r4
   2419e:	f3bf 8f6f 	isb	sy
}
   241a2:	bd10      	pop	{r4, pc}

000241a4 <k_work_queue_init>:
{
   241a4:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   241a6:	22a0      	movs	r2, #160	; 0xa0
   241a8:	2100      	movs	r1, #0
   241aa:	f7f3 f915 	bl	173d8 <memset>
}
   241ae:	bd08      	pop	{r3, pc}

000241b0 <k_work_init_delayable>:
{
   241b0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   241b2:	2230      	movs	r2, #48	; 0x30
{
   241b4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   241b6:	2100      	movs	r1, #0
{
   241b8:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   241ba:	f7f3 f90d 	bl	173d8 <memset>
   241be:	f44f 7380 	mov.w	r3, #256	; 0x100
   241c2:	6065      	str	r5, [r4, #4]
   241c4:	60e3      	str	r3, [r4, #12]
}
   241c6:	bd38      	pop	{r3, r4, r5, pc}

000241c8 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   241c8:	f7ff bfa7 	b.w	2411a <k_work_busy_get>

000241cc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   241cc:	b538      	push	{r3, r4, r5, lr}
   241ce:	4604      	mov	r4, r0
	__asm__ volatile(
   241d0:	f04f 0320 	mov.w	r3, #32
   241d4:	f3ef 8511 	mrs	r5, BASEPRI
   241d8:	f383 8812 	msr	BASEPRI_MAX, r3
   241dc:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   241e0:	f7ff ff2a 	bl	24038 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   241e4:	4620      	mov	r0, r4
   241e6:	f7ff ff3d 	bl	24064 <cancel_async_locked>
	__asm__ volatile(
   241ea:	f385 8811 	msr	BASEPRI, r5
   241ee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   241f2:	bd38      	pop	{r3, r4, r5, pc}

000241f4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   241f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   241f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   241fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   241fc:	2300      	movs	r3, #0
	node->prev = NULL;
   241fe:	e9c0 3300 	strd	r3, r3, [r0]
}
   24202:	4770      	bx	lr

00024204 <unpend_thread_no_timeout>:
{
   24204:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   24206:	f7ff fff5 	bl	241f4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2420a:	7b43      	ldrb	r3, [r0, #13]
   2420c:	f023 0302 	bic.w	r3, r3, #2
   24210:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   24212:	2300      	movs	r3, #0
   24214:	6083      	str	r3, [r0, #8]
}
   24216:	bd08      	pop	{r3, pc}

00024218 <z_swap_irqlock>:
{
   24218:	b510      	push	{r4, lr}
   2421a:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   2421c:	f7f1 f900 	bl	15420 <z_check_stack_sentinel>
	ret = arch_swap(key);
   24220:	4620      	mov	r0, r4
}
   24222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   24226:	f7e2 b867 	b.w	62f8 <arch_swap>

0002422a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2422a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2422e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   24232:	4283      	cmp	r3, r0
		return b2 - b1;
   24234:	bf14      	ite	ne
   24236:	1ac0      	subne	r0, r0, r3
	return 0;
   24238:	2000      	moveq	r0, #0
}
   2423a:	4770      	bx	lr

0002423c <add_to_waitq_locked>:
{
   2423c:	b538      	push	{r3, r4, r5, lr}
   2423e:	4604      	mov	r4, r0
   24240:	460d      	mov	r5, r1
	unready_thread(thread);
   24242:	f7f1 fe93 	bl	15f6c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24246:	7b63      	ldrb	r3, [r4, #13]
   24248:	f043 0302 	orr.w	r3, r3, #2
   2424c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2424e:	b1e5      	cbz	r5, 2428a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   24250:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   24252:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24254:	429d      	cmp	r5, r3
   24256:	d109      	bne.n	2426c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   24258:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2425a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2425e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24260:	606c      	str	r4, [r5, #4]
}
   24262:	e012      	b.n	2428a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   24264:	686a      	ldr	r2, [r5, #4]
   24266:	4293      	cmp	r3, r2
   24268:	d0f6      	beq.n	24258 <add_to_waitq_locked+0x1c>
   2426a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2426c:	2b00      	cmp	r3, #0
   2426e:	d0f3      	beq.n	24258 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   24270:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24274:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   24278:	428a      	cmp	r2, r1
   2427a:	d0f3      	beq.n	24264 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2427c:	4291      	cmp	r1, r2
   2427e:	ddf1      	ble.n	24264 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   24280:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24282:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24286:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24288:	605c      	str	r4, [r3, #4]
}
   2428a:	bd38      	pop	{r3, r4, r5, pc}

0002428c <z_ready_thread>:
{
   2428c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2428e:	f04f 0320 	mov.w	r3, #32
   24292:	f3ef 8411 	mrs	r4, BASEPRI
   24296:	f383 8812 	msr	BASEPRI_MAX, r3
   2429a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2429e:	f7f1 fe31 	bl	15f04 <ready_thread>
	__asm__ volatile(
   242a2:	f384 8811 	msr	BASEPRI, r4
   242a6:	f3bf 8f6f 	isb	sy
}
   242aa:	bd10      	pop	{r4, pc}

000242ac <z_unpend_thread_no_timeout>:
{
   242ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   242ae:	f04f 0220 	mov.w	r2, #32
   242b2:	f3ef 8111 	mrs	r1, BASEPRI
   242b6:	f382 8812 	msr	BASEPRI_MAX, r2
   242ba:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   242be:	6883      	ldr	r3, [r0, #8]
   242c0:	b10b      	cbz	r3, 242c6 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   242c2:	f7ff ff9f 	bl	24204 <unpend_thread_no_timeout>
	__asm__ volatile(
   242c6:	f381 8811 	msr	BASEPRI, r1
   242ca:	f3bf 8f6f 	isb	sy
}
   242ce:	bd08      	pop	{r3, pc}

000242d0 <z_sched_wake_thread>:
{
   242d0:	b538      	push	{r3, r4, r5, lr}
   242d2:	4604      	mov	r4, r0
	__asm__ volatile(
   242d4:	f04f 0320 	mov.w	r3, #32
   242d8:	f3ef 8511 	mrs	r5, BASEPRI
   242dc:	f383 8812 	msr	BASEPRI_MAX, r3
   242e0:	f3bf 8f6f 	isb	sy
		if (!killed) {
   242e4:	7b43      	ldrb	r3, [r0, #13]
   242e6:	f013 0f28 	tst.w	r3, #40	; 0x28
   242ea:	d10b      	bne.n	24304 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   242ec:	6883      	ldr	r3, [r0, #8]
   242ee:	b10b      	cbz	r3, 242f4 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   242f0:	f7ff ff88 	bl	24204 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   242f4:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   242f6:	b951      	cbnz	r1, 2430e <z_sched_wake_thread+0x3e>
   242f8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   242fc:	4620      	mov	r0, r4
   242fe:	7363      	strb	r3, [r4, #13]
   24300:	f7f1 fe00 	bl	15f04 <ready_thread>
	__asm__ volatile(
   24304:	f385 8811 	msr	BASEPRI, r5
   24308:	f3bf 8f6f 	isb	sy
}
   2430c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2430e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   24312:	e7f3      	b.n	242fc <z_sched_wake_thread+0x2c>

00024314 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   24314:	2101      	movs	r1, #1
   24316:	3818      	subs	r0, #24
   24318:	f7ff bfda 	b.w	242d0 <z_sched_wake_thread>

0002431c <z_unpend1_no_timeout>:
{
   2431c:	b508      	push	{r3, lr}
   2431e:	4603      	mov	r3, r0
	__asm__ volatile(
   24320:	f04f 0220 	mov.w	r2, #32
   24324:	f3ef 8111 	mrs	r1, BASEPRI
   24328:	f382 8812 	msr	BASEPRI_MAX, r2
   2432c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24330:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24332:	4283      	cmp	r3, r0
   24334:	d007      	beq.n	24346 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   24336:	b108      	cbz	r0, 2433c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   24338:	f7ff ff64 	bl	24204 <unpend_thread_no_timeout>
	__asm__ volatile(
   2433c:	f381 8811 	msr	BASEPRI, r1
   24340:	f3bf 8f6f 	isb	sy
}
   24344:	bd08      	pop	{r3, pc}
   24346:	2000      	movs	r0, #0
   24348:	e7f8      	b.n	2433c <z_unpend1_no_timeout+0x20>

0002434a <z_unpend_first_thread>:
{
   2434a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2434c:	f04f 0320 	mov.w	r3, #32
   24350:	f3ef 8511 	mrs	r5, BASEPRI
   24354:	f383 8812 	msr	BASEPRI_MAX, r3
   24358:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2435c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2435e:	42a0      	cmp	r0, r4
   24360:	d00d      	beq.n	2437e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   24362:	b134      	cbz	r4, 24372 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   24364:	4620      	mov	r0, r4
   24366:	f7ff ff4d 	bl	24204 <unpend_thread_no_timeout>
   2436a:	f104 0018 	add.w	r0, r4, #24
   2436e:	f000 f86d 	bl	2444c <z_abort_timeout>
	__asm__ volatile(
   24372:	f385 8811 	msr	BASEPRI, r5
   24376:	f3bf 8f6f 	isb	sy
}
   2437a:	4620      	mov	r0, r4
   2437c:	bd38      	pop	{r3, r4, r5, pc}
   2437e:	2400      	movs	r4, #0
   24380:	e7f7      	b.n	24372 <z_unpend_first_thread+0x28>

00024382 <z_unpend_thread>:
{
   24382:	4601      	mov	r1, r0
   24384:	b510      	push	{r4, lr}
	__asm__ volatile(
   24386:	f04f 0320 	mov.w	r3, #32
   2438a:	f3ef 8411 	mrs	r4, BASEPRI
   2438e:	f383 8812 	msr	BASEPRI_MAX, r3
   24392:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   24396:	6883      	ldr	r3, [r0, #8]
   24398:	b10b      	cbz	r3, 2439e <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   2439a:	f7ff ff33 	bl	24204 <unpend_thread_no_timeout>
	__asm__ volatile(
   2439e:	f384 8811 	msr	BASEPRI, r4
   243a2:	f3bf 8f6f 	isb	sy
}
   243a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   243aa:	f101 0018 	add.w	r0, r1, #24
   243ae:	f000 b84d 	b.w	2444c <z_abort_timeout>

000243b2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   243b2:	4603      	mov	r3, r0
   243b4:	b920      	cbnz	r0, 243c0 <z_reschedule_irqlock+0xe>
   243b6:	f3ef 8205 	mrs	r2, IPSR
   243ba:	b90a      	cbnz	r2, 243c0 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   243bc:	f7ff bf2c 	b.w	24218 <z_swap_irqlock>
   243c0:	f383 8811 	msr	BASEPRI, r3
   243c4:	f3bf 8f6f 	isb	sy
}
   243c8:	4770      	bx	lr

000243ca <z_reschedule_unlocked>:
	__asm__ volatile(
   243ca:	f04f 0320 	mov.w	r3, #32
   243ce:	f3ef 8011 	mrs	r0, BASEPRI
   243d2:	f383 8812 	msr	BASEPRI_MAX, r3
   243d6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   243da:	f7ff bfea 	b.w	243b2 <z_reschedule_irqlock>

000243de <z_unpend_all>:
{
   243de:	b538      	push	{r3, r4, r5, lr}
   243e0:	4605      	mov	r5, r0
	int need_sched = 0;
   243e2:	2000      	movs	r0, #0
	return list->head == list;
   243e4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243e6:	42a5      	cmp	r5, r4
   243e8:	d000      	beq.n	243ec <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   243ea:	b904      	cbnz	r4, 243ee <z_unpend_all+0x10>
}
   243ec:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   243ee:	4620      	mov	r0, r4
   243f0:	f7ff ffc7 	bl	24382 <z_unpend_thread>
		z_ready_thread(thread);
   243f4:	4620      	mov	r0, r4
   243f6:	f7ff ff49 	bl	2428c <z_ready_thread>
		need_sched = 1;
   243fa:	2001      	movs	r0, #1
   243fc:	e7f2      	b.n	243e4 <z_unpend_all+0x6>

000243fe <z_sched_wake>:
{
   243fe:	b538      	push	{r3, r4, r5, lr}
   24400:	f04f 0320 	mov.w	r3, #32
   24404:	f3ef 8511 	mrs	r5, BASEPRI
   24408:	f383 8812 	msr	BASEPRI_MAX, r3
   2440c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24410:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24412:	42a0      	cmp	r0, r4
   24414:	d012      	beq.n	2443c <z_sched_wake+0x3e>
		if (thread != NULL) {
   24416:	b19c      	cbz	r4, 24440 <z_sched_wake+0x42>
   24418:	67e1      	str	r1, [r4, #124]	; 0x7c
   2441a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2441c:	4620      	mov	r0, r4
   2441e:	f7ff fef1 	bl	24204 <unpend_thread_no_timeout>
   24422:	f104 0018 	add.w	r0, r4, #24
   24426:	f000 f811 	bl	2444c <z_abort_timeout>
			ready_thread(thread);
   2442a:	4620      	mov	r0, r4
   2442c:	f7f1 fd6a 	bl	15f04 <ready_thread>
			ret = true;
   24430:	2001      	movs	r0, #1
	__asm__ volatile(
   24432:	f385 8811 	msr	BASEPRI, r5
   24436:	f3bf 8f6f 	isb	sy
}
   2443a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2443c:	2000      	movs	r0, #0
   2443e:	e7f8      	b.n	24432 <z_sched_wake+0x34>
   24440:	4620      	mov	r0, r4
   24442:	e7f6      	b.n	24432 <z_sched_wake+0x34>

00024444 <z_impl_k_condvar_init>:
	list->tail = (sys_dnode_t *)list;
   24444:	e9c0 0000 	strd	r0, r0, [r0]
}
   24448:	2000      	movs	r0, #0
   2444a:	4770      	bx	lr

0002444c <z_abort_timeout>:
{
   2444c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2444e:	f04f 0220 	mov.w	r2, #32
   24452:	f3ef 8411 	mrs	r4, BASEPRI
   24456:	f382 8812 	msr	BASEPRI_MAX, r2
   2445a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2445e:	6803      	ldr	r3, [r0, #0]
   24460:	b13b      	cbz	r3, 24472 <z_abort_timeout+0x26>
			remove_timeout(to);
   24462:	f7f2 f897 	bl	16594 <remove_timeout>
			ret = 0;
   24466:	2000      	movs	r0, #0
	__asm__ volatile(
   24468:	f384 8811 	msr	BASEPRI, r4
   2446c:	f3bf 8f6f 	isb	sy
}
   24470:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   24472:	f06f 0015 	mvn.w	r0, #21
   24476:	e7f7      	b.n	24468 <z_abort_timeout+0x1c>

00024478 <z_timeout_remaining>:
{
   24478:	b510      	push	{r4, lr}
	__asm__ volatile(
   2447a:	f04f 0320 	mov.w	r3, #32
   2447e:	f3ef 8411 	mrs	r4, BASEPRI
   24482:	f383 8812 	msr	BASEPRI_MAX, r3
   24486:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   2448a:	f7f2 f89f 	bl	165cc <timeout_rem>
	__asm__ volatile(
   2448e:	f384 8811 	msr	BASEPRI, r4
   24492:	f3bf 8f6f 	isb	sy
}
   24496:	bd10      	pop	{r4, pc}

00024498 <z_get_next_timeout_expiry>:
{
   24498:	b510      	push	{r4, lr}
	__asm__ volatile(
   2449a:	f04f 0320 	mov.w	r3, #32
   2449e:	f3ef 8411 	mrs	r4, BASEPRI
   244a2:	f383 8812 	msr	BASEPRI_MAX, r3
   244a6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   244aa:	f7f2 f853 	bl	16554 <next_timeout>
	__asm__ volatile(
   244ae:	f384 8811 	msr	BASEPRI, r4
   244b2:	f3bf 8f6f 	isb	sy
}
   244b6:	bd10      	pop	{r4, pc}

000244b8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   244b8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   244ba:	f7f2 f98b 	bl	167d4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   244be:	bd08      	pop	{r3, pc}

000244c0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   244c0:	f7f2 b988 	b.w	167d4 <sys_clock_tick_get>

000244c4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   244c4:	b108      	cbz	r0, 244ca <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   244c6:	f7e0 b973 	b.w	47b0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   244ca:	4770      	bx	lr

000244cc <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   244cc:	f1b1 3fff 	cmp.w	r1, #4294967295
   244d0:	bf08      	it	eq
   244d2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   244d6:	b538      	push	{r3, r4, r5, lr}
   244d8:	460c      	mov	r4, r1
   244da:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   244dc:	d014      	beq.n	24508 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   244de:	4308      	orrs	r0, r1
   244e0:	d103      	bne.n	244ea <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   244e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   244e6:	f7f2 b975 	b.w	167d4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   244ea:	f06f 0001 	mvn.w	r0, #1
   244ee:	f04f 33ff 	mov.w	r3, #4294967295
   244f2:	1b40      	subs	r0, r0, r5
   244f4:	eb63 0101 	sbc.w	r1, r3, r1
   244f8:	2900      	cmp	r1, #0
   244fa:	da04      	bge.n	24506 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   244fc:	f7f2 f96a 	bl	167d4 <sys_clock_tick_get>
   24500:	1940      	adds	r0, r0, r5
   24502:	eb41 0104 	adc.w	r1, r1, r4
}
   24506:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   24508:	f04f 30ff 	mov.w	r0, #4294967295
   2450c:	4601      	mov	r1, r0
   2450e:	e7fa      	b.n	24506 <sys_clock_timeout_end_calc+0x3a>

00024510 <k_timer_init>:
	timer->status = 0U;
   24510:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   24512:	e9c0 1208 	strd	r1, r2, [r0, #32]
   24516:	f100 0218 	add.w	r2, r0, #24
   2451a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2451e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   24522:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   24524:	6343      	str	r3, [r0, #52]	; 0x34
}
   24526:	4770      	bx	lr

00024528 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24528:	b510      	push	{r4, lr}
   2452a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2452c:	f7ff ff8e 	bl	2444c <z_abort_timeout>

	if (inactive) {
   24530:	b9b0      	cbnz	r0, 24560 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   24532:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24534:	b10b      	cbz	r3, 2453a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24536:	4620      	mov	r0, r4
   24538:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2453a:	f104 0018 	add.w	r0, r4, #24
   2453e:	f7ff feed 	bl	2431c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   24542:	b168      	cbz	r0, 24560 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   24544:	f7ff fea2 	bl	2428c <z_ready_thread>
	__asm__ volatile(
   24548:	f04f 0320 	mov.w	r3, #32
   2454c:	f3ef 8011 	mrs	r0, BASEPRI
   24550:	f383 8812 	msr	BASEPRI_MAX, r3
   24554:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   24558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2455c:	f7ff bf29 	b.w	243b2 <z_reschedule_irqlock>
   24560:	bd10      	pop	{r4, pc}

00024562 <add_event>:
{
   24562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24564:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   24566:	e9d0 1300 	ldrd	r1, r3, [r0]
   2456a:	4288      	cmp	r0, r1
   2456c:	4604      	mov	r4, r0
   2456e:	d105      	bne.n	2457c <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   24570:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   24572:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   24576:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24578:	6065      	str	r5, [r4, #4]
   2457a:	e01d      	b.n	245b8 <add_event+0x56>
	if ((pending == NULL) ||
   2457c:	2b00      	cmp	r3, #0
   2457e:	d0f7      	beq.n	24570 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   24580:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24582:	b100      	cbz	r0, 24586 <add_event+0x24>
   24584:	3860      	subs	r0, #96	; 0x60
   24586:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2458a:	4639      	mov	r1, r7
   2458c:	f7ff fe4d 	bl	2422a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   24590:	2800      	cmp	r0, #0
   24592:	dced      	bgt.n	24570 <add_event+0xe>
	return list->head == list;
   24594:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24596:	42b4      	cmp	r4, r6
   24598:	d0ea      	beq.n	24570 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2459a:	2e00      	cmp	r6, #0
   2459c:	d0e8      	beq.n	24570 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2459e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   245a0:	b101      	cbz	r1, 245a4 <add_event+0x42>
   245a2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   245a4:	4638      	mov	r0, r7
   245a6:	f7ff fe40 	bl	2422a <z_sched_prio_cmp>
   245aa:	2800      	cmp	r0, #0
   245ac:	dd05      	ble.n	245ba <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   245ae:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   245b0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   245b4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   245b6:	6075      	str	r5, [r6, #4]
}
   245b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   245ba:	6863      	ldr	r3, [r4, #4]
   245bc:	429e      	cmp	r6, r3
   245be:	d0d7      	beq.n	24570 <add_event+0xe>
   245c0:	6836      	ldr	r6, [r6, #0]
   245c2:	e7ea      	b.n	2459a <add_event+0x38>

000245c4 <register_events>:
{
   245c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   245c8:	2500      	movs	r5, #0
{
   245ca:	468b      	mov	fp, r1
   245cc:	4614      	mov	r4, r2
   245ce:	461f      	mov	r7, r3
   245d0:	4682      	mov	sl, r0
	int events_registered = 0;
   245d2:	462e      	mov	r6, r5
	event->poller = NULL;
   245d4:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   245d6:	455d      	cmp	r5, fp
   245d8:	db02      	blt.n	245e0 <register_events+0x1c>
}
   245da:	4630      	mov	r0, r6
   245dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245e0:	f04f 0320 	mov.w	r3, #32
   245e4:	f3ef 8911 	mrs	r9, BASEPRI
   245e8:	f383 8812 	msr	BASEPRI_MAX, r3
   245ec:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   245f0:	f89a 300d 	ldrb.w	r3, [sl, #13]
   245f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   245f8:	3b01      	subs	r3, #1
   245fa:	2b07      	cmp	r3, #7
   245fc:	d80f      	bhi.n	2461e <register_events+0x5a>
   245fe:	e8df f003 	tbb	[pc, r3]
   24602:	041e      	.short	0x041e
   24604:	0e0e0a0e 	.word	0x0e0e0a0e
   24608:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2460a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2460e:	689b      	ldr	r3, [r3, #8]
   24610:	b12b      	cbz	r3, 2461e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24612:	2302      	movs	r3, #2
   24614:	e020      	b.n	24658 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   24616:	f8da 3010 	ldr.w	r3, [sl, #16]
   2461a:	681b      	ldr	r3, [r3, #0]
   2461c:	bb8b      	cbnz	r3, 24682 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2461e:	bb47      	cbnz	r7, 24672 <register_events+0xae>
   24620:	7823      	ldrb	r3, [r4, #0]
   24622:	b333      	cbz	r3, 24672 <register_events+0xae>
	switch (event->type) {
   24624:	f89a 300d 	ldrb.w	r3, [sl, #13]
   24628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2462c:	3b01      	subs	r3, #1
   2462e:	2b07      	cmp	r3, #7
   24630:	d830      	bhi.n	24694 <register_events+0xd0>
   24632:	e8df f003 	tbb	[pc, r3]
   24636:	2833      	.short	0x2833
   24638:	2f2f282f 	.word	0x2f2f282f
   2463c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2463e:	f8da 3010 	ldr.w	r3, [sl, #16]
   24642:	689b      	ldr	r3, [r3, #8]
   24644:	2b00      	cmp	r3, #0
   24646:	d0ea      	beq.n	2461e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   24648:	2301      	movs	r3, #1
   2464a:	e005      	b.n	24658 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2464c:	f8da 3010 	ldr.w	r3, [sl, #16]
   24650:	6a1b      	ldr	r3, [r3, #32]
   24652:	2b00      	cmp	r3, #0
   24654:	d0e3      	beq.n	2461e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24656:	2310      	movs	r3, #16
	event->state |= state;
   24658:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2465c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   24660:	f3c2 3186 	ubfx	r1, r2, #14, #7
   24664:	430b      	orrs	r3, r1
   24666:	f363 3294 	bfi	r2, r3, #14, #7
   2466a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2466e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   24672:	f389 8811 	msr	BASEPRI, r9
   24676:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2467a:	3501      	adds	r5, #1
   2467c:	f10a 0a14 	add.w	sl, sl, #20
   24680:	e7a9      	b.n	245d6 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   24682:	2304      	movs	r3, #4
   24684:	e7e8      	b.n	24658 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   24686:	4622      	mov	r2, r4
   24688:	4651      	mov	r1, sl
   2468a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2468e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   24690:	f7ff ff67 	bl	24562 <add_event>
	event->poller = poller;
   24694:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   24698:	3601      	adds	r6, #1
   2469a:	e7ea      	b.n	24672 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2469c:	4622      	mov	r2, r4
   2469e:	4651      	mov	r1, sl
   246a0:	f8da 0010 	ldr.w	r0, [sl, #16]
   246a4:	e7f4      	b.n	24690 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   246a6:	f8da 0010 	ldr.w	r0, [sl, #16]
   246aa:	4622      	mov	r2, r4
   246ac:	4651      	mov	r1, sl
   246ae:	3024      	adds	r0, #36	; 0x24
   246b0:	e7ee      	b.n	24690 <register_events+0xcc>

000246b2 <signal_poll_event>:
{
   246b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   246b6:	6884      	ldr	r4, [r0, #8]
{
   246b8:	4605      	mov	r5, r0
   246ba:	460e      	mov	r6, r1
	if (poller != NULL) {
   246bc:	b144      	cbz	r4, 246d0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   246be:	7863      	ldrb	r3, [r4, #1]
   246c0:	2b01      	cmp	r3, #1
   246c2:	d12e      	bne.n	24722 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   246c4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   246c8:	f013 0302 	ands.w	r3, r3, #2
   246cc:	d10a      	bne.n	246e4 <signal_poll_event+0x32>
		poller->is_polling = false;
   246ce:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   246d0:	2000      	movs	r0, #0
	event->state |= state;
   246d2:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   246d4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   246d6:	f3c3 3286 	ubfx	r2, r3, #14, #7
   246da:	4316      	orrs	r6, r2
   246dc:	f366 3394 	bfi	r3, r6, #14, #7
   246e0:	60eb      	str	r3, [r5, #12]
	return retcode;
   246e2:	e03e      	b.n	24762 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   246e4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   246e8:	f1b3 3fff 	cmp.w	r3, #4294967295
   246ec:	bf08      	it	eq
   246ee:	f112 0f02 	cmneq.w	r2, #2
   246f2:	d032      	beq.n	2475a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   246f4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   246f8:	4640      	mov	r0, r8
   246fa:	f7ff fe42 	bl	24382 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   246fe:	2e08      	cmp	r6, #8
   24700:	bf0c      	ite	eq
   24702:	f06f 0303 	mvneq.w	r3, #3
   24706:	2300      	movne	r3, #0
   24708:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2470a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2470e:	06db      	lsls	r3, r3, #27
   24710:	d109      	bne.n	24726 <signal_poll_event+0x74>
   24712:	f854 7c48 	ldr.w	r7, [r4, #-72]
   24716:	b937      	cbnz	r7, 24726 <signal_poll_event+0x74>
	z_ready_thread(thread);
   24718:	4640      	mov	r0, r8
   2471a:	f7ff fdb7 	bl	2428c <z_ready_thread>
		poller->is_polling = false;
   2471e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   24720:	e7d6      	b.n	246d0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   24722:	2b02      	cmp	r3, #2
   24724:	d001      	beq.n	2472a <signal_poll_event+0x78>
		poller->is_polling = false;
   24726:	2300      	movs	r3, #0
   24728:	e7d1      	b.n	246ce <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2472a:	7823      	ldrb	r3, [r4, #0]
   2472c:	2b00      	cmp	r3, #0
   2472e:	d0cf      	beq.n	246d0 <signal_poll_event+0x1e>
   24730:	f854 7c04 	ldr.w	r7, [r4, #-4]
   24734:	2f00      	cmp	r7, #0
   24736:	d0f2      	beq.n	2471e <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   24738:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2473c:	f1a4 0914 	sub.w	r9, r4, #20
   24740:	f104 0014 	add.w	r0, r4, #20
   24744:	f7ff fe82 	bl	2444c <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   24748:	4649      	mov	r1, r9
   2474a:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2474c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   24750:	f7ff fcf3 	bl	2413a <z_work_submit_to_queue>
		poller->is_polling = false;
   24754:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   24758:	e7ba      	b.n	246d0 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2475a:	2300      	movs	r3, #0
		return -EAGAIN;
   2475c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   24760:	7023      	strb	r3, [r4, #0]
}
   24762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024766 <clear_event_registrations>:
	while (num_events--) {
   24766:	2314      	movs	r3, #20
{
   24768:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   2476a:	2400      	movs	r4, #0
	switch (event->type) {
   2476c:	f44f 768b 	mov.w	r6, #278	; 0x116
   24770:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   24774:	b901      	cbnz	r1, 24778 <clear_event_registrations+0x12>
}
   24776:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   24778:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   2477c:	f1a0 0714 	sub.w	r7, r0, #20
   24780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24784:	2b08      	cmp	r3, #8
	event->poller = NULL;
   24786:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2478a:	d80c      	bhi.n	247a6 <clear_event_registrations+0x40>
   2478c:	fa26 f303 	lsr.w	r3, r6, r3
   24790:	07db      	lsls	r3, r3, #31
   24792:	d508      	bpl.n	247a6 <clear_event_registrations+0x40>
	return node->next != NULL;
   24794:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24798:	b12b      	cbz	r3, 247a6 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2479a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2479e:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   247a0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   247a2:	e940 4405 	strd	r4, r4, [r0, #-20]
   247a6:	f382 8811 	msr	BASEPRI, r2
   247aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   247ae:	f04f 0320 	mov.w	r3, #32
   247b2:	f3ef 8211 	mrs	r2, BASEPRI
   247b6:	f383 8812 	msr	BASEPRI_MAX, r3
   247ba:	f3bf 8f6f 	isb	sy
   247be:	4638      	mov	r0, r7
   247c0:	3901      	subs	r1, #1
   247c2:	e7d7      	b.n	24774 <clear_event_registrations+0xe>

000247c4 <k_poll_event_init>:
{
   247c4:	b510      	push	{r4, lr}
	event->poller = NULL;
   247c6:	2400      	movs	r4, #0
	event->type = type;
   247c8:	0552      	lsls	r2, r2, #21
   247ca:	0209      	lsls	r1, r1, #8
   247cc:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   247d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   247d4:	430a      	orrs	r2, r1
   247d6:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   247d8:	6084      	str	r4, [r0, #8]
	event->type = type;
   247da:	430a      	orrs	r2, r1
	event->obj = obj;
   247dc:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   247e0:	bd10      	pop	{r4, pc}

000247e2 <z_handle_obj_poll_events>:
{
   247e2:	4603      	mov	r3, r0
	return list->head == list;
   247e4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   247e6:	4283      	cmp	r3, r0
   247e8:	d008      	beq.n	247fc <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   247ea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   247ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   247f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   247f2:	2300      	movs	r3, #0
	node->prev = NULL;
   247f4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   247f8:	f7ff bf5b 	b.w	246b2 <signal_poll_event>
}
   247fc:	4770      	bx	lr

000247fe <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   247fe:	3204      	adds	r2, #4
{
   24800:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   24802:	4604      	mov	r4, r0
   24804:	d208      	bcs.n	24818 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   24806:	2600      	movs	r6, #0
   24808:	2700      	movs	r7, #0
   2480a:	f041 0104 	orr.w	r1, r1, #4
   2480e:	e9cd 6700 	strd	r6, r7, [sp]
   24812:	f7ff fa52 	bl	23cba <k_heap_aligned_alloc>
	if (mem == NULL) {
   24816:	b910      	cbnz	r0, 2481e <z_heap_aligned_alloc+0x20>
		return NULL;
   24818:	2000      	movs	r0, #0
}
   2481a:	b002      	add	sp, #8
   2481c:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2481e:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   24822:	e7fa      	b.n	2481a <z_heap_aligned_alloc+0x1c>

00024824 <k_free>:
	if (ptr != NULL) {
   24824:	b120      	cbz	r0, 24830 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   24826:	1f01      	subs	r1, r0, #4
   24828:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2482c:	f7ff ba92 	b.w	23d54 <k_heap_free>
}
   24830:	4770      	bx	lr

00024832 <k_malloc>:
{
   24832:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   24834:	2004      	movs	r0, #4
   24836:	f7f2 b90d 	b.w	16a54 <k_aligned_alloc>

0002483a <k_calloc>:
{
   2483a:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   2483c:	fba0 5401 	umull	r5, r4, r0, r1
   24840:	b924      	cbnz	r4, 2484c <k_calloc+0x12>
	ret = k_malloc(bounds);
   24842:	4628      	mov	r0, r5
   24844:	f7ff fff5 	bl	24832 <k_malloc>
	if (ret != NULL) {
   24848:	4606      	mov	r6, r0
   2484a:	b910      	cbnz	r0, 24852 <k_calloc+0x18>
		return NULL;
   2484c:	2600      	movs	r6, #0
}
   2484e:	4630      	mov	r0, r6
   24850:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   24852:	462a      	mov	r2, r5
   24854:	4621      	mov	r1, r4
   24856:	f7f2 fdbf 	bl	173d8 <memset>
   2485a:	e7f8      	b.n	2484e <k_calloc+0x14>

0002485c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2485c:	4770      	bx	lr
	...
