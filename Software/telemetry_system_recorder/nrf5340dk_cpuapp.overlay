// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html

&spi1 {
    status = "okay";
    cs-gpios = <&gpio0 5 GPIO_ACTIVE_LOW>;
    pinctrl-0 = <&spi1_default>;
    pinctrl-names = "default";
    
    sdhc0: sdhc@0 {
        compatible = "zephyr,sdhc-spi-slot";
        reg = <0>;
        status = "okay";
        mmc {
            compatible = "zephyr,sdmmc-disk";
            status = "okay";
        };
        spi-max-frequency = <24000000>;
	};
};

&spi2 {
    status = "okay";
    cs-gpios = <&gpio1 14 GPIO_ACTIVE_LOW>;
    pinctrl-0 = <&spi2_default>;
    pinctrl-names = "default";

    canbus:mcp2515@0 {
		compatible = "microchip,mcp2515";
		spi-max-frequency = <1000000>;
		int-gpios = <&gpio1 10 (GPIO_ACTIVE_LOW)>; 
		status = "okay";
		label = "CAN_1";
		reg = <0x0>;
		osc-freq = <16000000>;
		bus-speed = <1000000>;
		sjw = <1>;
		prop-seg = <1>;
		phase-seg1 = <4>;
		phase-seg2 = <2>;
		#address-cells = <1>;
		#size-cells = <0>;
	};
};



&pinctrl {
    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 25)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 7)>,
                    <NRF_PSEL(SPIM_MISO, 0, 6)>;
        };
    };

    spi2_default: spi2_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 12)>,
                    <NRF_PSEL(SPIM_MISO, 1, 11)>;
        };
    };

    uart3_default: uart3_default {
        group1 {
            psels = <NRF_PSEL(UART_TX, 0, 27)>, <NRF_PSEL(UART_RX, 1, 15)>;
        };
    };
};

/ {
    buttons {
        sd_detect: sd_detect {
            gpios = <&gpio0 26 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        };
    };

    aliases {
		sddetect = &sd_detect;
	};

    chosen {
		zephyr,canbus = &canbus;
        zephyr,shell-uart-config= &uart3;
	};
};
/delete-node/ &{/pin-controller/i2c1_default/group1/};
/delete-node/ &{/pin-controller/i2c1_sleep/group1/};


&i2c1 {
    status = "disabled";
};

&uart1 {
    status = "disabled";
};

&uart1_default {
    group1 {
        psels = <NRF_PSEL(UART_TX, 0, 27)>;
    };

    group2 {
        psels = <NRF_PSEL(UART_RX, 1, 15)>;
    };
};
/delete-node/ &{/pin-controller/spi4_sleep/group1/};
/delete-node/ &{/pin-controller/spi4_default/group1/};

&spi4 {
    cs-gpios = <&gpio0 3 GPIO_ACTIVE_LOW>;
};
/delete-node/ &{/pin-controller/uart1_sleep/group1/};
/delete-node/ &{/pin-controller/pwm0_default/group1/};
/delete-node/ &{/pin-controller/pwm0_sleep/group1/};

&spi4_default {
    group1 {
        psels = <NRF_PSEL(SPIM_MOSI, 0, 2)>,
                <NRF_PSEL(SPIM_MISO, 0, 1)>,
                <NRF_PSEL(SPIM_SCK, 0, 0)>;
    };
};

&uart2 {
    status = "disabled";
};

&uart3 {
    status = "okay";
    current-speed = <115200>;
    pinctrl-0 = <&uart3_default>;
    pinctrl-names = "default";
};

&kmu {
    status = "okay";
};
